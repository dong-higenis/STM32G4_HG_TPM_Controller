
EX_OLED_BTN_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000261c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  080027f4  080027f4  000037f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f9c  08002f9c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f9c  08002f9c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f9c  08002f9c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f9c  08002f9c  00003f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fa0  08002fa0  00003fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002fa4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002fb0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002fb0  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007972  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac9  00000000  00000000  0000b9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0000d478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001ca3d  00000000  00000000  0000dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009ec9  00000000  00000000  0002a715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b21f9  00000000  00000000  000345de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000e67d7  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000623  00000000  00000000  000e681a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fa0  00000000  00000000  000e6e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e8de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080027dc 	.word	0x080027dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080027dc 	.word	0x080027dc

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022e:	4b56      	ldr	r3, [pc, #344]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a55      	ldr	r2, [pc, #340]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b53      	ldr	r3, [pc, #332]	@ (8000388 <MX_GPIO_Init+0x170>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	613b      	str	r3, [r7, #16]
 8000244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000246:	4b50      	ldr	r3, [pc, #320]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a4f      	ldr	r2, [pc, #316]	@ (8000388 <MX_GPIO_Init+0x170>)
 800024c:	f043 0320 	orr.w	r3, r3, #32
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b4d      	ldr	r3, [pc, #308]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0320 	and.w	r3, r3, #32
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025e:	4b4a      	ldr	r3, [pc, #296]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a49      	ldr	r2, [pc, #292]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b47      	ldr	r3, [pc, #284]	@ (8000388 <MX_GPIO_Init+0x170>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000276:	4b44      	ldr	r3, [pc, #272]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a43      	ldr	r2, [pc, #268]	@ (8000388 <MX_GPIO_Init+0x170>)
 800027c:	f043 0302 	orr.w	r3, r3, #2
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b41      	ldr	r3, [pc, #260]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0302 	and.w	r3, r3, #2
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LINK_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000294:	483d      	ldr	r0, [pc, #244]	@ (800038c <MX_GPIO_Init+0x174>)
 8000296:	f001 f915 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f248 1103 	movw	r1, #33027	@ 0x8103
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a4:	f001 f90e 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 80002ae:	4838      	ldr	r0, [pc, #224]	@ (8000390 <MX_GPIO_Init+0x178>)
 80002b0:	f001 f908 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LINK_LED_Pin STATUS_LED_Pin */
  GPIO_InitStruct.Pin = LINK_LED_Pin|STATUS_LED_Pin;
 80002b4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	2300      	movs	r3, #0
 80002c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	4619      	mov	r1, r3
 80002cc:	482f      	ldr	r0, [pc, #188]	@ (800038c <MX_GPIO_Init+0x174>)
 80002ce:	f000 ff5f 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80002d2:	f248 1303 	movw	r3, #33027	@ 0x8103
 80002d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d8:	2301      	movs	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e0:	2300      	movs	r3, #0
 80002e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	4619      	mov	r1, r3
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ee:	f000 ff4f 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 80002f2:	2301      	movs	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80002f6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80002fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4619      	mov	r1, r3
 8000306:	4822      	ldr	r0, [pc, #136]	@ (8000390 <MX_GPIO_Init+0x178>)
 8000308:	f000 ff42 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN4_Pin;
 800030c:	2306      	movs	r3, #6
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000310:	2300      	movs	r3, #0
 8000312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	4619      	mov	r1, r3
 800031e:	481c      	ldr	r0, [pc, #112]	@ (8000390 <MX_GPIO_Init+0x178>)
 8000320:	f000 ff36 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LCD_RST_Pin;
 8000324:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4619      	mov	r1, r3
 800033c:	4814      	ldr	r0, [pc, #80]	@ (8000390 <MX_GPIO_Init+0x178>)
 800033e:	f000 ff27 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000348:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034e:	2301      	movs	r3, #1
 8000350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035c:	f000 ff18 	bl	8001190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2100      	movs	r1, #0
 8000364:	2006      	movs	r0, #6
 8000366:	f000 fede 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800036a:	2006      	movs	r0, #6
 800036c:	f000 fef5 	bl	800115a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2100      	movs	r1, #0
 8000374:	2017      	movs	r0, #23
 8000376:	f000 fed6 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800037a:	2017      	movs	r0, #23
 800037c:	f000 feed 	bl	800115a <HAL_NVIC_EnableIRQ>

}
 8000380:	bf00      	nop
 8000382:	3728      	adds	r7, #40	@ 0x28
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40021000 	.word	0x40021000
 800038c:	48000800 	.word	0x48000800
 8000390:	48000400 	.word	0x48000400

08000394 <debouncedBTN>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void debouncedBTN(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
  uint32_t now = HAL_GetTick();
 800039a:	f000 fdbb 	bl	8000f14 <HAL_GetTick>
 800039e:	6078      	str	r0, [r7, #4]

  if (btn1_keep && (now - btn1_last_edge) >= DEBOUNCE_MS)
 80003a0:	4b26      	ldr	r3, [pc, #152]	@ (800043c <debouncedBTN+0xa8>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d020      	beq.n	80003ec <debouncedBTN+0x58>
 80003aa:	4b25      	ldr	r3, [pc, #148]	@ (8000440 <debouncedBTN+0xac>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	2b31      	cmp	r3, #49	@ 0x31
 80003b4:	d91a      	bls.n	80003ec <debouncedBTN+0x58>
  {
    btn1_keep = 0;
 80003b6:	4b21      	ldr	r3, [pc, #132]	@ (800043c <debouncedBTN+0xa8>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
    uint8_t cur = (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET);
 80003bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c4:	f001 f866 	bl	8001494 <HAL_GPIO_ReadPin>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	bf0c      	ite	eq
 80003ce:	2301      	moveq	r3, #1
 80003d0:	2300      	movne	r3, #0
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	70fb      	strb	r3, [r7, #3]

    if (cur != btn1_state)
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <debouncedBTN+0xb0>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	78fa      	ldrb	r2, [r7, #3]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d005      	beq.n	80003ec <debouncedBTN+0x58>
    {
      btn1_state = cur;
 80003e0:	4a18      	ldr	r2, [pc, #96]	@ (8000444 <debouncedBTN+0xb0>)
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	7013      	strb	r3, [r2, #0]
      oled_update_needed = 1;
 80003e6:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <debouncedBTN+0xb4>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
    }
  }

  if (btn2_keep && (now - btn2_last_edge) >= DEBOUNCE_MS)
 80003ec:	4b17      	ldr	r3, [pc, #92]	@ (800044c <debouncedBTN+0xb8>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d01e      	beq.n	8000434 <debouncedBTN+0xa0>
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <debouncedBTN+0xbc>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	2b31      	cmp	r3, #49	@ 0x31
 8000400:	d918      	bls.n	8000434 <debouncedBTN+0xa0>
  {
    btn2_keep = 0;
 8000402:	4b12      	ldr	r3, [pc, #72]	@ (800044c <debouncedBTN+0xb8>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
    uint8_t cur = (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET);
 8000408:	2101      	movs	r1, #1
 800040a:	4812      	ldr	r0, [pc, #72]	@ (8000454 <debouncedBTN+0xc0>)
 800040c:	f001 f842 	bl	8001494 <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	bf0c      	ite	eq
 8000416:	2301      	moveq	r3, #1
 8000418:	2300      	movne	r3, #0
 800041a:	b2db      	uxtb	r3, r3
 800041c:	70bb      	strb	r3, [r7, #2]

    if (cur != btn2_state)
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <debouncedBTN+0xc4>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	78ba      	ldrb	r2, [r7, #2]
 8000424:	429a      	cmp	r2, r3
 8000426:	d005      	beq.n	8000434 <debouncedBTN+0xa0>
    {
      btn2_state = cur;
 8000428:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <debouncedBTN+0xc4>)
 800042a:	78bb      	ldrb	r3, [r7, #2]
 800042c:	7013      	strb	r3, [r2, #0]
      oled_update_needed = 1;
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <debouncedBTN+0xb4>)
 8000430:	2201      	movs	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000028 	.word	0x20000028
 8000440:	2000002c 	.word	0x2000002c
 8000444:	20000034 	.word	0x20000034
 8000448:	20000036 	.word	0x20000036
 800044c:	20000029 	.word	0x20000029
 8000450:	20000030 	.word	0x20000030
 8000454:	48000400 	.word	0x48000400
 8000458:	20000035 	.word	0x20000035

0800045c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000462:	f000 fcf2 	bl	8000e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000466:	f000 f879 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046a:	f7ff fed5 	bl	8000218 <MX_GPIO_Init>
  MX_SPI3_Init();
 800046e:	f000 fbcd 	bl	8000c0c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  // 가장 작은 폰트로 첫 글자만
  OLED_init();  // oled 초기화
 8000472:	f000 f969 	bl	8000748 <OLED_init>
  OLED_fill(0); // oled 전체를 검은색으로 칠함
 8000476:	2000      	movs	r0, #0
 8000478:	f000 fa40 	bl	80008fc <OLED_fill>

  // (x좌표, y좌표, String, font, 밝기)
  OLED_drawString(20, 0, "Button List", &font_07x10, 15); // 화면 위쪽
 800047c:	230f      	movs	r3, #15
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	4b2d      	ldr	r3, [pc, #180]	@ (8000538 <main+0xdc>)
 8000482:	4a2e      	ldr	r2, [pc, #184]	@ (800053c <main+0xe0>)
 8000484:	2100      	movs	r1, #0
 8000486:	2014      	movs	r0, #20
 8000488:	f000 fb89 	bl	8000b9e <OLED_drawString>
  OLED_drawString(0, 20, "Button1", &font_07x10, 15);     // 화면 왼쪽
 800048c:	230f      	movs	r3, #15
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	4b29      	ldr	r3, [pc, #164]	@ (8000538 <main+0xdc>)
 8000492:	4a2b      	ldr	r2, [pc, #172]	@ (8000540 <main+0xe4>)
 8000494:	2114      	movs	r1, #20
 8000496:	2000      	movs	r0, #0
 8000498:	f000 fb81 	bl	8000b9e <OLED_drawString>
  OLED_drawString(60, 20, "OFF", &font_07x10, 1);         // 화면 중앙, OFF는 어둡게...
 800049c:	2301      	movs	r3, #1
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	4b25      	ldr	r3, [pc, #148]	@ (8000538 <main+0xdc>)
 80004a2:	4a28      	ldr	r2, [pc, #160]	@ (8000544 <main+0xe8>)
 80004a4:	2114      	movs	r1, #20
 80004a6:	203c      	movs	r0, #60	@ 0x3c
 80004a8:	f000 fb79 	bl	8000b9e <OLED_drawString>
  OLED_drawString(0, 40, "Button2", &font_07x10, 15);     // Button1 아래
 80004ac:	230f      	movs	r3, #15
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	4b21      	ldr	r3, [pc, #132]	@ (8000538 <main+0xdc>)
 80004b2:	4a25      	ldr	r2, [pc, #148]	@ (8000548 <main+0xec>)
 80004b4:	2128      	movs	r1, #40	@ 0x28
 80004b6:	2000      	movs	r0, #0
 80004b8:	f000 fb71 	bl	8000b9e <OLED_drawString>
  OLED_drawString(60, 40, "OFF", &font_07x10, 1);
 80004bc:	2301      	movs	r3, #1
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000538 <main+0xdc>)
 80004c2:	4a20      	ldr	r2, [pc, #128]	@ (8000544 <main+0xe8>)
 80004c4:	2128      	movs	r1, #40	@ 0x28
 80004c6:	203c      	movs	r0, #60	@ 0x3c
 80004c8:	f000 fb69 	bl	8000b9e <OLED_drawString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    debouncedBTN();
 80004cc:	f7ff ff62 	bl	8000394 <debouncedBTN>
    // 인터럽트에서 플래그가 설정되면 OLED 업데이트
    if (oled_update_needed)
 80004d0:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <main+0xf0>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d02a      	beq.n	8000530 <main+0xd4>
    {
      oled_update_needed = 0; // 플래그 클리어
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <main+0xf0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]

      // OLED 업데이트
      OLED_drawString(60, 20, btn1_state ? "ON " : "OFF",
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <main+0xf4>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <main+0x90>
 80004e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000554 <main+0xf8>)
 80004ea:	e000      	b.n	80004ee <main+0x92>
 80004ec:	4a15      	ldr	r2, [pc, #84]	@ (8000544 <main+0xe8>)
                      &font_07x10, btn1_state ? BRIGHT_ON : BRIGHT_LOW);
 80004ee:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <main+0xf4>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
      OLED_drawString(60, 20, btn1_state ? "ON " : "OFF",
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <main+0x9e>
 80004f6:	230f      	movs	r3, #15
 80004f8:	e000      	b.n	80004fc <main+0xa0>
 80004fa:	2301      	movs	r3, #1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <main+0xdc>)
 8000500:	2114      	movs	r1, #20
 8000502:	203c      	movs	r0, #60	@ 0x3c
 8000504:	f000 fb4b 	bl	8000b9e <OLED_drawString>
      OLED_drawString(60, 40, btn2_state ? "ON " : "OFF",
 8000508:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <main+0xfc>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <main+0xb8>
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <main+0xf8>)
 8000512:	e000      	b.n	8000516 <main+0xba>
 8000514:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <main+0xe8>)
                      &font_07x10, btn2_state ? BRIGHT_ON : BRIGHT_LOW);
 8000516:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <main+0xfc>)
 8000518:	781b      	ldrb	r3, [r3, #0]
      OLED_drawString(60, 40, btn2_state ? "ON " : "OFF",
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <main+0xc6>
 800051e:	230f      	movs	r3, #15
 8000520:	e000      	b.n	8000524 <main+0xc8>
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	4b04      	ldr	r3, [pc, #16]	@ (8000538 <main+0xdc>)
 8000528:	2128      	movs	r1, #40	@ 0x28
 800052a:	203c      	movs	r0, #60	@ 0x3c
 800052c:	f000 fb37 	bl	8000b9e <OLED_drawString>
    }

    // 메인 루프에서는 다른 작업 가능
    HAL_Delay(10);
 8000530:	200a      	movs	r0, #10
 8000532:	f000 fcfb 	bl	8000f2c <HAL_Delay>
    debouncedBTN();
 8000536:	e7c9      	b.n	80004cc <main+0x70>
 8000538:	08002f84 	.word	0x08002f84
 800053c:	080027f4 	.word	0x080027f4
 8000540:	08002800 	.word	0x08002800
 8000544:	08002808 	.word	0x08002808
 8000548:	0800280c 	.word	0x0800280c
 800054c:	20000036 	.word	0x20000036
 8000550:	20000034 	.word	0x20000034
 8000554:	08002814 	.word	0x08002814
 8000558:	20000035 	.word	0x20000035

0800055c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	@ 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 f90a 	bl	8002784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 ffd0 	bl	8001524 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	2303      	movs	r3, #3
 8000594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000596:	2301      	movs	r3, #1
 8000598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800059a:	2328      	movs	r3, #40	@ 0x28
 800059c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 f86c 	bl	800168c <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005ba:	f000 f841 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005be:	230f      	movs	r3, #15
 80005c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2104      	movs	r1, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fb6a 	bl	8001cb0 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005e2:	f000 f82d 	bl	8000640 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	@ 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief 콜백은 버튼의 변화만을 감지하는 역할입니다.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  uint32_t now = HAL_GetTick();
 80005fa:	f000 fc8b 	bl	8000f14 <HAL_GetTick>
 80005fe:	60f8      	str	r0, [r7, #12]

  if (GPIO_Pin == BTN1_Pin)
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000606:	d105      	bne.n	8000614 <HAL_GPIO_EXTI_Callback+0x24>
  {
    btn1_last_edge = now;
 8000608:	4a09      	ldr	r2, [pc, #36]	@ (8000630 <HAL_GPIO_EXTI_Callback+0x40>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6013      	str	r3, [r2, #0]
    btn1_keep = 1;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <HAL_GPIO_EXTI_Callback+0x44>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
  }

  if (GPIO_Pin == BTN2_Pin)
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d105      	bne.n	8000626 <HAL_GPIO_EXTI_Callback+0x36>
  {
    btn2_last_edge = now;
 800061a:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <HAL_GPIO_EXTI_Callback+0x48>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	6013      	str	r3, [r2, #0]
    btn2_keep = 1;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
  }
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000002c 	.word	0x2000002c
 8000634:	20000028 	.word	0x20000028
 8000638:	20000030 	.word	0x20000030
 800063c:	20000029 	.word	0x20000029

08000640 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <Error_Handler+0x8>

0800064c <OLED_write_cmd>:
 *
 */

// 명령어 1바이트 전송
static void OLED_write_cmd(uint8_t cmd)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  DC_CMD();                                         // DC=0, 명령 모드
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800065c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000660:	f000 ff30 	bl	80014c4 <HAL_GPIO_WritePin>
  CS_L();                                           // CS=0, OLED 칩 선택
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800066a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066e:	f000 ff29 	bl	80014c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY); // SPI로 1바이트 명령 전송
 8000672:	1df9      	adds	r1, r7, #7
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	2201      	movs	r2, #1
 800067a:	4807      	ldr	r0, [pc, #28]	@ (8000698 <OLED_write_cmd+0x4c>)
 800067c:	f001 fda7 	bl	80021ce <HAL_SPI_Transmit>
  CS_H();                                           // CS=1, 전송 끝
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000686:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068a:	f000 ff1b 	bl	80014c4 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000038 	.word	0x20000038

0800069c <OLED_write_data>:

// 데이터 다중 바이트 전송
static void OLED_write_data(const uint8_t *p, uint16_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
  DC_DATA();                                                  // DC=1, 데이터 모드
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b2:	f000 ff07 	bl	80014c4 <HAL_GPIO_WritePin>
  CS_L();                                                     // CS=0, 칩 선택
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c0:	f000 ff00 	bl	80014c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)p, len, HAL_MAX_DELAY); // 데이터 블록 전송
 80006c4:	887a      	ldrh	r2, [r7, #2]
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <OLED_write_data+0x4c>)
 80006ce:	f001 fd7e 	bl	80021ce <HAL_SPI_Transmit>
  CS_H();                                                     // CS=1, 전송 끝
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f000 fef2 	bl	80014c4 <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000038 	.word	0x20000038

080006ec <OLED_set_window>:
 * - 이후 WRITERAM(0x5C) 명령을 주면 해당 영역에 데이터를 순서대로 써진다.
 */

static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4604      	mov	r4, r0
 80006f4:	4608      	mov	r0, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	461a      	mov	r2, r3
 80006fa:	4623      	mov	r3, r4
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	4603      	mov	r3, r0
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	460b      	mov	r3, r1
 8000704:	717b      	strb	r3, [r7, #5]
 8000706:	4613      	mov	r3, r2
 8000708:	713b      	strb	r3, [r7, #4]
  // Column (가로 영역) 지정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 800070a:	2015      	movs	r0, #21
 800070c:	f7ff ff9e 	bl	800064c <OLED_write_cmd>
  uint8_t col[2] = {col_start, col_end};
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	733b      	strb	r3, [r7, #12]
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2102      	movs	r1, #2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffbc 	bl	800069c <OLED_write_data>

  // Row (세로 영역) 지정
  OLED_write_cmd(OLED_SETROWADDR);
 8000724:	2075      	movs	r0, #117	@ 0x75
 8000726:	f7ff ff91 	bl	800064c <OLED_write_cmd>
  uint8_t row[2] = {row_start, row_end};
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	723b      	strb	r3, [r7, #8]
 800072e:	793b      	ldrb	r3, [r7, #4]
 8000730:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ffaf 	bl	800069c <OLED_write_data>
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bd90      	pop	{r4, r7, pc}
	...

08000748 <OLED_init>:
 * - 전원 인가 후 반드시 필요한 설정 시퀀스
 * - 데이터시트에 나온 권장 초기화 값들을 대부분 포함
 */

void OLED_init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
  // 0. 하드웨어 리셋
  RST_L();
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000754:	4867      	ldr	r0, [pc, #412]	@ (80008f4 <OLED_init+0x1ac>)
 8000756:	f000 feb5 	bl	80014c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f000 fbe6 	bl	8000f2c <HAL_Delay>
  RST_H();
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000766:	4863      	ldr	r0, [pc, #396]	@ (80008f4 <OLED_init+0x1ac>)
 8000768:	f000 feac 	bl	80014c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800076c:	200a      	movs	r0, #10
 800076e:	f000 fbdd 	bl	8000f2c <HAL_Delay>

  // 1. 화면 끄기 (설정은 반드시 OFF 상태에서 해야 함)
  OLED_write_cmd(OLED_DISPLAYOFF);
 8000772:	20ae      	movs	r0, #174	@ 0xae
 8000774:	f7ff ff6a 	bl	800064c <OLED_write_cmd>

  // 2. 명령어 잠금 해제 (모든 명령 사용 가능)
  OLED_write_cmd(OLED_SETCOMMANDLOCK);
 8000778:	20fd      	movs	r0, #253	@ 0xfd
 800077a:	f7ff ff67 	bl	800064c <OLED_write_cmd>
  temp = 0x12;
 800077e:	4b5e      	ldr	r3, [pc, #376]	@ (80008f8 <OLED_init+0x1b0>)
 8000780:	2212      	movs	r2, #18
 8000782:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 8000784:	2101      	movs	r1, #1
 8000786:	485c      	ldr	r0, [pc, #368]	@ (80008f8 <OLED_init+0x1b0>)
 8000788:	f7ff ff88 	bl	800069c <OLED_write_data>

  // 3. 클럭 설정 (화면 동작 속도 관련)
  OLED_write_cmd(OLED_SETCLOCKDIVIDER);
 800078c:	20b3      	movs	r0, #179	@ 0xb3
 800078e:	f7ff ff5d 	bl	800064c <OLED_write_cmd>
  temp = 0x91; // 분주비=1, 오실레이터=9
 8000792:	4b59      	ldr	r3, [pc, #356]	@ (80008f8 <OLED_init+0x1b0>)
 8000794:	2291      	movs	r2, #145	@ 0x91
 8000796:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 8000798:	2101      	movs	r1, #1
 800079a:	4857      	ldr	r0, [pc, #348]	@ (80008f8 <OLED_init+0x1b0>)
 800079c:	f7ff ff7e 	bl	800069c <OLED_write_data>

  // 4. 세로 해상도 (라인 수 = 64)
  OLED_write_cmd(OLED_SETMUXRATIO);
 80007a0:	20ca      	movs	r0, #202	@ 0xca
 80007a2:	f7ff ff53 	bl	800064c <OLED_write_cmd>
  temp = 0x3F; // 63+1 = 64라인
 80007a6:	4b54      	ldr	r3, [pc, #336]	@ (80008f8 <OLED_init+0x1b0>)
 80007a8:	223f      	movs	r2, #63	@ 0x3f
 80007aa:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 80007ac:	2101      	movs	r1, #1
 80007ae:	4852      	ldr	r0, [pc, #328]	@ (80008f8 <OLED_init+0x1b0>)
 80007b0:	f7ff ff74 	bl	800069c <OLED_write_data>

  // 5. 화면 세로 오프셋 (위/아래로 밀기)
  OLED_write_cmd(OLED_SETDISPLAYOFFSET);
 80007b4:	20a2      	movs	r0, #162	@ 0xa2
 80007b6:	f7ff ff49 	bl	800064c <OLED_write_cmd>
  temp = 0x00; // 안 밀기
 80007ba:	4b4f      	ldr	r3, [pc, #316]	@ (80008f8 <OLED_init+0x1b0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 80007c0:	2101      	movs	r1, #1
 80007c2:	484d      	ldr	r0, [pc, #308]	@ (80008f8 <OLED_init+0x1b0>)
 80007c4:	f7ff ff6a 	bl	800069c <OLED_write_data>

  // 6. 시작 라인 (RAM에서 0번 라인부터 출력)
  OLED_write_cmd(OLED_SETSTARTLINE);
 80007c8:	20a1      	movs	r0, #161	@ 0xa1
 80007ca:	f7ff ff3f 	bl	800064c <OLED_write_cmd>
  temp = 0x00;
 80007ce:	4b4a      	ldr	r3, [pc, #296]	@ (80008f8 <OLED_init+0x1b0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 80007d4:	2101      	movs	r1, #1
 80007d6:	4848      	ldr	r0, [pc, #288]	@ (80008f8 <OLED_init+0x1b0>)
 80007d8:	f7ff ff60 	bl	800069c <OLED_write_data>

  // 7. 화면 배치 (좌우/상하 반전, nibble 스왑 등)
  OLED_write_cmd(OLED_SETREMAP);
 80007dc:	20a0      	movs	r0, #160	@ 0xa0
 80007de:	f7ff ff35 	bl	800064c <OLED_write_cmd>
  uint8_t remap[2] = {0x14, 0x11}; // 보편적인 설정
 80007e2:	f241 1314 	movw	r3, #4372	@ 0x1114
 80007e6:	81bb      	strh	r3, [r7, #12]
  OLED_write_data(remap, 2);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff54 	bl	800069c <OLED_write_data>

  // 8. GPIO 비활성화 (안 씀)
  OLED_write_cmd(OLED_SETGPIO);
 80007f4:	20b5      	movs	r0, #181	@ 0xb5
 80007f6:	f7ff ff29 	bl	800064c <OLED_write_cmd>
  temp = 0x00;
 80007fa:	4b3f      	ldr	r3, [pc, #252]	@ (80008f8 <OLED_init+0x1b0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 8000800:	2101      	movs	r1, #1
 8000802:	483d      	ldr	r0, [pc, #244]	@ (80008f8 <OLED_init+0x1b0>)
 8000804:	f7ff ff4a 	bl	800069c <OLED_write_data>

  // 9. 내부 전원(VDD) 사용
  OLED_write_cmd(OLED_FUNCTIONSELECT);
 8000808:	20ab      	movs	r0, #171	@ 0xab
 800080a:	f7ff ff1f 	bl	800064c <OLED_write_cmd>
  temp = 0x01;
 800080e:	4b3a      	ldr	r3, [pc, #232]	@ (80008f8 <OLED_init+0x1b0>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 8000814:	2101      	movs	r1, #1
 8000816:	4838      	ldr	r0, [pc, #224]	@ (80008f8 <OLED_init+0x1b0>)
 8000818:	f7ff ff40 	bl	800069c <OLED_write_data>

  // 10. 화면 향상 A (화질 최적화)
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 800081c:	20b4      	movs	r0, #180	@ 0xb4
 800081e:	f7ff ff15 	bl	800064c <OLED_write_cmd>
  uint8_t enhA[2] = {0xA0, 0xFD};
 8000822:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 8000826:	813b      	strh	r3, [r7, #8]
  OLED_write_data(enhA, 2);
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff34 	bl	800069c <OLED_write_data>

  // 11. 밝기 (세그먼트 전류, 0~255)
  OLED_write_cmd(OLED_SETCONTRAST);
 8000834:	20c1      	movs	r0, #193	@ 0xc1
 8000836:	f7ff ff09 	bl	800064c <OLED_write_cmd>
  temp = 0xFF; // 최대 밝기
 800083a:	4b2f      	ldr	r3, [pc, #188]	@ (80008f8 <OLED_init+0x1b0>)
 800083c:	22ff      	movs	r2, #255	@ 0xff
 800083e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 8000840:	2101      	movs	r1, #1
 8000842:	482d      	ldr	r0, [pc, #180]	@ (80008f8 <OLED_init+0x1b0>)
 8000844:	f7ff ff2a 	bl	800069c <OLED_write_data>

  // 12. 밝기 전체 스케일 (0~15)
  OLED_write_cmd(OLED_MASTERCURRENT);
 8000848:	20c7      	movs	r0, #199	@ 0xc7
 800084a:	f7ff feff 	bl	800064c <OLED_write_cmd>
  temp = 0x0F; // 최대
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <OLED_init+0x1b0>)
 8000850:	220f      	movs	r2, #15
 8000852:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 8000854:	2101      	movs	r1, #1
 8000856:	4828      	ldr	r0, [pc, #160]	@ (80008f8 <OLED_init+0x1b0>)
 8000858:	f7ff ff20 	bl	800069c <OLED_write_data>

  // 13. 기본 그레이스케일 테이블 사용
  OLED_write_cmd(OLED_DEFAULTGRAYSCALE);
 800085c:	20b9      	movs	r0, #185	@ 0xb9
 800085e:	f7ff fef5 	bl	800064c <OLED_write_cmd>

  // 14. 신호 타이밍 (화면 깜빡임/잔상 관련)
  OLED_write_cmd(OLED_SETPHASELENGTH);
 8000862:	20b1      	movs	r0, #177	@ 0xb1
 8000864:	f7ff fef2 	bl	800064c <OLED_write_cmd>
  temp = 0xE2;
 8000868:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <OLED_init+0x1b0>)
 800086a:	22e2      	movs	r2, #226	@ 0xe2
 800086c:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 800086e:	2101      	movs	r1, #1
 8000870:	4821      	ldr	r0, [pc, #132]	@ (80008f8 <OLED_init+0x1b0>)
 8000872:	f7ff ff13 	bl	800069c <OLED_write_data>

  // 15. 화면 향상 B
  OLED_write_cmd(OLED_DISPLAYENHANCE_B);
 8000876:	20d1      	movs	r0, #209	@ 0xd1
 8000878:	f7ff fee8 	bl	800064c <OLED_write_cmd>
  uint8_t enhB[2] = {0x82, 0x20};
 800087c:	f242 0382 	movw	r3, #8322	@ 0x2082
 8000880:	80bb      	strh	r3, [r7, #4]
  OLED_write_data(enhB, 2);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2102      	movs	r1, #2
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff08 	bl	800069c <OLED_write_data>

  // 16. 프리차지 전압
  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE);
 800088c:	20bb      	movs	r0, #187	@ 0xbb
 800088e:	f7ff fedd 	bl	800064c <OLED_write_cmd>
  temp = 0x1F;
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <OLED_init+0x1b0>)
 8000894:	221f      	movs	r2, #31
 8000896:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 8000898:	2101      	movs	r1, #1
 800089a:	4817      	ldr	r0, [pc, #92]	@ (80008f8 <OLED_init+0x1b0>)
 800089c:	f7ff fefe 	bl	800069c <OLED_write_data>

  // 17. 두 번째 프리차지 기간
  OLED_write_cmd(OLED_SETSECONDPRECHARGE);
 80008a0:	20b6      	movs	r0, #182	@ 0xb6
 80008a2:	f7ff fed3 	bl	800064c <OLED_write_cmd>
  temp = 0x08;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <OLED_init+0x1b0>)
 80008a8:	2208      	movs	r2, #8
 80008aa:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 80008ac:	2101      	movs	r1, #1
 80008ae:	4812      	ldr	r0, [pc, #72]	@ (80008f8 <OLED_init+0x1b0>)
 80008b0:	f7ff fef4 	bl	800069c <OLED_write_data>

  // 18. 출력 전압 범위 (VCOMH)
  OLED_write_cmd(OLED_SETVCOMH);
 80008b4:	20be      	movs	r0, #190	@ 0xbe
 80008b6:	f7ff fec9 	bl	800064c <OLED_write_cmd>
  temp = 0x07;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <OLED_init+0x1b0>)
 80008bc:	2207      	movs	r2, #7
 80008be:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&temp, 1);
 80008c0:	2101      	movs	r1, #1
 80008c2:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <OLED_init+0x1b0>)
 80008c4:	f7ff feea 	bl	800069c <OLED_write_data>

  // 19. 일반 디스플레이 모드
  OLED_write_cmd(OLED_NORMALDISPLAY);
 80008c8:	20a6      	movs	r0, #166	@ 0xa6
 80008ca:	f7ff febf 	bl	800064c <OLED_write_cmd>

  // 20. 부분 모드 해제
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);
 80008ce:	20a9      	movs	r0, #169	@ 0xa9
 80008d0:	f7ff febc 	bl	800064c <OLED_write_cmd>

  // 21. 전체 화면 영역 지정 (256x64)
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80008d4:	233f      	movs	r3, #63	@ 0x3f
 80008d6:	2200      	movs	r2, #0
 80008d8:	215b      	movs	r1, #91	@ 0x5b
 80008da:	201c      	movs	r0, #28
 80008dc:	f7ff ff06 	bl	80006ec <OLED_set_window>

  // 22. 화면 켜기
  OLED_write_cmd(OLED_DISPLAYON);
 80008e0:	20af      	movs	r0, #175	@ 0xaf
 80008e2:	f7ff feb3 	bl	800064c <OLED_write_cmd>
  HAL_Delay(50);
 80008e6:	2032      	movs	r0, #50	@ 0x32
 80008e8:	f000 fb20 	bl	8000f2c <HAL_Delay>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	48000400 	.word	0x48000400
 80008f8:	20000037 	.word	0x20000037

080008fc <OLED_fill>:
 * @brief 화면 전체를 단색으로 채우는 함수
 * - gray : 0~15 (4비트 값, 0=검정 ~ 15=흰색)
 */

void OLED_fill(uint8_t gray)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0a4      	sub	sp, #144	@ 0x90
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  // gray 값을 상위/하위 nibble 모두 채운 1바이트 패턴으로 변환
  uint8_t grayed = (gray << 4) | gray;
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	b25a      	sxtb	r2, r3
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	4313      	orrs	r3, r2
 8000914:	b25b      	sxtb	r3, r3
 8000916:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

  // 한 줄 데이터 (256픽셀 / 2 = 128바이트)
  uint8_t line[OLED_W / 2];
  memset(line, grayed, sizeof(line));
 800091a:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	2280      	movs	r2, #128	@ 0x80
 8000924:	4618      	mov	r0, r3
 8000926:	f001 ff2d 	bl	8002784 <memset>

  // 전체 영역 지정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 800092a:	233f      	movs	r3, #63	@ 0x3f
 800092c:	2200      	movs	r2, #0
 800092e:	215b      	movs	r1, #91	@ 0x5b
 8000930:	201c      	movs	r0, #28
 8000932:	f7ff fedb 	bl	80006ec <OLED_set_window>

  // RAM 쓰기 시작
  OLED_write_cmd(OLED_WRITERAM);
 8000936:	205c      	movs	r0, #92	@ 0x5c
 8000938:	f7ff fe88 	bl	800064c <OLED_write_cmd>

  // 64줄 반복해서 같은 라인 데이터를 써 넣음
  for (int y = 0; y < OLED_H; y++)
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000942:	e00a      	b.n	800095a <OLED_fill+0x5e>
  {
    OLED_write_data(line, sizeof(line));
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fea6 	bl	800069c <OLED_write_data>
  for (int y = 0; y < OLED_H; y++)
 8000950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000954:	3301      	adds	r3, #1
 8000956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800095a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800095e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000960:	ddf0      	ble.n	8000944 <OLED_fill+0x48>
  }
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3790      	adds	r7, #144	@ 0x90
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <COL_from_x>:
 * @brief 좌표 관련 함수
 */

// 픽셀의 x좌표 -> OLED의 column 바이트 주소
static uint8_t COL_from_x(int x)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  // 4bpp에서는 2픽셀당 1바이트이므로 x를 2로 나눔
  return OLED_COL_START + (x >> 1); // x >> 1은 x / 2와 같음
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	105b      	asrs	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	331c      	adds	r3, #28
 800097c:	b2db      	uxtb	r3, r3
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <ROW_from_y>:

// 픽셀의 y좌표를 OLED의 row 주소로 변환
static uint8_t ROW_from_y(int y)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y; // y좌표는 그대로 사용
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	b2db      	uxtb	r3, r3
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <OLED_drawChar>:
 * @brief 문자 출력 함수
 */

// 하나의 문자를 화면에 그리는 함수
void OLED_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b0ae      	sub	sp, #184	@ 0xb8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4613      	mov	r3, r2
 80009b0:	71fb      	strb	r3, [r7, #7]
  // 1단계: 입력값 검증
  if (ch < 32 || ch > 126)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b1f      	cmp	r3, #31
 80009b6:	f240 80ea 	bls.w	8000b8e <OLED_drawChar+0x1ec>
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80009be:	f200 80e6 	bhi.w	8000b8e <OLED_drawChar+0x1ec>
  {
    return; // 출력 가능한 ASCII 문자만 허용
  }
  if (gray > 15)
 80009c2:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d902      	bls.n	80009d0 <OLED_drawChar+0x2e>
  {
    gray = 15; // 최대 밝기 제한
 80009ca:	230f      	movs	r3, #15
 80009cc:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
  }

  // 2단계: 화면 범위 검사
  if (x < 0 || (x + font->width) > OLED_W)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f2c0 80dd 	blt.w	8000b92 <OLED_drawChar+0x1f0>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4413      	add	r3, r2
 80009e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009e6:	f300 80d4 	bgt.w	8000b92 <OLED_drawChar+0x1f0>
  {
    return; // 가로 범위 초과
  }

  if (y < 0 || (y + font->height) > OLED_H)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f2c0 80d2 	blt.w	8000b96 <OLED_drawChar+0x1f4>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	461a      	mov	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4413      	add	r3, r2
 80009fc:	2b40      	cmp	r3, #64	@ 0x40
 80009fe:	f300 80ca 	bgt.w	8000b96 <OLED_drawChar+0x1f4>
  {
    return; // 세로 범위 초과
  }

  // 3단계: 폰트 데이터에서 문자 찾기
  const int stride = font->height;                 // 한 문자 데이터 줄 수
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	785b      	ldrb	r3, [r3, #1]
 8000a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start = (ch - 32) * stride;            // 문자 데이터 시작 위치 ('A'는 65-32=33번째)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f1a3 0220 	sub.w	r2, r3, #32
 8000a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000a14:	fb02 f303 	mul.w	r3, r2, r3
 8000a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2; // 한 줄당 필요한 바이트 수
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	0fda      	lsrs	r2, r3, #31
 8000a24:	4413      	add	r3, r2
 8000a26:	105b      	asrs	r3, r3, #1
 8000a28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W / 2]; // 한 줄 데이터를 저장할 버퍼

  // 4단계: 문자의 각 줄을 처리
  for (int row = 0; row < font->height; row++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000a32:	e0a3      	b.n	8000b7c <OLED_drawChar+0x1da>
  {
    // 폰트 데이터에서 현재 줄의 비트맵 가져오기
    uint16_t mask = font->data[start + row];
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8000a3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a40:	440b      	add	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    // 줄 버퍼를 0으로 초기화 (배경색)
    memset(linebuf, 0x00, bytes_per_row);
 8000a4c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fe94 	bl	8002784 <memset>

    // 5단계: 각 픽셀을 처리 (왼쪽부터 오른쪽으로)
    for (int col = 0; col < font->width; col++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a62:	e04f      	b.n	8000b04 <OLED_drawChar+0x162>
    {
      int byte_idx = (col >> 1);          // 현재 픽셀이 들어갈 바이트 위치
 8000a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000a68:	105b      	asrs	r3, r3, #1
 8000a6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0); // 바이트의 왼쪽 4bit인지 오른쪽 4bit인지
 8000a6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf0c      	ite	eq
 8000a7a:	2301      	moveq	r3, #1
 8000a7c:	2300      	movne	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      // 현재 픽셀이 켜져있는지 확인
      if (mask & (0x8000 >> col)) // 0x8000에서 오른쪽으로 col번 이동한 비트 확인
 8000a84:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8000a88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000a90:	fa41 f303 	asr.w	r3, r1, r3
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d02f      	beq.n	8000afa <OLED_drawChar+0x158>
      {
        // 픽셀이 켜져있으면 해당 위치에 색상 설정
        if (left_nibble)
 8000a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d015      	beq.n	8000ace <OLED_drawChar+0x12c>
        {
          linebuf[byte_idx] |= (gray << 4); // 왼쪽 4bit에 색상
 8000aa2:	f107 0214 	add.w	r2, r7, #20
 8000aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25a      	sxtb	r2, r3
 8000ab0:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8000ab4:	011b      	lsls	r3, r3, #4
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	b2d9      	uxtb	r1, r3
 8000abe:	f107 0214 	add.w	r2, r7, #20
 8000ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ac6:	4413      	add	r3, r2
 8000ac8:	460a      	mov	r2, r1
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	e015      	b.n	8000afa <OLED_drawChar+0x158>
        }
        else
        {
          linebuf[byte_idx] |= (gray & 0x0F); // 오른쪽 4bit에 색상
 8000ace:	f107 0214 	add.w	r2, r7, #20
 8000ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b25a      	sxtb	r2, r3
 8000adc:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8000ae0:	f003 030f 	and.w	r3, r3, #15
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	b2d9      	uxtb	r1, r3
 8000aec:	f107 0214 	add.w	r2, r7, #20
 8000af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000af4:	4413      	add	r3, r2
 8000af6:	460a      	mov	r2, r1
 8000af8:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8000afa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000afe:	3301      	adds	r3, #1
 8000b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	dba8      	blt.n	8000a64 <OLED_drawChar+0xc2>
        }
      }
    }

    // 6단계: 현재 줄을 OLED에 전송
    uint8_t col_start = COL_from_x(x);               // 시작 column 주소
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff ff2a 	bl	800096c <COL_from_x>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end = col_start + bytes_per_row - 1; // 끝 column 주소
 8000b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8000b28:	4413      	add	r3, r2
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr = ROW_from_y(y + row);          // 현재 row 주소
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b38:	4413      	add	r3, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff25 	bl	800098a <ROW_from_y>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr); // 그리기 영역 설정
 8000b46:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000b4a:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000b4e:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8000b52:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 8000b56:	f7ff fdc9 	bl	80006ec <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);                           // 메모리 쓰기 시작
 8000b5a:	205c      	movs	r0, #92	@ 0x5c
 8000b5c:	f7ff fd76 	bl	800064c <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);                 // 데이터 전송
 8000b60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fd95 	bl	800069c <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 8000b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b76:	3301      	adds	r3, #1
 8000b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	461a      	mov	r2, r3
 8000b82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f6ff af54 	blt.w	8000a34 <OLED_drawChar+0x92>
 8000b8c:	e004      	b.n	8000b98 <OLED_drawChar+0x1f6>
    return; // 출력 가능한 ASCII 문자만 허용
 8000b8e:	bf00      	nop
 8000b90:	e002      	b.n	8000b98 <OLED_drawChar+0x1f6>
    return; // 가로 범위 초과
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <OLED_drawChar+0x1f6>
    return; // 세로 범위 초과
 8000b96:	bf00      	nop
  }
}
 8000b98:	37b8      	adds	r7, #184	@ 0xb8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <OLED_drawString>:

/* 문자열을 화면에 그리는 함수 */
void OLED_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b088      	sub	sp, #32
 8000ba2:	af02      	add	r7, sp, #8
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	603b      	str	r3, [r7, #0]
  int c_x = x;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	617b      	str	r3, [r7, #20]
  int c_y = y; // 현재 커서 위치
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	613b      	str	r3, [r7, #16]

  // 문자열의 끝까지 반복
  while (*str)
 8000bb4:	e020      	b.n	8000bf8 <OLED_drawString+0x5a>
  {
    if (*str == '\n')
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b0a      	cmp	r3, #10
 8000bbc:	d108      	bne.n	8000bd0 <OLED_drawString+0x32>
    {
      c_y += font->height + 1; // 다음 줄로 이동 (+1은 줄 간격)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
      c_x = x;                 // 맨 왼쪽으로 돌아가기
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	e010      	b.n	8000bf2 <OLED_drawString+0x54>
    }

    else if (*str != '\r')
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b0d      	cmp	r3, #13
 8000bd6:	d00c      	beq.n	8000bf2 <OLED_drawString+0x54>
    {
      OLED_drawChar(c_x, c_y, *str, font, gray); // 현재 위치에 문자 그리기
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	6939      	ldr	r1, [r7, #16]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff fedb 	bl	80009a2 <OLED_drawChar>
      c_x += 4;                                 // 다음 문자 위치로 이동 (4픽셀 간격으로 설정)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	617b      	str	r3, [r7, #20]
    }
    str++; // 다음 문자로 이동
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
  while (*str)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1da      	bne.n	8000bb6 <OLED_drawString+0x18>
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c12:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <MX_SPI3_Init+0x78>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c26:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c2a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c3e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c42:	2228      	movs	r2, #40	@ 0x28
 8000c44:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c66:	2208      	movs	r2, #8
 8000c68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_SPI3_Init+0x74>)
 8000c6c:	f001 fa04 	bl	8002078 <HAL_SPI_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f7ff fce3 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000038 	.word	0x20000038
 8000c84:	40003c00 	.word	0x40003c00

08000c88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <HAL_SPI_MspInit+0x7c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d127      	bne.n	8000cfa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cae:	4a16      	ldr	r2, [pc, #88]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	4a10      	ldr	r2, [pc, #64]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000cda:	2328      	movs	r3, #40	@ 0x28
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cea:	2306      	movs	r3, #6
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <HAL_SPI_MspInit+0x84>)
 8000cf6:	f000 fa4b 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	@ 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40003c00 	.word	0x40003c00
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000400 	.word	0x48000400

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d46:	f000 fc91 	bl	800166c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f89f 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fb9a 	bl	80014f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000dc8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000dcc:	f000 fb92 	bl	80014f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df8:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dfc:	f7ff ffea 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	@ (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f001 fcb5 	bl	8002794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2a:	f7ff fb17 	bl	800045c <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   r0, =_estack
 8000e30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e3c:	08002fa4 	.word	0x08002fa4
  ldr r2, =_sbss
 8000e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e44:	200000a0 	.word	0x200000a0

08000e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_2_IRQHandler>

08000e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f95b 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f000 f80e 	bl	8000e7c <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e001      	b.n	8000e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6c:	f7ff ff50 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e70:	79fb      	ldrb	r3, [r7, #7]

}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_InitTick+0x68>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d022      	beq.n	8000ed6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_InitTick+0x6c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <HAL_InitTick+0x68>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f966 	bl	8001176 <HAL_SYSTICK_Config>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10f      	bne.n	8000ed0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d809      	bhi.n	8000eca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebe:	f000 f932 	bl	8001126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <HAL_InitTick+0x70>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e007      	b.n	8000eda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e004      	b.n	8000eda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e001      	b.n	8000eda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <HAL_IncTick+0x1c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <HAL_IncTick+0x20>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <HAL_IncTick+0x1c>)
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	2000009c 	.word	0x2000009c
 8000f10:	20000008 	.word	0x20000008

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000009c 	.word	0x2000009c

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d004      	beq.n	8000f50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <HAL_Delay+0x40>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f50:	bf00      	nop
 8000f52:	f7ff ffdf 	bl	8000f14 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8f7      	bhi.n	8000f52 <HAL_Delay+0x26>
  {
  }
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff40 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff33 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa4 	bl	80010cc <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800119e:	e15a      	b.n	8001456 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 814c 	beq.w	8001450 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0201 	and.w	r2, r3, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d017      	beq.n	800126e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d123      	bne.n	80012c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	6939      	ldr	r1, [r7, #16]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0203 	and.w	r2, r3, #3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80a6 	beq.w	8001450 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001304:	4b5b      	ldr	r3, [pc, #364]	@ (8001474 <HAL_GPIO_Init+0x2e4>)
 8001306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001308:	4a5a      	ldr	r2, [pc, #360]	@ (8001474 <HAL_GPIO_Init+0x2e4>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001310:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <HAL_GPIO_Init+0x2e4>)
 8001312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131c:	4a56      	ldr	r2, [pc, #344]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001346:	d01f      	beq.n	8001388 <HAL_GPIO_Init+0x1f8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d019      	beq.n	8001384 <HAL_GPIO_Init+0x1f4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_GPIO_Init+0x2f0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_GPIO_Init+0x1f0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a4a      	ldr	r2, [pc, #296]	@ (8001484 <HAL_GPIO_Init+0x2f4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1ec>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a49      	ldr	r2, [pc, #292]	@ (8001488 <HAL_GPIO_Init+0x2f8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1e8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a48      	ldr	r2, [pc, #288]	@ (800148c <HAL_GPIO_Init+0x2fc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1e4>
 8001370:	2305      	movs	r3, #5
 8001372:	e00a      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001374:	2306      	movs	r3, #6
 8001376:	e008      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001378:	2304      	movs	r3, #4
 800137a:	e006      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 800137c:	2303      	movs	r3, #3
 800137e:	e004      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001380:	2302      	movs	r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001388:	2300      	movs	r3, #0
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	f002 0203 	and.w	r2, r2, #3
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	4093      	lsls	r3, r2
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139a:	4937      	ldr	r1, [pc, #220]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a8:	4b39      	ldr	r3, [pc, #228]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013cc:	4a30      	ldr	r2, [pc, #192]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f6:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001420:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_GPIO_Init+0x300>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_GPIO_Init+0x300>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800144a:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <HAL_GPIO_Init+0x300>)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	f47f ae9d 	bne.w	80011a0 <HAL_GPIO_Init+0x10>
  }
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800
 8001484:	48000c00 	.word	0x48000c00
 8001488:	48001000 	.word	0x48001000
 800148c:	48001400 	.word	0x48001400
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e001      	b.n	80014b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f86c 	bl	80005f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40010400 	.word	0x40010400

08001524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d141      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001532:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800153e:	d131      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001540:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001546:	4a46      	ldr	r2, [pc, #280]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800154c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001550:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001558:	4a41      	ldr	r2, [pc, #260]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001560:	4b40      	ldr	r3, [pc, #256]	@ (8001664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2232      	movs	r2, #50	@ 0x32
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a3f      	ldr	r2, [pc, #252]	@ (8001668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	0c9b      	lsrs	r3, r3, #18
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001576:	e002      	b.n	800157e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3b01      	subs	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800157e:	4b38      	ldr	r3, [pc, #224]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158a:	d102      	bne.n	8001592 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f2      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001592:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159e:	d158      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e057      	b.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015b4:	e04d      	b.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015bc:	d141      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015be:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ca:	d131      	bne.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015cc:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015d2:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015dc:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2232      	movs	r2, #50	@ 0x32
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	0c9b      	lsrs	r3, r3, #18
 80015fe:	3301      	adds	r3, #1
 8001600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001602:	e002      	b.n	800160a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3b01      	subs	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001616:	d102      	bne.n	800161e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f2      	bne.n	8001604 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800162a:	d112      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e011      	b.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001640:	e007      	b.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001642:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001650:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40007000 	.word	0x40007000
 8001664:	20000000 	.word	0x20000000
 8001668:	431bde83 	.word	0x431bde83

0800166c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167a:	6093      	str	r3, [r2, #8]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40007000 	.word	0x40007000

0800168c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e2fe      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d075      	beq.n	8001796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016aa:	4b97      	ldr	r3, [pc, #604]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b4:	4b94      	ldr	r3, [pc, #592]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_OscConfig+0x3e>
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_OscConfig+0x44>
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d10b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	4b8d      	ldr	r3, [pc, #564]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d05b      	beq.n	8001794 <HAL_RCC_OscConfig+0x108>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d157      	bne.n	8001794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e2d9      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x74>
 80016f2:	4b85      	ldr	r3, [pc, #532]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a84      	ldr	r2, [pc, #528]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e01d      	b.n	800173c <HAL_RCC_OscConfig+0xb0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x98>
 800170a:	4b7f      	ldr	r3, [pc, #508]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a7e      	ldr	r2, [pc, #504]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b7c      	ldr	r3, [pc, #496]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a7b      	ldr	r2, [pc, #492]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0xb0>
 8001724:	4b78      	ldr	r3, [pc, #480]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a77      	ldr	r2, [pc, #476]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 800172a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b75      	ldr	r3, [pc, #468]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a74      	ldr	r2, [pc, #464]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800173a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fbe6 	bl	8000f14 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fbe2 	bl	8000f14 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e29e      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175e:	4b6a      	ldr	r3, [pc, #424]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0xc0>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fbd2 	bl	8000f14 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fbce 	bl	8000f14 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	@ 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e28a      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001786:	4b60      	ldr	r3, [pc, #384]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0xe8>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d075      	beq.n	800188e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a2:	4b59      	ldr	r3, [pc, #356]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ac:	4b56      	ldr	r3, [pc, #344]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	d102      	bne.n	80017c2 <HAL_RCC_OscConfig+0x136>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_OscConfig+0x13c>
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d11f      	bne.n	8001808 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_OscConfig+0x154>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e25d      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b49      	ldr	r3, [pc, #292]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	4946      	ldr	r1, [pc, #280]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017f4:	4b45      	ldr	r3, [pc, #276]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fb3f 	bl	8000e7c <HAL_InitTick>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d043      	beq.n	800188c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e249      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001810:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a3c      	ldr	r2, [pc, #240]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fb7a 	bl	8000f14 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff fb76 	bl	8000f14 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e232      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001836:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001842:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	061b      	lsls	r3, r3, #24
 8001850:	492d      	ldr	r1, [pc, #180]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
 8001856:	e01a      	b.n	800188e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001858:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a2a      	ldr	r2, [pc, #168]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 800185e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fb56 	bl	8000f14 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186c:	f7ff fb52 	bl	8000f14 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e20e      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x1e0>
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800188c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d041      	beq.n	800191e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01c      	beq.n	80018dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a2:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80018a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a8:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb2f 	bl	8000f14 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ba:	f7ff fb2b 	bl	8000f14 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1e7      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0ef      	beq.n	80018ba <HAL_RCC_OscConfig+0x22e>
 80018da:	e020      	b.n	800191e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e2:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fb12 	bl	8000f14 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f2:	e00d      	b.n	8001910 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff fb0e 	bl	8000f14 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d906      	bls.n	8001910 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1ca      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001910:	4b8c      	ldr	r3, [pc, #560]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ea      	bne.n	80018f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80a6 	beq.w	8001a78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001930:	4b84      	ldr	r3, [pc, #528]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_OscConfig+0x2b4>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x2b6>
 8001940:	2300      	movs	r3, #0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00d      	beq.n	8001962 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b7f      	ldr	r3, [pc, #508]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001950:	6593      	str	r3, [r2, #88]	@ 0x58
 8001952:	4b7c      	ldr	r3, [pc, #496]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800195e:	2301      	movs	r3, #1
 8001960:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001962:	4b79      	ldr	r3, [pc, #484]	@ (8001b48 <HAL_RCC_OscConfig+0x4bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d118      	bne.n	80019a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196e:	4b76      	ldr	r3, [pc, #472]	@ (8001b48 <HAL_RCC_OscConfig+0x4bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a75      	ldr	r2, [pc, #468]	@ (8001b48 <HAL_RCC_OscConfig+0x4bc>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7ff facb 	bl	8000f14 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff fac7 	bl	8000f14 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e183      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001994:	4b6c      	ldr	r3, [pc, #432]	@ (8001b48 <HAL_RCC_OscConfig+0x4bc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <HAL_RCC_OscConfig+0x32e>
 80019a8:	4b66      	ldr	r3, [pc, #408]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ae:	4a65      	ldr	r2, [pc, #404]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b8:	e024      	b.n	8001a04 <HAL_RCC_OscConfig+0x378>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d110      	bne.n	80019e4 <HAL_RCC_OscConfig+0x358>
 80019c2:	4b60      	ldr	r3, [pc, #384]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c8:	4a5e      	ldr	r2, [pc, #376]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d8:	4a5a      	ldr	r2, [pc, #360]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e2:	e00f      	b.n	8001a04 <HAL_RCC_OscConfig+0x378>
 80019e4:	4b57      	ldr	r3, [pc, #348]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ea:	4a56      	ldr	r2, [pc, #344]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019f4:	4b53      	ldr	r3, [pc, #332]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019fa:	4a52      	ldr	r2, [pc, #328]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d016      	beq.n	8001a3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fa82 	bl	8000f14 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff fa7e 	bl	8000f14 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e138      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2a:	4b46      	ldr	r3, [pc, #280]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ed      	beq.n	8001a14 <HAL_RCC_OscConfig+0x388>
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fa6b 	bl	8000f14 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7ff fa67 	bl	8000f14 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e121      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a58:	4b3a      	ldr	r3, [pc, #232]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1ed      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a66:	7ffb      	ldrb	r3, [r7, #31]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6c:	4b35      	ldr	r3, [pc, #212]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	4a34      	ldr	r2, [pc, #208]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d03c      	beq.n	8001afe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a92:	4a2c      	ldr	r2, [pc, #176]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fa3a 	bl	8000f14 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa4:	f7ff fa36 	bl	8000f14 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0f2      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ab6:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ef      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x418>
 8001ac4:	e01b      	b.n	8001afe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001acc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fa1d 	bl	8000f14 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ade:	f7ff fa19 	bl	8000f14 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0d5      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ef      	bne.n	8001ade <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80c9 	beq.w	8001c9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	f000 8083 	beq.w	8001c1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d15e      	bne.n	8001bdc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_RCC_OscConfig+0x4b8>)
 8001b24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f9f3 	bl	8000f14 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b30:	e00c      	b.n	8001b4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff f9ef 	bl	8000f14 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d905      	bls.n	8001b4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0ab      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4c:	4b55      	ldr	r3, [pc, #340]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ec      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b58:	4b52      	ldr	r3, [pc, #328]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b52      	ldr	r3, [pc, #328]	@ (8001ca8 <HAL_RCC_OscConfig+0x61c>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6a11      	ldr	r1, [r2, #32]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b68:	3a01      	subs	r2, #1
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b72:	0212      	lsls	r2, r2, #8
 8001b74:	4311      	orrs	r1, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b7a:	0852      	lsrs	r2, r2, #1
 8001b7c:	3a01      	subs	r2, #1
 8001b7e:	0552      	lsls	r2, r2, #21
 8001b80:	4311      	orrs	r1, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b86:	0852      	lsrs	r2, r2, #1
 8001b88:	3a01      	subs	r2, #1
 8001b8a:	0652      	lsls	r2, r2, #25
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b92:	06d2      	lsls	r2, r2, #27
 8001b94:	430a      	orrs	r2, r1
 8001b96:	4943      	ldr	r1, [pc, #268]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a40      	ldr	r2, [pc, #256]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a3d      	ldr	r2, [pc, #244]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f9ae 	bl	8000f14 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f9aa 	bl	8000f14 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e066      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bce:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x530>
 8001bda:	e05e      	b.n	8001c9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bdc:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a30      	ldr	r2, [pc, #192]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f994 	bl	8000f14 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f990 	bl	8000f14 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e04c      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	4924      	ldr	r1, [pc, #144]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001c14:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	60cb      	str	r3, [r1, #12]
 8001c1a:	e03e      	b.n	8001c9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e039      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d12c      	bne.n	8001c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	3b01      	subs	r3, #1
 8001c48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d123      	bne.n	8001c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d11b      	bne.n	8001c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d113      	bne.n	8001c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	019f800c 	.word	0x019f800c
 8001cac:	feeefffc 	.word	0xfeeefffc

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e11e      	b.n	8001f06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b91      	ldr	r3, [pc, #580]	@ (8001f10 <HAL_RCC_ClockConfig+0x260>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d910      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b8e      	ldr	r3, [pc, #568]	@ (8001f10 <HAL_RCC_ClockConfig+0x260>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 020f 	bic.w	r2, r3, #15
 8001cde:	498c      	ldr	r1, [pc, #560]	@ (8001f10 <HAL_RCC_ClockConfig+0x260>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b8a      	ldr	r3, [pc, #552]	@ (8001f10 <HAL_RCC_ClockConfig+0x260>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e106      	b.n	8001f06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d073      	beq.n	8001dec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d129      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0c:	4b81      	ldr	r3, [pc, #516]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0f4      	b.n	8001f06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d1c:	f000 f966 	bl	8001fec <RCC_GetSysClockFreqFromPLLSource>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4a7c      	ldr	r2, [pc, #496]	@ (8001f18 <HAL_RCC_ClockConfig+0x268>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d93f      	bls.n	8001daa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d033      	beq.n	8001daa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d12f      	bne.n	8001daa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d4a:	4b72      	ldr	r3, [pc, #456]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d52:	4a70      	ldr	r2, [pc, #448]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d5a:	2380      	movs	r3, #128	@ 0x80
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e024      	b.n	8001daa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d68:	4b6a      	ldr	r3, [pc, #424]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0c6      	b.n	8001f06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d78:	4b66      	ldr	r3, [pc, #408]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0be      	b.n	8001f06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d88:	f000 f8ce 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4a61      	ldr	r2, [pc, #388]	@ (8001f18 <HAL_RCC_ClockConfig+0x268>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d909      	bls.n	8001daa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d96:	4b5f      	ldr	r3, [pc, #380]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001daa:	4b5a      	ldr	r3, [pc, #360]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 0203 	bic.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4957      	ldr	r1, [pc, #348]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dbc:	f7ff f8aa 	bl	8000f14 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc4:	f7ff f8a6 	bl	8000f14 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e095      	b.n	8001f06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b4e      	ldr	r3, [pc, #312]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 020c 	and.w	r2, r3, #12
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1eb      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d023      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e04:	4b43      	ldr	r3, [pc, #268]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a42      	ldr	r2, [pc, #264]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e24:	4a3b      	ldr	r2, [pc, #236]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4b39      	ldr	r3, [pc, #228]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4936      	ldr	r1, [pc, #216]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b80      	cmp	r3, #128	@ 0x80
 8001e44:	d105      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e46:	4b33      	ldr	r3, [pc, #204]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	4a32      	ldr	r2, [pc, #200]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e52:	4b2f      	ldr	r3, [pc, #188]	@ (8001f10 <HAL_RCC_ClockConfig+0x260>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d21d      	bcs.n	8001e9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e60:	4b2b      	ldr	r3, [pc, #172]	@ (8001f10 <HAL_RCC_ClockConfig+0x260>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 020f 	bic.w	r2, r3, #15
 8001e68:	4929      	ldr	r1, [pc, #164]	@ (8001f10 <HAL_RCC_ClockConfig+0x260>)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e70:	f7ff f850 	bl	8000f14 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff f84c 	bl	8000f14 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e03b      	b.n	8001f06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_RCC_ClockConfig+0x260>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1ed      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4917      	ldr	r1, [pc, #92]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	490f      	ldr	r1, [pc, #60]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eda:	f000 f825 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	490c      	ldr	r1, [pc, #48]	@ (8001f1c <HAL_RCC_ClockConfig+0x26c>)
 8001eec:	5ccb      	ldrb	r3, [r1, r3]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_RCC_ClockConfig+0x270>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_RCC_ClockConfig+0x274>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ffbc 	bl	8000e7c <HAL_InitTick>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40021000 	.word	0x40021000
 8001f18:	04c4b400 	.word	0x04c4b400
 8001f1c:	08002f8c 	.word	0x08002f8c
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e047      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f40:	4b27      	ldr	r3, [pc, #156]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d102      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f4c:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e03e      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f52:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d136      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3301      	adds	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	4a16      	ldr	r2, [pc, #88]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f86:	68d2      	ldr	r2, [r2, #12]
 8001f88:	0a12      	lsrs	r2, r2, #8
 8001f8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
      break;
 8001f94:	e00c      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f96:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa0:	68d2      	ldr	r2, [r2, #12]
 8001fa2:	0a12      	lsrs	r2, r2, #8
 8001fa4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
      break;
 8001fae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0e5b      	lsrs	r3, r3, #25
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e001      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fd0:	693b      	ldr	r3, [r7, #16]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	007a1200 	.word	0x007a1200

08001fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3301      	adds	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d10c      	bne.n	800202a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002010:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	4a14      	ldr	r2, [pc, #80]	@ (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800201a:	68d2      	ldr	r2, [r2, #12]
 800201c:	0a12      	lsrs	r2, r2, #8
 800201e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
    break;
 8002028:	e00c      	b.n	8002044 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800202a:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4a0e      	ldr	r2, [pc, #56]	@ (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002034:	68d2      	ldr	r2, [r2, #12]
 8002036:	0a12      	lsrs	r2, r2, #8
 8002038:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    break;
 8002042:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0e5b      	lsrs	r3, r3, #25
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000
 8002070:	007a1200 	.word	0x007a1200
 8002074:	00f42400 	.word	0x00f42400

08002078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e09d      	b.n	80021c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800209a:	d009      	beq.n	80020b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
 80020a2:	e005      	b.n	80020b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fddc 	bl	8000c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020f0:	d902      	bls.n	80020f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e002      	b.n	80020fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002106:	d007      	beq.n	8002118 <HAL_SPI_Init+0xa0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002110:	d002      	beq.n	8002118 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	ea42 0103 	orr.w	r1, r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	0c1b      	lsrs	r3, r3, #16
 8002174:	f003 0204 	and.w	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002194:	ea42 0103 	orr.w	r1, r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b088      	sub	sp, #32
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021de:	f7fe fe99 	bl	8000f14 <HAL_GetTick>
 80021e2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d001      	beq.n	80021f8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
 80021f6:	e15c      	b.n	80024b2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_SPI_Transmit+0x36>
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e154      	b.n	80024b2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_SPI_Transmit+0x48>
 8002212:	2302      	movs	r3, #2
 8002214:	e14d      	b.n	80024b2 <HAL_SPI_Transmit+0x2e4>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2203      	movs	r2, #3
 8002222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	88fa      	ldrh	r2, [r7, #6]
 800223c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002268:	d10f      	bne.n	800228a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002288:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002294:	2b40      	cmp	r3, #64	@ 0x40
 8002296:	d007      	beq.n	80022a8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80022b0:	d952      	bls.n	8002358 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_SPI_Transmit+0xf2>
 80022ba:	8b7b      	ldrh	r3, [r7, #26]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d145      	bne.n	800234c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	881a      	ldrh	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d0:	1c9a      	adds	r2, r3, #2
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022e4:	e032      	b.n	800234c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d112      	bne.n	800231a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f8:	881a      	ldrh	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002304:	1c9a      	adds	r2, r3, #2
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002318:	e018      	b.n	800234c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800231a:	f7fe fdfb 	bl	8000f14 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d803      	bhi.n	8002332 <HAL_SPI_Transmit+0x164>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d102      	bne.n	8002338 <HAL_SPI_Transmit+0x16a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0b2      	b.n	80024b2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1c7      	bne.n	80022e6 <HAL_SPI_Transmit+0x118>
 8002356:	e083      	b.n	8002460 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_SPI_Transmit+0x198>
 8002360:	8b7b      	ldrh	r3, [r7, #26]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d177      	bne.n	8002456 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d912      	bls.n	8002396 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002374:	881a      	ldrh	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002380:	1c9a      	adds	r2, r3, #2
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b02      	subs	r3, #2
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002394:	e05f      	b.n	8002456 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	330c      	adds	r3, #12
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80023bc:	e04b      	b.n	8002456 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d12b      	bne.n	8002424 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d912      	bls.n	80023fc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023da:	881a      	ldrh	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e6:	1c9a      	adds	r2, r3, #2
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b02      	subs	r3, #2
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023fa:	e02c      	b.n	8002456 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002422:	e018      	b.n	8002456 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002424:	f7fe fd76 	bl	8000f14 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d803      	bhi.n	800243c <HAL_SPI_Transmit+0x26e>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d102      	bne.n	8002442 <HAL_SPI_Transmit+0x274>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e02d      	b.n	80024b2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ae      	bne.n	80023be <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f947 	bl	80026f8 <SPI_EndRxTxTransaction>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80024b0:	2300      	movs	r3, #0
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024cc:	f7fe fd22 	bl	8000f14 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024dc:	f7fe fd1a 	bl	8000f14 <HAL_GetTick>
 80024e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024e2:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	0d1b      	lsrs	r3, r3, #20
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024f2:	e054      	b.n	800259e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d050      	beq.n	800259e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024fc:	f7fe fd0a 	bl	8000f14 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	d902      	bls.n	8002512 <SPI_WaitFlagStateUntilTimeout+0x56>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d13d      	bne.n	800258e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002520:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800252a:	d111      	bne.n	8002550 <SPI_WaitFlagStateUntilTimeout+0x94>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002534:	d004      	beq.n	8002540 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253e:	d107      	bne.n	8002550 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800254e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002558:	d10f      	bne.n	800257a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002578:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e017      	b.n	80025be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3b01      	subs	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4013      	ands	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d19b      	bne.n	80024f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80025de:	f7fe fc99 	bl	8000f14 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80025ee:	f7fe fc91 	bl	8000f14 <HAL_GetTick>
 80025f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80025fc:	4b3d      	ldr	r3, [pc, #244]	@ (80026f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00da      	lsls	r2, r3, #3
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	0d1b      	lsrs	r3, r3, #20
 800260c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002614:	e060      	b.n	80026d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800261c:	d107      	bne.n	800262e <SPI_WaitFifoStateUntilTimeout+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800262c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d050      	beq.n	80026d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002636:	f7fe fc6d 	bl	8000f14 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002642:	429a      	cmp	r2, r3
 8002644:	d902      	bls.n	800264c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d13d      	bne.n	80026c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800265a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002664:	d111      	bne.n	800268a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266e:	d004      	beq.n	800267a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002678:	d107      	bne.n	800268a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002688:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002692:	d10f      	bne.n	80026b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e010      	b.n	80026ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d196      	bne.n	8002616 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3728      	adds	r7, #40	@ 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000000 	.word	0x20000000

080026f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff ff5b 	bl	80025cc <SPI_WaitFifoStateUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e027      	b.n	800277c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f7ff fec0 	bl	80024bc <SPI_WaitFlagStateUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002746:	f043 0220 	orr.w	r2, r3, #32
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e014      	b.n	800277c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff ff34 	bl	80025cc <SPI_WaitFifoStateUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276e:	f043 0220 	orr.w	r2, r3, #32
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e000      	b.n	800277c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <memset>:
 8002784:	4402      	add	r2, r0
 8002786:	4603      	mov	r3, r0
 8002788:	4293      	cmp	r3, r2
 800278a:	d100      	bne.n	800278e <memset+0xa>
 800278c:	4770      	bx	lr
 800278e:	f803 1b01 	strb.w	r1, [r3], #1
 8002792:	e7f9      	b.n	8002788 <memset+0x4>

08002794 <__libc_init_array>:
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	4d0d      	ldr	r5, [pc, #52]	@ (80027cc <__libc_init_array+0x38>)
 8002798:	4c0d      	ldr	r4, [pc, #52]	@ (80027d0 <__libc_init_array+0x3c>)
 800279a:	1b64      	subs	r4, r4, r5
 800279c:	10a4      	asrs	r4, r4, #2
 800279e:	2600      	movs	r6, #0
 80027a0:	42a6      	cmp	r6, r4
 80027a2:	d109      	bne.n	80027b8 <__libc_init_array+0x24>
 80027a4:	4d0b      	ldr	r5, [pc, #44]	@ (80027d4 <__libc_init_array+0x40>)
 80027a6:	4c0c      	ldr	r4, [pc, #48]	@ (80027d8 <__libc_init_array+0x44>)
 80027a8:	f000 f818 	bl	80027dc <_init>
 80027ac:	1b64      	subs	r4, r4, r5
 80027ae:	10a4      	asrs	r4, r4, #2
 80027b0:	2600      	movs	r6, #0
 80027b2:	42a6      	cmp	r6, r4
 80027b4:	d105      	bne.n	80027c2 <__libc_init_array+0x2e>
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027bc:	4798      	blx	r3
 80027be:	3601      	adds	r6, #1
 80027c0:	e7ee      	b.n	80027a0 <__libc_init_array+0xc>
 80027c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c6:	4798      	blx	r3
 80027c8:	3601      	adds	r6, #1
 80027ca:	e7f2      	b.n	80027b2 <__libc_init_array+0x1e>
 80027cc:	08002f9c 	.word	0x08002f9c
 80027d0:	08002f9c 	.word	0x08002f9c
 80027d4:	08002f9c 	.word	0x08002f9c
 80027d8:	08002fa0 	.word	0x08002fa0

080027dc <_init>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr

080027e8 <_fini>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	bf00      	nop
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr
