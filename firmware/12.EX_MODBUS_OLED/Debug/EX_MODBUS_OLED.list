
EX_MODBUS_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  0800a288  0800a288  0000b288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae94  0800ae94  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ae94  0800ae94  0000be94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae9c  0800ae9c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aea0  0800aea0  0000bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800aea4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200001d4  0800b078  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  0800b078  0000c6cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d4b  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f61  00000000  00000000  0001ff4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00022eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c34  00000000  00000000  00023ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbb3  00000000  00000000  00024b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014799  00000000  00000000  000446b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0783  00000000  00000000  00058e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001195d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000531c  00000000  00000000  00119618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011e934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a26c 	.word	0x0800a26c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a26c 	.word	0x0800a26c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_DMA_Init+0x50>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	4a11      	ldr	r2, [pc, #68]	@ (8000f74 <MX_DMA_Init+0x50>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_DMA_Init+0x50>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_DMA_Init+0x50>)
 8000f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f46:	4a0b      	ldr	r2, [pc, #44]	@ (8000f74 <MX_DMA_Init+0x50>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_DMA_Init+0x50>)
 8000f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	200b      	movs	r0, #11
 8000f60:	f001 fb43 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f64:	200b      	movs	r0, #11
 8000f66:	f001 fb5a 	bl	800261e <HAL_NVIC_EnableIRQ>

}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000f7e:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <MX_FDCAN1_Init+0x8c>)
 8000f80:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000f8a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f8e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000faa:	2208      	movs	r2, #8
 8000fac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fb6:	220d      	movs	r2, #13
 8000fb8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fbc:	2206      	movs	r2, #6
 8000fbe:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_FDCAN1_Init+0x88>)
 8000fec:	f001 fe64 	bl	8002cb8 <HAL_FDCAN_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000ff6:	f000 fb27 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200001f0 	.word	0x200001f0
 8001004:	40006400 	.word	0x40006400

08001008 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b09a      	sub	sp, #104	@ 0x68
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2244      	movs	r2, #68	@ 0x44
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f007 f8e3 	bl	80081f4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a28      	ldr	r2, [pc, #160]	@ (80010d4 <HAL_FDCAN_MspInit+0xcc>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d148      	bne.n	80010ca <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800103e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001042:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f909 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001054:	f000 faf8 	bl	8001648 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <HAL_FDCAN_MspInit+0xd0>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105c:	4a1e      	ldr	r2, [pc, #120]	@ (80010d8 <HAL_FDCAN_MspInit+0xd0>)
 800105e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001062:	6593      	str	r3, [r2, #88]	@ 0x58
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <HAL_FDCAN_MspInit+0xd0>)
 8001066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <HAL_FDCAN_MspInit+0xd0>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <HAL_FDCAN_MspInit+0xd0>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_FDCAN_MspInit+0xd0>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001088:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800108c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800109a:	2309      	movs	r3, #9
 800109c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010a2:	4619      	mov	r1, r3
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <HAL_FDCAN_MspInit+0xd4>)
 80010a6:	f002 f95f 	bl	8003368 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	2015      	movs	r0, #21
 80010b0:	f001 fa9b 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80010b4:	2015      	movs	r0, #21
 80010b6:	f001 fab2 	bl	800261e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2016      	movs	r0, #22
 80010c0:	f001 fa93 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80010c4:	2016      	movs	r0, #22
 80010c6:	f001 faaa 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	3768      	adds	r7, #104	@ 0x68
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40006400 	.word	0x40006400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f6:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	4a29      	ldr	r2, [pc, #164]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001102:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <MX_GPIO_Init+0xc0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001144:	4817      	ldr	r0, [pc, #92]	@ (80011a4 <MX_GPIO_Init+0xc4>)
 8001146:	f002 fa91 	bl	800366c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001154:	f002 fa8a 	bl	800366c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <MX_GPIO_Init+0xc4>)
 8001172:	f002 f8f9 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8001176:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001192:	f002 f8e9 	bl	8003368 <HAL_GPIO_Init>

}
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000400 	.word	0x48000400

080011a8 <__io_putchar>:
/* USER CODE BEGIN 0 */


// printf 함수 리디렉션
int __io_putchar(int ch)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    (void)HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80011b0:	1d39      	adds	r1, r7, #4
 80011b2:	2364      	movs	r3, #100	@ 0x64
 80011b4:	2201      	movs	r2, #1
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <__io_putchar+0x20>)
 80011b8:	f003 fe18 	bl	8004dec <HAL_UART_Transmit>
    return ch;
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200003f4 	.word	0x200003f4

080011cc <calcCRC16>:
 * @brief Modbus RTU 관련
 */

// Modbus RTU CRC16 계산 함수
static uint16_t calcCRC16(uint8_t *data, uint16_t length)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;                // 1111 1111 1111 1111
 80011d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011dc:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) // 들어온 모든 데이터에 대해..
 80011de:	2300      	movs	r3, #0
 80011e0:	81bb      	strh	r3, [r7, #12]
 80011e2:	e022      	b.n	800122a <calcCRC16+0x5e>
    {
        crc ^= data[i];                       // 0xFFFF 와 XOR 연산
 80011e4:	89bb      	ldrh	r3, [r7, #12]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	4053      	eors	r3, r2
 80011f2:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) // 모든 비트에 대해 ..
 80011f4:	2300      	movs	r3, #0
 80011f6:	72fb      	strb	r3, [r7, #11]
 80011f8:	e011      	b.n	800121e <calcCRC16+0x52>
        {
            if (crc & 0x0001) // LSB가 1이라면..
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <calcCRC16+0x46>
            {
                crc = (crc >> 1) ^ 0xA001; // 오른쪽 쉬프트 한칸 -> 0xA001과 XOR연산
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	085b      	lsrs	r3, r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <calcCRC16+0x74>)
 800120c:	4053      	eors	r3, r2
 800120e:	81fb      	strh	r3, [r7, #14]
 8001210:	e002      	b.n	8001218 <calcCRC16+0x4c>
            }
            else
            {
                crc = crc >> 1; // LSB가 0이라면... 쉬프트만...
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	085b      	lsrs	r3, r3, #1
 8001216:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) // 모든 비트에 대해 ..
 8001218:	7afb      	ldrb	r3, [r7, #11]
 800121a:	3301      	adds	r3, #1
 800121c:	72fb      	strb	r3, [r7, #11]
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	2b07      	cmp	r3, #7
 8001222:	d9ea      	bls.n	80011fa <calcCRC16+0x2e>
    for (uint16_t i = 0; i < length; i++) // 들어온 모든 데이터에 대해..
 8001224:	89bb      	ldrh	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	81bb      	strh	r3, [r7, #12]
 800122a:	89ba      	ldrh	r2, [r7, #12]
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3d8      	bcc.n	80011e4 <calcCRC16+0x18>
            }
        }
    }
    return crc;
 8001232:	89fb      	ldrh	r3, [r7, #14]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	ffffa001 	.word	0xffffa001

08001244 <modbusRequest>:

// Modbus RTU 요청 전송
HAL_StatusTypeDef modbusRequest(uint8_t slave_addr, uint8_t func_code, uint16_t start_addr, uint16_t reg_count)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	4604      	mov	r4, r0
 800124c:	4608      	mov	r0, r1
 800124e:	4611      	mov	r1, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4623      	mov	r3, r4
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	4603      	mov	r3, r0
 8001258:	71bb      	strb	r3, [r7, #6]
 800125a:	460b      	mov	r3, r1
 800125c:	80bb      	strh	r3, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	807b      	strh	r3, [r7, #2]
    uint8_t request_frame[MODBUS_REQUEST_SIZE];
    uint16_t crc;

    // 프레임 구성
    request_frame[0] = slave_addr;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	733b      	strb	r3, [r7, #12]
    request_frame[1] = func_code;
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	737b      	strb	r3, [r7, #13]
    request_frame[2] = (start_addr >> 8) & 0xFF; // 시작 주소 상위 바이트
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b29b      	uxth	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	73bb      	strb	r3, [r7, #14]
    request_frame[3] = start_addr & 0xFF;        // 시작 주소 하위 바이트
 8001274:	88bb      	ldrh	r3, [r7, #4]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	73fb      	strb	r3, [r7, #15]
    request_frame[4] = (reg_count >> 8) & 0xFF;  // 레지스터 개수 상위 바이트
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	b29b      	uxth	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	743b      	strb	r3, [r7, #16]
    request_frame[5] = reg_count & 0xFF;         // 레지스터 개수 하위 바이트
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	747b      	strb	r3, [r7, #17]

    // CRC 계산 (첫 6바이트에 대해)
    crc = calcCRC16(request_frame, 6);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2106      	movs	r1, #6
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff9b 	bl	80011cc <calcCRC16>
 8001296:	4603      	mov	r3, r0
 8001298:	82fb      	strh	r3, [r7, #22]

    request_frame[6] = crc & 0xFF;        // CRC 하위 바이트 (리틀엔디안)
 800129a:	8afb      	ldrh	r3, [r7, #22]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	74bb      	strb	r3, [r7, #18]
    request_frame[7] = (crc >> 8) & 0xFF; // CRC 상위 바이트
 80012a0:	8afb      	ldrh	r3, [r7, #22]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	74fb      	strb	r3, [r7, #19]
 *  - 모든 데이터가 전송 완료(TC 플래그 set)될 때까지 대기하여, 마지막 바이트까지 온전히 라인에 출력됨을 보장합니다.
 *  - TC 확인 후 DE 핀을 LOW로 변경해 수신모드로 전환합니다.
 *  - (이 과정이 없으면 마지막 바이트 송신 전에 수신모드로 바뀌어 모드버스 통신 오류가 발생할 수 있음)
 */

    HAL_GPIO_WritePin(Modbus_DE_GPIO_Port, Modbus_DE_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b0:	4813      	ldr	r0, [pc, #76]	@ (8001300 <modbusRequest+0xbc>)
 80012b2:	f002 f9db 	bl	800366c <HAL_GPIO_WritePin>

    // UART3(RS485)로 전송
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, request_frame, MODBUS_REQUEST_SIZE, 1000);
 80012b6:	f107 010c 	add.w	r1, r7, #12
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	2208      	movs	r2, #8
 80012c0:	4810      	ldr	r0, [pc, #64]	@ (8001304 <modbusRequest+0xc0>)
 80012c2:	f003 fd93 	bl	8004dec <HAL_UART_Transmit>
 80012c6:	4603      	mov	r3, r0
 80012c8:	757b      	strb	r3, [r7, #21]

    while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET); // 전송 완료 기다림
 80012ca:	bf00      	nop
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <modbusRequest+0xc0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d6:	2b40      	cmp	r3, #64	@ 0x40
 80012d8:	d1f8      	bne.n	80012cc <modbusRequest+0x88>
    HAL_GPIO_WritePin(Modbus_DE_GPIO_Port, Modbus_DE_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012e0:	4807      	ldr	r0, [pc, #28]	@ (8001300 <modbusRequest+0xbc>)
 80012e2:	f002 f9c3 	bl	800366c <HAL_GPIO_WritePin>

    if (status != HAL_OK)
 80012e6:	7d7b      	ldrb	r3, [r7, #21]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <modbusRequest+0xb2>
    {
        printf("Modbus Request Failed: Status=%d\r\n", status);
 80012ec:	7d7b      	ldrb	r3, [r7, #21]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <modbusRequest+0xc4>)
 80012f2:	f006 fe01 	bl	8007ef8 <iprintf>
    }
    return status;
 80012f6:	7d7b      	ldrb	r3, [r7, #21]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	48000400 	.word	0x48000400
 8001304:	20000488 	.word	0x20000488
 8001308:	0800a288 	.word	0x0800a288

0800130c <modbusResponse>:

// Modbus RTU 응답 처리
HAL_StatusTypeDef modbusResponse(uint8_t *response_data, uint16_t length)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
    // CRC 계산
    uint16_t calc_crc = calcCRC16(response_data, length - 2);
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	3b02      	subs	r3, #2
 800131c:	b29b      	uxth	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff53 	bl	80011cc <calcCRC16>
 8001326:	4603      	mov	r3, r0
 8001328:	81fb      	strh	r3, [r7, #14]

    // Modbus RTU는 리틀엔디안 표준 사용
    uint16_t recv_crc = response_data[length - 2] | (response_data[length - 1] << 8);
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	3b02      	subs	r3, #2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b21a      	sxth	r2, r3
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	3b01      	subs	r3, #1
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	440b      	add	r3, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b21b      	sxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21b      	sxth	r3, r3
 800134a:	81bb      	strh	r3, [r7, #12]

    if (calc_crc != recv_crc)
 800134c:	89fa      	ldrh	r2, [r7, #14]
 800134e:	89bb      	ldrh	r3, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d007      	beq.n	8001364 <modbusResponse+0x58>
    {
        printf("[ERROR] CRC mismatch: calc=0x%04X, recv=0x%04X\r\n", calc_crc, recv_crc);
 8001354:	89fb      	ldrh	r3, [r7, #14]
 8001356:	89ba      	ldrh	r2, [r7, #12]
 8001358:	4619      	mov	r1, r3
 800135a:	480a      	ldr	r0, [pc, #40]	@ (8001384 <modbusResponse+0x78>)
 800135c:	f006 fdcc 	bl	8007ef8 <iprintf>
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e00b      	b.n	800137c <modbusResponse+0x70>
    }

    // 슬레이브 주소 확인
    Modbus_Response_t *response = (Modbus_Response_t *)response_data;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60bb      	str	r3, [r7, #8]
    if (response->slave_addr != MODBUS_SLAVE_ADDR)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d001      	beq.n	8001374 <modbusResponse+0x68>
    {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e003      	b.n	800137c <modbusResponse+0x70>
    }

    parseSensorData(response);
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f000 f807 	bl	8001388 <parseSensorData>
    return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0800a2ac 	.word	0x0800a2ac

08001388 <parseSensorData>:

// 풍량센서 응답 데이터 파싱
void parseSensorData(Modbus_Response_t *response)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    if (response->function_code == MODBUS_FUNC_READ_HOLD && response->byte_count >= 2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d12c      	bne.n	80013f2 <parseSensorData+0x6a>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d928      	bls.n	80013f2 <parseSensorData+0x6a>
    {
        // 풍속 데이터 (첫 번째 레지스터)
        uint16_t wind_raw = (response->data[0] << 8) | response->data[1];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	791b      	ldrb	r3, [r3, #4]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	81fb      	strh	r3, [r7, #14]
        sensor_data.wind_speed = wind_raw * 0.1f; // 0.1 m/s 단위
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80013fc <parseSensorData+0x74>
 80013c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <parseSensorData+0x78>)
 80013ca:	edc3 7a00 	vstr	s15, [r3]
        sensor_data.timestamp = HAL_GetTick();
 80013ce:	f001 f803 	bl	80023d8 <HAL_GetTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <parseSensorData+0x78>)
 80013d6:	6053      	str	r3, [r2, #4]
        sensor_data.valid = 1;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <parseSensorData+0x78>)
 80013da:	2201      	movs	r2, #1
 80013dc:	721a      	strb	r2, [r3, #8]
        printf("Wind Speed: %.1f m/s\r\n", sensor_data.wind_speed);
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <parseSensorData+0x78>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8d8 	bl	8000598 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4805      	ldr	r0, [pc, #20]	@ (8001404 <parseSensorData+0x7c>)
 80013ee:	f006 fd83 	bl	8007ef8 <iprintf>
    }
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	3dcccccd 	.word	0x3dcccccd
 8001400:	20000254 	.word	0x20000254
 8001404:	0800a2e0 	.word	0x0800a2e0

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f000 ff7e 	bl	800230e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f8a9 	bl	8001568 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f7ff fe63 	bl	80010e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800141a:	f7ff fd83 	bl	8000f24 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800141e:	f7ff fdab 	bl	8000f78 <MX_FDCAN1_Init>
  MX_SPI3_Init();
 8001422:	f000 fbf9 	bl	8001c18 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001426:	f000 fe23 	bl	8002070 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800142a:	f000 fdd5 	bl	8001fd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Modbus RTU 수신 시작2
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 800142e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001432:	493f      	ldr	r1, [pc, #252]	@ (8001530 <main+0x128>)
 8001434:	483f      	ldr	r0, [pc, #252]	@ (8001534 <main+0x12c>)
 8001436:	f005 ffa5 	bl	8007384 <HAL_UARTEx_ReceiveToIdle_DMA>
  OLED_init();
 800143a:	f000 f989 	bl	8001750 <OLED_init>
  OLED_fill(0);
 800143e:	2000      	movs	r0, #0
 8001440:	f000 fa60 	bl	8001904 <OLED_fill>
  oled_drawString(0, 0, "Modbus Monitor", &font_07x10, 15);      // ✨ 제목 변경
 8001444:	230f      	movs	r3, #15
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <main+0x130>)
 800144a:	4a3c      	ldr	r2, [pc, #240]	@ (800153c <main+0x134>)
 800144c:	2100      	movs	r1, #0
 800144e:	2000      	movs	r0, #0
 8001450:	f000 fbac 	bl	8001bac <oled_drawString>
  oled_drawString(0, 20, "Wind Speed:", &font_07x10, 15);         // CAN 수신용
 8001454:	230f      	movs	r3, #15
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4b37      	ldr	r3, [pc, #220]	@ (8001538 <main+0x130>)
 800145a:	4a39      	ldr	r2, [pc, #228]	@ (8001540 <main+0x138>)
 800145c:	2114      	movs	r1, #20
 800145e:	2000      	movs	r0, #0
 8001460:	f000 fba4 	bl	8001bac <oled_drawString>
  printf("Modbus RTU Bridge Started!\r\n");
 8001464:	4837      	ldr	r0, [pc, #220]	@ (8001544 <main+0x13c>)
 8001466:	f006 fdaf 	bl	8007fc8 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t last_request_time = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]

  while (1) {


	  // 100ms마다 센서 데이터 요청
	         if (HAL_GetTick() - last_request_time >= 100)
 800146e:	f000 ffb3 	bl	80023d8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b63      	cmp	r3, #99	@ 0x63
 800147a:	d913      	bls.n	80014a4 <main+0x9c>
	         {
	             modbus_rx_index = 0;
 800147c:	4b32      	ldr	r3, [pc, #200]	@ (8001548 <main+0x140>)
 800147e:	2200      	movs	r2, #0
 8001480:	801a      	strh	r2, [r3, #0]
	             modbus_frame_ready = 0;
 8001482:	4b32      	ldr	r3, [pc, #200]	@ (800154c <main+0x144>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]

	             modbusRequest(MODBUS_SLAVE_ADDR, MODBUS_FUNC_READ_HOLD, WIND_SPEED_REG, 2);
 8001488:	2302      	movs	r3, #2
 800148a:	2200      	movs	r2, #0
 800148c:	2103      	movs	r1, #3
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff fed8 	bl	8001244 <modbusRequest>

	             last_request_time = HAL_GetTick();
 8001494:	f000 ffa0 	bl	80023d8 <HAL_GetTick>
 8001498:	6078      	str	r0, [r7, #4]
	             last_rx_time = HAL_GetTick();
 800149a:	f000 ff9d 	bl	80023d8 <HAL_GetTick>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001550 <main+0x148>)
 80014a2:	6013      	str	r3, [r2, #0]
	         }

	         // Modbus 응답 처리
	         if (modbus_frame_ready)
 80014a4:	4b29      	ldr	r3, [pc, #164]	@ (800154c <main+0x144>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d01c      	beq.n	80014e6 <main+0xde>
	         {

	             // 최소 길이 체크 (5바이트 이상, CRC를 제외한 나머지 프레임 구성요소가 5바이트)
	             if (modbus_rx_index >= 5)
 80014ac:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <main+0x140>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d906      	bls.n	80014c2 <main+0xba>
	             {
	                 modbusResponse(modbus_rx_buffer, modbus_rx_index);
 80014b4:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <main+0x140>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	481d      	ldr	r0, [pc, #116]	@ (8001530 <main+0x128>)
 80014bc:	f7ff ff26 	bl	800130c <modbusResponse>
 80014c0:	e005      	b.n	80014ce <main+0xc6>
	             }
	             else
	             {
	                 printf("[ERROR] Frame too short: %d bytes\r\n", modbus_rx_index);
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <main+0x140>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4822      	ldr	r0, [pc, #136]	@ (8001554 <main+0x14c>)
 80014ca:	f006 fd15 	bl	8007ef8 <iprintf>
	             }
	             // 버퍼 리셋
	             modbus_rx_index = 0;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <main+0x140>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	801a      	strh	r2, [r3, #0]
	             modbus_frame_ready = 0;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <main+0x144>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
	             memset(modbus_rx_buffer, 0, sizeof(modbus_rx_buffer));
 80014da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014de:	2100      	movs	r1, #0
 80014e0:	4813      	ldr	r0, [pc, #76]	@ (8001530 <main+0x128>)
 80014e2:	f006 fe87 	bl	80081f4 <memset>
	         }

	     // OLED 업데이트
	     if (sensor_data.valid)
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <main+0x150>)
 80014e8:	7a1b      	ldrb	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d016      	beq.n	800151c <main+0x114>
	     {
	         snprintf(buf, sizeof(buf), "%.1f m/s", sensor_data.wind_speed);
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <main+0x150>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001500:	4a16      	ldr	r2, [pc, #88]	@ (800155c <main+0x154>)
 8001502:	2120      	movs	r1, #32
 8001504:	4816      	ldr	r0, [pc, #88]	@ (8001560 <main+0x158>)
 8001506:	f006 fd67 	bl	8007fd8 <sniprintf>
	         oled_drawString(80, 20, buf, &font_07x10, 15);
 800150a:	230f      	movs	r3, #15
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <main+0x130>)
 8001510:	4a13      	ldr	r2, [pc, #76]	@ (8001560 <main+0x158>)
 8001512:	2114      	movs	r1, #20
 8001514:	2050      	movs	r0, #80	@ 0x50
 8001516:	f000 fb49 	bl	8001bac <oled_drawString>
 800151a:	e7a8      	b.n	800146e <main+0x66>
	     }
	     else
	     {
	         oled_drawString(80, 20, "WAIT...", &font_07x10, 15); // 유효한 센서값이 들어오지 않을때 출력
 800151c:	230f      	movs	r3, #15
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <main+0x130>)
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <main+0x15c>)
 8001524:	2114      	movs	r1, #20
 8001526:	2050      	movs	r0, #80	@ 0x50
 8001528:	f000 fb40 	bl	8001bac <oled_drawString>
	         if (HAL_GetTick() - last_request_time >= 100)
 800152c:	e79f      	b.n	800146e <main+0x66>
 800152e:	bf00      	nop
 8001530:	20000260 	.word	0x20000260
 8001534:	20000488 	.word	0x20000488
 8001538:	0800aad4 	.word	0x0800aad4
 800153c:	0800a2f8 	.word	0x0800a2f8
 8001540:	0800a308 	.word	0x0800a308
 8001544:	0800a314 	.word	0x0800a314
 8001548:	20000360 	.word	0x20000360
 800154c:	20000362 	.word	0x20000362
 8001550:	20000384 	.word	0x20000384
 8001554:	0800a330 	.word	0x0800a330
 8001558:	20000254 	.word	0x20000254
 800155c:	0800a354 	.word	0x0800a354
 8001560:	20000364 	.word	0x20000364
 8001564:	0800a360 	.word	0x0800a360

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	@ 0x50
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2238      	movs	r2, #56	@ 0x38
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f006 fe3c 	bl	80081f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800158a:	2000      	movs	r0, #0
 800158c:	f002 f886 	bl	800369c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001590:	2301      	movs	r3, #1
 8001592:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001598:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159e:	2303      	movs	r3, #3
 80015a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015a6:	2328      	movs	r3, #40	@ 0x28
 80015a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 f922 	bl	8003804 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015c6:	f000 f83f 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2303      	movs	r3, #3
 80015d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2104      	movs	r1, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fc20 	bl	8003e28 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015ee:	f000 f82b 	bl	8001648 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3750      	adds	r7, #80	@ 0x50
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

// UART Idle 수신 콜백 ( UART3 == 센서 )
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a09      	ldr	r2, [pc, #36]	@ (8001634 <HAL_UARTEx_RxEventCallback+0x38>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10b      	bne.n	800162a <HAL_UARTEx_RxEventCallback+0x2e>
    {
        modbus_rx_index = Size; // 수신길이
 8001612:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	8013      	strh	r3, [r2, #0]
        modbus_frame_ready = 1;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <HAL_UARTEx_RxEventCallback+0x40>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
        // 프레임 처리 이후, 다음 수신 재시작!
        HAL_UARTEx_ReceiveToIdle_IT(&huart3, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 800161e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001622:	4907      	ldr	r1, [pc, #28]	@ (8001640 <HAL_UARTEx_RxEventCallback+0x44>)
 8001624:	4807      	ldr	r0, [pc, #28]	@ (8001644 <HAL_UARTEx_RxEventCallback+0x48>)
 8001626:	f005 fe5d 	bl	80072e4 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004800 	.word	0x40004800
 8001638:	20000360 	.word	0x20000360
 800163c:	20000362 	.word	0x20000362
 8001640:	20000260 	.word	0x20000260
 8001644:	20000488 	.word	0x20000488

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <Error_Handler+0x8>

08001654 <OLED_write_cmd>:

/* ======== Static 함수들 ======== */

// OLED 명령어 모드!
static void OLED_write_cmd(uint8_t cmd)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  DC_CMD();     // DC핀을 LOW로 설정 (명령어 모드)
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001668:	f002 f800 	bl	800366c <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001676:	f001 fff9 	bl	800366c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);  // SPI로 명령어 전송
 800167a:	1df9      	adds	r1, r7, #7
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	2201      	movs	r2, #1
 8001682:	4807      	ldr	r0, [pc, #28]	@ (80016a0 <OLED_write_cmd+0x4c>)
 8001684:	f003 f887 	bl	8004796 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800168e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001692:	f001 ffeb 	bl	800366c <HAL_GPIO_WritePin>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000038c 	.word	0x2000038c

080016a4 <OLED_write_data>:

// OLED 데이터 모드!
static void OLED_write_data(const uint8_t* p, uint16_t len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
  DC_DATA();    // DC핀을 HIGH로 설정 (데이터 모드)
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ba:	f001 ffd7 	bl	800366c <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c8:	f001 ffd0 	bl	800366c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)p, len, HAL_MAX_DELAY);  // SPI로 데이터 전송
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <OLED_write_data+0x4c>)
 80016d6:	f003 f85e 	bl	8004796 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e4:	f001 ffc2 	bl	800366c <HAL_GPIO_WritePin>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000038c 	.word	0x2000038c

080016f4 <OLED_set_window>:

// 화면의 특정 영역을 선택하는 함수 (그리기 영역 설정)
static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	4603      	mov	r3, r0
 8001708:	71bb      	strb	r3, [r7, #6]
 800170a:	460b      	mov	r3, r1
 800170c:	717b      	strb	r3, [r7, #5]
 800170e:	4613      	mov	r3, r2
 8001710:	713b      	strb	r3, [r7, #4]
  // 열(가로) 범위 설정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 8001712:	2015      	movs	r0, #21
 8001714:	f7ff ff9e 	bl	8001654 <OLED_write_cmd>
  uint8_t col[2] = { col_start, col_end };
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	733b      	strb	r3, [r7, #12]
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2102      	movs	r1, #2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ffbc 	bl	80016a4 <OLED_write_data>

  // 행(세로) 범위 설정
  OLED_write_cmd(OLED_SETROWADDR);
 800172c:	2075      	movs	r0, #117	@ 0x75
 800172e:	f7ff ff91 	bl	8001654 <OLED_write_cmd>
  uint8_t row[2] = { row_start, row_end };
 8001732:	797b      	ldrb	r3, [r7, #5]
 8001734:	723b      	strb	r3, [r7, #8]
 8001736:	793b      	ldrb	r3, [r7, #4]
 8001738:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	2102      	movs	r1, #2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffaf 	bl	80016a4 <OLED_write_data>
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bd90      	pop	{r4, r7, pc}
	...

08001750 <OLED_init>:

/* ======== Public 함수들 ======== */

/* OLED 디스플레이를 초기화하는 함수 */
void OLED_init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
  // 1단계: 하드웨어 리셋
  RST_L();
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800175c:	4867      	ldr	r0, [pc, #412]	@ (80018fc <OLED_init+0x1ac>)
 800175e:	f001 ff85 	bl	800366c <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 LOW로 10ms
 8001762:	200a      	movs	r0, #10
 8001764:	f000 fe44 	bl	80023f0 <HAL_Delay>
  RST_H();
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800176e:	4863      	ldr	r0, [pc, #396]	@ (80018fc <OLED_init+0x1ac>)
 8001770:	f001 ff7c 	bl	800366c <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 HIGH로 10ms
 8001774:	200a      	movs	r0, #10
 8001776:	f000 fe3b 	bl	80023f0 <HAL_Delay>

  // 2단계: 디스플레이 끄기
  OLED_write_cmd(OLED_DISPLAYOFF);
 800177a:	20ae      	movs	r0, #174	@ 0xae
 800177c:	f7ff ff6a 	bl	8001654 <OLED_write_cmd>

  // 3단계: 기본 설정들
  OLED_write_cmd(OLED_SETCOMMANDLOCK);  // 명령어 잠금 해제
 8001780:	20fd      	movs	r0, #253	@ 0xfd
 8001782:	f7ff ff67 	bl	8001654 <OLED_write_cmd>
  d = 0x12;
 8001786:	4b5e      	ldr	r3, [pc, #376]	@ (8001900 <OLED_init+0x1b0>)
 8001788:	2212      	movs	r2, #18
 800178a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800178c:	2101      	movs	r1, #1
 800178e:	485c      	ldr	r0, [pc, #368]	@ (8001900 <OLED_init+0x1b0>)
 8001790:	f7ff ff88 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_SETCLOCKDIVIDER); // 클럭 주파수 설정
 8001794:	20b3      	movs	r0, #179	@ 0xb3
 8001796:	f7ff ff5d 	bl	8001654 <OLED_write_cmd>
  d = 0x91;
 800179a:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <OLED_init+0x1b0>)
 800179c:	2291      	movs	r2, #145	@ 0x91
 800179e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80017a0:	2101      	movs	r1, #1
 80017a2:	4857      	ldr	r0, [pc, #348]	@ (8001900 <OLED_init+0x1b0>)
 80017a4:	f7ff ff7e 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_SETMUXRATIO);     // 화면 높이 설정 (64줄)
 80017a8:	20ca      	movs	r0, #202	@ 0xca
 80017aa:	f7ff ff53 	bl	8001654 <OLED_write_cmd>
  d = 0x3F;
 80017ae:	4b54      	ldr	r3, [pc, #336]	@ (8001900 <OLED_init+0x1b0>)
 80017b0:	223f      	movs	r2, #63	@ 0x3f
 80017b2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4852      	ldr	r0, [pc, #328]	@ (8001900 <OLED_init+0x1b0>)
 80017b8:	f7ff ff74 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_SETDISPLAYOFFSET); // 화면 위치 오프셋
 80017bc:	20a2      	movs	r0, #162	@ 0xa2
 80017be:	f7ff ff49 	bl	8001654 <OLED_write_cmd>
  d = 0x00;
 80017c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001900 <OLED_init+0x1b0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80017c8:	2101      	movs	r1, #1
 80017ca:	484d      	ldr	r0, [pc, #308]	@ (8001900 <OLED_init+0x1b0>)
 80017cc:	f7ff ff6a 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_SETSTARTLINE);     // 시작 줄 설정
 80017d0:	20a1      	movs	r0, #161	@ 0xa1
 80017d2:	f7ff ff3f 	bl	8001654 <OLED_write_cmd>
  d = 0x00;
 80017d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001900 <OLED_init+0x1b0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80017dc:	2101      	movs	r1, #1
 80017de:	4848      	ldr	r0, [pc, #288]	@ (8001900 <OLED_init+0x1b0>)
 80017e0:	f7ff ff60 	bl	80016a4 <OLED_write_data>

  // 4단계: 화면 방향과 색상 배치 설정
  OLED_write_cmd(OLED_SETREMAP);
 80017e4:	20a0      	movs	r0, #160	@ 0xa0
 80017e6:	f7ff ff35 	bl	8001654 <OLED_write_cmd>
  {
    uint8_t remap[2] = {0x6, 0x11};  // 니블 순서, 듀얼COM 설정
 80017ea:	f241 1306 	movw	r3, #4358	@ 0x1106
 80017ee:	81bb      	strh	r3, [r7, #12]
    OLED_write_data(remap, 2);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2102      	movs	r1, #2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff54 	bl	80016a4 <OLED_write_data>
  } // Dual COM 모드로 설정시, Column 범위가 [ 0x1C <= x <= 0x5B ]가 됩니다.



  // 5단계: GPIO와 기능 설정 ( 안씀 )
  OLED_write_cmd(OLED_SETGPIO);
 80017fc:	20b5      	movs	r0, #181	@ 0xb5
 80017fe:	f7ff ff29 	bl	8001654 <OLED_write_cmd>
  d = 0x00;
 8001802:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <OLED_init+0x1b0>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001808:	2101      	movs	r1, #1
 800180a:	483d      	ldr	r0, [pc, #244]	@ (8001900 <OLED_init+0x1b0>)
 800180c:	f7ff ff4a 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_FUNCTIONSELECT);  // 내부 전원 사용
 8001810:	20ab      	movs	r0, #171	@ 0xab
 8001812:	f7ff ff1f 	bl	8001654 <OLED_write_cmd>
  d = 0x01;
 8001816:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <OLED_init+0x1b0>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800181c:	2101      	movs	r1, #1
 800181e:	4838      	ldr	r0, [pc, #224]	@ (8001900 <OLED_init+0x1b0>)
 8001820:	f7ff ff40 	bl	80016a4 <OLED_write_data>

  // 6단계: 화면 품질 향상 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 8001824:	20b4      	movs	r0, #180	@ 0xb4
 8001826:	f7ff ff15 	bl	8001654 <OLED_write_cmd>
  {
    uint8_t enhA[2] = {0xA0, 0xFD};
 800182a:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 800182e:	813b      	strh	r3, [r7, #8]
    OLED_write_data(enhA, 2);
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff34 	bl	80016a4 <OLED_write_data>
  }

  // 7단계: 밝기와 전류 설정
  OLED_write_cmd(OLED_SETCONTRAST);     // 최대 밝기
 800183c:	20c1      	movs	r0, #193	@ 0xc1
 800183e:	f7ff ff09 	bl	8001654 <OLED_write_cmd>
  d = 0xFF;
 8001842:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <OLED_init+0x1b0>)
 8001844:	22ff      	movs	r2, #255	@ 0xff
 8001846:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001848:	2101      	movs	r1, #1
 800184a:	482d      	ldr	r0, [pc, #180]	@ (8001900 <OLED_init+0x1b0>)
 800184c:	f7ff ff2a 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_MASTERCURRENT);   // 마스터 전류
 8001850:	20c7      	movs	r0, #199	@ 0xc7
 8001852:	f7ff feff 	bl	8001654 <OLED_write_cmd>
  d = 0x0F;
 8001856:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <OLED_init+0x1b0>)
 8001858:	220f      	movs	r2, #15
 800185a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800185c:	2101      	movs	r1, #1
 800185e:	4828      	ldr	r0, [pc, #160]	@ (8001900 <OLED_init+0x1b0>)
 8001860:	f7ff ff20 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_DEFAULTGRAYSCALE); // 기본 그레이스케일 사용
 8001864:	20b9      	movs	r0, #185	@ 0xb9
 8001866:	f7ff fef5 	bl	8001654 <OLED_write_cmd>

  // 8단계: 전기적 특성 설정
  OLED_write_cmd(OLED_SETPHASELENGTH);  // 페이즈 길이
 800186a:	20b1      	movs	r0, #177	@ 0xb1
 800186c:	f7ff fef2 	bl	8001654 <OLED_write_cmd>
  d = 0xE2;
 8001870:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <OLED_init+0x1b0>)
 8001872:	22e2      	movs	r2, #226	@ 0xe2
 8001874:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001876:	2101      	movs	r1, #1
 8001878:	4821      	ldr	r0, [pc, #132]	@ (8001900 <OLED_init+0x1b0>)
 800187a:	f7ff ff13 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_DISPLAYENHANCE_B); // 화면 품질 향상 B
 800187e:	20d1      	movs	r0, #209	@ 0xd1
 8001880:	f7ff fee8 	bl	8001654 <OLED_write_cmd>
  {
    uint8_t enhB[2] = {0x82, 0x20};
 8001884:	f242 0382 	movw	r3, #8322	@ 0x2082
 8001888:	80bb      	strh	r3, [r7, #4]
    OLED_write_data(enhB, 2);
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2102      	movs	r1, #2
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff08 	bl	80016a4 <OLED_write_data>
  }

  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE); // 프리차지 전압
 8001894:	20bb      	movs	r0, #187	@ 0xbb
 8001896:	f7ff fedd 	bl	8001654 <OLED_write_cmd>
  d = 0x1F;
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <OLED_init+0x1b0>)
 800189c:	221f      	movs	r2, #31
 800189e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80018a0:	2101      	movs	r1, #1
 80018a2:	4817      	ldr	r0, [pc, #92]	@ (8001900 <OLED_init+0x1b0>)
 80018a4:	f7ff fefe 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_SETSECONDPRECHARGE);  // 두 번째 프리차지
 80018a8:	20b6      	movs	r0, #182	@ 0xb6
 80018aa:	f7ff fed3 	bl	8001654 <OLED_write_cmd>
  d = 0x08;
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <OLED_init+0x1b0>)
 80018b0:	2208      	movs	r2, #8
 80018b2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80018b4:	2101      	movs	r1, #1
 80018b6:	4812      	ldr	r0, [pc, #72]	@ (8001900 <OLED_init+0x1b0>)
 80018b8:	f7ff fef4 	bl	80016a4 <OLED_write_data>

  OLED_write_cmd(OLED_SETVCOMH);            // VCOM 전압
 80018bc:	20be      	movs	r0, #190	@ 0xbe
 80018be:	f7ff fec9 	bl	8001654 <OLED_write_cmd>
  d = 0x07;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <OLED_init+0x1b0>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80018c8:	2101      	movs	r1, #1
 80018ca:	480d      	ldr	r0, [pc, #52]	@ (8001900 <OLED_init+0x1b0>)
 80018cc:	f7ff feea 	bl	80016a4 <OLED_write_data>

  // 9단계: 디스플레이 모드 설정
  OLED_write_cmd(OLED_NORMALDISPLAY);       // 정상 디스플레이 모드
 80018d0:	20a6      	movs	r0, #166	@ 0xa6
 80018d2:	f7ff febf 	bl	8001654 <OLED_write_cmd>
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);  // 부분 디스플레이 모드 해제
 80018d6:	20a9      	movs	r0, #169	@ 0xa9
 80018d8:	f7ff febc 	bl	8001654 <OLED_write_cmd>

  // 10단계: 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80018dc:	233f      	movs	r3, #63	@ 0x3f
 80018de:	2200      	movs	r2, #0
 80018e0:	215b      	movs	r1, #91	@ 0x5b
 80018e2:	201c      	movs	r0, #28
 80018e4:	f7ff ff06 	bl	80016f4 <OLED_set_window>

  // 11단계: 디스플레이 켜기
  OLED_write_cmd(OLED_DISPLAYON);
 80018e8:	20af      	movs	r0, #175	@ 0xaf
 80018ea:	f7ff feb3 	bl	8001654 <OLED_write_cmd>
  HAL_Delay(50);  // 안정화 대기
 80018ee:	2032      	movs	r0, #50	@ 0x32
 80018f0:	f000 fd7e 	bl	80023f0 <HAL_Delay>
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	48000400 	.word	0x48000400
 8001900:	20000388 	.word	0x20000388

08001904 <OLED_fill>:

/* 화면 전체를 하나의 색으로 채우는 함수 */
void OLED_fill(uint8_t gray)  // gray: 0(검정)~15(흰색)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0a4      	sub	sp, #144	@ 0x90
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  // 4bpp에서는 1바이트에 2픽셀이 들어감 (4bit씩)
  uint8_t b = (gray << 4) | (gray & 0x0F);  // 왼쪽4bit + 오른쪽4bit
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	b25a      	sxtb	r2, r3
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	b25b      	sxtb	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t line[OLED_W/2];  // 한 줄에 필요한 바이트 수 (256픽셀 / 2 = 128바이트)
  memset(line, b, sizeof(line));  // 배열을 같은 값으로 채움
 8001928:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	2280      	movs	r2, #128	@ 0x80
 8001932:	4618      	mov	r0, r3
 8001934:	f006 fc5e 	bl	80081f4 <memset>

  // 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8001938:	233f      	movs	r3, #63	@ 0x3f
 800193a:	2200      	movs	r2, #0
 800193c:	215b      	movs	r1, #91	@ 0x5b
 800193e:	201c      	movs	r0, #28
 8001940:	f7ff fed8 	bl	80016f4 <OLED_set_window>
  OLED_write_cmd(OLED_WRITERAM);  // 메모리 쓰기 시작
 8001944:	205c      	movs	r0, #92	@ 0x5c
 8001946:	f7ff fe85 	bl	8001654 <OLED_write_cmd>

  // 64줄을 반복해서 같은 데이터 전송
  for (int y = 0; y < OLED_H; y++) {
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001950:	e00a      	b.n	8001968 <OLED_fill+0x64>
    OLED_write_data(line, sizeof(line));
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	2180      	movs	r1, #128	@ 0x80
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fea3 	bl	80016a4 <OLED_write_data>
  for (int y = 0; y < OLED_H; y++) {
 800195e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001962:	3301      	adds	r3, #1
 8001964:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800196c:	2b3f      	cmp	r3, #63	@ 0x3f
 800196e:	ddf0      	ble.n	8001952 <OLED_fill+0x4e>
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3790      	adds	r7, #144	@ 0x90
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <colbyte_from_x>:

/* ======== 좌표 변환 함수들 ======== */

/* 픽셀의 x좌표를 OLED의 column 바이트 주소로 변환 */
static uint8_t colbyte_from_x(int x)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  // 4bpp에서는 2픽셀당 1바이트이므로 x를 2로 나눔
  return OLED_COL_START + (x >> 1);  // x >> 1은 x / 2와 같음
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	105b      	asrs	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	331c      	adds	r3, #28
 800198a:	b2db      	uxtb	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <rowaddr_from_y>:

/* 픽셀의 y좌표를 OLED의 row 주소로 변환 */
static uint8_t rowaddr_from_y(int y)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y;  // y좌표는 그대로 사용
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	b2db      	uxtb	r3, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <oled_drawChar>:

/* ======== 문자 그리기 함수들 ======== */

/* 하나의 문자를 화면에 그리는 함수 */
void oled_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0ae      	sub	sp, #184	@ 0xb8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	71fb      	strb	r3, [r7, #7]
  // 1단계: 입력값 검증
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b1f      	cmp	r3, #31
 80019c4:	f240 80ea 	bls.w	8001b9c <oled_drawChar+0x1ec>
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80019cc:	f200 80e6 	bhi.w	8001b9c <oled_drawChar+0x1ec>
  if (gray > 15) gray = 15;         // 최대 밝기 제한
 80019d0:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d902      	bls.n	80019de <oled_drawChar+0x2e>
 80019d8:	230f      	movs	r3, #15
 80019da:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0

  // 2단계: 화면 범위 검사
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f2c0 80dd 	blt.w	8001ba0 <oled_drawChar+0x1f0>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019f4:	f300 80d4 	bgt.w	8001ba0 <oled_drawChar+0x1f0>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f2c0 80d2 	blt.w	8001ba4 <oled_drawChar+0x1f4>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	2b40      	cmp	r3, #64	@ 0x40
 8001a0c:	f300 80ca 	bgt.w	8001ba4 <oled_drawChar+0x1f4>

  // 3단계: 폰트 데이터에서 문자 찾기
  const int stride = font->height;           // 한 문자의 데이터 줄 수
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start  = (ch - 32) * stride;     // 문자 데이터 시작 위치 ('A'는 65-32=33번째)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f1a3 0220 	sub.w	r2, r3, #32
 8001a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2;  // 한 줄당 필요한 바이트 수
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	0fda      	lsrs	r2, r3, #31
 8001a32:	4413      	add	r3, r2
 8001a34:	105b      	asrs	r3, r3, #1
 8001a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W/2];  // 한 줄 데이터를 저장할 버퍼

  // 4단계: 문자의 각 줄을 처리
  for (int row = 0; row < font->height; row++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a40:	e0a3      	b.n	8001b8a <oled_drawChar+0x1da>
  {
    // 폰트 데이터에서 현재 줄의 비트맵 가져오기
    uint16_t mask = font->data[start + row];
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a4e:	440b      	add	r3, r1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    // 줄 버퍼를 0으로 초기화 (배경색)
    memset(linebuf, 0x00, bytes_per_row);
 8001a5a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f006 fbc5 	bl	80081f4 <memset>

    // 5단계: 각 픽셀을 처리 (왼쪽부터 오른쪽으로)
    for (int col = 0; col < font->width; col++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a70:	e04f      	b.n	8001b12 <oled_drawChar+0x162>
    {
      int byte_idx = (col >> 1);              // 현재 픽셀이 들어갈 바이트 위치
 8001a72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a76:	105b      	asrs	r3, r3, #1
 8001a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0);     // 바이트의 왼쪽 4bit인지 오른쪽 4bit인지
 8001a7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      // 현재 픽셀이 켜져있는지 확인
      if (mask & (0x8000 >> col))  // 0x8000에서 오른쪽으로 col번 이동한 비트 확인
 8001a92:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001a96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a9e:	fa41 f303 	asr.w	r3, r1, r3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02f      	beq.n	8001b08 <oled_drawChar+0x158>
      {
        // 픽셀이 켜져있으면 해당 위치에 색상 설정
        if (left_nibble)
 8001aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d015      	beq.n	8001adc <oled_drawChar+0x12c>
          linebuf[byte_idx] |= (gray << 4);   // 왼쪽 4bit에 색상
 8001ab0:	f107 0214 	add.w	r2, r7, #20
 8001ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ab8:	4413      	add	r3, r2
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b25a      	sxtb	r2, r3
 8001abe:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	b2d9      	uxtb	r1, r3
 8001acc:	f107 0214 	add.w	r2, r7, #20
 8001ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ad4:	4413      	add	r3, r2
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e015      	b.n	8001b08 <oled_drawChar+0x158>
        else
          linebuf[byte_idx] |= (gray & 0x0F); // 오른쪽 4bit에 색상
 8001adc:	f107 0214 	add.w	r2, r7, #20
 8001ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	b2d9      	uxtb	r1, r3
 8001afa:	f107 0214 	add.w	r2, r7, #20
 8001afe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b02:	4413      	add	r3, r2
 8001b04:	460a      	mov	r2, r1
 8001b06:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8001b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	dba8      	blt.n	8001a72 <oled_drawChar+0xc2>
      }
    }

    // 6단계: 현재 줄을 OLED에 전송
    uint8_t col_start = colbyte_from_x(x);           // 시작 column 주소
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7ff ff2a 	bl	800197a <colbyte_from_x>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end   = col_start + bytes_per_row - 1;  // 끝 column 주소
 8001b2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8001b36:	4413      	add	r3, r2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr  = rowaddr_from_y(y + row);     // 현재 row 주소
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b46:	4413      	add	r3, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff25 	bl	8001998 <rowaddr_from_y>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr);  // 그리기 영역 설정
 8001b54:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001b58:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8001b5c:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8001b60:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 8001b64:	f7ff fdc6 	bl	80016f4 <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);                   // 메모리 쓰기 시작
 8001b68:	205c      	movs	r0, #92	@ 0x5c
 8001b6a:	f7ff fd73 	bl	8001654 <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);         // 데이터 전송
 8001b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fd92 	bl	80016a4 <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 8001b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b84:	3301      	adds	r3, #1
 8001b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b94:	4293      	cmp	r3, r2
 8001b96:	f6ff af54 	blt.w	8001a42 <oled_drawChar+0x92>
 8001b9a:	e004      	b.n	8001ba6 <oled_drawChar+0x1f6>
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8001b9c:	bf00      	nop
 8001b9e:	e002      	b.n	8001ba6 <oled_drawChar+0x1f6>
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <oled_drawChar+0x1f6>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8001ba4:	bf00      	nop
  }
}
 8001ba6:	37b8      	adds	r7, #184	@ 0xb8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <oled_drawString>:

/* 문자열을 화면에 그리는 함수 */
void oled_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  int cx = x, cy = y;  // 현재 커서 위치
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	613b      	str	r3, [r7, #16]

  // 문자열의 끝까지 반복
  while (*str) {
 8001bc2:	e020      	b.n	8001c06 <oled_drawString+0x5a>
    if (*str == '\n') {  // 줄바꿈 문자
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b0a      	cmp	r3, #10
 8001bca:	d108      	bne.n	8001bde <oled_drawString+0x32>
      cy += font->height + 1;  // 다음 줄로 이동 (+1은 줄 간격)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
      cx = x;                  // 맨 왼쪽으로 돌아가기
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e010      	b.n	8001c00 <oled_drawString+0x54>
     // if (cx & 1) cx--;        // 시작 위치를 짝수로 맞춤 (니블 정렬)
    } // 사용시 "str\nstr" 이런식으로 쓰시면 됩니다.

    else if (*str != '\r') {   // 캐리지 리턴이 아닌 일반 문자
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b0d      	cmp	r3, #13
 8001be4:	d00c      	beq.n	8001c00 <oled_drawString+0x54>
      oled_drawChar(cx, cy, *str, font, gray);  // 현재 위치에 문자 그리기
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6939      	ldr	r1, [r7, #16]
 8001bf4:	6978      	ldr	r0, [r7, #20]
 8001bf6:	f7ff fedb 	bl	80019b0 <oled_drawChar>
      cx += 4;  // 다음 문자 위치로 이동 (4픽셀 간격으로 설정)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]

      // 원래 코드: cx += font->width + 1; (폰트 너비 + 1픽셀 간격)
      // 원래 코드: if (cx & 1) cx++;      (다음 위치를 짝수로 맞춤)
      // → 이 두 줄이 문자 사이에 큰 간격을 만들었음
    }
    str++;  // 다음 문자로 이동
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3301      	adds	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
  while (*str) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1da      	bne.n	8001bc4 <oled_drawString+0x18>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <MX_SPI3_Init+0x78>)
 8001c20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c32:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c4e:	2228      	movs	r2, #40	@ 0x28
 8001c50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c66:	2207      	movs	r2, #7
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c72:	2208      	movs	r2, #8
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_SPI3_Init+0x74>)
 8001c78:	f002 fce2 	bl	8004640 <HAL_SPI_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001c82:	f7ff fce1 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000038c 	.word	0x2000038c
 8001c90:	40003c00 	.word	0x40003c00

08001c94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <HAL_SPI_MspInit+0x7c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d127      	bne.n	8001d06 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001ce6:	2328      	movs	r3, #40	@ 0x28
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cf6:	2306      	movs	r3, #6
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <HAL_SPI_MspInit+0x84>)
 8001d02:	f001 fb31 	bl	8003368 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	@ 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40003c00 	.word	0x40003c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d26:	4a0e      	ldr	r2, [pc, #56]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	4a08      	ldr	r2, [pc, #32]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d52:	f001 fd47 	bl	80037e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <NMI_Handler+0x4>

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dba:	f000 fafb 	bl	80023b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <DMA1_Channel1_IRQHandler+0x10>)
 8001dca:	f000 fe26 	bl	8002a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000051c 	.word	0x2000051c

08001dd8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <FDCAN1_IT0_IRQHandler+0x10>)
 8001dde:	f001 f8c5 	bl	8002f6c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200001f0 	.word	0x200001f0

08001dec <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <FDCAN1_IT1_IRQHandler+0x10>)
 8001df2:	f001 f8bb 	bl	8002f6c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200001f0 	.word	0x200001f0

08001e00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e04:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <USART1_IRQHandler+0x10>)
 8001e06:	f003 f87f 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200003f4 	.word	0x200003f4

08001e14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <USART3_IRQHandler+0x10>)
 8001e1a:	f003 f875 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000488 	.word	0x20000488

08001e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return 1;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_kill>:

int _kill(int pid, int sig)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e42:	f006 fa29 	bl	8008298 <__errno>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2216      	movs	r2, #22
 8001e4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <_exit>:

void _exit (int status)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ffe7 	bl	8001e38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e6a:	bf00      	nop
 8001e6c:	e7fd      	b.n	8001e6a <_exit+0x12>

08001e6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e00a      	b.n	8001e96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e80:	f3af 8000 	nop.w
 8001e84:	4601      	mov	r1, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	60ba      	str	r2, [r7, #8]
 8001e8c:	b2ca      	uxtb	r2, r1
 8001e8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dbf0      	blt.n	8001e80 <_read+0x12>
  }

  return len;
 8001e9e:	687b      	ldr	r3, [r7, #4]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e009      	b.n	8001ece <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f970 	bl	80011a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbf1      	blt.n	8001eba <_write+0x12>
  }
  return len;
 8001ed6:	687b      	ldr	r3, [r7, #4]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_close>:

int _close(int file)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f08:	605a      	str	r2, [r3, #4]
  return 0;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_isatty>:

int _isatty(int file)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f20:	2301      	movs	r3, #1
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f50:	4a14      	ldr	r2, [pc, #80]	@ (8001fa4 <_sbrk+0x5c>)
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <_sbrk+0x60>)
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <_sbrk+0x64>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <_sbrk+0x68>)
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d207      	bcs.n	8001f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f78:	f006 f98e 	bl	8008298 <__errno>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	220c      	movs	r2, #12
 8001f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	e009      	b.n	8001f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	4a05      	ldr	r2, [pc, #20]	@ (8001fac <_sbrk+0x64>)
 8001f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20008000 	.word	0x20008000
 8001fa8:	00000400 	.word	0x00000400
 8001fac:	200003f0 	.word	0x200003f0
 8001fb0:	200006d0 	.word	0x200006d0

08001fb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <SystemInit+0x20>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <SystemInit+0x20>)
 8001fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8001fde:	4a23      	ldr	r2, [pc, #140]	@ (800206c <MX_USART1_UART_Init+0x94>)
 8001fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8001fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8002016:	2200      	movs	r2, #0
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 800201c:	2200      	movs	r2, #0
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002020:	4811      	ldr	r0, [pc, #68]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8002022:	f002 fe93 	bl	8004d4c <HAL_UART_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800202c:	f7ff fb0c 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002030:	2100      	movs	r1, #0
 8002032:	480d      	ldr	r0, [pc, #52]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8002034:	f005 f8da 	bl	80071ec <HAL_UARTEx_SetTxFifoThreshold>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800203e:	f7ff fb03 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002042:	2100      	movs	r1, #0
 8002044:	4808      	ldr	r0, [pc, #32]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8002046:	f005 f90f 	bl	8007268 <HAL_UARTEx_SetRxFifoThreshold>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002050:	f7ff fafa 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002054:	4804      	ldr	r0, [pc, #16]	@ (8002068 <MX_USART1_UART_Init+0x90>)
 8002056:	f005 f890 	bl	800717a <HAL_UARTEx_DisableFifoMode>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002060:	f7ff faf2 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200003f4 	.word	0x200003f4
 800206c:	40013800 	.word	0x40013800

08002070 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002074:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 8002076:	4a25      	ldr	r2, [pc, #148]	@ (800210c <MX_USART3_UART_Init+0x9c>)
 8002078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800207a:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 800207c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002080:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800208e:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ac:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80020b8:	2300      	movs	r3, #0
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	4812      	ldr	r0, [pc, #72]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 80020c0:	f004 ffd4 	bl	800706c <HAL_RS485Ex_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 80020ca:	f7ff fabd 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ce:	2100      	movs	r1, #0
 80020d0:	480d      	ldr	r0, [pc, #52]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 80020d2:	f005 f88b 	bl	80071ec <HAL_UARTEx_SetTxFifoThreshold>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 80020dc:	f7ff fab4 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e0:	2100      	movs	r1, #0
 80020e2:	4809      	ldr	r0, [pc, #36]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 80020e4:	f005 f8c0 	bl	8007268 <HAL_UARTEx_SetRxFifoThreshold>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 80020ee:	f7ff faab 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	@ (8002108 <MX_USART3_UART_Init+0x98>)
 80020f4:	f005 f841 	bl	800717a <HAL_UARTEx_DisableFifoMode>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 80020fe:	f7ff faa3 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000488 	.word	0x20000488
 800210c:	40004800 	.word	0x40004800

08002110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b09c      	sub	sp, #112	@ 0x70
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002128:	f107 0318 	add.w	r3, r7, #24
 800212c:	2244      	movs	r2, #68	@ 0x44
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f006 f85f 	bl	80081f4 <memset>
  if(uartHandle->Instance==USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a5a      	ldr	r2, [pc, #360]	@ (80022a4 <HAL_UART_MspInit+0x194>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d13e      	bne.n	80021be <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002140:	2301      	movs	r3, #1
 8002142:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 0318 	add.w	r3, r7, #24
 800214c:	4618      	mov	r0, r3
 800214e:	f002 f887 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002158:	f7ff fa76 	bl	8001648 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800215c:	4b52      	ldr	r3, [pc, #328]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 800215e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002160:	4a51      	ldr	r2, [pc, #324]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002166:	6613      	str	r3, [r2, #96]	@ 0x60
 8002168:	4b4f      	ldr	r3, [pc, #316]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	4b4c      	ldr	r3, [pc, #304]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002178:	4a4b      	ldr	r2, [pc, #300]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002180:	4b49      	ldr	r3, [pc, #292]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800218c:	23c0      	movs	r3, #192	@ 0xc0
 800218e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800219c:	2307      	movs	r3, #7
 800219e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021a4:	4619      	mov	r1, r3
 80021a6:	4841      	ldr	r0, [pc, #260]	@ (80022ac <HAL_UART_MspInit+0x19c>)
 80021a8:	f001 f8de 	bl	8003368 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2025      	movs	r0, #37	@ 0x25
 80021b2:	f000 fa1a 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021b6:	2025      	movs	r0, #37	@ 0x25
 80021b8:	f000 fa31 	bl	800261e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021bc:	e06d      	b.n	800229a <HAL_UART_MspInit+0x18a>
  else if(uartHandle->Instance==USART3)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a3b      	ldr	r2, [pc, #236]	@ (80022b0 <HAL_UART_MspInit+0x1a0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d168      	bne.n	800229a <HAL_UART_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d0:	f107 0318 	add.w	r3, r7, #24
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 f843 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80021e0:	f7ff fa32 	bl	8001648 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021e4:	4b30      	ldr	r3, [pc, #192]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	4a2f      	ldr	r2, [pc, #188]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 80021ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f0:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002208:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <HAL_UART_MspInit+0x198>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|Modbus_DE_Pin;
 8002214:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 8002218:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002226:	2307      	movs	r3, #7
 8002228:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800222e:	4619      	mov	r1, r3
 8002230:	481e      	ldr	r0, [pc, #120]	@ (80022ac <HAL_UART_MspInit+0x19c>)
 8002232:	f001 f899 	bl	8003368 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 8002238:	4a1f      	ldr	r2, [pc, #124]	@ (80022b8 <HAL_UART_MspInit+0x1a8>)
 800223a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800223c:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 800223e:	221c      	movs	r2, #28
 8002240:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 8002250:	2280      	movs	r2, #128	@ 0x80
 8002252:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 8002256:	2200      	movs	r2, #0
 8002258:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002260:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800226c:	4811      	ldr	r0, [pc, #68]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 800226e:	f000 f9f1 	bl	8002654 <HAL_DMA_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8002278:	f7ff f9e6 	bl	8001648 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0d      	ldr	r2, [pc, #52]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 8002280:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_UART_MspInit+0x1a4>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2027      	movs	r0, #39	@ 0x27
 8002290:	f000 f9ab 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002294:	2027      	movs	r0, #39	@ 0x27
 8002296:	f000 f9c2 	bl	800261e <HAL_NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3770      	adds	r7, #112	@ 0x70
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40013800 	.word	0x40013800
 80022a8:	40021000 	.word	0x40021000
 80022ac:	48000400 	.word	0x48000400
 80022b0:	40004800 	.word	0x40004800
 80022b4:	2000051c 	.word	0x2000051c
 80022b8:	40020008 	.word	0x40020008

080022bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022bc:	480d      	ldr	r0, [pc, #52]	@ (80022f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c0:	f7ff fe78 	bl	8001fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c4:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c6:	490d      	ldr	r1, [pc, #52]	@ (80022fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002300 <LoopForever+0xe>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022cc:	e002      	b.n	80022d4 <LoopCopyDataInit>

080022ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d2:	3304      	adds	r3, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d8:	d3f9      	bcc.n	80022ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002308 <LoopForever+0x16>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e0:	e001      	b.n	80022e6 <LoopFillZerobss>

080022e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e4:	3204      	adds	r2, #4

080022e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e8:	d3fb      	bcc.n	80022e2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80022ea:	f005 ffdb 	bl	80082a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ee:	f7ff f88b 	bl	8001408 <main>

080022f2 <LoopForever>:

LoopForever:
    b LoopForever
 80022f2:	e7fe      	b.n	80022f2 <LoopForever>
  ldr   r0, =_estack
 80022f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002300:	0800aea4 	.word	0x0800aea4
  ldr r2, =_sbss
 8002304:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002308:	200006cc 	.word	0x200006cc

0800230c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC1_2_IRQHandler>

0800230e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 f95b 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231e:	200f      	movs	r0, #15
 8002320:	f000 f80e 	bl	8002340 <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	e001      	b.n	8002334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002330:	f7ff fcf4 	bl	8001d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002334:	79fb      	ldrb	r3, [r7, #7]

}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_InitTick+0x68>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d022      	beq.n	800239a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002354:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_InitTick+0x6c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_InitTick+0x68>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f966 	bl	800263a <HAL_SYSTICK_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10f      	bne.n	8002394 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	d809      	bhi.n	800238e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237a:	2200      	movs	r2, #0
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	f000 f932 	bl	80025ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <HAL_InitTick+0x70>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e007      	b.n	800239e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e004      	b.n	800239e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_IncTick+0x1c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_IncTick+0x20>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a03      	ldr	r2, [pc, #12]	@ (80023d0 <HAL_IncTick+0x1c>)
 80023c4:	6013      	str	r3, [r2, #0]
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	2000057c 	.word	0x2000057c
 80023d4:	20000008 	.word	0x20000008

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	2000057c 	.word	0x2000057c

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d004      	beq.n	8002414 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_Delay+0x40>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002414:	bf00      	nop
 8002416:	f7ff ffdf 	bl	80023d8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	429a      	cmp	r2, r3
 8002424:	d8f7      	bhi.n	8002416 <HAL_Delay+0x26>
  {
  }
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000008 	.word	0x20000008

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4907      	ldr	r1, [pc, #28]	@ (80024d0 <__NVIC_EnableIRQ+0x38>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	@ (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	@ (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f7ff ff8e 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff29 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff40 	bl	800247c <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff90 	bl	8002528 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5f 	bl	80024d4 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff33 	bl	8002498 <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa4 	bl	8002590 <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e08d      	b.n	8002782 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_DMA_Init+0x138>)
 800266e:	429a      	cmp	r2, r3
 8002670:	d80f      	bhi.n	8002692 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	4b45      	ldr	r3, [pc, #276]	@ (8002790 <HAL_DMA_Init+0x13c>)
 800267a:	4413      	add	r3, r2
 800267c:	4a45      	ldr	r2, [pc, #276]	@ (8002794 <HAL_DMA_Init+0x140>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	009a      	lsls	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a42      	ldr	r2, [pc, #264]	@ (8002798 <HAL_DMA_Init+0x144>)
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002690:	e00e      	b.n	80026b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b40      	ldr	r3, [pc, #256]	@ (800279c <HAL_DMA_Init+0x148>)
 800269a:	4413      	add	r3, r2
 800269c:	4a3d      	ldr	r2, [pc, #244]	@ (8002794 <HAL_DMA_Init+0x140>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	009a      	lsls	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a3c      	ldr	r2, [pc, #240]	@ (80027a0 <HAL_DMA_Init+0x14c>)
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa76 	bl	8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002710:	d102      	bne.n	8002718 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800272c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d010      	beq.n	8002758 <HAL_DMA_Init+0x104>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b04      	cmp	r3, #4
 800273c:	d80c      	bhi.n	8002758 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa96 	bl	8002c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	e008      	b.n	800276a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40020407 	.word	0x40020407
 8002790:	bffdfff8 	.word	0xbffdfff8
 8002794:	cccccccd 	.word	0xcccccccd
 8002798:	40020000 	.word	0x40020000
 800279c:	bffdfbf8 	.word	0xbffdfbf8
 80027a0:	40020400 	.word	0x40020400

080027a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_DMA_Start_IT+0x20>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e066      	b.n	8002892 <HAL_DMA_Start_IT+0xee>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d155      	bne.n	8002884 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f9bb 	bl	8002b78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 020e 	orr.w	r2, r2, #14
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e00f      	b.n	800283c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0204 	bic.w	r2, r2, #4
 800282a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 020a 	orr.w	r2, r2, #10
 800283a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002858:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002870:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e005      	b.n	8002890 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800288c:	2302      	movs	r3, #2
 800288e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002890:	7dfb      	ldrb	r3, [r7, #23]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d005      	beq.n	80028be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e037      	b.n	800292e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 020e 	bic.w	r2, r2, #14
 80028cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f003 021f 	and.w	r2, r3, #31
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	2101      	movs	r1, #1
 80028fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002900:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800290a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002922:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800292c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d00d      	beq.n	8002980 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2204      	movs	r2, #4
 8002968:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e047      	b.n	8002a10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 020e 	bic.w	r2, r2, #14
 800298e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
    }
  }
  return status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d026      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x7a>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d021      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f003 021f 	and.w	r2, r3, #31
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d071      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a92:	e06c      	b.n	8002b6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02e      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d029      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 020a 	bic.w	r2, r2, #10
 8002ace:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d038      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b04:	e033      	b.n	8002b6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2208      	movs	r2, #8
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d025      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 020e 	bic.w	r2, r2, #14
 8002b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
}
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b8e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ba0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f003 021f 	and.w	r2, r3, #31
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d108      	bne.n	8002bd8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bd6:	e007      	b.n	8002be8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b16      	ldr	r3, [pc, #88]	@ (8002c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d802      	bhi.n	8002c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e001      	b.n	8002c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002c0e:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c10:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3b08      	subs	r3, #8
 8002c1e:	4a12      	ldr	r2, [pc, #72]	@ (8002c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	009a      	lsls	r2, r3, #2
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2201      	movs	r2, #1
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40020407 	.word	0x40020407
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020820 	.word	0x40020820
 8002c68:	cccccccd 	.word	0xcccccccd
 8002c6c:	40020880 	.word	0x40020880

08002c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a08      	ldr	r2, [pc, #32]	@ (8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c92:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	1000823f 	.word	0x1000823f
 8002cb4:	40020940 	.word	0x40020940

08002cb8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e147      	b.n	8002f5a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe f992 	bl	8001008 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0210 	bic.w	r2, r2, #16
 8002cf2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7ff fb70 	bl	80023d8 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cfa:	e012      	b.n	8002d22 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cfc:	f7ff fb6c 	bl	80023d8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b0a      	cmp	r3, #10
 8002d08:	d90b      	bls.n	8002d22 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e11b      	b.n	8002f5a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d0e5      	beq.n	8002cfc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d40:	f7ff fb4a 	bl	80023d8 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d46:	e012      	b.n	8002d6e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d48:	f7ff fb46 	bl	80023d8 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b0a      	cmp	r3, #10
 8002d54:	d90b      	bls.n	8002d6e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2203      	movs	r2, #3
 8002d66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0f5      	b.n	8002f5a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0e5      	beq.n	8002d48 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0202 	orr.w	r2, r2, #2
 8002d8a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a74      	ldr	r2, [pc, #464]	@ (8002f64 <HAL_FDCAN_Init+0x2ac>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d103      	bne.n	8002d9e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d96:	4a74      	ldr	r2, [pc, #464]	@ (8002f68 <HAL_FDCAN_Init+0x2b0>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7c1b      	ldrb	r3, [r3, #16]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d108      	bne.n	8002db8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002db4:	619a      	str	r2, [r3, #24]
 8002db6:	e007      	b.n	8002dc8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7c5b      	ldrb	r3, [r3, #17]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d108      	bne.n	8002de2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dde:	619a      	str	r2, [r3, #24]
 8002de0:	e007      	b.n	8002df2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002df0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7c9b      	ldrb	r3, [r3, #18]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d108      	bne.n	8002e0c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e08:	619a      	str	r2, [r3, #24]
 8002e0a:	e007      	b.n	8002e1c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e1a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002e40:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0210 	bic.w	r2, r2, #16
 8002e50:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d108      	bne.n	8002e6c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0204 	orr.w	r2, r2, #4
 8002e68:	619a      	str	r2, [r3, #24]
 8002e6a:	e02c      	b.n	8002ec6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d028      	beq.n	8002ec6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e8a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0210 	orr.w	r2, r2, #16
 8002e9a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d110      	bne.n	8002ec6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0220 	orr.w	r2, r2, #32
 8002eb2:	619a      	str	r2, [r3, #24]
 8002eb4:	e007      	b.n	8002ec6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699a      	ldr	r2, [r3, #24]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0220 	orr.w	r2, r2, #32
 8002ec4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ed6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ede:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002eee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ef0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002efa:	d115      	bne.n	8002f28 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	3b01      	subs	r3, #1
 8002f08:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f0a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	3b01      	subs	r3, #1
 8002f12:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002f14:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f24:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f26:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9bc 	bl	80032bc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40006400 	.word	0x40006400
 8002f68:	40006500 	.word	0x40006500

08002f6c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	@ 0x30
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f88:	4013      	ands	r3, r2
 8002f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb8:	4013      	ands	r3, r2
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002fc6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	6a3a      	ldr	r2, [r7, #32]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fda:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002fde:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ffa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d006      	beq.n	8003022 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2240      	movs	r2, #64	@ 0x40
 800301a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f92d 	bl	800327c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01a      	beq.n	8003064 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d014      	beq.n	8003064 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003042:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800305a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800305c:	6939      	ldr	r1, [r7, #16]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8ed 	bl	800323e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003070:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8ac 	bl	80031d2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003086:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8ac 	bl	80031e8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800309e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8ac 	bl	80031fe <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	0a5b      	lsrs	r3, r3, #9
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	0a5b      	lsrs	r3, r3, #9
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f8a3 	bl	8003214 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	09db      	lsrs	r3, r3, #7
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	09db      	lsrs	r3, r3, #7
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d013      	beq.n	800310e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030ee:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2280      	movs	r2, #128	@ 0x80
 8003104:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f88d 	bl	8003228 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	0b5b      	lsrs	r3, r3, #13
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	0b5b      	lsrs	r3, r3, #13
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800312e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f88f 	bl	8003254 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	0bdb      	lsrs	r3, r3, #15
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	0bdb      	lsrs	r3, r3, #15
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003156:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f885 	bl	8003268 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	0b9b      	lsrs	r3, r3, #14
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	0b9b      	lsrs	r3, r3, #14
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800317e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003184:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800319a:	69f9      	ldr	r1, [r7, #28]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f881 	bl	80032a4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f863 	bl	8003290 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80031ca:	bf00      	nop
 80031cc:	3730      	adds	r7, #48	@ 0x30
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80032c6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032de:	041a      	lsls	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032fc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	061a      	lsls	r2, r3, #24
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e005      	b.n	800334a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	429a      	cmp	r2, r3
 8003354:	d3f3      	bcc.n	800333e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	4000a400 	.word	0x4000a400

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003376:	e15a      	b.n	800362e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 814c 	beq.w	8003628 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d005      	beq.n	80033a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d130      	bne.n	800340a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033de:	2201      	movs	r2, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 0201 	and.w	r2, r3, #1
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b03      	cmp	r3, #3
 8003414:	d017      	beq.n	8003446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d123      	bne.n	800349a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	08da      	lsrs	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3208      	adds	r2, #8
 800345a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	6939      	ldr	r1, [r7, #16]
 8003496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2203      	movs	r2, #3
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0203 	and.w	r2, r3, #3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80a6 	beq.w	8003628 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034dc:	4b5b      	ldr	r3, [pc, #364]	@ (800364c <HAL_GPIO_Init+0x2e4>)
 80034de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e0:	4a5a      	ldr	r2, [pc, #360]	@ (800364c <HAL_GPIO_Init+0x2e4>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80034e8:	4b58      	ldr	r3, [pc, #352]	@ (800364c <HAL_GPIO_Init+0x2e4>)
 80034ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034f4:	4a56      	ldr	r2, [pc, #344]	@ (8003650 <HAL_GPIO_Init+0x2e8>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	3302      	adds	r3, #2
 80034fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	220f      	movs	r2, #15
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800351e:	d01f      	beq.n	8003560 <HAL_GPIO_Init+0x1f8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a4c      	ldr	r2, [pc, #304]	@ (8003654 <HAL_GPIO_Init+0x2ec>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d019      	beq.n	800355c <HAL_GPIO_Init+0x1f4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a4b      	ldr	r2, [pc, #300]	@ (8003658 <HAL_GPIO_Init+0x2f0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <HAL_GPIO_Init+0x1f0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a4a      	ldr	r2, [pc, #296]	@ (800365c <HAL_GPIO_Init+0x2f4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00d      	beq.n	8003554 <HAL_GPIO_Init+0x1ec>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a49      	ldr	r2, [pc, #292]	@ (8003660 <HAL_GPIO_Init+0x2f8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d007      	beq.n	8003550 <HAL_GPIO_Init+0x1e8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a48      	ldr	r2, [pc, #288]	@ (8003664 <HAL_GPIO_Init+0x2fc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_GPIO_Init+0x1e4>
 8003548:	2305      	movs	r3, #5
 800354a:	e00a      	b.n	8003562 <HAL_GPIO_Init+0x1fa>
 800354c:	2306      	movs	r3, #6
 800354e:	e008      	b.n	8003562 <HAL_GPIO_Init+0x1fa>
 8003550:	2304      	movs	r3, #4
 8003552:	e006      	b.n	8003562 <HAL_GPIO_Init+0x1fa>
 8003554:	2303      	movs	r3, #3
 8003556:	e004      	b.n	8003562 <HAL_GPIO_Init+0x1fa>
 8003558:	2302      	movs	r3, #2
 800355a:	e002      	b.n	8003562 <HAL_GPIO_Init+0x1fa>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_GPIO_Init+0x1fa>
 8003560:	2300      	movs	r3, #0
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	f002 0203 	and.w	r2, r2, #3
 8003568:	0092      	lsls	r2, r2, #2
 800356a:	4093      	lsls	r3, r2
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003572:	4937      	ldr	r1, [pc, #220]	@ (8003650 <HAL_GPIO_Init+0x2e8>)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	3302      	adds	r3, #2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003580:	4b39      	ldr	r3, [pc, #228]	@ (8003668 <HAL_GPIO_Init+0x300>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035a4:	4a30      	ldr	r2, [pc, #192]	@ (8003668 <HAL_GPIO_Init+0x300>)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003668 <HAL_GPIO_Init+0x300>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ce:	4a26      	ldr	r2, [pc, #152]	@ (8003668 <HAL_GPIO_Init+0x300>)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035d4:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <HAL_GPIO_Init+0x300>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003668 <HAL_GPIO_Init+0x300>)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <HAL_GPIO_Init+0x300>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	43db      	mvns	r3, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4013      	ands	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003622:	4a11      	ldr	r2, [pc, #68]	@ (8003668 <HAL_GPIO_Init+0x300>)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3301      	adds	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	f47f ae9d 	bne.w	8003378 <HAL_GPIO_Init+0x10>
  }
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40021000 	.word	0x40021000
 8003650:	40010000 	.word	0x40010000
 8003654:	48000400 	.word	0x48000400
 8003658:	48000800 	.word	0x48000800
 800365c:	48000c00 	.word	0x48000c00
 8003660:	48001000 	.word	0x48001000
 8003664:	48001400 	.word	0x48001400
 8003668:	40010400 	.word	0x40010400

0800366c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]
 8003678:	4613      	mov	r3, r2
 800367a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800367c:	787b      	ldrb	r3, [r7, #1]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003688:	e002      	b.n	8003690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d141      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036aa:	4b4b      	ldr	r3, [pc, #300]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b6:	d131      	bne.n	800371c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b8:	4b47      	ldr	r3, [pc, #284]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036be:	4a46      	ldr	r2, [pc, #280]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036c8:	4b43      	ldr	r3, [pc, #268]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036d0:	4a41      	ldr	r2, [pc, #260]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036d8:	4b40      	ldr	r3, [pc, #256]	@ (80037dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2232      	movs	r2, #50	@ 0x32
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	4a3f      	ldr	r2, [pc, #252]	@ (80037e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9b      	lsrs	r3, r3, #18
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ee:	e002      	b.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f6:	4b38      	ldr	r3, [pc, #224]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003702:	d102      	bne.n	800370a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f2      	bne.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800370a:	4b33      	ldr	r3, [pc, #204]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003716:	d158      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e057      	b.n	80037cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800371c:	4b2e      	ldr	r3, [pc, #184]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003722:	4a2d      	ldr	r2, [pc, #180]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003728:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800372c:	e04d      	b.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003734:	d141      	bne.n	80037ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003736:	4b28      	ldr	r3, [pc, #160]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003742:	d131      	bne.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003744:	4b24      	ldr	r3, [pc, #144]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800374a:	4a23      	ldr	r2, [pc, #140]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003750:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003754:	4b20      	ldr	r3, [pc, #128]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800375c:	4a1e      	ldr	r2, [pc, #120]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003762:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003764:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2232      	movs	r2, #50	@ 0x32
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	4a1c      	ldr	r2, [pc, #112]	@ (80037e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	0c9b      	lsrs	r3, r3, #18
 8003776:	3301      	adds	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800377a:	e002      	b.n	8003782 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3b01      	subs	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378e:	d102      	bne.n	8003796 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f2      	bne.n	800377c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003796:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a2:	d112      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e011      	b.n	80037cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037a8:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ae:	4a0a      	ldr	r2, [pc, #40]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80037b8:	e007      	b.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037ba:	4b07      	ldr	r3, [pc, #28]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037c2:	4a05      	ldr	r2, [pc, #20]	@ (80037d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40007000 	.word	0x40007000
 80037dc:	20000000 	.word	0x20000000
 80037e0:	431bde83 	.word	0x431bde83

080037e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a04      	ldr	r2, [pc, #16]	@ (8003800 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f2:	6093      	str	r3, [r2, #8]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40007000 	.word	0x40007000

08003804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e2fe      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d075      	beq.n	800390e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003822:	4b97      	ldr	r3, [pc, #604]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800382c:	4b94      	ldr	r3, [pc, #592]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d102      	bne.n	8003842 <HAL_RCC_OscConfig+0x3e>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d002      	beq.n	8003848 <HAL_RCC_OscConfig+0x44>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d10b      	bne.n	8003860 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	4b8d      	ldr	r3, [pc, #564]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d05b      	beq.n	800390c <HAL_RCC_OscConfig+0x108>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d157      	bne.n	800390c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e2d9      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003868:	d106      	bne.n	8003878 <HAL_RCC_OscConfig+0x74>
 800386a:	4b85      	ldr	r3, [pc, #532]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a84      	ldr	r2, [pc, #528]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e01d      	b.n	80038b4 <HAL_RCC_OscConfig+0xb0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003880:	d10c      	bne.n	800389c <HAL_RCC_OscConfig+0x98>
 8003882:	4b7f      	ldr	r3, [pc, #508]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7e      	ldr	r2, [pc, #504]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7b      	ldr	r2, [pc, #492]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e00b      	b.n	80038b4 <HAL_RCC_OscConfig+0xb0>
 800389c:	4b78      	ldr	r3, [pc, #480]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a77      	ldr	r2, [pc, #476]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b75      	ldr	r3, [pc, #468]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a74      	ldr	r2, [pc, #464]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe fd8c 	bl	80023d8 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fe fd88 	bl	80023d8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	@ 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e29e      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0xc0>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe fd78 	bl	80023d8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fe fd74 	bl	80023d8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	@ 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e28a      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038fe:	4b60      	ldr	r3, [pc, #384]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0xe8>
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d075      	beq.n	8003a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391a:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003924:	4b56      	ldr	r3, [pc, #344]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d102      	bne.n	800393a <HAL_RCC_OscConfig+0x136>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d002      	beq.n	8003940 <HAL_RCC_OscConfig+0x13c>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d11f      	bne.n	8003980 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003940:	4b4f      	ldr	r3, [pc, #316]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_OscConfig+0x154>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e25d      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4b49      	ldr	r3, [pc, #292]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	4946      	ldr	r1, [pc, #280]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800396c:	4b45      	ldr	r3, [pc, #276]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fce5 	bl	8002340 <HAL_InitTick>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d043      	beq.n	8003a04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e249      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d023      	beq.n	80039d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003988:	4b3d      	ldr	r3, [pc, #244]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 800398e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe fd20 	bl	80023d8 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399c:	f7fe fd1c 	bl	80023d8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e232      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ae:	4b34      	ldr	r3, [pc, #208]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b31      	ldr	r3, [pc, #196]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	061b      	lsls	r3, r3, #24
 80039c8:	492d      	ldr	r1, [pc, #180]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
 80039ce:	e01a      	b.n	8003a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80039d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe fcfc 	bl	80023d8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e4:	f7fe fcf8 	bl	80023d8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e20e      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f6:	4b22      	ldr	r3, [pc, #136]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x1e0>
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d041      	beq.n	8003a96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1a:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a20:	4a17      	ldr	r2, [pc, #92]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fcd5 	bl	80023d8 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fe fcd1 	bl	80023d8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1e7      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a44:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ef      	beq.n	8003a32 <HAL_RCC_OscConfig+0x22e>
 8003a52:	e020      	b.n	8003a96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a54:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a5a:	4a09      	ldr	r2, [pc, #36]	@ (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fe fcb8 	bl	80023d8 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a6a:	e00d      	b.n	8003a88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6c:	f7fe fcb4 	bl	80023d8 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d906      	bls.n	8003a88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e1ca      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a88:	4b8c      	ldr	r3, [pc, #560]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ea      	bne.n	8003a6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a6 	beq.w	8003bf0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aa8:	4b84      	ldr	r3, [pc, #528]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2b4>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x2b6>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b7f      	ldr	r3, [pc, #508]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aca:	4b7c      	ldr	r3, [pc, #496]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ada:	4b79      	ldr	r3, [pc, #484]	@ (8003cc0 <HAL_RCC_OscConfig+0x4bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae6:	4b76      	ldr	r3, [pc, #472]	@ (8003cc0 <HAL_RCC_OscConfig+0x4bc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a75      	ldr	r2, [pc, #468]	@ (8003cc0 <HAL_RCC_OscConfig+0x4bc>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fc71 	bl	80023d8 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fe fc6d 	bl	80023d8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e183      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc0 <HAL_RCC_OscConfig+0x4bc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d108      	bne.n	8003b32 <HAL_RCC_OscConfig+0x32e>
 8003b20:	4b66      	ldr	r3, [pc, #408]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b26:	4a65      	ldr	r2, [pc, #404]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b30:	e024      	b.n	8003b7c <HAL_RCC_OscConfig+0x378>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d110      	bne.n	8003b5c <HAL_RCC_OscConfig+0x358>
 8003b3a:	4b60      	ldr	r3, [pc, #384]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b40:	4a5e      	ldr	r2, [pc, #376]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b50:	4a5a      	ldr	r2, [pc, #360]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b5a:	e00f      	b.n	8003b7c <HAL_RCC_OscConfig+0x378>
 8003b5c:	4b57      	ldr	r3, [pc, #348]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b62:	4a56      	ldr	r2, [pc, #344]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b6c:	4b53      	ldr	r3, [pc, #332]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	4a52      	ldr	r2, [pc, #328]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d016      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fe fc28 	bl	80023d8 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fe fc24 	bl	80023d8 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e138      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba2:	4b46      	ldr	r3, [pc, #280]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ed      	beq.n	8003b8c <HAL_RCC_OscConfig+0x388>
 8003bb0:	e015      	b.n	8003bde <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fc11 	bl	80023d8 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe fc0d 	bl	80023d8 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e121      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ed      	bne.n	8003bba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bde:	7ffb      	ldrb	r3, [r7, #31]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be4:	4b35      	ldr	r3, [pc, #212]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	4a34      	ldr	r2, [pc, #208]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d03c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01c      	beq.n	8003c3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c04:	4b2d      	ldr	r3, [pc, #180]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fe fbe0 	bl	80023d8 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c1c:	f7fe fbdc 	bl	80023d8 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e0f2      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c2e:	4b23      	ldr	r3, [pc, #140]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ef      	beq.n	8003c1c <HAL_RCC_OscConfig+0x418>
 8003c3c:	e01b      	b.n	8003c76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c44:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fbc3 	bl	80023d8 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c56:	f7fe fbbf 	bl	80023d8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0d5      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c68:	4b14      	ldr	r3, [pc, #80]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ef      	bne.n	8003c56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80c9 	beq.w	8003e12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c80:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	f000 8083 	beq.w	8003d94 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d15e      	bne.n	8003d54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fb99 	bl	80023d8 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca8:	e00c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fb95 	bl	80023d8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d905      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e0ab      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc4:	4b55      	ldr	r3, [pc, #340]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ec      	bne.n	8003caa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd0:	4b52      	ldr	r3, [pc, #328]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	4b52      	ldr	r3, [pc, #328]	@ (8003e20 <HAL_RCC_OscConfig+0x61c>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6a11      	ldr	r1, [r2, #32]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003cea:	0212      	lsls	r2, r2, #8
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cf2:	0852      	lsrs	r2, r2, #1
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0552      	lsls	r2, r2, #21
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cfe:	0852      	lsrs	r2, r2, #1
 8003d00:	3a01      	subs	r2, #1
 8003d02:	0652      	lsls	r2, r2, #25
 8003d04:	4311      	orrs	r1, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d0a:	06d2      	lsls	r2, r2, #27
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	4943      	ldr	r1, [pc, #268]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d14:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a40      	ldr	r2, [pc, #256]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d20:	4b3e      	ldr	r3, [pc, #248]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a3d      	ldr	r2, [pc, #244]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fb54 	bl	80023d8 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fe fb50 	bl	80023d8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e066      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d46:	4b35      	ldr	r3, [pc, #212]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x530>
 8003d52:	e05e      	b.n	8003e12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b31      	ldr	r3, [pc, #196]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a30      	ldr	r2, [pc, #192]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fe fb3a 	bl	80023d8 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe fb36 	bl	80023d8 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e04c      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7a:	4b28      	ldr	r3, [pc, #160]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d86:	4b25      	ldr	r3, [pc, #148]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	4924      	ldr	r1, [pc, #144]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003d8c:	4b25      	ldr	r3, [pc, #148]	@ (8003e24 <HAL_RCC_OscConfig+0x620>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	60cb      	str	r3, [r1, #12]
 8003d92:	e03e      	b.n	8003e12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e039      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003da0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <HAL_RCC_OscConfig+0x618>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d12c      	bne.n	8003e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d123      	bne.n	8003e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d11b      	bne.n	8003e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d113      	bne.n	8003e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	3b01      	subs	r3, #1
 8003df4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	019f800c 	.word	0x019f800c
 8003e24:	feeefffc 	.word	0xfeeefffc

08003e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e11e      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b91      	ldr	r3, [pc, #580]	@ (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d910      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b8e      	ldr	r3, [pc, #568]	@ (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 020f 	bic.w	r2, r3, #15
 8003e56:	498c      	ldr	r1, [pc, #560]	@ (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b8a      	ldr	r3, [pc, #552]	@ (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e106      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d073      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d129      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e84:	4b81      	ldr	r3, [pc, #516]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0f4      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e94:	f000 f99e 	bl	80041d4 <RCC_GetSysClockFreqFromPLLSource>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4a7c      	ldr	r2, [pc, #496]	@ (8004090 <HAL_RCC_ClockConfig+0x268>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d93f      	bls.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d033      	beq.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d12f      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ec2:	4b72      	ldr	r3, [pc, #456]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eca:	4a70      	ldr	r2, [pc, #448]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ed0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	e024      	b.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0c6      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef0:	4b66      	ldr	r3, [pc, #408]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0be      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f00:	f000 f8ce 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4a61      	ldr	r2, [pc, #388]	@ (8004090 <HAL_RCC_ClockConfig+0x268>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d909      	bls.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f16:	4a5d      	ldr	r2, [pc, #372]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f1e:	2380      	movs	r3, #128	@ 0x80
 8003f20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b5a      	ldr	r3, [pc, #360]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4957      	ldr	r1, [pc, #348]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f34:	f7fe fa50 	bl	80023d8 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fe fa4c 	bl	80023d8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e095      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b4e      	ldr	r3, [pc, #312]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d023      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f7c:	4b43      	ldr	r3, [pc, #268]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a42      	ldr	r2, [pc, #264]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f94:	4b3d      	ldr	r3, [pc, #244]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f9c:	4a3b      	ldr	r2, [pc, #236]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b39      	ldr	r3, [pc, #228]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4936      	ldr	r1, [pc, #216]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b80      	cmp	r3, #128	@ 0x80
 8003fbc:	d105      	bne.n	8003fca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fbe:	4b33      	ldr	r3, [pc, #204]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	4a32      	ldr	r2, [pc, #200]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8003fc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fca:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d21d      	bcs.n	8004014 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 020f 	bic.w	r2, r3, #15
 8003fe0:	4929      	ldr	r1, [pc, #164]	@ (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fe8:	f7fe f9f6 	bl	80023d8 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff0:	f7fe f9f2 	bl	80023d8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e03b      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b20      	ldr	r3, [pc, #128]	@ (8004088 <HAL_RCC_ClockConfig+0x260>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d1ed      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004020:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4917      	ldr	r1, [pc, #92]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403e:	4b13      	ldr	r3, [pc, #76]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	490f      	ldr	r1, [pc, #60]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004052:	f000 f825 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8004056:	4602      	mov	r2, r0
 8004058:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <HAL_RCC_ClockConfig+0x264>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	490c      	ldr	r1, [pc, #48]	@ (8004094 <HAL_RCC_ClockConfig+0x26c>)
 8004064:	5ccb      	ldrb	r3, [r1, r3]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	fa22 f303 	lsr.w	r3, r2, r3
 800406e:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <HAL_RCC_ClockConfig+0x270>)
 8004070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004072:	4b0a      	ldr	r3, [pc, #40]	@ (800409c <HAL_RCC_ClockConfig+0x274>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe f962 	bl	8002340 <HAL_InitTick>
 800407c:	4603      	mov	r3, r0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40022000 	.word	0x40022000
 800408c:	40021000 	.word	0x40021000
 8004090:	04c4b400 	.word	0x04c4b400
 8004094:	0800aadc 	.word	0x0800aadc
 8004098:	20000000 	.word	0x20000000
 800409c:	20000004 	.word	0x20000004

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d102      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040b2:	4b2a      	ldr	r3, [pc, #168]	@ (800415c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e047      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040b8:	4b27      	ldr	r3, [pc, #156]	@ (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040c4:	4b26      	ldr	r3, [pc, #152]	@ (8004160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e03e      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80040ca:	4b23      	ldr	r3, [pc, #140]	@ (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d136      	bne.n	8004144 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040d6:	4b20      	ldr	r3, [pc, #128]	@ (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3301      	adds	r3, #1
 80040ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d10c      	bne.n	800410e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	4a16      	ldr	r2, [pc, #88]	@ (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040fe:	68d2      	ldr	r2, [r2, #12]
 8004100:	0a12      	lsrs	r2, r2, #8
 8004102:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	617b      	str	r3, [r7, #20]
      break;
 800410c:	e00c      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800410e:	4a13      	ldr	r2, [pc, #76]	@ (800415c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	4a10      	ldr	r2, [pc, #64]	@ (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004118:	68d2      	ldr	r2, [r2, #12]
 800411a:	0a12      	lsrs	r2, r2, #8
 800411c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]
      break;
 8004126:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0e5b      	lsrs	r3, r3, #25
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	3301      	adds	r3, #1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e001      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004148:	693b      	ldr	r3, [r7, #16]
}
 800414a:	4618      	mov	r0, r3
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	00f42400 	.word	0x00f42400
 8004160:	007a1200 	.word	0x007a1200

08004164 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004168:	4b03      	ldr	r3, [pc, #12]	@ (8004178 <HAL_RCC_GetHCLKFreq+0x14>)
 800416a:	681b      	ldr	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000000 	.word	0x20000000

0800417c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004180:	f7ff fff0 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4904      	ldr	r1, [pc, #16]	@ (80041a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000
 80041a4:	0800aaec 	.word	0x0800aaec

080041a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041ac:	f7ff ffda 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0adb      	lsrs	r3, r3, #11
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4904      	ldr	r1, [pc, #16]	@ (80041d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	0800aaec 	.word	0x0800aaec

080041d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041da:	4b1e      	ldr	r3, [pc, #120]	@ (8004254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d10c      	bne.n	8004212 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041f8:	4a17      	ldr	r2, [pc, #92]	@ (8004258 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	4a14      	ldr	r2, [pc, #80]	@ (8004254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004202:	68d2      	ldr	r2, [r2, #12]
 8004204:	0a12      	lsrs	r2, r2, #8
 8004206:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	617b      	str	r3, [r7, #20]
    break;
 8004210:	e00c      	b.n	800422c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004212:	4a12      	ldr	r2, [pc, #72]	@ (800425c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	0a12      	lsrs	r2, r2, #8
 8004220:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
    break;
 800422a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800422c:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0e5b      	lsrs	r3, r3, #25
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004246:	687b      	ldr	r3, [r7, #4]
}
 8004248:	4618      	mov	r0, r3
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40021000 	.word	0x40021000
 8004258:	007a1200 	.word	0x007a1200
 800425c:	00f42400 	.word	0x00f42400

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004268:	2300      	movs	r3, #0
 800426a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800426c:	2300      	movs	r3, #0
 800426e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8098 	beq.w	80043ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427e:	2300      	movs	r3, #0
 8004280:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004282:	4b43      	ldr	r3, [pc, #268]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10d      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4b40      	ldr	r3, [pc, #256]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004292:	4a3f      	ldr	r2, [pc, #252]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004298:	6593      	str	r3, [r2, #88]	@ 0x58
 800429a:	4b3d      	ldr	r3, [pc, #244]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a39      	ldr	r2, [pc, #228]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042b6:	f7fe f88f 	bl	80023d8 <HAL_GetTick>
 80042ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042bc:	e009      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042be:	f7fe f88b 	bl	80023d8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d902      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	74fb      	strb	r3, [r7, #19]
        break;
 80042d0:	e005      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042d2:	4b30      	ldr	r3, [pc, #192]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0ef      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d159      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01e      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d019      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004300:	4b23      	ldr	r3, [pc, #140]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800430a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800430c:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004312:	4a1f      	ldr	r2, [pc, #124]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800431c:	4b1c      	ldr	r3, [pc, #112]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	4a1b      	ldr	r2, [pc, #108]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800432c:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d016      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fe f84b 	bl	80023d8 <HAL_GetTick>
 8004342:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004344:	e00b      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fe f847 	bl	80023d8 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d902      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	74fb      	strb	r3, [r7, #19]
            break;
 800435c:	e006      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435e:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ec      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800436c:	7cfb      	ldrb	r3, [r7, #19]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004372:	4b07      	ldr	r3, [pc, #28]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	4903      	ldr	r1, [pc, #12]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004388:	e008      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	74bb      	strb	r3, [r7, #18]
 800438e:	e005      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004390:	40021000 	.word	0x40021000
 8004394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800439c:	7c7b      	ldrb	r3, [r7, #17]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d105      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a2:	4ba6      	ldr	r3, [pc, #664]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a6:	4aa5      	ldr	r2, [pc, #660]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ba:	4ba0      	ldr	r3, [pc, #640]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c0:	f023 0203 	bic.w	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	499c      	ldr	r1, [pc, #624]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043dc:	4b97      	ldr	r3, [pc, #604]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e2:	f023 020c 	bic.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	4994      	ldr	r1, [pc, #592]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043fe:	4b8f      	ldr	r3, [pc, #572]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	498b      	ldr	r1, [pc, #556]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004420:	4b86      	ldr	r3, [pc, #536]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4983      	ldr	r1, [pc, #524]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004442:	4b7e      	ldr	r3, [pc, #504]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004448:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	497a      	ldr	r1, [pc, #488]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004464:	4b75      	ldr	r3, [pc, #468]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	4972      	ldr	r1, [pc, #456]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004486:	4b6d      	ldr	r3, [pc, #436]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4969      	ldr	r1, [pc, #420]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044a8:	4b64      	ldr	r3, [pc, #400]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	4961      	ldr	r1, [pc, #388]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ca:	4b5c      	ldr	r3, [pc, #368]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	4958      	ldr	r1, [pc, #352]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ec:	4b53      	ldr	r3, [pc, #332]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fa:	4950      	ldr	r1, [pc, #320]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800450c:	4b4b      	ldr	r3, [pc, #300]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a4a      	ldr	r2, [pc, #296]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004516:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004524:	4b45      	ldr	r3, [pc, #276]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	4942      	ldr	r1, [pc, #264]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004542:	d105      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004544:	4b3d      	ldr	r3, [pc, #244]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a3c      	ldr	r2, [pc, #240]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800454e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800455c:	4b37      	ldr	r3, [pc, #220]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	4934      	ldr	r1, [pc, #208]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800457a:	d105      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b2f      	ldr	r3, [pc, #188]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a2e      	ldr	r2, [pc, #184]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d015      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004594:	4b29      	ldr	r3, [pc, #164]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a2:	4926      	ldr	r1, [pc, #152]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045b2:	d105      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b4:	4b21      	ldr	r3, [pc, #132]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a20      	ldr	r2, [pc, #128]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045cc:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	4918      	ldr	r1, [pc, #96]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045ea:	d105      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ec:	4b13      	ldr	r3, [pc, #76]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a12      	ldr	r2, [pc, #72]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d015      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004604:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004612:	490a      	ldr	r1, [pc, #40]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004622:	d105      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004624:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a04      	ldr	r2, [pc, #16]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004630:	7cbb      	ldrb	r3, [r7, #18]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000

08004640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e09d      	b.n	800478e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d108      	bne.n	800466c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004662:	d009      	beq.n	8004678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	61da      	str	r2, [r3, #28]
 800466a:	e005      	b.n	8004678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd fafe 	bl	8001c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046b8:	d902      	bls.n	80046c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e002      	b.n	80046c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046ce:	d007      	beq.n	80046e0 <HAL_SPI_Init+0xa0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004722:	ea42 0103 	orr.w	r1, r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	f003 0204 	and.w	r2, r3, #4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800475c:	ea42 0103 	orr.w	r1, r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800477c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b088      	sub	sp, #32
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a6:	f7fd fe17 	bl	80023d8 <HAL_GetTick>
 80047aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d001      	beq.n	80047c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
 80047be:	e15c      	b.n	8004a7a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_SPI_Transmit+0x36>
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e154      	b.n	8004a7a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_SPI_Transmit+0x48>
 80047da:	2302      	movs	r3, #2
 80047dc:	e14d      	b.n	8004a7a <HAL_SPI_Transmit+0x2e4>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2203      	movs	r2, #3
 80047ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004830:	d10f      	bne.n	8004852 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004840:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004850:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d007      	beq.n	8004870 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800486e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004878:	d952      	bls.n	8004920 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_SPI_Transmit+0xf2>
 8004882:	8b7b      	ldrh	r3, [r7, #26]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d145      	bne.n	8004914 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	881a      	ldrh	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048ac:	e032      	b.n	8004914 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d112      	bne.n	80048e2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c0:	881a      	ldrh	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048e0:	e018      	b.n	8004914 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e2:	f7fd fd79 	bl	80023d8 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d803      	bhi.n	80048fa <HAL_SPI_Transmit+0x164>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d102      	bne.n	8004900 <HAL_SPI_Transmit+0x16a>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0b2      	b.n	8004a7a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1c7      	bne.n	80048ae <HAL_SPI_Transmit+0x118>
 800491e:	e083      	b.n	8004a28 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_SPI_Transmit+0x198>
 8004928:	8b7b      	ldrh	r3, [r7, #26]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d177      	bne.n	8004a1e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d912      	bls.n	800495e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	881a      	ldrh	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b02      	subs	r3, #2
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800495c:	e05f      	b.n	8004a1e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004984:	e04b      	b.n	8004a1e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	d12b      	bne.n	80049ec <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d912      	bls.n	80049c4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a2:	881a      	ldrh	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	1c9a      	adds	r2, r3, #2
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b02      	subs	r3, #2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049c2:	e02c      	b.n	8004a1e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049ea:	e018      	b.n	8004a1e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ec:	f7fd fcf4 	bl	80023d8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d803      	bhi.n	8004a04 <HAL_SPI_Transmit+0x26e>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d102      	bne.n	8004a0a <HAL_SPI_Transmit+0x274>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e02d      	b.n	8004a7a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ae      	bne.n	8004986 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f947 	bl	8004cc0 <SPI_EndRxTxTransaction>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004a78:	2300      	movs	r3, #0
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a94:	f7fd fca0 	bl	80023d8 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004aa4:	f7fd fc98 	bl	80023d8 <HAL_GetTick>
 8004aa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aaa:	4b39      	ldr	r3, [pc, #228]	@ (8004b90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	015b      	lsls	r3, r3, #5
 8004ab0:	0d1b      	lsrs	r3, r3, #20
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	fb02 f303 	mul.w	r3, r2, r3
 8004ab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aba:	e054      	b.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	d050      	beq.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ac4:	f7fd fc88 	bl	80023d8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d902      	bls.n	8004ada <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d13d      	bne.n	8004b56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ae8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004af2:	d111      	bne.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afc:	d004      	beq.n	8004b08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b06:	d107      	bne.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b20:	d10f      	bne.n	8004b42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e017      	b.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d19b      	bne.n	8004abc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000000 	.word	0x20000000

08004b94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	@ 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ba6:	f7fd fc17 	bl	80023d8 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bae:	1a9b      	subs	r3, r3, r2
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004bb6:	f7fd fc0f 	bl	80023d8 <HAL_GetTick>
 8004bba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	00da      	lsls	r2, r3, #3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	0d1b      	lsrs	r3, r3, #20
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bdc:	e060      	b.n	8004ca0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004be4:	d107      	bne.n	8004bf6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d050      	beq.n	8004ca0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bfe:	f7fd fbeb 	bl	80023d8 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d902      	bls.n	8004c14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d13d      	bne.n	8004c90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c2c:	d111      	bne.n	8004c52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c36:	d004      	beq.n	8004c42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c40:	d107      	bne.n	8004c52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5a:	d10f      	bne.n	8004c7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e010      	b.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d196      	bne.n	8004bde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3728      	adds	r7, #40	@ 0x28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000000 	.word	0x20000000

08004cc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f7ff ff5b 	bl	8004b94 <SPI_WaitFifoStateUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e027      	b.n	8004d44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2180      	movs	r1, #128	@ 0x80
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff fec0 	bl	8004a84 <SPI_WaitFlagStateUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e014      	b.n	8004d44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff ff34 	bl	8004b94 <SPI_WaitFifoStateUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e000      	b.n	8004d44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e042      	b.n	8004de4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fd f9cd 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2224      	movs	r2, #36	@ 0x24
 8004d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 feec 	bl	8005b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fc1d 	bl	80055dc <UART_SetConfig>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e01b      	b.n	8004de4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 ff6b 	bl	8005cb8 <UART_CheckIdleState>
 8004de2:	4603      	mov	r3, r0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	@ 0x28
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d17b      	bne.n	8004efe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_UART_Transmit+0x26>
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e074      	b.n	8004f00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2221      	movs	r2, #33	@ 0x21
 8004e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e26:	f7fd fad7 	bl	80023d8 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	88fa      	ldrh	r2, [r7, #6]
 8004e38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e44:	d108      	bne.n	8004e58 <HAL_UART_Transmit+0x6c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e003      	b.n	8004e60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e60:	e030      	b.n	8004ec4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2180      	movs	r1, #128	@ 0x80
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 ffcd 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e03d      	b.n	8004f00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	e007      	b.n	8004eb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1c8      	bne.n	8004e62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2140      	movs	r1, #64	@ 0x40
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 ff96 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e006      	b.n	8004f00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e000      	b.n	8004f00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
  }
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3720      	adds	r7, #32
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f36:	4013      	ands	r3, r2
 8004f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11b      	bne.n	8004f7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d015      	beq.n	8004f7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d009      	beq.n	8004f7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8300 	beq.w	8005572 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
      }
      return;
 8004f7a:	e2fa      	b.n	8005572 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8123 	beq.w	80051cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f8a:	4b8d      	ldr	r3, [pc, #564]	@ (80051c0 <HAL_UART_IRQHandler+0x2b8>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f96:	4b8b      	ldr	r3, [pc, #556]	@ (80051c4 <HAL_UART_IRQHandler+0x2bc>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 8116 	beq.w	80051cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d011      	beq.n	8004fd0 <HAL_UART_IRQHandler+0xc8>
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc6:	f043 0201 	orr.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d011      	beq.n	8005000 <HAL_UART_IRQHandler+0xf8>
 8004fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00b      	beq.n	8005000 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2202      	movs	r2, #2
 8004fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff6:	f043 0204 	orr.w	r2, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d011      	beq.n	8005030 <HAL_UART_IRQHandler+0x128>
 800500c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2204      	movs	r2, #4
 800501e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005026:	f043 0202 	orr.w	r2, r3, #2
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d017      	beq.n	800506c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800503c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005048:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800504c:	4b5c      	ldr	r3, [pc, #368]	@ (80051c0 <HAL_UART_IRQHandler+0x2b8>)
 800504e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00b      	beq.n	800506c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2208      	movs	r2, #8
 800505a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005062:	f043 0208 	orr.w	r2, r3, #8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005074:	2b00      	cmp	r3, #0
 8005076:	d012      	beq.n	800509e <HAL_UART_IRQHandler+0x196>
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00c      	beq.n	800509e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800508c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005094:	f043 0220 	orr.w	r2, r3, #32
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8266 	beq.w	8005576 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d105      	bne.n	80050ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f2:	2b40      	cmp	r3, #64	@ 0x40
 80050f4:	d005      	beq.n	8005102 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d054      	beq.n	80051ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 f8f9 	bl	80062fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005112:	2b40      	cmp	r3, #64	@ 0x40
 8005114:	d146      	bne.n	80051a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800512c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3308      	adds	r3, #8
 800513e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005142:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005146:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800514e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800515a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1d9      	bne.n	8005116 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	d017      	beq.n	800519c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005172:	4a15      	ldr	r2, [pc, #84]	@ (80051c8 <HAL_UART_IRQHandler+0x2c0>)
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800517c:	4618      	mov	r0, r3
 800517e:	f7fd fbe5 	bl	800294c <HAL_DMA_Abort_IT>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d019      	beq.n	80051bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005196:	4610      	mov	r0, r2
 8005198:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519a:	e00f      	b.n	80051bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fa13 	bl	80055c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a2:	e00b      	b.n	80051bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa0f 	bl	80055c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051aa:	e007      	b.n	80051bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fa0b 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80051ba:	e1dc      	b.n	8005576 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	bf00      	nop
    return;
 80051be:	e1da      	b.n	8005576 <HAL_UART_IRQHandler+0x66e>
 80051c0:	10000001 	.word	0x10000001
 80051c4:	04000120 	.word	0x04000120
 80051c8:	080065b1 	.word	0x080065b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	f040 8170 	bne.w	80054b6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8169 	beq.w	80054b6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8162 	beq.w	80054b6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2210      	movs	r2, #16
 80051f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	f040 80d8 	bne.w	80053ba <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005218:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80af 	beq.w	8005380 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800522c:	429a      	cmp	r2, r3
 800522e:	f080 80a7 	bcs.w	8005380 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005238:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 8087 	bne.w	800535e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800526c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800527a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800527e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005286:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1da      	bne.n	8005250 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3308      	adds	r3, #8
 80052a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e1      	bne.n	800529a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005300:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e3      	bne.n	80052d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800532a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800532c:	f023 0310 	bic.w	r3, r3, #16
 8005330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800533e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005340:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800534c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e4      	bne.n	800531c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005358:	4618      	mov	r0, r3
 800535a:	f7fd fa9e 	bl	800289a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005370:	b29b      	uxth	r3, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	b29b      	uxth	r3, r3
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fc f93f 	bl	80015fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800537e:	e0fc      	b.n	800557a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800538a:	429a      	cmp	r2, r3
 800538c:	f040 80f5 	bne.w	800557a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b20      	cmp	r3, #32
 80053a0:	f040 80eb 	bne.w	800557a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc f922 	bl	80015fc <HAL_UARTEx_RxEventCallback>
      return;
 80053b8:	e0df      	b.n	800557a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80d1 	beq.w	800557e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80053dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80cc 	beq.w	800557e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005408:	647b      	str	r3, [r7, #68]	@ 0x44
 800540a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800540e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e4      	bne.n	80053e6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3308      	adds	r3, #8
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	623b      	str	r3, [r7, #32]
   return(result);
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3308      	adds	r3, #8
 8005440:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005444:	633a      	str	r2, [r7, #48]	@ 0x30
 8005446:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800544a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e1      	bne.n	800541c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	60fb      	str	r3, [r7, #12]
   return(result);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f023 0310 	bic.w	r3, r3, #16
 8005480:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	69b9      	ldr	r1, [r7, #24]
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	617b      	str	r3, [r7, #20]
   return(result);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e4      	bne.n	800546c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc f8a4 	bl	80015fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054b4:	e063      	b.n	800557e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00e      	beq.n	80054e0 <HAL_UART_IRQHandler+0x5d8>
 80054c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80054d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 fe30 	bl	800713e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054de:	e051      	b.n	8005584 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d014      	beq.n	8005516 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005508:	2b00      	cmp	r3, #0
 800550a:	d03a      	beq.n	8005582 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	4798      	blx	r3
    }
    return;
 8005514:	e035      	b.n	8005582 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <HAL_UART_IRQHandler+0x62e>
 8005522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 f850 	bl	80065d4 <UART_EndTransmit_IT>
    return;
 8005534:	e026      	b.n	8005584 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800553a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <HAL_UART_IRQHandler+0x64e>
 8005542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005546:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 fe09 	bl	8007166 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005554:	e016      	b.n	8005584 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d010      	beq.n	8005584 <HAL_UART_IRQHandler+0x67c>
 8005562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005566:	2b00      	cmp	r3, #0
 8005568:	da0c      	bge.n	8005584 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 fdf1 	bl	8007152 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005570:	e008      	b.n	8005584 <HAL_UART_IRQHandler+0x67c>
      return;
 8005572:	bf00      	nop
 8005574:	e006      	b.n	8005584 <HAL_UART_IRQHandler+0x67c>
    return;
 8005576:	bf00      	nop
 8005578:	e004      	b.n	8005584 <HAL_UART_IRQHandler+0x67c>
      return;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <HAL_UART_IRQHandler+0x67c>
      return;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_UART_IRQHandler+0x67c>
    return;
 8005582:	bf00      	nop
  }
}
 8005584:	37e8      	adds	r7, #232	@ 0xe8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop

0800558c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b08c      	sub	sp, #48	@ 0x30
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4313      	orrs	r3, r2
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4bab      	ldr	r3, [pc, #684]	@ (80058b8 <UART_SetConfig+0x2dc>)
 800560c:	4013      	ands	r3, r2
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005614:	430b      	orrs	r3, r1
 8005616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4aa0      	ldr	r2, [pc, #640]	@ (80058bc <UART_SetConfig+0x2e0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005644:	4313      	orrs	r3, r2
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005652:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800565c:	430b      	orrs	r3, r1
 800565e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	f023 010f 	bic.w	r1, r3, #15
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a91      	ldr	r2, [pc, #580]	@ (80058c0 <UART_SetConfig+0x2e4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d125      	bne.n	80056cc <UART_SetConfig+0xf0>
 8005680:	4b90      	ldr	r3, [pc, #576]	@ (80058c4 <UART_SetConfig+0x2e8>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b03      	cmp	r3, #3
 800568c:	d81a      	bhi.n	80056c4 <UART_SetConfig+0xe8>
 800568e:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <UART_SetConfig+0xb8>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056a5 	.word	0x080056a5
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056ad 	.word	0x080056ad
 80056a0:	080056bd 	.word	0x080056bd
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056aa:	e0d6      	b.n	800585a <UART_SetConfig+0x27e>
 80056ac:	2302      	movs	r3, #2
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b2:	e0d2      	b.n	800585a <UART_SetConfig+0x27e>
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ba:	e0ce      	b.n	800585a <UART_SetConfig+0x27e>
 80056bc:	2308      	movs	r3, #8
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056c2:	e0ca      	b.n	800585a <UART_SetConfig+0x27e>
 80056c4:	2310      	movs	r3, #16
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ca:	e0c6      	b.n	800585a <UART_SetConfig+0x27e>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a7d      	ldr	r2, [pc, #500]	@ (80058c8 <UART_SetConfig+0x2ec>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d138      	bne.n	8005748 <UART_SetConfig+0x16c>
 80056d6:	4b7b      	ldr	r3, [pc, #492]	@ (80058c4 <UART_SetConfig+0x2e8>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	f003 030c 	and.w	r3, r3, #12
 80056e0:	2b0c      	cmp	r3, #12
 80056e2:	d82d      	bhi.n	8005740 <UART_SetConfig+0x164>
 80056e4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <UART_SetConfig+0x110>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005721 	.word	0x08005721
 80056f0:	08005741 	.word	0x08005741
 80056f4:	08005741 	.word	0x08005741
 80056f8:	08005741 	.word	0x08005741
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005741 	.word	0x08005741
 8005704:	08005741 	.word	0x08005741
 8005708:	08005741 	.word	0x08005741
 800570c:	08005729 	.word	0x08005729
 8005710:	08005741 	.word	0x08005741
 8005714:	08005741 	.word	0x08005741
 8005718:	08005741 	.word	0x08005741
 800571c:	08005739 	.word	0x08005739
 8005720:	2300      	movs	r3, #0
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005726:	e098      	b.n	800585a <UART_SetConfig+0x27e>
 8005728:	2302      	movs	r3, #2
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800572e:	e094      	b.n	800585a <UART_SetConfig+0x27e>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005736:	e090      	b.n	800585a <UART_SetConfig+0x27e>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573e:	e08c      	b.n	800585a <UART_SetConfig+0x27e>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005746:	e088      	b.n	800585a <UART_SetConfig+0x27e>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a5f      	ldr	r2, [pc, #380]	@ (80058cc <UART_SetConfig+0x2f0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d125      	bne.n	800579e <UART_SetConfig+0x1c2>
 8005752:	4b5c      	ldr	r3, [pc, #368]	@ (80058c4 <UART_SetConfig+0x2e8>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005758:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800575c:	2b30      	cmp	r3, #48	@ 0x30
 800575e:	d016      	beq.n	800578e <UART_SetConfig+0x1b2>
 8005760:	2b30      	cmp	r3, #48	@ 0x30
 8005762:	d818      	bhi.n	8005796 <UART_SetConfig+0x1ba>
 8005764:	2b20      	cmp	r3, #32
 8005766:	d00a      	beq.n	800577e <UART_SetConfig+0x1a2>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d814      	bhi.n	8005796 <UART_SetConfig+0x1ba>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <UART_SetConfig+0x19a>
 8005770:	2b10      	cmp	r3, #16
 8005772:	d008      	beq.n	8005786 <UART_SetConfig+0x1aa>
 8005774:	e00f      	b.n	8005796 <UART_SetConfig+0x1ba>
 8005776:	2300      	movs	r3, #0
 8005778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577c:	e06d      	b.n	800585a <UART_SetConfig+0x27e>
 800577e:	2302      	movs	r3, #2
 8005780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005784:	e069      	b.n	800585a <UART_SetConfig+0x27e>
 8005786:	2304      	movs	r3, #4
 8005788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800578c:	e065      	b.n	800585a <UART_SetConfig+0x27e>
 800578e:	2308      	movs	r3, #8
 8005790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005794:	e061      	b.n	800585a <UART_SetConfig+0x27e>
 8005796:	2310      	movs	r3, #16
 8005798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579c:	e05d      	b.n	800585a <UART_SetConfig+0x27e>
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4b      	ldr	r2, [pc, #300]	@ (80058d0 <UART_SetConfig+0x2f4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d125      	bne.n	80057f4 <UART_SetConfig+0x218>
 80057a8:	4b46      	ldr	r3, [pc, #280]	@ (80058c4 <UART_SetConfig+0x2e8>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057b4:	d016      	beq.n	80057e4 <UART_SetConfig+0x208>
 80057b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057b8:	d818      	bhi.n	80057ec <UART_SetConfig+0x210>
 80057ba:	2b80      	cmp	r3, #128	@ 0x80
 80057bc:	d00a      	beq.n	80057d4 <UART_SetConfig+0x1f8>
 80057be:	2b80      	cmp	r3, #128	@ 0x80
 80057c0:	d814      	bhi.n	80057ec <UART_SetConfig+0x210>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <UART_SetConfig+0x1f0>
 80057c6:	2b40      	cmp	r3, #64	@ 0x40
 80057c8:	d008      	beq.n	80057dc <UART_SetConfig+0x200>
 80057ca:	e00f      	b.n	80057ec <UART_SetConfig+0x210>
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d2:	e042      	b.n	800585a <UART_SetConfig+0x27e>
 80057d4:	2302      	movs	r3, #2
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057da:	e03e      	b.n	800585a <UART_SetConfig+0x27e>
 80057dc:	2304      	movs	r3, #4
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e2:	e03a      	b.n	800585a <UART_SetConfig+0x27e>
 80057e4:	2308      	movs	r3, #8
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ea:	e036      	b.n	800585a <UART_SetConfig+0x27e>
 80057ec:	2310      	movs	r3, #16
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f2:	e032      	b.n	800585a <UART_SetConfig+0x27e>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a30      	ldr	r2, [pc, #192]	@ (80058bc <UART_SetConfig+0x2e0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d12a      	bne.n	8005854 <UART_SetConfig+0x278>
 80057fe:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <UART_SetConfig+0x2e8>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005804:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005808:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800580c:	d01a      	beq.n	8005844 <UART_SetConfig+0x268>
 800580e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005812:	d81b      	bhi.n	800584c <UART_SetConfig+0x270>
 8005814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005818:	d00c      	beq.n	8005834 <UART_SetConfig+0x258>
 800581a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800581e:	d815      	bhi.n	800584c <UART_SetConfig+0x270>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <UART_SetConfig+0x250>
 8005824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005828:	d008      	beq.n	800583c <UART_SetConfig+0x260>
 800582a:	e00f      	b.n	800584c <UART_SetConfig+0x270>
 800582c:	2300      	movs	r3, #0
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005832:	e012      	b.n	800585a <UART_SetConfig+0x27e>
 8005834:	2302      	movs	r3, #2
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583a:	e00e      	b.n	800585a <UART_SetConfig+0x27e>
 800583c:	2304      	movs	r3, #4
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005842:	e00a      	b.n	800585a <UART_SetConfig+0x27e>
 8005844:	2308      	movs	r3, #8
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584a:	e006      	b.n	800585a <UART_SetConfig+0x27e>
 800584c:	2310      	movs	r3, #16
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005852:	e002      	b.n	800585a <UART_SetConfig+0x27e>
 8005854:	2310      	movs	r3, #16
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a17      	ldr	r2, [pc, #92]	@ (80058bc <UART_SetConfig+0x2e0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	f040 80a8 	bne.w	80059b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005866:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800586a:	2b08      	cmp	r3, #8
 800586c:	d834      	bhi.n	80058d8 <UART_SetConfig+0x2fc>
 800586e:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <UART_SetConfig+0x298>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	08005899 	.word	0x08005899
 8005878:	080058d9 	.word	0x080058d9
 800587c:	080058a1 	.word	0x080058a1
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058a7 	.word	0x080058a7
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058d9 	.word	0x080058d9
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058af 	.word	0x080058af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005898:	f7fe fc70 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 800589c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800589e:	e021      	b.n	80058e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a0:	4b0c      	ldr	r3, [pc, #48]	@ (80058d4 <UART_SetConfig+0x2f8>)
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058a4:	e01e      	b.n	80058e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a6:	f7fe fbfb 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 80058aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ac:	e01a      	b.n	80058e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058b4:	e016      	b.n	80058e4 <UART_SetConfig+0x308>
 80058b6:	bf00      	nop
 80058b8:	cfff69f3 	.word	0xcfff69f3
 80058bc:	40008000 	.word	0x40008000
 80058c0:	40013800 	.word	0x40013800
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40004400 	.word	0x40004400
 80058cc:	40004800 	.word	0x40004800
 80058d0:	40004c00 	.word	0x40004c00
 80058d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 812a 	beq.w	8005b40 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	4a9e      	ldr	r2, [pc, #632]	@ (8005b6c <UART_SetConfig+0x590>)
 80058f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	4413      	add	r3, r2
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	429a      	cmp	r2, r3
 800590e:	d305      	bcc.n	800591c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	429a      	cmp	r2, r3
 800591a:	d903      	bls.n	8005924 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005922:	e10d      	b.n	8005b40 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	2200      	movs	r2, #0
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	60fa      	str	r2, [r7, #12]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	4a8e      	ldr	r2, [pc, #568]	@ (8005b6c <UART_SetConfig+0x590>)
 8005932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005936:	b29b      	uxth	r3, r3
 8005938:	2200      	movs	r2, #0
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005946:	f7fb f957 	bl	8000bf8 <__aeabi_uldivmod>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	020b      	lsls	r3, r1, #8
 800595c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005960:	0202      	lsls	r2, r0, #8
 8005962:	6979      	ldr	r1, [r7, #20]
 8005964:	6849      	ldr	r1, [r1, #4]
 8005966:	0849      	lsrs	r1, r1, #1
 8005968:	2000      	movs	r0, #0
 800596a:	460c      	mov	r4, r1
 800596c:	4605      	mov	r5, r0
 800596e:	eb12 0804 	adds.w	r8, r2, r4
 8005972:	eb43 0905 	adc.w	r9, r3, r5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	469a      	mov	sl, r3
 800597e:	4693      	mov	fp, r2
 8005980:	4652      	mov	r2, sl
 8005982:	465b      	mov	r3, fp
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f936 	bl	8000bf8 <__aeabi_uldivmod>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4613      	mov	r3, r2
 8005992:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800599a:	d308      	bcc.n	80059ae <UART_SetConfig+0x3d2>
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059a2:	d204      	bcs.n	80059ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	e0c8      	b.n	8005b40 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059b4:	e0c4      	b.n	8005b40 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059be:	d167      	bne.n	8005a90 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80059c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d828      	bhi.n	8005a1a <UART_SetConfig+0x43e>
 80059c8:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <UART_SetConfig+0x3f4>)
 80059ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ce:	bf00      	nop
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a05 	.word	0x08005a05
 80059dc:	08005a1b 	.word	0x08005a1b
 80059e0:	08005a0b 	.word	0x08005a0b
 80059e4:	08005a1b 	.word	0x08005a1b
 80059e8:	08005a1b 	.word	0x08005a1b
 80059ec:	08005a1b 	.word	0x08005a1b
 80059f0:	08005a13 	.word	0x08005a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7fe fbc2 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 80059f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059fa:	e014      	b.n	8005a26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059fc:	f7fe fbd4 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8005a00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a02:	e010      	b.n	8005a26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a04:	4b5a      	ldr	r3, [pc, #360]	@ (8005b70 <UART_SetConfig+0x594>)
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a08:	e00d      	b.n	8005a26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a0a:	f7fe fb49 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8005a0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a10:	e009      	b.n	8005a26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a18:	e005      	b.n	8005a26 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8089 	beq.w	8005b40 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	4a4e      	ldr	r2, [pc, #312]	@ (8005b6c <UART_SetConfig+0x590>)
 8005a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a40:	005a      	lsls	r2, r3, #1
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	441a      	add	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	d916      	bls.n	8005a88 <UART_SetConfig+0x4ac>
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a60:	d212      	bcs.n	8005a88 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f023 030f 	bic.w	r3, r3, #15
 8005a6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	8bfb      	ldrh	r3, [r7, #30]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	8bfa      	ldrh	r2, [r7, #30]
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	e05b      	b.n	8005b40 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a8e:	e057      	b.n	8005b40 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d828      	bhi.n	8005aea <UART_SetConfig+0x50e>
 8005a98:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <UART_SetConfig+0x4c4>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005adb 	.word	0x08005adb
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005aeb 	.word	0x08005aeb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac4:	f7fe fb5a 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8005ac8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005aca:	e014      	b.n	8005af6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005acc:	f7fe fb6c 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8005ad0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b26      	ldr	r3, [pc, #152]	@ (8005b70 <UART_SetConfig+0x594>)
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ad8:	e00d      	b.n	8005af6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fe fae1 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8005ade:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ae0:	e009      	b.n	8005af6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ae8:	e005      	b.n	8005af6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005af4:	bf00      	nop
    }

    if (pclk != 0U)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d021      	beq.n	8005b40 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <UART_SetConfig+0x590>)
 8005b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	441a      	add	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	2b0f      	cmp	r3, #15
 8005b24:	d909      	bls.n	8005b3a <UART_SetConfig+0x55e>
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b2c:	d205      	bcs.n	8005b3a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60da      	str	r2, [r3, #12]
 8005b38:	e002      	b.n	8005b40 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3730      	adds	r7, #48	@ 0x30
 8005b64:	46bd      	mov	sp, r7
 8005b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6a:	bf00      	nop
 8005b6c:	0800aaf4 	.word	0x0800aaf4
 8005b70:	00f42400 	.word	0x00f42400

08005b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01a      	beq.n	8005c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c72:	d10a      	bne.n	8005c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
  }
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b098      	sub	sp, #96	@ 0x60
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cc8:	f7fc fb86 	bl	80023d8 <HAL_GetTick>
 8005ccc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d12f      	bne.n	8005d3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f88e 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d022      	beq.n	8005d3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e6      	bne.n	8005cf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e063      	b.n	8005e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d149      	bne.n	8005dde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d52:	2200      	movs	r2, #0
 8005d54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f857 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d03c      	beq.n	8005dde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	623b      	str	r3, [r7, #32]
   return(result);
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e6      	bne.n	8005d64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005db6:	61fa      	str	r2, [r7, #28]
 8005db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	69b9      	ldr	r1, [r7, #24]
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e012      	b.n	8005e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3758      	adds	r7, #88	@ 0x58
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1c:	e04f      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d04b      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fc fad7 	bl	80023d8 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e04e      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d037      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b80      	cmp	r3, #128	@ 0x80
 8005e52:	d034      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b40      	cmp	r3, #64	@ 0x40
 8005e58:	d031      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d110      	bne.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fa42 	bl	80062fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e029      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e98:	d111      	bne.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fa28 	bl	80062fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e00f      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	bf0c      	ite	eq
 8005ece:	2301      	moveq	r3, #1
 8005ed0:	2300      	movne	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d0a0      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b0a3      	sub	sp, #140	@ 0x8c
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	88fa      	ldrh	r2, [r7, #6]
 8005f00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	88fa      	ldrh	r2, [r7, #6]
 8005f08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1a:	d10e      	bne.n	8005f3a <UART_Start_Receive_IT+0x52>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <UART_Start_Receive_IT+0x48>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005f2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f2e:	e02d      	b.n	8005f8c <UART_Start_Receive_IT+0xa4>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	22ff      	movs	r2, #255	@ 0xff
 8005f34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f38:	e028      	b.n	8005f8c <UART_Start_Receive_IT+0xa4>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10d      	bne.n	8005f5e <UART_Start_Receive_IT+0x76>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <UART_Start_Receive_IT+0x6c>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	22ff      	movs	r2, #255	@ 0xff
 8005f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f52:	e01b      	b.n	8005f8c <UART_Start_Receive_IT+0xa4>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	227f      	movs	r2, #127	@ 0x7f
 8005f58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f5c:	e016      	b.n	8005f8c <UART_Start_Receive_IT+0xa4>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f66:	d10d      	bne.n	8005f84 <UART_Start_Receive_IT+0x9c>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <UART_Start_Receive_IT+0x92>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	227f      	movs	r2, #127	@ 0x7f
 8005f74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f78:	e008      	b.n	8005f8c <UART_Start_Receive_IT+0xa4>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	223f      	movs	r2, #63	@ 0x3f
 8005f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005f82:	e003      	b.n	8005f8c <UART_Start_Receive_IT+0xa4>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2222      	movs	r2, #34	@ 0x22
 8005f98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005fac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3308      	adds	r3, #8
 8005fbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005fc0:	673a      	str	r2, [r7, #112]	@ 0x70
 8005fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005fc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e3      	bne.n	8005f9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fdc:	d14f      	bne.n	800607e <UART_Start_Receive_IT+0x196>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d349      	bcc.n	800607e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff2:	d107      	bne.n	8006004 <UART_Start_Receive_IT+0x11c>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d103      	bne.n	8006004 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4a47      	ldr	r2, [pc, #284]	@ (800611c <UART_Start_Receive_IT+0x234>)
 8006000:	675a      	str	r2, [r3, #116]	@ 0x74
 8006002:	e002      	b.n	800600a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4a46      	ldr	r2, [pc, #280]	@ (8006120 <UART_Start_Receive_IT+0x238>)
 8006008:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01a      	beq.n	8006048 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006026:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006034:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006036:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800603a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e4      	bne.n	8006012 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800605e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006068:	64ba      	str	r2, [r7, #72]	@ 0x48
 800606a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800606e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e5      	bne.n	8006048 <UART_Start_Receive_IT+0x160>
 800607c:	e046      	b.n	800610c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006086:	d107      	bne.n	8006098 <UART_Start_Receive_IT+0x1b0>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a24      	ldr	r2, [pc, #144]	@ (8006124 <UART_Start_Receive_IT+0x23c>)
 8006094:	675a      	str	r2, [r3, #116]	@ 0x74
 8006096:	e002      	b.n	800609e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a23      	ldr	r2, [pc, #140]	@ (8006128 <UART_Start_Receive_IT+0x240>)
 800609c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d019      	beq.n	80060da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80060ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060c6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80060d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e6      	bne.n	80060a6 <UART_Start_Receive_IT+0x1be>
 80060d8:	e018      	b.n	800610c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	613b      	str	r3, [r7, #16]
   return(result);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f043 0320 	orr.w	r3, r3, #32
 80060ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060f8:	623b      	str	r3, [r7, #32]
 80060fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	69f9      	ldr	r1, [r7, #28]
 80060fe:	6a3a      	ldr	r2, [r7, #32]
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	61bb      	str	r3, [r7, #24]
   return(result);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	378c      	adds	r7, #140	@ 0x8c
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	08006d01 	.word	0x08006d01
 8006120:	0800699d 	.word	0x0800699d
 8006124:	080067e5 	.word	0x080067e5
 8006128:	0800662d 	.word	0x0800662d

0800612c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b096      	sub	sp, #88	@ 0x58
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	4613      	mov	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2222      	movs	r2, #34	@ 0x22
 8006154:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	d02d      	beq.n	80061be <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006168:	4a40      	ldr	r2, [pc, #256]	@ (800626c <UART_Start_Receive_DMA+0x140>)
 800616a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006172:	4a3f      	ldr	r2, [pc, #252]	@ (8006270 <UART_Start_Receive_DMA+0x144>)
 8006174:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800617c:	4a3d      	ldr	r2, [pc, #244]	@ (8006274 <UART_Start_Receive_DMA+0x148>)
 800617e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006186:	2200      	movs	r2, #0
 8006188:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3324      	adds	r3, #36	@ 0x24
 8006196:	4619      	mov	r1, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619c:	461a      	mov	r2, r3
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	f7fc fb00 	bl	80027a4 <HAL_DMA_Start_IT>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2210      	movs	r2, #16
 80061ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e051      	b.n	8006262 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d018      	beq.n	80061f8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061da:	657b      	str	r3, [r7, #84]	@ 0x54
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80061f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e6      	bne.n	80061c6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3308      	adds	r3, #8
 80061fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006218:	637a      	str	r2, [r7, #52]	@ 0x34
 800621a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800621e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e5      	bne.n	80061f8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	613b      	str	r3, [r7, #16]
   return(result);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800624c:	623a      	str	r2, [r7, #32]
 800624e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	69f9      	ldr	r1, [r7, #28]
 8006252:	6a3a      	ldr	r2, [r7, #32]
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	61bb      	str	r3, [r7, #24]
   return(result);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3758      	adds	r7, #88	@ 0x58
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	080063c7 	.word	0x080063c7
 8006270:	080064f3 	.word	0x080064f3
 8006274:	08006531 	.word	0x08006531

08006278 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b08f      	sub	sp, #60	@ 0x3c
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	61fb      	str	r3, [r7, #28]
   return(result);
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e6      	bne.n	8006280 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80062c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d2:	61ba      	str	r2, [r7, #24]
 80062d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6979      	ldr	r1, [r7, #20]
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	613b      	str	r3, [r7, #16]
   return(result);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e5      	bne.n	80062b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80062ee:	bf00      	nop
 80062f0:	373c      	adds	r7, #60	@ 0x3c
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b095      	sub	sp, #84	@ 0x54
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006320:	643b      	str	r3, [r7, #64]	@ 0x40
 8006322:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800632e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e6      	bne.n	8006302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3308      	adds	r3, #8
 800633a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	61fb      	str	r3, [r7, #28]
   return(result);
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006358:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800635a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800635e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e3      	bne.n	8006334 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d118      	bne.n	80063a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	60bb      	str	r3, [r7, #8]
   return(result);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 0310 	bic.w	r3, r3, #16
 8006388:	647b      	str	r3, [r7, #68]	@ 0x44
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6979      	ldr	r1, [r7, #20]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	613b      	str	r3, [r7, #16]
   return(result);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e6      	bne.n	8006374 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063ba:	bf00      	nop
 80063bc:	3754      	adds	r7, #84	@ 0x54
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b09c      	sub	sp, #112	@ 0x70
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d171      	bne.n	80064c6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80063e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006408:	65bb      	str	r3, [r7, #88]	@ 0x58
 800640a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800640e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e6      	bne.n	80063ea <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3308      	adds	r3, #8
 8006422:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800642c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642e:	f023 0301 	bic.w	r3, r3, #1
 8006432:	667b      	str	r3, [r7, #100]	@ 0x64
 8006434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3308      	adds	r3, #8
 800643a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800643c:	647a      	str	r2, [r7, #68]	@ 0x44
 800643e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800644a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e5      	bne.n	800641c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	623b      	str	r3, [r7, #32]
   return(result);
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006466:	663b      	str	r3, [r7, #96]	@ 0x60
 8006468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3308      	adds	r3, #8
 800646e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006470:	633a      	str	r2, [r7, #48]	@ 0x30
 8006472:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800647e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e5      	bne.n	8006450 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800648e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d118      	bne.n	80064c6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f023 0310 	bic.w	r3, r3, #16
 80064a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	69b9      	ldr	r1, [r7, #24]
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	617b      	str	r3, [r7, #20]
   return(result);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e6      	bne.n	8006494 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064c8:	2200      	movs	r2, #0
 80064ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d107      	bne.n	80064e4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064da:	4619      	mov	r1, r3
 80064dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064de:	f7fb f88d 	bl	80015fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064e2:	e002      	b.n	80064ea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80064e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064e6:	f7ff f85b 	bl	80055a0 <HAL_UART_RxCpltCallback>
}
 80064ea:	bf00      	nop
 80064ec:	3770      	adds	r7, #112	@ 0x70
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d109      	bne.n	8006522 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	b29b      	uxth	r3, r3
 8006518:	4619      	mov	r1, r3
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7fb f86e 	bl	80015fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006520:	e002      	b.n	8006528 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff f846 	bl	80055b4 <HAL_UART_RxHalfCpltCallback>
}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006544:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800654c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006558:	2b80      	cmp	r3, #128	@ 0x80
 800655a:	d109      	bne.n	8006570 <UART_DMAError+0x40>
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b21      	cmp	r3, #33	@ 0x21
 8006560:	d106      	bne.n	8006570 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2200      	movs	r2, #0
 8006566:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800656a:	6978      	ldr	r0, [r7, #20]
 800656c:	f7ff fe84 	bl	8006278 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657a:	2b40      	cmp	r3, #64	@ 0x40
 800657c:	d109      	bne.n	8006592 <UART_DMAError+0x62>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b22      	cmp	r3, #34	@ 0x22
 8006582:	d106      	bne.n	8006592 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2200      	movs	r2, #0
 8006588:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800658c:	6978      	ldr	r0, [r7, #20]
 800658e:	f7ff feb4 	bl	80062fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006598:	f043 0210 	orr.w	r2, r3, #16
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a2:	6978      	ldr	r0, [r7, #20]
 80065a4:	f7ff f810 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a8:	bf00      	nop
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7fe fffe 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	61bb      	str	r3, [r7, #24]
 80065fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6979      	ldr	r1, [r7, #20]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	613b      	str	r3, [r7, #16]
   return(result);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e6      	bne.n	80065dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fe ffb5 	bl	800558c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006622:	bf00      	nop
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b09c      	sub	sp, #112	@ 0x70
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800663a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006644:	2b22      	cmp	r3, #34	@ 0x22
 8006646:	f040 80be 	bne.w	80067c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006654:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006658:	b2d9      	uxtb	r1, r3
 800665a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800665e:	b2da      	uxtb	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006664:	400a      	ands	r2, r1
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	f040 80a1 	bne.w	80067d6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e6      	bne.n	8006694 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3308      	adds	r3, #8
 80066e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80066e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80066e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e5      	bne.n	80066c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a33      	ldr	r2, [pc, #204]	@ (80067e0 <UART_RxISR_8BIT+0x1b4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d01f      	beq.n	8006758 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d018      	beq.n	8006758 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	623b      	str	r3, [r7, #32]
   return(result);
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800673a:	663b      	str	r3, [r7, #96]	@ 0x60
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006744:	633b      	str	r3, [r7, #48]	@ 0x30
 8006746:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800674a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e6      	bne.n	8006726 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800675c:	2b01      	cmp	r3, #1
 800675e:	d12e      	bne.n	80067be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	60fb      	str	r3, [r7, #12]
   return(result);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0310 	bic.w	r3, r3, #16
 800677a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	69b9      	ldr	r1, [r7, #24]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	617b      	str	r3, [r7, #20]
   return(result);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e6      	bne.n	8006766 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d103      	bne.n	80067ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2210      	movs	r2, #16
 80067ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fa ff20 	bl	80015fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067bc:	e00b      	b.n	80067d6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fe feee 	bl	80055a0 <HAL_UART_RxCpltCallback>
}
 80067c4:	e007      	b.n	80067d6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0208 	orr.w	r2, r2, #8
 80067d4:	619a      	str	r2, [r3, #24]
}
 80067d6:	bf00      	nop
 80067d8:	3770      	adds	r7, #112	@ 0x70
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40008000 	.word	0x40008000

080067e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b09c      	sub	sp, #112	@ 0x70
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80067f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067fc:	2b22      	cmp	r3, #34	@ 0x22
 80067fe:	f040 80be 	bne.w	800697e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006810:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006812:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006816:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800681a:	4013      	ands	r3, r2
 800681c:	b29a      	uxth	r2, r3
 800681e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006820:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006826:	1c9a      	adds	r2, r3, #2
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 80a1 	bne.w	800698e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800685a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006860:	667b      	str	r3, [r7, #100]	@ 0x64
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800686a:	657b      	str	r3, [r7, #84]	@ 0x54
 800686c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006870:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e6      	bne.n	800684c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	663b      	str	r3, [r7, #96]	@ 0x60
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800689e:	643a      	str	r2, [r7, #64]	@ 0x40
 80068a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e5      	bne.n	800687e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a33      	ldr	r2, [pc, #204]	@ (8006998 <UART_RxISR_16BIT+0x1b4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d01f      	beq.n	8006910 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068fe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e6      	bne.n	80068de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d12e      	bne.n	8006976 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	60bb      	str	r3, [r7, #8]
   return(result);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 0310 	bic.w	r3, r3, #16
 8006932:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6979      	ldr	r1, [r7, #20]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	613b      	str	r3, [r7, #16]
   return(result);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e6      	bne.n	800691e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	2b10      	cmp	r3, #16
 800695c:	d103      	bne.n	8006966 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2210      	movs	r2, #16
 8006964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fa fe44 	bl	80015fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006974:	e00b      	b.n	800698e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe fe12 	bl	80055a0 <HAL_UART_RxCpltCallback>
}
 800697c:	e007      	b.n	800698e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0208 	orr.w	r2, r2, #8
 800698c:	619a      	str	r2, [r3, #24]
}
 800698e:	bf00      	nop
 8006990:	3770      	adds	r7, #112	@ 0x70
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	40008000 	.word	0x40008000

0800699c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b0ac      	sub	sp, #176	@ 0xb0
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80069aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069d2:	2b22      	cmp	r3, #34	@ 0x22
 80069d4:	f040 8183 	bne.w	8006cde <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069de:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069e2:	e126      	b.n	8006c32 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80069f2:	b2d9      	uxtb	r1, r3
 80069f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fe:	400a      	ands	r2, r1
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d053      	beq.n	8006ade <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d011      	beq.n	8006a66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2201      	movs	r2, #1
 8006a54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5c:	f043 0201 	orr.w	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d011      	beq.n	8006a96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00b      	beq.n	8006a96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2202      	movs	r2, #2
 8006a84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8c:	f043 0204 	orr.w	r2, r3, #4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d011      	beq.n	8006ac6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006abc:	f043 0202 	orr.w	r2, r3, #2
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d006      	beq.n	8006ade <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7fe fd79 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 80a3 	bne.w	8006c32 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b10:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006b14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006b1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e4      	bne.n	8006aec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b38:	f023 0301 	bic.w	r3, r3, #1
 8006b3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b4a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006b4c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006b50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006b58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e1      	bne.n	8006b22 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a60      	ldr	r2, [pc, #384]	@ (8006cf8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d021      	beq.n	8006bc0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01a      	beq.n	8006bc0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bae:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006bb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e4      	bne.n	8006b8a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d130      	bne.n	8006c2a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	f023 0310 	bic.w	r3, r3, #16
 8006be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bf2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e4      	bne.n	8006bce <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f003 0310 	and.w	r3, r3, #16
 8006c0e:	2b10      	cmp	r3, #16
 8006c10:	d103      	bne.n	8006c1a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2210      	movs	r2, #16
 8006c18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fa fcea 	bl	80015fc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006c28:	e00e      	b.n	8006c48 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fe fcb8 	bl	80055a0 <HAL_UART_RxCpltCallback>
        break;
 8006c30:	e00a      	b.n	8006c48 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c32:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d006      	beq.n	8006c48 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f47f aece 	bne.w	80069e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c4e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d049      	beq.n	8006cee <UART_RxISR_8BIT_FIFOEN+0x352>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c60:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d242      	bcs.n	8006cee <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3308      	adds	r3, #8
 8006c88:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e3      	bne.n	8006c68 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a16      	ldr	r2, [pc, #88]	@ (8006cfc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006ca4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f043 0320 	orr.w	r3, r3, #32
 8006cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6979      	ldr	r1, [r7, #20]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e4      	bne.n	8006ca6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cdc:	e007      	b.n	8006cee <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699a      	ldr	r2, [r3, #24]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0208 	orr.w	r2, r2, #8
 8006cec:	619a      	str	r2, [r3, #24]
}
 8006cee:	bf00      	nop
 8006cf0:	37b0      	adds	r7, #176	@ 0xb0
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40008000 	.word	0x40008000
 8006cfc:	0800662d 	.word	0x0800662d

08006d00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b0ae      	sub	sp, #184	@ 0xb8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d0e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d36:	2b22      	cmp	r3, #34	@ 0x22
 8006d38:	f040 8187 	bne.w	800704a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d42:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d46:	e12a      	b.n	8006f9e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006d5a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006d5e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006d62:	4013      	ands	r3, r2
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d70:	1c9a      	adds	r2, r3, #2
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d053      	beq.n	8006e46 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d011      	beq.n	8006dce <UART_RxISR_16BIT_FIFOEN+0xce>
 8006daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00b      	beq.n	8006dce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc4:	f043 0201 	orr.w	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d011      	beq.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2202      	movs	r2, #2
 8006dec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df4:	f043 0204 	orr.w	r2, r3, #4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d011      	beq.n	8006e2e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e24:	f043 0202 	orr.w	r2, r3, #2
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d006      	beq.n	8006e46 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fe fbc5 	bl	80055c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f040 80a5 	bne.w	8006f9e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e2      	bne.n	8006e54 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006eb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ebc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e1      	bne.n	8006e8e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a60      	ldr	r2, [pc, #384]	@ (8007064 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d021      	beq.n	8006f2c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01a      	beq.n	8006f2c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f1a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e4      	bne.n	8006ef6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d130      	bne.n	8006f96 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4a:	f023 0310 	bic.w	r3, r3, #16
 8006f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e4      	bne.n	8006f3a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	2b10      	cmp	r3, #16
 8006f7c:	d103      	bne.n	8006f86 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2210      	movs	r2, #16
 8006f84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fa fb34 	bl	80015fc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006f94:	e00e      	b.n	8006fb4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fe fb02 	bl	80055a0 <HAL_UART_RxCpltCallback>
        break;
 8006f9c:	e00a      	b.n	8006fb4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f9e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f47f aeca 	bne.w	8006d48 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006fbe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d049      	beq.n	800705a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006fcc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d242      	bcs.n	800705a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006ff8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e3      	bne.n	8006fd4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a16      	ldr	r2, [pc, #88]	@ (8007068 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007010:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f043 0320 	orr.w	r3, r3, #32
 8007026:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	69b9      	ldr	r1, [r7, #24]
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	617b      	str	r3, [r7, #20]
   return(result);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e4      	bne.n	8007012 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007048:	e007      	b.n	800705a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	699a      	ldr	r2, [r3, #24]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0208 	orr.w	r2, r2, #8
 8007058:	619a      	str	r2, [r3, #24]
}
 800705a:	bf00      	nop
 800705c:	37b8      	adds	r7, #184	@ 0xb8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40008000 	.word	0x40008000
 8007068:	080067e5 	.word	0x080067e5

0800706c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e058      	b.n	8007136 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f7fb f83a 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2224      	movs	r2, #36	@ 0x24
 80070a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7fe fd59 	bl	8005b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7fe fa8a 	bl	80055dc <UART_SetConfig>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e031      	b.n	8007136 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070e0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	055b      	lsls	r3, r3, #21
 80070fa:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8007110:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	430b      	orrs	r3, r1
 800711c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0201 	orr.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7fe fdc2 	bl	8005cb8 <UART_CheckIdleState>
 8007134:	4603      	mov	r3, r0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_UARTEx_DisableFifoMode+0x16>
 800718c:	2302      	movs	r3, #2
 800718e:	e027      	b.n	80071e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2224      	movs	r2, #36	@ 0x24
 800719c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0201 	bic.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007200:	2302      	movs	r3, #2
 8007202:	e02d      	b.n	8007260 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2224      	movs	r2, #36	@ 0x24
 8007210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0201 	bic.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f8f3 	bl	800742c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800727c:	2302      	movs	r3, #2
 800727e:	e02d      	b.n	80072dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2224      	movs	r2, #36	@ 0x24
 800728c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f8b5 	bl	800742c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	@ 0x30
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d13b      	bne.n	800737a <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e034      	b.n	800737c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	461a      	mov	r2, r3
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7fe fddf 	bl	8005ee8 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800732e:	2b01      	cmp	r3, #1
 8007330:	d11d      	bne.n	800736e <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2210      	movs	r2, #16
 8007338:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	617b      	str	r3, [r7, #20]
   return(result);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f043 0310 	orr.w	r3, r3, #16
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
 800735a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6a39      	ldr	r1, [r7, #32]
 800735e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	61fb      	str	r3, [r7, #28]
   return(result);
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e6      	bne.n	800733a <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800736c:	e002      	b.n	8007374 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8007374:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007378:	e000      	b.n	800737c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800737a:	2302      	movs	r3, #2
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3730      	adds	r7, #48	@ 0x30
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08c      	sub	sp, #48	@ 0x30
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007398:	2b20      	cmp	r3, #32
 800739a:	d142      	bne.n	8007422 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e03b      	b.n	8007424 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80073b8:	88fb      	ldrh	r3, [r7, #6]
 80073ba:	461a      	mov	r2, r3
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7fe feb4 	bl	800612c <UART_Start_Receive_DMA>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80073ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d124      	bne.n	800741c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d11d      	bne.n	8007416 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2210      	movs	r2, #16
 80073e0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	617b      	str	r3, [r7, #20]
   return(result);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f043 0310 	orr.w	r3, r3, #16
 80073f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	627b      	str	r3, [r7, #36]	@ 0x24
 8007402:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6a39      	ldr	r1, [r7, #32]
 8007406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	61fb      	str	r3, [r7, #28]
   return(result);
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e6      	bne.n	80073e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007414:	e002      	b.n	800741c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800741c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007420:	e000      	b.n	8007424 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
  }
}
 8007424:	4618      	mov	r0, r3
 8007426:	3730      	adds	r7, #48	@ 0x30
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007438:	2b00      	cmp	r3, #0
 800743a:	d108      	bne.n	800744e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800744c:	e031      	b.n	80074b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800744e:	2308      	movs	r3, #8
 8007450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007452:	2308      	movs	r3, #8
 8007454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	0e5b      	lsrs	r3, r3, #25
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	0f5b      	lsrs	r3, r3, #29
 800746e:	b2db      	uxtb	r3, r3
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	7b3a      	ldrb	r2, [r7, #12]
 800747a:	4911      	ldr	r1, [pc, #68]	@ (80074c0 <UARTEx_SetNbDataToProcess+0x94>)
 800747c:	5c8a      	ldrb	r2, [r1, r2]
 800747e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007482:	7b3a      	ldrb	r2, [r7, #12]
 8007484:	490f      	ldr	r1, [pc, #60]	@ (80074c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007488:	fb93 f3f2 	sdiv	r3, r3, r2
 800748c:	b29a      	uxth	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	7b7a      	ldrb	r2, [r7, #13]
 8007498:	4909      	ldr	r1, [pc, #36]	@ (80074c0 <UARTEx_SetNbDataToProcess+0x94>)
 800749a:	5c8a      	ldrb	r2, [r1, r2]
 800749c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074a0:	7b7a      	ldrb	r2, [r7, #13]
 80074a2:	4908      	ldr	r1, [pc, #32]	@ (80074c4 <UARTEx_SetNbDataToProcess+0x98>)
 80074a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	0800ab0c 	.word	0x0800ab0c
 80074c4:	0800ab14 	.word	0x0800ab14

080074c8 <__cvt>:
 80074c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	ec57 6b10 	vmov	r6, r7, d0
 80074d0:	2f00      	cmp	r7, #0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4619      	mov	r1, r3
 80074d6:	463b      	mov	r3, r7
 80074d8:	bfbb      	ittet	lt
 80074da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074de:	461f      	movlt	r7, r3
 80074e0:	2300      	movge	r3, #0
 80074e2:	232d      	movlt	r3, #45	@ 0x2d
 80074e4:	700b      	strb	r3, [r1, #0]
 80074e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074ec:	4691      	mov	r9, r2
 80074ee:	f023 0820 	bic.w	r8, r3, #32
 80074f2:	bfbc      	itt	lt
 80074f4:	4632      	movlt	r2, r6
 80074f6:	4616      	movlt	r6, r2
 80074f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074fc:	d005      	beq.n	800750a <__cvt+0x42>
 80074fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007502:	d100      	bne.n	8007506 <__cvt+0x3e>
 8007504:	3401      	adds	r4, #1
 8007506:	2102      	movs	r1, #2
 8007508:	e000      	b.n	800750c <__cvt+0x44>
 800750a:	2103      	movs	r1, #3
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	ab02      	add	r3, sp, #8
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	ec47 6b10 	vmov	d0, r6, r7
 8007518:	4653      	mov	r3, sl
 800751a:	4622      	mov	r2, r4
 800751c:	f000 ff74 	bl	8008408 <_dtoa_r>
 8007520:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007524:	4605      	mov	r5, r0
 8007526:	d119      	bne.n	800755c <__cvt+0x94>
 8007528:	f019 0f01 	tst.w	r9, #1
 800752c:	d00e      	beq.n	800754c <__cvt+0x84>
 800752e:	eb00 0904 	add.w	r9, r0, r4
 8007532:	2200      	movs	r2, #0
 8007534:	2300      	movs	r3, #0
 8007536:	4630      	mov	r0, r6
 8007538:	4639      	mov	r1, r7
 800753a:	f7f9 faed 	bl	8000b18 <__aeabi_dcmpeq>
 800753e:	b108      	cbz	r0, 8007544 <__cvt+0x7c>
 8007540:	f8cd 900c 	str.w	r9, [sp, #12]
 8007544:	2230      	movs	r2, #48	@ 0x30
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	454b      	cmp	r3, r9
 800754a:	d31e      	bcc.n	800758a <__cvt+0xc2>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007550:	1b5b      	subs	r3, r3, r5
 8007552:	4628      	mov	r0, r5
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	b004      	add	sp, #16
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007560:	eb00 0904 	add.w	r9, r0, r4
 8007564:	d1e5      	bne.n	8007532 <__cvt+0x6a>
 8007566:	7803      	ldrb	r3, [r0, #0]
 8007568:	2b30      	cmp	r3, #48	@ 0x30
 800756a:	d10a      	bne.n	8007582 <__cvt+0xba>
 800756c:	2200      	movs	r2, #0
 800756e:	2300      	movs	r3, #0
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f9 fad0 	bl	8000b18 <__aeabi_dcmpeq>
 8007578:	b918      	cbnz	r0, 8007582 <__cvt+0xba>
 800757a:	f1c4 0401 	rsb	r4, r4, #1
 800757e:	f8ca 4000 	str.w	r4, [sl]
 8007582:	f8da 3000 	ldr.w	r3, [sl]
 8007586:	4499      	add	r9, r3
 8007588:	e7d3      	b.n	8007532 <__cvt+0x6a>
 800758a:	1c59      	adds	r1, r3, #1
 800758c:	9103      	str	r1, [sp, #12]
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	e7d9      	b.n	8007546 <__cvt+0x7e>

08007592 <__exponent>:
 8007592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007594:	2900      	cmp	r1, #0
 8007596:	bfba      	itte	lt
 8007598:	4249      	neglt	r1, r1
 800759a:	232d      	movlt	r3, #45	@ 0x2d
 800759c:	232b      	movge	r3, #43	@ 0x2b
 800759e:	2909      	cmp	r1, #9
 80075a0:	7002      	strb	r2, [r0, #0]
 80075a2:	7043      	strb	r3, [r0, #1]
 80075a4:	dd29      	ble.n	80075fa <__exponent+0x68>
 80075a6:	f10d 0307 	add.w	r3, sp, #7
 80075aa:	461d      	mov	r5, r3
 80075ac:	270a      	movs	r7, #10
 80075ae:	461a      	mov	r2, r3
 80075b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80075b4:	fb07 1416 	mls	r4, r7, r6, r1
 80075b8:	3430      	adds	r4, #48	@ 0x30
 80075ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075be:	460c      	mov	r4, r1
 80075c0:	2c63      	cmp	r4, #99	@ 0x63
 80075c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80075c6:	4631      	mov	r1, r6
 80075c8:	dcf1      	bgt.n	80075ae <__exponent+0x1c>
 80075ca:	3130      	adds	r1, #48	@ 0x30
 80075cc:	1e94      	subs	r4, r2, #2
 80075ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075d2:	1c41      	adds	r1, r0, #1
 80075d4:	4623      	mov	r3, r4
 80075d6:	42ab      	cmp	r3, r5
 80075d8:	d30a      	bcc.n	80075f0 <__exponent+0x5e>
 80075da:	f10d 0309 	add.w	r3, sp, #9
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	42ac      	cmp	r4, r5
 80075e2:	bf88      	it	hi
 80075e4:	2300      	movhi	r3, #0
 80075e6:	3302      	adds	r3, #2
 80075e8:	4403      	add	r3, r0
 80075ea:	1a18      	subs	r0, r3, r0
 80075ec:	b003      	add	sp, #12
 80075ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075f8:	e7ed      	b.n	80075d6 <__exponent+0x44>
 80075fa:	2330      	movs	r3, #48	@ 0x30
 80075fc:	3130      	adds	r1, #48	@ 0x30
 80075fe:	7083      	strb	r3, [r0, #2]
 8007600:	70c1      	strb	r1, [r0, #3]
 8007602:	1d03      	adds	r3, r0, #4
 8007604:	e7f1      	b.n	80075ea <__exponent+0x58>
	...

08007608 <_printf_float>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	b08d      	sub	sp, #52	@ 0x34
 800760e:	460c      	mov	r4, r1
 8007610:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007614:	4616      	mov	r6, r2
 8007616:	461f      	mov	r7, r3
 8007618:	4605      	mov	r5, r0
 800761a:	f000 fdf3 	bl	8008204 <_localeconv_r>
 800761e:	6803      	ldr	r3, [r0, #0]
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	4618      	mov	r0, r3
 8007624:	f7f8 fe4c 	bl	80002c0 <strlen>
 8007628:	2300      	movs	r3, #0
 800762a:	930a      	str	r3, [sp, #40]	@ 0x28
 800762c:	f8d8 3000 	ldr.w	r3, [r8]
 8007630:	9005      	str	r0, [sp, #20]
 8007632:	3307      	adds	r3, #7
 8007634:	f023 0307 	bic.w	r3, r3, #7
 8007638:	f103 0208 	add.w	r2, r3, #8
 800763c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007640:	f8d4 b000 	ldr.w	fp, [r4]
 8007644:	f8c8 2000 	str.w	r2, [r8]
 8007648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800764c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007650:	9307      	str	r3, [sp, #28]
 8007652:	f8cd 8018 	str.w	r8, [sp, #24]
 8007656:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800765a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765e:	4b9c      	ldr	r3, [pc, #624]	@ (80078d0 <_printf_float+0x2c8>)
 8007660:	f04f 32ff 	mov.w	r2, #4294967295
 8007664:	f7f9 fa8a 	bl	8000b7c <__aeabi_dcmpun>
 8007668:	bb70      	cbnz	r0, 80076c8 <_printf_float+0xc0>
 800766a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800766e:	4b98      	ldr	r3, [pc, #608]	@ (80078d0 <_printf_float+0x2c8>)
 8007670:	f04f 32ff 	mov.w	r2, #4294967295
 8007674:	f7f9 fa64 	bl	8000b40 <__aeabi_dcmple>
 8007678:	bb30      	cbnz	r0, 80076c8 <_printf_float+0xc0>
 800767a:	2200      	movs	r2, #0
 800767c:	2300      	movs	r3, #0
 800767e:	4640      	mov	r0, r8
 8007680:	4649      	mov	r1, r9
 8007682:	f7f9 fa53 	bl	8000b2c <__aeabi_dcmplt>
 8007686:	b110      	cbz	r0, 800768e <_printf_float+0x86>
 8007688:	232d      	movs	r3, #45	@ 0x2d
 800768a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800768e:	4a91      	ldr	r2, [pc, #580]	@ (80078d4 <_printf_float+0x2cc>)
 8007690:	4b91      	ldr	r3, [pc, #580]	@ (80078d8 <_printf_float+0x2d0>)
 8007692:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007696:	bf8c      	ite	hi
 8007698:	4690      	movhi	r8, r2
 800769a:	4698      	movls	r8, r3
 800769c:	2303      	movs	r3, #3
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	f02b 0304 	bic.w	r3, fp, #4
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	f04f 0900 	mov.w	r9, #0
 80076aa:	9700      	str	r7, [sp, #0]
 80076ac:	4633      	mov	r3, r6
 80076ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076b0:	4621      	mov	r1, r4
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 f9d2 	bl	8007a5c <_printf_common>
 80076b8:	3001      	adds	r0, #1
 80076ba:	f040 808d 	bne.w	80077d8 <_printf_float+0x1d0>
 80076be:	f04f 30ff 	mov.w	r0, #4294967295
 80076c2:	b00d      	add	sp, #52	@ 0x34
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	4642      	mov	r2, r8
 80076ca:	464b      	mov	r3, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f9 fa54 	bl	8000b7c <__aeabi_dcmpun>
 80076d4:	b140      	cbz	r0, 80076e8 <_printf_float+0xe0>
 80076d6:	464b      	mov	r3, r9
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfbc      	itt	lt
 80076dc:	232d      	movlt	r3, #45	@ 0x2d
 80076de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076e2:	4a7e      	ldr	r2, [pc, #504]	@ (80078dc <_printf_float+0x2d4>)
 80076e4:	4b7e      	ldr	r3, [pc, #504]	@ (80078e0 <_printf_float+0x2d8>)
 80076e6:	e7d4      	b.n	8007692 <_printf_float+0x8a>
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076ee:	9206      	str	r2, [sp, #24]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	d13b      	bne.n	800776c <_printf_float+0x164>
 80076f4:	2306      	movs	r3, #6
 80076f6:	6063      	str	r3, [r4, #4]
 80076f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076fc:	2300      	movs	r3, #0
 80076fe:	6022      	str	r2, [r4, #0]
 8007700:	9303      	str	r3, [sp, #12]
 8007702:	ab0a      	add	r3, sp, #40	@ 0x28
 8007704:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007708:	ab09      	add	r3, sp, #36	@ 0x24
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	6861      	ldr	r1, [r4, #4]
 800770e:	ec49 8b10 	vmov	d0, r8, r9
 8007712:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007716:	4628      	mov	r0, r5
 8007718:	f7ff fed6 	bl	80074c8 <__cvt>
 800771c:	9b06      	ldr	r3, [sp, #24]
 800771e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007720:	2b47      	cmp	r3, #71	@ 0x47
 8007722:	4680      	mov	r8, r0
 8007724:	d129      	bne.n	800777a <_printf_float+0x172>
 8007726:	1cc8      	adds	r0, r1, #3
 8007728:	db02      	blt.n	8007730 <_printf_float+0x128>
 800772a:	6863      	ldr	r3, [r4, #4]
 800772c:	4299      	cmp	r1, r3
 800772e:	dd41      	ble.n	80077b4 <_printf_float+0x1ac>
 8007730:	f1aa 0a02 	sub.w	sl, sl, #2
 8007734:	fa5f fa8a 	uxtb.w	sl, sl
 8007738:	3901      	subs	r1, #1
 800773a:	4652      	mov	r2, sl
 800773c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007740:	9109      	str	r1, [sp, #36]	@ 0x24
 8007742:	f7ff ff26 	bl	8007592 <__exponent>
 8007746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007748:	1813      	adds	r3, r2, r0
 800774a:	2a01      	cmp	r2, #1
 800774c:	4681      	mov	r9, r0
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	dc02      	bgt.n	8007758 <_printf_float+0x150>
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	07d2      	lsls	r2, r2, #31
 8007756:	d501      	bpl.n	800775c <_printf_float+0x154>
 8007758:	3301      	adds	r3, #1
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0a2      	beq.n	80076aa <_printf_float+0xa2>
 8007764:	232d      	movs	r3, #45	@ 0x2d
 8007766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800776a:	e79e      	b.n	80076aa <_printf_float+0xa2>
 800776c:	9a06      	ldr	r2, [sp, #24]
 800776e:	2a47      	cmp	r2, #71	@ 0x47
 8007770:	d1c2      	bne.n	80076f8 <_printf_float+0xf0>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1c0      	bne.n	80076f8 <_printf_float+0xf0>
 8007776:	2301      	movs	r3, #1
 8007778:	e7bd      	b.n	80076f6 <_printf_float+0xee>
 800777a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800777e:	d9db      	bls.n	8007738 <_printf_float+0x130>
 8007780:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007784:	d118      	bne.n	80077b8 <_printf_float+0x1b0>
 8007786:	2900      	cmp	r1, #0
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	dd0b      	ble.n	80077a4 <_printf_float+0x19c>
 800778c:	6121      	str	r1, [r4, #16]
 800778e:	b913      	cbnz	r3, 8007796 <_printf_float+0x18e>
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	07d0      	lsls	r0, r2, #31
 8007794:	d502      	bpl.n	800779c <_printf_float+0x194>
 8007796:	3301      	adds	r3, #1
 8007798:	440b      	add	r3, r1
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	e7db      	b.n	800775c <_printf_float+0x154>
 80077a4:	b913      	cbnz	r3, 80077ac <_printf_float+0x1a4>
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	07d2      	lsls	r2, r2, #31
 80077aa:	d501      	bpl.n	80077b0 <_printf_float+0x1a8>
 80077ac:	3302      	adds	r3, #2
 80077ae:	e7f4      	b.n	800779a <_printf_float+0x192>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e7f2      	b.n	800779a <_printf_float+0x192>
 80077b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ba:	4299      	cmp	r1, r3
 80077bc:	db05      	blt.n	80077ca <_printf_float+0x1c2>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	6121      	str	r1, [r4, #16]
 80077c2:	07d8      	lsls	r0, r3, #31
 80077c4:	d5ea      	bpl.n	800779c <_printf_float+0x194>
 80077c6:	1c4b      	adds	r3, r1, #1
 80077c8:	e7e7      	b.n	800779a <_printf_float+0x192>
 80077ca:	2900      	cmp	r1, #0
 80077cc:	bfd4      	ite	le
 80077ce:	f1c1 0202 	rsble	r2, r1, #2
 80077d2:	2201      	movgt	r2, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	e7e0      	b.n	800779a <_printf_float+0x192>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	055a      	lsls	r2, r3, #21
 80077dc:	d407      	bmi.n	80077ee <_printf_float+0x1e6>
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	4642      	mov	r2, r8
 80077e2:	4631      	mov	r1, r6
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b8      	blx	r7
 80077e8:	3001      	adds	r0, #1
 80077ea:	d12b      	bne.n	8007844 <_printf_float+0x23c>
 80077ec:	e767      	b.n	80076be <_printf_float+0xb6>
 80077ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077f2:	f240 80dd 	bls.w	80079b0 <_printf_float+0x3a8>
 80077f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077fa:	2200      	movs	r2, #0
 80077fc:	2300      	movs	r3, #0
 80077fe:	f7f9 f98b 	bl	8000b18 <__aeabi_dcmpeq>
 8007802:	2800      	cmp	r0, #0
 8007804:	d033      	beq.n	800786e <_printf_float+0x266>
 8007806:	4a37      	ldr	r2, [pc, #220]	@ (80078e4 <_printf_float+0x2dc>)
 8007808:	2301      	movs	r3, #1
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	f43f af54 	beq.w	80076be <_printf_float+0xb6>
 8007816:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800781a:	4543      	cmp	r3, r8
 800781c:	db02      	blt.n	8007824 <_printf_float+0x21c>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	07d8      	lsls	r0, r3, #31
 8007822:	d50f      	bpl.n	8007844 <_printf_float+0x23c>
 8007824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f af45 	beq.w	80076be <_printf_float+0xb6>
 8007834:	f04f 0900 	mov.w	r9, #0
 8007838:	f108 38ff 	add.w	r8, r8, #4294967295
 800783c:	f104 0a1a 	add.w	sl, r4, #26
 8007840:	45c8      	cmp	r8, r9
 8007842:	dc09      	bgt.n	8007858 <_printf_float+0x250>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	079b      	lsls	r3, r3, #30
 8007848:	f100 8103 	bmi.w	8007a52 <_printf_float+0x44a>
 800784c:	68e0      	ldr	r0, [r4, #12]
 800784e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007850:	4298      	cmp	r0, r3
 8007852:	bfb8      	it	lt
 8007854:	4618      	movlt	r0, r3
 8007856:	e734      	b.n	80076c2 <_printf_float+0xba>
 8007858:	2301      	movs	r3, #1
 800785a:	4652      	mov	r2, sl
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f af2b 	beq.w	80076be <_printf_float+0xb6>
 8007868:	f109 0901 	add.w	r9, r9, #1
 800786c:	e7e8      	b.n	8007840 <_printf_float+0x238>
 800786e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	dc39      	bgt.n	80078e8 <_printf_float+0x2e0>
 8007874:	4a1b      	ldr	r2, [pc, #108]	@ (80078e4 <_printf_float+0x2dc>)
 8007876:	2301      	movs	r3, #1
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	f43f af1d 	beq.w	80076be <_printf_float+0xb6>
 8007884:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007888:	ea59 0303 	orrs.w	r3, r9, r3
 800788c:	d102      	bne.n	8007894 <_printf_float+0x28c>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	07d9      	lsls	r1, r3, #31
 8007892:	d5d7      	bpl.n	8007844 <_printf_float+0x23c>
 8007894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f af0d 	beq.w	80076be <_printf_float+0xb6>
 80078a4:	f04f 0a00 	mov.w	sl, #0
 80078a8:	f104 0b1a 	add.w	fp, r4, #26
 80078ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ae:	425b      	negs	r3, r3
 80078b0:	4553      	cmp	r3, sl
 80078b2:	dc01      	bgt.n	80078b8 <_printf_float+0x2b0>
 80078b4:	464b      	mov	r3, r9
 80078b6:	e793      	b.n	80077e0 <_printf_float+0x1d8>
 80078b8:	2301      	movs	r3, #1
 80078ba:	465a      	mov	r2, fp
 80078bc:	4631      	mov	r1, r6
 80078be:	4628      	mov	r0, r5
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	f43f aefb 	beq.w	80076be <_printf_float+0xb6>
 80078c8:	f10a 0a01 	add.w	sl, sl, #1
 80078cc:	e7ee      	b.n	80078ac <_printf_float+0x2a4>
 80078ce:	bf00      	nop
 80078d0:	7fefffff 	.word	0x7fefffff
 80078d4:	0800ab20 	.word	0x0800ab20
 80078d8:	0800ab1c 	.word	0x0800ab1c
 80078dc:	0800ab28 	.word	0x0800ab28
 80078e0:	0800ab24 	.word	0x0800ab24
 80078e4:	0800ab2c 	.word	0x0800ab2c
 80078e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078ee:	4553      	cmp	r3, sl
 80078f0:	bfa8      	it	ge
 80078f2:	4653      	movge	r3, sl
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	4699      	mov	r9, r3
 80078f8:	dc36      	bgt.n	8007968 <_printf_float+0x360>
 80078fa:	f04f 0b00 	mov.w	fp, #0
 80078fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007902:	f104 021a 	add.w	r2, r4, #26
 8007906:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007908:	9306      	str	r3, [sp, #24]
 800790a:	eba3 0309 	sub.w	r3, r3, r9
 800790e:	455b      	cmp	r3, fp
 8007910:	dc31      	bgt.n	8007976 <_printf_float+0x36e>
 8007912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007914:	459a      	cmp	sl, r3
 8007916:	dc3a      	bgt.n	800798e <_printf_float+0x386>
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	07da      	lsls	r2, r3, #31
 800791c:	d437      	bmi.n	800798e <_printf_float+0x386>
 800791e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007920:	ebaa 0903 	sub.w	r9, sl, r3
 8007924:	9b06      	ldr	r3, [sp, #24]
 8007926:	ebaa 0303 	sub.w	r3, sl, r3
 800792a:	4599      	cmp	r9, r3
 800792c:	bfa8      	it	ge
 800792e:	4699      	movge	r9, r3
 8007930:	f1b9 0f00 	cmp.w	r9, #0
 8007934:	dc33      	bgt.n	800799e <_printf_float+0x396>
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800793e:	f104 0b1a 	add.w	fp, r4, #26
 8007942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007944:	ebaa 0303 	sub.w	r3, sl, r3
 8007948:	eba3 0309 	sub.w	r3, r3, r9
 800794c:	4543      	cmp	r3, r8
 800794e:	f77f af79 	ble.w	8007844 <_printf_float+0x23c>
 8007952:	2301      	movs	r3, #1
 8007954:	465a      	mov	r2, fp
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	47b8      	blx	r7
 800795c:	3001      	adds	r0, #1
 800795e:	f43f aeae 	beq.w	80076be <_printf_float+0xb6>
 8007962:	f108 0801 	add.w	r8, r8, #1
 8007966:	e7ec      	b.n	8007942 <_printf_float+0x33a>
 8007968:	4642      	mov	r2, r8
 800796a:	4631      	mov	r1, r6
 800796c:	4628      	mov	r0, r5
 800796e:	47b8      	blx	r7
 8007970:	3001      	adds	r0, #1
 8007972:	d1c2      	bne.n	80078fa <_printf_float+0x2f2>
 8007974:	e6a3      	b.n	80076be <_printf_float+0xb6>
 8007976:	2301      	movs	r3, #1
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	9206      	str	r2, [sp, #24]
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	f43f ae9c 	beq.w	80076be <_printf_float+0xb6>
 8007986:	9a06      	ldr	r2, [sp, #24]
 8007988:	f10b 0b01 	add.w	fp, fp, #1
 800798c:	e7bb      	b.n	8007906 <_printf_float+0x2fe>
 800798e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	d1c0      	bne.n	800791e <_printf_float+0x316>
 800799c:	e68f      	b.n	80076be <_printf_float+0xb6>
 800799e:	9a06      	ldr	r2, [sp, #24]
 80079a0:	464b      	mov	r3, r9
 80079a2:	4442      	add	r2, r8
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	d1c3      	bne.n	8007936 <_printf_float+0x32e>
 80079ae:	e686      	b.n	80076be <_printf_float+0xb6>
 80079b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079b4:	f1ba 0f01 	cmp.w	sl, #1
 80079b8:	dc01      	bgt.n	80079be <_printf_float+0x3b6>
 80079ba:	07db      	lsls	r3, r3, #31
 80079bc:	d536      	bpl.n	8007a2c <_printf_float+0x424>
 80079be:	2301      	movs	r3, #1
 80079c0:	4642      	mov	r2, r8
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	f43f ae78 	beq.w	80076be <_printf_float+0xb6>
 80079ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f ae70 	beq.w	80076be <_printf_float+0xb6>
 80079de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079e2:	2200      	movs	r2, #0
 80079e4:	2300      	movs	r3, #0
 80079e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ea:	f7f9 f895 	bl	8000b18 <__aeabi_dcmpeq>
 80079ee:	b9c0      	cbnz	r0, 8007a22 <_printf_float+0x41a>
 80079f0:	4653      	mov	r3, sl
 80079f2:	f108 0201 	add.w	r2, r8, #1
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	d10c      	bne.n	8007a1a <_printf_float+0x412>
 8007a00:	e65d      	b.n	80076be <_printf_float+0xb6>
 8007a02:	2301      	movs	r3, #1
 8007a04:	465a      	mov	r2, fp
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b8      	blx	r7
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f43f ae56 	beq.w	80076be <_printf_float+0xb6>
 8007a12:	f108 0801 	add.w	r8, r8, #1
 8007a16:	45d0      	cmp	r8, sl
 8007a18:	dbf3      	blt.n	8007a02 <_printf_float+0x3fa>
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a20:	e6df      	b.n	80077e2 <_printf_float+0x1da>
 8007a22:	f04f 0800 	mov.w	r8, #0
 8007a26:	f104 0b1a 	add.w	fp, r4, #26
 8007a2a:	e7f4      	b.n	8007a16 <_printf_float+0x40e>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	4642      	mov	r2, r8
 8007a30:	e7e1      	b.n	80079f6 <_printf_float+0x3ee>
 8007a32:	2301      	movs	r3, #1
 8007a34:	464a      	mov	r2, r9
 8007a36:	4631      	mov	r1, r6
 8007a38:	4628      	mov	r0, r5
 8007a3a:	47b8      	blx	r7
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	f43f ae3e 	beq.w	80076be <_printf_float+0xb6>
 8007a42:	f108 0801 	add.w	r8, r8, #1
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a4a:	1a5b      	subs	r3, r3, r1
 8007a4c:	4543      	cmp	r3, r8
 8007a4e:	dcf0      	bgt.n	8007a32 <_printf_float+0x42a>
 8007a50:	e6fc      	b.n	800784c <_printf_float+0x244>
 8007a52:	f04f 0800 	mov.w	r8, #0
 8007a56:	f104 0919 	add.w	r9, r4, #25
 8007a5a:	e7f4      	b.n	8007a46 <_printf_float+0x43e>

08007a5c <_printf_common>:
 8007a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	4616      	mov	r6, r2
 8007a62:	4698      	mov	r8, r3
 8007a64:	688a      	ldr	r2, [r1, #8]
 8007a66:	690b      	ldr	r3, [r1, #16]
 8007a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	bfb8      	it	lt
 8007a70:	4613      	movlt	r3, r2
 8007a72:	6033      	str	r3, [r6, #0]
 8007a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a78:	4607      	mov	r7, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	b10a      	cbz	r2, 8007a82 <_printf_common+0x26>
 8007a7e:	3301      	adds	r3, #1
 8007a80:	6033      	str	r3, [r6, #0]
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	0699      	lsls	r1, r3, #26
 8007a86:	bf42      	ittt	mi
 8007a88:	6833      	ldrmi	r3, [r6, #0]
 8007a8a:	3302      	addmi	r3, #2
 8007a8c:	6033      	strmi	r3, [r6, #0]
 8007a8e:	6825      	ldr	r5, [r4, #0]
 8007a90:	f015 0506 	ands.w	r5, r5, #6
 8007a94:	d106      	bne.n	8007aa4 <_printf_common+0x48>
 8007a96:	f104 0a19 	add.w	sl, r4, #25
 8007a9a:	68e3      	ldr	r3, [r4, #12]
 8007a9c:	6832      	ldr	r2, [r6, #0]
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	42ab      	cmp	r3, r5
 8007aa2:	dc26      	bgt.n	8007af2 <_printf_common+0x96>
 8007aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007aa8:	6822      	ldr	r2, [r4, #0]
 8007aaa:	3b00      	subs	r3, #0
 8007aac:	bf18      	it	ne
 8007aae:	2301      	movne	r3, #1
 8007ab0:	0692      	lsls	r2, r2, #26
 8007ab2:	d42b      	bmi.n	8007b0c <_printf_common+0xb0>
 8007ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ab8:	4641      	mov	r1, r8
 8007aba:	4638      	mov	r0, r7
 8007abc:	47c8      	blx	r9
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d01e      	beq.n	8007b00 <_printf_common+0xa4>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	6922      	ldr	r2, [r4, #16]
 8007ac6:	f003 0306 	and.w	r3, r3, #6
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	bf02      	ittt	eq
 8007ace:	68e5      	ldreq	r5, [r4, #12]
 8007ad0:	6833      	ldreq	r3, [r6, #0]
 8007ad2:	1aed      	subeq	r5, r5, r3
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	bf0c      	ite	eq
 8007ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007adc:	2500      	movne	r5, #0
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	bfc4      	itt	gt
 8007ae2:	1a9b      	subgt	r3, r3, r2
 8007ae4:	18ed      	addgt	r5, r5, r3
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	341a      	adds	r4, #26
 8007aea:	42b5      	cmp	r5, r6
 8007aec:	d11a      	bne.n	8007b24 <_printf_common+0xc8>
 8007aee:	2000      	movs	r0, #0
 8007af0:	e008      	b.n	8007b04 <_printf_common+0xa8>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4652      	mov	r2, sl
 8007af6:	4641      	mov	r1, r8
 8007af8:	4638      	mov	r0, r7
 8007afa:	47c8      	blx	r9
 8007afc:	3001      	adds	r0, #1
 8007afe:	d103      	bne.n	8007b08 <_printf_common+0xac>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	3501      	adds	r5, #1
 8007b0a:	e7c6      	b.n	8007a9a <_printf_common+0x3e>
 8007b0c:	18e1      	adds	r1, r4, r3
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	2030      	movs	r0, #48	@ 0x30
 8007b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b16:	4422      	add	r2, r4
 8007b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b20:	3302      	adds	r3, #2
 8007b22:	e7c7      	b.n	8007ab4 <_printf_common+0x58>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4622      	mov	r2, r4
 8007b28:	4641      	mov	r1, r8
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	47c8      	blx	r9
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d0e6      	beq.n	8007b00 <_printf_common+0xa4>
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7d9      	b.n	8007aea <_printf_common+0x8e>
	...

08007b38 <_printf_i>:
 8007b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3c:	7e0f      	ldrb	r7, [r1, #24]
 8007b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b40:	2f78      	cmp	r7, #120	@ 0x78
 8007b42:	4691      	mov	r9, r2
 8007b44:	4680      	mov	r8, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	469a      	mov	sl, r3
 8007b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b4e:	d807      	bhi.n	8007b60 <_printf_i+0x28>
 8007b50:	2f62      	cmp	r7, #98	@ 0x62
 8007b52:	d80a      	bhi.n	8007b6a <_printf_i+0x32>
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	f000 80d1 	beq.w	8007cfc <_printf_i+0x1c4>
 8007b5a:	2f58      	cmp	r7, #88	@ 0x58
 8007b5c:	f000 80b8 	beq.w	8007cd0 <_printf_i+0x198>
 8007b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b68:	e03a      	b.n	8007be0 <_printf_i+0xa8>
 8007b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b6e:	2b15      	cmp	r3, #21
 8007b70:	d8f6      	bhi.n	8007b60 <_printf_i+0x28>
 8007b72:	a101      	add	r1, pc, #4	@ (adr r1, 8007b78 <_printf_i+0x40>)
 8007b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b78:	08007bd1 	.word	0x08007bd1
 8007b7c:	08007be5 	.word	0x08007be5
 8007b80:	08007b61 	.word	0x08007b61
 8007b84:	08007b61 	.word	0x08007b61
 8007b88:	08007b61 	.word	0x08007b61
 8007b8c:	08007b61 	.word	0x08007b61
 8007b90:	08007be5 	.word	0x08007be5
 8007b94:	08007b61 	.word	0x08007b61
 8007b98:	08007b61 	.word	0x08007b61
 8007b9c:	08007b61 	.word	0x08007b61
 8007ba0:	08007b61 	.word	0x08007b61
 8007ba4:	08007ce3 	.word	0x08007ce3
 8007ba8:	08007c0f 	.word	0x08007c0f
 8007bac:	08007c9d 	.word	0x08007c9d
 8007bb0:	08007b61 	.word	0x08007b61
 8007bb4:	08007b61 	.word	0x08007b61
 8007bb8:	08007d05 	.word	0x08007d05
 8007bbc:	08007b61 	.word	0x08007b61
 8007bc0:	08007c0f 	.word	0x08007c0f
 8007bc4:	08007b61 	.word	0x08007b61
 8007bc8:	08007b61 	.word	0x08007b61
 8007bcc:	08007ca5 	.word	0x08007ca5
 8007bd0:	6833      	ldr	r3, [r6, #0]
 8007bd2:	1d1a      	adds	r2, r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6032      	str	r2, [r6, #0]
 8007bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007be0:	2301      	movs	r3, #1
 8007be2:	e09c      	b.n	8007d1e <_printf_i+0x1e6>
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	6820      	ldr	r0, [r4, #0]
 8007be8:	1d19      	adds	r1, r3, #4
 8007bea:	6031      	str	r1, [r6, #0]
 8007bec:	0606      	lsls	r6, r0, #24
 8007bee:	d501      	bpl.n	8007bf4 <_printf_i+0xbc>
 8007bf0:	681d      	ldr	r5, [r3, #0]
 8007bf2:	e003      	b.n	8007bfc <_printf_i+0xc4>
 8007bf4:	0645      	lsls	r5, r0, #25
 8007bf6:	d5fb      	bpl.n	8007bf0 <_printf_i+0xb8>
 8007bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	da03      	bge.n	8007c08 <_printf_i+0xd0>
 8007c00:	232d      	movs	r3, #45	@ 0x2d
 8007c02:	426d      	negs	r5, r5
 8007c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c08:	4858      	ldr	r0, [pc, #352]	@ (8007d6c <_printf_i+0x234>)
 8007c0a:	230a      	movs	r3, #10
 8007c0c:	e011      	b.n	8007c32 <_printf_i+0xfa>
 8007c0e:	6821      	ldr	r1, [r4, #0]
 8007c10:	6833      	ldr	r3, [r6, #0]
 8007c12:	0608      	lsls	r0, r1, #24
 8007c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c18:	d402      	bmi.n	8007c20 <_printf_i+0xe8>
 8007c1a:	0649      	lsls	r1, r1, #25
 8007c1c:	bf48      	it	mi
 8007c1e:	b2ad      	uxthmi	r5, r5
 8007c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c22:	4852      	ldr	r0, [pc, #328]	@ (8007d6c <_printf_i+0x234>)
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	bf14      	ite	ne
 8007c28:	230a      	movne	r3, #10
 8007c2a:	2308      	moveq	r3, #8
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c32:	6866      	ldr	r6, [r4, #4]
 8007c34:	60a6      	str	r6, [r4, #8]
 8007c36:	2e00      	cmp	r6, #0
 8007c38:	db05      	blt.n	8007c46 <_printf_i+0x10e>
 8007c3a:	6821      	ldr	r1, [r4, #0]
 8007c3c:	432e      	orrs	r6, r5
 8007c3e:	f021 0104 	bic.w	r1, r1, #4
 8007c42:	6021      	str	r1, [r4, #0]
 8007c44:	d04b      	beq.n	8007cde <_printf_i+0x1a6>
 8007c46:	4616      	mov	r6, r2
 8007c48:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c4c:	fb03 5711 	mls	r7, r3, r1, r5
 8007c50:	5dc7      	ldrb	r7, [r0, r7]
 8007c52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c56:	462f      	mov	r7, r5
 8007c58:	42bb      	cmp	r3, r7
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	d9f4      	bls.n	8007c48 <_printf_i+0x110>
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d10b      	bne.n	8007c7a <_printf_i+0x142>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	07df      	lsls	r7, r3, #31
 8007c66:	d508      	bpl.n	8007c7a <_printf_i+0x142>
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	6861      	ldr	r1, [r4, #4]
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	bfde      	ittt	le
 8007c70:	2330      	movle	r3, #48	@ 0x30
 8007c72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c7a:	1b92      	subs	r2, r2, r6
 8007c7c:	6122      	str	r2, [r4, #16]
 8007c7e:	f8cd a000 	str.w	sl, [sp]
 8007c82:	464b      	mov	r3, r9
 8007c84:	aa03      	add	r2, sp, #12
 8007c86:	4621      	mov	r1, r4
 8007c88:	4640      	mov	r0, r8
 8007c8a:	f7ff fee7 	bl	8007a5c <_printf_common>
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d14a      	bne.n	8007d28 <_printf_i+0x1f0>
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	b004      	add	sp, #16
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	f043 0320 	orr.w	r3, r3, #32
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	4832      	ldr	r0, [pc, #200]	@ (8007d70 <_printf_i+0x238>)
 8007ca6:	2778      	movs	r7, #120	@ 0x78
 8007ca8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	6831      	ldr	r1, [r6, #0]
 8007cb0:	061f      	lsls	r7, r3, #24
 8007cb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cb6:	d402      	bmi.n	8007cbe <_printf_i+0x186>
 8007cb8:	065f      	lsls	r7, r3, #25
 8007cba:	bf48      	it	mi
 8007cbc:	b2ad      	uxthmi	r5, r5
 8007cbe:	6031      	str	r1, [r6, #0]
 8007cc0:	07d9      	lsls	r1, r3, #31
 8007cc2:	bf44      	itt	mi
 8007cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8007cc8:	6023      	strmi	r3, [r4, #0]
 8007cca:	b11d      	cbz	r5, 8007cd4 <_printf_i+0x19c>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	e7ad      	b.n	8007c2c <_printf_i+0xf4>
 8007cd0:	4826      	ldr	r0, [pc, #152]	@ (8007d6c <_printf_i+0x234>)
 8007cd2:	e7e9      	b.n	8007ca8 <_printf_i+0x170>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	f023 0320 	bic.w	r3, r3, #32
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	e7f6      	b.n	8007ccc <_printf_i+0x194>
 8007cde:	4616      	mov	r6, r2
 8007ce0:	e7bd      	b.n	8007c5e <_printf_i+0x126>
 8007ce2:	6833      	ldr	r3, [r6, #0]
 8007ce4:	6825      	ldr	r5, [r4, #0]
 8007ce6:	6961      	ldr	r1, [r4, #20]
 8007ce8:	1d18      	adds	r0, r3, #4
 8007cea:	6030      	str	r0, [r6, #0]
 8007cec:	062e      	lsls	r6, r5, #24
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	d501      	bpl.n	8007cf6 <_printf_i+0x1be>
 8007cf2:	6019      	str	r1, [r3, #0]
 8007cf4:	e002      	b.n	8007cfc <_printf_i+0x1c4>
 8007cf6:	0668      	lsls	r0, r5, #25
 8007cf8:	d5fb      	bpl.n	8007cf2 <_printf_i+0x1ba>
 8007cfa:	8019      	strh	r1, [r3, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6123      	str	r3, [r4, #16]
 8007d00:	4616      	mov	r6, r2
 8007d02:	e7bc      	b.n	8007c7e <_printf_i+0x146>
 8007d04:	6833      	ldr	r3, [r6, #0]
 8007d06:	1d1a      	adds	r2, r3, #4
 8007d08:	6032      	str	r2, [r6, #0]
 8007d0a:	681e      	ldr	r6, [r3, #0]
 8007d0c:	6862      	ldr	r2, [r4, #4]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4630      	mov	r0, r6
 8007d12:	f7f8 fa85 	bl	8000220 <memchr>
 8007d16:	b108      	cbz	r0, 8007d1c <_printf_i+0x1e4>
 8007d18:	1b80      	subs	r0, r0, r6
 8007d1a:	6060      	str	r0, [r4, #4]
 8007d1c:	6863      	ldr	r3, [r4, #4]
 8007d1e:	6123      	str	r3, [r4, #16]
 8007d20:	2300      	movs	r3, #0
 8007d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d26:	e7aa      	b.n	8007c7e <_printf_i+0x146>
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	4632      	mov	r2, r6
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	4640      	mov	r0, r8
 8007d30:	47d0      	blx	sl
 8007d32:	3001      	adds	r0, #1
 8007d34:	d0ad      	beq.n	8007c92 <_printf_i+0x15a>
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	079b      	lsls	r3, r3, #30
 8007d3a:	d413      	bmi.n	8007d64 <_printf_i+0x22c>
 8007d3c:	68e0      	ldr	r0, [r4, #12]
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	4298      	cmp	r0, r3
 8007d42:	bfb8      	it	lt
 8007d44:	4618      	movlt	r0, r3
 8007d46:	e7a6      	b.n	8007c96 <_printf_i+0x15e>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4632      	mov	r2, r6
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	4640      	mov	r0, r8
 8007d50:	47d0      	blx	sl
 8007d52:	3001      	adds	r0, #1
 8007d54:	d09d      	beq.n	8007c92 <_printf_i+0x15a>
 8007d56:	3501      	adds	r5, #1
 8007d58:	68e3      	ldr	r3, [r4, #12]
 8007d5a:	9903      	ldr	r1, [sp, #12]
 8007d5c:	1a5b      	subs	r3, r3, r1
 8007d5e:	42ab      	cmp	r3, r5
 8007d60:	dcf2      	bgt.n	8007d48 <_printf_i+0x210>
 8007d62:	e7eb      	b.n	8007d3c <_printf_i+0x204>
 8007d64:	2500      	movs	r5, #0
 8007d66:	f104 0619 	add.w	r6, r4, #25
 8007d6a:	e7f5      	b.n	8007d58 <_printf_i+0x220>
 8007d6c:	0800ab2e 	.word	0x0800ab2e
 8007d70:	0800ab3f 	.word	0x0800ab3f

08007d74 <std>:
 8007d74:	2300      	movs	r3, #0
 8007d76:	b510      	push	{r4, lr}
 8007d78:	4604      	mov	r4, r0
 8007d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d82:	6083      	str	r3, [r0, #8]
 8007d84:	8181      	strh	r1, [r0, #12]
 8007d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d88:	81c2      	strh	r2, [r0, #14]
 8007d8a:	6183      	str	r3, [r0, #24]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	2208      	movs	r2, #8
 8007d90:	305c      	adds	r0, #92	@ 0x5c
 8007d92:	f000 fa2f 	bl	80081f4 <memset>
 8007d96:	4b0d      	ldr	r3, [pc, #52]	@ (8007dcc <std+0x58>)
 8007d98:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <std+0x5c>)
 8007d9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <std+0x60>)
 8007da0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <std+0x64>)
 8007da4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007da6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <std+0x68>)
 8007da8:	6224      	str	r4, [r4, #32]
 8007daa:	429c      	cmp	r4, r3
 8007dac:	d006      	beq.n	8007dbc <std+0x48>
 8007dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007db2:	4294      	cmp	r4, r2
 8007db4:	d002      	beq.n	8007dbc <std+0x48>
 8007db6:	33d0      	adds	r3, #208	@ 0xd0
 8007db8:	429c      	cmp	r4, r3
 8007dba:	d105      	bne.n	8007dc8 <std+0x54>
 8007dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc4:	f000 ba92 	b.w	80082ec <__retarget_lock_init_recursive>
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	bf00      	nop
 8007dcc:	08008045 	.word	0x08008045
 8007dd0:	08008067 	.word	0x08008067
 8007dd4:	0800809f 	.word	0x0800809f
 8007dd8:	080080c3 	.word	0x080080c3
 8007ddc:	20000580 	.word	0x20000580

08007de0 <stdio_exit_handler>:
 8007de0:	4a02      	ldr	r2, [pc, #8]	@ (8007dec <stdio_exit_handler+0xc>)
 8007de2:	4903      	ldr	r1, [pc, #12]	@ (8007df0 <stdio_exit_handler+0x10>)
 8007de4:	4803      	ldr	r0, [pc, #12]	@ (8007df4 <stdio_exit_handler+0x14>)
 8007de6:	f000 b869 	b.w	8007ebc <_fwalk_sglue>
 8007dea:	bf00      	nop
 8007dec:	2000000c 	.word	0x2000000c
 8007df0:	08009ed9 	.word	0x08009ed9
 8007df4:	2000001c 	.word	0x2000001c

08007df8 <cleanup_stdio>:
 8007df8:	6841      	ldr	r1, [r0, #4]
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8007e2c <cleanup_stdio+0x34>)
 8007dfc:	4299      	cmp	r1, r3
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	4604      	mov	r4, r0
 8007e02:	d001      	beq.n	8007e08 <cleanup_stdio+0x10>
 8007e04:	f002 f868 	bl	8009ed8 <_fflush_r>
 8007e08:	68a1      	ldr	r1, [r4, #8]
 8007e0a:	4b09      	ldr	r3, [pc, #36]	@ (8007e30 <cleanup_stdio+0x38>)
 8007e0c:	4299      	cmp	r1, r3
 8007e0e:	d002      	beq.n	8007e16 <cleanup_stdio+0x1e>
 8007e10:	4620      	mov	r0, r4
 8007e12:	f002 f861 	bl	8009ed8 <_fflush_r>
 8007e16:	68e1      	ldr	r1, [r4, #12]
 8007e18:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <cleanup_stdio+0x3c>)
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	d004      	beq.n	8007e28 <cleanup_stdio+0x30>
 8007e1e:	4620      	mov	r0, r4
 8007e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e24:	f002 b858 	b.w	8009ed8 <_fflush_r>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000580 	.word	0x20000580
 8007e30:	200005e8 	.word	0x200005e8
 8007e34:	20000650 	.word	0x20000650

08007e38 <global_stdio_init.part.0>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e68 <global_stdio_init.part.0+0x30>)
 8007e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8007e6c <global_stdio_init.part.0+0x34>)
 8007e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e70 <global_stdio_init.part.0+0x38>)
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	4620      	mov	r0, r4
 8007e44:	2200      	movs	r2, #0
 8007e46:	2104      	movs	r1, #4
 8007e48:	f7ff ff94 	bl	8007d74 <std>
 8007e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e50:	2201      	movs	r2, #1
 8007e52:	2109      	movs	r1, #9
 8007e54:	f7ff ff8e 	bl	8007d74 <std>
 8007e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e62:	2112      	movs	r1, #18
 8007e64:	f7ff bf86 	b.w	8007d74 <std>
 8007e68:	200006b8 	.word	0x200006b8
 8007e6c:	20000580 	.word	0x20000580
 8007e70:	08007de1 	.word	0x08007de1

08007e74 <__sfp_lock_acquire>:
 8007e74:	4801      	ldr	r0, [pc, #4]	@ (8007e7c <__sfp_lock_acquire+0x8>)
 8007e76:	f000 ba3a 	b.w	80082ee <__retarget_lock_acquire_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	200006c1 	.word	0x200006c1

08007e80 <__sfp_lock_release>:
 8007e80:	4801      	ldr	r0, [pc, #4]	@ (8007e88 <__sfp_lock_release+0x8>)
 8007e82:	f000 ba35 	b.w	80082f0 <__retarget_lock_release_recursive>
 8007e86:	bf00      	nop
 8007e88:	200006c1 	.word	0x200006c1

08007e8c <__sinit>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	4604      	mov	r4, r0
 8007e90:	f7ff fff0 	bl	8007e74 <__sfp_lock_acquire>
 8007e94:	6a23      	ldr	r3, [r4, #32]
 8007e96:	b11b      	cbz	r3, 8007ea0 <__sinit+0x14>
 8007e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e9c:	f7ff bff0 	b.w	8007e80 <__sfp_lock_release>
 8007ea0:	4b04      	ldr	r3, [pc, #16]	@ (8007eb4 <__sinit+0x28>)
 8007ea2:	6223      	str	r3, [r4, #32]
 8007ea4:	4b04      	ldr	r3, [pc, #16]	@ (8007eb8 <__sinit+0x2c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1f5      	bne.n	8007e98 <__sinit+0xc>
 8007eac:	f7ff ffc4 	bl	8007e38 <global_stdio_init.part.0>
 8007eb0:	e7f2      	b.n	8007e98 <__sinit+0xc>
 8007eb2:	bf00      	nop
 8007eb4:	08007df9 	.word	0x08007df9
 8007eb8:	200006b8 	.word	0x200006b8

08007ebc <_fwalk_sglue>:
 8007ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	4688      	mov	r8, r1
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	2600      	movs	r6, #0
 8007ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8007ed0:	d505      	bpl.n	8007ede <_fwalk_sglue+0x22>
 8007ed2:	6824      	ldr	r4, [r4, #0]
 8007ed4:	2c00      	cmp	r4, #0
 8007ed6:	d1f7      	bne.n	8007ec8 <_fwalk_sglue+0xc>
 8007ed8:	4630      	mov	r0, r6
 8007eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ede:	89ab      	ldrh	r3, [r5, #12]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d907      	bls.n	8007ef4 <_fwalk_sglue+0x38>
 8007ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	d003      	beq.n	8007ef4 <_fwalk_sglue+0x38>
 8007eec:	4629      	mov	r1, r5
 8007eee:	4638      	mov	r0, r7
 8007ef0:	47c0      	blx	r8
 8007ef2:	4306      	orrs	r6, r0
 8007ef4:	3568      	adds	r5, #104	@ 0x68
 8007ef6:	e7e9      	b.n	8007ecc <_fwalk_sglue+0x10>

08007ef8 <iprintf>:
 8007ef8:	b40f      	push	{r0, r1, r2, r3}
 8007efa:	b507      	push	{r0, r1, r2, lr}
 8007efc:	4906      	ldr	r1, [pc, #24]	@ (8007f18 <iprintf+0x20>)
 8007efe:	ab04      	add	r3, sp, #16
 8007f00:	6808      	ldr	r0, [r1, #0]
 8007f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f06:	6881      	ldr	r1, [r0, #8]
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	f001 fe49 	bl	8009ba0 <_vfiprintf_r>
 8007f0e:	b003      	add	sp, #12
 8007f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f14:	b004      	add	sp, #16
 8007f16:	4770      	bx	lr
 8007f18:	20000018 	.word	0x20000018

08007f1c <_puts_r>:
 8007f1c:	6a03      	ldr	r3, [r0, #32]
 8007f1e:	b570      	push	{r4, r5, r6, lr}
 8007f20:	6884      	ldr	r4, [r0, #8]
 8007f22:	4605      	mov	r5, r0
 8007f24:	460e      	mov	r6, r1
 8007f26:	b90b      	cbnz	r3, 8007f2c <_puts_r+0x10>
 8007f28:	f7ff ffb0 	bl	8007e8c <__sinit>
 8007f2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f2e:	07db      	lsls	r3, r3, #31
 8007f30:	d405      	bmi.n	8007f3e <_puts_r+0x22>
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	0598      	lsls	r0, r3, #22
 8007f36:	d402      	bmi.n	8007f3e <_puts_r+0x22>
 8007f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f3a:	f000 f9d8 	bl	80082ee <__retarget_lock_acquire_recursive>
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	0719      	lsls	r1, r3, #28
 8007f42:	d502      	bpl.n	8007f4a <_puts_r+0x2e>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d135      	bne.n	8007fb6 <_puts_r+0x9a>
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f000 f8fb 	bl	8008148 <__swsetup_r>
 8007f52:	b380      	cbz	r0, 8007fb6 <_puts_r+0x9a>
 8007f54:	f04f 35ff 	mov.w	r5, #4294967295
 8007f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f5a:	07da      	lsls	r2, r3, #31
 8007f5c:	d405      	bmi.n	8007f6a <_puts_r+0x4e>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	059b      	lsls	r3, r3, #22
 8007f62:	d402      	bmi.n	8007f6a <_puts_r+0x4e>
 8007f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f66:	f000 f9c3 	bl	80082f0 <__retarget_lock_release_recursive>
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	bd70      	pop	{r4, r5, r6, pc}
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	da04      	bge.n	8007f7c <_puts_r+0x60>
 8007f72:	69a2      	ldr	r2, [r4, #24]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	dc17      	bgt.n	8007fa8 <_puts_r+0x8c>
 8007f78:	290a      	cmp	r1, #10
 8007f7a:	d015      	beq.n	8007fa8 <_puts_r+0x8c>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	6022      	str	r2, [r4, #0]
 8007f82:	7019      	strb	r1, [r3, #0]
 8007f84:	68a3      	ldr	r3, [r4, #8]
 8007f86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	60a3      	str	r3, [r4, #8]
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d1ed      	bne.n	8007f6e <_puts_r+0x52>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	da11      	bge.n	8007fba <_puts_r+0x9e>
 8007f96:	4622      	mov	r2, r4
 8007f98:	210a      	movs	r1, #10
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 f895 	bl	80080ca <__swbuf_r>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d0d7      	beq.n	8007f54 <_puts_r+0x38>
 8007fa4:	250a      	movs	r5, #10
 8007fa6:	e7d7      	b.n	8007f58 <_puts_r+0x3c>
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4628      	mov	r0, r5
 8007fac:	f000 f88d 	bl	80080ca <__swbuf_r>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d1e7      	bne.n	8007f84 <_puts_r+0x68>
 8007fb4:	e7ce      	b.n	8007f54 <_puts_r+0x38>
 8007fb6:	3e01      	subs	r6, #1
 8007fb8:	e7e4      	b.n	8007f84 <_puts_r+0x68>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	6022      	str	r2, [r4, #0]
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	701a      	strb	r2, [r3, #0]
 8007fc4:	e7ee      	b.n	8007fa4 <_puts_r+0x88>
	...

08007fc8 <puts>:
 8007fc8:	4b02      	ldr	r3, [pc, #8]	@ (8007fd4 <puts+0xc>)
 8007fca:	4601      	mov	r1, r0
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	f7ff bfa5 	b.w	8007f1c <_puts_r>
 8007fd2:	bf00      	nop
 8007fd4:	20000018 	.word	0x20000018

08007fd8 <sniprintf>:
 8007fd8:	b40c      	push	{r2, r3}
 8007fda:	b530      	push	{r4, r5, lr}
 8007fdc:	4b18      	ldr	r3, [pc, #96]	@ (8008040 <sniprintf+0x68>)
 8007fde:	1e0c      	subs	r4, r1, #0
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	b09d      	sub	sp, #116	@ 0x74
 8007fe4:	da08      	bge.n	8007ff8 <sniprintf+0x20>
 8007fe6:	238b      	movs	r3, #139	@ 0x8b
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	f04f 30ff 	mov.w	r0, #4294967295
 8007fee:	b01d      	add	sp, #116	@ 0x74
 8007ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ff4:	b002      	add	sp, #8
 8007ff6:	4770      	bx	lr
 8007ff8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008000:	f04f 0300 	mov.w	r3, #0
 8008004:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008006:	bf14      	ite	ne
 8008008:	f104 33ff 	addne.w	r3, r4, #4294967295
 800800c:	4623      	moveq	r3, r4
 800800e:	9304      	str	r3, [sp, #16]
 8008010:	9307      	str	r3, [sp, #28]
 8008012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008016:	9002      	str	r0, [sp, #8]
 8008018:	9006      	str	r0, [sp, #24]
 800801a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800801e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008020:	ab21      	add	r3, sp, #132	@ 0x84
 8008022:	a902      	add	r1, sp, #8
 8008024:	4628      	mov	r0, r5
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	f001 fc94 	bl	8009954 <_svfiprintf_r>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	bfbc      	itt	lt
 8008030:	238b      	movlt	r3, #139	@ 0x8b
 8008032:	602b      	strlt	r3, [r5, #0]
 8008034:	2c00      	cmp	r4, #0
 8008036:	d0da      	beq.n	8007fee <sniprintf+0x16>
 8008038:	9b02      	ldr	r3, [sp, #8]
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e7d6      	b.n	8007fee <sniprintf+0x16>
 8008040:	20000018 	.word	0x20000018

08008044 <__sread>:
 8008044:	b510      	push	{r4, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804c:	f000 f900 	bl	8008250 <_read_r>
 8008050:	2800      	cmp	r0, #0
 8008052:	bfab      	itete	ge
 8008054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008056:	89a3      	ldrhlt	r3, [r4, #12]
 8008058:	181b      	addge	r3, r3, r0
 800805a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800805e:	bfac      	ite	ge
 8008060:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008062:	81a3      	strhlt	r3, [r4, #12]
 8008064:	bd10      	pop	{r4, pc}

08008066 <__swrite>:
 8008066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806a:	461f      	mov	r7, r3
 800806c:	898b      	ldrh	r3, [r1, #12]
 800806e:	05db      	lsls	r3, r3, #23
 8008070:	4605      	mov	r5, r0
 8008072:	460c      	mov	r4, r1
 8008074:	4616      	mov	r6, r2
 8008076:	d505      	bpl.n	8008084 <__swrite+0x1e>
 8008078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807c:	2302      	movs	r3, #2
 800807e:	2200      	movs	r2, #0
 8008080:	f000 f8d4 	bl	800822c <_lseek_r>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800808a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	4632      	mov	r2, r6
 8008092:	463b      	mov	r3, r7
 8008094:	4628      	mov	r0, r5
 8008096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	f000 b8eb 	b.w	8008274 <_write_r>

0800809e <__sseek>:
 800809e:	b510      	push	{r4, lr}
 80080a0:	460c      	mov	r4, r1
 80080a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a6:	f000 f8c1 	bl	800822c <_lseek_r>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	bf15      	itete	ne
 80080b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080ba:	81a3      	strheq	r3, [r4, #12]
 80080bc:	bf18      	it	ne
 80080be:	81a3      	strhne	r3, [r4, #12]
 80080c0:	bd10      	pop	{r4, pc}

080080c2 <__sclose>:
 80080c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c6:	f000 b8a1 	b.w	800820c <_close_r>

080080ca <__swbuf_r>:
 80080ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080cc:	460e      	mov	r6, r1
 80080ce:	4614      	mov	r4, r2
 80080d0:	4605      	mov	r5, r0
 80080d2:	b118      	cbz	r0, 80080dc <__swbuf_r+0x12>
 80080d4:	6a03      	ldr	r3, [r0, #32]
 80080d6:	b90b      	cbnz	r3, 80080dc <__swbuf_r+0x12>
 80080d8:	f7ff fed8 	bl	8007e8c <__sinit>
 80080dc:	69a3      	ldr	r3, [r4, #24]
 80080de:	60a3      	str	r3, [r4, #8]
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	071a      	lsls	r2, r3, #28
 80080e4:	d501      	bpl.n	80080ea <__swbuf_r+0x20>
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	b943      	cbnz	r3, 80080fc <__swbuf_r+0x32>
 80080ea:	4621      	mov	r1, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 f82b 	bl	8008148 <__swsetup_r>
 80080f2:	b118      	cbz	r0, 80080fc <__swbuf_r+0x32>
 80080f4:	f04f 37ff 	mov.w	r7, #4294967295
 80080f8:	4638      	mov	r0, r7
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	6922      	ldr	r2, [r4, #16]
 8008100:	1a98      	subs	r0, r3, r2
 8008102:	6963      	ldr	r3, [r4, #20]
 8008104:	b2f6      	uxtb	r6, r6
 8008106:	4283      	cmp	r3, r0
 8008108:	4637      	mov	r7, r6
 800810a:	dc05      	bgt.n	8008118 <__swbuf_r+0x4e>
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f001 fee2 	bl	8009ed8 <_fflush_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	d1ed      	bne.n	80080f4 <__swbuf_r+0x2a>
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	3b01      	subs	r3, #1
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	6022      	str	r2, [r4, #0]
 8008124:	701e      	strb	r6, [r3, #0]
 8008126:	6962      	ldr	r2, [r4, #20]
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	429a      	cmp	r2, r3
 800812c:	d004      	beq.n	8008138 <__swbuf_r+0x6e>
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	07db      	lsls	r3, r3, #31
 8008132:	d5e1      	bpl.n	80080f8 <__swbuf_r+0x2e>
 8008134:	2e0a      	cmp	r6, #10
 8008136:	d1df      	bne.n	80080f8 <__swbuf_r+0x2e>
 8008138:	4621      	mov	r1, r4
 800813a:	4628      	mov	r0, r5
 800813c:	f001 fecc 	bl	8009ed8 <_fflush_r>
 8008140:	2800      	cmp	r0, #0
 8008142:	d0d9      	beq.n	80080f8 <__swbuf_r+0x2e>
 8008144:	e7d6      	b.n	80080f4 <__swbuf_r+0x2a>
	...

08008148 <__swsetup_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4b29      	ldr	r3, [pc, #164]	@ (80081f0 <__swsetup_r+0xa8>)
 800814c:	4605      	mov	r5, r0
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	460c      	mov	r4, r1
 8008152:	b118      	cbz	r0, 800815c <__swsetup_r+0x14>
 8008154:	6a03      	ldr	r3, [r0, #32]
 8008156:	b90b      	cbnz	r3, 800815c <__swsetup_r+0x14>
 8008158:	f7ff fe98 	bl	8007e8c <__sinit>
 800815c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008160:	0719      	lsls	r1, r3, #28
 8008162:	d422      	bmi.n	80081aa <__swsetup_r+0x62>
 8008164:	06da      	lsls	r2, r3, #27
 8008166:	d407      	bmi.n	8008178 <__swsetup_r+0x30>
 8008168:	2209      	movs	r2, #9
 800816a:	602a      	str	r2, [r5, #0]
 800816c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	f04f 30ff 	mov.w	r0, #4294967295
 8008176:	e033      	b.n	80081e0 <__swsetup_r+0x98>
 8008178:	0758      	lsls	r0, r3, #29
 800817a:	d512      	bpl.n	80081a2 <__swsetup_r+0x5a>
 800817c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800817e:	b141      	cbz	r1, 8008192 <__swsetup_r+0x4a>
 8008180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008184:	4299      	cmp	r1, r3
 8008186:	d002      	beq.n	800818e <__swsetup_r+0x46>
 8008188:	4628      	mov	r0, r5
 800818a:	f000 ff0d 	bl	8008fa8 <_free_r>
 800818e:	2300      	movs	r3, #0
 8008190:	6363      	str	r3, [r4, #52]	@ 0x34
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	2300      	movs	r3, #0
 800819c:	6063      	str	r3, [r4, #4]
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f043 0308 	orr.w	r3, r3, #8
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	b94b      	cbnz	r3, 80081c2 <__swsetup_r+0x7a>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081b8:	d003      	beq.n	80081c2 <__swsetup_r+0x7a>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4628      	mov	r0, r5
 80081be:	f001 fed9 	bl	8009f74 <__smakebuf_r>
 80081c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c6:	f013 0201 	ands.w	r2, r3, #1
 80081ca:	d00a      	beq.n	80081e2 <__swsetup_r+0x9a>
 80081cc:	2200      	movs	r2, #0
 80081ce:	60a2      	str	r2, [r4, #8]
 80081d0:	6962      	ldr	r2, [r4, #20]
 80081d2:	4252      	negs	r2, r2
 80081d4:	61a2      	str	r2, [r4, #24]
 80081d6:	6922      	ldr	r2, [r4, #16]
 80081d8:	b942      	cbnz	r2, 80081ec <__swsetup_r+0xa4>
 80081da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081de:	d1c5      	bne.n	800816c <__swsetup_r+0x24>
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	0799      	lsls	r1, r3, #30
 80081e4:	bf58      	it	pl
 80081e6:	6962      	ldrpl	r2, [r4, #20]
 80081e8:	60a2      	str	r2, [r4, #8]
 80081ea:	e7f4      	b.n	80081d6 <__swsetup_r+0x8e>
 80081ec:	2000      	movs	r0, #0
 80081ee:	e7f7      	b.n	80081e0 <__swsetup_r+0x98>
 80081f0:	20000018 	.word	0x20000018

080081f4 <memset>:
 80081f4:	4402      	add	r2, r0
 80081f6:	4603      	mov	r3, r0
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d100      	bne.n	80081fe <memset+0xa>
 80081fc:	4770      	bx	lr
 80081fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008202:	e7f9      	b.n	80081f8 <memset+0x4>

08008204 <_localeconv_r>:
 8008204:	4800      	ldr	r0, [pc, #0]	@ (8008208 <_localeconv_r+0x4>)
 8008206:	4770      	bx	lr
 8008208:	20000158 	.word	0x20000158

0800820c <_close_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4d06      	ldr	r5, [pc, #24]	@ (8008228 <_close_r+0x1c>)
 8008210:	2300      	movs	r3, #0
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	602b      	str	r3, [r5, #0]
 8008218:	f7f9 fe62 	bl	8001ee0 <_close>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_close_r+0x1a>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_close_r+0x1a>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	200006bc 	.word	0x200006bc

0800822c <_lseek_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d07      	ldr	r5, [pc, #28]	@ (800824c <_lseek_r+0x20>)
 8008230:	4604      	mov	r4, r0
 8008232:	4608      	mov	r0, r1
 8008234:	4611      	mov	r1, r2
 8008236:	2200      	movs	r2, #0
 8008238:	602a      	str	r2, [r5, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	f7f9 fe77 	bl	8001f2e <_lseek>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_lseek_r+0x1e>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_lseek_r+0x1e>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	200006bc 	.word	0x200006bc

08008250 <_read_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	@ (8008270 <_read_r+0x20>)
 8008254:	4604      	mov	r4, r0
 8008256:	4608      	mov	r0, r1
 8008258:	4611      	mov	r1, r2
 800825a:	2200      	movs	r2, #0
 800825c:	602a      	str	r2, [r5, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	f7f9 fe05 	bl	8001e6e <_read>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_read_r+0x1e>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_read_r+0x1e>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	200006bc 	.word	0x200006bc

08008274 <_write_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d07      	ldr	r5, [pc, #28]	@ (8008294 <_write_r+0x20>)
 8008278:	4604      	mov	r4, r0
 800827a:	4608      	mov	r0, r1
 800827c:	4611      	mov	r1, r2
 800827e:	2200      	movs	r2, #0
 8008280:	602a      	str	r2, [r5, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	f7f9 fe10 	bl	8001ea8 <_write>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_write_r+0x1e>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_write_r+0x1e>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	200006bc 	.word	0x200006bc

08008298 <__errno>:
 8008298:	4b01      	ldr	r3, [pc, #4]	@ (80082a0 <__errno+0x8>)
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000018 	.word	0x20000018

080082a4 <__libc_init_array>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	4d0d      	ldr	r5, [pc, #52]	@ (80082dc <__libc_init_array+0x38>)
 80082a8:	4c0d      	ldr	r4, [pc, #52]	@ (80082e0 <__libc_init_array+0x3c>)
 80082aa:	1b64      	subs	r4, r4, r5
 80082ac:	10a4      	asrs	r4, r4, #2
 80082ae:	2600      	movs	r6, #0
 80082b0:	42a6      	cmp	r6, r4
 80082b2:	d109      	bne.n	80082c8 <__libc_init_array+0x24>
 80082b4:	4d0b      	ldr	r5, [pc, #44]	@ (80082e4 <__libc_init_array+0x40>)
 80082b6:	4c0c      	ldr	r4, [pc, #48]	@ (80082e8 <__libc_init_array+0x44>)
 80082b8:	f001 ffd8 	bl	800a26c <_init>
 80082bc:	1b64      	subs	r4, r4, r5
 80082be:	10a4      	asrs	r4, r4, #2
 80082c0:	2600      	movs	r6, #0
 80082c2:	42a6      	cmp	r6, r4
 80082c4:	d105      	bne.n	80082d2 <__libc_init_array+0x2e>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082cc:	4798      	blx	r3
 80082ce:	3601      	adds	r6, #1
 80082d0:	e7ee      	b.n	80082b0 <__libc_init_array+0xc>
 80082d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d6:	4798      	blx	r3
 80082d8:	3601      	adds	r6, #1
 80082da:	e7f2      	b.n	80082c2 <__libc_init_array+0x1e>
 80082dc:	0800ae9c 	.word	0x0800ae9c
 80082e0:	0800ae9c 	.word	0x0800ae9c
 80082e4:	0800ae9c 	.word	0x0800ae9c
 80082e8:	0800aea0 	.word	0x0800aea0

080082ec <__retarget_lock_init_recursive>:
 80082ec:	4770      	bx	lr

080082ee <__retarget_lock_acquire_recursive>:
 80082ee:	4770      	bx	lr

080082f0 <__retarget_lock_release_recursive>:
 80082f0:	4770      	bx	lr

080082f2 <quorem>:
 80082f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f6:	6903      	ldr	r3, [r0, #16]
 80082f8:	690c      	ldr	r4, [r1, #16]
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	4607      	mov	r7, r0
 80082fe:	db7e      	blt.n	80083fe <quorem+0x10c>
 8008300:	3c01      	subs	r4, #1
 8008302:	f101 0814 	add.w	r8, r1, #20
 8008306:	00a3      	lsls	r3, r4, #2
 8008308:	f100 0514 	add.w	r5, r0, #20
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800831c:	3301      	adds	r3, #1
 800831e:	429a      	cmp	r2, r3
 8008320:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008324:	fbb2 f6f3 	udiv	r6, r2, r3
 8008328:	d32e      	bcc.n	8008388 <quorem+0x96>
 800832a:	f04f 0a00 	mov.w	sl, #0
 800832e:	46c4      	mov	ip, r8
 8008330:	46ae      	mov	lr, r5
 8008332:	46d3      	mov	fp, sl
 8008334:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008338:	b298      	uxth	r0, r3
 800833a:	fb06 a000 	mla	r0, r6, r0, sl
 800833e:	0c02      	lsrs	r2, r0, #16
 8008340:	0c1b      	lsrs	r3, r3, #16
 8008342:	fb06 2303 	mla	r3, r6, r3, r2
 8008346:	f8de 2000 	ldr.w	r2, [lr]
 800834a:	b280      	uxth	r0, r0
 800834c:	b292      	uxth	r2, r2
 800834e:	1a12      	subs	r2, r2, r0
 8008350:	445a      	add	r2, fp
 8008352:	f8de 0000 	ldr.w	r0, [lr]
 8008356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800835a:	b29b      	uxth	r3, r3
 800835c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008360:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008364:	b292      	uxth	r2, r2
 8008366:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800836a:	45e1      	cmp	r9, ip
 800836c:	f84e 2b04 	str.w	r2, [lr], #4
 8008370:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008374:	d2de      	bcs.n	8008334 <quorem+0x42>
 8008376:	9b00      	ldr	r3, [sp, #0]
 8008378:	58eb      	ldr	r3, [r5, r3]
 800837a:	b92b      	cbnz	r3, 8008388 <quorem+0x96>
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	3b04      	subs	r3, #4
 8008380:	429d      	cmp	r5, r3
 8008382:	461a      	mov	r2, r3
 8008384:	d32f      	bcc.n	80083e6 <quorem+0xf4>
 8008386:	613c      	str	r4, [r7, #16]
 8008388:	4638      	mov	r0, r7
 800838a:	f001 f97f 	bl	800968c <__mcmp>
 800838e:	2800      	cmp	r0, #0
 8008390:	db25      	blt.n	80083de <quorem+0xec>
 8008392:	4629      	mov	r1, r5
 8008394:	2000      	movs	r0, #0
 8008396:	f858 2b04 	ldr.w	r2, [r8], #4
 800839a:	f8d1 c000 	ldr.w	ip, [r1]
 800839e:	fa1f fe82 	uxth.w	lr, r2
 80083a2:	fa1f f38c 	uxth.w	r3, ip
 80083a6:	eba3 030e 	sub.w	r3, r3, lr
 80083aa:	4403      	add	r3, r0
 80083ac:	0c12      	lsrs	r2, r2, #16
 80083ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80083b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083bc:	45c1      	cmp	r9, r8
 80083be:	f841 3b04 	str.w	r3, [r1], #4
 80083c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083c6:	d2e6      	bcs.n	8008396 <quorem+0xa4>
 80083c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083d0:	b922      	cbnz	r2, 80083dc <quorem+0xea>
 80083d2:	3b04      	subs	r3, #4
 80083d4:	429d      	cmp	r5, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	d30b      	bcc.n	80083f2 <quorem+0x100>
 80083da:	613c      	str	r4, [r7, #16]
 80083dc:	3601      	adds	r6, #1
 80083de:	4630      	mov	r0, r6
 80083e0:	b003      	add	sp, #12
 80083e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e6:	6812      	ldr	r2, [r2, #0]
 80083e8:	3b04      	subs	r3, #4
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	d1cb      	bne.n	8008386 <quorem+0x94>
 80083ee:	3c01      	subs	r4, #1
 80083f0:	e7c6      	b.n	8008380 <quorem+0x8e>
 80083f2:	6812      	ldr	r2, [r2, #0]
 80083f4:	3b04      	subs	r3, #4
 80083f6:	2a00      	cmp	r2, #0
 80083f8:	d1ef      	bne.n	80083da <quorem+0xe8>
 80083fa:	3c01      	subs	r4, #1
 80083fc:	e7ea      	b.n	80083d4 <quorem+0xe2>
 80083fe:	2000      	movs	r0, #0
 8008400:	e7ee      	b.n	80083e0 <quorem+0xee>
 8008402:	0000      	movs	r0, r0
 8008404:	0000      	movs	r0, r0
	...

08008408 <_dtoa_r>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	69c7      	ldr	r7, [r0, #28]
 800840e:	b097      	sub	sp, #92	@ 0x5c
 8008410:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008414:	ec55 4b10 	vmov	r4, r5, d0
 8008418:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800841a:	9107      	str	r1, [sp, #28]
 800841c:	4681      	mov	r9, r0
 800841e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008420:	9311      	str	r3, [sp, #68]	@ 0x44
 8008422:	b97f      	cbnz	r7, 8008444 <_dtoa_r+0x3c>
 8008424:	2010      	movs	r0, #16
 8008426:	f000 fe09 	bl	800903c <malloc>
 800842a:	4602      	mov	r2, r0
 800842c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008430:	b920      	cbnz	r0, 800843c <_dtoa_r+0x34>
 8008432:	4ba9      	ldr	r3, [pc, #676]	@ (80086d8 <_dtoa_r+0x2d0>)
 8008434:	21ef      	movs	r1, #239	@ 0xef
 8008436:	48a9      	ldr	r0, [pc, #676]	@ (80086dc <_dtoa_r+0x2d4>)
 8008438:	f001 fe32 	bl	800a0a0 <__assert_func>
 800843c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008440:	6007      	str	r7, [r0, #0]
 8008442:	60c7      	str	r7, [r0, #12]
 8008444:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008448:	6819      	ldr	r1, [r3, #0]
 800844a:	b159      	cbz	r1, 8008464 <_dtoa_r+0x5c>
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	604a      	str	r2, [r1, #4]
 8008450:	2301      	movs	r3, #1
 8008452:	4093      	lsls	r3, r2
 8008454:	608b      	str	r3, [r1, #8]
 8008456:	4648      	mov	r0, r9
 8008458:	f000 fee6 	bl	8009228 <_Bfree>
 800845c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	1e2b      	subs	r3, r5, #0
 8008466:	bfb9      	ittee	lt
 8008468:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800846c:	9305      	strlt	r3, [sp, #20]
 800846e:	2300      	movge	r3, #0
 8008470:	6033      	strge	r3, [r6, #0]
 8008472:	9f05      	ldr	r7, [sp, #20]
 8008474:	4b9a      	ldr	r3, [pc, #616]	@ (80086e0 <_dtoa_r+0x2d8>)
 8008476:	bfbc      	itt	lt
 8008478:	2201      	movlt	r2, #1
 800847a:	6032      	strlt	r2, [r6, #0]
 800847c:	43bb      	bics	r3, r7
 800847e:	d112      	bne.n	80084a6 <_dtoa_r+0x9e>
 8008480:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008482:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800848c:	4323      	orrs	r3, r4
 800848e:	f000 855a 	beq.w	8008f46 <_dtoa_r+0xb3e>
 8008492:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008494:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80086f4 <_dtoa_r+0x2ec>
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 855c 	beq.w	8008f56 <_dtoa_r+0xb4e>
 800849e:	f10a 0303 	add.w	r3, sl, #3
 80084a2:	f000 bd56 	b.w	8008f52 <_dtoa_r+0xb4a>
 80084a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80084aa:	2200      	movs	r2, #0
 80084ac:	ec51 0b17 	vmov	r0, r1, d7
 80084b0:	2300      	movs	r3, #0
 80084b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80084b6:	f7f8 fb2f 	bl	8000b18 <__aeabi_dcmpeq>
 80084ba:	4680      	mov	r8, r0
 80084bc:	b158      	cbz	r0, 80084d6 <_dtoa_r+0xce>
 80084be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80084c0:	2301      	movs	r3, #1
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084c6:	b113      	cbz	r3, 80084ce <_dtoa_r+0xc6>
 80084c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80084ca:	4b86      	ldr	r3, [pc, #536]	@ (80086e4 <_dtoa_r+0x2dc>)
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80086f8 <_dtoa_r+0x2f0>
 80084d2:	f000 bd40 	b.w	8008f56 <_dtoa_r+0xb4e>
 80084d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80084da:	aa14      	add	r2, sp, #80	@ 0x50
 80084dc:	a915      	add	r1, sp, #84	@ 0x54
 80084de:	4648      	mov	r0, r9
 80084e0:	f001 f984 	bl	80097ec <__d2b>
 80084e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80084e8:	9002      	str	r0, [sp, #8]
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	d078      	beq.n	80085e0 <_dtoa_r+0x1d8>
 80084ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80084f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008500:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008504:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008508:	4619      	mov	r1, r3
 800850a:	2200      	movs	r2, #0
 800850c:	4b76      	ldr	r3, [pc, #472]	@ (80086e8 <_dtoa_r+0x2e0>)
 800850e:	f7f7 fee3 	bl	80002d8 <__aeabi_dsub>
 8008512:	a36b      	add	r3, pc, #428	@ (adr r3, 80086c0 <_dtoa_r+0x2b8>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f7f8 f896 	bl	8000648 <__aeabi_dmul>
 800851c:	a36a      	add	r3, pc, #424	@ (adr r3, 80086c8 <_dtoa_r+0x2c0>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f7f7 fedb 	bl	80002dc <__adddf3>
 8008526:	4604      	mov	r4, r0
 8008528:	4630      	mov	r0, r6
 800852a:	460d      	mov	r5, r1
 800852c:	f7f8 f822 	bl	8000574 <__aeabi_i2d>
 8008530:	a367      	add	r3, pc, #412	@ (adr r3, 80086d0 <_dtoa_r+0x2c8>)
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f7f8 f887 	bl	8000648 <__aeabi_dmul>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4620      	mov	r0, r4
 8008540:	4629      	mov	r1, r5
 8008542:	f7f7 fecb 	bl	80002dc <__adddf3>
 8008546:	4604      	mov	r4, r0
 8008548:	460d      	mov	r5, r1
 800854a:	f7f8 fb2d 	bl	8000ba8 <__aeabi_d2iz>
 800854e:	2200      	movs	r2, #0
 8008550:	4607      	mov	r7, r0
 8008552:	2300      	movs	r3, #0
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f8 fae8 	bl	8000b2c <__aeabi_dcmplt>
 800855c:	b140      	cbz	r0, 8008570 <_dtoa_r+0x168>
 800855e:	4638      	mov	r0, r7
 8008560:	f7f8 f808 	bl	8000574 <__aeabi_i2d>
 8008564:	4622      	mov	r2, r4
 8008566:	462b      	mov	r3, r5
 8008568:	f7f8 fad6 	bl	8000b18 <__aeabi_dcmpeq>
 800856c:	b900      	cbnz	r0, 8008570 <_dtoa_r+0x168>
 800856e:	3f01      	subs	r7, #1
 8008570:	2f16      	cmp	r7, #22
 8008572:	d852      	bhi.n	800861a <_dtoa_r+0x212>
 8008574:	4b5d      	ldr	r3, [pc, #372]	@ (80086ec <_dtoa_r+0x2e4>)
 8008576:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008582:	f7f8 fad3 	bl	8000b2c <__aeabi_dcmplt>
 8008586:	2800      	cmp	r0, #0
 8008588:	d049      	beq.n	800861e <_dtoa_r+0x216>
 800858a:	3f01      	subs	r7, #1
 800858c:	2300      	movs	r3, #0
 800858e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008590:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008592:	1b9b      	subs	r3, r3, r6
 8008594:	1e5a      	subs	r2, r3, #1
 8008596:	bf45      	ittet	mi
 8008598:	f1c3 0301 	rsbmi	r3, r3, #1
 800859c:	9300      	strmi	r3, [sp, #0]
 800859e:	2300      	movpl	r3, #0
 80085a0:	2300      	movmi	r3, #0
 80085a2:	9206      	str	r2, [sp, #24]
 80085a4:	bf54      	ite	pl
 80085a6:	9300      	strpl	r3, [sp, #0]
 80085a8:	9306      	strmi	r3, [sp, #24]
 80085aa:	2f00      	cmp	r7, #0
 80085ac:	db39      	blt.n	8008622 <_dtoa_r+0x21a>
 80085ae:	9b06      	ldr	r3, [sp, #24]
 80085b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80085b2:	443b      	add	r3, r7
 80085b4:	9306      	str	r3, [sp, #24]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9308      	str	r3, [sp, #32]
 80085ba:	9b07      	ldr	r3, [sp, #28]
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d863      	bhi.n	8008688 <_dtoa_r+0x280>
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	bfc4      	itt	gt
 80085c4:	3b04      	subgt	r3, #4
 80085c6:	9307      	strgt	r3, [sp, #28]
 80085c8:	9b07      	ldr	r3, [sp, #28]
 80085ca:	f1a3 0302 	sub.w	r3, r3, #2
 80085ce:	bfcc      	ite	gt
 80085d0:	2400      	movgt	r4, #0
 80085d2:	2401      	movle	r4, #1
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d863      	bhi.n	80086a0 <_dtoa_r+0x298>
 80085d8:	e8df f003 	tbb	[pc, r3]
 80085dc:	2b375452 	.word	0x2b375452
 80085e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80085e4:	441e      	add	r6, r3
 80085e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	bfc1      	itttt	gt
 80085ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80085f2:	409f      	lslgt	r7, r3
 80085f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80085f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80085fc:	bfd6      	itet	le
 80085fe:	f1c3 0320 	rsble	r3, r3, #32
 8008602:	ea47 0003 	orrgt.w	r0, r7, r3
 8008606:	fa04 f003 	lslle.w	r0, r4, r3
 800860a:	f7f7 ffa3 	bl	8000554 <__aeabi_ui2d>
 800860e:	2201      	movs	r2, #1
 8008610:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008614:	3e01      	subs	r6, #1
 8008616:	9212      	str	r2, [sp, #72]	@ 0x48
 8008618:	e776      	b.n	8008508 <_dtoa_r+0x100>
 800861a:	2301      	movs	r3, #1
 800861c:	e7b7      	b.n	800858e <_dtoa_r+0x186>
 800861e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008620:	e7b6      	b.n	8008590 <_dtoa_r+0x188>
 8008622:	9b00      	ldr	r3, [sp, #0]
 8008624:	1bdb      	subs	r3, r3, r7
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	427b      	negs	r3, r7
 800862a:	9308      	str	r3, [sp, #32]
 800862c:	2300      	movs	r3, #0
 800862e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008630:	e7c3      	b.n	80085ba <_dtoa_r+0x1b2>
 8008632:	2301      	movs	r3, #1
 8008634:	9309      	str	r3, [sp, #36]	@ 0x24
 8008636:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008638:	eb07 0b03 	add.w	fp, r7, r3
 800863c:	f10b 0301 	add.w	r3, fp, #1
 8008640:	2b01      	cmp	r3, #1
 8008642:	9303      	str	r3, [sp, #12]
 8008644:	bfb8      	it	lt
 8008646:	2301      	movlt	r3, #1
 8008648:	e006      	b.n	8008658 <_dtoa_r+0x250>
 800864a:	2301      	movs	r3, #1
 800864c:	9309      	str	r3, [sp, #36]	@ 0x24
 800864e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008650:	2b00      	cmp	r3, #0
 8008652:	dd28      	ble.n	80086a6 <_dtoa_r+0x29e>
 8008654:	469b      	mov	fp, r3
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800865c:	2100      	movs	r1, #0
 800865e:	2204      	movs	r2, #4
 8008660:	f102 0514 	add.w	r5, r2, #20
 8008664:	429d      	cmp	r5, r3
 8008666:	d926      	bls.n	80086b6 <_dtoa_r+0x2ae>
 8008668:	6041      	str	r1, [r0, #4]
 800866a:	4648      	mov	r0, r9
 800866c:	f000 fd9c 	bl	80091a8 <_Balloc>
 8008670:	4682      	mov	sl, r0
 8008672:	2800      	cmp	r0, #0
 8008674:	d142      	bne.n	80086fc <_dtoa_r+0x2f4>
 8008676:	4b1e      	ldr	r3, [pc, #120]	@ (80086f0 <_dtoa_r+0x2e8>)
 8008678:	4602      	mov	r2, r0
 800867a:	f240 11af 	movw	r1, #431	@ 0x1af
 800867e:	e6da      	b.n	8008436 <_dtoa_r+0x2e>
 8008680:	2300      	movs	r3, #0
 8008682:	e7e3      	b.n	800864c <_dtoa_r+0x244>
 8008684:	2300      	movs	r3, #0
 8008686:	e7d5      	b.n	8008634 <_dtoa_r+0x22c>
 8008688:	2401      	movs	r4, #1
 800868a:	2300      	movs	r3, #0
 800868c:	9307      	str	r3, [sp, #28]
 800868e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008690:	f04f 3bff 	mov.w	fp, #4294967295
 8008694:	2200      	movs	r2, #0
 8008696:	f8cd b00c 	str.w	fp, [sp, #12]
 800869a:	2312      	movs	r3, #18
 800869c:	920c      	str	r2, [sp, #48]	@ 0x30
 800869e:	e7db      	b.n	8008658 <_dtoa_r+0x250>
 80086a0:	2301      	movs	r3, #1
 80086a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086a4:	e7f4      	b.n	8008690 <_dtoa_r+0x288>
 80086a6:	f04f 0b01 	mov.w	fp, #1
 80086aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80086ae:	465b      	mov	r3, fp
 80086b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80086b4:	e7d0      	b.n	8008658 <_dtoa_r+0x250>
 80086b6:	3101      	adds	r1, #1
 80086b8:	0052      	lsls	r2, r2, #1
 80086ba:	e7d1      	b.n	8008660 <_dtoa_r+0x258>
 80086bc:	f3af 8000 	nop.w
 80086c0:	636f4361 	.word	0x636f4361
 80086c4:	3fd287a7 	.word	0x3fd287a7
 80086c8:	8b60c8b3 	.word	0x8b60c8b3
 80086cc:	3fc68a28 	.word	0x3fc68a28
 80086d0:	509f79fb 	.word	0x509f79fb
 80086d4:	3fd34413 	.word	0x3fd34413
 80086d8:	0800ab5d 	.word	0x0800ab5d
 80086dc:	0800ab74 	.word	0x0800ab74
 80086e0:	7ff00000 	.word	0x7ff00000
 80086e4:	0800ab2d 	.word	0x0800ab2d
 80086e8:	3ff80000 	.word	0x3ff80000
 80086ec:	0800acc8 	.word	0x0800acc8
 80086f0:	0800abcc 	.word	0x0800abcc
 80086f4:	0800ab59 	.word	0x0800ab59
 80086f8:	0800ab2c 	.word	0x0800ab2c
 80086fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008700:	6018      	str	r0, [r3, #0]
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	2b0e      	cmp	r3, #14
 8008706:	f200 80a1 	bhi.w	800884c <_dtoa_r+0x444>
 800870a:	2c00      	cmp	r4, #0
 800870c:	f000 809e 	beq.w	800884c <_dtoa_r+0x444>
 8008710:	2f00      	cmp	r7, #0
 8008712:	dd33      	ble.n	800877c <_dtoa_r+0x374>
 8008714:	4b9c      	ldr	r3, [pc, #624]	@ (8008988 <_dtoa_r+0x580>)
 8008716:	f007 020f 	and.w	r2, r7, #15
 800871a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800871e:	ed93 7b00 	vldr	d7, [r3]
 8008722:	05f8      	lsls	r0, r7, #23
 8008724:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008728:	ea4f 1427 	mov.w	r4, r7, asr #4
 800872c:	d516      	bpl.n	800875c <_dtoa_r+0x354>
 800872e:	4b97      	ldr	r3, [pc, #604]	@ (800898c <_dtoa_r+0x584>)
 8008730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008734:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008738:	f7f8 f8b0 	bl	800089c <__aeabi_ddiv>
 800873c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008740:	f004 040f 	and.w	r4, r4, #15
 8008744:	2603      	movs	r6, #3
 8008746:	4d91      	ldr	r5, [pc, #580]	@ (800898c <_dtoa_r+0x584>)
 8008748:	b954      	cbnz	r4, 8008760 <_dtoa_r+0x358>
 800874a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800874e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008752:	f7f8 f8a3 	bl	800089c <__aeabi_ddiv>
 8008756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800875a:	e028      	b.n	80087ae <_dtoa_r+0x3a6>
 800875c:	2602      	movs	r6, #2
 800875e:	e7f2      	b.n	8008746 <_dtoa_r+0x33e>
 8008760:	07e1      	lsls	r1, r4, #31
 8008762:	d508      	bpl.n	8008776 <_dtoa_r+0x36e>
 8008764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008768:	e9d5 2300 	ldrd	r2, r3, [r5]
 800876c:	f7f7 ff6c 	bl	8000648 <__aeabi_dmul>
 8008770:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008774:	3601      	adds	r6, #1
 8008776:	1064      	asrs	r4, r4, #1
 8008778:	3508      	adds	r5, #8
 800877a:	e7e5      	b.n	8008748 <_dtoa_r+0x340>
 800877c:	f000 80af 	beq.w	80088de <_dtoa_r+0x4d6>
 8008780:	427c      	negs	r4, r7
 8008782:	4b81      	ldr	r3, [pc, #516]	@ (8008988 <_dtoa_r+0x580>)
 8008784:	4d81      	ldr	r5, [pc, #516]	@ (800898c <_dtoa_r+0x584>)
 8008786:	f004 020f 	and.w	r2, r4, #15
 800878a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008796:	f7f7 ff57 	bl	8000648 <__aeabi_dmul>
 800879a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800879e:	1124      	asrs	r4, r4, #4
 80087a0:	2300      	movs	r3, #0
 80087a2:	2602      	movs	r6, #2
 80087a4:	2c00      	cmp	r4, #0
 80087a6:	f040 808f 	bne.w	80088c8 <_dtoa_r+0x4c0>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1d3      	bne.n	8008756 <_dtoa_r+0x34e>
 80087ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80087b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8094 	beq.w	80088e2 <_dtoa_r+0x4da>
 80087ba:	4b75      	ldr	r3, [pc, #468]	@ (8008990 <_dtoa_r+0x588>)
 80087bc:	2200      	movs	r2, #0
 80087be:	4620      	mov	r0, r4
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7f8 f9b3 	bl	8000b2c <__aeabi_dcmplt>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	f000 808b 	beq.w	80088e2 <_dtoa_r+0x4da>
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8087 	beq.w	80088e2 <_dtoa_r+0x4da>
 80087d4:	f1bb 0f00 	cmp.w	fp, #0
 80087d8:	dd34      	ble.n	8008844 <_dtoa_r+0x43c>
 80087da:	4620      	mov	r0, r4
 80087dc:	4b6d      	ldr	r3, [pc, #436]	@ (8008994 <_dtoa_r+0x58c>)
 80087de:	2200      	movs	r2, #0
 80087e0:	4629      	mov	r1, r5
 80087e2:	f7f7 ff31 	bl	8000648 <__aeabi_dmul>
 80087e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087ea:	f107 38ff 	add.w	r8, r7, #4294967295
 80087ee:	3601      	adds	r6, #1
 80087f0:	465c      	mov	r4, fp
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7f7 febe 	bl	8000574 <__aeabi_i2d>
 80087f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087fc:	f7f7 ff24 	bl	8000648 <__aeabi_dmul>
 8008800:	4b65      	ldr	r3, [pc, #404]	@ (8008998 <_dtoa_r+0x590>)
 8008802:	2200      	movs	r2, #0
 8008804:	f7f7 fd6a 	bl	80002dc <__adddf3>
 8008808:	4605      	mov	r5, r0
 800880a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800880e:	2c00      	cmp	r4, #0
 8008810:	d16a      	bne.n	80088e8 <_dtoa_r+0x4e0>
 8008812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008816:	4b61      	ldr	r3, [pc, #388]	@ (800899c <_dtoa_r+0x594>)
 8008818:	2200      	movs	r2, #0
 800881a:	f7f7 fd5d 	bl	80002d8 <__aeabi_dsub>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008826:	462a      	mov	r2, r5
 8008828:	4633      	mov	r3, r6
 800882a:	f7f8 f99d 	bl	8000b68 <__aeabi_dcmpgt>
 800882e:	2800      	cmp	r0, #0
 8008830:	f040 8298 	bne.w	8008d64 <_dtoa_r+0x95c>
 8008834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008838:	462a      	mov	r2, r5
 800883a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800883e:	f7f8 f975 	bl	8000b2c <__aeabi_dcmplt>
 8008842:	bb38      	cbnz	r0, 8008894 <_dtoa_r+0x48c>
 8008844:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008848:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800884c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800884e:	2b00      	cmp	r3, #0
 8008850:	f2c0 8157 	blt.w	8008b02 <_dtoa_r+0x6fa>
 8008854:	2f0e      	cmp	r7, #14
 8008856:	f300 8154 	bgt.w	8008b02 <_dtoa_r+0x6fa>
 800885a:	4b4b      	ldr	r3, [pc, #300]	@ (8008988 <_dtoa_r+0x580>)
 800885c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008860:	ed93 7b00 	vldr	d7, [r3]
 8008864:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	ed8d 7b00 	vstr	d7, [sp]
 800886c:	f280 80e5 	bge.w	8008a3a <_dtoa_r+0x632>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f300 80e1 	bgt.w	8008a3a <_dtoa_r+0x632>
 8008878:	d10c      	bne.n	8008894 <_dtoa_r+0x48c>
 800887a:	4b48      	ldr	r3, [pc, #288]	@ (800899c <_dtoa_r+0x594>)
 800887c:	2200      	movs	r2, #0
 800887e:	ec51 0b17 	vmov	r0, r1, d7
 8008882:	f7f7 fee1 	bl	8000648 <__aeabi_dmul>
 8008886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800888a:	f7f8 f963 	bl	8000b54 <__aeabi_dcmpge>
 800888e:	2800      	cmp	r0, #0
 8008890:	f000 8266 	beq.w	8008d60 <_dtoa_r+0x958>
 8008894:	2400      	movs	r4, #0
 8008896:	4625      	mov	r5, r4
 8008898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800889a:	4656      	mov	r6, sl
 800889c:	ea6f 0803 	mvn.w	r8, r3
 80088a0:	2700      	movs	r7, #0
 80088a2:	4621      	mov	r1, r4
 80088a4:	4648      	mov	r0, r9
 80088a6:	f000 fcbf 	bl	8009228 <_Bfree>
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	f000 80bd 	beq.w	8008a2a <_dtoa_r+0x622>
 80088b0:	b12f      	cbz	r7, 80088be <_dtoa_r+0x4b6>
 80088b2:	42af      	cmp	r7, r5
 80088b4:	d003      	beq.n	80088be <_dtoa_r+0x4b6>
 80088b6:	4639      	mov	r1, r7
 80088b8:	4648      	mov	r0, r9
 80088ba:	f000 fcb5 	bl	8009228 <_Bfree>
 80088be:	4629      	mov	r1, r5
 80088c0:	4648      	mov	r0, r9
 80088c2:	f000 fcb1 	bl	8009228 <_Bfree>
 80088c6:	e0b0      	b.n	8008a2a <_dtoa_r+0x622>
 80088c8:	07e2      	lsls	r2, r4, #31
 80088ca:	d505      	bpl.n	80088d8 <_dtoa_r+0x4d0>
 80088cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088d0:	f7f7 feba 	bl	8000648 <__aeabi_dmul>
 80088d4:	3601      	adds	r6, #1
 80088d6:	2301      	movs	r3, #1
 80088d8:	1064      	asrs	r4, r4, #1
 80088da:	3508      	adds	r5, #8
 80088dc:	e762      	b.n	80087a4 <_dtoa_r+0x39c>
 80088de:	2602      	movs	r6, #2
 80088e0:	e765      	b.n	80087ae <_dtoa_r+0x3a6>
 80088e2:	9c03      	ldr	r4, [sp, #12]
 80088e4:	46b8      	mov	r8, r7
 80088e6:	e784      	b.n	80087f2 <_dtoa_r+0x3ea>
 80088e8:	4b27      	ldr	r3, [pc, #156]	@ (8008988 <_dtoa_r+0x580>)
 80088ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088f4:	4454      	add	r4, sl
 80088f6:	2900      	cmp	r1, #0
 80088f8:	d054      	beq.n	80089a4 <_dtoa_r+0x59c>
 80088fa:	4929      	ldr	r1, [pc, #164]	@ (80089a0 <_dtoa_r+0x598>)
 80088fc:	2000      	movs	r0, #0
 80088fe:	f7f7 ffcd 	bl	800089c <__aeabi_ddiv>
 8008902:	4633      	mov	r3, r6
 8008904:	462a      	mov	r2, r5
 8008906:	f7f7 fce7 	bl	80002d8 <__aeabi_dsub>
 800890a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800890e:	4656      	mov	r6, sl
 8008910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008914:	f7f8 f948 	bl	8000ba8 <__aeabi_d2iz>
 8008918:	4605      	mov	r5, r0
 800891a:	f7f7 fe2b 	bl	8000574 <__aeabi_i2d>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008926:	f7f7 fcd7 	bl	80002d8 <__aeabi_dsub>
 800892a:	3530      	adds	r5, #48	@ 0x30
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008934:	f806 5b01 	strb.w	r5, [r6], #1
 8008938:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800893c:	f7f8 f8f6 	bl	8000b2c <__aeabi_dcmplt>
 8008940:	2800      	cmp	r0, #0
 8008942:	d172      	bne.n	8008a2a <_dtoa_r+0x622>
 8008944:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008948:	4911      	ldr	r1, [pc, #68]	@ (8008990 <_dtoa_r+0x588>)
 800894a:	2000      	movs	r0, #0
 800894c:	f7f7 fcc4 	bl	80002d8 <__aeabi_dsub>
 8008950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008954:	f7f8 f8ea 	bl	8000b2c <__aeabi_dcmplt>
 8008958:	2800      	cmp	r0, #0
 800895a:	f040 80b4 	bne.w	8008ac6 <_dtoa_r+0x6be>
 800895e:	42a6      	cmp	r6, r4
 8008960:	f43f af70 	beq.w	8008844 <_dtoa_r+0x43c>
 8008964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008968:	4b0a      	ldr	r3, [pc, #40]	@ (8008994 <_dtoa_r+0x58c>)
 800896a:	2200      	movs	r2, #0
 800896c:	f7f7 fe6c 	bl	8000648 <__aeabi_dmul>
 8008970:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <_dtoa_r+0x58c>)
 8008972:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008976:	2200      	movs	r2, #0
 8008978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800897c:	f7f7 fe64 	bl	8000648 <__aeabi_dmul>
 8008980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008984:	e7c4      	b.n	8008910 <_dtoa_r+0x508>
 8008986:	bf00      	nop
 8008988:	0800acc8 	.word	0x0800acc8
 800898c:	0800aca0 	.word	0x0800aca0
 8008990:	3ff00000 	.word	0x3ff00000
 8008994:	40240000 	.word	0x40240000
 8008998:	401c0000 	.word	0x401c0000
 800899c:	40140000 	.word	0x40140000
 80089a0:	3fe00000 	.word	0x3fe00000
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	f7f7 fe4e 	bl	8000648 <__aeabi_dmul>
 80089ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80089b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80089b2:	4656      	mov	r6, sl
 80089b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089b8:	f7f8 f8f6 	bl	8000ba8 <__aeabi_d2iz>
 80089bc:	4605      	mov	r5, r0
 80089be:	f7f7 fdd9 	bl	8000574 <__aeabi_i2d>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ca:	f7f7 fc85 	bl	80002d8 <__aeabi_dsub>
 80089ce:	3530      	adds	r5, #48	@ 0x30
 80089d0:	f806 5b01 	strb.w	r5, [r6], #1
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	42a6      	cmp	r6, r4
 80089da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089de:	f04f 0200 	mov.w	r2, #0
 80089e2:	d124      	bne.n	8008a2e <_dtoa_r+0x626>
 80089e4:	4baf      	ldr	r3, [pc, #700]	@ (8008ca4 <_dtoa_r+0x89c>)
 80089e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80089ea:	f7f7 fc77 	bl	80002dc <__adddf3>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089f6:	f7f8 f8b7 	bl	8000b68 <__aeabi_dcmpgt>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d163      	bne.n	8008ac6 <_dtoa_r+0x6be>
 80089fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a02:	49a8      	ldr	r1, [pc, #672]	@ (8008ca4 <_dtoa_r+0x89c>)
 8008a04:	2000      	movs	r0, #0
 8008a06:	f7f7 fc67 	bl	80002d8 <__aeabi_dsub>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a12:	f7f8 f88b 	bl	8000b2c <__aeabi_dcmplt>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	f43f af14 	beq.w	8008844 <_dtoa_r+0x43c>
 8008a1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008a1e:	1e73      	subs	r3, r6, #1
 8008a20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a26:	2b30      	cmp	r3, #48	@ 0x30
 8008a28:	d0f8      	beq.n	8008a1c <_dtoa_r+0x614>
 8008a2a:	4647      	mov	r7, r8
 8008a2c:	e03b      	b.n	8008aa6 <_dtoa_r+0x69e>
 8008a2e:	4b9e      	ldr	r3, [pc, #632]	@ (8008ca8 <_dtoa_r+0x8a0>)
 8008a30:	f7f7 fe0a 	bl	8000648 <__aeabi_dmul>
 8008a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a38:	e7bc      	b.n	80089b4 <_dtoa_r+0x5ac>
 8008a3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008a3e:	4656      	mov	r6, sl
 8008a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f7 ff28 	bl	800089c <__aeabi_ddiv>
 8008a4c:	f7f8 f8ac 	bl	8000ba8 <__aeabi_d2iz>
 8008a50:	4680      	mov	r8, r0
 8008a52:	f7f7 fd8f 	bl	8000574 <__aeabi_i2d>
 8008a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5a:	f7f7 fdf5 	bl	8000648 <__aeabi_dmul>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4620      	mov	r0, r4
 8008a64:	4629      	mov	r1, r5
 8008a66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a6a:	f7f7 fc35 	bl	80002d8 <__aeabi_dsub>
 8008a6e:	f806 4b01 	strb.w	r4, [r6], #1
 8008a72:	9d03      	ldr	r5, [sp, #12]
 8008a74:	eba6 040a 	sub.w	r4, r6, sl
 8008a78:	42a5      	cmp	r5, r4
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	d133      	bne.n	8008ae8 <_dtoa_r+0x6e0>
 8008a80:	f7f7 fc2c 	bl	80002dc <__adddf3>
 8008a84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	f7f8 f86c 	bl	8000b68 <__aeabi_dcmpgt>
 8008a90:	b9c0      	cbnz	r0, 8008ac4 <_dtoa_r+0x6bc>
 8008a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f8 f83d 	bl	8000b18 <__aeabi_dcmpeq>
 8008a9e:	b110      	cbz	r0, 8008aa6 <_dtoa_r+0x69e>
 8008aa0:	f018 0f01 	tst.w	r8, #1
 8008aa4:	d10e      	bne.n	8008ac4 <_dtoa_r+0x6bc>
 8008aa6:	9902      	ldr	r1, [sp, #8]
 8008aa8:	4648      	mov	r0, r9
 8008aaa:	f000 fbbd 	bl	8009228 <_Bfree>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	7033      	strb	r3, [r6, #0]
 8008ab2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ab4:	3701      	adds	r7, #1
 8008ab6:	601f      	str	r7, [r3, #0]
 8008ab8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 824b 	beq.w	8008f56 <_dtoa_r+0xb4e>
 8008ac0:	601e      	str	r6, [r3, #0]
 8008ac2:	e248      	b.n	8008f56 <_dtoa_r+0xb4e>
 8008ac4:	46b8      	mov	r8, r7
 8008ac6:	4633      	mov	r3, r6
 8008ac8:	461e      	mov	r6, r3
 8008aca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ace:	2a39      	cmp	r2, #57	@ 0x39
 8008ad0:	d106      	bne.n	8008ae0 <_dtoa_r+0x6d8>
 8008ad2:	459a      	cmp	sl, r3
 8008ad4:	d1f8      	bne.n	8008ac8 <_dtoa_r+0x6c0>
 8008ad6:	2230      	movs	r2, #48	@ 0x30
 8008ad8:	f108 0801 	add.w	r8, r8, #1
 8008adc:	f88a 2000 	strb.w	r2, [sl]
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e7a0      	b.n	8008a2a <_dtoa_r+0x622>
 8008ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8008ca8 <_dtoa_r+0x8a0>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	f7f7 fdac 	bl	8000648 <__aeabi_dmul>
 8008af0:	2200      	movs	r2, #0
 8008af2:	2300      	movs	r3, #0
 8008af4:	4604      	mov	r4, r0
 8008af6:	460d      	mov	r5, r1
 8008af8:	f7f8 f80e 	bl	8000b18 <__aeabi_dcmpeq>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d09f      	beq.n	8008a40 <_dtoa_r+0x638>
 8008b00:	e7d1      	b.n	8008aa6 <_dtoa_r+0x69e>
 8008b02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	f000 80ea 	beq.w	8008cde <_dtoa_r+0x8d6>
 8008b0a:	9a07      	ldr	r2, [sp, #28]
 8008b0c:	2a01      	cmp	r2, #1
 8008b0e:	f300 80cd 	bgt.w	8008cac <_dtoa_r+0x8a4>
 8008b12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	f000 80c1 	beq.w	8008c9c <_dtoa_r+0x894>
 8008b1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008b1e:	9c08      	ldr	r4, [sp, #32]
 8008b20:	9e00      	ldr	r6, [sp, #0]
 8008b22:	9a00      	ldr	r2, [sp, #0]
 8008b24:	441a      	add	r2, r3
 8008b26:	9200      	str	r2, [sp, #0]
 8008b28:	9a06      	ldr	r2, [sp, #24]
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	441a      	add	r2, r3
 8008b2e:	4648      	mov	r0, r9
 8008b30:	9206      	str	r2, [sp, #24]
 8008b32:	f000 fc2d 	bl	8009390 <__i2b>
 8008b36:	4605      	mov	r5, r0
 8008b38:	b166      	cbz	r6, 8008b54 <_dtoa_r+0x74c>
 8008b3a:	9b06      	ldr	r3, [sp, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dd09      	ble.n	8008b54 <_dtoa_r+0x74c>
 8008b40:	42b3      	cmp	r3, r6
 8008b42:	9a00      	ldr	r2, [sp, #0]
 8008b44:	bfa8      	it	ge
 8008b46:	4633      	movge	r3, r6
 8008b48:	1ad2      	subs	r2, r2, r3
 8008b4a:	9200      	str	r2, [sp, #0]
 8008b4c:	9a06      	ldr	r2, [sp, #24]
 8008b4e:	1af6      	subs	r6, r6, r3
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	9306      	str	r3, [sp, #24]
 8008b54:	9b08      	ldr	r3, [sp, #32]
 8008b56:	b30b      	cbz	r3, 8008b9c <_dtoa_r+0x794>
 8008b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 80c6 	beq.w	8008cec <_dtoa_r+0x8e4>
 8008b60:	2c00      	cmp	r4, #0
 8008b62:	f000 80c0 	beq.w	8008ce6 <_dtoa_r+0x8de>
 8008b66:	4629      	mov	r1, r5
 8008b68:	4622      	mov	r2, r4
 8008b6a:	4648      	mov	r0, r9
 8008b6c:	f000 fcc8 	bl	8009500 <__pow5mult>
 8008b70:	9a02      	ldr	r2, [sp, #8]
 8008b72:	4601      	mov	r1, r0
 8008b74:	4605      	mov	r5, r0
 8008b76:	4648      	mov	r0, r9
 8008b78:	f000 fc20 	bl	80093bc <__multiply>
 8008b7c:	9902      	ldr	r1, [sp, #8]
 8008b7e:	4680      	mov	r8, r0
 8008b80:	4648      	mov	r0, r9
 8008b82:	f000 fb51 	bl	8009228 <_Bfree>
 8008b86:	9b08      	ldr	r3, [sp, #32]
 8008b88:	1b1b      	subs	r3, r3, r4
 8008b8a:	9308      	str	r3, [sp, #32]
 8008b8c:	f000 80b1 	beq.w	8008cf2 <_dtoa_r+0x8ea>
 8008b90:	9a08      	ldr	r2, [sp, #32]
 8008b92:	4641      	mov	r1, r8
 8008b94:	4648      	mov	r0, r9
 8008b96:	f000 fcb3 	bl	8009500 <__pow5mult>
 8008b9a:	9002      	str	r0, [sp, #8]
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	4648      	mov	r0, r9
 8008ba0:	f000 fbf6 	bl	8009390 <__i2b>
 8008ba4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 81d8 	beq.w	8008f5e <_dtoa_r+0xb56>
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4601      	mov	r1, r0
 8008bb2:	4648      	mov	r0, r9
 8008bb4:	f000 fca4 	bl	8009500 <__pow5mult>
 8008bb8:	9b07      	ldr	r3, [sp, #28]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	f300 809f 	bgt.w	8008d00 <_dtoa_r+0x8f8>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f040 8097 	bne.w	8008cf8 <_dtoa_r+0x8f0>
 8008bca:	9b05      	ldr	r3, [sp, #20]
 8008bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f040 8093 	bne.w	8008cfc <_dtoa_r+0x8f4>
 8008bd6:	9b05      	ldr	r3, [sp, #20]
 8008bd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bdc:	0d1b      	lsrs	r3, r3, #20
 8008bde:	051b      	lsls	r3, r3, #20
 8008be0:	b133      	cbz	r3, 8008bf0 <_dtoa_r+0x7e8>
 8008be2:	9b00      	ldr	r3, [sp, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	9b06      	ldr	r3, [sp, #24]
 8008bea:	3301      	adds	r3, #1
 8008bec:	9306      	str	r3, [sp, #24]
 8008bee:	2301      	movs	r3, #1
 8008bf0:	9308      	str	r3, [sp, #32]
 8008bf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 81b8 	beq.w	8008f6a <_dtoa_r+0xb62>
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c00:	6918      	ldr	r0, [r3, #16]
 8008c02:	f000 fb79 	bl	80092f8 <__hi0bits>
 8008c06:	f1c0 0020 	rsb	r0, r0, #32
 8008c0a:	9b06      	ldr	r3, [sp, #24]
 8008c0c:	4418      	add	r0, r3
 8008c0e:	f010 001f 	ands.w	r0, r0, #31
 8008c12:	f000 8082 	beq.w	8008d1a <_dtoa_r+0x912>
 8008c16:	f1c0 0320 	rsb	r3, r0, #32
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	dd73      	ble.n	8008d06 <_dtoa_r+0x8fe>
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	f1c0 001c 	rsb	r0, r0, #28
 8008c24:	4403      	add	r3, r0
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	9b06      	ldr	r3, [sp, #24]
 8008c2a:	4403      	add	r3, r0
 8008c2c:	4406      	add	r6, r0
 8008c2e:	9306      	str	r3, [sp, #24]
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dd05      	ble.n	8008c42 <_dtoa_r+0x83a>
 8008c36:	9902      	ldr	r1, [sp, #8]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4648      	mov	r0, r9
 8008c3c:	f000 fcba 	bl	80095b4 <__lshift>
 8008c40:	9002      	str	r0, [sp, #8]
 8008c42:	9b06      	ldr	r3, [sp, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dd05      	ble.n	8008c54 <_dtoa_r+0x84c>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f000 fcb1 	bl	80095b4 <__lshift>
 8008c52:	4604      	mov	r4, r0
 8008c54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d061      	beq.n	8008d1e <_dtoa_r+0x916>
 8008c5a:	9802      	ldr	r0, [sp, #8]
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	f000 fd15 	bl	800968c <__mcmp>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	da5b      	bge.n	8008d1e <_dtoa_r+0x916>
 8008c66:	2300      	movs	r3, #0
 8008c68:	9902      	ldr	r1, [sp, #8]
 8008c6a:	220a      	movs	r2, #10
 8008c6c:	4648      	mov	r0, r9
 8008c6e:	f000 fafd 	bl	800926c <__multadd>
 8008c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c74:	9002      	str	r0, [sp, #8]
 8008c76:	f107 38ff 	add.w	r8, r7, #4294967295
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8177 	beq.w	8008f6e <_dtoa_r+0xb66>
 8008c80:	4629      	mov	r1, r5
 8008c82:	2300      	movs	r3, #0
 8008c84:	220a      	movs	r2, #10
 8008c86:	4648      	mov	r0, r9
 8008c88:	f000 faf0 	bl	800926c <__multadd>
 8008c8c:	f1bb 0f00 	cmp.w	fp, #0
 8008c90:	4605      	mov	r5, r0
 8008c92:	dc6f      	bgt.n	8008d74 <_dtoa_r+0x96c>
 8008c94:	9b07      	ldr	r3, [sp, #28]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	dc49      	bgt.n	8008d2e <_dtoa_r+0x926>
 8008c9a:	e06b      	b.n	8008d74 <_dtoa_r+0x96c>
 8008c9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008ca2:	e73c      	b.n	8008b1e <_dtoa_r+0x716>
 8008ca4:	3fe00000 	.word	0x3fe00000
 8008ca8:	40240000 	.word	0x40240000
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	1e5c      	subs	r4, r3, #1
 8008cb0:	9b08      	ldr	r3, [sp, #32]
 8008cb2:	42a3      	cmp	r3, r4
 8008cb4:	db09      	blt.n	8008cca <_dtoa_r+0x8c2>
 8008cb6:	1b1c      	subs	r4, r3, r4
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f6bf af30 	bge.w	8008b20 <_dtoa_r+0x718>
 8008cc0:	9b00      	ldr	r3, [sp, #0]
 8008cc2:	9a03      	ldr	r2, [sp, #12]
 8008cc4:	1a9e      	subs	r6, r3, r2
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e72b      	b.n	8008b22 <_dtoa_r+0x71a>
 8008cca:	9b08      	ldr	r3, [sp, #32]
 8008ccc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cce:	9408      	str	r4, [sp, #32]
 8008cd0:	1ae3      	subs	r3, r4, r3
 8008cd2:	441a      	add	r2, r3
 8008cd4:	9e00      	ldr	r6, [sp, #0]
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	920d      	str	r2, [sp, #52]	@ 0x34
 8008cda:	2400      	movs	r4, #0
 8008cdc:	e721      	b.n	8008b22 <_dtoa_r+0x71a>
 8008cde:	9c08      	ldr	r4, [sp, #32]
 8008ce0:	9e00      	ldr	r6, [sp, #0]
 8008ce2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008ce4:	e728      	b.n	8008b38 <_dtoa_r+0x730>
 8008ce6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008cea:	e751      	b.n	8008b90 <_dtoa_r+0x788>
 8008cec:	9a08      	ldr	r2, [sp, #32]
 8008cee:	9902      	ldr	r1, [sp, #8]
 8008cf0:	e750      	b.n	8008b94 <_dtoa_r+0x78c>
 8008cf2:	f8cd 8008 	str.w	r8, [sp, #8]
 8008cf6:	e751      	b.n	8008b9c <_dtoa_r+0x794>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e779      	b.n	8008bf0 <_dtoa_r+0x7e8>
 8008cfc:	9b04      	ldr	r3, [sp, #16]
 8008cfe:	e777      	b.n	8008bf0 <_dtoa_r+0x7e8>
 8008d00:	2300      	movs	r3, #0
 8008d02:	9308      	str	r3, [sp, #32]
 8008d04:	e779      	b.n	8008bfa <_dtoa_r+0x7f2>
 8008d06:	d093      	beq.n	8008c30 <_dtoa_r+0x828>
 8008d08:	9a00      	ldr	r2, [sp, #0]
 8008d0a:	331c      	adds	r3, #28
 8008d0c:	441a      	add	r2, r3
 8008d0e:	9200      	str	r2, [sp, #0]
 8008d10:	9a06      	ldr	r2, [sp, #24]
 8008d12:	441a      	add	r2, r3
 8008d14:	441e      	add	r6, r3
 8008d16:	9206      	str	r2, [sp, #24]
 8008d18:	e78a      	b.n	8008c30 <_dtoa_r+0x828>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	e7f4      	b.n	8008d08 <_dtoa_r+0x900>
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	46b8      	mov	r8, r7
 8008d24:	dc20      	bgt.n	8008d68 <_dtoa_r+0x960>
 8008d26:	469b      	mov	fp, r3
 8008d28:	9b07      	ldr	r3, [sp, #28]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	dd1e      	ble.n	8008d6c <_dtoa_r+0x964>
 8008d2e:	f1bb 0f00 	cmp.w	fp, #0
 8008d32:	f47f adb1 	bne.w	8008898 <_dtoa_r+0x490>
 8008d36:	4621      	mov	r1, r4
 8008d38:	465b      	mov	r3, fp
 8008d3a:	2205      	movs	r2, #5
 8008d3c:	4648      	mov	r0, r9
 8008d3e:	f000 fa95 	bl	800926c <__multadd>
 8008d42:	4601      	mov	r1, r0
 8008d44:	4604      	mov	r4, r0
 8008d46:	9802      	ldr	r0, [sp, #8]
 8008d48:	f000 fca0 	bl	800968c <__mcmp>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f77f ada3 	ble.w	8008898 <_dtoa_r+0x490>
 8008d52:	4656      	mov	r6, sl
 8008d54:	2331      	movs	r3, #49	@ 0x31
 8008d56:	f806 3b01 	strb.w	r3, [r6], #1
 8008d5a:	f108 0801 	add.w	r8, r8, #1
 8008d5e:	e59f      	b.n	80088a0 <_dtoa_r+0x498>
 8008d60:	9c03      	ldr	r4, [sp, #12]
 8008d62:	46b8      	mov	r8, r7
 8008d64:	4625      	mov	r5, r4
 8008d66:	e7f4      	b.n	8008d52 <_dtoa_r+0x94a>
 8008d68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 8101 	beq.w	8008f76 <_dtoa_r+0xb6e>
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	dd05      	ble.n	8008d84 <_dtoa_r+0x97c>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	4648      	mov	r0, r9
 8008d7e:	f000 fc19 	bl	80095b4 <__lshift>
 8008d82:	4605      	mov	r5, r0
 8008d84:	9b08      	ldr	r3, [sp, #32]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d05c      	beq.n	8008e44 <_dtoa_r+0xa3c>
 8008d8a:	6869      	ldr	r1, [r5, #4]
 8008d8c:	4648      	mov	r0, r9
 8008d8e:	f000 fa0b 	bl	80091a8 <_Balloc>
 8008d92:	4606      	mov	r6, r0
 8008d94:	b928      	cbnz	r0, 8008da2 <_dtoa_r+0x99a>
 8008d96:	4b82      	ldr	r3, [pc, #520]	@ (8008fa0 <_dtoa_r+0xb98>)
 8008d98:	4602      	mov	r2, r0
 8008d9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d9e:	f7ff bb4a 	b.w	8008436 <_dtoa_r+0x2e>
 8008da2:	692a      	ldr	r2, [r5, #16]
 8008da4:	3202      	adds	r2, #2
 8008da6:	0092      	lsls	r2, r2, #2
 8008da8:	f105 010c 	add.w	r1, r5, #12
 8008dac:	300c      	adds	r0, #12
 8008dae:	f001 f969 	bl	800a084 <memcpy>
 8008db2:	2201      	movs	r2, #1
 8008db4:	4631      	mov	r1, r6
 8008db6:	4648      	mov	r0, r9
 8008db8:	f000 fbfc 	bl	80095b4 <__lshift>
 8008dbc:	f10a 0301 	add.w	r3, sl, #1
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	eb0a 030b 	add.w	r3, sl, fp
 8008dc6:	9308      	str	r3, [sp, #32]
 8008dc8:	9b04      	ldr	r3, [sp, #16]
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	462f      	mov	r7, r5
 8008dd0:	9306      	str	r3, [sp, #24]
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	9b00      	ldr	r3, [sp, #0]
 8008dd6:	9802      	ldr	r0, [sp, #8]
 8008dd8:	4621      	mov	r1, r4
 8008dda:	f103 3bff 	add.w	fp, r3, #4294967295
 8008dde:	f7ff fa88 	bl	80082f2 <quorem>
 8008de2:	4603      	mov	r3, r0
 8008de4:	3330      	adds	r3, #48	@ 0x30
 8008de6:	9003      	str	r0, [sp, #12]
 8008de8:	4639      	mov	r1, r7
 8008dea:	9802      	ldr	r0, [sp, #8]
 8008dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dee:	f000 fc4d 	bl	800968c <__mcmp>
 8008df2:	462a      	mov	r2, r5
 8008df4:	9004      	str	r0, [sp, #16]
 8008df6:	4621      	mov	r1, r4
 8008df8:	4648      	mov	r0, r9
 8008dfa:	f000 fc63 	bl	80096c4 <__mdiff>
 8008dfe:	68c2      	ldr	r2, [r0, #12]
 8008e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e02:	4606      	mov	r6, r0
 8008e04:	bb02      	cbnz	r2, 8008e48 <_dtoa_r+0xa40>
 8008e06:	4601      	mov	r1, r0
 8008e08:	9802      	ldr	r0, [sp, #8]
 8008e0a:	f000 fc3f 	bl	800968c <__mcmp>
 8008e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e10:	4602      	mov	r2, r0
 8008e12:	4631      	mov	r1, r6
 8008e14:	4648      	mov	r0, r9
 8008e16:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e1a:	f000 fa05 	bl	8009228 <_Bfree>
 8008e1e:	9b07      	ldr	r3, [sp, #28]
 8008e20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008e22:	9e00      	ldr	r6, [sp, #0]
 8008e24:	ea42 0103 	orr.w	r1, r2, r3
 8008e28:	9b06      	ldr	r3, [sp, #24]
 8008e2a:	4319      	orrs	r1, r3
 8008e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2e:	d10d      	bne.n	8008e4c <_dtoa_r+0xa44>
 8008e30:	2b39      	cmp	r3, #57	@ 0x39
 8008e32:	d027      	beq.n	8008e84 <_dtoa_r+0xa7c>
 8008e34:	9a04      	ldr	r2, [sp, #16]
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	dd01      	ble.n	8008e3e <_dtoa_r+0xa36>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	3331      	adds	r3, #49	@ 0x31
 8008e3e:	f88b 3000 	strb.w	r3, [fp]
 8008e42:	e52e      	b.n	80088a2 <_dtoa_r+0x49a>
 8008e44:	4628      	mov	r0, r5
 8008e46:	e7b9      	b.n	8008dbc <_dtoa_r+0x9b4>
 8008e48:	2201      	movs	r2, #1
 8008e4a:	e7e2      	b.n	8008e12 <_dtoa_r+0xa0a>
 8008e4c:	9904      	ldr	r1, [sp, #16]
 8008e4e:	2900      	cmp	r1, #0
 8008e50:	db04      	blt.n	8008e5c <_dtoa_r+0xa54>
 8008e52:	9807      	ldr	r0, [sp, #28]
 8008e54:	4301      	orrs	r1, r0
 8008e56:	9806      	ldr	r0, [sp, #24]
 8008e58:	4301      	orrs	r1, r0
 8008e5a:	d120      	bne.n	8008e9e <_dtoa_r+0xa96>
 8008e5c:	2a00      	cmp	r2, #0
 8008e5e:	ddee      	ble.n	8008e3e <_dtoa_r+0xa36>
 8008e60:	9902      	ldr	r1, [sp, #8]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	2201      	movs	r2, #1
 8008e66:	4648      	mov	r0, r9
 8008e68:	f000 fba4 	bl	80095b4 <__lshift>
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	9002      	str	r0, [sp, #8]
 8008e70:	f000 fc0c 	bl	800968c <__mcmp>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	9b00      	ldr	r3, [sp, #0]
 8008e78:	dc02      	bgt.n	8008e80 <_dtoa_r+0xa78>
 8008e7a:	d1e0      	bne.n	8008e3e <_dtoa_r+0xa36>
 8008e7c:	07da      	lsls	r2, r3, #31
 8008e7e:	d5de      	bpl.n	8008e3e <_dtoa_r+0xa36>
 8008e80:	2b39      	cmp	r3, #57	@ 0x39
 8008e82:	d1da      	bne.n	8008e3a <_dtoa_r+0xa32>
 8008e84:	2339      	movs	r3, #57	@ 0x39
 8008e86:	f88b 3000 	strb.w	r3, [fp]
 8008e8a:	4633      	mov	r3, r6
 8008e8c:	461e      	mov	r6, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e94:	2a39      	cmp	r2, #57	@ 0x39
 8008e96:	d04e      	beq.n	8008f36 <_dtoa_r+0xb2e>
 8008e98:	3201      	adds	r2, #1
 8008e9a:	701a      	strb	r2, [r3, #0]
 8008e9c:	e501      	b.n	80088a2 <_dtoa_r+0x49a>
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	dd03      	ble.n	8008eaa <_dtoa_r+0xaa2>
 8008ea2:	2b39      	cmp	r3, #57	@ 0x39
 8008ea4:	d0ee      	beq.n	8008e84 <_dtoa_r+0xa7c>
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	e7c9      	b.n	8008e3e <_dtoa_r+0xa36>
 8008eaa:	9a00      	ldr	r2, [sp, #0]
 8008eac:	9908      	ldr	r1, [sp, #32]
 8008eae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008eb2:	428a      	cmp	r2, r1
 8008eb4:	d028      	beq.n	8008f08 <_dtoa_r+0xb00>
 8008eb6:	9902      	ldr	r1, [sp, #8]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	220a      	movs	r2, #10
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	f000 f9d5 	bl	800926c <__multadd>
 8008ec2:	42af      	cmp	r7, r5
 8008ec4:	9002      	str	r0, [sp, #8]
 8008ec6:	f04f 0300 	mov.w	r3, #0
 8008eca:	f04f 020a 	mov.w	r2, #10
 8008ece:	4639      	mov	r1, r7
 8008ed0:	4648      	mov	r0, r9
 8008ed2:	d107      	bne.n	8008ee4 <_dtoa_r+0xadc>
 8008ed4:	f000 f9ca 	bl	800926c <__multadd>
 8008ed8:	4607      	mov	r7, r0
 8008eda:	4605      	mov	r5, r0
 8008edc:	9b00      	ldr	r3, [sp, #0]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	e777      	b.n	8008dd4 <_dtoa_r+0x9cc>
 8008ee4:	f000 f9c2 	bl	800926c <__multadd>
 8008ee8:	4629      	mov	r1, r5
 8008eea:	4607      	mov	r7, r0
 8008eec:	2300      	movs	r3, #0
 8008eee:	220a      	movs	r2, #10
 8008ef0:	4648      	mov	r0, r9
 8008ef2:	f000 f9bb 	bl	800926c <__multadd>
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	e7f0      	b.n	8008edc <_dtoa_r+0xad4>
 8008efa:	f1bb 0f00 	cmp.w	fp, #0
 8008efe:	bfcc      	ite	gt
 8008f00:	465e      	movgt	r6, fp
 8008f02:	2601      	movle	r6, #1
 8008f04:	4456      	add	r6, sl
 8008f06:	2700      	movs	r7, #0
 8008f08:	9902      	ldr	r1, [sp, #8]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	4648      	mov	r0, r9
 8008f10:	f000 fb50 	bl	80095b4 <__lshift>
 8008f14:	4621      	mov	r1, r4
 8008f16:	9002      	str	r0, [sp, #8]
 8008f18:	f000 fbb8 	bl	800968c <__mcmp>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	dcb4      	bgt.n	8008e8a <_dtoa_r+0xa82>
 8008f20:	d102      	bne.n	8008f28 <_dtoa_r+0xb20>
 8008f22:	9b00      	ldr	r3, [sp, #0]
 8008f24:	07db      	lsls	r3, r3, #31
 8008f26:	d4b0      	bmi.n	8008e8a <_dtoa_r+0xa82>
 8008f28:	4633      	mov	r3, r6
 8008f2a:	461e      	mov	r6, r3
 8008f2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f30:	2a30      	cmp	r2, #48	@ 0x30
 8008f32:	d0fa      	beq.n	8008f2a <_dtoa_r+0xb22>
 8008f34:	e4b5      	b.n	80088a2 <_dtoa_r+0x49a>
 8008f36:	459a      	cmp	sl, r3
 8008f38:	d1a8      	bne.n	8008e8c <_dtoa_r+0xa84>
 8008f3a:	2331      	movs	r3, #49	@ 0x31
 8008f3c:	f108 0801 	add.w	r8, r8, #1
 8008f40:	f88a 3000 	strb.w	r3, [sl]
 8008f44:	e4ad      	b.n	80088a2 <_dtoa_r+0x49a>
 8008f46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008fa4 <_dtoa_r+0xb9c>
 8008f4c:	b11b      	cbz	r3, 8008f56 <_dtoa_r+0xb4e>
 8008f4e:	f10a 0308 	add.w	r3, sl, #8
 8008f52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	4650      	mov	r0, sl
 8008f58:	b017      	add	sp, #92	@ 0x5c
 8008f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5e:	9b07      	ldr	r3, [sp, #28]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	f77f ae2e 	ble.w	8008bc2 <_dtoa_r+0x7ba>
 8008f66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f68:	9308      	str	r3, [sp, #32]
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	e64d      	b.n	8008c0a <_dtoa_r+0x802>
 8008f6e:	f1bb 0f00 	cmp.w	fp, #0
 8008f72:	f77f aed9 	ble.w	8008d28 <_dtoa_r+0x920>
 8008f76:	4656      	mov	r6, sl
 8008f78:	9802      	ldr	r0, [sp, #8]
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	f7ff f9b9 	bl	80082f2 <quorem>
 8008f80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008f84:	f806 3b01 	strb.w	r3, [r6], #1
 8008f88:	eba6 020a 	sub.w	r2, r6, sl
 8008f8c:	4593      	cmp	fp, r2
 8008f8e:	ddb4      	ble.n	8008efa <_dtoa_r+0xaf2>
 8008f90:	9902      	ldr	r1, [sp, #8]
 8008f92:	2300      	movs	r3, #0
 8008f94:	220a      	movs	r2, #10
 8008f96:	4648      	mov	r0, r9
 8008f98:	f000 f968 	bl	800926c <__multadd>
 8008f9c:	9002      	str	r0, [sp, #8]
 8008f9e:	e7eb      	b.n	8008f78 <_dtoa_r+0xb70>
 8008fa0:	0800abcc 	.word	0x0800abcc
 8008fa4:	0800ab50 	.word	0x0800ab50

08008fa8 <_free_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4605      	mov	r5, r0
 8008fac:	2900      	cmp	r1, #0
 8008fae:	d041      	beq.n	8009034 <_free_r+0x8c>
 8008fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb4:	1f0c      	subs	r4, r1, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bfb8      	it	lt
 8008fba:	18e4      	addlt	r4, r4, r3
 8008fbc:	f000 f8e8 	bl	8009190 <__malloc_lock>
 8008fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8009038 <_free_r+0x90>)
 8008fc2:	6813      	ldr	r3, [r2, #0]
 8008fc4:	b933      	cbnz	r3, 8008fd4 <_free_r+0x2c>
 8008fc6:	6063      	str	r3, [r4, #4]
 8008fc8:	6014      	str	r4, [r2, #0]
 8008fca:	4628      	mov	r0, r5
 8008fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd0:	f000 b8e4 	b.w	800919c <__malloc_unlock>
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	d908      	bls.n	8008fea <_free_r+0x42>
 8008fd8:	6820      	ldr	r0, [r4, #0]
 8008fda:	1821      	adds	r1, r4, r0
 8008fdc:	428b      	cmp	r3, r1
 8008fde:	bf01      	itttt	eq
 8008fe0:	6819      	ldreq	r1, [r3, #0]
 8008fe2:	685b      	ldreq	r3, [r3, #4]
 8008fe4:	1809      	addeq	r1, r1, r0
 8008fe6:	6021      	streq	r1, [r4, #0]
 8008fe8:	e7ed      	b.n	8008fc6 <_free_r+0x1e>
 8008fea:	461a      	mov	r2, r3
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	b10b      	cbz	r3, 8008ff4 <_free_r+0x4c>
 8008ff0:	42a3      	cmp	r3, r4
 8008ff2:	d9fa      	bls.n	8008fea <_free_r+0x42>
 8008ff4:	6811      	ldr	r1, [r2, #0]
 8008ff6:	1850      	adds	r0, r2, r1
 8008ff8:	42a0      	cmp	r0, r4
 8008ffa:	d10b      	bne.n	8009014 <_free_r+0x6c>
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	4401      	add	r1, r0
 8009000:	1850      	adds	r0, r2, r1
 8009002:	4283      	cmp	r3, r0
 8009004:	6011      	str	r1, [r2, #0]
 8009006:	d1e0      	bne.n	8008fca <_free_r+0x22>
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	6053      	str	r3, [r2, #4]
 800900e:	4408      	add	r0, r1
 8009010:	6010      	str	r0, [r2, #0]
 8009012:	e7da      	b.n	8008fca <_free_r+0x22>
 8009014:	d902      	bls.n	800901c <_free_r+0x74>
 8009016:	230c      	movs	r3, #12
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	e7d6      	b.n	8008fca <_free_r+0x22>
 800901c:	6820      	ldr	r0, [r4, #0]
 800901e:	1821      	adds	r1, r4, r0
 8009020:	428b      	cmp	r3, r1
 8009022:	bf04      	itt	eq
 8009024:	6819      	ldreq	r1, [r3, #0]
 8009026:	685b      	ldreq	r3, [r3, #4]
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	bf04      	itt	eq
 800902c:	1809      	addeq	r1, r1, r0
 800902e:	6021      	streq	r1, [r4, #0]
 8009030:	6054      	str	r4, [r2, #4]
 8009032:	e7ca      	b.n	8008fca <_free_r+0x22>
 8009034:	bd38      	pop	{r3, r4, r5, pc}
 8009036:	bf00      	nop
 8009038:	200006c8 	.word	0x200006c8

0800903c <malloc>:
 800903c:	4b02      	ldr	r3, [pc, #8]	@ (8009048 <malloc+0xc>)
 800903e:	4601      	mov	r1, r0
 8009040:	6818      	ldr	r0, [r3, #0]
 8009042:	f000 b825 	b.w	8009090 <_malloc_r>
 8009046:	bf00      	nop
 8009048:	20000018 	.word	0x20000018

0800904c <sbrk_aligned>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4e0f      	ldr	r6, [pc, #60]	@ (800908c <sbrk_aligned+0x40>)
 8009050:	460c      	mov	r4, r1
 8009052:	6831      	ldr	r1, [r6, #0]
 8009054:	4605      	mov	r5, r0
 8009056:	b911      	cbnz	r1, 800905e <sbrk_aligned+0x12>
 8009058:	f001 f804 	bl	800a064 <_sbrk_r>
 800905c:	6030      	str	r0, [r6, #0]
 800905e:	4621      	mov	r1, r4
 8009060:	4628      	mov	r0, r5
 8009062:	f000 ffff 	bl	800a064 <_sbrk_r>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d103      	bne.n	8009072 <sbrk_aligned+0x26>
 800906a:	f04f 34ff 	mov.w	r4, #4294967295
 800906e:	4620      	mov	r0, r4
 8009070:	bd70      	pop	{r4, r5, r6, pc}
 8009072:	1cc4      	adds	r4, r0, #3
 8009074:	f024 0403 	bic.w	r4, r4, #3
 8009078:	42a0      	cmp	r0, r4
 800907a:	d0f8      	beq.n	800906e <sbrk_aligned+0x22>
 800907c:	1a21      	subs	r1, r4, r0
 800907e:	4628      	mov	r0, r5
 8009080:	f000 fff0 	bl	800a064 <_sbrk_r>
 8009084:	3001      	adds	r0, #1
 8009086:	d1f2      	bne.n	800906e <sbrk_aligned+0x22>
 8009088:	e7ef      	b.n	800906a <sbrk_aligned+0x1e>
 800908a:	bf00      	nop
 800908c:	200006c4 	.word	0x200006c4

08009090 <_malloc_r>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	1ccd      	adds	r5, r1, #3
 8009096:	f025 0503 	bic.w	r5, r5, #3
 800909a:	3508      	adds	r5, #8
 800909c:	2d0c      	cmp	r5, #12
 800909e:	bf38      	it	cc
 80090a0:	250c      	movcc	r5, #12
 80090a2:	2d00      	cmp	r5, #0
 80090a4:	4606      	mov	r6, r0
 80090a6:	db01      	blt.n	80090ac <_malloc_r+0x1c>
 80090a8:	42a9      	cmp	r1, r5
 80090aa:	d904      	bls.n	80090b6 <_malloc_r+0x26>
 80090ac:	230c      	movs	r3, #12
 80090ae:	6033      	str	r3, [r6, #0]
 80090b0:	2000      	movs	r0, #0
 80090b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800918c <_malloc_r+0xfc>
 80090ba:	f000 f869 	bl	8009190 <__malloc_lock>
 80090be:	f8d8 3000 	ldr.w	r3, [r8]
 80090c2:	461c      	mov	r4, r3
 80090c4:	bb44      	cbnz	r4, 8009118 <_malloc_r+0x88>
 80090c6:	4629      	mov	r1, r5
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff ffbf 	bl	800904c <sbrk_aligned>
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	4604      	mov	r4, r0
 80090d2:	d158      	bne.n	8009186 <_malloc_r+0xf6>
 80090d4:	f8d8 4000 	ldr.w	r4, [r8]
 80090d8:	4627      	mov	r7, r4
 80090da:	2f00      	cmp	r7, #0
 80090dc:	d143      	bne.n	8009166 <_malloc_r+0xd6>
 80090de:	2c00      	cmp	r4, #0
 80090e0:	d04b      	beq.n	800917a <_malloc_r+0xea>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	4639      	mov	r1, r7
 80090e6:	4630      	mov	r0, r6
 80090e8:	eb04 0903 	add.w	r9, r4, r3
 80090ec:	f000 ffba 	bl	800a064 <_sbrk_r>
 80090f0:	4581      	cmp	r9, r0
 80090f2:	d142      	bne.n	800917a <_malloc_r+0xea>
 80090f4:	6821      	ldr	r1, [r4, #0]
 80090f6:	1a6d      	subs	r5, r5, r1
 80090f8:	4629      	mov	r1, r5
 80090fa:	4630      	mov	r0, r6
 80090fc:	f7ff ffa6 	bl	800904c <sbrk_aligned>
 8009100:	3001      	adds	r0, #1
 8009102:	d03a      	beq.n	800917a <_malloc_r+0xea>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	442b      	add	r3, r5
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	f8d8 3000 	ldr.w	r3, [r8]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	bb62      	cbnz	r2, 800916c <_malloc_r+0xdc>
 8009112:	f8c8 7000 	str.w	r7, [r8]
 8009116:	e00f      	b.n	8009138 <_malloc_r+0xa8>
 8009118:	6822      	ldr	r2, [r4, #0]
 800911a:	1b52      	subs	r2, r2, r5
 800911c:	d420      	bmi.n	8009160 <_malloc_r+0xd0>
 800911e:	2a0b      	cmp	r2, #11
 8009120:	d917      	bls.n	8009152 <_malloc_r+0xc2>
 8009122:	1961      	adds	r1, r4, r5
 8009124:	42a3      	cmp	r3, r4
 8009126:	6025      	str	r5, [r4, #0]
 8009128:	bf18      	it	ne
 800912a:	6059      	strne	r1, [r3, #4]
 800912c:	6863      	ldr	r3, [r4, #4]
 800912e:	bf08      	it	eq
 8009130:	f8c8 1000 	streq.w	r1, [r8]
 8009134:	5162      	str	r2, [r4, r5]
 8009136:	604b      	str	r3, [r1, #4]
 8009138:	4630      	mov	r0, r6
 800913a:	f000 f82f 	bl	800919c <__malloc_unlock>
 800913e:	f104 000b 	add.w	r0, r4, #11
 8009142:	1d23      	adds	r3, r4, #4
 8009144:	f020 0007 	bic.w	r0, r0, #7
 8009148:	1ac2      	subs	r2, r0, r3
 800914a:	bf1c      	itt	ne
 800914c:	1a1b      	subne	r3, r3, r0
 800914e:	50a3      	strne	r3, [r4, r2]
 8009150:	e7af      	b.n	80090b2 <_malloc_r+0x22>
 8009152:	6862      	ldr	r2, [r4, #4]
 8009154:	42a3      	cmp	r3, r4
 8009156:	bf0c      	ite	eq
 8009158:	f8c8 2000 	streq.w	r2, [r8]
 800915c:	605a      	strne	r2, [r3, #4]
 800915e:	e7eb      	b.n	8009138 <_malloc_r+0xa8>
 8009160:	4623      	mov	r3, r4
 8009162:	6864      	ldr	r4, [r4, #4]
 8009164:	e7ae      	b.n	80090c4 <_malloc_r+0x34>
 8009166:	463c      	mov	r4, r7
 8009168:	687f      	ldr	r7, [r7, #4]
 800916a:	e7b6      	b.n	80090da <_malloc_r+0x4a>
 800916c:	461a      	mov	r2, r3
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	42a3      	cmp	r3, r4
 8009172:	d1fb      	bne.n	800916c <_malloc_r+0xdc>
 8009174:	2300      	movs	r3, #0
 8009176:	6053      	str	r3, [r2, #4]
 8009178:	e7de      	b.n	8009138 <_malloc_r+0xa8>
 800917a:	230c      	movs	r3, #12
 800917c:	6033      	str	r3, [r6, #0]
 800917e:	4630      	mov	r0, r6
 8009180:	f000 f80c 	bl	800919c <__malloc_unlock>
 8009184:	e794      	b.n	80090b0 <_malloc_r+0x20>
 8009186:	6005      	str	r5, [r0, #0]
 8009188:	e7d6      	b.n	8009138 <_malloc_r+0xa8>
 800918a:	bf00      	nop
 800918c:	200006c8 	.word	0x200006c8

08009190 <__malloc_lock>:
 8009190:	4801      	ldr	r0, [pc, #4]	@ (8009198 <__malloc_lock+0x8>)
 8009192:	f7ff b8ac 	b.w	80082ee <__retarget_lock_acquire_recursive>
 8009196:	bf00      	nop
 8009198:	200006c0 	.word	0x200006c0

0800919c <__malloc_unlock>:
 800919c:	4801      	ldr	r0, [pc, #4]	@ (80091a4 <__malloc_unlock+0x8>)
 800919e:	f7ff b8a7 	b.w	80082f0 <__retarget_lock_release_recursive>
 80091a2:	bf00      	nop
 80091a4:	200006c0 	.word	0x200006c0

080091a8 <_Balloc>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	69c6      	ldr	r6, [r0, #28]
 80091ac:	4604      	mov	r4, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	b976      	cbnz	r6, 80091d0 <_Balloc+0x28>
 80091b2:	2010      	movs	r0, #16
 80091b4:	f7ff ff42 	bl	800903c <malloc>
 80091b8:	4602      	mov	r2, r0
 80091ba:	61e0      	str	r0, [r4, #28]
 80091bc:	b920      	cbnz	r0, 80091c8 <_Balloc+0x20>
 80091be:	4b18      	ldr	r3, [pc, #96]	@ (8009220 <_Balloc+0x78>)
 80091c0:	4818      	ldr	r0, [pc, #96]	@ (8009224 <_Balloc+0x7c>)
 80091c2:	216b      	movs	r1, #107	@ 0x6b
 80091c4:	f000 ff6c 	bl	800a0a0 <__assert_func>
 80091c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091cc:	6006      	str	r6, [r0, #0]
 80091ce:	60c6      	str	r6, [r0, #12]
 80091d0:	69e6      	ldr	r6, [r4, #28]
 80091d2:	68f3      	ldr	r3, [r6, #12]
 80091d4:	b183      	cbz	r3, 80091f8 <_Balloc+0x50>
 80091d6:	69e3      	ldr	r3, [r4, #28]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091de:	b9b8      	cbnz	r0, 8009210 <_Balloc+0x68>
 80091e0:	2101      	movs	r1, #1
 80091e2:	fa01 f605 	lsl.w	r6, r1, r5
 80091e6:	1d72      	adds	r2, r6, #5
 80091e8:	0092      	lsls	r2, r2, #2
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 ff76 	bl	800a0dc <_calloc_r>
 80091f0:	b160      	cbz	r0, 800920c <_Balloc+0x64>
 80091f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091f6:	e00e      	b.n	8009216 <_Balloc+0x6e>
 80091f8:	2221      	movs	r2, #33	@ 0x21
 80091fa:	2104      	movs	r1, #4
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 ff6d 	bl	800a0dc <_calloc_r>
 8009202:	69e3      	ldr	r3, [r4, #28]
 8009204:	60f0      	str	r0, [r6, #12]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e4      	bne.n	80091d6 <_Balloc+0x2e>
 800920c:	2000      	movs	r0, #0
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	6802      	ldr	r2, [r0, #0]
 8009212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009216:	2300      	movs	r3, #0
 8009218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800921c:	e7f7      	b.n	800920e <_Balloc+0x66>
 800921e:	bf00      	nop
 8009220:	0800ab5d 	.word	0x0800ab5d
 8009224:	0800abdd 	.word	0x0800abdd

08009228 <_Bfree>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	69c6      	ldr	r6, [r0, #28]
 800922c:	4605      	mov	r5, r0
 800922e:	460c      	mov	r4, r1
 8009230:	b976      	cbnz	r6, 8009250 <_Bfree+0x28>
 8009232:	2010      	movs	r0, #16
 8009234:	f7ff ff02 	bl	800903c <malloc>
 8009238:	4602      	mov	r2, r0
 800923a:	61e8      	str	r0, [r5, #28]
 800923c:	b920      	cbnz	r0, 8009248 <_Bfree+0x20>
 800923e:	4b09      	ldr	r3, [pc, #36]	@ (8009264 <_Bfree+0x3c>)
 8009240:	4809      	ldr	r0, [pc, #36]	@ (8009268 <_Bfree+0x40>)
 8009242:	218f      	movs	r1, #143	@ 0x8f
 8009244:	f000 ff2c 	bl	800a0a0 <__assert_func>
 8009248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800924c:	6006      	str	r6, [r0, #0]
 800924e:	60c6      	str	r6, [r0, #12]
 8009250:	b13c      	cbz	r4, 8009262 <_Bfree+0x3a>
 8009252:	69eb      	ldr	r3, [r5, #28]
 8009254:	6862      	ldr	r2, [r4, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800925c:	6021      	str	r1, [r4, #0]
 800925e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	0800ab5d 	.word	0x0800ab5d
 8009268:	0800abdd 	.word	0x0800abdd

0800926c <__multadd>:
 800926c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009270:	690d      	ldr	r5, [r1, #16]
 8009272:	4607      	mov	r7, r0
 8009274:	460c      	mov	r4, r1
 8009276:	461e      	mov	r6, r3
 8009278:	f101 0c14 	add.w	ip, r1, #20
 800927c:	2000      	movs	r0, #0
 800927e:	f8dc 3000 	ldr.w	r3, [ip]
 8009282:	b299      	uxth	r1, r3
 8009284:	fb02 6101 	mla	r1, r2, r1, r6
 8009288:	0c1e      	lsrs	r6, r3, #16
 800928a:	0c0b      	lsrs	r3, r1, #16
 800928c:	fb02 3306 	mla	r3, r2, r6, r3
 8009290:	b289      	uxth	r1, r1
 8009292:	3001      	adds	r0, #1
 8009294:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009298:	4285      	cmp	r5, r0
 800929a:	f84c 1b04 	str.w	r1, [ip], #4
 800929e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092a2:	dcec      	bgt.n	800927e <__multadd+0x12>
 80092a4:	b30e      	cbz	r6, 80092ea <__multadd+0x7e>
 80092a6:	68a3      	ldr	r3, [r4, #8]
 80092a8:	42ab      	cmp	r3, r5
 80092aa:	dc19      	bgt.n	80092e0 <__multadd+0x74>
 80092ac:	6861      	ldr	r1, [r4, #4]
 80092ae:	4638      	mov	r0, r7
 80092b0:	3101      	adds	r1, #1
 80092b2:	f7ff ff79 	bl	80091a8 <_Balloc>
 80092b6:	4680      	mov	r8, r0
 80092b8:	b928      	cbnz	r0, 80092c6 <__multadd+0x5a>
 80092ba:	4602      	mov	r2, r0
 80092bc:	4b0c      	ldr	r3, [pc, #48]	@ (80092f0 <__multadd+0x84>)
 80092be:	480d      	ldr	r0, [pc, #52]	@ (80092f4 <__multadd+0x88>)
 80092c0:	21ba      	movs	r1, #186	@ 0xba
 80092c2:	f000 feed 	bl	800a0a0 <__assert_func>
 80092c6:	6922      	ldr	r2, [r4, #16]
 80092c8:	3202      	adds	r2, #2
 80092ca:	f104 010c 	add.w	r1, r4, #12
 80092ce:	0092      	lsls	r2, r2, #2
 80092d0:	300c      	adds	r0, #12
 80092d2:	f000 fed7 	bl	800a084 <memcpy>
 80092d6:	4621      	mov	r1, r4
 80092d8:	4638      	mov	r0, r7
 80092da:	f7ff ffa5 	bl	8009228 <_Bfree>
 80092de:	4644      	mov	r4, r8
 80092e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092e4:	3501      	adds	r5, #1
 80092e6:	615e      	str	r6, [r3, #20]
 80092e8:	6125      	str	r5, [r4, #16]
 80092ea:	4620      	mov	r0, r4
 80092ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f0:	0800abcc 	.word	0x0800abcc
 80092f4:	0800abdd 	.word	0x0800abdd

080092f8 <__hi0bits>:
 80092f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092fc:	4603      	mov	r3, r0
 80092fe:	bf36      	itet	cc
 8009300:	0403      	lslcc	r3, r0, #16
 8009302:	2000      	movcs	r0, #0
 8009304:	2010      	movcc	r0, #16
 8009306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800930a:	bf3c      	itt	cc
 800930c:	021b      	lslcc	r3, r3, #8
 800930e:	3008      	addcc	r0, #8
 8009310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009314:	bf3c      	itt	cc
 8009316:	011b      	lslcc	r3, r3, #4
 8009318:	3004      	addcc	r0, #4
 800931a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800931e:	bf3c      	itt	cc
 8009320:	009b      	lslcc	r3, r3, #2
 8009322:	3002      	addcc	r0, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	db05      	blt.n	8009334 <__hi0bits+0x3c>
 8009328:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800932c:	f100 0001 	add.w	r0, r0, #1
 8009330:	bf08      	it	eq
 8009332:	2020      	moveq	r0, #32
 8009334:	4770      	bx	lr

08009336 <__lo0bits>:
 8009336:	6803      	ldr	r3, [r0, #0]
 8009338:	4602      	mov	r2, r0
 800933a:	f013 0007 	ands.w	r0, r3, #7
 800933e:	d00b      	beq.n	8009358 <__lo0bits+0x22>
 8009340:	07d9      	lsls	r1, r3, #31
 8009342:	d421      	bmi.n	8009388 <__lo0bits+0x52>
 8009344:	0798      	lsls	r0, r3, #30
 8009346:	bf49      	itett	mi
 8009348:	085b      	lsrmi	r3, r3, #1
 800934a:	089b      	lsrpl	r3, r3, #2
 800934c:	2001      	movmi	r0, #1
 800934e:	6013      	strmi	r3, [r2, #0]
 8009350:	bf5c      	itt	pl
 8009352:	6013      	strpl	r3, [r2, #0]
 8009354:	2002      	movpl	r0, #2
 8009356:	4770      	bx	lr
 8009358:	b299      	uxth	r1, r3
 800935a:	b909      	cbnz	r1, 8009360 <__lo0bits+0x2a>
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	2010      	movs	r0, #16
 8009360:	b2d9      	uxtb	r1, r3
 8009362:	b909      	cbnz	r1, 8009368 <__lo0bits+0x32>
 8009364:	3008      	adds	r0, #8
 8009366:	0a1b      	lsrs	r3, r3, #8
 8009368:	0719      	lsls	r1, r3, #28
 800936a:	bf04      	itt	eq
 800936c:	091b      	lsreq	r3, r3, #4
 800936e:	3004      	addeq	r0, #4
 8009370:	0799      	lsls	r1, r3, #30
 8009372:	bf04      	itt	eq
 8009374:	089b      	lsreq	r3, r3, #2
 8009376:	3002      	addeq	r0, #2
 8009378:	07d9      	lsls	r1, r3, #31
 800937a:	d403      	bmi.n	8009384 <__lo0bits+0x4e>
 800937c:	085b      	lsrs	r3, r3, #1
 800937e:	f100 0001 	add.w	r0, r0, #1
 8009382:	d003      	beq.n	800938c <__lo0bits+0x56>
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	4770      	bx	lr
 8009388:	2000      	movs	r0, #0
 800938a:	4770      	bx	lr
 800938c:	2020      	movs	r0, #32
 800938e:	4770      	bx	lr

08009390 <__i2b>:
 8009390:	b510      	push	{r4, lr}
 8009392:	460c      	mov	r4, r1
 8009394:	2101      	movs	r1, #1
 8009396:	f7ff ff07 	bl	80091a8 <_Balloc>
 800939a:	4602      	mov	r2, r0
 800939c:	b928      	cbnz	r0, 80093aa <__i2b+0x1a>
 800939e:	4b05      	ldr	r3, [pc, #20]	@ (80093b4 <__i2b+0x24>)
 80093a0:	4805      	ldr	r0, [pc, #20]	@ (80093b8 <__i2b+0x28>)
 80093a2:	f240 1145 	movw	r1, #325	@ 0x145
 80093a6:	f000 fe7b 	bl	800a0a0 <__assert_func>
 80093aa:	2301      	movs	r3, #1
 80093ac:	6144      	str	r4, [r0, #20]
 80093ae:	6103      	str	r3, [r0, #16]
 80093b0:	bd10      	pop	{r4, pc}
 80093b2:	bf00      	nop
 80093b4:	0800abcc 	.word	0x0800abcc
 80093b8:	0800abdd 	.word	0x0800abdd

080093bc <__multiply>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	4617      	mov	r7, r2
 80093c2:	690a      	ldr	r2, [r1, #16]
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	bfa8      	it	ge
 80093ca:	463b      	movge	r3, r7
 80093cc:	4689      	mov	r9, r1
 80093ce:	bfa4      	itt	ge
 80093d0:	460f      	movge	r7, r1
 80093d2:	4699      	movge	r9, r3
 80093d4:	693d      	ldr	r5, [r7, #16]
 80093d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	eb05 060a 	add.w	r6, r5, sl
 80093e2:	42b3      	cmp	r3, r6
 80093e4:	b085      	sub	sp, #20
 80093e6:	bfb8      	it	lt
 80093e8:	3101      	addlt	r1, #1
 80093ea:	f7ff fedd 	bl	80091a8 <_Balloc>
 80093ee:	b930      	cbnz	r0, 80093fe <__multiply+0x42>
 80093f0:	4602      	mov	r2, r0
 80093f2:	4b41      	ldr	r3, [pc, #260]	@ (80094f8 <__multiply+0x13c>)
 80093f4:	4841      	ldr	r0, [pc, #260]	@ (80094fc <__multiply+0x140>)
 80093f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093fa:	f000 fe51 	bl	800a0a0 <__assert_func>
 80093fe:	f100 0414 	add.w	r4, r0, #20
 8009402:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009406:	4623      	mov	r3, r4
 8009408:	2200      	movs	r2, #0
 800940a:	4573      	cmp	r3, lr
 800940c:	d320      	bcc.n	8009450 <__multiply+0x94>
 800940e:	f107 0814 	add.w	r8, r7, #20
 8009412:	f109 0114 	add.w	r1, r9, #20
 8009416:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800941a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800941e:	9302      	str	r3, [sp, #8]
 8009420:	1beb      	subs	r3, r5, r7
 8009422:	3b15      	subs	r3, #21
 8009424:	f023 0303 	bic.w	r3, r3, #3
 8009428:	3304      	adds	r3, #4
 800942a:	3715      	adds	r7, #21
 800942c:	42bd      	cmp	r5, r7
 800942e:	bf38      	it	cc
 8009430:	2304      	movcc	r3, #4
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	9b02      	ldr	r3, [sp, #8]
 8009436:	9103      	str	r1, [sp, #12]
 8009438:	428b      	cmp	r3, r1
 800943a:	d80c      	bhi.n	8009456 <__multiply+0x9a>
 800943c:	2e00      	cmp	r6, #0
 800943e:	dd03      	ble.n	8009448 <__multiply+0x8c>
 8009440:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009444:	2b00      	cmp	r3, #0
 8009446:	d055      	beq.n	80094f4 <__multiply+0x138>
 8009448:	6106      	str	r6, [r0, #16]
 800944a:	b005      	add	sp, #20
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009450:	f843 2b04 	str.w	r2, [r3], #4
 8009454:	e7d9      	b.n	800940a <__multiply+0x4e>
 8009456:	f8b1 a000 	ldrh.w	sl, [r1]
 800945a:	f1ba 0f00 	cmp.w	sl, #0
 800945e:	d01f      	beq.n	80094a0 <__multiply+0xe4>
 8009460:	46c4      	mov	ip, r8
 8009462:	46a1      	mov	r9, r4
 8009464:	2700      	movs	r7, #0
 8009466:	f85c 2b04 	ldr.w	r2, [ip], #4
 800946a:	f8d9 3000 	ldr.w	r3, [r9]
 800946e:	fa1f fb82 	uxth.w	fp, r2
 8009472:	b29b      	uxth	r3, r3
 8009474:	fb0a 330b 	mla	r3, sl, fp, r3
 8009478:	443b      	add	r3, r7
 800947a:	f8d9 7000 	ldr.w	r7, [r9]
 800947e:	0c12      	lsrs	r2, r2, #16
 8009480:	0c3f      	lsrs	r7, r7, #16
 8009482:	fb0a 7202 	mla	r2, sl, r2, r7
 8009486:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800948a:	b29b      	uxth	r3, r3
 800948c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009490:	4565      	cmp	r5, ip
 8009492:	f849 3b04 	str.w	r3, [r9], #4
 8009496:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800949a:	d8e4      	bhi.n	8009466 <__multiply+0xaa>
 800949c:	9b01      	ldr	r3, [sp, #4]
 800949e:	50e7      	str	r7, [r4, r3]
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80094a6:	3104      	adds	r1, #4
 80094a8:	f1b9 0f00 	cmp.w	r9, #0
 80094ac:	d020      	beq.n	80094f0 <__multiply+0x134>
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	4647      	mov	r7, r8
 80094b2:	46a4      	mov	ip, r4
 80094b4:	f04f 0a00 	mov.w	sl, #0
 80094b8:	f8b7 b000 	ldrh.w	fp, [r7]
 80094bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80094c0:	fb09 220b 	mla	r2, r9, fp, r2
 80094c4:	4452      	add	r2, sl
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094cc:	f84c 3b04 	str.w	r3, [ip], #4
 80094d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80094d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094d8:	f8bc 3000 	ldrh.w	r3, [ip]
 80094dc:	fb09 330a 	mla	r3, r9, sl, r3
 80094e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80094e4:	42bd      	cmp	r5, r7
 80094e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ea:	d8e5      	bhi.n	80094b8 <__multiply+0xfc>
 80094ec:	9a01      	ldr	r2, [sp, #4]
 80094ee:	50a3      	str	r3, [r4, r2]
 80094f0:	3404      	adds	r4, #4
 80094f2:	e79f      	b.n	8009434 <__multiply+0x78>
 80094f4:	3e01      	subs	r6, #1
 80094f6:	e7a1      	b.n	800943c <__multiply+0x80>
 80094f8:	0800abcc 	.word	0x0800abcc
 80094fc:	0800abdd 	.word	0x0800abdd

08009500 <__pow5mult>:
 8009500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009504:	4615      	mov	r5, r2
 8009506:	f012 0203 	ands.w	r2, r2, #3
 800950a:	4607      	mov	r7, r0
 800950c:	460e      	mov	r6, r1
 800950e:	d007      	beq.n	8009520 <__pow5mult+0x20>
 8009510:	4c25      	ldr	r4, [pc, #148]	@ (80095a8 <__pow5mult+0xa8>)
 8009512:	3a01      	subs	r2, #1
 8009514:	2300      	movs	r3, #0
 8009516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800951a:	f7ff fea7 	bl	800926c <__multadd>
 800951e:	4606      	mov	r6, r0
 8009520:	10ad      	asrs	r5, r5, #2
 8009522:	d03d      	beq.n	80095a0 <__pow5mult+0xa0>
 8009524:	69fc      	ldr	r4, [r7, #28]
 8009526:	b97c      	cbnz	r4, 8009548 <__pow5mult+0x48>
 8009528:	2010      	movs	r0, #16
 800952a:	f7ff fd87 	bl	800903c <malloc>
 800952e:	4602      	mov	r2, r0
 8009530:	61f8      	str	r0, [r7, #28]
 8009532:	b928      	cbnz	r0, 8009540 <__pow5mult+0x40>
 8009534:	4b1d      	ldr	r3, [pc, #116]	@ (80095ac <__pow5mult+0xac>)
 8009536:	481e      	ldr	r0, [pc, #120]	@ (80095b0 <__pow5mult+0xb0>)
 8009538:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800953c:	f000 fdb0 	bl	800a0a0 <__assert_func>
 8009540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009544:	6004      	str	r4, [r0, #0]
 8009546:	60c4      	str	r4, [r0, #12]
 8009548:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800954c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009550:	b94c      	cbnz	r4, 8009566 <__pow5mult+0x66>
 8009552:	f240 2171 	movw	r1, #625	@ 0x271
 8009556:	4638      	mov	r0, r7
 8009558:	f7ff ff1a 	bl	8009390 <__i2b>
 800955c:	2300      	movs	r3, #0
 800955e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009562:	4604      	mov	r4, r0
 8009564:	6003      	str	r3, [r0, #0]
 8009566:	f04f 0900 	mov.w	r9, #0
 800956a:	07eb      	lsls	r3, r5, #31
 800956c:	d50a      	bpl.n	8009584 <__pow5mult+0x84>
 800956e:	4631      	mov	r1, r6
 8009570:	4622      	mov	r2, r4
 8009572:	4638      	mov	r0, r7
 8009574:	f7ff ff22 	bl	80093bc <__multiply>
 8009578:	4631      	mov	r1, r6
 800957a:	4680      	mov	r8, r0
 800957c:	4638      	mov	r0, r7
 800957e:	f7ff fe53 	bl	8009228 <_Bfree>
 8009582:	4646      	mov	r6, r8
 8009584:	106d      	asrs	r5, r5, #1
 8009586:	d00b      	beq.n	80095a0 <__pow5mult+0xa0>
 8009588:	6820      	ldr	r0, [r4, #0]
 800958a:	b938      	cbnz	r0, 800959c <__pow5mult+0x9c>
 800958c:	4622      	mov	r2, r4
 800958e:	4621      	mov	r1, r4
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff ff13 	bl	80093bc <__multiply>
 8009596:	6020      	str	r0, [r4, #0]
 8009598:	f8c0 9000 	str.w	r9, [r0]
 800959c:	4604      	mov	r4, r0
 800959e:	e7e4      	b.n	800956a <__pow5mult+0x6a>
 80095a0:	4630      	mov	r0, r6
 80095a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a6:	bf00      	nop
 80095a8:	0800ac90 	.word	0x0800ac90
 80095ac:	0800ab5d 	.word	0x0800ab5d
 80095b0:	0800abdd 	.word	0x0800abdd

080095b4 <__lshift>:
 80095b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	460c      	mov	r4, r1
 80095ba:	6849      	ldr	r1, [r1, #4]
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	4607      	mov	r7, r0
 80095c6:	4691      	mov	r9, r2
 80095c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095cc:	f108 0601 	add.w	r6, r8, #1
 80095d0:	42b3      	cmp	r3, r6
 80095d2:	db0b      	blt.n	80095ec <__lshift+0x38>
 80095d4:	4638      	mov	r0, r7
 80095d6:	f7ff fde7 	bl	80091a8 <_Balloc>
 80095da:	4605      	mov	r5, r0
 80095dc:	b948      	cbnz	r0, 80095f2 <__lshift+0x3e>
 80095de:	4602      	mov	r2, r0
 80095e0:	4b28      	ldr	r3, [pc, #160]	@ (8009684 <__lshift+0xd0>)
 80095e2:	4829      	ldr	r0, [pc, #164]	@ (8009688 <__lshift+0xd4>)
 80095e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095e8:	f000 fd5a 	bl	800a0a0 <__assert_func>
 80095ec:	3101      	adds	r1, #1
 80095ee:	005b      	lsls	r3, r3, #1
 80095f0:	e7ee      	b.n	80095d0 <__lshift+0x1c>
 80095f2:	2300      	movs	r3, #0
 80095f4:	f100 0114 	add.w	r1, r0, #20
 80095f8:	f100 0210 	add.w	r2, r0, #16
 80095fc:	4618      	mov	r0, r3
 80095fe:	4553      	cmp	r3, sl
 8009600:	db33      	blt.n	800966a <__lshift+0xb6>
 8009602:	6920      	ldr	r0, [r4, #16]
 8009604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009608:	f104 0314 	add.w	r3, r4, #20
 800960c:	f019 091f 	ands.w	r9, r9, #31
 8009610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009614:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009618:	d02b      	beq.n	8009672 <__lshift+0xbe>
 800961a:	f1c9 0e20 	rsb	lr, r9, #32
 800961e:	468a      	mov	sl, r1
 8009620:	2200      	movs	r2, #0
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	fa00 f009 	lsl.w	r0, r0, r9
 8009628:	4310      	orrs	r0, r2
 800962a:	f84a 0b04 	str.w	r0, [sl], #4
 800962e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009632:	459c      	cmp	ip, r3
 8009634:	fa22 f20e 	lsr.w	r2, r2, lr
 8009638:	d8f3      	bhi.n	8009622 <__lshift+0x6e>
 800963a:	ebac 0304 	sub.w	r3, ip, r4
 800963e:	3b15      	subs	r3, #21
 8009640:	f023 0303 	bic.w	r3, r3, #3
 8009644:	3304      	adds	r3, #4
 8009646:	f104 0015 	add.w	r0, r4, #21
 800964a:	4560      	cmp	r0, ip
 800964c:	bf88      	it	hi
 800964e:	2304      	movhi	r3, #4
 8009650:	50ca      	str	r2, [r1, r3]
 8009652:	b10a      	cbz	r2, 8009658 <__lshift+0xa4>
 8009654:	f108 0602 	add.w	r6, r8, #2
 8009658:	3e01      	subs	r6, #1
 800965a:	4638      	mov	r0, r7
 800965c:	612e      	str	r6, [r5, #16]
 800965e:	4621      	mov	r1, r4
 8009660:	f7ff fde2 	bl	8009228 <_Bfree>
 8009664:	4628      	mov	r0, r5
 8009666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966a:	f842 0f04 	str.w	r0, [r2, #4]!
 800966e:	3301      	adds	r3, #1
 8009670:	e7c5      	b.n	80095fe <__lshift+0x4a>
 8009672:	3904      	subs	r1, #4
 8009674:	f853 2b04 	ldr.w	r2, [r3], #4
 8009678:	f841 2f04 	str.w	r2, [r1, #4]!
 800967c:	459c      	cmp	ip, r3
 800967e:	d8f9      	bhi.n	8009674 <__lshift+0xc0>
 8009680:	e7ea      	b.n	8009658 <__lshift+0xa4>
 8009682:	bf00      	nop
 8009684:	0800abcc 	.word	0x0800abcc
 8009688:	0800abdd 	.word	0x0800abdd

0800968c <__mcmp>:
 800968c:	690a      	ldr	r2, [r1, #16]
 800968e:	4603      	mov	r3, r0
 8009690:	6900      	ldr	r0, [r0, #16]
 8009692:	1a80      	subs	r0, r0, r2
 8009694:	b530      	push	{r4, r5, lr}
 8009696:	d10e      	bne.n	80096b6 <__mcmp+0x2a>
 8009698:	3314      	adds	r3, #20
 800969a:	3114      	adds	r1, #20
 800969c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80096a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80096a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096ac:	4295      	cmp	r5, r2
 80096ae:	d003      	beq.n	80096b8 <__mcmp+0x2c>
 80096b0:	d205      	bcs.n	80096be <__mcmp+0x32>
 80096b2:	f04f 30ff 	mov.w	r0, #4294967295
 80096b6:	bd30      	pop	{r4, r5, pc}
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d3f3      	bcc.n	80096a4 <__mcmp+0x18>
 80096bc:	e7fb      	b.n	80096b6 <__mcmp+0x2a>
 80096be:	2001      	movs	r0, #1
 80096c0:	e7f9      	b.n	80096b6 <__mcmp+0x2a>
	...

080096c4 <__mdiff>:
 80096c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c8:	4689      	mov	r9, r1
 80096ca:	4606      	mov	r6, r0
 80096cc:	4611      	mov	r1, r2
 80096ce:	4648      	mov	r0, r9
 80096d0:	4614      	mov	r4, r2
 80096d2:	f7ff ffdb 	bl	800968c <__mcmp>
 80096d6:	1e05      	subs	r5, r0, #0
 80096d8:	d112      	bne.n	8009700 <__mdiff+0x3c>
 80096da:	4629      	mov	r1, r5
 80096dc:	4630      	mov	r0, r6
 80096de:	f7ff fd63 	bl	80091a8 <_Balloc>
 80096e2:	4602      	mov	r2, r0
 80096e4:	b928      	cbnz	r0, 80096f2 <__mdiff+0x2e>
 80096e6:	4b3f      	ldr	r3, [pc, #252]	@ (80097e4 <__mdiff+0x120>)
 80096e8:	f240 2137 	movw	r1, #567	@ 0x237
 80096ec:	483e      	ldr	r0, [pc, #248]	@ (80097e8 <__mdiff+0x124>)
 80096ee:	f000 fcd7 	bl	800a0a0 <__assert_func>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096f8:	4610      	mov	r0, r2
 80096fa:	b003      	add	sp, #12
 80096fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009700:	bfbc      	itt	lt
 8009702:	464b      	movlt	r3, r9
 8009704:	46a1      	movlt	r9, r4
 8009706:	4630      	mov	r0, r6
 8009708:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800970c:	bfba      	itte	lt
 800970e:	461c      	movlt	r4, r3
 8009710:	2501      	movlt	r5, #1
 8009712:	2500      	movge	r5, #0
 8009714:	f7ff fd48 	bl	80091a8 <_Balloc>
 8009718:	4602      	mov	r2, r0
 800971a:	b918      	cbnz	r0, 8009724 <__mdiff+0x60>
 800971c:	4b31      	ldr	r3, [pc, #196]	@ (80097e4 <__mdiff+0x120>)
 800971e:	f240 2145 	movw	r1, #581	@ 0x245
 8009722:	e7e3      	b.n	80096ec <__mdiff+0x28>
 8009724:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009728:	6926      	ldr	r6, [r4, #16]
 800972a:	60c5      	str	r5, [r0, #12]
 800972c:	f109 0310 	add.w	r3, r9, #16
 8009730:	f109 0514 	add.w	r5, r9, #20
 8009734:	f104 0e14 	add.w	lr, r4, #20
 8009738:	f100 0b14 	add.w	fp, r0, #20
 800973c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009740:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	46d9      	mov	r9, fp
 8009748:	f04f 0c00 	mov.w	ip, #0
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009752:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	fa1f f38a 	uxth.w	r3, sl
 800975c:	4619      	mov	r1, r3
 800975e:	b283      	uxth	r3, r0
 8009760:	1acb      	subs	r3, r1, r3
 8009762:	0c00      	lsrs	r0, r0, #16
 8009764:	4463      	add	r3, ip
 8009766:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800976a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800976e:	b29b      	uxth	r3, r3
 8009770:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009774:	4576      	cmp	r6, lr
 8009776:	f849 3b04 	str.w	r3, [r9], #4
 800977a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800977e:	d8e5      	bhi.n	800974c <__mdiff+0x88>
 8009780:	1b33      	subs	r3, r6, r4
 8009782:	3b15      	subs	r3, #21
 8009784:	f023 0303 	bic.w	r3, r3, #3
 8009788:	3415      	adds	r4, #21
 800978a:	3304      	adds	r3, #4
 800978c:	42a6      	cmp	r6, r4
 800978e:	bf38      	it	cc
 8009790:	2304      	movcc	r3, #4
 8009792:	441d      	add	r5, r3
 8009794:	445b      	add	r3, fp
 8009796:	461e      	mov	r6, r3
 8009798:	462c      	mov	r4, r5
 800979a:	4544      	cmp	r4, r8
 800979c:	d30e      	bcc.n	80097bc <__mdiff+0xf8>
 800979e:	f108 0103 	add.w	r1, r8, #3
 80097a2:	1b49      	subs	r1, r1, r5
 80097a4:	f021 0103 	bic.w	r1, r1, #3
 80097a8:	3d03      	subs	r5, #3
 80097aa:	45a8      	cmp	r8, r5
 80097ac:	bf38      	it	cc
 80097ae:	2100      	movcc	r1, #0
 80097b0:	440b      	add	r3, r1
 80097b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097b6:	b191      	cbz	r1, 80097de <__mdiff+0x11a>
 80097b8:	6117      	str	r7, [r2, #16]
 80097ba:	e79d      	b.n	80096f8 <__mdiff+0x34>
 80097bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80097c0:	46e6      	mov	lr, ip
 80097c2:	0c08      	lsrs	r0, r1, #16
 80097c4:	fa1c fc81 	uxtah	ip, ip, r1
 80097c8:	4471      	add	r1, lr
 80097ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80097ce:	b289      	uxth	r1, r1
 80097d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80097d4:	f846 1b04 	str.w	r1, [r6], #4
 80097d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097dc:	e7dd      	b.n	800979a <__mdiff+0xd6>
 80097de:	3f01      	subs	r7, #1
 80097e0:	e7e7      	b.n	80097b2 <__mdiff+0xee>
 80097e2:	bf00      	nop
 80097e4:	0800abcc 	.word	0x0800abcc
 80097e8:	0800abdd 	.word	0x0800abdd

080097ec <__d2b>:
 80097ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097f0:	460f      	mov	r7, r1
 80097f2:	2101      	movs	r1, #1
 80097f4:	ec59 8b10 	vmov	r8, r9, d0
 80097f8:	4616      	mov	r6, r2
 80097fa:	f7ff fcd5 	bl	80091a8 <_Balloc>
 80097fe:	4604      	mov	r4, r0
 8009800:	b930      	cbnz	r0, 8009810 <__d2b+0x24>
 8009802:	4602      	mov	r2, r0
 8009804:	4b23      	ldr	r3, [pc, #140]	@ (8009894 <__d2b+0xa8>)
 8009806:	4824      	ldr	r0, [pc, #144]	@ (8009898 <__d2b+0xac>)
 8009808:	f240 310f 	movw	r1, #783	@ 0x30f
 800980c:	f000 fc48 	bl	800a0a0 <__assert_func>
 8009810:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009814:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009818:	b10d      	cbz	r5, 800981e <__d2b+0x32>
 800981a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	f1b8 0300 	subs.w	r3, r8, #0
 8009824:	d023      	beq.n	800986e <__d2b+0x82>
 8009826:	4668      	mov	r0, sp
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	f7ff fd84 	bl	8009336 <__lo0bits>
 800982e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009832:	b1d0      	cbz	r0, 800986a <__d2b+0x7e>
 8009834:	f1c0 0320 	rsb	r3, r0, #32
 8009838:	fa02 f303 	lsl.w	r3, r2, r3
 800983c:	430b      	orrs	r3, r1
 800983e:	40c2      	lsrs	r2, r0
 8009840:	6163      	str	r3, [r4, #20]
 8009842:	9201      	str	r2, [sp, #4]
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	61a3      	str	r3, [r4, #24]
 8009848:	2b00      	cmp	r3, #0
 800984a:	bf0c      	ite	eq
 800984c:	2201      	moveq	r2, #1
 800984e:	2202      	movne	r2, #2
 8009850:	6122      	str	r2, [r4, #16]
 8009852:	b1a5      	cbz	r5, 800987e <__d2b+0x92>
 8009854:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009858:	4405      	add	r5, r0
 800985a:	603d      	str	r5, [r7, #0]
 800985c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009860:	6030      	str	r0, [r6, #0]
 8009862:	4620      	mov	r0, r4
 8009864:	b003      	add	sp, #12
 8009866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800986a:	6161      	str	r1, [r4, #20]
 800986c:	e7ea      	b.n	8009844 <__d2b+0x58>
 800986e:	a801      	add	r0, sp, #4
 8009870:	f7ff fd61 	bl	8009336 <__lo0bits>
 8009874:	9b01      	ldr	r3, [sp, #4]
 8009876:	6163      	str	r3, [r4, #20]
 8009878:	3020      	adds	r0, #32
 800987a:	2201      	movs	r2, #1
 800987c:	e7e8      	b.n	8009850 <__d2b+0x64>
 800987e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009882:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009886:	6038      	str	r0, [r7, #0]
 8009888:	6918      	ldr	r0, [r3, #16]
 800988a:	f7ff fd35 	bl	80092f8 <__hi0bits>
 800988e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009892:	e7e5      	b.n	8009860 <__d2b+0x74>
 8009894:	0800abcc 	.word	0x0800abcc
 8009898:	0800abdd 	.word	0x0800abdd

0800989c <__ssputs_r>:
 800989c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a0:	688e      	ldr	r6, [r1, #8]
 80098a2:	461f      	mov	r7, r3
 80098a4:	42be      	cmp	r6, r7
 80098a6:	680b      	ldr	r3, [r1, #0]
 80098a8:	4682      	mov	sl, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	4690      	mov	r8, r2
 80098ae:	d82d      	bhi.n	800990c <__ssputs_r+0x70>
 80098b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098b8:	d026      	beq.n	8009908 <__ssputs_r+0x6c>
 80098ba:	6965      	ldr	r5, [r4, #20]
 80098bc:	6909      	ldr	r1, [r1, #16]
 80098be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c2:	eba3 0901 	sub.w	r9, r3, r1
 80098c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098ca:	1c7b      	adds	r3, r7, #1
 80098cc:	444b      	add	r3, r9
 80098ce:	106d      	asrs	r5, r5, #1
 80098d0:	429d      	cmp	r5, r3
 80098d2:	bf38      	it	cc
 80098d4:	461d      	movcc	r5, r3
 80098d6:	0553      	lsls	r3, r2, #21
 80098d8:	d527      	bpl.n	800992a <__ssputs_r+0x8e>
 80098da:	4629      	mov	r1, r5
 80098dc:	f7ff fbd8 	bl	8009090 <_malloc_r>
 80098e0:	4606      	mov	r6, r0
 80098e2:	b360      	cbz	r0, 800993e <__ssputs_r+0xa2>
 80098e4:	6921      	ldr	r1, [r4, #16]
 80098e6:	464a      	mov	r2, r9
 80098e8:	f000 fbcc 	bl	800a084 <memcpy>
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f6:	81a3      	strh	r3, [r4, #12]
 80098f8:	6126      	str	r6, [r4, #16]
 80098fa:	6165      	str	r5, [r4, #20]
 80098fc:	444e      	add	r6, r9
 80098fe:	eba5 0509 	sub.w	r5, r5, r9
 8009902:	6026      	str	r6, [r4, #0]
 8009904:	60a5      	str	r5, [r4, #8]
 8009906:	463e      	mov	r6, r7
 8009908:	42be      	cmp	r6, r7
 800990a:	d900      	bls.n	800990e <__ssputs_r+0x72>
 800990c:	463e      	mov	r6, r7
 800990e:	6820      	ldr	r0, [r4, #0]
 8009910:	4632      	mov	r2, r6
 8009912:	4641      	mov	r1, r8
 8009914:	f000 fb6a 	bl	8009fec <memmove>
 8009918:	68a3      	ldr	r3, [r4, #8]
 800991a:	1b9b      	subs	r3, r3, r6
 800991c:	60a3      	str	r3, [r4, #8]
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	4433      	add	r3, r6
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	2000      	movs	r0, #0
 8009926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992a:	462a      	mov	r2, r5
 800992c:	f000 fbfc 	bl	800a128 <_realloc_r>
 8009930:	4606      	mov	r6, r0
 8009932:	2800      	cmp	r0, #0
 8009934:	d1e0      	bne.n	80098f8 <__ssputs_r+0x5c>
 8009936:	6921      	ldr	r1, [r4, #16]
 8009938:	4650      	mov	r0, sl
 800993a:	f7ff fb35 	bl	8008fa8 <_free_r>
 800993e:	230c      	movs	r3, #12
 8009940:	f8ca 3000 	str.w	r3, [sl]
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800994a:	81a3      	strh	r3, [r4, #12]
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	e7e9      	b.n	8009926 <__ssputs_r+0x8a>
	...

08009954 <_svfiprintf_r>:
 8009954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009958:	4698      	mov	r8, r3
 800995a:	898b      	ldrh	r3, [r1, #12]
 800995c:	061b      	lsls	r3, r3, #24
 800995e:	b09d      	sub	sp, #116	@ 0x74
 8009960:	4607      	mov	r7, r0
 8009962:	460d      	mov	r5, r1
 8009964:	4614      	mov	r4, r2
 8009966:	d510      	bpl.n	800998a <_svfiprintf_r+0x36>
 8009968:	690b      	ldr	r3, [r1, #16]
 800996a:	b973      	cbnz	r3, 800998a <_svfiprintf_r+0x36>
 800996c:	2140      	movs	r1, #64	@ 0x40
 800996e:	f7ff fb8f 	bl	8009090 <_malloc_r>
 8009972:	6028      	str	r0, [r5, #0]
 8009974:	6128      	str	r0, [r5, #16]
 8009976:	b930      	cbnz	r0, 8009986 <_svfiprintf_r+0x32>
 8009978:	230c      	movs	r3, #12
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	b01d      	add	sp, #116	@ 0x74
 8009982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009986:	2340      	movs	r3, #64	@ 0x40
 8009988:	616b      	str	r3, [r5, #20]
 800998a:	2300      	movs	r3, #0
 800998c:	9309      	str	r3, [sp, #36]	@ 0x24
 800998e:	2320      	movs	r3, #32
 8009990:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009994:	f8cd 800c 	str.w	r8, [sp, #12]
 8009998:	2330      	movs	r3, #48	@ 0x30
 800999a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b38 <_svfiprintf_r+0x1e4>
 800999e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099a2:	f04f 0901 	mov.w	r9, #1
 80099a6:	4623      	mov	r3, r4
 80099a8:	469a      	mov	sl, r3
 80099aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ae:	b10a      	cbz	r2, 80099b4 <_svfiprintf_r+0x60>
 80099b0:	2a25      	cmp	r2, #37	@ 0x25
 80099b2:	d1f9      	bne.n	80099a8 <_svfiprintf_r+0x54>
 80099b4:	ebba 0b04 	subs.w	fp, sl, r4
 80099b8:	d00b      	beq.n	80099d2 <_svfiprintf_r+0x7e>
 80099ba:	465b      	mov	r3, fp
 80099bc:	4622      	mov	r2, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	4638      	mov	r0, r7
 80099c2:	f7ff ff6b 	bl	800989c <__ssputs_r>
 80099c6:	3001      	adds	r0, #1
 80099c8:	f000 80a7 	beq.w	8009b1a <_svfiprintf_r+0x1c6>
 80099cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ce:	445a      	add	r2, fp
 80099d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80099d2:	f89a 3000 	ldrb.w	r3, [sl]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 809f 	beq.w	8009b1a <_svfiprintf_r+0x1c6>
 80099dc:	2300      	movs	r3, #0
 80099de:	f04f 32ff 	mov.w	r2, #4294967295
 80099e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e6:	f10a 0a01 	add.w	sl, sl, #1
 80099ea:	9304      	str	r3, [sp, #16]
 80099ec:	9307      	str	r3, [sp, #28]
 80099ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80099f4:	4654      	mov	r4, sl
 80099f6:	2205      	movs	r2, #5
 80099f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fc:	484e      	ldr	r0, [pc, #312]	@ (8009b38 <_svfiprintf_r+0x1e4>)
 80099fe:	f7f6 fc0f 	bl	8000220 <memchr>
 8009a02:	9a04      	ldr	r2, [sp, #16]
 8009a04:	b9d8      	cbnz	r0, 8009a3e <_svfiprintf_r+0xea>
 8009a06:	06d0      	lsls	r0, r2, #27
 8009a08:	bf44      	itt	mi
 8009a0a:	2320      	movmi	r3, #32
 8009a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a10:	0711      	lsls	r1, r2, #28
 8009a12:	bf44      	itt	mi
 8009a14:	232b      	movmi	r3, #43	@ 0x2b
 8009a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a20:	d015      	beq.n	8009a4e <_svfiprintf_r+0xfa>
 8009a22:	9a07      	ldr	r2, [sp, #28]
 8009a24:	4654      	mov	r4, sl
 8009a26:	2000      	movs	r0, #0
 8009a28:	f04f 0c0a 	mov.w	ip, #10
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a32:	3b30      	subs	r3, #48	@ 0x30
 8009a34:	2b09      	cmp	r3, #9
 8009a36:	d94b      	bls.n	8009ad0 <_svfiprintf_r+0x17c>
 8009a38:	b1b0      	cbz	r0, 8009a68 <_svfiprintf_r+0x114>
 8009a3a:	9207      	str	r2, [sp, #28]
 8009a3c:	e014      	b.n	8009a68 <_svfiprintf_r+0x114>
 8009a3e:	eba0 0308 	sub.w	r3, r0, r8
 8009a42:	fa09 f303 	lsl.w	r3, r9, r3
 8009a46:	4313      	orrs	r3, r2
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	46a2      	mov	sl, r4
 8009a4c:	e7d2      	b.n	80099f4 <_svfiprintf_r+0xa0>
 8009a4e:	9b03      	ldr	r3, [sp, #12]
 8009a50:	1d19      	adds	r1, r3, #4
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	9103      	str	r1, [sp, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	bfbb      	ittet	lt
 8009a5a:	425b      	neglt	r3, r3
 8009a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a60:	9307      	strge	r3, [sp, #28]
 8009a62:	9307      	strlt	r3, [sp, #28]
 8009a64:	bfb8      	it	lt
 8009a66:	9204      	strlt	r2, [sp, #16]
 8009a68:	7823      	ldrb	r3, [r4, #0]
 8009a6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a6c:	d10a      	bne.n	8009a84 <_svfiprintf_r+0x130>
 8009a6e:	7863      	ldrb	r3, [r4, #1]
 8009a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a72:	d132      	bne.n	8009ada <_svfiprintf_r+0x186>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	1d1a      	adds	r2, r3, #4
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	9203      	str	r2, [sp, #12]
 8009a7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a80:	3402      	adds	r4, #2
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b48 <_svfiprintf_r+0x1f4>
 8009a88:	7821      	ldrb	r1, [r4, #0]
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	f7f6 fbc7 	bl	8000220 <memchr>
 8009a92:	b138      	cbz	r0, 8009aa4 <_svfiprintf_r+0x150>
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	eba0 000a 	sub.w	r0, r0, sl
 8009a9a:	2240      	movs	r2, #64	@ 0x40
 8009a9c:	4082      	lsls	r2, r0
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	3401      	adds	r4, #1
 8009aa2:	9304      	str	r3, [sp, #16]
 8009aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa8:	4824      	ldr	r0, [pc, #144]	@ (8009b3c <_svfiprintf_r+0x1e8>)
 8009aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009aae:	2206      	movs	r2, #6
 8009ab0:	f7f6 fbb6 	bl	8000220 <memchr>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d036      	beq.n	8009b26 <_svfiprintf_r+0x1d2>
 8009ab8:	4b21      	ldr	r3, [pc, #132]	@ (8009b40 <_svfiprintf_r+0x1ec>)
 8009aba:	bb1b      	cbnz	r3, 8009b04 <_svfiprintf_r+0x1b0>
 8009abc:	9b03      	ldr	r3, [sp, #12]
 8009abe:	3307      	adds	r3, #7
 8009ac0:	f023 0307 	bic.w	r3, r3, #7
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	9303      	str	r3, [sp, #12]
 8009ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aca:	4433      	add	r3, r6
 8009acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ace:	e76a      	b.n	80099a6 <_svfiprintf_r+0x52>
 8009ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	e7a8      	b.n	8009a2c <_svfiprintf_r+0xd8>
 8009ada:	2300      	movs	r3, #0
 8009adc:	3401      	adds	r4, #1
 8009ade:	9305      	str	r3, [sp, #20]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	f04f 0c0a 	mov.w	ip, #10
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aec:	3a30      	subs	r2, #48	@ 0x30
 8009aee:	2a09      	cmp	r2, #9
 8009af0:	d903      	bls.n	8009afa <_svfiprintf_r+0x1a6>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0c6      	beq.n	8009a84 <_svfiprintf_r+0x130>
 8009af6:	9105      	str	r1, [sp, #20]
 8009af8:	e7c4      	b.n	8009a84 <_svfiprintf_r+0x130>
 8009afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009afe:	4604      	mov	r4, r0
 8009b00:	2301      	movs	r3, #1
 8009b02:	e7f0      	b.n	8009ae6 <_svfiprintf_r+0x192>
 8009b04:	ab03      	add	r3, sp, #12
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	462a      	mov	r2, r5
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b44 <_svfiprintf_r+0x1f0>)
 8009b0c:	a904      	add	r1, sp, #16
 8009b0e:	4638      	mov	r0, r7
 8009b10:	f7fd fd7a 	bl	8007608 <_printf_float>
 8009b14:	1c42      	adds	r2, r0, #1
 8009b16:	4606      	mov	r6, r0
 8009b18:	d1d6      	bne.n	8009ac8 <_svfiprintf_r+0x174>
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	065b      	lsls	r3, r3, #25
 8009b1e:	f53f af2d 	bmi.w	800997c <_svfiprintf_r+0x28>
 8009b22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b24:	e72c      	b.n	8009980 <_svfiprintf_r+0x2c>
 8009b26:	ab03      	add	r3, sp, #12
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	462a      	mov	r2, r5
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <_svfiprintf_r+0x1f0>)
 8009b2e:	a904      	add	r1, sp, #16
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7fe f801 	bl	8007b38 <_printf_i>
 8009b36:	e7ed      	b.n	8009b14 <_svfiprintf_r+0x1c0>
 8009b38:	0800ac36 	.word	0x0800ac36
 8009b3c:	0800ac40 	.word	0x0800ac40
 8009b40:	08007609 	.word	0x08007609
 8009b44:	0800989d 	.word	0x0800989d
 8009b48:	0800ac3c 	.word	0x0800ac3c

08009b4c <__sfputc_r>:
 8009b4c:	6893      	ldr	r3, [r2, #8]
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	b410      	push	{r4}
 8009b54:	6093      	str	r3, [r2, #8]
 8009b56:	da08      	bge.n	8009b6a <__sfputc_r+0x1e>
 8009b58:	6994      	ldr	r4, [r2, #24]
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	db01      	blt.n	8009b62 <__sfputc_r+0x16>
 8009b5e:	290a      	cmp	r1, #10
 8009b60:	d103      	bne.n	8009b6a <__sfputc_r+0x1e>
 8009b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b66:	f7fe bab0 	b.w	80080ca <__swbuf_r>
 8009b6a:	6813      	ldr	r3, [r2, #0]
 8009b6c:	1c58      	adds	r0, r3, #1
 8009b6e:	6010      	str	r0, [r2, #0]
 8009b70:	7019      	strb	r1, [r3, #0]
 8009b72:	4608      	mov	r0, r1
 8009b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <__sfputs_r>:
 8009b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460f      	mov	r7, r1
 8009b80:	4614      	mov	r4, r2
 8009b82:	18d5      	adds	r5, r2, r3
 8009b84:	42ac      	cmp	r4, r5
 8009b86:	d101      	bne.n	8009b8c <__sfputs_r+0x12>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	e007      	b.n	8009b9c <__sfputs_r+0x22>
 8009b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b90:	463a      	mov	r2, r7
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7ff ffda 	bl	8009b4c <__sfputc_r>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d1f3      	bne.n	8009b84 <__sfputs_r+0xa>
 8009b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ba0 <_vfiprintf_r>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	460d      	mov	r5, r1
 8009ba6:	b09d      	sub	sp, #116	@ 0x74
 8009ba8:	4614      	mov	r4, r2
 8009baa:	4698      	mov	r8, r3
 8009bac:	4606      	mov	r6, r0
 8009bae:	b118      	cbz	r0, 8009bb8 <_vfiprintf_r+0x18>
 8009bb0:	6a03      	ldr	r3, [r0, #32]
 8009bb2:	b90b      	cbnz	r3, 8009bb8 <_vfiprintf_r+0x18>
 8009bb4:	f7fe f96a 	bl	8007e8c <__sinit>
 8009bb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bba:	07d9      	lsls	r1, r3, #31
 8009bbc:	d405      	bmi.n	8009bca <_vfiprintf_r+0x2a>
 8009bbe:	89ab      	ldrh	r3, [r5, #12]
 8009bc0:	059a      	lsls	r2, r3, #22
 8009bc2:	d402      	bmi.n	8009bca <_vfiprintf_r+0x2a>
 8009bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bc6:	f7fe fb92 	bl	80082ee <__retarget_lock_acquire_recursive>
 8009bca:	89ab      	ldrh	r3, [r5, #12]
 8009bcc:	071b      	lsls	r3, r3, #28
 8009bce:	d501      	bpl.n	8009bd4 <_vfiprintf_r+0x34>
 8009bd0:	692b      	ldr	r3, [r5, #16]
 8009bd2:	b99b      	cbnz	r3, 8009bfc <_vfiprintf_r+0x5c>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f7fe fab6 	bl	8008148 <__swsetup_r>
 8009bdc:	b170      	cbz	r0, 8009bfc <_vfiprintf_r+0x5c>
 8009bde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009be0:	07dc      	lsls	r4, r3, #31
 8009be2:	d504      	bpl.n	8009bee <_vfiprintf_r+0x4e>
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295
 8009be8:	b01d      	add	sp, #116	@ 0x74
 8009bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	0598      	lsls	r0, r3, #22
 8009bf2:	d4f7      	bmi.n	8009be4 <_vfiprintf_r+0x44>
 8009bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bf6:	f7fe fb7b 	bl	80082f0 <__retarget_lock_release_recursive>
 8009bfa:	e7f3      	b.n	8009be4 <_vfiprintf_r+0x44>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c00:	2320      	movs	r3, #32
 8009c02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c0a:	2330      	movs	r3, #48	@ 0x30
 8009c0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009dbc <_vfiprintf_r+0x21c>
 8009c10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c14:	f04f 0901 	mov.w	r9, #1
 8009c18:	4623      	mov	r3, r4
 8009c1a:	469a      	mov	sl, r3
 8009c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c20:	b10a      	cbz	r2, 8009c26 <_vfiprintf_r+0x86>
 8009c22:	2a25      	cmp	r2, #37	@ 0x25
 8009c24:	d1f9      	bne.n	8009c1a <_vfiprintf_r+0x7a>
 8009c26:	ebba 0b04 	subs.w	fp, sl, r4
 8009c2a:	d00b      	beq.n	8009c44 <_vfiprintf_r+0xa4>
 8009c2c:	465b      	mov	r3, fp
 8009c2e:	4622      	mov	r2, r4
 8009c30:	4629      	mov	r1, r5
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff ffa1 	bl	8009b7a <__sfputs_r>
 8009c38:	3001      	adds	r0, #1
 8009c3a:	f000 80a7 	beq.w	8009d8c <_vfiprintf_r+0x1ec>
 8009c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c40:	445a      	add	r2, fp
 8009c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c44:	f89a 3000 	ldrb.w	r3, [sl]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 809f 	beq.w	8009d8c <_vfiprintf_r+0x1ec>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f04f 32ff 	mov.w	r2, #4294967295
 8009c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c58:	f10a 0a01 	add.w	sl, sl, #1
 8009c5c:	9304      	str	r3, [sp, #16]
 8009c5e:	9307      	str	r3, [sp, #28]
 8009c60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c66:	4654      	mov	r4, sl
 8009c68:	2205      	movs	r2, #5
 8009c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6e:	4853      	ldr	r0, [pc, #332]	@ (8009dbc <_vfiprintf_r+0x21c>)
 8009c70:	f7f6 fad6 	bl	8000220 <memchr>
 8009c74:	9a04      	ldr	r2, [sp, #16]
 8009c76:	b9d8      	cbnz	r0, 8009cb0 <_vfiprintf_r+0x110>
 8009c78:	06d1      	lsls	r1, r2, #27
 8009c7a:	bf44      	itt	mi
 8009c7c:	2320      	movmi	r3, #32
 8009c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c82:	0713      	lsls	r3, r2, #28
 8009c84:	bf44      	itt	mi
 8009c86:	232b      	movmi	r3, #43	@ 0x2b
 8009c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c92:	d015      	beq.n	8009cc0 <_vfiprintf_r+0x120>
 8009c94:	9a07      	ldr	r2, [sp, #28]
 8009c96:	4654      	mov	r4, sl
 8009c98:	2000      	movs	r0, #0
 8009c9a:	f04f 0c0a 	mov.w	ip, #10
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ca4:	3b30      	subs	r3, #48	@ 0x30
 8009ca6:	2b09      	cmp	r3, #9
 8009ca8:	d94b      	bls.n	8009d42 <_vfiprintf_r+0x1a2>
 8009caa:	b1b0      	cbz	r0, 8009cda <_vfiprintf_r+0x13a>
 8009cac:	9207      	str	r2, [sp, #28]
 8009cae:	e014      	b.n	8009cda <_vfiprintf_r+0x13a>
 8009cb0:	eba0 0308 	sub.w	r3, r0, r8
 8009cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	46a2      	mov	sl, r4
 8009cbe:	e7d2      	b.n	8009c66 <_vfiprintf_r+0xc6>
 8009cc0:	9b03      	ldr	r3, [sp, #12]
 8009cc2:	1d19      	adds	r1, r3, #4
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	9103      	str	r1, [sp, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bfbb      	ittet	lt
 8009ccc:	425b      	neglt	r3, r3
 8009cce:	f042 0202 	orrlt.w	r2, r2, #2
 8009cd2:	9307      	strge	r3, [sp, #28]
 8009cd4:	9307      	strlt	r3, [sp, #28]
 8009cd6:	bfb8      	it	lt
 8009cd8:	9204      	strlt	r2, [sp, #16]
 8009cda:	7823      	ldrb	r3, [r4, #0]
 8009cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cde:	d10a      	bne.n	8009cf6 <_vfiprintf_r+0x156>
 8009ce0:	7863      	ldrb	r3, [r4, #1]
 8009ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ce4:	d132      	bne.n	8009d4c <_vfiprintf_r+0x1ac>
 8009ce6:	9b03      	ldr	r3, [sp, #12]
 8009ce8:	1d1a      	adds	r2, r3, #4
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	9203      	str	r2, [sp, #12]
 8009cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cf2:	3402      	adds	r4, #2
 8009cf4:	9305      	str	r3, [sp, #20]
 8009cf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009dcc <_vfiprintf_r+0x22c>
 8009cfa:	7821      	ldrb	r1, [r4, #0]
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	4650      	mov	r0, sl
 8009d00:	f7f6 fa8e 	bl	8000220 <memchr>
 8009d04:	b138      	cbz	r0, 8009d16 <_vfiprintf_r+0x176>
 8009d06:	9b04      	ldr	r3, [sp, #16]
 8009d08:	eba0 000a 	sub.w	r0, r0, sl
 8009d0c:	2240      	movs	r2, #64	@ 0x40
 8009d0e:	4082      	lsls	r2, r0
 8009d10:	4313      	orrs	r3, r2
 8009d12:	3401      	adds	r4, #1
 8009d14:	9304      	str	r3, [sp, #16]
 8009d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1a:	4829      	ldr	r0, [pc, #164]	@ (8009dc0 <_vfiprintf_r+0x220>)
 8009d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d20:	2206      	movs	r2, #6
 8009d22:	f7f6 fa7d 	bl	8000220 <memchr>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d03f      	beq.n	8009daa <_vfiprintf_r+0x20a>
 8009d2a:	4b26      	ldr	r3, [pc, #152]	@ (8009dc4 <_vfiprintf_r+0x224>)
 8009d2c:	bb1b      	cbnz	r3, 8009d76 <_vfiprintf_r+0x1d6>
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	3307      	adds	r3, #7
 8009d32:	f023 0307 	bic.w	r3, r3, #7
 8009d36:	3308      	adds	r3, #8
 8009d38:	9303      	str	r3, [sp, #12]
 8009d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d3c:	443b      	add	r3, r7
 8009d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d40:	e76a      	b.n	8009c18 <_vfiprintf_r+0x78>
 8009d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d46:	460c      	mov	r4, r1
 8009d48:	2001      	movs	r0, #1
 8009d4a:	e7a8      	b.n	8009c9e <_vfiprintf_r+0xfe>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	3401      	adds	r4, #1
 8009d50:	9305      	str	r3, [sp, #20]
 8009d52:	4619      	mov	r1, r3
 8009d54:	f04f 0c0a 	mov.w	ip, #10
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d5e:	3a30      	subs	r2, #48	@ 0x30
 8009d60:	2a09      	cmp	r2, #9
 8009d62:	d903      	bls.n	8009d6c <_vfiprintf_r+0x1cc>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d0c6      	beq.n	8009cf6 <_vfiprintf_r+0x156>
 8009d68:	9105      	str	r1, [sp, #20]
 8009d6a:	e7c4      	b.n	8009cf6 <_vfiprintf_r+0x156>
 8009d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d70:	4604      	mov	r4, r0
 8009d72:	2301      	movs	r3, #1
 8009d74:	e7f0      	b.n	8009d58 <_vfiprintf_r+0x1b8>
 8009d76:	ab03      	add	r3, sp, #12
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	462a      	mov	r2, r5
 8009d7c:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <_vfiprintf_r+0x228>)
 8009d7e:	a904      	add	r1, sp, #16
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7fd fc41 	bl	8007608 <_printf_float>
 8009d86:	4607      	mov	r7, r0
 8009d88:	1c78      	adds	r0, r7, #1
 8009d8a:	d1d6      	bne.n	8009d3a <_vfiprintf_r+0x19a>
 8009d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d8e:	07d9      	lsls	r1, r3, #31
 8009d90:	d405      	bmi.n	8009d9e <_vfiprintf_r+0x1fe>
 8009d92:	89ab      	ldrh	r3, [r5, #12]
 8009d94:	059a      	lsls	r2, r3, #22
 8009d96:	d402      	bmi.n	8009d9e <_vfiprintf_r+0x1fe>
 8009d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d9a:	f7fe faa9 	bl	80082f0 <__retarget_lock_release_recursive>
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	065b      	lsls	r3, r3, #25
 8009da2:	f53f af1f 	bmi.w	8009be4 <_vfiprintf_r+0x44>
 8009da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009da8:	e71e      	b.n	8009be8 <_vfiprintf_r+0x48>
 8009daa:	ab03      	add	r3, sp, #12
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	462a      	mov	r2, r5
 8009db0:	4b05      	ldr	r3, [pc, #20]	@ (8009dc8 <_vfiprintf_r+0x228>)
 8009db2:	a904      	add	r1, sp, #16
 8009db4:	4630      	mov	r0, r6
 8009db6:	f7fd febf 	bl	8007b38 <_printf_i>
 8009dba:	e7e4      	b.n	8009d86 <_vfiprintf_r+0x1e6>
 8009dbc:	0800ac36 	.word	0x0800ac36
 8009dc0:	0800ac40 	.word	0x0800ac40
 8009dc4:	08007609 	.word	0x08007609
 8009dc8:	08009b7b 	.word	0x08009b7b
 8009dcc:	0800ac3c 	.word	0x0800ac3c

08009dd0 <__sflush_r>:
 8009dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd8:	0716      	lsls	r6, r2, #28
 8009dda:	4605      	mov	r5, r0
 8009ddc:	460c      	mov	r4, r1
 8009dde:	d454      	bmi.n	8009e8a <__sflush_r+0xba>
 8009de0:	684b      	ldr	r3, [r1, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	dc02      	bgt.n	8009dec <__sflush_r+0x1c>
 8009de6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dd48      	ble.n	8009e7e <__sflush_r+0xae>
 8009dec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dee:	2e00      	cmp	r6, #0
 8009df0:	d045      	beq.n	8009e7e <__sflush_r+0xae>
 8009df2:	2300      	movs	r3, #0
 8009df4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009df8:	682f      	ldr	r7, [r5, #0]
 8009dfa:	6a21      	ldr	r1, [r4, #32]
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	d030      	beq.n	8009e62 <__sflush_r+0x92>
 8009e00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	0759      	lsls	r1, r3, #29
 8009e06:	d505      	bpl.n	8009e14 <__sflush_r+0x44>
 8009e08:	6863      	ldr	r3, [r4, #4]
 8009e0a:	1ad2      	subs	r2, r2, r3
 8009e0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e0e:	b10b      	cbz	r3, 8009e14 <__sflush_r+0x44>
 8009e10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e12:	1ad2      	subs	r2, r2, r3
 8009e14:	2300      	movs	r3, #0
 8009e16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e18:	6a21      	ldr	r1, [r4, #32]
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b0      	blx	r6
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	d106      	bne.n	8009e32 <__sflush_r+0x62>
 8009e24:	6829      	ldr	r1, [r5, #0]
 8009e26:	291d      	cmp	r1, #29
 8009e28:	d82b      	bhi.n	8009e82 <__sflush_r+0xb2>
 8009e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8009ed4 <__sflush_r+0x104>)
 8009e2c:	40ca      	lsrs	r2, r1
 8009e2e:	07d6      	lsls	r6, r2, #31
 8009e30:	d527      	bpl.n	8009e82 <__sflush_r+0xb2>
 8009e32:	2200      	movs	r2, #0
 8009e34:	6062      	str	r2, [r4, #4]
 8009e36:	04d9      	lsls	r1, r3, #19
 8009e38:	6922      	ldr	r2, [r4, #16]
 8009e3a:	6022      	str	r2, [r4, #0]
 8009e3c:	d504      	bpl.n	8009e48 <__sflush_r+0x78>
 8009e3e:	1c42      	adds	r2, r0, #1
 8009e40:	d101      	bne.n	8009e46 <__sflush_r+0x76>
 8009e42:	682b      	ldr	r3, [r5, #0]
 8009e44:	b903      	cbnz	r3, 8009e48 <__sflush_r+0x78>
 8009e46:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e4a:	602f      	str	r7, [r5, #0]
 8009e4c:	b1b9      	cbz	r1, 8009e7e <__sflush_r+0xae>
 8009e4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e52:	4299      	cmp	r1, r3
 8009e54:	d002      	beq.n	8009e5c <__sflush_r+0x8c>
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7ff f8a6 	bl	8008fa8 <_free_r>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e60:	e00d      	b.n	8009e7e <__sflush_r+0xae>
 8009e62:	2301      	movs	r3, #1
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b0      	blx	r6
 8009e68:	4602      	mov	r2, r0
 8009e6a:	1c50      	adds	r0, r2, #1
 8009e6c:	d1c9      	bne.n	8009e02 <__sflush_r+0x32>
 8009e6e:	682b      	ldr	r3, [r5, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0c6      	beq.n	8009e02 <__sflush_r+0x32>
 8009e74:	2b1d      	cmp	r3, #29
 8009e76:	d001      	beq.n	8009e7c <__sflush_r+0xac>
 8009e78:	2b16      	cmp	r3, #22
 8009e7a:	d11e      	bne.n	8009eba <__sflush_r+0xea>
 8009e7c:	602f      	str	r7, [r5, #0]
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e022      	b.n	8009ec8 <__sflush_r+0xf8>
 8009e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e86:	b21b      	sxth	r3, r3
 8009e88:	e01b      	b.n	8009ec2 <__sflush_r+0xf2>
 8009e8a:	690f      	ldr	r7, [r1, #16]
 8009e8c:	2f00      	cmp	r7, #0
 8009e8e:	d0f6      	beq.n	8009e7e <__sflush_r+0xae>
 8009e90:	0793      	lsls	r3, r2, #30
 8009e92:	680e      	ldr	r6, [r1, #0]
 8009e94:	bf08      	it	eq
 8009e96:	694b      	ldreq	r3, [r1, #20]
 8009e98:	600f      	str	r7, [r1, #0]
 8009e9a:	bf18      	it	ne
 8009e9c:	2300      	movne	r3, #0
 8009e9e:	eba6 0807 	sub.w	r8, r6, r7
 8009ea2:	608b      	str	r3, [r1, #8]
 8009ea4:	f1b8 0f00 	cmp.w	r8, #0
 8009ea8:	dde9      	ble.n	8009e7e <__sflush_r+0xae>
 8009eaa:	6a21      	ldr	r1, [r4, #32]
 8009eac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009eae:	4643      	mov	r3, r8
 8009eb0:	463a      	mov	r2, r7
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	47b0      	blx	r6
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	dc08      	bgt.n	8009ecc <__sflush_r+0xfc>
 8009eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ecc:	4407      	add	r7, r0
 8009ece:	eba8 0800 	sub.w	r8, r8, r0
 8009ed2:	e7e7      	b.n	8009ea4 <__sflush_r+0xd4>
 8009ed4:	20400001 	.word	0x20400001

08009ed8 <_fflush_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	690b      	ldr	r3, [r1, #16]
 8009edc:	4605      	mov	r5, r0
 8009ede:	460c      	mov	r4, r1
 8009ee0:	b913      	cbnz	r3, 8009ee8 <_fflush_r+0x10>
 8009ee2:	2500      	movs	r5, #0
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	b118      	cbz	r0, 8009ef2 <_fflush_r+0x1a>
 8009eea:	6a03      	ldr	r3, [r0, #32]
 8009eec:	b90b      	cbnz	r3, 8009ef2 <_fflush_r+0x1a>
 8009eee:	f7fd ffcd 	bl	8007e8c <__sinit>
 8009ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0f3      	beq.n	8009ee2 <_fflush_r+0xa>
 8009efa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009efc:	07d0      	lsls	r0, r2, #31
 8009efe:	d404      	bmi.n	8009f0a <_fflush_r+0x32>
 8009f00:	0599      	lsls	r1, r3, #22
 8009f02:	d402      	bmi.n	8009f0a <_fflush_r+0x32>
 8009f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f06:	f7fe f9f2 	bl	80082ee <__retarget_lock_acquire_recursive>
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	f7ff ff5f 	bl	8009dd0 <__sflush_r>
 8009f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f14:	07da      	lsls	r2, r3, #31
 8009f16:	4605      	mov	r5, r0
 8009f18:	d4e4      	bmi.n	8009ee4 <_fflush_r+0xc>
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	059b      	lsls	r3, r3, #22
 8009f1e:	d4e1      	bmi.n	8009ee4 <_fflush_r+0xc>
 8009f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f22:	f7fe f9e5 	bl	80082f0 <__retarget_lock_release_recursive>
 8009f26:	e7dd      	b.n	8009ee4 <_fflush_r+0xc>

08009f28 <__swhatbuf_r>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f30:	2900      	cmp	r1, #0
 8009f32:	b096      	sub	sp, #88	@ 0x58
 8009f34:	4615      	mov	r5, r2
 8009f36:	461e      	mov	r6, r3
 8009f38:	da0d      	bge.n	8009f56 <__swhatbuf_r+0x2e>
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f40:	f04f 0100 	mov.w	r1, #0
 8009f44:	bf14      	ite	ne
 8009f46:	2340      	movne	r3, #64	@ 0x40
 8009f48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	6031      	str	r1, [r6, #0]
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	b016      	add	sp, #88	@ 0x58
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	466a      	mov	r2, sp
 8009f58:	f000 f862 	bl	800a020 <_fstat_r>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	dbec      	blt.n	8009f3a <__swhatbuf_r+0x12>
 8009f60:	9901      	ldr	r1, [sp, #4]
 8009f62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f6a:	4259      	negs	r1, r3
 8009f6c:	4159      	adcs	r1, r3
 8009f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f72:	e7eb      	b.n	8009f4c <__swhatbuf_r+0x24>

08009f74 <__smakebuf_r>:
 8009f74:	898b      	ldrh	r3, [r1, #12]
 8009f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f78:	079d      	lsls	r5, r3, #30
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	d507      	bpl.n	8009f90 <__smakebuf_r+0x1c>
 8009f80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	6163      	str	r3, [r4, #20]
 8009f8c:	b003      	add	sp, #12
 8009f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f90:	ab01      	add	r3, sp, #4
 8009f92:	466a      	mov	r2, sp
 8009f94:	f7ff ffc8 	bl	8009f28 <__swhatbuf_r>
 8009f98:	9f00      	ldr	r7, [sp, #0]
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f7ff f876 	bl	8009090 <_malloc_r>
 8009fa4:	b948      	cbnz	r0, 8009fba <__smakebuf_r+0x46>
 8009fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009faa:	059a      	lsls	r2, r3, #22
 8009fac:	d4ee      	bmi.n	8009f8c <__smakebuf_r+0x18>
 8009fae:	f023 0303 	bic.w	r3, r3, #3
 8009fb2:	f043 0302 	orr.w	r3, r3, #2
 8009fb6:	81a3      	strh	r3, [r4, #12]
 8009fb8:	e7e2      	b.n	8009f80 <__smakebuf_r+0xc>
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	6020      	str	r0, [r4, #0]
 8009fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fca:	b15b      	cbz	r3, 8009fe4 <__smakebuf_r+0x70>
 8009fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f000 f837 	bl	800a044 <_isatty_r>
 8009fd6:	b128      	cbz	r0, 8009fe4 <__smakebuf_r+0x70>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f023 0303 	bic.w	r3, r3, #3
 8009fde:	f043 0301 	orr.w	r3, r3, #1
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	431d      	orrs	r5, r3
 8009fe8:	81a5      	strh	r5, [r4, #12]
 8009fea:	e7cf      	b.n	8009f8c <__smakebuf_r+0x18>

08009fec <memmove>:
 8009fec:	4288      	cmp	r0, r1
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	eb01 0402 	add.w	r4, r1, r2
 8009ff4:	d902      	bls.n	8009ffc <memmove+0x10>
 8009ff6:	4284      	cmp	r4, r0
 8009ff8:	4623      	mov	r3, r4
 8009ffa:	d807      	bhi.n	800a00c <memmove+0x20>
 8009ffc:	1e43      	subs	r3, r0, #1
 8009ffe:	42a1      	cmp	r1, r4
 800a000:	d008      	beq.n	800a014 <memmove+0x28>
 800a002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a00a:	e7f8      	b.n	8009ffe <memmove+0x12>
 800a00c:	4402      	add	r2, r0
 800a00e:	4601      	mov	r1, r0
 800a010:	428a      	cmp	r2, r1
 800a012:	d100      	bne.n	800a016 <memmove+0x2a>
 800a014:	bd10      	pop	{r4, pc}
 800a016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a01e:	e7f7      	b.n	800a010 <memmove+0x24>

0800a020 <_fstat_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	@ (800a040 <_fstat_r+0x20>)
 800a024:	2300      	movs	r3, #0
 800a026:	4604      	mov	r4, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	4611      	mov	r1, r2
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	f7f7 ff63 	bl	8001ef8 <_fstat>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	d102      	bne.n	800a03c <_fstat_r+0x1c>
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	b103      	cbz	r3, 800a03c <_fstat_r+0x1c>
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	200006bc 	.word	0x200006bc

0800a044 <_isatty_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d06      	ldr	r5, [pc, #24]	@ (800a060 <_isatty_r+0x1c>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	f7f7 ff62 	bl	8001f18 <_isatty>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d102      	bne.n	800a05e <_isatty_r+0x1a>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b103      	cbz	r3, 800a05e <_isatty_r+0x1a>
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	200006bc 	.word	0x200006bc

0800a064 <_sbrk_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4d06      	ldr	r5, [pc, #24]	@ (800a080 <_sbrk_r+0x1c>)
 800a068:	2300      	movs	r3, #0
 800a06a:	4604      	mov	r4, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	f7f7 ff6a 	bl	8001f48 <_sbrk>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_sbrk_r+0x1a>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_sbrk_r+0x1a>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	200006bc 	.word	0x200006bc

0800a084 <memcpy>:
 800a084:	440a      	add	r2, r1
 800a086:	4291      	cmp	r1, r2
 800a088:	f100 33ff 	add.w	r3, r0, #4294967295
 800a08c:	d100      	bne.n	800a090 <memcpy+0xc>
 800a08e:	4770      	bx	lr
 800a090:	b510      	push	{r4, lr}
 800a092:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a09a:	4291      	cmp	r1, r2
 800a09c:	d1f9      	bne.n	800a092 <memcpy+0xe>
 800a09e:	bd10      	pop	{r4, pc}

0800a0a0 <__assert_func>:
 800a0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0a2:	4614      	mov	r4, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	4b09      	ldr	r3, [pc, #36]	@ (800a0cc <__assert_func+0x2c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	68d8      	ldr	r0, [r3, #12]
 800a0ae:	b14c      	cbz	r4, 800a0c4 <__assert_func+0x24>
 800a0b0:	4b07      	ldr	r3, [pc, #28]	@ (800a0d0 <__assert_func+0x30>)
 800a0b2:	9100      	str	r1, [sp, #0]
 800a0b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0b8:	4906      	ldr	r1, [pc, #24]	@ (800a0d4 <__assert_func+0x34>)
 800a0ba:	462b      	mov	r3, r5
 800a0bc:	f000 f870 	bl	800a1a0 <fiprintf>
 800a0c0:	f000 f880 	bl	800a1c4 <abort>
 800a0c4:	4b04      	ldr	r3, [pc, #16]	@ (800a0d8 <__assert_func+0x38>)
 800a0c6:	461c      	mov	r4, r3
 800a0c8:	e7f3      	b.n	800a0b2 <__assert_func+0x12>
 800a0ca:	bf00      	nop
 800a0cc:	20000018 	.word	0x20000018
 800a0d0:	0800ac51 	.word	0x0800ac51
 800a0d4:	0800ac5e 	.word	0x0800ac5e
 800a0d8:	0800ac8c 	.word	0x0800ac8c

0800a0dc <_calloc_r>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	fba1 5402 	umull	r5, r4, r1, r2
 800a0e2:	b934      	cbnz	r4, 800a0f2 <_calloc_r+0x16>
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	f7fe ffd3 	bl	8009090 <_malloc_r>
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	b928      	cbnz	r0, 800a0fa <_calloc_r+0x1e>
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	bd70      	pop	{r4, r5, r6, pc}
 800a0f2:	220c      	movs	r2, #12
 800a0f4:	6002      	str	r2, [r0, #0]
 800a0f6:	2600      	movs	r6, #0
 800a0f8:	e7f9      	b.n	800a0ee <_calloc_r+0x12>
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f7fe f879 	bl	80081f4 <memset>
 800a102:	e7f4      	b.n	800a0ee <_calloc_r+0x12>

0800a104 <__ascii_mbtowc>:
 800a104:	b082      	sub	sp, #8
 800a106:	b901      	cbnz	r1, 800a10a <__ascii_mbtowc+0x6>
 800a108:	a901      	add	r1, sp, #4
 800a10a:	b142      	cbz	r2, 800a11e <__ascii_mbtowc+0x1a>
 800a10c:	b14b      	cbz	r3, 800a122 <__ascii_mbtowc+0x1e>
 800a10e:	7813      	ldrb	r3, [r2, #0]
 800a110:	600b      	str	r3, [r1, #0]
 800a112:	7812      	ldrb	r2, [r2, #0]
 800a114:	1e10      	subs	r0, r2, #0
 800a116:	bf18      	it	ne
 800a118:	2001      	movne	r0, #1
 800a11a:	b002      	add	sp, #8
 800a11c:	4770      	bx	lr
 800a11e:	4610      	mov	r0, r2
 800a120:	e7fb      	b.n	800a11a <__ascii_mbtowc+0x16>
 800a122:	f06f 0001 	mvn.w	r0, #1
 800a126:	e7f8      	b.n	800a11a <__ascii_mbtowc+0x16>

0800a128 <_realloc_r>:
 800a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12c:	4607      	mov	r7, r0
 800a12e:	4614      	mov	r4, r2
 800a130:	460d      	mov	r5, r1
 800a132:	b921      	cbnz	r1, 800a13e <_realloc_r+0x16>
 800a134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a138:	4611      	mov	r1, r2
 800a13a:	f7fe bfa9 	b.w	8009090 <_malloc_r>
 800a13e:	b92a      	cbnz	r2, 800a14c <_realloc_r+0x24>
 800a140:	f7fe ff32 	bl	8008fa8 <_free_r>
 800a144:	4625      	mov	r5, r4
 800a146:	4628      	mov	r0, r5
 800a148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a14c:	f000 f841 	bl	800a1d2 <_malloc_usable_size_r>
 800a150:	4284      	cmp	r4, r0
 800a152:	4606      	mov	r6, r0
 800a154:	d802      	bhi.n	800a15c <_realloc_r+0x34>
 800a156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a15a:	d8f4      	bhi.n	800a146 <_realloc_r+0x1e>
 800a15c:	4621      	mov	r1, r4
 800a15e:	4638      	mov	r0, r7
 800a160:	f7fe ff96 	bl	8009090 <_malloc_r>
 800a164:	4680      	mov	r8, r0
 800a166:	b908      	cbnz	r0, 800a16c <_realloc_r+0x44>
 800a168:	4645      	mov	r5, r8
 800a16a:	e7ec      	b.n	800a146 <_realloc_r+0x1e>
 800a16c:	42b4      	cmp	r4, r6
 800a16e:	4622      	mov	r2, r4
 800a170:	4629      	mov	r1, r5
 800a172:	bf28      	it	cs
 800a174:	4632      	movcs	r2, r6
 800a176:	f7ff ff85 	bl	800a084 <memcpy>
 800a17a:	4629      	mov	r1, r5
 800a17c:	4638      	mov	r0, r7
 800a17e:	f7fe ff13 	bl	8008fa8 <_free_r>
 800a182:	e7f1      	b.n	800a168 <_realloc_r+0x40>

0800a184 <__ascii_wctomb>:
 800a184:	4603      	mov	r3, r0
 800a186:	4608      	mov	r0, r1
 800a188:	b141      	cbz	r1, 800a19c <__ascii_wctomb+0x18>
 800a18a:	2aff      	cmp	r2, #255	@ 0xff
 800a18c:	d904      	bls.n	800a198 <__ascii_wctomb+0x14>
 800a18e:	228a      	movs	r2, #138	@ 0x8a
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	f04f 30ff 	mov.w	r0, #4294967295
 800a196:	4770      	bx	lr
 800a198:	700a      	strb	r2, [r1, #0]
 800a19a:	2001      	movs	r0, #1
 800a19c:	4770      	bx	lr
	...

0800a1a0 <fiprintf>:
 800a1a0:	b40e      	push	{r1, r2, r3}
 800a1a2:	b503      	push	{r0, r1, lr}
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	ab03      	add	r3, sp, #12
 800a1a8:	4805      	ldr	r0, [pc, #20]	@ (800a1c0 <fiprintf+0x20>)
 800a1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ae:	6800      	ldr	r0, [r0, #0]
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	f7ff fcf5 	bl	8009ba0 <_vfiprintf_r>
 800a1b6:	b002      	add	sp, #8
 800a1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1bc:	b003      	add	sp, #12
 800a1be:	4770      	bx	lr
 800a1c0:	20000018 	.word	0x20000018

0800a1c4 <abort>:
 800a1c4:	b508      	push	{r3, lr}
 800a1c6:	2006      	movs	r0, #6
 800a1c8:	f000 f834 	bl	800a234 <raise>
 800a1cc:	2001      	movs	r0, #1
 800a1ce:	f7f7 fe43 	bl	8001e58 <_exit>

0800a1d2 <_malloc_usable_size_r>:
 800a1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d6:	1f18      	subs	r0, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bfbc      	itt	lt
 800a1dc:	580b      	ldrlt	r3, [r1, r0]
 800a1de:	18c0      	addlt	r0, r0, r3
 800a1e0:	4770      	bx	lr

0800a1e2 <_raise_r>:
 800a1e2:	291f      	cmp	r1, #31
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	d904      	bls.n	800a1f6 <_raise_r+0x14>
 800a1ec:	2316      	movs	r3, #22
 800a1ee:	6003      	str	r3, [r0, #0]
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a1f8:	b112      	cbz	r2, 800a200 <_raise_r+0x1e>
 800a1fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1fe:	b94b      	cbnz	r3, 800a214 <_raise_r+0x32>
 800a200:	4628      	mov	r0, r5
 800a202:	f000 f831 	bl	800a268 <_getpid_r>
 800a206:	4622      	mov	r2, r4
 800a208:	4601      	mov	r1, r0
 800a20a:	4628      	mov	r0, r5
 800a20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a210:	f000 b818 	b.w	800a244 <_kill_r>
 800a214:	2b01      	cmp	r3, #1
 800a216:	d00a      	beq.n	800a22e <_raise_r+0x4c>
 800a218:	1c59      	adds	r1, r3, #1
 800a21a:	d103      	bne.n	800a224 <_raise_r+0x42>
 800a21c:	2316      	movs	r3, #22
 800a21e:	6003      	str	r3, [r0, #0]
 800a220:	2001      	movs	r0, #1
 800a222:	e7e7      	b.n	800a1f4 <_raise_r+0x12>
 800a224:	2100      	movs	r1, #0
 800a226:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a22a:	4620      	mov	r0, r4
 800a22c:	4798      	blx	r3
 800a22e:	2000      	movs	r0, #0
 800a230:	e7e0      	b.n	800a1f4 <_raise_r+0x12>
	...

0800a234 <raise>:
 800a234:	4b02      	ldr	r3, [pc, #8]	@ (800a240 <raise+0xc>)
 800a236:	4601      	mov	r1, r0
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	f7ff bfd2 	b.w	800a1e2 <_raise_r>
 800a23e:	bf00      	nop
 800a240:	20000018 	.word	0x20000018

0800a244 <_kill_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4d07      	ldr	r5, [pc, #28]	@ (800a264 <_kill_r+0x20>)
 800a248:	2300      	movs	r3, #0
 800a24a:	4604      	mov	r4, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	602b      	str	r3, [r5, #0]
 800a252:	f7f7 fdf1 	bl	8001e38 <_kill>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	d102      	bne.n	800a260 <_kill_r+0x1c>
 800a25a:	682b      	ldr	r3, [r5, #0]
 800a25c:	b103      	cbz	r3, 800a260 <_kill_r+0x1c>
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	bd38      	pop	{r3, r4, r5, pc}
 800a262:	bf00      	nop
 800a264:	200006bc 	.word	0x200006bc

0800a268 <_getpid_r>:
 800a268:	f7f7 bdde 	b.w	8001e28 <_getpid>

0800a26c <_init>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	bf00      	nop
 800a270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a272:	bc08      	pop	{r3}
 800a274:	469e      	mov	lr, r3
 800a276:	4770      	bx	lr

0800a278 <_fini>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	bf00      	nop
 800a27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27e:	bc08      	pop	{r3}
 800a280:	469e      	mov	lr, r3
 800a282:	4770      	bx	lr
