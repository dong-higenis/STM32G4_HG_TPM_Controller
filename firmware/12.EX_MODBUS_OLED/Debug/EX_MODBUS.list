
EX_MODBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a00c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d04  0800a1f0  0800a1f0  0000b1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef4  0800aef4  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aef4  0800aef4  0000bef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aefc  0800aefc  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aefc  0800aefc  0000befc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af00  0800af00  0000bf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800af04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  200001d4  0800b0d8  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  0800b0d8  0000c948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a82  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003752  00000000  00000000  00023c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000273d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e15  00000000  00000000  00028670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020744  00000000  00000000  00029485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c1b  00000000  00000000  00049bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3a5d  00000000  00000000  000617e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de0  00000000  00000000  00125284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012b064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a1d4 	.word	0x0800a1d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a1d4 	.word	0x0800a1d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f2a:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <MX_FDCAN1_Init+0x8c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f36:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f3a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f62:	220d      	movs	r2, #13
 8000f64:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f68:	2206      	movs	r2, #6
 8000f6a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f98:	f001 fd28 	bl	80029ec <HAL_FDCAN_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fa2:	f000 fc39 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f0 	.word	0x200001f0
 8000fb0:	40006400 	.word	0x40006400

08000fb4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09a      	sub	sp, #104	@ 0x68
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2244      	movs	r2, #68	@ 0x44
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 f8c3 	bl	8008160 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <HAL_FDCAN_MspInit+0xcc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d148      	bne.n	8001076 <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fee:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 faed 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001000:	f000 fc0a 	bl	8001818 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001034:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001038:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001046:	2309      	movs	r3, #9
 8001048:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104e:	4619      	mov	r1, r3
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <HAL_FDCAN_MspInit+0xd4>)
 8001052:	f002 fa4b 	bl	80034ec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2015      	movs	r0, #21
 800105c:	f001 fbd1 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001060:	2015      	movs	r0, #21
 8001062:	f001 fbe8 	bl	8002836 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2016      	movs	r0, #22
 800106c:	f001 fbc9 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001070:	2016      	movs	r0, #22
 8001072:	f001 fbe0 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3768      	adds	r7, #104	@ 0x68
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40006400 	.word	0x40006400
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a2:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a29      	ldr	r2, [pc, #164]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f0:	4817      	ldr	r0, [pc, #92]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010f2:	f002 fb7d 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f002 fb76 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <MX_GPIO_Init+0xc4>)
 800111e:	f002 f9e5 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8001122:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113e:	f002 f9d5 	bl	80034ec <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400

08001154 <__io_putchar>:
/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// printf 함수 리디렉션
int __io_putchar(int ch) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    (void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	2364      	movs	r3, #100	@ 0x64
 8001160:	2201      	movs	r2, #1
 8001162:	4804      	ldr	r0, [pc, #16]	@ (8001174 <__io_putchar+0x20>)
 8001164:	f003 fffc 	bl	8005160 <HAL_UART_Transmit>
    return ch;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200003f4 	.word	0x200003f4

08001178 <FDCAN_Init>:


// CAN 관련
void FDCAN_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
    FDCAN_FilterTypeDef sFilterConfig = { 0 };
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterIndex = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001196:	2302      	movs	r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800119a:	2301      	movs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID1 = 0x500; // 받고싶은 id
 800119e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80011a2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterID2 = 0x7FF; // 11비트 모두 비교
 80011a4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80011a8:	61bb      	str	r3, [r7, #24]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <FDCAN_Init+0x80>)
 80011b0:	f001 fd76 	bl	8002ca0 <HAL_FDCAN_ConfigFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <FDCAN_Init+0x46>
    {
        Error_Handler();
 80011ba:	f000 fb2d 	bl	8001818 <Error_Handler>
    }
    // CAN 실행
    HAL_StatusTypeDef result;
    result = HAL_FDCAN_Start(&hfdcan1);
 80011be:	480e      	ldr	r0, [pc, #56]	@ (80011f8 <FDCAN_Init+0x80>)
 80011c0:	f001 fdc8 	bl	8002d54 <HAL_FDCAN_Start>
 80011c4:	4603      	mov	r3, r0
 80011c6:	77fb      	strb	r3, [r7, #31]
    if (result != HAL_OK)
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <FDCAN_Init+0x5c>
    {
        printf("FDCAN Start 실패\r\n");
 80011ce:	480b      	ldr	r0, [pc, #44]	@ (80011fc <FDCAN_Init+0x84>)
 80011d0:	f006 feb0 	bl	8007f34 <puts>
    }
    result = HAL_FDCAN_ActivateNotification(&hfdcan1,
 80011d4:	2200      	movs	r2, #0
 80011d6:	2101      	movs	r1, #1
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <FDCAN_Init+0x80>)
 80011da:	f001 fe27 	bl	8002e2c <HAL_FDCAN_ActivateNotification>
 80011de:	4603      	mov	r3, r0
 80011e0:	77fb      	strb	r3, [r7, #31]
            FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
    if (result != HAL_OK)
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <FDCAN_Init+0x76>
    {
        printf("FDCAN Notification 등록 실패\r\n");
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <FDCAN_Init+0x88>)
 80011ea:	f006 fea3 	bl	8007f34 <puts>
    }
}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f0 	.word	0x200001f0
 80011fc:	0800a1f0 	.word	0x0800a1f0
 8001200:	0800a204 	.word	0x0800a204

08001204 <Calculate_Modbus_CRC16>:


// ================= Modbus RTU 관련 ==========================
/* Modbus RTU CRC16 계산 함수 */
static uint16_t Calculate_Modbus_CRC16(uint8_t *data, uint16_t length)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF; // 1111 1111 1111 1111
 8001210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001214:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) // 들어온 모든 데이터에 대해..
 8001216:	2300      	movs	r3, #0
 8001218:	81bb      	strh	r3, [r7, #12]
 800121a:	e022      	b.n	8001262 <Calculate_Modbus_CRC16+0x5e>
    {
        crc ^= data[i]; // 0xFFFF 와 XOR 연산
 800121c:	89bb      	ldrh	r3, [r7, #12]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	4053      	eors	r3, r2
 800122a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) // 모든 비트에 대해 ..
 800122c:	2300      	movs	r3, #0
 800122e:	72fb      	strb	r3, [r7, #11]
 8001230:	e011      	b.n	8001256 <Calculate_Modbus_CRC16+0x52>
        {
            if (crc & 0x0001) // LSB가 1이라면..
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <Calculate_Modbus_CRC16+0x46>
            {
                crc = (crc >> 1) ^ 0xA001; // 오른쪽 쉬프트 한칸 -> 0xA001과 XOR연산
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <Calculate_Modbus_CRC16+0x74>)
 8001244:	4053      	eors	r3, r2
 8001246:	81fb      	strh	r3, [r7, #14]
 8001248:	e002      	b.n	8001250 <Calculate_Modbus_CRC16+0x4c>
            }
            else
            {
                crc = crc >> 1; // LSB가 0이라면... 쉬프트만...
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) // 모든 비트에 대해 ..
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	3301      	adds	r3, #1
 8001254:	72fb      	strb	r3, [r7, #11]
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	2b07      	cmp	r3, #7
 800125a:	d9ea      	bls.n	8001232 <Calculate_Modbus_CRC16+0x2e>
    for (uint16_t i = 0; i < length; i++) // 들어온 모든 데이터에 대해..
 800125c:	89bb      	ldrh	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	81bb      	strh	r3, [r7, #12]
 8001262:	89ba      	ldrh	r2, [r7, #12]
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	429a      	cmp	r2, r3
 8001268:	d3d8      	bcc.n	800121c <Calculate_Modbus_CRC16+0x18>
            }
        }
    }
    return crc;
 800126a:	89fb      	ldrh	r3, [r7, #14]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	ffffa001 	.word	0xffffa001

0800127c <Send_Modbus_Request>:

/* Modbus RTU 요청 전송 */
HAL_StatusTypeDef Send_Modbus_Request(uint8_t slave_addr, uint8_t func_code, uint16_t start_addr, uint16_t reg_count)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	4604      	mov	r4, r0
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4623      	mov	r3, r4
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	4603      	mov	r3, r0
 8001290:	71bb      	strb	r3, [r7, #6]
 8001292:	460b      	mov	r3, r1
 8001294:	80bb      	strh	r3, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	807b      	strh	r3, [r7, #2]
    uint8_t request_frame[MODBUS_REQUEST_SIZE];
    uint16_t crc;

    // 프레임 구성
    request_frame[0] = slave_addr;
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	733b      	strb	r3, [r7, #12]
    request_frame[1] = func_code;
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	737b      	strb	r3, [r7, #13]
    request_frame[2] = (start_addr >> 8) & 0xFF;    // 시작 주소 상위 바이트
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	73bb      	strb	r3, [r7, #14]
    request_frame[3] = start_addr & 0xFF;           // 시작 주소 하위 바이트
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73fb      	strb	r3, [r7, #15]
    request_frame[4] = (reg_count >> 8) & 0xFF;     // 레지스터 개수 상위 바이트
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	743b      	strb	r3, [r7, #16]
    request_frame[5] = reg_count & 0xFF;            // 레지스터 개수 하위 바이트
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	747b      	strb	r3, [r7, #17]

    // CRC 계산 (첫 6바이트에 대해)
    crc = Calculate_Modbus_CRC16(request_frame, 6);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2106      	movs	r1, #6
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff9b 	bl	8001204 <Calculate_Modbus_CRC16>
 80012ce:	4603      	mov	r3, r0
 80012d0:	82fb      	strh	r3, [r7, #22]

    request_frame[6] = crc & 0xFF;          // CRC 하위 바이트 (리틀엔디안)
 80012d2:	8afb      	ldrh	r3, [r7, #22]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	74bb      	strb	r3, [r7, #18]
    request_frame[7] = (crc >> 8) & 0xFF;   // CRC 상위 바이트
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	74fb      	strb	r3, [r7, #19]

    // UART3(RS485)로 전송
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, request_frame, MODBUS_REQUEST_SIZE, 1000);
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	2208      	movs	r2, #8
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <Send_Modbus_Request+0x94>)
 80012ee:	f003 ff37 	bl	8005160 <HAL_UART_Transmit>
 80012f2:	4603      	mov	r3, r0
 80012f4:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 80012f6:	7d7b      	ldrb	r3, [r7, #21]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <Send_Modbus_Request+0x8a>
    {
    	printf("Modbus Request Failed: Staㄴtus=%d\r\n", status);
 80012fc:	7d7b      	ldrb	r3, [r7, #21]
 80012fe:	4619      	mov	r1, r3
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <Send_Modbus_Request+0x98>)
 8001302:	f006 fdaf 	bl	8007e64 <iprintf>
    }
    return status;
 8001306:	7d7b      	ldrb	r3, [r7, #21]
}
 8001308:	4618      	mov	r0, r3
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	20000488 	.word	0x20000488
 8001314:	0800a228 	.word	0x0800a228

08001318 <Process_Modbus_Response>:

/* Modbus RTU 응답 처리 */
HAL_StatusTypeDef Process_Modbus_Response(uint8_t* response_data, uint16_t length)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
    if (length < 5) return HAL_ERROR;
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d801      	bhi.n	800132e <Process_Modbus_Response+0x16>
 800132a:	2301      	movs	r3, #1
 800132c:	e025      	b.n	800137a <Process_Modbus_Response+0x62>

    // CRC 계산
    uint16_t calc_crc = Calculate_Modbus_CRC16(response_data, length - 2);
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	3b02      	subs	r3, #2
 8001332:	b29b      	uxth	r3, r3
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff64 	bl	8001204 <Calculate_Modbus_CRC16>
 800133c:	4603      	mov	r3, r0
 800133e:	81fb      	strh	r3, [r7, #14]

    // Modbus RTU는 리틀엔디안 표준 사용
    uint16_t recv_crc = response_data[length-2] | (response_data[length-1] << 8);
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	3b02      	subs	r3, #2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b21a      	sxth	r2, r3
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	3b01      	subs	r3, #1
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	440b      	add	r3, r1
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b21b      	sxth	r3, r3
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	81bb      	strh	r3, [r7, #12]

    // 슬레이브 주소 확인
    Modbus_Response_t* response = (Modbus_Response_t*)response_data;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60bb      	str	r3, [r7, #8]
    if (response->slave_addr != MODBUS_SLAVE_ADDR) {
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <Process_Modbus_Response+0x5a>
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e003      	b.n	800137a <Process_Modbus_Response+0x62>
    }

    Parse_Wind_Sensor_Response(response);
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f000 f810 	bl	8001398 <Parse_Wind_Sensor_Response>
    return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <Request_Sensor_Data>:


/* 풍량센서 데이터 요청 */
void Request_Sensor_Data(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
    // 풍속과 온도 데이터 요청 (위에서 define했던 값 세개!!! (레지스터는 두개))
    Send_Modbus_Request(MODBUS_SLAVE_ADDR, MODBUS_FUNC_READ_HOLD, WIND_SPEED_REG, 2);
 8001386:	2302      	movs	r3, #2
 8001388:	2200      	movs	r2, #0
 800138a:	2103      	movs	r1, #3
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff ff75 	bl	800127c <Send_Modbus_Request>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <Parse_Wind_Sensor_Response>:


/* 풍량센서 응답 데이터 파싱 */
void Parse_Wind_Sensor_Response(Modbus_Response_t* response)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    if (response->function_code == MODBUS_FUNC_READ_HOLD && response->byte_count >= 4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d12f      	bne.n	8001408 <Parse_Wind_Sensor_Response+0x70>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	789b      	ldrb	r3, [r3, #2]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d92b      	bls.n	8001408 <Parse_Wind_Sensor_Response+0x70>
    {
        // 풍속 데이터 (첫 번째 레지스터)
        uint16_t wind_raw = (response->data[0] << 8) | response->data[1];
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	791b      	ldrb	r3, [r3, #4]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	81fb      	strh	r3, [r7, #14]
        sensor_data.wind_speed = wind_raw * 0.1f; // 0.1 m/s 단위
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001410 <Parse_Wind_Sensor_Response+0x78>
 80013d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <Parse_Wind_Sensor_Response+0x7c>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
        sensor_data.timestamp = HAL_GetTick();
 80013de:	f001 f907 	bl	80025f0 <HAL_GetTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <Parse_Wind_Sensor_Response+0x7c>)
 80013e6:	6053      	str	r3, [r2, #4]
        sensor_data.valid = 1;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <Parse_Wind_Sensor_Response+0x7c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	721a      	strb	r2, [r3, #8]
        printf("Wind Speed: %.1f m/s",sensor_data.wind_speed);
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <Parse_Wind_Sensor_Response+0x7c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8d0 	bl	8000598 <__aeabi_f2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4806      	ldr	r0, [pc, #24]	@ (8001418 <Parse_Wind_Sensor_Response+0x80>)
 80013fe:	f006 fd31 	bl	8007e64 <iprintf>

        // FDCAN으로 전송
        Bridge_Sensor_to_FDCAN(&sensor_data);
 8001402:	4804      	ldr	r0, [pc, #16]	@ (8001414 <Parse_Wind_Sensor_Response+0x7c>)
 8001404:	f000 f80a 	bl	800141c <Bridge_Sensor_to_FDCAN>
    }
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	3dcccccd 	.word	0x3dcccccd
 8001414:	20000254 	.word	0x20000254
 8001418:	0800a250 	.word	0x0800a250

0800141c <Bridge_Sensor_to_FDCAN>:

/* 센서 데이터를 FDCAN으로 전송 */
HAL_StatusTypeDef Bridge_Sensor_to_FDCAN(Wind_Sensor_Data_t* sensor_data)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	@ 0x38
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    if (!sensor_data->valid)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7a1b      	ldrb	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <Bridge_Sensor_to_FDCAN+0x14>
    {
    	return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e059      	b.n	80014e4 <Bridge_Sensor_to_FDCAN+0xc8>


    uint8_t can_data[8];

    // 풍속 데이터 (2바이트, 기본적으로 0.1 m/s 단위로 레지스터에 기록한다고 함.)
    uint16_t wind_data = (uint16_t)(sensor_data->wind_speed * 10);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800143a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001442:	ee17 3a90 	vmov	r3, s15
 8001446:	86fb      	strh	r3, [r7, #54]	@ 0x36


    can_data[0] = (wind_data >> 8) & 0xFF; // 풍속 데이터 16비트중 상위 8비트!!
 8001448:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b29b      	uxth	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    can_data[1] = wind_data & 0xFF; // 풍속 데이터 16비트중 하위 8비트!!
 8001454:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // 본 예제에서는 풍속 외 온도등은 사용하지 않습니다.
    can_data[2] = 0 & 0xFF;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    can_data[3] = 0 & 0xFF;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // 타임스탬프 (4바이트)
    can_data[4] = (sensor_data->timestamp >> 24) & 0xFF;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	0e1b      	lsrs	r3, r3, #24
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    can_data[5] = (sensor_data->timestamp >> 16) & 0xFF;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	0c1b      	lsrs	r3, r3, #16
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    can_data[6] = (sensor_data->timestamp >> 8) & 0xFF;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    can_data[7] = sensor_data->timestamp & 0xFF;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    // FDCAN 헤더 설정
    FDCAN_TxHeaderTypeDef TxHeader;

    // CAN 송신...
    TxHeader.Identifier = 0x501; // 풍량센서 전용 CAN ID
 8001496:	f240 5301 	movw	r3, #1281	@ 0x501
 800149a:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80014a4:	2308      	movs	r3, #8
 80014a6:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, can_data);
 80014bc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4619      	mov	r1, r3
 80014c6:	4809      	ldr	r0, [pc, #36]	@ (80014ec <Bridge_Sensor_to_FDCAN+0xd0>)
 80014c8:	f001 fc6c 	bl	8002da4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    if (status != HAL_OK) {
 80014d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <Bridge_Sensor_to_FDCAN+0xc4>

        printf("CAN Send Failed!!\r\n");
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <Bridge_Sensor_to_FDCAN+0xd4>)
 80014dc:	f006 fd2a 	bl	8007f34 <puts>
    }
    return status;
 80014e0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3738      	adds	r7, #56	@ 0x38
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200001f0 	.word	0x200001f0
 80014f0:	0800a268 	.word	0x0800a268

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fa:	f001 f814 	bl	8002526 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80014fe:	f000 f8ff 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001502:	f7ff fdc3 	bl	800108c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001506:	f7ff fd0d 	bl	8000f24 <MX_FDCAN1_Init>
  MX_USB_PCD_Init();
 800150a:	f000 ff87 	bl	800241c <MX_USB_PCD_Init>
  MX_SPI3_Init();
 800150e:	f000 fc6b 	bl	8001de8 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001512:	f000 fe8b 	bl	800222c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001516:	f000 fe3d 	bl	8002194 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Init();
 800151a:	f7ff fe2d 	bl	8001178 <FDCAN_Init>
  // Modbus RTU 수신 시작
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 800151e:	2201      	movs	r2, #1
 8001520:	4961      	ldr	r1, [pc, #388]	@ (80016a8 <main+0x1b4>)
 8001522:	4862      	ldr	r0, [pc, #392]	@ (80016ac <main+0x1b8>)
 8001524:	f003 feaa 	bl	800527c <HAL_UART_Receive_IT>
  OLED_init();
 8001528:	f000 f9fa 	bl	8001920 <OLED_init>
  OLED_fill(0);
 800152c:	2000      	movs	r0, #0
 800152e:	f000 fad1 	bl	8001ad4 <OLED_fill>
  oled_drawString(0, 0, "Modbus Monitor", &font_07x10, 15);      // ✨ 제목 변경
 8001532:	230f      	movs	r3, #15
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4b5e      	ldr	r3, [pc, #376]	@ (80016b0 <main+0x1bc>)
 8001538:	4a5e      	ldr	r2, [pc, #376]	@ (80016b4 <main+0x1c0>)
 800153a:	2100      	movs	r1, #0
 800153c:	2000      	movs	r0, #0
 800153e:	f000 fc1d 	bl	8001d7c <oled_drawString>
  oled_drawString(0, 20, "Wind Speed:", &font_07x10, 15);         // CAN 수신용
 8001542:	230f      	movs	r3, #15
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4b5a      	ldr	r3, [pc, #360]	@ (80016b0 <main+0x1bc>)
 8001548:	4a5b      	ldr	r2, [pc, #364]	@ (80016b8 <main+0x1c4>)
 800154a:	2114      	movs	r1, #20
 800154c:	2000      	movs	r0, #0
 800154e:	f000 fc15 	bl	8001d7c <oled_drawString>
  oled_drawString(0, 50, "CAN ID: 0x501", &font_07x10, 15);            // ✨ CAN ID 표시 추가
 8001552:	230f      	movs	r3, #15
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4b56      	ldr	r3, [pc, #344]	@ (80016b0 <main+0x1bc>)
 8001558:	4a58      	ldr	r2, [pc, #352]	@ (80016bc <main+0x1c8>)
 800155a:	2132      	movs	r1, #50	@ 0x32
 800155c:	2000      	movs	r0, #0
 800155e:	f000 fc0d 	bl	8001d7c <oled_drawString>
  printf("Modbus RTU Bridge Started!\r\n");
 8001562:	4857      	ldr	r0, [pc, #348]	@ (80016c0 <main+0x1cc>)
 8001564:	f006 fce6 	bl	8007f34 <puts>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t last_request_time = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]

  while (1) {

	     // 0.5초마다 센서 데이터 요청
	     if (HAL_GetTick() - last_request_time >= 500)
 800156c:	f001 f840 	bl	80025f0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800157a:	d30f      	bcc.n	800159c <main+0xa8>
	     {
	         // 이전 데이터 정리
	         modbus_rx_index = 0;
 800157c:	4b51      	ldr	r3, [pc, #324]	@ (80016c4 <main+0x1d0>)
 800157e:	2200      	movs	r2, #0
 8001580:	801a      	strh	r2, [r3, #0]
	         modbus_frame_ready = 0;
 8001582:	4b51      	ldr	r3, [pc, #324]	@ (80016c8 <main+0x1d4>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]

	         // 센서 데이터 요청
	         Request_Sensor_Data();
 8001588:	f7ff fefb 	bl	8001382 <Request_Sensor_Data>

	         // 타이밍 리셋
	         last_request_time = HAL_GetTick();
 800158c:	f001 f830 	bl	80025f0 <HAL_GetTick>
 8001590:	6078      	str	r0, [r7, #4]
	         last_rx_time = HAL_GetTick();
 8001592:	f001 f82d 	bl	80025f0 <HAL_GetTick>
 8001596:	4603      	mov	r3, r0
 8001598:	4a4c      	ldr	r2, [pc, #304]	@ (80016cc <main+0x1d8>)
 800159a:	6013      	str	r3, [r2, #0]
	     }

	     // 50ms 동안 새로운 바이트가 오지 않으면 프레임 완료로 판단
	     if (modbus_rx_index > 0 && !modbus_frame_ready &&
 800159c:	4b49      	ldr	r3, [pc, #292]	@ (80016c4 <main+0x1d0>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d014      	beq.n	80015ce <main+0xda>
 80015a4:	4b48      	ldr	r3, [pc, #288]	@ (80016c8 <main+0x1d4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d110      	bne.n	80015ce <main+0xda>
	         (HAL_GetTick() - last_rx_time > 50))
 80015ac:	f001 f820 	bl	80025f0 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b46      	ldr	r3, [pc, #280]	@ (80016cc <main+0x1d8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1ad3      	subs	r3, r2, r3
	     if (modbus_rx_index > 0 && !modbus_frame_ready &&
 80015b8:	2b32      	cmp	r3, #50	@ 0x32
 80015ba:	d908      	bls.n	80015ce <main+0xda>
	     {
	         modbus_frame_ready = 1; // 프레임 완료 플래그 설정
 80015bc:	4b42      	ldr	r3, [pc, #264]	@ (80016c8 <main+0x1d4>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
	         printf("\r\n[TIMEOUT] Frame complete by timeout: %d bytes\r\n", modbus_rx_index);
 80015c2:	4b40      	ldr	r3, [pc, #256]	@ (80016c4 <main+0x1d0>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4841      	ldr	r0, [pc, #260]	@ (80016d0 <main+0x1dc>)
 80015ca:	f006 fc4b 	bl	8007e64 <iprintf>
	     }

	     // Modbus 응답 처리
	     if (modbus_frame_ready)
 80015ce:	4b3e      	ldr	r3, [pc, #248]	@ (80016c8 <main+0x1d4>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03c      	beq.n	8001650 <main+0x15c>
	     {

	         printf("\r\n[INFO] ===== Modbus frame ready, length: %d =====\r\n", modbus_rx_index);
 80015d6:	4b3b      	ldr	r3, [pc, #236]	@ (80016c4 <main+0x1d0>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	483d      	ldr	r0, [pc, #244]	@ (80016d4 <main+0x1e0>)
 80015de:	f006 fc41 	bl	8007e64 <iprintf>

	         // Raw 데이터 출력
	         printf("[RAW] ");
 80015e2:	483d      	ldr	r0, [pc, #244]	@ (80016d8 <main+0x1e4>)
 80015e4:	f006 fc3e 	bl	8007e64 <iprintf>
	         for (int i = 0; i < modbus_rx_index; i++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	e00a      	b.n	8001604 <main+0x110>
	         {
	             printf("%02X ", modbus_rx_buffer[i]);
 80015ee:	4a3b      	ldr	r2, [pc, #236]	@ (80016dc <main+0x1e8>)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4839      	ldr	r0, [pc, #228]	@ (80016e0 <main+0x1ec>)
 80015fa:	f006 fc33 	bl	8007e64 <iprintf>
	         for (int i = 0; i < modbus_rx_index; i++)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <main+0x1d0>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	4293      	cmp	r3, r2
 800160e:	dbee      	blt.n	80015ee <main+0xfa>
	         }
	         printf("\r\n"); // 개행
 8001610:	4834      	ldr	r0, [pc, #208]	@ (80016e4 <main+0x1f0>)
 8001612:	f006 fc8f 	bl	8007f34 <puts>

	         // 최소 길이 체크 (5바이트 이상, CRC를 제외한 나머지 프레임 구성요소가 5바이트)
	         if (modbus_rx_index >= 5)
 8001616:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <main+0x1d0>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	2b04      	cmp	r3, #4
 800161c:	d906      	bls.n	800162c <main+0x138>
	         {
	             Process_Modbus_Response(modbus_rx_buffer, modbus_rx_index);
 800161e:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <main+0x1d0>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	482d      	ldr	r0, [pc, #180]	@ (80016dc <main+0x1e8>)
 8001626:	f7ff fe77 	bl	8001318 <Process_Modbus_Response>
 800162a:	e005      	b.n	8001638 <main+0x144>
	         }
	         else
	         {
	             printf("[ERROR] Frame too short: %d bytes\r\n", modbus_rx_index);
 800162c:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <main+0x1d0>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	482d      	ldr	r0, [pc, #180]	@ (80016e8 <main+0x1f4>)
 8001634:	f006 fc16 	bl	8007e64 <iprintf>
	         }
	         // 버퍼 리셋
	         modbus_rx_index = 0;
 8001638:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <main+0x1d0>)
 800163a:	2200      	movs	r2, #0
 800163c:	801a      	strh	r2, [r3, #0]
	         modbus_frame_ready = 0;
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <main+0x1d4>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
	         memset(modbus_rx_buffer, 0, sizeof(modbus_rx_buffer));
 8001644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001648:	2100      	movs	r1, #0
 800164a:	4824      	ldr	r0, [pc, #144]	@ (80016dc <main+0x1e8>)
 800164c:	f006 fd88 	bl	8008160 <memset>
	     }
	     // OLED 업데이트 (기존과 동일)
	     if (sensor_data.valid)
 8001650:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <main+0x1f8>)
 8001652:	7a1b      	ldrb	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d016      	beq.n	8001686 <main+0x192>
	     {
	         snprintf(buf, sizeof(buf), "%.1f m/s", sensor_data.wind_speed);
 8001658:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <main+0x1f8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff9b 	bl	8000598 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	e9cd 2300 	strd	r2, r3, [sp]
 800166a:	4a21      	ldr	r2, [pc, #132]	@ (80016f0 <main+0x1fc>)
 800166c:	2120      	movs	r1, #32
 800166e:	4821      	ldr	r0, [pc, #132]	@ (80016f4 <main+0x200>)
 8001670:	f006 fc68 	bl	8007f44 <sniprintf>
	         oled_drawString(80, 20, buf, &font_07x10, 15);
 8001674:	230f      	movs	r3, #15
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <main+0x1bc>)
 800167a:	4a1e      	ldr	r2, [pc, #120]	@ (80016f4 <main+0x200>)
 800167c:	2114      	movs	r1, #20
 800167e:	2050      	movs	r0, #80	@ 0x50
 8001680:	f000 fb7c 	bl	8001d7c <oled_drawString>
 8001684:	e772      	b.n	800156c <main+0x78>
	     }
	     else
	     {
	         oled_drawString(80, 20, "WAIT...", &font_07x10, 15); // 유효한 센서값이 들어오지 않을때 출력
 8001686:	230f      	movs	r3, #15
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <main+0x1bc>)
 800168c:	4a1a      	ldr	r2, [pc, #104]	@ (80016f8 <main+0x204>)
 800168e:	2114      	movs	r1, #20
 8001690:	2050      	movs	r0, #80	@ 0x50
 8001692:	f000 fb73 	bl	8001d7c <oled_drawString>
	         oled_drawString(0, 40, "CAN Transmitting......", &font_07x10, 15);
 8001696:	230f      	movs	r3, #15
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <main+0x1bc>)
 800169c:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <main+0x208>)
 800169e:	2128      	movs	r1, #40	@ 0x28
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 fb6b 	bl	8001d7c <oled_drawString>
	     if (HAL_GetTick() - last_request_time >= 500)
 80016a6:	e761      	b.n	800156c <main+0x78>
 80016a8:	20000363 	.word	0x20000363
 80016ac:	20000488 	.word	0x20000488
 80016b0:	0800ab24 	.word	0x0800ab24
 80016b4:	0800a27c 	.word	0x0800a27c
 80016b8:	0800a28c 	.word	0x0800a28c
 80016bc:	0800a298 	.word	0x0800a298
 80016c0:	0800a2a8 	.word	0x0800a2a8
 80016c4:	20000360 	.word	0x20000360
 80016c8:	20000362 	.word	0x20000362
 80016cc:	20000384 	.word	0x20000384
 80016d0:	0800a2c4 	.word	0x0800a2c4
 80016d4:	0800a2f8 	.word	0x0800a2f8
 80016d8:	0800a330 	.word	0x0800a330
 80016dc:	20000260 	.word	0x20000260
 80016e0:	0800a338 	.word	0x0800a338
 80016e4:	0800a340 	.word	0x0800a340
 80016e8:	0800a344 	.word	0x0800a344
 80016ec:	20000254 	.word	0x20000254
 80016f0:	0800a368 	.word	0x0800a368
 80016f4:	20000364 	.word	0x20000364
 80016f8:	0800a374 	.word	0x0800a374
 80016fc:	0800a37c 	.word	0x0800a37c

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	2238      	movs	r2, #56	@ 0x38
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f006 fd26 	bl	8008160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001722:	2000      	movs	r0, #0
 8001724:	f002 f974 	bl	8003a10 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001728:	2321      	movs	r3, #33	@ 0x21
 800172a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001730:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001732:	2301      	movs	r3, #1
 8001734:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	2303      	movs	r3, #3
 800173c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800173e:	2301      	movs	r3, #1
 8001740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001742:	2328      	movs	r3, #40	@ 0x28
 8001744:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001746:	2302      	movs	r3, #2
 8001748:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800174a:	2302      	movs	r3, #2
 800174c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800174e:	2302      	movs	r3, #2
 8001750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fa0e 	bl	8003b78 <HAL_RCC_OscConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001762:	f000 f859 	bl	8001818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001766:	230f      	movs	r3, #15
 8001768:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	2303      	movs	r3, #3
 800176c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2104      	movs	r1, #4
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fd0c 	bl	800419c <HAL_RCC_ClockConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800178a:	f000 f845 	bl	8001818 <Error_Handler>
  }
}
 800178e:	bf00      	nop
 8001790:	3750      	adds	r7, #80	@ 0x50
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

// UART 수신 콜백 ( UART3 == 센서 )
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <HAL_UART_RxCpltCallback+0x60>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d121      	bne.n	80017ee <HAL_UART_RxCpltCallback+0x56>
    {
    	last_rx_time = 0;
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <HAL_UART_RxCpltCallback+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        // 수신된 바이트 저장
        modbus_rx_buffer[modbus_rx_index++] = rx_byte;
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <HAL_UART_RxCpltCallback+0x68>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	b291      	uxth	r1, r2
 80017b8:	4a11      	ldr	r2, [pc, #68]	@ (8001800 <HAL_UART_RxCpltCallback+0x68>)
 80017ba:	8011      	strh	r1, [r2, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_UART_RxCpltCallback+0x6c>)
 80017c0:	7819      	ldrb	r1, [r3, #0]
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <HAL_UART_RxCpltCallback+0x70>)
 80017c4:	5499      	strb	r1, [r3, r2]
        last_rx_time = HAL_GetTick();
 80017c6:	f000 ff13 	bl	80025f0 <HAL_GetTick>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a0b      	ldr	r2, [pc, #44]	@ (80017fc <HAL_UART_RxCpltCallback+0x64>)
 80017ce:	6013      	str	r3, [r2, #0]


        if (modbus_rx_index >= sizeof(modbus_rx_buffer) - 1)
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_UART_RxCpltCallback+0x68>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80017d6:	d905      	bls.n	80017e4 <HAL_UART_RxCpltCallback+0x4c>
        {
            modbus_frame_ready = 1; // 프레임 받을 준비 완료
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <HAL_UART_RxCpltCallback+0x74>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
            printf("\r\n[DEBUG] Buffer full, frame ready\r\n");
 80017de:	480c      	ldr	r0, [pc, #48]	@ (8001810 <HAL_UART_RxCpltCallback+0x78>)
 80017e0:	f006 fba8 	bl	8007f34 <puts>
        }

        // 다음 바이트 수신 준비
        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	4907      	ldr	r1, [pc, #28]	@ (8001804 <HAL_UART_RxCpltCallback+0x6c>)
 80017e8:	480a      	ldr	r0, [pc, #40]	@ (8001814 <HAL_UART_RxCpltCallback+0x7c>)
 80017ea:	f003 fd47 	bl	800527c <HAL_UART_Receive_IT>
    }
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40004800 	.word	0x40004800
 80017fc:	20000384 	.word	0x20000384
 8001800:	20000360 	.word	0x20000360
 8001804:	20000363 	.word	0x20000363
 8001808:	20000260 	.word	0x20000260
 800180c:	20000362 	.word	0x20000362
 8001810:	0800a394 	.word	0x0800a394
 8001814:	20000488 	.word	0x20000488

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <Error_Handler+0x8>

08001824 <OLED_write_cmd>:

/* ======== Static 함수들 ======== */

// OLED 명령어 모드!
static void OLED_write_cmd(uint8_t cmd)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  DC_CMD();     // DC핀을 LOW로 설정 (명령어 모드)
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f001 ffda 	bl	80037f0 <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001846:	f001 ffd3 	bl	80037f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);  // SPI로 명령어 전송
 800184a:	1df9      	adds	r1, r7, #7
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	2201      	movs	r2, #1
 8001852:	4807      	ldr	r0, [pc, #28]	@ (8001870 <OLED_write_cmd+0x4c>)
 8001854:	f003 f959 	bl	8004b0a <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800185e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001862:	f001 ffc5 	bl	80037f0 <HAL_GPIO_WritePin>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000038c 	.word	0x2000038c

08001874 <OLED_write_data>:

// OLED 데이터 모드!
static void OLED_write_data(const uint8_t* p, uint16_t len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
  DC_DATA();    // DC핀을 HIGH로 설정 (데이터 모드)
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f001 ffb1 	bl	80037f0 <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001898:	f001 ffaa 	bl	80037f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)p, len, HAL_MAX_DELAY);  // SPI로 데이터 전송
 800189c:	887a      	ldrh	r2, [r7, #2]
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4806      	ldr	r0, [pc, #24]	@ (80018c0 <OLED_write_data+0x4c>)
 80018a6:	f003 f930 	bl	8004b0a <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b4:	f001 ff9c 	bl	80037f0 <HAL_GPIO_WritePin>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000038c 	.word	0x2000038c

080018c4 <OLED_set_window>:

// 화면의 특정 영역을 선택하는 함수 (그리기 영역 설정)
static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	4603      	mov	r3, r0
 80018d8:	71bb      	strb	r3, [r7, #6]
 80018da:	460b      	mov	r3, r1
 80018dc:	717b      	strb	r3, [r7, #5]
 80018de:	4613      	mov	r3, r2
 80018e0:	713b      	strb	r3, [r7, #4]
  // 열(가로) 범위 설정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 80018e2:	2015      	movs	r0, #21
 80018e4:	f7ff ff9e 	bl	8001824 <OLED_write_cmd>
  uint8_t col[2] = { col_start, col_end };
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	733b      	strb	r3, [r7, #12]
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2102      	movs	r1, #2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffbc 	bl	8001874 <OLED_write_data>

  // 행(세로) 범위 설정
  OLED_write_cmd(OLED_SETROWADDR);
 80018fc:	2075      	movs	r0, #117	@ 0x75
 80018fe:	f7ff ff91 	bl	8001824 <OLED_write_cmd>
  uint8_t row[2] = { row_start, row_end };
 8001902:	797b      	ldrb	r3, [r7, #5]
 8001904:	723b      	strb	r3, [r7, #8]
 8001906:	793b      	ldrb	r3, [r7, #4]
 8001908:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	2102      	movs	r1, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ffaf 	bl	8001874 <OLED_write_data>
}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
	...

08001920 <OLED_init>:

/* ======== Public 함수들 ======== */

/* OLED 디스플레이를 초기화하는 함수 */
void OLED_init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
  // 1단계: 하드웨어 리셋
  RST_L();
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800192c:	4867      	ldr	r0, [pc, #412]	@ (8001acc <OLED_init+0x1ac>)
 800192e:	f001 ff5f 	bl	80037f0 <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 LOW로 10ms
 8001932:	200a      	movs	r0, #10
 8001934:	f000 fe68 	bl	8002608 <HAL_Delay>
  RST_H();
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800193e:	4863      	ldr	r0, [pc, #396]	@ (8001acc <OLED_init+0x1ac>)
 8001940:	f001 ff56 	bl	80037f0 <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 HIGH로 10ms
 8001944:	200a      	movs	r0, #10
 8001946:	f000 fe5f 	bl	8002608 <HAL_Delay>

  // 2단계: 디스플레이 끄기
  OLED_write_cmd(OLED_DISPLAYOFF);
 800194a:	20ae      	movs	r0, #174	@ 0xae
 800194c:	f7ff ff6a 	bl	8001824 <OLED_write_cmd>

  // 3단계: 기본 설정들
  OLED_write_cmd(OLED_SETCOMMANDLOCK);  // 명령어 잠금 해제
 8001950:	20fd      	movs	r0, #253	@ 0xfd
 8001952:	f7ff ff67 	bl	8001824 <OLED_write_cmd>
  d = 0x12;
 8001956:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad0 <OLED_init+0x1b0>)
 8001958:	2212      	movs	r2, #18
 800195a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800195c:	2101      	movs	r1, #1
 800195e:	485c      	ldr	r0, [pc, #368]	@ (8001ad0 <OLED_init+0x1b0>)
 8001960:	f7ff ff88 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_SETCLOCKDIVIDER); // 클럭 주파수 설정
 8001964:	20b3      	movs	r0, #179	@ 0xb3
 8001966:	f7ff ff5d 	bl	8001824 <OLED_write_cmd>
  d = 0x91;
 800196a:	4b59      	ldr	r3, [pc, #356]	@ (8001ad0 <OLED_init+0x1b0>)
 800196c:	2291      	movs	r2, #145	@ 0x91
 800196e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001970:	2101      	movs	r1, #1
 8001972:	4857      	ldr	r0, [pc, #348]	@ (8001ad0 <OLED_init+0x1b0>)
 8001974:	f7ff ff7e 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_SETMUXRATIO);     // 화면 높이 설정 (64줄)
 8001978:	20ca      	movs	r0, #202	@ 0xca
 800197a:	f7ff ff53 	bl	8001824 <OLED_write_cmd>
  d = 0x3F;
 800197e:	4b54      	ldr	r3, [pc, #336]	@ (8001ad0 <OLED_init+0x1b0>)
 8001980:	223f      	movs	r2, #63	@ 0x3f
 8001982:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001984:	2101      	movs	r1, #1
 8001986:	4852      	ldr	r0, [pc, #328]	@ (8001ad0 <OLED_init+0x1b0>)
 8001988:	f7ff ff74 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_SETDISPLAYOFFSET); // 화면 위치 오프셋
 800198c:	20a2      	movs	r0, #162	@ 0xa2
 800198e:	f7ff ff49 	bl	8001824 <OLED_write_cmd>
  d = 0x00;
 8001992:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad0 <OLED_init+0x1b0>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001998:	2101      	movs	r1, #1
 800199a:	484d      	ldr	r0, [pc, #308]	@ (8001ad0 <OLED_init+0x1b0>)
 800199c:	f7ff ff6a 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_SETSTARTLINE);     // 시작 줄 설정
 80019a0:	20a1      	movs	r0, #161	@ 0xa1
 80019a2:	f7ff ff3f 	bl	8001824 <OLED_write_cmd>
  d = 0x00;
 80019a6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad0 <OLED_init+0x1b0>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80019ac:	2101      	movs	r1, #1
 80019ae:	4848      	ldr	r0, [pc, #288]	@ (8001ad0 <OLED_init+0x1b0>)
 80019b0:	f7ff ff60 	bl	8001874 <OLED_write_data>

  // 4단계: 화면 방향과 색상 배치 설정
  OLED_write_cmd(OLED_SETREMAP);
 80019b4:	20a0      	movs	r0, #160	@ 0xa0
 80019b6:	f7ff ff35 	bl	8001824 <OLED_write_cmd>
  {
    uint8_t remap[2] = {0x6, 0x11};  // 니블 순서, 듀얼COM 설정
 80019ba:	f241 1306 	movw	r3, #4358	@ 0x1106
 80019be:	81bb      	strh	r3, [r7, #12]
    OLED_write_data(remap, 2);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2102      	movs	r1, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff54 	bl	8001874 <OLED_write_data>
  } // Dual COM 모드로 설정시, Column 범위가 [ 0x1C <= x <= 0x5B ]가 됩니다.



  // 5단계: GPIO와 기능 설정 ( 안씀 )
  OLED_write_cmd(OLED_SETGPIO);
 80019cc:	20b5      	movs	r0, #181	@ 0xb5
 80019ce:	f7ff ff29 	bl	8001824 <OLED_write_cmd>
  d = 0x00;
 80019d2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad0 <OLED_init+0x1b0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80019d8:	2101      	movs	r1, #1
 80019da:	483d      	ldr	r0, [pc, #244]	@ (8001ad0 <OLED_init+0x1b0>)
 80019dc:	f7ff ff4a 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_FUNCTIONSELECT);  // 내부 전원 사용
 80019e0:	20ab      	movs	r0, #171	@ 0xab
 80019e2:	f7ff ff1f 	bl	8001824 <OLED_write_cmd>
  d = 0x01;
 80019e6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <OLED_init+0x1b0>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80019ec:	2101      	movs	r1, #1
 80019ee:	4838      	ldr	r0, [pc, #224]	@ (8001ad0 <OLED_init+0x1b0>)
 80019f0:	f7ff ff40 	bl	8001874 <OLED_write_data>

  // 6단계: 화면 품질 향상 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 80019f4:	20b4      	movs	r0, #180	@ 0xb4
 80019f6:	f7ff ff15 	bl	8001824 <OLED_write_cmd>
  {
    uint8_t enhA[2] = {0xA0, 0xFD};
 80019fa:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 80019fe:	813b      	strh	r3, [r7, #8]
    OLED_write_data(enhA, 2);
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	2102      	movs	r1, #2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff34 	bl	8001874 <OLED_write_data>
  }

  // 7단계: 밝기와 전류 설정
  OLED_write_cmd(OLED_SETCONTRAST);     // 최대 밝기
 8001a0c:	20c1      	movs	r0, #193	@ 0xc1
 8001a0e:	f7ff ff09 	bl	8001824 <OLED_write_cmd>
  d = 0xFF;
 8001a12:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a14:	22ff      	movs	r2, #255	@ 0xff
 8001a16:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a18:	2101      	movs	r1, #1
 8001a1a:	482d      	ldr	r0, [pc, #180]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a1c:	f7ff ff2a 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_MASTERCURRENT);   // 마스터 전류
 8001a20:	20c7      	movs	r0, #199	@ 0xc7
 8001a22:	f7ff feff 	bl	8001824 <OLED_write_cmd>
  d = 0x0F;
 8001a26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a28:	220f      	movs	r2, #15
 8001a2a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	4828      	ldr	r0, [pc, #160]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a30:	f7ff ff20 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_DEFAULTGRAYSCALE); // 기본 그레이스케일 사용
 8001a34:	20b9      	movs	r0, #185	@ 0xb9
 8001a36:	f7ff fef5 	bl	8001824 <OLED_write_cmd>

  // 8단계: 전기적 특성 설정
  OLED_write_cmd(OLED_SETPHASELENGTH);  // 페이즈 길이
 8001a3a:	20b1      	movs	r0, #177	@ 0xb1
 8001a3c:	f7ff fef2 	bl	8001824 <OLED_write_cmd>
  d = 0xE2;
 8001a40:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a42:	22e2      	movs	r2, #226	@ 0xe2
 8001a44:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a46:	2101      	movs	r1, #1
 8001a48:	4821      	ldr	r0, [pc, #132]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a4a:	f7ff ff13 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_DISPLAYENHANCE_B); // 화면 품질 향상 B
 8001a4e:	20d1      	movs	r0, #209	@ 0xd1
 8001a50:	f7ff fee8 	bl	8001824 <OLED_write_cmd>
  {
    uint8_t enhB[2] = {0x82, 0x20};
 8001a54:	f242 0382 	movw	r3, #8322	@ 0x2082
 8001a58:	80bb      	strh	r3, [r7, #4]
    OLED_write_data(enhB, 2);
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff08 	bl	8001874 <OLED_write_data>
  }

  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE); // 프리차지 전압
 8001a64:	20bb      	movs	r0, #187	@ 0xbb
 8001a66:	f7ff fedd 	bl	8001824 <OLED_write_cmd>
  d = 0x1F;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a6c:	221f      	movs	r2, #31
 8001a6e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a70:	2101      	movs	r1, #1
 8001a72:	4817      	ldr	r0, [pc, #92]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a74:	f7ff fefe 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_SETSECONDPRECHARGE);  // 두 번째 프리차지
 8001a78:	20b6      	movs	r0, #182	@ 0xb6
 8001a7a:	f7ff fed3 	bl	8001824 <OLED_write_cmd>
  d = 0x08;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a80:	2208      	movs	r2, #8
 8001a82:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a84:	2101      	movs	r1, #1
 8001a86:	4812      	ldr	r0, [pc, #72]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a88:	f7ff fef4 	bl	8001874 <OLED_write_data>

  OLED_write_cmd(OLED_SETVCOMH);            // VCOM 전압
 8001a8c:	20be      	movs	r0, #190	@ 0xbe
 8001a8e:	f7ff fec9 	bl	8001824 <OLED_write_cmd>
  d = 0x07;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <OLED_init+0x1b0>)
 8001a9c:	f7ff feea 	bl	8001874 <OLED_write_data>

  // 9단계: 디스플레이 모드 설정
  OLED_write_cmd(OLED_NORMALDISPLAY);       // 정상 디스플레이 모드
 8001aa0:	20a6      	movs	r0, #166	@ 0xa6
 8001aa2:	f7ff febf 	bl	8001824 <OLED_write_cmd>
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);  // 부분 디스플레이 모드 해제
 8001aa6:	20a9      	movs	r0, #169	@ 0xa9
 8001aa8:	f7ff febc 	bl	8001824 <OLED_write_cmd>

  // 10단계: 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8001aac:	233f      	movs	r3, #63	@ 0x3f
 8001aae:	2200      	movs	r2, #0
 8001ab0:	215b      	movs	r1, #91	@ 0x5b
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f7ff ff06 	bl	80018c4 <OLED_set_window>

  // 11단계: 디스플레이 켜기
  OLED_write_cmd(OLED_DISPLAYON);
 8001ab8:	20af      	movs	r0, #175	@ 0xaf
 8001aba:	f7ff feb3 	bl	8001824 <OLED_write_cmd>
  HAL_Delay(50);  // 안정화 대기
 8001abe:	2032      	movs	r0, #50	@ 0x32
 8001ac0:	f000 fda2 	bl	8002608 <HAL_Delay>
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	20000388 	.word	0x20000388

08001ad4 <OLED_fill>:

/* 화면 전체를 하나의 색으로 채우는 함수 */
void OLED_fill(uint8_t gray)  // gray: 0(검정)~15(흰색)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0a4      	sub	sp, #144	@ 0x90
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  // 4bpp에서는 1바이트에 2픽셀이 들어감 (4bit씩)
  uint8_t b = (gray << 4) | (gray & 0x0F);  // 왼쪽4bit + 오른쪽4bit
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t line[OLED_W/2];  // 한 줄에 필요한 바이트 수 (256픽셀 / 2 = 128바이트)
  memset(line, b, sizeof(line));  // 배열을 같은 값으로 채움
 8001af8:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 8001afc:	f107 0308 	add.w	r3, r7, #8
 8001b00:	2280      	movs	r2, #128	@ 0x80
 8001b02:	4618      	mov	r0, r3
 8001b04:	f006 fb2c 	bl	8008160 <memset>

  // 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8001b08:	233f      	movs	r3, #63	@ 0x3f
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	215b      	movs	r1, #91	@ 0x5b
 8001b0e:	201c      	movs	r0, #28
 8001b10:	f7ff fed8 	bl	80018c4 <OLED_set_window>
  OLED_write_cmd(OLED_WRITERAM);  // 메모리 쓰기 시작
 8001b14:	205c      	movs	r0, #92	@ 0x5c
 8001b16:	f7ff fe85 	bl	8001824 <OLED_write_cmd>

  // 64줄을 반복해서 같은 데이터 전송
  for (int y = 0; y < OLED_H; y++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b20:	e00a      	b.n	8001b38 <OLED_fill+0x64>
    OLED_write_data(line, sizeof(line));
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	2180      	movs	r1, #128	@ 0x80
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fea3 	bl	8001874 <OLED_write_data>
  for (int y = 0; y < OLED_H; y++) {
 8001b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b32:	3301      	adds	r3, #1
 8001b34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b3e:	ddf0      	ble.n	8001b22 <OLED_fill+0x4e>
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3790      	adds	r7, #144	@ 0x90
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <colbyte_from_x>:

/* ======== 좌표 변환 함수들 ======== */

/* 픽셀의 x좌표를 OLED의 column 바이트 주소로 변환 */
static uint8_t colbyte_from_x(int x)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  // 4bpp에서는 2픽셀당 1바이트이므로 x를 2로 나눔
  return OLED_COL_START + (x >> 1);  // x >> 1은 x / 2와 같음
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	105b      	asrs	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	331c      	adds	r3, #28
 8001b5a:	b2db      	uxtb	r3, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <rowaddr_from_y>:

/* 픽셀의 y좌표를 OLED의 row 주소로 변환 */
static uint8_t rowaddr_from_y(int y)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y;  // y좌표는 그대로 사용
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	b2db      	uxtb	r3, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <oled_drawChar>:

/* ======== 문자 그리기 함수들 ======== */

/* 하나의 문자를 화면에 그리는 함수 */
void oled_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ae      	sub	sp, #184	@ 0xb8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	71fb      	strb	r3, [r7, #7]
  // 1단계: 입력값 검증
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2b1f      	cmp	r3, #31
 8001b94:	f240 80ea 	bls.w	8001d6c <oled_drawChar+0x1ec>
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b9c:	f200 80e6 	bhi.w	8001d6c <oled_drawChar+0x1ec>
  if (gray > 15) gray = 15;         // 최대 밝기 제한
 8001ba0:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d902      	bls.n	8001bae <oled_drawChar+0x2e>
 8001ba8:	230f      	movs	r3, #15
 8001baa:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0

  // 2단계: 화면 범위 검사
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f2c0 80dd 	blt.w	8001d70 <oled_drawChar+0x1f0>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bc4:	f300 80d4 	bgt.w	8001d70 <oled_drawChar+0x1f0>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f2c0 80d2 	blt.w	8001d74 <oled_drawChar+0x1f4>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	2b40      	cmp	r3, #64	@ 0x40
 8001bdc:	f300 80ca 	bgt.w	8001d74 <oled_drawChar+0x1f4>

  // 3단계: 폰트 데이터에서 문자 찾기
  const int stride = font->height;           // 한 문자의 데이터 줄 수
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	785b      	ldrb	r3, [r3, #1]
 8001be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start  = (ch - 32) * stride;     // 문자 데이터 시작 위치 ('A'는 65-32=33번째)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f1a3 0220 	sub.w	r2, r3, #32
 8001bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2;  // 한 줄당 필요한 바이트 수
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	0fda      	lsrs	r2, r3, #31
 8001c02:	4413      	add	r3, r2
 8001c04:	105b      	asrs	r3, r3, #1
 8001c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W/2];  // 한 줄 데이터를 저장할 버퍼

  // 4단계: 문자의 각 줄을 처리
  for (int row = 0; row < font->height; row++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c10:	e0a3      	b.n	8001d5a <oled_drawChar+0x1da>
  {
    // 폰트 데이터에서 현재 줄의 비트맵 가져오기
    uint16_t mask = font->data[start + row];
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c1e:	440b      	add	r3, r1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    // 줄 버퍼를 0으로 초기화 (배경색)
    memset(linebuf, 0x00, bytes_per_row);
 8001c2a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f006 fa93 	bl	8008160 <memset>

    // 5단계: 각 픽셀을 처리 (왼쪽부터 오른쪽으로)
    for (int col = 0; col < font->width; col++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001c40:	e04f      	b.n	8001ce2 <oled_drawChar+0x162>
    {
      int byte_idx = (col >> 1);              // 현재 픽셀이 들어갈 바이트 위치
 8001c42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c46:	105b      	asrs	r3, r3, #1
 8001c48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0);     // 바이트의 왼쪽 4bit인지 오른쪽 4bit인지
 8001c4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      // 현재 픽셀이 켜져있는지 확인
      if (mask & (0x8000 >> col))  // 0x8000에서 오른쪽으로 col번 이동한 비트 확인
 8001c62:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c6e:	fa41 f303 	asr.w	r3, r1, r3
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d02f      	beq.n	8001cd8 <oled_drawChar+0x158>
      {
        // 픽셀이 켜져있으면 해당 위치에 색상 설정
        if (left_nibble)
 8001c78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d015      	beq.n	8001cac <oled_drawChar+0x12c>
          linebuf[byte_idx] |= (gray << 4);   // 왼쪽 4bit에 색상
 8001c80:	f107 0214 	add.w	r2, r7, #20
 8001c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b25a      	sxtb	r2, r3
 8001c8e:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	b2d9      	uxtb	r1, r3
 8001c9c:	f107 0214 	add.w	r2, r7, #20
 8001ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ca4:	4413      	add	r3, r2
 8001ca6:	460a      	mov	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e015      	b.n	8001cd8 <oled_drawChar+0x158>
        else
          linebuf[byte_idx] |= (gray & 0x0F); // 오른쪽 4bit에 색상
 8001cac:	f107 0214 	add.w	r2, r7, #20
 8001cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b25a      	sxtb	r2, r3
 8001cba:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	b2d9      	uxtb	r1, r3
 8001cca:	f107 0214 	add.w	r2, r7, #20
 8001cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cd2:	4413      	add	r3, r2
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8001cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cec:	4293      	cmp	r3, r2
 8001cee:	dba8      	blt.n	8001c42 <oled_drawChar+0xc2>
      }
    }

    // 6단계: 현재 줄을 OLED에 전송
    uint8_t col_start = colbyte_from_x(x);           // 시작 column 주소
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff ff2a 	bl	8001b4a <colbyte_from_x>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end   = col_start + bytes_per_row - 1;  // 끝 column 주소
 8001cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8001d06:	4413      	add	r3, r2
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr  = rowaddr_from_y(y + row);     // 현재 row 주소
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d16:	4413      	add	r3, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff25 	bl	8001b68 <rowaddr_from_y>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr);  // 그리기 영역 설정
 8001d24:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001d28:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8001d2c:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8001d30:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 8001d34:	f7ff fdc6 	bl	80018c4 <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);                   // 메모리 쓰기 시작
 8001d38:	205c      	movs	r0, #92	@ 0x5c
 8001d3a:	f7ff fd73 	bl	8001824 <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);         // 데이터 전송
 8001d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fd92 	bl	8001874 <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 8001d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d54:	3301      	adds	r3, #1
 8001d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	785b      	ldrb	r3, [r3, #1]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d64:	4293      	cmp	r3, r2
 8001d66:	f6ff af54 	blt.w	8001c12 <oled_drawChar+0x92>
 8001d6a:	e004      	b.n	8001d76 <oled_drawChar+0x1f6>
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8001d6c:	bf00      	nop
 8001d6e:	e002      	b.n	8001d76 <oled_drawChar+0x1f6>
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <oled_drawChar+0x1f6>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8001d74:	bf00      	nop
  }
}
 8001d76:	37b8      	adds	r7, #184	@ 0xb8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <oled_drawString>:

/* 문자열을 화면에 그리는 함수 */
void oled_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  int cx = x, cy = y;  // 현재 커서 위치
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	613b      	str	r3, [r7, #16]

  // 문자열의 끝까지 반복
  while (*str) {
 8001d92:	e020      	b.n	8001dd6 <oled_drawString+0x5a>
    if (*str == '\n') {  // 줄바꿈 문자
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b0a      	cmp	r3, #10
 8001d9a:	d108      	bne.n	8001dae <oled_drawString+0x32>
      cy += font->height + 1;  // 다음 줄로 이동 (+1은 줄 간격)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	3301      	adds	r3, #1
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
      cx = x;                  // 맨 왼쪽으로 돌아가기
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e010      	b.n	8001dd0 <oled_drawString+0x54>
     // if (cx & 1) cx--;        // 시작 위치를 짝수로 맞춤 (니블 정렬)
    } // 사용시 "str\nstr" 이런식으로 쓰시면 됩니다.

    else if (*str != '\r') {   // 캐리지 리턴이 아닌 일반 문자
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b0d      	cmp	r3, #13
 8001db4:	d00c      	beq.n	8001dd0 <oled_drawString+0x54>
      oled_drawChar(cx, cy, *str, font, gray);  // 현재 위치에 문자 그리기
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6939      	ldr	r1, [r7, #16]
 8001dc4:	6978      	ldr	r0, [r7, #20]
 8001dc6:	f7ff fedb 	bl	8001b80 <oled_drawChar>
      cx += 4;  // 다음 문자 위치로 이동 (4픽셀 간격으로 설정)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	617b      	str	r3, [r7, #20]

      // 원래 코드: cx += font->width + 1; (폰트 너비 + 1픽셀 간격)
      // 원래 코드: if (cx & 1) cx++;      (다음 위치를 짝수로 맞춤)
      // → 이 두 줄이 문자 사이에 큰 간격을 만들었음
    }
    str++;  // 다음 문자로 이동
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	607b      	str	r3, [r7, #4]
  while (*str) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1da      	bne.n	8001d94 <oled_drawString+0x18>
  }
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001dee:	4a1c      	ldr	r2, [pc, #112]	@ (8001e60 <MX_SPI3_Init+0x78>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001df4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001df8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e02:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e06:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e1a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e1e:	2228      	movs	r2, #40	@ 0x28
 8001e20:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e36:	2207      	movs	r2, #7
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e42:	2208      	movs	r2, #8
 8001e44:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <MX_SPI3_Init+0x74>)
 8001e48:	f002 fdb4 	bl	80049b4 <HAL_SPI_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e52:	f7ff fce1 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000038c 	.word	0x2000038c
 8001e60:	40003c00 	.word	0x40003c00

08001e64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <HAL_SPI_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d127      	bne.n	8001ed6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e92:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001eb6:	2328      	movs	r3, #40	@ 0x28
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <HAL_SPI_MspInit+0x84>)
 8001ed2:	f001 fb0b 	bl	80034ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	@ 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40003c00 	.word	0x40003c00
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000400 	.word	0x48000400

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_MspInit+0x44>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f30 <HAL_MspInit+0x44>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <HAL_MspInit+0x44>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_MspInit+0x44>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <HAL_MspInit+0x44>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_MspInit+0x44>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f22:	f001 fe19 	bl	8003b58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <NMI_Handler+0x4>

08001f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8a:	f000 fb1f 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <FDCAN1_IT0_IRQHandler+0x10>)
 8001f9a:	f001 f82d 	bl	8002ff8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200001f0 	.word	0x200001f0

08001fa8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <FDCAN1_IT1_IRQHandler+0x10>)
 8001fae:	f001 f823 	bl	8002ff8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200001f0 	.word	0x200001f0

08001fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <USART1_IRQHandler+0x10>)
 8001fc2:	f003 f9a7 	bl	8005314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200003f4 	.word	0x200003f4

08001fd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <USART3_IRQHandler+0x10>)
 8001fd6:	f003 f99d 	bl	8005314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000488 	.word	0x20000488

08001fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_kill>:

int _kill(int pid, int sig)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ffe:	f006 f901 	bl	8008204 <__errno>
 8002002:	4603      	mov	r3, r0
 8002004:	2216      	movs	r2, #22
 8002006:	601a      	str	r2, [r3, #0]
  return -1;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_exit>:

void _exit (int status)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffe7 	bl	8001ff4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002026:	bf00      	nop
 8002028:	e7fd      	b.n	8002026 <_exit+0x12>

0800202a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e00a      	b.n	8002052 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800203c:	f3af 8000 	nop.w
 8002040:	4601      	mov	r1, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	60ba      	str	r2, [r7, #8]
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	dbf0      	blt.n	800203c <_read+0x12>
  }

  return len;
 800205a:	687b      	ldr	r3, [r7, #4]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e009      	b.n	800208a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	60ba      	str	r2, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f868 	bl	8001154 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	dbf1      	blt.n	8002076 <_write+0x12>
  }
  return len;
 8002092:	687b      	ldr	r3, [r7, #4]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_close>:

int _close(int file)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c4:	605a      	str	r2, [r3, #4]
  return 0;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_isatty>:

int _isatty(int file)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f006 f866 	bl	8008204 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20008000 	.word	0x20008000
 8002164:	00000400 	.word	0x00000400
 8002168:	200003f0 	.word	0x200003f0
 800216c:	20000948 	.word	0x20000948

08002170 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <SystemInit+0x20>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <SystemInit+0x20>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002198:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 800219a:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <MX_USART1_UART_Init+0x94>)
 800219c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800219e:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ca:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d6:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021dc:	4811      	ldr	r0, [pc, #68]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021de:	f002 ff6f 	bl	80050c0 <HAL_UART_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021e8:	f7ff fb16 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ec:	2100      	movs	r1, #0
 80021ee:	480d      	ldr	r0, [pc, #52]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 80021f0:	f005 f81e 	bl	8007230 <HAL_UARTEx_SetTxFifoThreshold>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021fa:	f7ff fb0d 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021fe:	2100      	movs	r1, #0
 8002200:	4808      	ldr	r0, [pc, #32]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 8002202:	f005 f853 	bl	80072ac <HAL_UARTEx_SetRxFifoThreshold>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800220c:	f7ff fb04 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002210:	4804      	ldr	r0, [pc, #16]	@ (8002224 <MX_USART1_UART_Init+0x90>)
 8002212:	f004 ffd4 	bl	80071be <HAL_UARTEx_DisableFifoMode>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800221c:	f7ff fafc 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200003f4 	.word	0x200003f4
 8002228:	40013800 	.word	0x40013800

0800222c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002230:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 8002232:	4a25      	ldr	r2, [pc, #148]	@ (80022c8 <MX_USART3_UART_Init+0x9c>)
 8002234:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002236:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 8002238:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800223c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	4b21      	ldr	r3, [pc, #132]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002244:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800224a:	4b1e      	ldr	r3, [pc, #120]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002250:	4b1c      	ldr	r3, [pc, #112]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 8002252:	220c      	movs	r2, #12
 8002254:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002256:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002262:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 8002264:	2200      	movs	r2, #0
 8002266:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002268:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 800226a:	2200      	movs	r2, #0
 800226c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 8002270:	2200      	movs	r2, #0
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002274:	2300      	movs	r3, #0
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	4812      	ldr	r0, [pc, #72]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 800227c:	f004 ff18 	bl	80070b0 <HAL_RS485Ex_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8002286:	f7ff fac7 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800228a:	2100      	movs	r1, #0
 800228c:	480d      	ldr	r0, [pc, #52]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 800228e:	f004 ffcf 	bl	8007230 <HAL_UARTEx_SetTxFifoThreshold>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8002298:	f7ff fabe 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800229c:	2100      	movs	r1, #0
 800229e:	4809      	ldr	r0, [pc, #36]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 80022a0:	f005 f804 	bl	80072ac <HAL_UARTEx_SetRxFifoThreshold>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 80022aa:	f7ff fab5 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022ae:	4805      	ldr	r0, [pc, #20]	@ (80022c4 <MX_USART3_UART_Init+0x98>)
 80022b0:	f004 ff85 	bl	80071be <HAL_UARTEx_DisableFifoMode>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 80022ba:	f7ff faad 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000488 	.word	0x20000488
 80022c8:	40004800 	.word	0x40004800

080022cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b09c      	sub	sp, #112	@ 0x70
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e4:	f107 0318 	add.w	r3, r7, #24
 80022e8:	2244      	movs	r2, #68	@ 0x44
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f005 ff37 	bl	8008160 <memset>
  if(uartHandle->Instance==USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a45      	ldr	r2, [pc, #276]	@ (800240c <HAL_UART_MspInit+0x140>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d13e      	bne.n	800237a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4618      	mov	r0, r3
 800230a:	f002 f963 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002314:	f7ff fa80 	bl	8001818 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002318:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_UART_MspInit+0x144>)
 800231a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231c:	4a3c      	ldr	r2, [pc, #240]	@ (8002410 <HAL_UART_MspInit+0x144>)
 800231e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002322:	6613      	str	r3, [r2, #96]	@ 0x60
 8002324:	4b3a      	ldr	r3, [pc, #232]	@ (8002410 <HAL_UART_MspInit+0x144>)
 8002326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002330:	4b37      	ldr	r3, [pc, #220]	@ (8002410 <HAL_UART_MspInit+0x144>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	4a36      	ldr	r2, [pc, #216]	@ (8002410 <HAL_UART_MspInit+0x144>)
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233c:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <HAL_UART_MspInit+0x144>)
 800233e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002348:	23c0      	movs	r3, #192	@ 0xc0
 800234a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002358:	2307      	movs	r3, #7
 800235a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002360:	4619      	mov	r1, r3
 8002362:	482c      	ldr	r0, [pc, #176]	@ (8002414 <HAL_UART_MspInit+0x148>)
 8002364:	f001 f8c2 	bl	80034ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	2025      	movs	r0, #37	@ 0x25
 800236e:	f000 fa48 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002372:	2025      	movs	r0, #37	@ 0x25
 8002374:	f000 fa5f 	bl	8002836 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002378:	e043      	b.n	8002402 <HAL_UART_MspInit+0x136>
  else if(uartHandle->Instance==USART3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a26      	ldr	r2, [pc, #152]	@ (8002418 <HAL_UART_MspInit+0x14c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d13e      	bne.n	8002402 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002384:	2304      	movs	r3, #4
 8002386:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238c:	f107 0318 	add.w	r3, r7, #24
 8002390:	4618      	mov	r0, r3
 8002392:	f002 f91f 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800239c:	f7ff fa3c 	bl	8001818 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_UART_MspInit+0x144>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002410 <HAL_UART_MspInit+0x144>)
 80023a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ac:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_UART_MspInit+0x144>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_UART_MspInit+0x144>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <HAL_UART_MspInit+0x144>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c4:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_UART_MspInit+0x144>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 80023d0:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 80023d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023e2:	2307      	movs	r3, #7
 80023e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023ea:	4619      	mov	r1, r3
 80023ec:	4809      	ldr	r0, [pc, #36]	@ (8002414 <HAL_UART_MspInit+0x148>)
 80023ee:	f001 f87d 	bl	80034ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2027      	movs	r0, #39	@ 0x27
 80023f8:	f000 fa03 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023fc:	2027      	movs	r0, #39	@ 0x27
 80023fe:	f000 fa1a 	bl	8002836 <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3770      	adds	r7, #112	@ 0x70
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40013800 	.word	0x40013800
 8002410:	40021000 	.word	0x40021000
 8002414:	48000400 	.word	0x48000400
 8002418:	40004800 	.word	0x40004800

0800241c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002420:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 8002422:	4a11      	ldr	r2, [pc, #68]	@ (8002468 <MX_USB_PCD_Init+0x4c>)
 8002424:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002426:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 8002428:	2208      	movs	r2, #8
 800242a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800242c:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 800242e:	2202      	movs	r2, #2
 8002430:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002432:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 8002434:	2202      	movs	r2, #2
 8002436:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 800243a:	2200      	movs	r2, #0
 800243c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 8002440:	2200      	movs	r2, #0
 8002442:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 8002446:	2200      	movs	r2, #0
 8002448:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 800244c:	2200      	movs	r2, #0
 800244e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002450:	4804      	ldr	r0, [pc, #16]	@ (8002464 <MX_USB_PCD_Init+0x48>)
 8002452:	f001 f9e5 	bl	8003820 <HAL_PCD_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800245c:	f7ff f9dc 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000051c 	.word	0x2000051c
 8002468:	40005c00 	.word	0x40005c00

0800246c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b094      	sub	sp, #80	@ 0x50
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	2244      	movs	r2, #68	@ 0x44
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f005 fe6f 	bl	8008160 <memset>
  if(pcdHandle->Instance==USB)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a11      	ldr	r2, [pc, #68]	@ (80024cc <HAL_PCD_MspInit+0x60>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d11a      	bne.n	80024c2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800248c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002490:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002492:	2300      	movs	r3, #0
 8002494:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	4618      	mov	r0, r3
 800249c:	f002 f89a 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80024a6:	f7ff f9b7 	bl	8001818 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_PCD_MspInit+0x64>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <HAL_PCD_MspInit+0x64>)
 80024b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_PCD_MspInit+0x64>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80024c2:	bf00      	nop
 80024c4:	3750      	adds	r7, #80	@ 0x50
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40005c00 	.word	0x40005c00
 80024d0:	40021000 	.word	0x40021000

080024d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d4:	480d      	ldr	r0, [pc, #52]	@ (800250c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024d8:	f7ff fe4a 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024dc:	480c      	ldr	r0, [pc, #48]	@ (8002510 <LoopForever+0x6>)
  ldr r1, =_edata
 80024de:	490d      	ldr	r1, [pc, #52]	@ (8002514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <LoopForever+0xe>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002520 <LoopForever+0x16>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002502:	f005 fe85 	bl	8008210 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002506:	f7fe fff5 	bl	80014f4 <main>

0800250a <LoopForever>:

LoopForever:
    b LoopForever
 800250a:	e7fe      	b.n	800250a <LoopForever>
  ldr   r0, =_estack
 800250c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002518:	0800af04 	.word	0x0800af04
  ldr r2, =_sbss
 800251c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002520:	20000948 	.word	0x20000948

08002524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <ADC1_2_IRQHandler>

08002526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 f95b 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002536:	200f      	movs	r0, #15
 8002538:	f000 f80e 	bl	8002558 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	e001      	b.n	800254c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002548:	f7ff fcd0 	bl	8001eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800254c:	79fb      	ldrb	r3, [r7, #7]

}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_InitTick+0x68>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d022      	beq.n	80025b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_InitTick+0x6c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_InitTick+0x68>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f966 	bl	8002852 <HAL_SYSTICK_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10f      	bne.n	80025ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	d809      	bhi.n	80025a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002592:	2200      	movs	r2, #0
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	f04f 30ff 	mov.w	r0, #4294967295
 800259a:	f000 f932 	bl	8002802 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_InitTick+0x70>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e007      	b.n	80025b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e004      	b.n	80025b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_IncTick+0x1c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_IncTick+0x20>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	4a03      	ldr	r2, [pc, #12]	@ (80025e8 <HAL_IncTick+0x1c>)
 80025dc:	6013      	str	r3, [r2, #0]
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	200007f8 	.word	0x200007f8
 80025ec:	20000008 	.word	0x20000008

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	200007f8 	.word	0x200007f8

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff ffee 	bl	80025f0 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d004      	beq.n	800262c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_Delay+0x40>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262c:	bf00      	nop
 800262e:	f7ff ffdf 	bl	80025f0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	429a      	cmp	r2, r3
 800263c:	d8f7      	bhi.n	800262e <HAL_Delay+0x26>
  {
  }
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000008 	.word	0x20000008

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	@ (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	@ (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	@ (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	@ 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	@ 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b8:	d301      	bcc.n	80027be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00f      	b.n	80027de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027be:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <SysTick_Config+0x40>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c6:	210f      	movs	r1, #15
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f7ff ff8e 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <SysTick_Config+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <SysTick_Config+0x40>)
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	e000e010 	.word	0xe000e010

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff29 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff40 	bl	8002694 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff90 	bl	8002740 <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5f 	bl	80026ec <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff33 	bl	80026b0 <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa4 	bl	80027a8 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d005      	beq.n	800288e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2204      	movs	r2, #4
 8002886:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e037      	b.n	80028fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 020e 	bic.w	r2, r2, #14
 800289c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	f003 021f 	and.w	r2, r3, #31
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f202 	lsl.w	r2, r1, r2
 80028d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00c      	beq.n	80028fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d00d      	beq.n	8002950 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e047      	b.n	80029e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 020e 	bic.w	r2, r2, #14
 800295e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800297a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800297e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	2101      	movs	r1, #1
 800298e:	fa01 f202 	lsl.w	r2, r1, r2
 8002992:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800299c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
    }
  }
  return status;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e147      	b.n	8002c8e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe face 	bl	8000fb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0210 	bic.w	r2, r2, #16
 8002a26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a28:	f7ff fde2 	bl	80025f0 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a2e:	e012      	b.n	8002a56 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a30:	f7ff fdde 	bl	80025f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b0a      	cmp	r3, #10
 8002a3c:	d90b      	bls.n	8002a56 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e11b      	b.n	8002c8e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d0e5      	beq.n	8002a30 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a74:	f7ff fdbc 	bl	80025f0 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a7a:	e012      	b.n	8002aa2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a7c:	f7ff fdb8 	bl	80025f0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b0a      	cmp	r3, #10
 8002a88:	d90b      	bls.n	8002aa2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0f5      	b.n	8002c8e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0e5      	beq.n	8002a7c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0202 	orr.w	r2, r2, #2
 8002abe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a74      	ldr	r2, [pc, #464]	@ (8002c98 <HAL_FDCAN_Init+0x2ac>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d103      	bne.n	8002ad2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002aca:	4a74      	ldr	r2, [pc, #464]	@ (8002c9c <HAL_FDCAN_Init+0x2b0>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7c1b      	ldrb	r3, [r3, #16]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae8:	619a      	str	r2, [r3, #24]
 8002aea:	e007      	b.n	8002afc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002afa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7c5b      	ldrb	r3, [r3, #17]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d108      	bne.n	8002b16 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b12:	619a      	str	r2, [r3, #24]
 8002b14:	e007      	b.n	8002b26 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b24:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7c9b      	ldrb	r3, [r3, #18]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d108      	bne.n	8002b40 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b3c:	619a      	str	r2, [r3, #24]
 8002b3e:	e007      	b.n	8002b50 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b4e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002b74:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0210 	bic.w	r2, r2, #16
 8002b84:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d108      	bne.n	8002ba0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0204 	orr.w	r2, r2, #4
 8002b9c:	619a      	str	r2, [r3, #24]
 8002b9e:	e02c      	b.n	8002bfa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d028      	beq.n	8002bfa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d01c      	beq.n	8002bea <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bbe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0210 	orr.w	r2, r2, #16
 8002bce:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d110      	bne.n	8002bfa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0220 	orr.w	r2, r2, #32
 8002be6:	619a      	str	r2, [r3, #24]
 8002be8:	e007      	b.n	8002bfa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0220 	orr.w	r2, r2, #32
 8002bf8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c0a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c12:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c22:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c24:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c2e:	d115      	bne.n	8002c5c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c3e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	3b01      	subs	r3, #1
 8002c46:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c48:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c58:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c5a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fb68 	bl	8003348 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40006400 	.word	0x40006400
 8002c9c:	40006500 	.word	0x40006500

08002ca0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cb0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d002      	beq.n	8002cbe <HAL_FDCAN_ConfigFilter+0x1e>
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d13d      	bne.n	8002d3a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d119      	bne.n	8002cfa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002cd2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002cda:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e01d      	b.n	8002d36 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	075a      	lsls	r2, r3, #29
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	079a      	lsls	r2, r3, #30
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e006      	b.n	8002d48 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3e:	f043 0202 	orr.w	r2, r3, #2
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d110      	bne.n	8002d8a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e006      	b.n	8002d98 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8e:	f043 0204 	orr.w	r2, r3, #4
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d12c      	bne.n	8002e16 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e023      	b.n	8002e24 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fafe 	bl	80033f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e006      	b.n	8002e24 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1a:	f043 0208 	orr.w	r2, r3, #8
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e3e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d003      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0x22>
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	f040 80c8 	bne.w	8002fde <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03b      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d031      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d027      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01d      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d013      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d13b      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d131      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d127      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11d      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d113      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00c      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0202 	orr.w	r2, r2, #2
 8002f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e006      	b.n	8002fec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	@ 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003006:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800300a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003014:	4013      	ands	r3, r2
 8003016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800302c:	4013      	ands	r3, r2
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003044:	4013      	ands	r3, r2
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003052:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305a:	6a3a      	ldr	r2, [r7, #32]
 800305c:	4013      	ands	r3, r2
 800305e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003066:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800306a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	4013      	ands	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003086:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00c      	beq.n	80030ae <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2240      	movs	r2, #64	@ 0x40
 80030a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f92d 	bl	8003308 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01a      	beq.n	80030f0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d014      	beq.n	80030f0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030ce:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80030e8:	6939      	ldr	r1, [r7, #16]
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8ed 	bl	80032ca <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80030fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f8ac 	bl	800325e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003112:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8ac 	bl	8003274 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003128:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800312a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f8ac 	bl	800328a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	0a5b      	lsrs	r3, r3, #9
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	0a5b      	lsrs	r3, r3, #9
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003152:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8a3 	bl	80032a0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	09db      	lsrs	r3, r3, #7
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d019      	beq.n	800319a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	09db      	lsrs	r3, r3, #7
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800317a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2280      	movs	r2, #128	@ 0x80
 8003190:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f88d 	bl	80032b4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	0b5b      	lsrs	r3, r3, #13
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	0b5b      	lsrs	r3, r3, #13
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031ba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f88f 	bl	80032e0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	0bdb      	lsrs	r3, r3, #15
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	0bdb      	lsrs	r3, r3, #15
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80031e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f885 	bl	80032f4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	0b9b      	lsrs	r3, r3, #14
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	0b9b      	lsrs	r3, r3, #14
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800320a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003210:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003226:	69f9      	ldr	r1, [r7, #28]
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f881 	bl	8003330 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f863 	bl	800331c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003256:	bf00      	nop
 8003258:	3730      	adds	r7, #48	@ 0x30
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003350:	4b27      	ldr	r3, [pc, #156]	@ (80033f0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003352:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003362:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336a:	041a      	lsls	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003388:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003390:	061a      	lsls	r2, r3, #24
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e005      	b.n	80033d6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3304      	adds	r3, #4
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3f3      	bcc.n	80033ca <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	4000a400 	.word	0x4000a400

080033f4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	@ 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003412:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800341a:	4313      	orrs	r3, r2
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	e00a      	b.n	8003436 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003428:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800342e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003430:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003434:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003440:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003446:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800344c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	3304      	adds	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	3304      	adds	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e020      	b.n	80034ca <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3303      	adds	r3, #3
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3302      	adds	r3, #2
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	440b      	add	r3, r1
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80034a0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	3301      	adds	r3, #1
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	440b      	add	r3, r1
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80034ae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	440a      	add	r2, r1
 80034b6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80034b8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3304      	adds	r3, #4
 80034c2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3304      	adds	r3, #4
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	4a06      	ldr	r2, [pc, #24]	@ (80034e8 <FDCAN_CopyMessageToRAM+0xf4>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
 80034d2:	461a      	mov	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d3d6      	bcc.n	8003488 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3724      	adds	r7, #36	@ 0x24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	0800ab44 	.word	0x0800ab44

080034ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034fa:	e15a      	b.n	80037b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 814c 	beq.w	80037ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d005      	beq.n	800352c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003528:	2b02      	cmp	r3, #2
 800352a:	d130      	bne.n	800358e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003562:	2201      	movs	r2, #1
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0201 	and.w	r2, r3, #1
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b03      	cmp	r3, #3
 8003598:	d017      	beq.n	80035ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2203      	movs	r2, #3
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d123      	bne.n	800361e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	220f      	movs	r2, #15
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0203 	and.w	r2, r3, #3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80a6 	beq.w	80037ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003660:	4b5b      	ldr	r3, [pc, #364]	@ (80037d0 <HAL_GPIO_Init+0x2e4>)
 8003662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003664:	4a5a      	ldr	r2, [pc, #360]	@ (80037d0 <HAL_GPIO_Init+0x2e4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6613      	str	r3, [r2, #96]	@ 0x60
 800366c:	4b58      	ldr	r3, [pc, #352]	@ (80037d0 <HAL_GPIO_Init+0x2e4>)
 800366e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003678:	4a56      	ldr	r2, [pc, #344]	@ (80037d4 <HAL_GPIO_Init+0x2e8>)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	3302      	adds	r3, #2
 8003680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036a2:	d01f      	beq.n	80036e4 <HAL_GPIO_Init+0x1f8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a4c      	ldr	r2, [pc, #304]	@ (80037d8 <HAL_GPIO_Init+0x2ec>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d019      	beq.n	80036e0 <HAL_GPIO_Init+0x1f4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a4b      	ldr	r2, [pc, #300]	@ (80037dc <HAL_GPIO_Init+0x2f0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <HAL_GPIO_Init+0x1f0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a4a      	ldr	r2, [pc, #296]	@ (80037e0 <HAL_GPIO_Init+0x2f4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00d      	beq.n	80036d8 <HAL_GPIO_Init+0x1ec>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a49      	ldr	r2, [pc, #292]	@ (80037e4 <HAL_GPIO_Init+0x2f8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <HAL_GPIO_Init+0x1e8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a48      	ldr	r2, [pc, #288]	@ (80037e8 <HAL_GPIO_Init+0x2fc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_GPIO_Init+0x1e4>
 80036cc:	2305      	movs	r3, #5
 80036ce:	e00a      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036d0:	2306      	movs	r3, #6
 80036d2:	e008      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e006      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036d8:	2303      	movs	r3, #3
 80036da:	e004      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036dc:	2302      	movs	r3, #2
 80036de:	e002      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036e4:	2300      	movs	r3, #0
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	f002 0203 	and.w	r2, r2, #3
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	4093      	lsls	r3, r2
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f6:	4937      	ldr	r1, [pc, #220]	@ (80037d4 <HAL_GPIO_Init+0x2e8>)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003704:	4b39      	ldr	r3, [pc, #228]	@ (80037ec <HAL_GPIO_Init+0x300>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003728:	4a30      	ldr	r2, [pc, #192]	@ (80037ec <HAL_GPIO_Init+0x300>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800372e:	4b2f      	ldr	r3, [pc, #188]	@ (80037ec <HAL_GPIO_Init+0x300>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003752:	4a26      	ldr	r2, [pc, #152]	@ (80037ec <HAL_GPIO_Init+0x300>)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003758:	4b24      	ldr	r3, [pc, #144]	@ (80037ec <HAL_GPIO_Init+0x300>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800377c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ec <HAL_GPIO_Init+0x300>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003782:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <HAL_GPIO_Init+0x300>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037a6:	4a11      	ldr	r2, [pc, #68]	@ (80037ec <HAL_GPIO_Init+0x300>)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f ae9d 	bne.w	80034fc <HAL_GPIO_Init+0x10>
  }
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010000 	.word	0x40010000
 80037d8:	48000400 	.word	0x48000400
 80037dc:	48000800 	.word	0x48000800
 80037e0:	48000c00 	.word	0x48000c00
 80037e4:	48001000 	.word	0x48001000
 80037e8:	48001400 	.word	0x48001400
 80037ec:	40010400 	.word	0x40010400

080037f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
 80037fc:	4613      	mov	r3, r2
 80037fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003800:	787b      	ldrb	r3, [r7, #1]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800380c:	e002      	b.n	8003814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0c0      	b.n	80039b4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fe10 	bl	800246c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2203      	movs	r2, #3
 8003850:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f003 fdb3 	bl	80073c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
 8003862:	e03e      	b.n	80038e2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	440b      	add	r3, r1
 8003872:	3311      	adds	r3, #17
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	3310      	adds	r3, #16
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	3313      	adds	r3, #19
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	3320      	adds	r3, #32
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	440b      	add	r3, r1
 80038c2:	3324      	adds	r3, #36	@ 0x24
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	440b      	add	r3, r1
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	3301      	adds	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	791b      	ldrb	r3, [r3, #4]
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d3bb      	bcc.n	8003864 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e044      	b.n	800397c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038f2:	7bfa      	ldrb	r2, [r7, #15]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	440b      	add	r3, r1
 8003900:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	440b      	add	r3, r1
 8003958:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	3301      	adds	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	791b      	ldrb	r3, [r3, #4]
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	429a      	cmp	r2, r3
 8003984:	d3b5      	bcc.n	80038f2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003992:	f003 fd32 	bl	80073fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7a9b      	ldrb	r3, [r3, #10]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d102      	bne.n	80039b2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f805 	bl	80039bc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d141      	bne.n	8003aa2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a2a:	d131      	bne.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a2c:	4b47      	ldr	r3, [pc, #284]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a32:	4a46      	ldr	r2, [pc, #280]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a3c:	4b43      	ldr	r3, [pc, #268]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a44:	4a41      	ldr	r2, [pc, #260]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a4c:	4b40      	ldr	r3, [pc, #256]	@ (8003b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2232      	movs	r2, #50	@ 0x32
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	4a3f      	ldr	r2, [pc, #252]	@ (8003b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	0c9b      	lsrs	r3, r3, #18
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a62:	e002      	b.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a6a:	4b38      	ldr	r3, [pc, #224]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a76:	d102      	bne.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f2      	bne.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a7e:	4b33      	ldr	r3, [pc, #204]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a8a:	d158      	bne.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e057      	b.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a90:	4b2e      	ldr	r3, [pc, #184]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a96:	4a2d      	ldr	r2, [pc, #180]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003aa0:	e04d      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa8:	d141      	bne.n	8003b2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aaa:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab6:	d131      	bne.n	8003b1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ab8:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003abe:	4a23      	ldr	r2, [pc, #140]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ac8:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ad6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2232      	movs	r2, #50	@ 0x32
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	0c9b      	lsrs	r3, r3, #18
 8003aea:	3301      	adds	r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aee:	e002      	b.n	8003af6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af6:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b02:	d102      	bne.n	8003b0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f2      	bne.n	8003af0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b16:	d112      	bne.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e011      	b.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b22:	4a0a      	ldr	r2, [pc, #40]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b2c:	e007      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b2e:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b36:	4a05      	ldr	r2, [pc, #20]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	20000000 	.word	0x20000000
 8003b54:	431bde83 	.word	0x431bde83

08003b58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a04      	ldr	r2, [pc, #16]	@ (8003b74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b66:	6093      	str	r3, [r2, #8]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40007000 	.word	0x40007000

08003b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e2fe      	b.n	8004188 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d075      	beq.n	8003c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b96:	4b97      	ldr	r3, [pc, #604]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba0:	4b94      	ldr	r3, [pc, #592]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d102      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x3e>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_OscConfig+0x44>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d05b      	beq.n	8003c80 <HAL_RCC_OscConfig+0x108>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d157      	bne.n	8003c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e2d9      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bdc:	d106      	bne.n	8003bec <HAL_RCC_OscConfig+0x74>
 8003bde:	4b85      	ldr	r3, [pc, #532]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a84      	ldr	r2, [pc, #528]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e01d      	b.n	8003c28 <HAL_RCC_OscConfig+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x98>
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b7c      	ldr	r3, [pc, #496]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7b      	ldr	r2, [pc, #492]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0xb0>
 8003c10:	4b78      	ldr	r3, [pc, #480]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a77      	ldr	r2, [pc, #476]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b75      	ldr	r3, [pc, #468]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a74      	ldr	r2, [pc, #464]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe fcde 	bl	80025f0 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe fcda 	bl	80025f0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	@ 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e29e      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0xc0>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fcca 	bl	80025f0 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fcc6 	bl	80025f0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	@ 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e28a      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c72:	4b60      	ldr	r3, [pc, #384]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0xe8>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d075      	beq.n	8003d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8e:	4b59      	ldr	r3, [pc, #356]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c98:	4b56      	ldr	r3, [pc, #344]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d102      	bne.n	8003cae <HAL_RCC_OscConfig+0x136>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x13c>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d11f      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_OscConfig+0x154>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e25d      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	4b49      	ldr	r3, [pc, #292]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	061b      	lsls	r3, r3, #24
 8003cda:	4946      	ldr	r1, [pc, #280]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ce0:	4b45      	ldr	r3, [pc, #276]	@ (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe fc37 	bl	8002558 <HAL_InitTick>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d043      	beq.n	8003d78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e249      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d023      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a3c      	ldr	r2, [pc, #240]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe fc72 	bl	80025f0 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d10:	f7fe fc6e 	bl	80025f0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e232      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d22:	4b34      	ldr	r3, [pc, #208]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b31      	ldr	r3, [pc, #196]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	061b      	lsls	r3, r3, #24
 8003d3c:	492d      	ldr	r1, [pc, #180]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
 8003d42:	e01a      	b.n	8003d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d44:	4b2b      	ldr	r3, [pc, #172]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2a      	ldr	r2, [pc, #168]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fc4e 	bl	80025f0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe fc4a 	bl	80025f0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e20e      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d6a:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1e0>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d041      	beq.n	8003e0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01c      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8e:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d94:	4a17      	ldr	r2, [pc, #92]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fe fc27 	bl	80025f0 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fe fc23 	bl	80025f0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e1e7      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003db8:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ef      	beq.n	8003da6 <HAL_RCC_OscConfig+0x22e>
 8003dc6:	e020      	b.n	8003e0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dce:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7fe fc0a 	bl	80025f0 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dde:	e00d      	b.n	8003dfc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de0:	f7fe fc06 	bl	80025f0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d906      	bls.n	8003dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e1ca      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ea      	bne.n	8003de0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80a6 	beq.w	8003f64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e1c:	4b84      	ldr	r3, [pc, #528]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_OscConfig+0x2b4>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x2b6>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	4b7f      	ldr	r3, [pc, #508]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e36:	4a7e      	ldr	r2, [pc, #504]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4e:	4b79      	ldr	r3, [pc, #484]	@ (8004034 <HAL_RCC_OscConfig+0x4bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d118      	bne.n	8003e8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5a:	4b76      	ldr	r3, [pc, #472]	@ (8004034 <HAL_RCC_OscConfig+0x4bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a75      	ldr	r2, [pc, #468]	@ (8004034 <HAL_RCC_OscConfig+0x4bc>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fe fbc3 	bl	80025f0 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fe fbbf 	bl	80025f0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e183      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e80:	4b6c      	ldr	r3, [pc, #432]	@ (8004034 <HAL_RCC_OscConfig+0x4bc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d108      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x32e>
 8003e94:	4b66      	ldr	r3, [pc, #408]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	4a65      	ldr	r2, [pc, #404]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ea4:	e024      	b.n	8003ef0 <HAL_RCC_OscConfig+0x378>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	d110      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x358>
 8003eae:	4b60      	ldr	r3, [pc, #384]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb4:	4a5e      	ldr	r2, [pc, #376]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	f043 0304 	orr.w	r3, r3, #4
 8003eba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ece:	e00f      	b.n	8003ef0 <HAL_RCC_OscConfig+0x378>
 8003ed0:	4b57      	ldr	r3, [pc, #348]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed6:	4a56      	ldr	r2, [pc, #344]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ee0:	4b53      	ldr	r3, [pc, #332]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee6:	4a52      	ldr	r2, [pc, #328]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003ee8:	f023 0304 	bic.w	r3, r3, #4
 8003eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d016      	beq.n	8003f26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fe fb7a 	bl	80025f0 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7fe fb76 	bl	80025f0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e138      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f16:	4b46      	ldr	r3, [pc, #280]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0ed      	beq.n	8003f00 <HAL_RCC_OscConfig+0x388>
 8003f24:	e015      	b.n	8003f52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fe fb63 	bl	80025f0 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fe fb5f 	bl	80025f0 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e121      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f44:	4b3a      	ldr	r3, [pc, #232]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ed      	bne.n	8003f2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f52:	7ffb      	ldrb	r3, [r7, #31]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b35      	ldr	r3, [pc, #212]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5c:	4a34      	ldr	r2, [pc, #208]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d03c      	beq.n	8003fea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01c      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f78:	4b2d      	ldr	r3, [pc, #180]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f88:	f7fe fb32 	bl	80025f0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f90:	f7fe fb2e 	bl	80025f0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0f2      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa2:	4b23      	ldr	r3, [pc, #140]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ef      	beq.n	8003f90 <HAL_RCC_OscConfig+0x418>
 8003fb0:	e01b      	b.n	8003fea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fb15 	bl	80025f0 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fca:	f7fe fb11 	bl	80025f0 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0d5      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fdc:	4b14      	ldr	r3, [pc, #80]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ef      	bne.n	8003fca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80c9 	beq.w	8004186 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	f000 8083 	beq.w	8004108 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d15e      	bne.n	80040c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a08      	ldr	r2, [pc, #32]	@ (8004030 <HAL_RCC_OscConfig+0x4b8>)
 8004010:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fe faeb 	bl	80025f0 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401c:	e00c      	b.n	8004038 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401e:	f7fe fae7 	bl	80025f0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d905      	bls.n	8004038 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e0ab      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
 8004030:	40021000 	.word	0x40021000
 8004034:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004038:	4b55      	ldr	r3, [pc, #340]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ec      	bne.n	800401e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004044:	4b52      	ldr	r3, [pc, #328]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	4b52      	ldr	r3, [pc, #328]	@ (8004194 <HAL_RCC_OscConfig+0x61c>)
 800404a:	4013      	ands	r3, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6a11      	ldr	r1, [r2, #32]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004054:	3a01      	subs	r2, #1
 8004056:	0112      	lsls	r2, r2, #4
 8004058:	4311      	orrs	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800405e:	0212      	lsls	r2, r2, #8
 8004060:	4311      	orrs	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004066:	0852      	lsrs	r2, r2, #1
 8004068:	3a01      	subs	r2, #1
 800406a:	0552      	lsls	r2, r2, #21
 800406c:	4311      	orrs	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004072:	0852      	lsrs	r2, r2, #1
 8004074:	3a01      	subs	r2, #1
 8004076:	0652      	lsls	r2, r2, #25
 8004078:	4311      	orrs	r1, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800407e:	06d2      	lsls	r2, r2, #27
 8004080:	430a      	orrs	r2, r1
 8004082:	4943      	ldr	r1, [pc, #268]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 8004084:	4313      	orrs	r3, r2
 8004086:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004088:	4b41      	ldr	r3, [pc, #260]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a40      	ldr	r2, [pc, #256]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 800408e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004092:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004094:	4b3e      	ldr	r3, [pc, #248]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a3d      	ldr	r2, [pc, #244]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 800409a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800409e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fe faa6 	bl	80025f0 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fe faa2 	bl	80025f0 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e066      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ba:	4b35      	ldr	r3, [pc, #212]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x530>
 80040c6:	e05e      	b.n	8004186 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c8:	4b31      	ldr	r3, [pc, #196]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a30      	ldr	r2, [pc, #192]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 80040ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe fa8c 	bl	80025f0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fe fa88 	bl	80025f0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e04c      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ee:	4b28      	ldr	r3, [pc, #160]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80040fa:	4b25      	ldr	r3, [pc, #148]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	4924      	ldr	r1, [pc, #144]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 8004100:	4b25      	ldr	r3, [pc, #148]	@ (8004198 <HAL_RCC_OscConfig+0x620>)
 8004102:	4013      	ands	r3, r2
 8004104:	60cb      	str	r3, [r1, #12]
 8004106:	e03e      	b.n	8004186 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e039      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004114:	4b1e      	ldr	r3, [pc, #120]	@ (8004190 <HAL_RCC_OscConfig+0x618>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	429a      	cmp	r2, r3
 8004126:	d12c      	bne.n	8004182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	3b01      	subs	r3, #1
 8004134:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d123      	bne.n	8004182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d11b      	bne.n	8004182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d113      	bne.n	8004182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	3b01      	subs	r3, #1
 8004168:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d109      	bne.n	8004182 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	3b01      	subs	r3, #1
 800417c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000
 8004194:	019f800c 	.word	0x019f800c
 8004198:	feeefffc 	.word	0xfeeefffc

0800419c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e11e      	b.n	80043f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b91      	ldr	r3, [pc, #580]	@ (80043fc <HAL_RCC_ClockConfig+0x260>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d910      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b8e      	ldr	r3, [pc, #568]	@ (80043fc <HAL_RCC_ClockConfig+0x260>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 020f 	bic.w	r2, r3, #15
 80041ca:	498c      	ldr	r1, [pc, #560]	@ (80043fc <HAL_RCC_ClockConfig+0x260>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b8a      	ldr	r3, [pc, #552]	@ (80043fc <HAL_RCC_ClockConfig+0x260>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e106      	b.n	80043f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d073      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d129      	bne.n	800424c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f8:	4b81      	ldr	r3, [pc, #516]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0f4      	b.n	80043f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004208:	f000 f99e 	bl	8004548 <RCC_GetSysClockFreqFromPLLSource>
 800420c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4a7c      	ldr	r2, [pc, #496]	@ (8004404 <HAL_RCC_ClockConfig+0x268>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d93f      	bls.n	8004296 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004216:	4b7a      	ldr	r3, [pc, #488]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800422a:	2b00      	cmp	r3, #0
 800422c:	d033      	beq.n	8004296 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004232:	2b00      	cmp	r3, #0
 8004234:	d12f      	bne.n	8004296 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004236:	4b72      	ldr	r3, [pc, #456]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423e:	4a70      	ldr	r2, [pc, #448]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004244:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004246:	2380      	movs	r3, #128	@ 0x80
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e024      	b.n	8004296 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d107      	bne.n	8004264 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004254:	4b6a      	ldr	r3, [pc, #424]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d109      	bne.n	8004274 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0c6      	b.n	80043f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004264:	4b66      	ldr	r3, [pc, #408]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0be      	b.n	80043f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004274:	f000 f8ce 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8004278:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4a61      	ldr	r2, [pc, #388]	@ (8004404 <HAL_RCC_ClockConfig+0x268>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d909      	bls.n	8004296 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004282:	4b5f      	ldr	r3, [pc, #380]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800428a:	4a5d      	ldr	r2, [pc, #372]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 800428c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004290:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004292:	2380      	movs	r3, #128	@ 0x80
 8004294:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b5a      	ldr	r3, [pc, #360]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4957      	ldr	r1, [pc, #348]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a8:	f7fe f9a2 	bl	80025f0 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fe f99e 	bl	80025f0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e095      	b.n	80043f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d023      	beq.n	800432c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f0:	4b43      	ldr	r3, [pc, #268]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a42      	ldr	r2, [pc, #264]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80042f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004308:	4b3d      	ldr	r3, [pc, #244]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004310:	4a3b      	ldr	r2, [pc, #236]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004316:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b39      	ldr	r3, [pc, #228]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4936      	ldr	r1, [pc, #216]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
 800432a:	e008      	b.n	800433e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b80      	cmp	r3, #128	@ 0x80
 8004330:	d105      	bne.n	800433e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004332:	4b33      	ldr	r3, [pc, #204]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4a32      	ldr	r2, [pc, #200]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004338:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800433c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800433e:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <HAL_RCC_ClockConfig+0x260>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d21d      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434c:	4b2b      	ldr	r3, [pc, #172]	@ (80043fc <HAL_RCC_ClockConfig+0x260>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f023 020f 	bic.w	r2, r3, #15
 8004354:	4929      	ldr	r1, [pc, #164]	@ (80043fc <HAL_RCC_ClockConfig+0x260>)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800435c:	f7fe f948 	bl	80025f0 <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	e00a      	b.n	800437a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f7fe f944 	bl	80025f0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e03b      	b.n	80043f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <HAL_RCC_ClockConfig+0x260>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d1ed      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004394:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4917      	ldr	r1, [pc, #92]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b2:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	490f      	ldr	r1, [pc, #60]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043c6:	f000 f825 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80043ca:	4602      	mov	r2, r0
 80043cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <HAL_RCC_ClockConfig+0x264>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	490c      	ldr	r1, [pc, #48]	@ (8004408 <HAL_RCC_ClockConfig+0x26c>)
 80043d8:	5ccb      	ldrb	r3, [r1, r3]
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	4a0a      	ldr	r2, [pc, #40]	@ (800440c <HAL_RCC_ClockConfig+0x270>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004410 <HAL_RCC_ClockConfig+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe f8b4 	bl	8002558 <HAL_InitTick>
 80043f0:	4603      	mov	r3, r0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40022000 	.word	0x40022000
 8004400:	40021000 	.word	0x40021000
 8004404:	04c4b400 	.word	0x04c4b400
 8004408:	0800ab2c 	.word	0x0800ab2c
 800440c:	20000000 	.word	0x20000000
 8004410:	20000004 	.word	0x20000004

08004414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800441a:	4b2c      	ldr	r3, [pc, #176]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b04      	cmp	r3, #4
 8004424:	d102      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004426:	4b2a      	ldr	r3, [pc, #168]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e047      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800442c:	4b27      	ldr	r3, [pc, #156]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d102      	bne.n	800443e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004438:	4b26      	ldr	r3, [pc, #152]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e03e      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800443e:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d136      	bne.n	80044b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800444a:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004454:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	3301      	adds	r3, #1
 8004460:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d10c      	bne.n	8004482 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004468:	4a1a      	ldr	r2, [pc, #104]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004472:	68d2      	ldr	r2, [r2, #12]
 8004474:	0a12      	lsrs	r2, r2, #8
 8004476:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	617b      	str	r3, [r7, #20]
      break;
 8004480:	e00c      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004482:	4a13      	ldr	r2, [pc, #76]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	4a10      	ldr	r2, [pc, #64]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800448c:	68d2      	ldr	r2, [r2, #12]
 800448e:	0a12      	lsrs	r2, r2, #8
 8004490:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]
      break;
 800449a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800449c:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	0e5b      	lsrs	r3, r3, #25
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	3301      	adds	r3, #1
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	e001      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044bc:	693b      	ldr	r3, [r7, #16]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000
 80044d0:	00f42400 	.word	0x00f42400
 80044d4:	007a1200 	.word	0x007a1200

080044d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b03      	ldr	r3, [pc, #12]	@ (80044ec <HAL_RCC_GetHCLKFreq+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000000 	.word	0x20000000

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044f4:	f7ff fff0 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	@ (8004518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	0800ab3c 	.word	0x0800ab3c

0800451c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004520:	f7ff ffda 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0adb      	lsrs	r3, r3, #11
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4904      	ldr	r1, [pc, #16]	@ (8004544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	0800ab3c 	.word	0x0800ab3c

08004548 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004558:	4b1b      	ldr	r3, [pc, #108]	@ (80045c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3301      	adds	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d10c      	bne.n	8004586 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800456c:	4a17      	ldr	r2, [pc, #92]	@ (80045cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004576:	68d2      	ldr	r2, [r2, #12]
 8004578:	0a12      	lsrs	r2, r2, #8
 800457a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
    break;
 8004584:	e00c      	b.n	80045a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004586:	4a12      	ldr	r2, [pc, #72]	@ (80045d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	4a0e      	ldr	r2, [pc, #56]	@ (80045c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004590:	68d2      	ldr	r2, [r2, #12]
 8004592:	0a12      	lsrs	r2, r2, #8
 8004594:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
    break;
 800459e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	0e5b      	lsrs	r3, r3, #25
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	3301      	adds	r3, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045ba:	687b      	ldr	r3, [r7, #4]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40021000 	.word	0x40021000
 80045cc:	007a1200 	.word	0x007a1200
 80045d0:	00f42400 	.word	0x00f42400

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045dc:	2300      	movs	r3, #0
 80045de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045e0:	2300      	movs	r3, #0
 80045e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8098 	beq.w	8004722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f2:	2300      	movs	r3, #0
 80045f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f6:	4b43      	ldr	r3, [pc, #268]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10d      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4b40      	ldr	r3, [pc, #256]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	4a3f      	ldr	r2, [pc, #252]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460c:	6593      	str	r3, [r2, #88]	@ 0x58
 800460e:	4b3d      	ldr	r3, [pc, #244]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800461e:	4b3a      	ldr	r3, [pc, #232]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a39      	ldr	r2, [pc, #228]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800462a:	f7fd ffe1 	bl	80025f0 <HAL_GetTick>
 800462e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004630:	e009      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004632:	f7fd ffdd 	bl	80025f0 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d902      	bls.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	74fb      	strb	r3, [r7, #19]
        break;
 8004644:	e005      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004646:	4b30      	ldr	r3, [pc, #192]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0ef      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d159      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004658:	4b2a      	ldr	r3, [pc, #168]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004662:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01e      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	429a      	cmp	r2, r3
 8004672:	d019      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004674:	4b23      	ldr	r3, [pc, #140]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800467e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004680:	4b20      	ldr	r3, [pc, #128]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	4a1f      	ldr	r2, [pc, #124]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004690:	4b1c      	ldr	r3, [pc, #112]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004696:	4a1b      	ldr	r2, [pc, #108]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046a0:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fd ff9d 	bl	80025f0 <HAL_GetTick>
 80046b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b8:	e00b      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fd ff99 	bl	80025f0 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d902      	bls.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	74fb      	strb	r3, [r7, #19]
            break;
 80046d0:	e006      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ec      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10b      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e6:	4b07      	ldr	r3, [pc, #28]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	4903      	ldr	r1, [pc, #12]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	74bb      	strb	r3, [r7, #18]
 8004702:	e005      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004704:	40021000 	.word	0x40021000
 8004708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004710:	7c7b      	ldrb	r3, [r7, #17]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004716:	4ba6      	ldr	r3, [pc, #664]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471a:	4aa5      	ldr	r2, [pc, #660]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800472e:	4ba0      	ldr	r3, [pc, #640]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004734:	f023 0203 	bic.w	r2, r3, #3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	499c      	ldr	r1, [pc, #624]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004750:	4b97      	ldr	r3, [pc, #604]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f023 020c 	bic.w	r2, r3, #12
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	4994      	ldr	r1, [pc, #592]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004772:	4b8f      	ldr	r3, [pc, #572]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	498b      	ldr	r1, [pc, #556]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004794:	4b86      	ldr	r3, [pc, #536]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	4983      	ldr	r1, [pc, #524]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047b6:	4b7e      	ldr	r3, [pc, #504]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	497a      	ldr	r1, [pc, #488]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d8:	4b75      	ldr	r3, [pc, #468]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	4972      	ldr	r1, [pc, #456]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047fa:	4b6d      	ldr	r3, [pc, #436]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004800:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4969      	ldr	r1, [pc, #420]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481c:	4b64      	ldr	r3, [pc, #400]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	4961      	ldr	r1, [pc, #388]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800483e:	4b5c      	ldr	r3, [pc, #368]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004844:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	4958      	ldr	r1, [pc, #352]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004860:	4b53      	ldr	r3, [pc, #332]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486e:	4950      	ldr	r1, [pc, #320]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800487e:	d105      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004880:	4b4b      	ldr	r3, [pc, #300]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a4a      	ldr	r2, [pc, #296]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800488a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004894:	2b00      	cmp	r3, #0
 8004896:	d015      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004898:	4b45      	ldr	r3, [pc, #276]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	4942      	ldr	r1, [pc, #264]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048b6:	d105      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b8:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a3c      	ldr	r2, [pc, #240]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048d0:	4b37      	ldr	r3, [pc, #220]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	4934      	ldr	r1, [pc, #208]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f0:	4b2f      	ldr	r3, [pc, #188]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a2e      	ldr	r2, [pc, #184]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d015      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004908:	4b29      	ldr	r3, [pc, #164]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	4926      	ldr	r1, [pc, #152]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004926:	d105      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b21      	ldr	r3, [pc, #132]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a20      	ldr	r2, [pc, #128]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004932:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004940:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	4918      	ldr	r1, [pc, #96]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800495e:	d105      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004960:	4b13      	ldr	r3, [pc, #76]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a12      	ldr	r2, [pc, #72]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004978:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	490a      	ldr	r1, [pc, #40]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004996:	d105      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004998:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a04      	ldr	r2, [pc, #16]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000

080049b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e09d      	b.n	8004b02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d108      	bne.n	80049e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049d6:	d009      	beq.n	80049ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	61da      	str	r2, [r3, #28]
 80049de:	e005      	b.n	80049ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd fa2c 	bl	8001e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a2c:	d902      	bls.n	8004a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e002      	b.n	8004a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a42:	d007      	beq.n	8004a54 <HAL_SPI_Init+0xa0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	ea42 0103 	orr.w	r1, r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	0c1b      	lsrs	r3, r3, #16
 8004ab0:	f003 0204 	and.w	r2, r3, #4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ad0:	ea42 0103 	orr.w	r1, r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b088      	sub	sp, #32
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b1a:	f7fd fd69 	bl	80025f0 <HAL_GetTick>
 8004b1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d001      	beq.n	8004b34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
 8004b32:	e15c      	b.n	8004dee <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_SPI_Transmit+0x36>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e154      	b.n	8004dee <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_SPI_Transmit+0x48>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e14d      	b.n	8004dee <HAL_SPI_Transmit+0x2e4>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d007      	beq.n	8004be4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bec:	d952      	bls.n	8004c94 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Transmit+0xf2>
 8004bf6:	8b7b      	ldrh	r3, [r7, #26]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d145      	bne.n	8004c88 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c00:	881a      	ldrh	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0c:	1c9a      	adds	r2, r3, #2
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c20:	e032      	b.n	8004c88 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d112      	bne.n	8004c56 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c54:	e018      	b.n	8004c88 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c56:	f7fd fccb 	bl	80025f0 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d803      	bhi.n	8004c6e <HAL_SPI_Transmit+0x164>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d102      	bne.n	8004c74 <HAL_SPI_Transmit+0x16a>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0b2      	b.n	8004dee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1c7      	bne.n	8004c22 <HAL_SPI_Transmit+0x118>
 8004c92:	e083      	b.n	8004d9c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_Transmit+0x198>
 8004c9c:	8b7b      	ldrh	r3, [r7, #26]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d177      	bne.n	8004d92 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d912      	bls.n	8004cd2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	881a      	ldrh	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	1c9a      	adds	r2, r3, #2
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b02      	subs	r3, #2
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cd0:	e05f      	b.n	8004d92 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004cf8:	e04b      	b.n	8004d92 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d12b      	bne.n	8004d60 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d912      	bls.n	8004d38 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d16:	881a      	ldrh	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	1c9a      	adds	r2, r3, #2
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b02      	subs	r3, #2
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d36:	e02c      	b.n	8004d92 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	7812      	ldrb	r2, [r2, #0]
 8004d44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d5e:	e018      	b.n	8004d92 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d60:	f7fd fc46 	bl	80025f0 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d803      	bhi.n	8004d78 <HAL_SPI_Transmit+0x26e>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d102      	bne.n	8004d7e <HAL_SPI_Transmit+0x274>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e02d      	b.n	8004dee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ae      	bne.n	8004cfa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f947 	bl	8005034 <SPI_EndRxTxTransaction>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e08:	f7fd fbf2 	bl	80025f0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e18:	f7fd fbea 	bl	80025f0 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e1e:	4b39      	ldr	r3, [pc, #228]	@ (8004f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	015b      	lsls	r3, r3, #5
 8004e24:	0d1b      	lsrs	r3, r3, #20
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2e:	e054      	b.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d050      	beq.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e38:	f7fd fbda 	bl	80025f0 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d902      	bls.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d13d      	bne.n	8004eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e66:	d111      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e70:	d004      	beq.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d107      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e94:	d10f      	bne.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e017      	b.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d19b      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000000 	.word	0x20000000

08004f08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	@ 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f1a:	f7fd fb69 	bl	80025f0 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f2a:	f7fd fb61 	bl	80025f0 <HAL_GetTick>
 8004f2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f38:	4b3d      	ldr	r3, [pc, #244]	@ (8005030 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	00da      	lsls	r2, r3, #3
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	0d1b      	lsrs	r3, r3, #20
 8004f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f50:	e060      	b.n	8005014 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f58:	d107      	bne.n	8004f6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d050      	beq.n	8005014 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f72:	f7fd fb3d 	bl	80025f0 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d902      	bls.n	8004f88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d13d      	bne.n	8005004 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fa0:	d111      	bne.n	8004fc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004faa:	d004      	beq.n	8004fb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb4:	d107      	bne.n	8004fc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fce:	d10f      	bne.n	8004ff0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e010      	b.n	8005026 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	3b01      	subs	r3, #1
 8005012:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4013      	ands	r3, r2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d196      	bne.n	8004f52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3728      	adds	r7, #40	@ 0x28
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000000 	.word	0x20000000

08005034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2200      	movs	r2, #0
 8005048:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff ff5b 	bl	8004f08 <SPI_WaitFifoStateUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e027      	b.n	80050b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2200      	movs	r2, #0
 8005070:	2180      	movs	r1, #128	@ 0x80
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff fec0 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e014      	b.n	80050b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff ff34 	bl	8004f08 <SPI_WaitFifoStateUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e000      	b.n	80050b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e042      	b.n	8005158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fd f8f1 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2224      	movs	r2, #36	@ 0x24
 80050ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 ff30 	bl	8005f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fc61 	bl	80059d8 <UART_SetConfig>
 8005116:	4603      	mov	r3, r0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e01b      	b.n	8005158 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800512e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800513e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 ffaf 	bl	80060b4 <UART_CheckIdleState>
 8005156:	4603      	mov	r3, r0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	@ 0x28
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	2b20      	cmp	r3, #32
 8005178:	d17b      	bne.n	8005272 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_UART_Transmit+0x26>
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e074      	b.n	8005274 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2221      	movs	r2, #33	@ 0x21
 8005196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800519a:	f7fd fa29 	bl	80025f0 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	88fa      	ldrh	r2, [r7, #6]
 80051a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88fa      	ldrh	r2, [r7, #6]
 80051ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b8:	d108      	bne.n	80051cc <HAL_UART_Transmit+0x6c>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e003      	b.n	80051d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051d4:	e030      	b.n	8005238 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2200      	movs	r2, #0
 80051de:	2180      	movs	r1, #128	@ 0x80
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f001 f811 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e03d      	b.n	8005274 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800520c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	3302      	adds	r3, #2
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	e007      	b.n	8005226 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1c8      	bne.n	80051d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	2140      	movs	r1, #64	@ 0x40
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 ffda 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e006      	b.n	8005274 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e000      	b.n	8005274 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005290:	2b20      	cmp	r3, #32
 8005292:	d137      	bne.n	8005304 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_UART_Receive_IT+0x24>
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e030      	b.n	8005306 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a18      	ldr	r2, [pc, #96]	@ (8005310 <HAL_UART_Receive_IT+0x94>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d01f      	beq.n	80052f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d018      	beq.n	80052f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	613b      	str	r3, [r7, #16]
   return(result);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	623b      	str	r3, [r7, #32]
 80052e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	69f9      	ldr	r1, [r7, #28]
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e6      	bne.n	80052c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	461a      	mov	r2, r3
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fff2 	bl	80062e4 <UART_Start_Receive_IT>
 8005300:	4603      	mov	r3, r0
 8005302:	e000      	b.n	8005306 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3728      	adds	r7, #40	@ 0x28
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40008000 	.word	0x40008000

08005314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b0ba      	sub	sp, #232	@ 0xe8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800533a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800533e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005342:	4013      	ands	r3, r2
 8005344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d11b      	bne.n	8005388 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d015      	beq.n	8005388 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800535c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800536c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 8300 	beq.w	800597e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
      }
      return;
 8005386:	e2fa      	b.n	800597e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8123 	beq.w	80055d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005392:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005396:	4b8d      	ldr	r3, [pc, #564]	@ (80055cc <HAL_UART_IRQHandler+0x2b8>)
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800539e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053a2:	4b8b      	ldr	r3, [pc, #556]	@ (80055d0 <HAL_UART_IRQHandler+0x2bc>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8116 	beq.w	80055d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d011      	beq.n	80053dc <HAL_UART_IRQHandler+0xc8>
 80053b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00b      	beq.n	80053dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2201      	movs	r2, #1
 80053ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d011      	beq.n	800540c <HAL_UART_IRQHandler+0xf8>
 80053e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00b      	beq.n	800540c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2202      	movs	r2, #2
 80053fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005402:	f043 0204 	orr.w	r2, r3, #4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800540c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d011      	beq.n	800543c <HAL_UART_IRQHandler+0x128>
 8005418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2204      	movs	r2, #4
 800542a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005432:	f043 0202 	orr.w	r2, r3, #2
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d017      	beq.n	8005478 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005458:	4b5c      	ldr	r3, [pc, #368]	@ (80055cc <HAL_UART_IRQHandler+0x2b8>)
 800545a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00b      	beq.n	8005478 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2208      	movs	r2, #8
 8005466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546e:	f043 0208 	orr.w	r2, r3, #8
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <HAL_UART_IRQHandler+0x196>
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00c      	beq.n	80054aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8266 	beq.w	8005982 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d013      	beq.n	80054ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d105      	bne.n	80054da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fe:	2b40      	cmp	r3, #64	@ 0x40
 8005500:	d005      	beq.n	800550e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005506:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800550a:	2b00      	cmp	r3, #0
 800550c:	d054      	beq.n	80055b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 f80a 	bl	8006528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551e:	2b40      	cmp	r3, #64	@ 0x40
 8005520:	d146      	bne.n	80055b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800553c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3308      	adds	r3, #8
 800554a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800554e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800555a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1d9      	bne.n	8005522 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005574:	2b00      	cmp	r3, #0
 8005576:	d017      	beq.n	80055a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800557e:	4a15      	ldr	r2, [pc, #84]	@ (80055d4 <HAL_UART_IRQHandler+0x2c0>)
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005588:	4618      	mov	r0, r3
 800558a:	f7fd f9c7 	bl	800291c <HAL_DMA_Abort_IT>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d019      	beq.n	80055c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80055a2:	4610      	mov	r0, r2
 80055a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a6:	e00f      	b.n	80055c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f9ff 	bl	80059ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ae:	e00b      	b.n	80055c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f9fb 	bl	80059ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b6:	e007      	b.n	80055c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f9f7 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80055c6:	e1dc      	b.n	8005982 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	bf00      	nop
    return;
 80055ca:	e1da      	b.n	8005982 <HAL_UART_IRQHandler+0x66e>
 80055cc:	10000001 	.word	0x10000001
 80055d0:	04000120 	.word	0x04000120
 80055d4:	080065f5 	.word	0x080065f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	f040 8170 	bne.w	80058c2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8169 	beq.w	80058c2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8162 	beq.w	80058c2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2210      	movs	r2, #16
 8005604:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005610:	2b40      	cmp	r3, #64	@ 0x40
 8005612:	f040 80d8 	bne.w	80057c6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80af 	beq.w	800578c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005638:	429a      	cmp	r2, r3
 800563a:	f080 80a7 	bcs.w	800578c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005644:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	f040 8087 	bne.w	800576a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800568a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800569e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1da      	bne.n	800565c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e1      	bne.n	80056a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800570c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e3      	bne.n	80056e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005738:	f023 0310 	bic.w	r3, r3, #16
 800573c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800574a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800574c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e4      	bne.n	8005728 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005764:	4618      	mov	r0, r3
 8005766:	f7fd f880 	bl	800286a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800577c:	b29b      	uxth	r3, r3
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	b29b      	uxth	r3, r3
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f91b 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800578a:	e0fc      	b.n	8005986 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005796:	429a      	cmp	r2, r3
 8005798:	f040 80f5 	bne.w	8005986 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	f040 80eb 	bne.w	8005986 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8fe 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
      return;
 80057c4:	e0df      	b.n	8005986 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80d1 	beq.w	800598a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80057e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80cc 	beq.w	800598a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005814:	647b      	str	r3, [r7, #68]	@ 0x44
 8005816:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800581a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e4      	bne.n	80057f2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	623b      	str	r3, [r7, #32]
   return(result);
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005850:	633a      	str	r2, [r7, #48]	@ 0x30
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e1      	bne.n	8005828 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	60fb      	str	r3, [r7, #12]
   return(result);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f023 0310 	bic.w	r3, r3, #16
 800588c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	69b9      	ldr	r1, [r7, #24]
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	617b      	str	r3, [r7, #20]
   return(result);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e4      	bne.n	8005878 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f880 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c0:	e063      	b.n	800598a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00e      	beq.n	80058ec <HAL_UART_IRQHandler+0x5d8>
 80058ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 fc4c 	bl	8007182 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ea:	e051      	b.n	8005990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d014      	beq.n	8005922 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005914:	2b00      	cmp	r3, #0
 8005916:	d03a      	beq.n	800598e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	4798      	blx	r3
    }
    return;
 8005920:	e035      	b.n	800598e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_UART_IRQHandler+0x62e>
 800592e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fe6c 	bl	8006618 <UART_EndTransmit_IT>
    return;
 8005940:	e026      	b.n	8005990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_UART_IRQHandler+0x64e>
 800594e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005952:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 fc25 	bl	80071aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005960:	e016      	b.n	8005990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005966:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_UART_IRQHandler+0x67c>
 800596e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005972:	2b00      	cmp	r3, #0
 8005974:	da0c      	bge.n	8005990 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 fc0d 	bl	8007196 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800597c:	e008      	b.n	8005990 <HAL_UART_IRQHandler+0x67c>
      return;
 800597e:	bf00      	nop
 8005980:	e006      	b.n	8005990 <HAL_UART_IRQHandler+0x67c>
    return;
 8005982:	bf00      	nop
 8005984:	e004      	b.n	8005990 <HAL_UART_IRQHandler+0x67c>
      return;
 8005986:	bf00      	nop
 8005988:	e002      	b.n	8005990 <HAL_UART_IRQHandler+0x67c>
      return;
 800598a:	bf00      	nop
 800598c:	e000      	b.n	8005990 <HAL_UART_IRQHandler+0x67c>
    return;
 800598e:	bf00      	nop
  }
}
 8005990:	37e8      	adds	r7, #232	@ 0xe8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop

08005998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059dc:	b08c      	sub	sp, #48	@ 0x30
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4bab      	ldr	r3, [pc, #684]	@ (8005cb4 <UART_SetConfig+0x2dc>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4aa0      	ldr	r2, [pc, #640]	@ (8005cb8 <UART_SetConfig+0x2e0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a40:	4313      	orrs	r3, r2
 8005a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005a4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a62:	f023 010f 	bic.w	r1, r3, #15
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a91      	ldr	r2, [pc, #580]	@ (8005cbc <UART_SetConfig+0x2e4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d125      	bne.n	8005ac8 <UART_SetConfig+0xf0>
 8005a7c:	4b90      	ldr	r3, [pc, #576]	@ (8005cc0 <UART_SetConfig+0x2e8>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d81a      	bhi.n	8005ac0 <UART_SetConfig+0xe8>
 8005a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <UART_SetConfig+0xb8>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005ab1 	.word	0x08005ab1
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa6:	e0d6      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aae:	e0d2      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab6:	e0ce      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005abe:	e0ca      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac6:	e0c6      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a7d      	ldr	r2, [pc, #500]	@ (8005cc4 <UART_SetConfig+0x2ec>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d138      	bne.n	8005b44 <UART_SetConfig+0x16c>
 8005ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8005cc0 <UART_SetConfig+0x2e8>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad8:	f003 030c 	and.w	r3, r3, #12
 8005adc:	2b0c      	cmp	r3, #12
 8005ade:	d82d      	bhi.n	8005b3c <UART_SetConfig+0x164>
 8005ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <UART_SetConfig+0x110>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005b1d 	.word	0x08005b1d
 8005aec:	08005b3d 	.word	0x08005b3d
 8005af0:	08005b3d 	.word	0x08005b3d
 8005af4:	08005b3d 	.word	0x08005b3d
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005b3d 	.word	0x08005b3d
 8005b00:	08005b3d 	.word	0x08005b3d
 8005b04:	08005b3d 	.word	0x08005b3d
 8005b08:	08005b25 	.word	0x08005b25
 8005b0c:	08005b3d 	.word	0x08005b3d
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b22:	e098      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b24:	2302      	movs	r3, #2
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b2a:	e094      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b32:	e090      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3a:	e08c      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b42:	e088      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a5f      	ldr	r2, [pc, #380]	@ (8005cc8 <UART_SetConfig+0x2f0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d125      	bne.n	8005b9a <UART_SetConfig+0x1c2>
 8005b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc0 <UART_SetConfig+0x2e8>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b58:	2b30      	cmp	r3, #48	@ 0x30
 8005b5a:	d016      	beq.n	8005b8a <UART_SetConfig+0x1b2>
 8005b5c:	2b30      	cmp	r3, #48	@ 0x30
 8005b5e:	d818      	bhi.n	8005b92 <UART_SetConfig+0x1ba>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d00a      	beq.n	8005b7a <UART_SetConfig+0x1a2>
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d814      	bhi.n	8005b92 <UART_SetConfig+0x1ba>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <UART_SetConfig+0x19a>
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d008      	beq.n	8005b82 <UART_SetConfig+0x1aa>
 8005b70:	e00f      	b.n	8005b92 <UART_SetConfig+0x1ba>
 8005b72:	2300      	movs	r3, #0
 8005b74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b78:	e06d      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b80:	e069      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b82:	2304      	movs	r3, #4
 8005b84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b88:	e065      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b8a:	2308      	movs	r3, #8
 8005b8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b90:	e061      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b92:	2310      	movs	r3, #16
 8005b94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b98:	e05d      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a4b      	ldr	r2, [pc, #300]	@ (8005ccc <UART_SetConfig+0x2f4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d125      	bne.n	8005bf0 <UART_SetConfig+0x218>
 8005ba4:	4b46      	ldr	r3, [pc, #280]	@ (8005cc0 <UART_SetConfig+0x2e8>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005baa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bb0:	d016      	beq.n	8005be0 <UART_SetConfig+0x208>
 8005bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bb4:	d818      	bhi.n	8005be8 <UART_SetConfig+0x210>
 8005bb6:	2b80      	cmp	r3, #128	@ 0x80
 8005bb8:	d00a      	beq.n	8005bd0 <UART_SetConfig+0x1f8>
 8005bba:	2b80      	cmp	r3, #128	@ 0x80
 8005bbc:	d814      	bhi.n	8005be8 <UART_SetConfig+0x210>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <UART_SetConfig+0x1f0>
 8005bc2:	2b40      	cmp	r3, #64	@ 0x40
 8005bc4:	d008      	beq.n	8005bd8 <UART_SetConfig+0x200>
 8005bc6:	e00f      	b.n	8005be8 <UART_SetConfig+0x210>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bce:	e042      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd6:	e03e      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bde:	e03a      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be6:	e036      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bee:	e032      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a30      	ldr	r2, [pc, #192]	@ (8005cb8 <UART_SetConfig+0x2e0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d12a      	bne.n	8005c50 <UART_SetConfig+0x278>
 8005bfa:	4b31      	ldr	r3, [pc, #196]	@ (8005cc0 <UART_SetConfig+0x2e8>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c08:	d01a      	beq.n	8005c40 <UART_SetConfig+0x268>
 8005c0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c0e:	d81b      	bhi.n	8005c48 <UART_SetConfig+0x270>
 8005c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c14:	d00c      	beq.n	8005c30 <UART_SetConfig+0x258>
 8005c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c1a:	d815      	bhi.n	8005c48 <UART_SetConfig+0x270>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <UART_SetConfig+0x250>
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c24:	d008      	beq.n	8005c38 <UART_SetConfig+0x260>
 8005c26:	e00f      	b.n	8005c48 <UART_SetConfig+0x270>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2e:	e012      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c36:	e00e      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3e:	e00a      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c46:	e006      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4e:	e002      	b.n	8005c56 <UART_SetConfig+0x27e>
 8005c50:	2310      	movs	r3, #16
 8005c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a17      	ldr	r2, [pc, #92]	@ (8005cb8 <UART_SetConfig+0x2e0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	f040 80a8 	bne.w	8005db2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d834      	bhi.n	8005cd4 <UART_SetConfig+0x2fc>
 8005c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <UART_SetConfig+0x298>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c95 	.word	0x08005c95
 8005c74:	08005cd5 	.word	0x08005cd5
 8005c78:	08005c9d 	.word	0x08005c9d
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005ca3 	.word	0x08005ca3
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cab 	.word	0x08005cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c94:	f7fe fc2c 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8005c98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c9a:	e021      	b.n	8005ce0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd0 <UART_SetConfig+0x2f8>)
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ca0:	e01e      	b.n	8005ce0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fe fbb7 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8005ca6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ca8:	e01a      	b.n	8005ce0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cb0:	e016      	b.n	8005ce0 <UART_SetConfig+0x308>
 8005cb2:	bf00      	nop
 8005cb4:	cfff69f3 	.word	0xcfff69f3
 8005cb8:	40008000 	.word	0x40008000
 8005cbc:	40013800 	.word	0x40013800
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40004400 	.word	0x40004400
 8005cc8:	40004800 	.word	0x40004800
 8005ccc:	40004c00 	.word	0x40004c00
 8005cd0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 812a 	beq.w	8005f3c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	4a9e      	ldr	r2, [pc, #632]	@ (8005f68 <UART_SetConfig+0x590>)
 8005cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	4413      	add	r3, r2
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d305      	bcc.n	8005d18 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d903      	bls.n	8005d20 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d1e:	e10d      	b.n	8005f3c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	2200      	movs	r2, #0
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	60fa      	str	r2, [r7, #12]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	4a8e      	ldr	r2, [pc, #568]	@ (8005f68 <UART_SetConfig+0x590>)
 8005d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2200      	movs	r2, #0
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d42:	f7fa ff59 	bl	8000bf8 <__aeabi_uldivmod>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	020b      	lsls	r3, r1, #8
 8005d58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d5c:	0202      	lsls	r2, r0, #8
 8005d5e:	6979      	ldr	r1, [r7, #20]
 8005d60:	6849      	ldr	r1, [r1, #4]
 8005d62:	0849      	lsrs	r1, r1, #1
 8005d64:	2000      	movs	r0, #0
 8005d66:	460c      	mov	r4, r1
 8005d68:	4605      	mov	r5, r0
 8005d6a:	eb12 0804 	adds.w	r8, r2, r4
 8005d6e:	eb43 0905 	adc.w	r9, r3, r5
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	469a      	mov	sl, r3
 8005d7a:	4693      	mov	fp, r2
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	465b      	mov	r3, fp
 8005d80:	4640      	mov	r0, r8
 8005d82:	4649      	mov	r1, r9
 8005d84:	f7fa ff38 	bl	8000bf8 <__aeabi_uldivmod>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d96:	d308      	bcc.n	8005daa <UART_SetConfig+0x3d2>
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d9e:	d204      	bcs.n	8005daa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6a3a      	ldr	r2, [r7, #32]
 8005da6:	60da      	str	r2, [r3, #12]
 8005da8:	e0c8      	b.n	8005f3c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005db0:	e0c4      	b.n	8005f3c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dba:	d167      	bne.n	8005e8c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d828      	bhi.n	8005e16 <UART_SetConfig+0x43e>
 8005dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <UART_SetConfig+0x3f4>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	08005e17 	.word	0x08005e17
 8005ddc:	08005e07 	.word	0x08005e07
 8005de0:	08005e17 	.word	0x08005e17
 8005de4:	08005e17 	.word	0x08005e17
 8005de8:	08005e17 	.word	0x08005e17
 8005dec:	08005e0f 	.word	0x08005e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df0:	f7fe fb7e 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8005df4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005df6:	e014      	b.n	8005e22 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df8:	f7fe fb90 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8005dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dfe:	e010      	b.n	8005e22 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e00:	4b5a      	ldr	r3, [pc, #360]	@ (8005f6c <UART_SetConfig+0x594>)
 8005e02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e04:	e00d      	b.n	8005e22 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e06:	f7fe fb05 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8005e0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e0c:	e009      	b.n	8005e22 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e14:	e005      	b.n	8005e22 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8089 	beq.w	8005f3c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	4a4e      	ldr	r2, [pc, #312]	@ (8005f68 <UART_SetConfig+0x590>)
 8005e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e3c:	005a      	lsls	r2, r3, #1
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	441a      	add	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	d916      	bls.n	8005e84 <UART_SetConfig+0x4ac>
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e5c:	d212      	bcs.n	8005e84 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f023 030f 	bic.w	r3, r3, #15
 8005e66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	8bfb      	ldrh	r3, [r7, #30]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	8bfa      	ldrh	r2, [r7, #30]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	e05b      	b.n	8005f3c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e8a:	e057      	b.n	8005f3c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d828      	bhi.n	8005ee6 <UART_SetConfig+0x50e>
 8005e94:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <UART_SetConfig+0x4c4>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005ec1 	.word	0x08005ec1
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	08005ed1 	.word	0x08005ed1
 8005ea8:	08005ee7 	.word	0x08005ee7
 8005eac:	08005ed7 	.word	0x08005ed7
 8005eb0:	08005ee7 	.word	0x08005ee7
 8005eb4:	08005ee7 	.word	0x08005ee7
 8005eb8:	08005ee7 	.word	0x08005ee7
 8005ebc:	08005edf 	.word	0x08005edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec0:	f7fe fb16 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8005ec4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ec6:	e014      	b.n	8005ef2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec8:	f7fe fb28 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8005ecc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ece:	e010      	b.n	8005ef2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed0:	4b26      	ldr	r3, [pc, #152]	@ (8005f6c <UART_SetConfig+0x594>)
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ed4:	e00d      	b.n	8005ef2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed6:	f7fe fa9d 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8005eda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005edc:	e009      	b.n	8005ef2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ee4:	e005      	b.n	8005ef2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d021      	beq.n	8005f3c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <UART_SetConfig+0x590>)
 8005efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	441a      	add	r2, r3
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b0f      	cmp	r3, #15
 8005f20:	d909      	bls.n	8005f36 <UART_SetConfig+0x55e>
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f28:	d205      	bcs.n	8005f36 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60da      	str	r2, [r3, #12]
 8005f34:	e002      	b.n	8005f3c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3730      	adds	r7, #48	@ 0x30
 8005f60:	46bd      	mov	sp, r7
 8005f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f66:	bf00      	nop
 8005f68:	0800ab54 	.word	0x0800ab54
 8005f6c:	00f42400 	.word	0x00f42400

08005f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01a      	beq.n	8006086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800606e:	d10a      	bne.n	8006086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	605a      	str	r2, [r3, #4]
  }
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b098      	sub	sp, #96	@ 0x60
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c4:	f7fc fa94 	bl	80025f0 <HAL_GetTick>
 80060c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d12f      	bne.n	8006138 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e0:	2200      	movs	r2, #0
 80060e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f88e 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d022      	beq.n	8006138 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006106:	653b      	str	r3, [r7, #80]	@ 0x50
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006110:	647b      	str	r3, [r7, #68]	@ 0x44
 8006112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800611e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e6      	bne.n	80060f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e063      	b.n	8006200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d149      	bne.n	80061da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006146:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800614e:	2200      	movs	r2, #0
 8006150:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f857 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d03c      	beq.n	80061da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	623b      	str	r3, [r7, #32]
   return(result);
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006180:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e6      	bne.n	8006160 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061b2:	61fa      	str	r2, [r7, #28]
 80061b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	69b9      	ldr	r1, [r7, #24]
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	617b      	str	r3, [r7, #20]
   return(result);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e012      	b.n	8006200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3758      	adds	r7, #88	@ 0x58
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006218:	e04f      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d04b      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006222:	f7fc f9e5 	bl	80025f0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	429a      	cmp	r2, r3
 8006230:	d302      	bcc.n	8006238 <UART_WaitOnFlagUntilTimeout+0x30>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e04e      	b.n	80062da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d037      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b80      	cmp	r3, #128	@ 0x80
 800624e:	d034      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d031      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b08      	cmp	r3, #8
 8006262:	d110      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2208      	movs	r2, #8
 800626a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f95b 	bl	8006528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2208      	movs	r2, #8
 8006276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e029      	b.n	80062da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006294:	d111      	bne.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800629e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f941 	bl	8006528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e00f      	b.n	80062da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	bf0c      	ite	eq
 80062ca:	2301      	moveq	r3, #1
 80062cc:	2300      	movne	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d0a0      	beq.n	800621a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b0a3      	sub	sp, #140	@ 0x8c
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	88fa      	ldrh	r2, [r7, #6]
 80062fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	88fa      	ldrh	r2, [r7, #6]
 8006304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006316:	d10e      	bne.n	8006336 <UART_Start_Receive_IT+0x52>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d105      	bne.n	800632c <UART_Start_Receive_IT+0x48>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006326:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800632a:	e02d      	b.n	8006388 <UART_Start_Receive_IT+0xa4>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	22ff      	movs	r2, #255	@ 0xff
 8006330:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006334:	e028      	b.n	8006388 <UART_Start_Receive_IT+0xa4>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10d      	bne.n	800635a <UART_Start_Receive_IT+0x76>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <UART_Start_Receive_IT+0x6c>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	22ff      	movs	r2, #255	@ 0xff
 800634a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800634e:	e01b      	b.n	8006388 <UART_Start_Receive_IT+0xa4>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	227f      	movs	r2, #127	@ 0x7f
 8006354:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006358:	e016      	b.n	8006388 <UART_Start_Receive_IT+0xa4>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006362:	d10d      	bne.n	8006380 <UART_Start_Receive_IT+0x9c>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <UART_Start_Receive_IT+0x92>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	227f      	movs	r2, #127	@ 0x7f
 8006370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006374:	e008      	b.n	8006388 <UART_Start_Receive_IT+0xa4>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	223f      	movs	r2, #63	@ 0x3f
 800637a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800637e:	e003      	b.n	8006388 <UART_Start_Receive_IT+0xa4>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2222      	movs	r2, #34	@ 0x22
 8006394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80063a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80063bc:	673a      	str	r2, [r7, #112]	@ 0x70
 80063be:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80063c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80063ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e3      	bne.n	8006398 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d8:	d14f      	bne.n	800647a <UART_Start_Receive_IT+0x196>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d349      	bcc.n	800647a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ee:	d107      	bne.n	8006400 <UART_Start_Receive_IT+0x11c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d103      	bne.n	8006400 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a47      	ldr	r2, [pc, #284]	@ (8006518 <UART_Start_Receive_IT+0x234>)
 80063fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80063fe:	e002      	b.n	8006406 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a46      	ldr	r2, [pc, #280]	@ (800651c <UART_Start_Receive_IT+0x238>)
 8006404:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01a      	beq.n	8006444 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800641c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800641e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006432:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006436:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800643e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e4      	bne.n	800640e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800645a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006464:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006466:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800646a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_Start_Receive_IT+0x160>
 8006478:	e046      	b.n	8006508 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006482:	d107      	bne.n	8006494 <UART_Start_Receive_IT+0x1b0>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d103      	bne.n	8006494 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a24      	ldr	r2, [pc, #144]	@ (8006520 <UART_Start_Receive_IT+0x23c>)
 8006490:	675a      	str	r2, [r3, #116]	@ 0x74
 8006492:	e002      	b.n	800649a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4a23      	ldr	r2, [pc, #140]	@ (8006524 <UART_Start_Receive_IT+0x240>)
 8006498:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d019      	beq.n	80064d6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80064b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064c2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e6      	bne.n	80064a2 <UART_Start_Receive_IT+0x1be>
 80064d4:	e018      	b.n	8006508 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	613b      	str	r3, [r7, #16]
   return(result);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f043 0320 	orr.w	r3, r3, #32
 80064ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	6a3a      	ldr	r2, [r7, #32]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	61bb      	str	r3, [r7, #24]
   return(result);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e6      	bne.n	80064d6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	378c      	adds	r7, #140	@ 0x8c
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	08006d45 	.word	0x08006d45
 800651c:	080069e1 	.word	0x080069e1
 8006520:	08006829 	.word	0x08006829
 8006524:	08006671 	.word	0x08006671

08006528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b095      	sub	sp, #84	@ 0x54
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800654e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006550:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006554:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800655c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e6      	bne.n	8006530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	61fb      	str	r3, [r7, #28]
   return(result);
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006578:	f023 0301 	bic.w	r3, r3, #1
 800657c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3308      	adds	r3, #8
 8006584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800658c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e3      	bne.n	8006562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d118      	bne.n	80065d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6979      	ldr	r1, [r7, #20]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	613b      	str	r3, [r7, #16]
   return(result);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80065e8:	bf00      	nop
 80065ea:	3754      	adds	r7, #84	@ 0x54
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff f9ce 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	60bb      	str	r3, [r7, #8]
   return(result);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006634:	61fb      	str	r3, [r7, #28]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6979      	ldr	r1, [r7, #20]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	613b      	str	r3, [r7, #16]
   return(result);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff f999 	bl	8005998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006666:	bf00      	nop
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b09c      	sub	sp, #112	@ 0x70
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800667e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006688:	2b22      	cmp	r3, #34	@ 0x22
 800668a:	f040 80be 	bne.w	800680a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006694:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006698:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800669c:	b2d9      	uxtb	r1, r3
 800669e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a8:	400a      	ands	r2, r1
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f040 80a1 	bne.w	800681a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e6      	bne.n	80066d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3308      	adds	r3, #8
 8006710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800671a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	667b      	str	r3, [r7, #100]	@ 0x64
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3308      	adds	r3, #8
 8006728:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800672a:	647a      	str	r2, [r7, #68]	@ 0x44
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e5      	bne.n	800670a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a33      	ldr	r2, [pc, #204]	@ (8006824 <UART_RxISR_8BIT+0x1b4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d01f      	beq.n	800679c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d018      	beq.n	800679c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	623b      	str	r3, [r7, #32]
   return(result);
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800677e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006788:	633b      	str	r3, [r7, #48]	@ 0x30
 800678a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800678e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d12e      	bne.n	8006802 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0310 	bic.w	r3, r3, #16
 80067be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	617b      	str	r3, [r7, #20]
   return(result);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e6      	bne.n	80067aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d103      	bne.n	80067f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2210      	movs	r2, #16
 80067f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff f8e0 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006800:	e00b      	b.n	800681a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fa ffc8 	bl	8001798 <HAL_UART_RxCpltCallback>
}
 8006808:	e007      	b.n	800681a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0208 	orr.w	r2, r2, #8
 8006818:	619a      	str	r2, [r3, #24]
}
 800681a:	bf00      	nop
 800681c:	3770      	adds	r7, #112	@ 0x70
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40008000 	.word	0x40008000

08006828 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b09c      	sub	sp, #112	@ 0x70
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006836:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006840:	2b22      	cmp	r3, #34	@ 0x22
 8006842:	f040 80be 	bne.w	80069c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006854:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006856:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800685a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800685e:	4013      	ands	r3, r2
 8006860:	b29a      	uxth	r2, r3
 8006862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006864:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686a:	1c9a      	adds	r2, r3, #2
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 80a1 	bne.w	80069d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800689e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80068b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e6      	bne.n	8006890 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80068e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e5      	bne.n	80068c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a33      	ldr	r2, [pc, #204]	@ (80069dc <UART_RxISR_16BIT+0x1b4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d01f      	beq.n	8006954 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d018      	beq.n	8006954 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006936:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006942:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d12e      	bne.n	80069ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f023 0310 	bic.w	r3, r3, #16
 8006976:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6979      	ldr	r1, [r7, #20]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	613b      	str	r3, [r7, #16]
   return(result);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e6      	bne.n	8006962 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b10      	cmp	r3, #16
 80069a0:	d103      	bne.n	80069aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2210      	movs	r2, #16
 80069a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069b0:	4619      	mov	r1, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff f804 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069b8:	e00b      	b.n	80069d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fa feec 	bl	8001798 <HAL_UART_RxCpltCallback>
}
 80069c0:	e007      	b.n	80069d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699a      	ldr	r2, [r3, #24]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0208 	orr.w	r2, r2, #8
 80069d0:	619a      	str	r2, [r3, #24]
}
 80069d2:	bf00      	nop
 80069d4:	3770      	adds	r7, #112	@ 0x70
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40008000 	.word	0x40008000

080069e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b0ac      	sub	sp, #176	@ 0xb0
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80069ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a16:	2b22      	cmp	r3, #34	@ 0x22
 8006a18:	f040 8183 	bne.w	8006d22 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a22:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a26:	e126      	b.n	8006c76 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006a36:	b2d9      	uxtb	r1, r3
 8006a38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a42:	400a      	ands	r2, r1
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d053      	beq.n	8006b22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d011      	beq.n	8006aaa <UART_RxISR_8BIT_FIFOEN+0xca>
 8006a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2201      	movs	r2, #1
 8006a98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa0:	f043 0201 	orr.w	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d011      	beq.n	8006ada <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00b      	beq.n	8006ada <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad0:	f043 0204 	orr.w	r2, r3, #4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d011      	beq.n	8006b0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2204      	movs	r2, #4
 8006af8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b00:	f043 0202 	orr.w	r2, r3, #2
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d006      	beq.n	8006b22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fe ff49 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 80a3 	bne.w	8006c76 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b54:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006b58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e4      	bne.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b8e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006b90:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006b94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006b9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e1      	bne.n	8006b66 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a60      	ldr	r2, [pc, #384]	@ (8006d3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d021      	beq.n	8006c04 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01a      	beq.n	8006c04 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006bf0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bf2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006bf6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e4      	bne.n	8006bce <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d130      	bne.n	8006c6e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	f023 0310 	bic.w	r3, r3, #16
 8006c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e4      	bne.n	8006c12 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b10      	cmp	r3, #16
 8006c54:	d103      	bne.n	8006c5e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fe feaa 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006c6c:	e00e      	b.n	8006c8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fa fd92 	bl	8001798 <HAL_UART_RxCpltCallback>
        break;
 8006c74:	e00a      	b.n	8006c8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c76:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d006      	beq.n	8006c8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f47f aece 	bne.w	8006a28 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c92:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d049      	beq.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x352>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ca4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d242      	bcs.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006cd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e3      	bne.n	8006cac <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a16      	ldr	r2, [pc, #88]	@ (8006d40 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006ce8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f043 0320 	orr.w	r3, r3, #32
 8006cfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6979      	ldr	r1, [r7, #20]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	613b      	str	r3, [r7, #16]
   return(result);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e4      	bne.n	8006cea <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d20:	e007      	b.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	699a      	ldr	r2, [r3, #24]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0208 	orr.w	r2, r2, #8
 8006d30:	619a      	str	r2, [r3, #24]
}
 8006d32:	bf00      	nop
 8006d34:	37b0      	adds	r7, #176	@ 0xb0
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40008000 	.word	0x40008000
 8006d40:	08006671 	.word	0x08006671

08006d44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b0ae      	sub	sp, #184	@ 0xb8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d52:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d7a:	2b22      	cmp	r3, #34	@ 0x22
 8006d7c:	f040 8187 	bne.w	800708e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d86:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d8a:	e12a      	b.n	8006fe2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006d9e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006da2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006da6:	4013      	ands	r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db4:	1c9a      	adds	r2, r3, #2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d053      	beq.n	8006e8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d011      	beq.n	8006e12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e08:	f043 0201 	orr.w	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d011      	beq.n	8006e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e38:	f043 0204 	orr.w	r2, r3, #4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d011      	beq.n	8006e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00b      	beq.n	8006e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2204      	movs	r2, #4
 8006e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e68:	f043 0202 	orr.w	r2, r3, #2
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d006      	beq.n	8006e8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fe fd95 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f040 80a5 	bne.w	8006fe2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006eba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ebe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e2      	bne.n	8006e98 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006efa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006efc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e1      	bne.n	8006ed2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a60      	ldr	r2, [pc, #384]	@ (80070a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d021      	beq.n	8006f70 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01a      	beq.n	8006f70 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f5e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e4      	bne.n	8006f3a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d130      	bne.n	8006fda <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8e:	f023 0310 	bic.w	r3, r3, #16
 8006f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e4      	bne.n	8006f7e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b10      	cmp	r3, #16
 8006fc0:	d103      	bne.n	8006fca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fe fcf4 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006fd8:	e00e      	b.n	8006ff8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa fbdc 	bl	8001798 <HAL_UART_RxCpltCallback>
        break;
 8006fe0:	e00a      	b.n	8006ff8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fe2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d006      	beq.n	8006ff8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f47f aeca 	bne.w	8006d8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ffe:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007002:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007006:	2b00      	cmp	r3, #0
 8007008:	d049      	beq.n	800709e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007010:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007014:	429a      	cmp	r2, r3
 8007016:	d242      	bcs.n	800709e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	623b      	str	r3, [r7, #32]
   return(result);
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800702e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800703c:	633a      	str	r2, [r7, #48]	@ 0x30
 800703e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e3      	bne.n	8007018 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a16      	ldr	r2, [pc, #88]	@ (80070ac <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007054:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	60fb      	str	r3, [r7, #12]
   return(result);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f043 0320 	orr.w	r3, r3, #32
 800706a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	69b9      	ldr	r1, [r7, #24]
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	617b      	str	r3, [r7, #20]
   return(result);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e4      	bne.n	8007056 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800708c:	e007      	b.n	800709e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f042 0208 	orr.w	r2, r2, #8
 800709c:	619a      	str	r2, [r3, #24]
}
 800709e:	bf00      	nop
 80070a0:	37b8      	adds	r7, #184	@ 0xb8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40008000 	.word	0x40008000
 80070ac:	08006829 	.word	0x08006829

080070b0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e058      	b.n	800717a <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7fb f8f6 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2224      	movs	r2, #36	@ 0x24
 80070e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0201 	bic.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7fe ff35 	bl	8005f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7fe fc66 	bl	80059d8 <UART_SetConfig>
 800710c:	4603      	mov	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e031      	b.n	800717a <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007124:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	430a      	orrs	r2, r1
 8007138:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	055b      	lsls	r3, r3, #21
 800713e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8007154:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	6979      	ldr	r1, [r7, #20]
 800715e:	430b      	orrs	r3, r1
 8007160:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0201 	orr.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7fe ff9e 	bl	80060b4 <UART_CheckIdleState>
 8007178:	4603      	mov	r3, r0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e027      	b.n	8007224 <HAL_UARTEx_DisableFifoMode+0x66>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2224      	movs	r2, #36	@ 0x24
 80071e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007202:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007244:	2302      	movs	r3, #2
 8007246:	e02d      	b.n	80072a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2224      	movs	r2, #36	@ 0x24
 8007254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0201 	bic.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f84f 	bl	8007328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e02d      	b.n	8007320 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	@ 0x24
 80072d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f811 	bl	8007328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007348:	e031      	b.n	80073ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800734a:	2308      	movs	r3, #8
 800734c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800734e:	2308      	movs	r3, #8
 8007350:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	0e5b      	lsrs	r3, r3, #25
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	0f5b      	lsrs	r3, r3, #29
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	7b3a      	ldrb	r2, [r7, #12]
 8007376:	4911      	ldr	r1, [pc, #68]	@ (80073bc <UARTEx_SetNbDataToProcess+0x94>)
 8007378:	5c8a      	ldrb	r2, [r1, r2]
 800737a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800737e:	7b3a      	ldrb	r2, [r7, #12]
 8007380:	490f      	ldr	r1, [pc, #60]	@ (80073c0 <UARTEx_SetNbDataToProcess+0x98>)
 8007382:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007384:	fb93 f3f2 	sdiv	r3, r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	7b7a      	ldrb	r2, [r7, #13]
 8007394:	4909      	ldr	r1, [pc, #36]	@ (80073bc <UARTEx_SetNbDataToProcess+0x94>)
 8007396:	5c8a      	ldrb	r2, [r1, r2]
 8007398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800739c:	7b7a      	ldrb	r2, [r7, #13]
 800739e:	4908      	ldr	r1, [pc, #32]	@ (80073c0 <UARTEx_SetNbDataToProcess+0x98>)
 80073a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	0800ab6c 	.word	0x0800ab6c
 80073c0:	0800ab74 	.word	0x0800ab74

080073c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073cc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80073d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	43db      	mvns	r3, r3
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	4013      	ands	r3, r2
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <__cvt>:
 8007436:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800743a:	ec57 6b10 	vmov	r6, r7, d0
 800743e:	2f00      	cmp	r7, #0
 8007440:	460c      	mov	r4, r1
 8007442:	4619      	mov	r1, r3
 8007444:	463b      	mov	r3, r7
 8007446:	bfbb      	ittet	lt
 8007448:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800744c:	461f      	movlt	r7, r3
 800744e:	2300      	movge	r3, #0
 8007450:	232d      	movlt	r3, #45	@ 0x2d
 8007452:	700b      	strb	r3, [r1, #0]
 8007454:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007456:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800745a:	4691      	mov	r9, r2
 800745c:	f023 0820 	bic.w	r8, r3, #32
 8007460:	bfbc      	itt	lt
 8007462:	4632      	movlt	r2, r6
 8007464:	4616      	movlt	r6, r2
 8007466:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800746a:	d005      	beq.n	8007478 <__cvt+0x42>
 800746c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007470:	d100      	bne.n	8007474 <__cvt+0x3e>
 8007472:	3401      	adds	r4, #1
 8007474:	2102      	movs	r1, #2
 8007476:	e000      	b.n	800747a <__cvt+0x44>
 8007478:	2103      	movs	r1, #3
 800747a:	ab03      	add	r3, sp, #12
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	ab02      	add	r3, sp, #8
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	ec47 6b10 	vmov	d0, r6, r7
 8007486:	4653      	mov	r3, sl
 8007488:	4622      	mov	r2, r4
 800748a:	f000 ff71 	bl	8008370 <_dtoa_r>
 800748e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007492:	4605      	mov	r5, r0
 8007494:	d119      	bne.n	80074ca <__cvt+0x94>
 8007496:	f019 0f01 	tst.w	r9, #1
 800749a:	d00e      	beq.n	80074ba <__cvt+0x84>
 800749c:	eb00 0904 	add.w	r9, r0, r4
 80074a0:	2200      	movs	r2, #0
 80074a2:	2300      	movs	r3, #0
 80074a4:	4630      	mov	r0, r6
 80074a6:	4639      	mov	r1, r7
 80074a8:	f7f9 fb36 	bl	8000b18 <__aeabi_dcmpeq>
 80074ac:	b108      	cbz	r0, 80074b2 <__cvt+0x7c>
 80074ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80074b2:	2230      	movs	r2, #48	@ 0x30
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	454b      	cmp	r3, r9
 80074b8:	d31e      	bcc.n	80074f8 <__cvt+0xc2>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074be:	1b5b      	subs	r3, r3, r5
 80074c0:	4628      	mov	r0, r5
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	b004      	add	sp, #16
 80074c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074ce:	eb00 0904 	add.w	r9, r0, r4
 80074d2:	d1e5      	bne.n	80074a0 <__cvt+0x6a>
 80074d4:	7803      	ldrb	r3, [r0, #0]
 80074d6:	2b30      	cmp	r3, #48	@ 0x30
 80074d8:	d10a      	bne.n	80074f0 <__cvt+0xba>
 80074da:	2200      	movs	r2, #0
 80074dc:	2300      	movs	r3, #0
 80074de:	4630      	mov	r0, r6
 80074e0:	4639      	mov	r1, r7
 80074e2:	f7f9 fb19 	bl	8000b18 <__aeabi_dcmpeq>
 80074e6:	b918      	cbnz	r0, 80074f0 <__cvt+0xba>
 80074e8:	f1c4 0401 	rsb	r4, r4, #1
 80074ec:	f8ca 4000 	str.w	r4, [sl]
 80074f0:	f8da 3000 	ldr.w	r3, [sl]
 80074f4:	4499      	add	r9, r3
 80074f6:	e7d3      	b.n	80074a0 <__cvt+0x6a>
 80074f8:	1c59      	adds	r1, r3, #1
 80074fa:	9103      	str	r1, [sp, #12]
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	e7d9      	b.n	80074b4 <__cvt+0x7e>

08007500 <__exponent>:
 8007500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007502:	2900      	cmp	r1, #0
 8007504:	bfba      	itte	lt
 8007506:	4249      	neglt	r1, r1
 8007508:	232d      	movlt	r3, #45	@ 0x2d
 800750a:	232b      	movge	r3, #43	@ 0x2b
 800750c:	2909      	cmp	r1, #9
 800750e:	7002      	strb	r2, [r0, #0]
 8007510:	7043      	strb	r3, [r0, #1]
 8007512:	dd29      	ble.n	8007568 <__exponent+0x68>
 8007514:	f10d 0307 	add.w	r3, sp, #7
 8007518:	461d      	mov	r5, r3
 800751a:	270a      	movs	r7, #10
 800751c:	461a      	mov	r2, r3
 800751e:	fbb1 f6f7 	udiv	r6, r1, r7
 8007522:	fb07 1416 	mls	r4, r7, r6, r1
 8007526:	3430      	adds	r4, #48	@ 0x30
 8007528:	f802 4c01 	strb.w	r4, [r2, #-1]
 800752c:	460c      	mov	r4, r1
 800752e:	2c63      	cmp	r4, #99	@ 0x63
 8007530:	f103 33ff 	add.w	r3, r3, #4294967295
 8007534:	4631      	mov	r1, r6
 8007536:	dcf1      	bgt.n	800751c <__exponent+0x1c>
 8007538:	3130      	adds	r1, #48	@ 0x30
 800753a:	1e94      	subs	r4, r2, #2
 800753c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007540:	1c41      	adds	r1, r0, #1
 8007542:	4623      	mov	r3, r4
 8007544:	42ab      	cmp	r3, r5
 8007546:	d30a      	bcc.n	800755e <__exponent+0x5e>
 8007548:	f10d 0309 	add.w	r3, sp, #9
 800754c:	1a9b      	subs	r3, r3, r2
 800754e:	42ac      	cmp	r4, r5
 8007550:	bf88      	it	hi
 8007552:	2300      	movhi	r3, #0
 8007554:	3302      	adds	r3, #2
 8007556:	4403      	add	r3, r0
 8007558:	1a18      	subs	r0, r3, r0
 800755a:	b003      	add	sp, #12
 800755c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007562:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007566:	e7ed      	b.n	8007544 <__exponent+0x44>
 8007568:	2330      	movs	r3, #48	@ 0x30
 800756a:	3130      	adds	r1, #48	@ 0x30
 800756c:	7083      	strb	r3, [r0, #2]
 800756e:	70c1      	strb	r1, [r0, #3]
 8007570:	1d03      	adds	r3, r0, #4
 8007572:	e7f1      	b.n	8007558 <__exponent+0x58>

08007574 <_printf_float>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	b08d      	sub	sp, #52	@ 0x34
 800757a:	460c      	mov	r4, r1
 800757c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007580:	4616      	mov	r6, r2
 8007582:	461f      	mov	r7, r3
 8007584:	4605      	mov	r5, r0
 8007586:	f000 fdf3 	bl	8008170 <_localeconv_r>
 800758a:	6803      	ldr	r3, [r0, #0]
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	4618      	mov	r0, r3
 8007590:	f7f8 fe96 	bl	80002c0 <strlen>
 8007594:	2300      	movs	r3, #0
 8007596:	930a      	str	r3, [sp, #40]	@ 0x28
 8007598:	f8d8 3000 	ldr.w	r3, [r8]
 800759c:	9005      	str	r0, [sp, #20]
 800759e:	3307      	adds	r3, #7
 80075a0:	f023 0307 	bic.w	r3, r3, #7
 80075a4:	f103 0208 	add.w	r2, r3, #8
 80075a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075ac:	f8d4 b000 	ldr.w	fp, [r4]
 80075b0:	f8c8 2000 	str.w	r2, [r8]
 80075b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075bc:	9307      	str	r3, [sp, #28]
 80075be:	f8cd 8018 	str.w	r8, [sp, #24]
 80075c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80075c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ca:	4b9c      	ldr	r3, [pc, #624]	@ (800783c <_printf_float+0x2c8>)
 80075cc:	f04f 32ff 	mov.w	r2, #4294967295
 80075d0:	f7f9 fad4 	bl	8000b7c <__aeabi_dcmpun>
 80075d4:	bb70      	cbnz	r0, 8007634 <_printf_float+0xc0>
 80075d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075da:	4b98      	ldr	r3, [pc, #608]	@ (800783c <_printf_float+0x2c8>)
 80075dc:	f04f 32ff 	mov.w	r2, #4294967295
 80075e0:	f7f9 faae 	bl	8000b40 <__aeabi_dcmple>
 80075e4:	bb30      	cbnz	r0, 8007634 <_printf_float+0xc0>
 80075e6:	2200      	movs	r2, #0
 80075e8:	2300      	movs	r3, #0
 80075ea:	4640      	mov	r0, r8
 80075ec:	4649      	mov	r1, r9
 80075ee:	f7f9 fa9d 	bl	8000b2c <__aeabi_dcmplt>
 80075f2:	b110      	cbz	r0, 80075fa <_printf_float+0x86>
 80075f4:	232d      	movs	r3, #45	@ 0x2d
 80075f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075fa:	4a91      	ldr	r2, [pc, #580]	@ (8007840 <_printf_float+0x2cc>)
 80075fc:	4b91      	ldr	r3, [pc, #580]	@ (8007844 <_printf_float+0x2d0>)
 80075fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007602:	bf8c      	ite	hi
 8007604:	4690      	movhi	r8, r2
 8007606:	4698      	movls	r8, r3
 8007608:	2303      	movs	r3, #3
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	f02b 0304 	bic.w	r3, fp, #4
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	f04f 0900 	mov.w	r9, #0
 8007616:	9700      	str	r7, [sp, #0]
 8007618:	4633      	mov	r3, r6
 800761a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800761c:	4621      	mov	r1, r4
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f9d2 	bl	80079c8 <_printf_common>
 8007624:	3001      	adds	r0, #1
 8007626:	f040 808d 	bne.w	8007744 <_printf_float+0x1d0>
 800762a:	f04f 30ff 	mov.w	r0, #4294967295
 800762e:	b00d      	add	sp, #52	@ 0x34
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	f7f9 fa9e 	bl	8000b7c <__aeabi_dcmpun>
 8007640:	b140      	cbz	r0, 8007654 <_printf_float+0xe0>
 8007642:	464b      	mov	r3, r9
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfbc      	itt	lt
 8007648:	232d      	movlt	r3, #45	@ 0x2d
 800764a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800764e:	4a7e      	ldr	r2, [pc, #504]	@ (8007848 <_printf_float+0x2d4>)
 8007650:	4b7e      	ldr	r3, [pc, #504]	@ (800784c <_printf_float+0x2d8>)
 8007652:	e7d4      	b.n	80075fe <_printf_float+0x8a>
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800765a:	9206      	str	r2, [sp, #24]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	d13b      	bne.n	80076d8 <_printf_float+0x164>
 8007660:	2306      	movs	r3, #6
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007668:	2300      	movs	r3, #0
 800766a:	6022      	str	r2, [r4, #0]
 800766c:	9303      	str	r3, [sp, #12]
 800766e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007670:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007674:	ab09      	add	r3, sp, #36	@ 0x24
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	6861      	ldr	r1, [r4, #4]
 800767a:	ec49 8b10 	vmov	d0, r8, r9
 800767e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007682:	4628      	mov	r0, r5
 8007684:	f7ff fed7 	bl	8007436 <__cvt>
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800768c:	2b47      	cmp	r3, #71	@ 0x47
 800768e:	4680      	mov	r8, r0
 8007690:	d129      	bne.n	80076e6 <_printf_float+0x172>
 8007692:	1cc8      	adds	r0, r1, #3
 8007694:	db02      	blt.n	800769c <_printf_float+0x128>
 8007696:	6863      	ldr	r3, [r4, #4]
 8007698:	4299      	cmp	r1, r3
 800769a:	dd41      	ble.n	8007720 <_printf_float+0x1ac>
 800769c:	f1aa 0a02 	sub.w	sl, sl, #2
 80076a0:	fa5f fa8a 	uxtb.w	sl, sl
 80076a4:	3901      	subs	r1, #1
 80076a6:	4652      	mov	r2, sl
 80076a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80076ae:	f7ff ff27 	bl	8007500 <__exponent>
 80076b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076b4:	1813      	adds	r3, r2, r0
 80076b6:	2a01      	cmp	r2, #1
 80076b8:	4681      	mov	r9, r0
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	dc02      	bgt.n	80076c4 <_printf_float+0x150>
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	07d2      	lsls	r2, r2, #31
 80076c2:	d501      	bpl.n	80076c8 <_printf_float+0x154>
 80076c4:	3301      	adds	r3, #1
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0a2      	beq.n	8007616 <_printf_float+0xa2>
 80076d0:	232d      	movs	r3, #45	@ 0x2d
 80076d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d6:	e79e      	b.n	8007616 <_printf_float+0xa2>
 80076d8:	9a06      	ldr	r2, [sp, #24]
 80076da:	2a47      	cmp	r2, #71	@ 0x47
 80076dc:	d1c2      	bne.n	8007664 <_printf_float+0xf0>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1c0      	bne.n	8007664 <_printf_float+0xf0>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e7bd      	b.n	8007662 <_printf_float+0xee>
 80076e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076ea:	d9db      	bls.n	80076a4 <_printf_float+0x130>
 80076ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076f0:	d118      	bne.n	8007724 <_printf_float+0x1b0>
 80076f2:	2900      	cmp	r1, #0
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	dd0b      	ble.n	8007710 <_printf_float+0x19c>
 80076f8:	6121      	str	r1, [r4, #16]
 80076fa:	b913      	cbnz	r3, 8007702 <_printf_float+0x18e>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	07d0      	lsls	r0, r2, #31
 8007700:	d502      	bpl.n	8007708 <_printf_float+0x194>
 8007702:	3301      	adds	r3, #1
 8007704:	440b      	add	r3, r1
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	65a1      	str	r1, [r4, #88]	@ 0x58
 800770a:	f04f 0900 	mov.w	r9, #0
 800770e:	e7db      	b.n	80076c8 <_printf_float+0x154>
 8007710:	b913      	cbnz	r3, 8007718 <_printf_float+0x1a4>
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	07d2      	lsls	r2, r2, #31
 8007716:	d501      	bpl.n	800771c <_printf_float+0x1a8>
 8007718:	3302      	adds	r3, #2
 800771a:	e7f4      	b.n	8007706 <_printf_float+0x192>
 800771c:	2301      	movs	r3, #1
 800771e:	e7f2      	b.n	8007706 <_printf_float+0x192>
 8007720:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007726:	4299      	cmp	r1, r3
 8007728:	db05      	blt.n	8007736 <_printf_float+0x1c2>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	6121      	str	r1, [r4, #16]
 800772e:	07d8      	lsls	r0, r3, #31
 8007730:	d5ea      	bpl.n	8007708 <_printf_float+0x194>
 8007732:	1c4b      	adds	r3, r1, #1
 8007734:	e7e7      	b.n	8007706 <_printf_float+0x192>
 8007736:	2900      	cmp	r1, #0
 8007738:	bfd4      	ite	le
 800773a:	f1c1 0202 	rsble	r2, r1, #2
 800773e:	2201      	movgt	r2, #1
 8007740:	4413      	add	r3, r2
 8007742:	e7e0      	b.n	8007706 <_printf_float+0x192>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	055a      	lsls	r2, r3, #21
 8007748:	d407      	bmi.n	800775a <_printf_float+0x1e6>
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	4642      	mov	r2, r8
 800774e:	4631      	mov	r1, r6
 8007750:	4628      	mov	r0, r5
 8007752:	47b8      	blx	r7
 8007754:	3001      	adds	r0, #1
 8007756:	d12b      	bne.n	80077b0 <_printf_float+0x23c>
 8007758:	e767      	b.n	800762a <_printf_float+0xb6>
 800775a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800775e:	f240 80dd 	bls.w	800791c <_printf_float+0x3a8>
 8007762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007766:	2200      	movs	r2, #0
 8007768:	2300      	movs	r3, #0
 800776a:	f7f9 f9d5 	bl	8000b18 <__aeabi_dcmpeq>
 800776e:	2800      	cmp	r0, #0
 8007770:	d033      	beq.n	80077da <_printf_float+0x266>
 8007772:	4a37      	ldr	r2, [pc, #220]	@ (8007850 <_printf_float+0x2dc>)
 8007774:	2301      	movs	r3, #1
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	f43f af54 	beq.w	800762a <_printf_float+0xb6>
 8007782:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007786:	4543      	cmp	r3, r8
 8007788:	db02      	blt.n	8007790 <_printf_float+0x21c>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	07d8      	lsls	r0, r3, #31
 800778e:	d50f      	bpl.n	80077b0 <_printf_float+0x23c>
 8007790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f af45 	beq.w	800762a <_printf_float+0xb6>
 80077a0:	f04f 0900 	mov.w	r9, #0
 80077a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80077a8:	f104 0a1a 	add.w	sl, r4, #26
 80077ac:	45c8      	cmp	r8, r9
 80077ae:	dc09      	bgt.n	80077c4 <_printf_float+0x250>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	079b      	lsls	r3, r3, #30
 80077b4:	f100 8103 	bmi.w	80079be <_printf_float+0x44a>
 80077b8:	68e0      	ldr	r0, [r4, #12]
 80077ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077bc:	4298      	cmp	r0, r3
 80077be:	bfb8      	it	lt
 80077c0:	4618      	movlt	r0, r3
 80077c2:	e734      	b.n	800762e <_printf_float+0xba>
 80077c4:	2301      	movs	r3, #1
 80077c6:	4652      	mov	r2, sl
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	f43f af2b 	beq.w	800762a <_printf_float+0xb6>
 80077d4:	f109 0901 	add.w	r9, r9, #1
 80077d8:	e7e8      	b.n	80077ac <_printf_float+0x238>
 80077da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	dc39      	bgt.n	8007854 <_printf_float+0x2e0>
 80077e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007850 <_printf_float+0x2dc>)
 80077e2:	2301      	movs	r3, #1
 80077e4:	4631      	mov	r1, r6
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b8      	blx	r7
 80077ea:	3001      	adds	r0, #1
 80077ec:	f43f af1d 	beq.w	800762a <_printf_float+0xb6>
 80077f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077f4:	ea59 0303 	orrs.w	r3, r9, r3
 80077f8:	d102      	bne.n	8007800 <_printf_float+0x28c>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	07d9      	lsls	r1, r3, #31
 80077fe:	d5d7      	bpl.n	80077b0 <_printf_float+0x23c>
 8007800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f af0d 	beq.w	800762a <_printf_float+0xb6>
 8007810:	f04f 0a00 	mov.w	sl, #0
 8007814:	f104 0b1a 	add.w	fp, r4, #26
 8007818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781a:	425b      	negs	r3, r3
 800781c:	4553      	cmp	r3, sl
 800781e:	dc01      	bgt.n	8007824 <_printf_float+0x2b0>
 8007820:	464b      	mov	r3, r9
 8007822:	e793      	b.n	800774c <_printf_float+0x1d8>
 8007824:	2301      	movs	r3, #1
 8007826:	465a      	mov	r2, fp
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f aefb 	beq.w	800762a <_printf_float+0xb6>
 8007834:	f10a 0a01 	add.w	sl, sl, #1
 8007838:	e7ee      	b.n	8007818 <_printf_float+0x2a4>
 800783a:	bf00      	nop
 800783c:	7fefffff 	.word	0x7fefffff
 8007840:	0800ab80 	.word	0x0800ab80
 8007844:	0800ab7c 	.word	0x0800ab7c
 8007848:	0800ab88 	.word	0x0800ab88
 800784c:	0800ab84 	.word	0x0800ab84
 8007850:	0800ab8c 	.word	0x0800ab8c
 8007854:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007856:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800785a:	4553      	cmp	r3, sl
 800785c:	bfa8      	it	ge
 800785e:	4653      	movge	r3, sl
 8007860:	2b00      	cmp	r3, #0
 8007862:	4699      	mov	r9, r3
 8007864:	dc36      	bgt.n	80078d4 <_printf_float+0x360>
 8007866:	f04f 0b00 	mov.w	fp, #0
 800786a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800786e:	f104 021a 	add.w	r2, r4, #26
 8007872:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007874:	9306      	str	r3, [sp, #24]
 8007876:	eba3 0309 	sub.w	r3, r3, r9
 800787a:	455b      	cmp	r3, fp
 800787c:	dc31      	bgt.n	80078e2 <_printf_float+0x36e>
 800787e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007880:	459a      	cmp	sl, r3
 8007882:	dc3a      	bgt.n	80078fa <_printf_float+0x386>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	07da      	lsls	r2, r3, #31
 8007888:	d437      	bmi.n	80078fa <_printf_float+0x386>
 800788a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788c:	ebaa 0903 	sub.w	r9, sl, r3
 8007890:	9b06      	ldr	r3, [sp, #24]
 8007892:	ebaa 0303 	sub.w	r3, sl, r3
 8007896:	4599      	cmp	r9, r3
 8007898:	bfa8      	it	ge
 800789a:	4699      	movge	r9, r3
 800789c:	f1b9 0f00 	cmp.w	r9, #0
 80078a0:	dc33      	bgt.n	800790a <_printf_float+0x396>
 80078a2:	f04f 0800 	mov.w	r8, #0
 80078a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078aa:	f104 0b1a 	add.w	fp, r4, #26
 80078ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b0:	ebaa 0303 	sub.w	r3, sl, r3
 80078b4:	eba3 0309 	sub.w	r3, r3, r9
 80078b8:	4543      	cmp	r3, r8
 80078ba:	f77f af79 	ble.w	80077b0 <_printf_float+0x23c>
 80078be:	2301      	movs	r3, #1
 80078c0:	465a      	mov	r2, fp
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	f43f aeae 	beq.w	800762a <_printf_float+0xb6>
 80078ce:	f108 0801 	add.w	r8, r8, #1
 80078d2:	e7ec      	b.n	80078ae <_printf_float+0x33a>
 80078d4:	4642      	mov	r2, r8
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	d1c2      	bne.n	8007866 <_printf_float+0x2f2>
 80078e0:	e6a3      	b.n	800762a <_printf_float+0xb6>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	9206      	str	r2, [sp, #24]
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f ae9c 	beq.w	800762a <_printf_float+0xb6>
 80078f2:	9a06      	ldr	r2, [sp, #24]
 80078f4:	f10b 0b01 	add.w	fp, fp, #1
 80078f8:	e7bb      	b.n	8007872 <_printf_float+0x2fe>
 80078fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	d1c0      	bne.n	800788a <_printf_float+0x316>
 8007908:	e68f      	b.n	800762a <_printf_float+0xb6>
 800790a:	9a06      	ldr	r2, [sp, #24]
 800790c:	464b      	mov	r3, r9
 800790e:	4442      	add	r2, r8
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	d1c3      	bne.n	80078a2 <_printf_float+0x32e>
 800791a:	e686      	b.n	800762a <_printf_float+0xb6>
 800791c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007920:	f1ba 0f01 	cmp.w	sl, #1
 8007924:	dc01      	bgt.n	800792a <_printf_float+0x3b6>
 8007926:	07db      	lsls	r3, r3, #31
 8007928:	d536      	bpl.n	8007998 <_printf_float+0x424>
 800792a:	2301      	movs	r3, #1
 800792c:	4642      	mov	r2, r8
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	f43f ae78 	beq.w	800762a <_printf_float+0xb6>
 800793a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae70 	beq.w	800762a <_printf_float+0xb6>
 800794a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800794e:	2200      	movs	r2, #0
 8007950:	2300      	movs	r3, #0
 8007952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007956:	f7f9 f8df 	bl	8000b18 <__aeabi_dcmpeq>
 800795a:	b9c0      	cbnz	r0, 800798e <_printf_float+0x41a>
 800795c:	4653      	mov	r3, sl
 800795e:	f108 0201 	add.w	r2, r8, #1
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	d10c      	bne.n	8007986 <_printf_float+0x412>
 800796c:	e65d      	b.n	800762a <_printf_float+0xb6>
 800796e:	2301      	movs	r3, #1
 8007970:	465a      	mov	r2, fp
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae56 	beq.w	800762a <_printf_float+0xb6>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	45d0      	cmp	r8, sl
 8007984:	dbf3      	blt.n	800796e <_printf_float+0x3fa>
 8007986:	464b      	mov	r3, r9
 8007988:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800798c:	e6df      	b.n	800774e <_printf_float+0x1da>
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	f104 0b1a 	add.w	fp, r4, #26
 8007996:	e7f4      	b.n	8007982 <_printf_float+0x40e>
 8007998:	2301      	movs	r3, #1
 800799a:	4642      	mov	r2, r8
 800799c:	e7e1      	b.n	8007962 <_printf_float+0x3ee>
 800799e:	2301      	movs	r3, #1
 80079a0:	464a      	mov	r2, r9
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f ae3e 	beq.w	800762a <_printf_float+0xb6>
 80079ae:	f108 0801 	add.w	r8, r8, #1
 80079b2:	68e3      	ldr	r3, [r4, #12]
 80079b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079b6:	1a5b      	subs	r3, r3, r1
 80079b8:	4543      	cmp	r3, r8
 80079ba:	dcf0      	bgt.n	800799e <_printf_float+0x42a>
 80079bc:	e6fc      	b.n	80077b8 <_printf_float+0x244>
 80079be:	f04f 0800 	mov.w	r8, #0
 80079c2:	f104 0919 	add.w	r9, r4, #25
 80079c6:	e7f4      	b.n	80079b2 <_printf_float+0x43e>

080079c8 <_printf_common>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	4616      	mov	r6, r2
 80079ce:	4698      	mov	r8, r3
 80079d0:	688a      	ldr	r2, [r1, #8]
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079d8:	4293      	cmp	r3, r2
 80079da:	bfb8      	it	lt
 80079dc:	4613      	movlt	r3, r2
 80079de:	6033      	str	r3, [r6, #0]
 80079e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079e4:	4607      	mov	r7, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b10a      	cbz	r2, 80079ee <_printf_common+0x26>
 80079ea:	3301      	adds	r3, #1
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	0699      	lsls	r1, r3, #26
 80079f2:	bf42      	ittt	mi
 80079f4:	6833      	ldrmi	r3, [r6, #0]
 80079f6:	3302      	addmi	r3, #2
 80079f8:	6033      	strmi	r3, [r6, #0]
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	f015 0506 	ands.w	r5, r5, #6
 8007a00:	d106      	bne.n	8007a10 <_printf_common+0x48>
 8007a02:	f104 0a19 	add.w	sl, r4, #25
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	6832      	ldr	r2, [r6, #0]
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	dc26      	bgt.n	8007a5e <_printf_common+0x96>
 8007a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	3b00      	subs	r3, #0
 8007a18:	bf18      	it	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	0692      	lsls	r2, r2, #26
 8007a1e:	d42b      	bmi.n	8007a78 <_printf_common+0xb0>
 8007a20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a24:	4641      	mov	r1, r8
 8007a26:	4638      	mov	r0, r7
 8007a28:	47c8      	blx	r9
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d01e      	beq.n	8007a6c <_printf_common+0xa4>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	6922      	ldr	r2, [r4, #16]
 8007a32:	f003 0306 	and.w	r3, r3, #6
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	bf02      	ittt	eq
 8007a3a:	68e5      	ldreq	r5, [r4, #12]
 8007a3c:	6833      	ldreq	r3, [r6, #0]
 8007a3e:	1aed      	subeq	r5, r5, r3
 8007a40:	68a3      	ldr	r3, [r4, #8]
 8007a42:	bf0c      	ite	eq
 8007a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a48:	2500      	movne	r5, #0
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	bfc4      	itt	gt
 8007a4e:	1a9b      	subgt	r3, r3, r2
 8007a50:	18ed      	addgt	r5, r5, r3
 8007a52:	2600      	movs	r6, #0
 8007a54:	341a      	adds	r4, #26
 8007a56:	42b5      	cmp	r5, r6
 8007a58:	d11a      	bne.n	8007a90 <_printf_common+0xc8>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e008      	b.n	8007a70 <_printf_common+0xa8>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4652      	mov	r2, sl
 8007a62:	4641      	mov	r1, r8
 8007a64:	4638      	mov	r0, r7
 8007a66:	47c8      	blx	r9
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d103      	bne.n	8007a74 <_printf_common+0xac>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a74:	3501      	adds	r5, #1
 8007a76:	e7c6      	b.n	8007a06 <_printf_common+0x3e>
 8007a78:	18e1      	adds	r1, r4, r3
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	2030      	movs	r0, #48	@ 0x30
 8007a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a82:	4422      	add	r2, r4
 8007a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	e7c7      	b.n	8007a20 <_printf_common+0x58>
 8007a90:	2301      	movs	r3, #1
 8007a92:	4622      	mov	r2, r4
 8007a94:	4641      	mov	r1, r8
 8007a96:	4638      	mov	r0, r7
 8007a98:	47c8      	blx	r9
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d0e6      	beq.n	8007a6c <_printf_common+0xa4>
 8007a9e:	3601      	adds	r6, #1
 8007aa0:	e7d9      	b.n	8007a56 <_printf_common+0x8e>
	...

08007aa4 <_printf_i>:
 8007aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	7e0f      	ldrb	r7, [r1, #24]
 8007aaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007aac:	2f78      	cmp	r7, #120	@ 0x78
 8007aae:	4691      	mov	r9, r2
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	469a      	mov	sl, r3
 8007ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007aba:	d807      	bhi.n	8007acc <_printf_i+0x28>
 8007abc:	2f62      	cmp	r7, #98	@ 0x62
 8007abe:	d80a      	bhi.n	8007ad6 <_printf_i+0x32>
 8007ac0:	2f00      	cmp	r7, #0
 8007ac2:	f000 80d1 	beq.w	8007c68 <_printf_i+0x1c4>
 8007ac6:	2f58      	cmp	r7, #88	@ 0x58
 8007ac8:	f000 80b8 	beq.w	8007c3c <_printf_i+0x198>
 8007acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ad4:	e03a      	b.n	8007b4c <_printf_i+0xa8>
 8007ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ada:	2b15      	cmp	r3, #21
 8007adc:	d8f6      	bhi.n	8007acc <_printf_i+0x28>
 8007ade:	a101      	add	r1, pc, #4	@ (adr r1, 8007ae4 <_printf_i+0x40>)
 8007ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ae4:	08007b3d 	.word	0x08007b3d
 8007ae8:	08007b51 	.word	0x08007b51
 8007aec:	08007acd 	.word	0x08007acd
 8007af0:	08007acd 	.word	0x08007acd
 8007af4:	08007acd 	.word	0x08007acd
 8007af8:	08007acd 	.word	0x08007acd
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007acd 	.word	0x08007acd
 8007b04:	08007acd 	.word	0x08007acd
 8007b08:	08007acd 	.word	0x08007acd
 8007b0c:	08007acd 	.word	0x08007acd
 8007b10:	08007c4f 	.word	0x08007c4f
 8007b14:	08007b7b 	.word	0x08007b7b
 8007b18:	08007c09 	.word	0x08007c09
 8007b1c:	08007acd 	.word	0x08007acd
 8007b20:	08007acd 	.word	0x08007acd
 8007b24:	08007c71 	.word	0x08007c71
 8007b28:	08007acd 	.word	0x08007acd
 8007b2c:	08007b7b 	.word	0x08007b7b
 8007b30:	08007acd 	.word	0x08007acd
 8007b34:	08007acd 	.word	0x08007acd
 8007b38:	08007c11 	.word	0x08007c11
 8007b3c:	6833      	ldr	r3, [r6, #0]
 8007b3e:	1d1a      	adds	r2, r3, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6032      	str	r2, [r6, #0]
 8007b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e09c      	b.n	8007c8a <_printf_i+0x1e6>
 8007b50:	6833      	ldr	r3, [r6, #0]
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	1d19      	adds	r1, r3, #4
 8007b56:	6031      	str	r1, [r6, #0]
 8007b58:	0606      	lsls	r6, r0, #24
 8007b5a:	d501      	bpl.n	8007b60 <_printf_i+0xbc>
 8007b5c:	681d      	ldr	r5, [r3, #0]
 8007b5e:	e003      	b.n	8007b68 <_printf_i+0xc4>
 8007b60:	0645      	lsls	r5, r0, #25
 8007b62:	d5fb      	bpl.n	8007b5c <_printf_i+0xb8>
 8007b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	da03      	bge.n	8007b74 <_printf_i+0xd0>
 8007b6c:	232d      	movs	r3, #45	@ 0x2d
 8007b6e:	426d      	negs	r5, r5
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b74:	4858      	ldr	r0, [pc, #352]	@ (8007cd8 <_printf_i+0x234>)
 8007b76:	230a      	movs	r3, #10
 8007b78:	e011      	b.n	8007b9e <_printf_i+0xfa>
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	6833      	ldr	r3, [r6, #0]
 8007b7e:	0608      	lsls	r0, r1, #24
 8007b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b84:	d402      	bmi.n	8007b8c <_printf_i+0xe8>
 8007b86:	0649      	lsls	r1, r1, #25
 8007b88:	bf48      	it	mi
 8007b8a:	b2ad      	uxthmi	r5, r5
 8007b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b8e:	4852      	ldr	r0, [pc, #328]	@ (8007cd8 <_printf_i+0x234>)
 8007b90:	6033      	str	r3, [r6, #0]
 8007b92:	bf14      	ite	ne
 8007b94:	230a      	movne	r3, #10
 8007b96:	2308      	moveq	r3, #8
 8007b98:	2100      	movs	r1, #0
 8007b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b9e:	6866      	ldr	r6, [r4, #4]
 8007ba0:	60a6      	str	r6, [r4, #8]
 8007ba2:	2e00      	cmp	r6, #0
 8007ba4:	db05      	blt.n	8007bb2 <_printf_i+0x10e>
 8007ba6:	6821      	ldr	r1, [r4, #0]
 8007ba8:	432e      	orrs	r6, r5
 8007baa:	f021 0104 	bic.w	r1, r1, #4
 8007bae:	6021      	str	r1, [r4, #0]
 8007bb0:	d04b      	beq.n	8007c4a <_printf_i+0x1a6>
 8007bb2:	4616      	mov	r6, r2
 8007bb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bb8:	fb03 5711 	mls	r7, r3, r1, r5
 8007bbc:	5dc7      	ldrb	r7, [r0, r7]
 8007bbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bc2:	462f      	mov	r7, r5
 8007bc4:	42bb      	cmp	r3, r7
 8007bc6:	460d      	mov	r5, r1
 8007bc8:	d9f4      	bls.n	8007bb4 <_printf_i+0x110>
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d10b      	bne.n	8007be6 <_printf_i+0x142>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	07df      	lsls	r7, r3, #31
 8007bd2:	d508      	bpl.n	8007be6 <_printf_i+0x142>
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	6861      	ldr	r1, [r4, #4]
 8007bd8:	4299      	cmp	r1, r3
 8007bda:	bfde      	ittt	le
 8007bdc:	2330      	movle	r3, #48	@ 0x30
 8007bde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007be2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007be6:	1b92      	subs	r2, r2, r6
 8007be8:	6122      	str	r2, [r4, #16]
 8007bea:	f8cd a000 	str.w	sl, [sp]
 8007bee:	464b      	mov	r3, r9
 8007bf0:	aa03      	add	r2, sp, #12
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	f7ff fee7 	bl	80079c8 <_printf_common>
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d14a      	bne.n	8007c94 <_printf_i+0x1f0>
 8007bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007c02:	b004      	add	sp, #16
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	f043 0320 	orr.w	r3, r3, #32
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	4832      	ldr	r0, [pc, #200]	@ (8007cdc <_printf_i+0x238>)
 8007c12:	2778      	movs	r7, #120	@ 0x78
 8007c14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	6831      	ldr	r1, [r6, #0]
 8007c1c:	061f      	lsls	r7, r3, #24
 8007c1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c22:	d402      	bmi.n	8007c2a <_printf_i+0x186>
 8007c24:	065f      	lsls	r7, r3, #25
 8007c26:	bf48      	it	mi
 8007c28:	b2ad      	uxthmi	r5, r5
 8007c2a:	6031      	str	r1, [r6, #0]
 8007c2c:	07d9      	lsls	r1, r3, #31
 8007c2e:	bf44      	itt	mi
 8007c30:	f043 0320 	orrmi.w	r3, r3, #32
 8007c34:	6023      	strmi	r3, [r4, #0]
 8007c36:	b11d      	cbz	r5, 8007c40 <_printf_i+0x19c>
 8007c38:	2310      	movs	r3, #16
 8007c3a:	e7ad      	b.n	8007b98 <_printf_i+0xf4>
 8007c3c:	4826      	ldr	r0, [pc, #152]	@ (8007cd8 <_printf_i+0x234>)
 8007c3e:	e7e9      	b.n	8007c14 <_printf_i+0x170>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	f023 0320 	bic.w	r3, r3, #32
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	e7f6      	b.n	8007c38 <_printf_i+0x194>
 8007c4a:	4616      	mov	r6, r2
 8007c4c:	e7bd      	b.n	8007bca <_printf_i+0x126>
 8007c4e:	6833      	ldr	r3, [r6, #0]
 8007c50:	6825      	ldr	r5, [r4, #0]
 8007c52:	6961      	ldr	r1, [r4, #20]
 8007c54:	1d18      	adds	r0, r3, #4
 8007c56:	6030      	str	r0, [r6, #0]
 8007c58:	062e      	lsls	r6, r5, #24
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	d501      	bpl.n	8007c62 <_printf_i+0x1be>
 8007c5e:	6019      	str	r1, [r3, #0]
 8007c60:	e002      	b.n	8007c68 <_printf_i+0x1c4>
 8007c62:	0668      	lsls	r0, r5, #25
 8007c64:	d5fb      	bpl.n	8007c5e <_printf_i+0x1ba>
 8007c66:	8019      	strh	r1, [r3, #0]
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6123      	str	r3, [r4, #16]
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	e7bc      	b.n	8007bea <_printf_i+0x146>
 8007c70:	6833      	ldr	r3, [r6, #0]
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	6032      	str	r2, [r6, #0]
 8007c76:	681e      	ldr	r6, [r3, #0]
 8007c78:	6862      	ldr	r2, [r4, #4]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7f8 facf 	bl	8000220 <memchr>
 8007c82:	b108      	cbz	r0, 8007c88 <_printf_i+0x1e4>
 8007c84:	1b80      	subs	r0, r0, r6
 8007c86:	6060      	str	r0, [r4, #4]
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c92:	e7aa      	b.n	8007bea <_printf_i+0x146>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	4632      	mov	r2, r6
 8007c98:	4649      	mov	r1, r9
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	47d0      	blx	sl
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d0ad      	beq.n	8007bfe <_printf_i+0x15a>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	079b      	lsls	r3, r3, #30
 8007ca6:	d413      	bmi.n	8007cd0 <_printf_i+0x22c>
 8007ca8:	68e0      	ldr	r0, [r4, #12]
 8007caa:	9b03      	ldr	r3, [sp, #12]
 8007cac:	4298      	cmp	r0, r3
 8007cae:	bfb8      	it	lt
 8007cb0:	4618      	movlt	r0, r3
 8007cb2:	e7a6      	b.n	8007c02 <_printf_i+0x15e>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	4632      	mov	r2, r6
 8007cb8:	4649      	mov	r1, r9
 8007cba:	4640      	mov	r0, r8
 8007cbc:	47d0      	blx	sl
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d09d      	beq.n	8007bfe <_printf_i+0x15a>
 8007cc2:	3501      	adds	r5, #1
 8007cc4:	68e3      	ldr	r3, [r4, #12]
 8007cc6:	9903      	ldr	r1, [sp, #12]
 8007cc8:	1a5b      	subs	r3, r3, r1
 8007cca:	42ab      	cmp	r3, r5
 8007ccc:	dcf2      	bgt.n	8007cb4 <_printf_i+0x210>
 8007cce:	e7eb      	b.n	8007ca8 <_printf_i+0x204>
 8007cd0:	2500      	movs	r5, #0
 8007cd2:	f104 0619 	add.w	r6, r4, #25
 8007cd6:	e7f5      	b.n	8007cc4 <_printf_i+0x220>
 8007cd8:	0800ab8e 	.word	0x0800ab8e
 8007cdc:	0800ab9f 	.word	0x0800ab9f

08007ce0 <std>:
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cee:	6083      	str	r3, [r0, #8]
 8007cf0:	8181      	strh	r1, [r0, #12]
 8007cf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cf4:	81c2      	strh	r2, [r0, #14]
 8007cf6:	6183      	str	r3, [r0, #24]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	305c      	adds	r0, #92	@ 0x5c
 8007cfe:	f000 fa2f 	bl	8008160 <memset>
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <std+0x58>)
 8007d04:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <std+0x5c>)
 8007d08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <std+0x60>)
 8007d0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <std+0x64>)
 8007d10:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <std+0x68>)
 8007d14:	6224      	str	r4, [r4, #32]
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d006      	beq.n	8007d28 <std+0x48>
 8007d1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d1e:	4294      	cmp	r4, r2
 8007d20:	d002      	beq.n	8007d28 <std+0x48>
 8007d22:	33d0      	adds	r3, #208	@ 0xd0
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d105      	bne.n	8007d34 <std+0x54>
 8007d28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d30:	f000 ba92 	b.w	8008258 <__retarget_lock_init_recursive>
 8007d34:	bd10      	pop	{r4, pc}
 8007d36:	bf00      	nop
 8007d38:	08007fb1 	.word	0x08007fb1
 8007d3c:	08007fd3 	.word	0x08007fd3
 8007d40:	0800800b 	.word	0x0800800b
 8007d44:	0800802f 	.word	0x0800802f
 8007d48:	200007fc 	.word	0x200007fc

08007d4c <stdio_exit_handler>:
 8007d4c:	4a02      	ldr	r2, [pc, #8]	@ (8007d58 <stdio_exit_handler+0xc>)
 8007d4e:	4903      	ldr	r1, [pc, #12]	@ (8007d5c <stdio_exit_handler+0x10>)
 8007d50:	4803      	ldr	r0, [pc, #12]	@ (8007d60 <stdio_exit_handler+0x14>)
 8007d52:	f000 b869 	b.w	8007e28 <_fwalk_sglue>
 8007d56:	bf00      	nop
 8007d58:	2000000c 	.word	0x2000000c
 8007d5c:	08009e41 	.word	0x08009e41
 8007d60:	2000001c 	.word	0x2000001c

08007d64 <cleanup_stdio>:
 8007d64:	6841      	ldr	r1, [r0, #4]
 8007d66:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <cleanup_stdio+0x34>)
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	d001      	beq.n	8007d74 <cleanup_stdio+0x10>
 8007d70:	f002 f866 	bl	8009e40 <_fflush_r>
 8007d74:	68a1      	ldr	r1, [r4, #8]
 8007d76:	4b09      	ldr	r3, [pc, #36]	@ (8007d9c <cleanup_stdio+0x38>)
 8007d78:	4299      	cmp	r1, r3
 8007d7a:	d002      	beq.n	8007d82 <cleanup_stdio+0x1e>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f002 f85f 	bl	8009e40 <_fflush_r>
 8007d82:	68e1      	ldr	r1, [r4, #12]
 8007d84:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <cleanup_stdio+0x3c>)
 8007d86:	4299      	cmp	r1, r3
 8007d88:	d004      	beq.n	8007d94 <cleanup_stdio+0x30>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d90:	f002 b856 	b.w	8009e40 <_fflush_r>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	bf00      	nop
 8007d98:	200007fc 	.word	0x200007fc
 8007d9c:	20000864 	.word	0x20000864
 8007da0:	200008cc 	.word	0x200008cc

08007da4 <global_stdio_init.part.0>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <global_stdio_init.part.0+0x30>)
 8007da8:	4c0b      	ldr	r4, [pc, #44]	@ (8007dd8 <global_stdio_init.part.0+0x34>)
 8007daa:	4a0c      	ldr	r2, [pc, #48]	@ (8007ddc <global_stdio_init.part.0+0x38>)
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	4620      	mov	r0, r4
 8007db0:	2200      	movs	r2, #0
 8007db2:	2104      	movs	r1, #4
 8007db4:	f7ff ff94 	bl	8007ce0 <std>
 8007db8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	2109      	movs	r1, #9
 8007dc0:	f7ff ff8e 	bl	8007ce0 <std>
 8007dc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dc8:	2202      	movs	r2, #2
 8007dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dce:	2112      	movs	r1, #18
 8007dd0:	f7ff bf86 	b.w	8007ce0 <std>
 8007dd4:	20000934 	.word	0x20000934
 8007dd8:	200007fc 	.word	0x200007fc
 8007ddc:	08007d4d 	.word	0x08007d4d

08007de0 <__sfp_lock_acquire>:
 8007de0:	4801      	ldr	r0, [pc, #4]	@ (8007de8 <__sfp_lock_acquire+0x8>)
 8007de2:	f000 ba3a 	b.w	800825a <__retarget_lock_acquire_recursive>
 8007de6:	bf00      	nop
 8007de8:	2000093d 	.word	0x2000093d

08007dec <__sfp_lock_release>:
 8007dec:	4801      	ldr	r0, [pc, #4]	@ (8007df4 <__sfp_lock_release+0x8>)
 8007dee:	f000 ba35 	b.w	800825c <__retarget_lock_release_recursive>
 8007df2:	bf00      	nop
 8007df4:	2000093d 	.word	0x2000093d

08007df8 <__sinit>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	f7ff fff0 	bl	8007de0 <__sfp_lock_acquire>
 8007e00:	6a23      	ldr	r3, [r4, #32]
 8007e02:	b11b      	cbz	r3, 8007e0c <__sinit+0x14>
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	f7ff bff0 	b.w	8007dec <__sfp_lock_release>
 8007e0c:	4b04      	ldr	r3, [pc, #16]	@ (8007e20 <__sinit+0x28>)
 8007e0e:	6223      	str	r3, [r4, #32]
 8007e10:	4b04      	ldr	r3, [pc, #16]	@ (8007e24 <__sinit+0x2c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f5      	bne.n	8007e04 <__sinit+0xc>
 8007e18:	f7ff ffc4 	bl	8007da4 <global_stdio_init.part.0>
 8007e1c:	e7f2      	b.n	8007e04 <__sinit+0xc>
 8007e1e:	bf00      	nop
 8007e20:	08007d65 	.word	0x08007d65
 8007e24:	20000934 	.word	0x20000934

08007e28 <_fwalk_sglue>:
 8007e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	4688      	mov	r8, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	2600      	movs	r6, #0
 8007e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e38:	f1b9 0901 	subs.w	r9, r9, #1
 8007e3c:	d505      	bpl.n	8007e4a <_fwalk_sglue+0x22>
 8007e3e:	6824      	ldr	r4, [r4, #0]
 8007e40:	2c00      	cmp	r4, #0
 8007e42:	d1f7      	bne.n	8007e34 <_fwalk_sglue+0xc>
 8007e44:	4630      	mov	r0, r6
 8007e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d907      	bls.n	8007e60 <_fwalk_sglue+0x38>
 8007e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e54:	3301      	adds	r3, #1
 8007e56:	d003      	beq.n	8007e60 <_fwalk_sglue+0x38>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	47c0      	blx	r8
 8007e5e:	4306      	orrs	r6, r0
 8007e60:	3568      	adds	r5, #104	@ 0x68
 8007e62:	e7e9      	b.n	8007e38 <_fwalk_sglue+0x10>

08007e64 <iprintf>:
 8007e64:	b40f      	push	{r0, r1, r2, r3}
 8007e66:	b507      	push	{r0, r1, r2, lr}
 8007e68:	4906      	ldr	r1, [pc, #24]	@ (8007e84 <iprintf+0x20>)
 8007e6a:	ab04      	add	r3, sp, #16
 8007e6c:	6808      	ldr	r0, [r1, #0]
 8007e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e72:	6881      	ldr	r1, [r0, #8]
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	f001 fe47 	bl	8009b08 <_vfiprintf_r>
 8007e7a:	b003      	add	sp, #12
 8007e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e80:	b004      	add	sp, #16
 8007e82:	4770      	bx	lr
 8007e84:	20000018 	.word	0x20000018

08007e88 <_puts_r>:
 8007e88:	6a03      	ldr	r3, [r0, #32]
 8007e8a:	b570      	push	{r4, r5, r6, lr}
 8007e8c:	6884      	ldr	r4, [r0, #8]
 8007e8e:	4605      	mov	r5, r0
 8007e90:	460e      	mov	r6, r1
 8007e92:	b90b      	cbnz	r3, 8007e98 <_puts_r+0x10>
 8007e94:	f7ff ffb0 	bl	8007df8 <__sinit>
 8007e98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e9a:	07db      	lsls	r3, r3, #31
 8007e9c:	d405      	bmi.n	8007eaa <_puts_r+0x22>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	0598      	lsls	r0, r3, #22
 8007ea2:	d402      	bmi.n	8007eaa <_puts_r+0x22>
 8007ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ea6:	f000 f9d8 	bl	800825a <__retarget_lock_acquire_recursive>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	0719      	lsls	r1, r3, #28
 8007eae:	d502      	bpl.n	8007eb6 <_puts_r+0x2e>
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d135      	bne.n	8007f22 <_puts_r+0x9a>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 f8fb 	bl	80080b4 <__swsetup_r>
 8007ebe:	b380      	cbz	r0, 8007f22 <_puts_r+0x9a>
 8007ec0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ec4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ec6:	07da      	lsls	r2, r3, #31
 8007ec8:	d405      	bmi.n	8007ed6 <_puts_r+0x4e>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	059b      	lsls	r3, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_puts_r+0x4e>
 8007ed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ed2:	f000 f9c3 	bl	800825c <__retarget_lock_release_recursive>
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	bd70      	pop	{r4, r5, r6, pc}
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da04      	bge.n	8007ee8 <_puts_r+0x60>
 8007ede:	69a2      	ldr	r2, [r4, #24]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	dc17      	bgt.n	8007f14 <_puts_r+0x8c>
 8007ee4:	290a      	cmp	r1, #10
 8007ee6:	d015      	beq.n	8007f14 <_puts_r+0x8c>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	6022      	str	r2, [r4, #0]
 8007eee:	7019      	strb	r1, [r3, #0]
 8007ef0:	68a3      	ldr	r3, [r4, #8]
 8007ef2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	60a3      	str	r3, [r4, #8]
 8007efa:	2900      	cmp	r1, #0
 8007efc:	d1ed      	bne.n	8007eda <_puts_r+0x52>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da11      	bge.n	8007f26 <_puts_r+0x9e>
 8007f02:	4622      	mov	r2, r4
 8007f04:	210a      	movs	r1, #10
 8007f06:	4628      	mov	r0, r5
 8007f08:	f000 f895 	bl	8008036 <__swbuf_r>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d0d7      	beq.n	8007ec0 <_puts_r+0x38>
 8007f10:	250a      	movs	r5, #10
 8007f12:	e7d7      	b.n	8007ec4 <_puts_r+0x3c>
 8007f14:	4622      	mov	r2, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 f88d 	bl	8008036 <__swbuf_r>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d1e7      	bne.n	8007ef0 <_puts_r+0x68>
 8007f20:	e7ce      	b.n	8007ec0 <_puts_r+0x38>
 8007f22:	3e01      	subs	r6, #1
 8007f24:	e7e4      	b.n	8007ef0 <_puts_r+0x68>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	6022      	str	r2, [r4, #0]
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e7ee      	b.n	8007f10 <_puts_r+0x88>
	...

08007f34 <puts>:
 8007f34:	4b02      	ldr	r3, [pc, #8]	@ (8007f40 <puts+0xc>)
 8007f36:	4601      	mov	r1, r0
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	f7ff bfa5 	b.w	8007e88 <_puts_r>
 8007f3e:	bf00      	nop
 8007f40:	20000018 	.word	0x20000018

08007f44 <sniprintf>:
 8007f44:	b40c      	push	{r2, r3}
 8007f46:	b530      	push	{r4, r5, lr}
 8007f48:	4b18      	ldr	r3, [pc, #96]	@ (8007fac <sniprintf+0x68>)
 8007f4a:	1e0c      	subs	r4, r1, #0
 8007f4c:	681d      	ldr	r5, [r3, #0]
 8007f4e:	b09d      	sub	sp, #116	@ 0x74
 8007f50:	da08      	bge.n	8007f64 <sniprintf+0x20>
 8007f52:	238b      	movs	r3, #139	@ 0x8b
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5a:	b01d      	add	sp, #116	@ 0x74
 8007f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f60:	b002      	add	sp, #8
 8007f62:	4770      	bx	lr
 8007f64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f6c:	f04f 0300 	mov.w	r3, #0
 8007f70:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007f72:	bf14      	ite	ne
 8007f74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f78:	4623      	moveq	r3, r4
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f82:	9002      	str	r0, [sp, #8]
 8007f84:	9006      	str	r0, [sp, #24]
 8007f86:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f8c:	ab21      	add	r3, sp, #132	@ 0x84
 8007f8e:	a902      	add	r1, sp, #8
 8007f90:	4628      	mov	r0, r5
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	f001 fc92 	bl	80098bc <_svfiprintf_r>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	bfbc      	itt	lt
 8007f9c:	238b      	movlt	r3, #139	@ 0x8b
 8007f9e:	602b      	strlt	r3, [r5, #0]
 8007fa0:	2c00      	cmp	r4, #0
 8007fa2:	d0da      	beq.n	8007f5a <sniprintf+0x16>
 8007fa4:	9b02      	ldr	r3, [sp, #8]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	e7d6      	b.n	8007f5a <sniprintf+0x16>
 8007fac:	20000018 	.word	0x20000018

08007fb0 <__sread>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb8:	f000 f900 	bl	80081bc <_read_r>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	bfab      	itete	ge
 8007fc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fc4:	181b      	addge	r3, r3, r0
 8007fc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fca:	bfac      	ite	ge
 8007fcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fce:	81a3      	strhlt	r3, [r4, #12]
 8007fd0:	bd10      	pop	{r4, pc}

08007fd2 <__swrite>:
 8007fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd6:	461f      	mov	r7, r3
 8007fd8:	898b      	ldrh	r3, [r1, #12]
 8007fda:	05db      	lsls	r3, r3, #23
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	4616      	mov	r6, r2
 8007fe2:	d505      	bpl.n	8007ff0 <__swrite+0x1e>
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	2302      	movs	r3, #2
 8007fea:	2200      	movs	r2, #0
 8007fec:	f000 f8d4 	bl	8008198 <_lseek_r>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ffa:	81a3      	strh	r3, [r4, #12]
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	463b      	mov	r3, r7
 8008000:	4628      	mov	r0, r5
 8008002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	f000 b8eb 	b.w	80081e0 <_write_r>

0800800a <__sseek>:
 800800a:	b510      	push	{r4, lr}
 800800c:	460c      	mov	r4, r1
 800800e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008012:	f000 f8c1 	bl	8008198 <_lseek_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	bf15      	itete	ne
 800801c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800801e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008026:	81a3      	strheq	r3, [r4, #12]
 8008028:	bf18      	it	ne
 800802a:	81a3      	strhne	r3, [r4, #12]
 800802c:	bd10      	pop	{r4, pc}

0800802e <__sclose>:
 800802e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008032:	f000 b8a1 	b.w	8008178 <_close_r>

08008036 <__swbuf_r>:
 8008036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008038:	460e      	mov	r6, r1
 800803a:	4614      	mov	r4, r2
 800803c:	4605      	mov	r5, r0
 800803e:	b118      	cbz	r0, 8008048 <__swbuf_r+0x12>
 8008040:	6a03      	ldr	r3, [r0, #32]
 8008042:	b90b      	cbnz	r3, 8008048 <__swbuf_r+0x12>
 8008044:	f7ff fed8 	bl	8007df8 <__sinit>
 8008048:	69a3      	ldr	r3, [r4, #24]
 800804a:	60a3      	str	r3, [r4, #8]
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	071a      	lsls	r2, r3, #28
 8008050:	d501      	bpl.n	8008056 <__swbuf_r+0x20>
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	b943      	cbnz	r3, 8008068 <__swbuf_r+0x32>
 8008056:	4621      	mov	r1, r4
 8008058:	4628      	mov	r0, r5
 800805a:	f000 f82b 	bl	80080b4 <__swsetup_r>
 800805e:	b118      	cbz	r0, 8008068 <__swbuf_r+0x32>
 8008060:	f04f 37ff 	mov.w	r7, #4294967295
 8008064:	4638      	mov	r0, r7
 8008066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	6922      	ldr	r2, [r4, #16]
 800806c:	1a98      	subs	r0, r3, r2
 800806e:	6963      	ldr	r3, [r4, #20]
 8008070:	b2f6      	uxtb	r6, r6
 8008072:	4283      	cmp	r3, r0
 8008074:	4637      	mov	r7, r6
 8008076:	dc05      	bgt.n	8008084 <__swbuf_r+0x4e>
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f001 fee0 	bl	8009e40 <_fflush_r>
 8008080:	2800      	cmp	r0, #0
 8008082:	d1ed      	bne.n	8008060 <__swbuf_r+0x2a>
 8008084:	68a3      	ldr	r3, [r4, #8]
 8008086:	3b01      	subs	r3, #1
 8008088:	60a3      	str	r3, [r4, #8]
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	6022      	str	r2, [r4, #0]
 8008090:	701e      	strb	r6, [r3, #0]
 8008092:	6962      	ldr	r2, [r4, #20]
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	429a      	cmp	r2, r3
 8008098:	d004      	beq.n	80080a4 <__swbuf_r+0x6e>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	07db      	lsls	r3, r3, #31
 800809e:	d5e1      	bpl.n	8008064 <__swbuf_r+0x2e>
 80080a0:	2e0a      	cmp	r6, #10
 80080a2:	d1df      	bne.n	8008064 <__swbuf_r+0x2e>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4628      	mov	r0, r5
 80080a8:	f001 feca 	bl	8009e40 <_fflush_r>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d0d9      	beq.n	8008064 <__swbuf_r+0x2e>
 80080b0:	e7d6      	b.n	8008060 <__swbuf_r+0x2a>
	...

080080b4 <__swsetup_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4b29      	ldr	r3, [pc, #164]	@ (800815c <__swsetup_r+0xa8>)
 80080b8:	4605      	mov	r5, r0
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	460c      	mov	r4, r1
 80080be:	b118      	cbz	r0, 80080c8 <__swsetup_r+0x14>
 80080c0:	6a03      	ldr	r3, [r0, #32]
 80080c2:	b90b      	cbnz	r3, 80080c8 <__swsetup_r+0x14>
 80080c4:	f7ff fe98 	bl	8007df8 <__sinit>
 80080c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080cc:	0719      	lsls	r1, r3, #28
 80080ce:	d422      	bmi.n	8008116 <__swsetup_r+0x62>
 80080d0:	06da      	lsls	r2, r3, #27
 80080d2:	d407      	bmi.n	80080e4 <__swsetup_r+0x30>
 80080d4:	2209      	movs	r2, #9
 80080d6:	602a      	str	r2, [r5, #0]
 80080d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	e033      	b.n	800814c <__swsetup_r+0x98>
 80080e4:	0758      	lsls	r0, r3, #29
 80080e6:	d512      	bpl.n	800810e <__swsetup_r+0x5a>
 80080e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080ea:	b141      	cbz	r1, 80080fe <__swsetup_r+0x4a>
 80080ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080f0:	4299      	cmp	r1, r3
 80080f2:	d002      	beq.n	80080fa <__swsetup_r+0x46>
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 ff0b 	bl	8008f10 <_free_r>
 80080fa:	2300      	movs	r3, #0
 80080fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	2300      	movs	r3, #0
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	f043 0308 	orr.w	r3, r3, #8
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	b94b      	cbnz	r3, 800812e <__swsetup_r+0x7a>
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008124:	d003      	beq.n	800812e <__swsetup_r+0x7a>
 8008126:	4621      	mov	r1, r4
 8008128:	4628      	mov	r0, r5
 800812a:	f001 fed7 	bl	8009edc <__smakebuf_r>
 800812e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008132:	f013 0201 	ands.w	r2, r3, #1
 8008136:	d00a      	beq.n	800814e <__swsetup_r+0x9a>
 8008138:	2200      	movs	r2, #0
 800813a:	60a2      	str	r2, [r4, #8]
 800813c:	6962      	ldr	r2, [r4, #20]
 800813e:	4252      	negs	r2, r2
 8008140:	61a2      	str	r2, [r4, #24]
 8008142:	6922      	ldr	r2, [r4, #16]
 8008144:	b942      	cbnz	r2, 8008158 <__swsetup_r+0xa4>
 8008146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800814a:	d1c5      	bne.n	80080d8 <__swsetup_r+0x24>
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	0799      	lsls	r1, r3, #30
 8008150:	bf58      	it	pl
 8008152:	6962      	ldrpl	r2, [r4, #20]
 8008154:	60a2      	str	r2, [r4, #8]
 8008156:	e7f4      	b.n	8008142 <__swsetup_r+0x8e>
 8008158:	2000      	movs	r0, #0
 800815a:	e7f7      	b.n	800814c <__swsetup_r+0x98>
 800815c:	20000018 	.word	0x20000018

08008160 <memset>:
 8008160:	4402      	add	r2, r0
 8008162:	4603      	mov	r3, r0
 8008164:	4293      	cmp	r3, r2
 8008166:	d100      	bne.n	800816a <memset+0xa>
 8008168:	4770      	bx	lr
 800816a:	f803 1b01 	strb.w	r1, [r3], #1
 800816e:	e7f9      	b.n	8008164 <memset+0x4>

08008170 <_localeconv_r>:
 8008170:	4800      	ldr	r0, [pc, #0]	@ (8008174 <_localeconv_r+0x4>)
 8008172:	4770      	bx	lr
 8008174:	20000158 	.word	0x20000158

08008178 <_close_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d06      	ldr	r5, [pc, #24]	@ (8008194 <_close_r+0x1c>)
 800817c:	2300      	movs	r3, #0
 800817e:	4604      	mov	r4, r0
 8008180:	4608      	mov	r0, r1
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	f7f9 ff8a 	bl	800209c <_close>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_close_r+0x1a>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_close_r+0x1a>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	20000938 	.word	0x20000938

08008198 <_lseek_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d07      	ldr	r5, [pc, #28]	@ (80081b8 <_lseek_r+0x20>)
 800819c:	4604      	mov	r4, r0
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7f9 ff9f 	bl	80020ea <_lseek>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_lseek_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_lseek_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20000938 	.word	0x20000938

080081bc <_read_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d07      	ldr	r5, [pc, #28]	@ (80081dc <_read_r+0x20>)
 80081c0:	4604      	mov	r4, r0
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	602a      	str	r2, [r5, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f7f9 ff2d 	bl	800202a <_read>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_read_r+0x1e>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_read_r+0x1e>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20000938 	.word	0x20000938

080081e0 <_write_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d07      	ldr	r5, [pc, #28]	@ (8008200 <_write_r+0x20>)
 80081e4:	4604      	mov	r4, r0
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7f9 ff38 	bl	8002064 <_write>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_write_r+0x1e>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_write_r+0x1e>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	20000938 	.word	0x20000938

08008204 <__errno>:
 8008204:	4b01      	ldr	r3, [pc, #4]	@ (800820c <__errno+0x8>)
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	20000018 	.word	0x20000018

08008210 <__libc_init_array>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	4d0d      	ldr	r5, [pc, #52]	@ (8008248 <__libc_init_array+0x38>)
 8008214:	4c0d      	ldr	r4, [pc, #52]	@ (800824c <__libc_init_array+0x3c>)
 8008216:	1b64      	subs	r4, r4, r5
 8008218:	10a4      	asrs	r4, r4, #2
 800821a:	2600      	movs	r6, #0
 800821c:	42a6      	cmp	r6, r4
 800821e:	d109      	bne.n	8008234 <__libc_init_array+0x24>
 8008220:	4d0b      	ldr	r5, [pc, #44]	@ (8008250 <__libc_init_array+0x40>)
 8008222:	4c0c      	ldr	r4, [pc, #48]	@ (8008254 <__libc_init_array+0x44>)
 8008224:	f001 ffd6 	bl	800a1d4 <_init>
 8008228:	1b64      	subs	r4, r4, r5
 800822a:	10a4      	asrs	r4, r4, #2
 800822c:	2600      	movs	r6, #0
 800822e:	42a6      	cmp	r6, r4
 8008230:	d105      	bne.n	800823e <__libc_init_array+0x2e>
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	f855 3b04 	ldr.w	r3, [r5], #4
 8008238:	4798      	blx	r3
 800823a:	3601      	adds	r6, #1
 800823c:	e7ee      	b.n	800821c <__libc_init_array+0xc>
 800823e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008242:	4798      	blx	r3
 8008244:	3601      	adds	r6, #1
 8008246:	e7f2      	b.n	800822e <__libc_init_array+0x1e>
 8008248:	0800aefc 	.word	0x0800aefc
 800824c:	0800aefc 	.word	0x0800aefc
 8008250:	0800aefc 	.word	0x0800aefc
 8008254:	0800af00 	.word	0x0800af00

08008258 <__retarget_lock_init_recursive>:
 8008258:	4770      	bx	lr

0800825a <__retarget_lock_acquire_recursive>:
 800825a:	4770      	bx	lr

0800825c <__retarget_lock_release_recursive>:
 800825c:	4770      	bx	lr

0800825e <quorem>:
 800825e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008262:	6903      	ldr	r3, [r0, #16]
 8008264:	690c      	ldr	r4, [r1, #16]
 8008266:	42a3      	cmp	r3, r4
 8008268:	4607      	mov	r7, r0
 800826a:	db7e      	blt.n	800836a <quorem+0x10c>
 800826c:	3c01      	subs	r4, #1
 800826e:	f101 0814 	add.w	r8, r1, #20
 8008272:	00a3      	lsls	r3, r4, #2
 8008274:	f100 0514 	add.w	r5, r0, #20
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008288:	3301      	adds	r3, #1
 800828a:	429a      	cmp	r2, r3
 800828c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008290:	fbb2 f6f3 	udiv	r6, r2, r3
 8008294:	d32e      	bcc.n	80082f4 <quorem+0x96>
 8008296:	f04f 0a00 	mov.w	sl, #0
 800829a:	46c4      	mov	ip, r8
 800829c:	46ae      	mov	lr, r5
 800829e:	46d3      	mov	fp, sl
 80082a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082a4:	b298      	uxth	r0, r3
 80082a6:	fb06 a000 	mla	r0, r6, r0, sl
 80082aa:	0c02      	lsrs	r2, r0, #16
 80082ac:	0c1b      	lsrs	r3, r3, #16
 80082ae:	fb06 2303 	mla	r3, r6, r3, r2
 80082b2:	f8de 2000 	ldr.w	r2, [lr]
 80082b6:	b280      	uxth	r0, r0
 80082b8:	b292      	uxth	r2, r2
 80082ba:	1a12      	subs	r2, r2, r0
 80082bc:	445a      	add	r2, fp
 80082be:	f8de 0000 	ldr.w	r0, [lr]
 80082c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082d0:	b292      	uxth	r2, r2
 80082d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082d6:	45e1      	cmp	r9, ip
 80082d8:	f84e 2b04 	str.w	r2, [lr], #4
 80082dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082e0:	d2de      	bcs.n	80082a0 <quorem+0x42>
 80082e2:	9b00      	ldr	r3, [sp, #0]
 80082e4:	58eb      	ldr	r3, [r5, r3]
 80082e6:	b92b      	cbnz	r3, 80082f4 <quorem+0x96>
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	3b04      	subs	r3, #4
 80082ec:	429d      	cmp	r5, r3
 80082ee:	461a      	mov	r2, r3
 80082f0:	d32f      	bcc.n	8008352 <quorem+0xf4>
 80082f2:	613c      	str	r4, [r7, #16]
 80082f4:	4638      	mov	r0, r7
 80082f6:	f001 f97d 	bl	80095f4 <__mcmp>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	db25      	blt.n	800834a <quorem+0xec>
 80082fe:	4629      	mov	r1, r5
 8008300:	2000      	movs	r0, #0
 8008302:	f858 2b04 	ldr.w	r2, [r8], #4
 8008306:	f8d1 c000 	ldr.w	ip, [r1]
 800830a:	fa1f fe82 	uxth.w	lr, r2
 800830e:	fa1f f38c 	uxth.w	r3, ip
 8008312:	eba3 030e 	sub.w	r3, r3, lr
 8008316:	4403      	add	r3, r0
 8008318:	0c12      	lsrs	r2, r2, #16
 800831a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800831e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008328:	45c1      	cmp	r9, r8
 800832a:	f841 3b04 	str.w	r3, [r1], #4
 800832e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008332:	d2e6      	bcs.n	8008302 <quorem+0xa4>
 8008334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008338:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800833c:	b922      	cbnz	r2, 8008348 <quorem+0xea>
 800833e:	3b04      	subs	r3, #4
 8008340:	429d      	cmp	r5, r3
 8008342:	461a      	mov	r2, r3
 8008344:	d30b      	bcc.n	800835e <quorem+0x100>
 8008346:	613c      	str	r4, [r7, #16]
 8008348:	3601      	adds	r6, #1
 800834a:	4630      	mov	r0, r6
 800834c:	b003      	add	sp, #12
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	3b04      	subs	r3, #4
 8008356:	2a00      	cmp	r2, #0
 8008358:	d1cb      	bne.n	80082f2 <quorem+0x94>
 800835a:	3c01      	subs	r4, #1
 800835c:	e7c6      	b.n	80082ec <quorem+0x8e>
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	3b04      	subs	r3, #4
 8008362:	2a00      	cmp	r2, #0
 8008364:	d1ef      	bne.n	8008346 <quorem+0xe8>
 8008366:	3c01      	subs	r4, #1
 8008368:	e7ea      	b.n	8008340 <quorem+0xe2>
 800836a:	2000      	movs	r0, #0
 800836c:	e7ee      	b.n	800834c <quorem+0xee>
	...

08008370 <_dtoa_r>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	69c7      	ldr	r7, [r0, #28]
 8008376:	b097      	sub	sp, #92	@ 0x5c
 8008378:	ed8d 0b04 	vstr	d0, [sp, #16]
 800837c:	ec55 4b10 	vmov	r4, r5, d0
 8008380:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008382:	9107      	str	r1, [sp, #28]
 8008384:	4681      	mov	r9, r0
 8008386:	920c      	str	r2, [sp, #48]	@ 0x30
 8008388:	9311      	str	r3, [sp, #68]	@ 0x44
 800838a:	b97f      	cbnz	r7, 80083ac <_dtoa_r+0x3c>
 800838c:	2010      	movs	r0, #16
 800838e:	f000 fe09 	bl	8008fa4 <malloc>
 8008392:	4602      	mov	r2, r0
 8008394:	f8c9 001c 	str.w	r0, [r9, #28]
 8008398:	b920      	cbnz	r0, 80083a4 <_dtoa_r+0x34>
 800839a:	4ba9      	ldr	r3, [pc, #676]	@ (8008640 <_dtoa_r+0x2d0>)
 800839c:	21ef      	movs	r1, #239	@ 0xef
 800839e:	48a9      	ldr	r0, [pc, #676]	@ (8008644 <_dtoa_r+0x2d4>)
 80083a0:	f001 fe32 	bl	800a008 <__assert_func>
 80083a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083a8:	6007      	str	r7, [r0, #0]
 80083aa:	60c7      	str	r7, [r0, #12]
 80083ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083b0:	6819      	ldr	r1, [r3, #0]
 80083b2:	b159      	cbz	r1, 80083cc <_dtoa_r+0x5c>
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	604a      	str	r2, [r1, #4]
 80083b8:	2301      	movs	r3, #1
 80083ba:	4093      	lsls	r3, r2
 80083bc:	608b      	str	r3, [r1, #8]
 80083be:	4648      	mov	r0, r9
 80083c0:	f000 fee6 	bl	8009190 <_Bfree>
 80083c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	1e2b      	subs	r3, r5, #0
 80083ce:	bfb9      	ittee	lt
 80083d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083d4:	9305      	strlt	r3, [sp, #20]
 80083d6:	2300      	movge	r3, #0
 80083d8:	6033      	strge	r3, [r6, #0]
 80083da:	9f05      	ldr	r7, [sp, #20]
 80083dc:	4b9a      	ldr	r3, [pc, #616]	@ (8008648 <_dtoa_r+0x2d8>)
 80083de:	bfbc      	itt	lt
 80083e0:	2201      	movlt	r2, #1
 80083e2:	6032      	strlt	r2, [r6, #0]
 80083e4:	43bb      	bics	r3, r7
 80083e6:	d112      	bne.n	800840e <_dtoa_r+0x9e>
 80083e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80083ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083f4:	4323      	orrs	r3, r4
 80083f6:	f000 855a 	beq.w	8008eae <_dtoa_r+0xb3e>
 80083fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800865c <_dtoa_r+0x2ec>
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 855c 	beq.w	8008ebe <_dtoa_r+0xb4e>
 8008406:	f10a 0303 	add.w	r3, sl, #3
 800840a:	f000 bd56 	b.w	8008eba <_dtoa_r+0xb4a>
 800840e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008412:	2200      	movs	r2, #0
 8008414:	ec51 0b17 	vmov	r0, r1, d7
 8008418:	2300      	movs	r3, #0
 800841a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800841e:	f7f8 fb7b 	bl	8000b18 <__aeabi_dcmpeq>
 8008422:	4680      	mov	r8, r0
 8008424:	b158      	cbz	r0, 800843e <_dtoa_r+0xce>
 8008426:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008428:	2301      	movs	r3, #1
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800842e:	b113      	cbz	r3, 8008436 <_dtoa_r+0xc6>
 8008430:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008432:	4b86      	ldr	r3, [pc, #536]	@ (800864c <_dtoa_r+0x2dc>)
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008660 <_dtoa_r+0x2f0>
 800843a:	f000 bd40 	b.w	8008ebe <_dtoa_r+0xb4e>
 800843e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008442:	aa14      	add	r2, sp, #80	@ 0x50
 8008444:	a915      	add	r1, sp, #84	@ 0x54
 8008446:	4648      	mov	r0, r9
 8008448:	f001 f984 	bl	8009754 <__d2b>
 800844c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008450:	9002      	str	r0, [sp, #8]
 8008452:	2e00      	cmp	r6, #0
 8008454:	d078      	beq.n	8008548 <_dtoa_r+0x1d8>
 8008456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008458:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800845c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008464:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008468:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800846c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008470:	4619      	mov	r1, r3
 8008472:	2200      	movs	r2, #0
 8008474:	4b76      	ldr	r3, [pc, #472]	@ (8008650 <_dtoa_r+0x2e0>)
 8008476:	f7f7 ff2f 	bl	80002d8 <__aeabi_dsub>
 800847a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008628 <_dtoa_r+0x2b8>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f7f8 f8e2 	bl	8000648 <__aeabi_dmul>
 8008484:	a36a      	add	r3, pc, #424	@ (adr r3, 8008630 <_dtoa_r+0x2c0>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f7 ff27 	bl	80002dc <__adddf3>
 800848e:	4604      	mov	r4, r0
 8008490:	4630      	mov	r0, r6
 8008492:	460d      	mov	r5, r1
 8008494:	f7f8 f86e 	bl	8000574 <__aeabi_i2d>
 8008498:	a367      	add	r3, pc, #412	@ (adr r3, 8008638 <_dtoa_r+0x2c8>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f8 f8d3 	bl	8000648 <__aeabi_dmul>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4620      	mov	r0, r4
 80084a8:	4629      	mov	r1, r5
 80084aa:	f7f7 ff17 	bl	80002dc <__adddf3>
 80084ae:	4604      	mov	r4, r0
 80084b0:	460d      	mov	r5, r1
 80084b2:	f7f8 fb79 	bl	8000ba8 <__aeabi_d2iz>
 80084b6:	2200      	movs	r2, #0
 80084b8:	4607      	mov	r7, r0
 80084ba:	2300      	movs	r3, #0
 80084bc:	4620      	mov	r0, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f8 fb34 	bl	8000b2c <__aeabi_dcmplt>
 80084c4:	b140      	cbz	r0, 80084d8 <_dtoa_r+0x168>
 80084c6:	4638      	mov	r0, r7
 80084c8:	f7f8 f854 	bl	8000574 <__aeabi_i2d>
 80084cc:	4622      	mov	r2, r4
 80084ce:	462b      	mov	r3, r5
 80084d0:	f7f8 fb22 	bl	8000b18 <__aeabi_dcmpeq>
 80084d4:	b900      	cbnz	r0, 80084d8 <_dtoa_r+0x168>
 80084d6:	3f01      	subs	r7, #1
 80084d8:	2f16      	cmp	r7, #22
 80084da:	d852      	bhi.n	8008582 <_dtoa_r+0x212>
 80084dc:	4b5d      	ldr	r3, [pc, #372]	@ (8008654 <_dtoa_r+0x2e4>)
 80084de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084ea:	f7f8 fb1f 	bl	8000b2c <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d049      	beq.n	8008586 <_dtoa_r+0x216>
 80084f2:	3f01      	subs	r7, #1
 80084f4:	2300      	movs	r3, #0
 80084f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80084f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084fa:	1b9b      	subs	r3, r3, r6
 80084fc:	1e5a      	subs	r2, r3, #1
 80084fe:	bf45      	ittet	mi
 8008500:	f1c3 0301 	rsbmi	r3, r3, #1
 8008504:	9300      	strmi	r3, [sp, #0]
 8008506:	2300      	movpl	r3, #0
 8008508:	2300      	movmi	r3, #0
 800850a:	9206      	str	r2, [sp, #24]
 800850c:	bf54      	ite	pl
 800850e:	9300      	strpl	r3, [sp, #0]
 8008510:	9306      	strmi	r3, [sp, #24]
 8008512:	2f00      	cmp	r7, #0
 8008514:	db39      	blt.n	800858a <_dtoa_r+0x21a>
 8008516:	9b06      	ldr	r3, [sp, #24]
 8008518:	970d      	str	r7, [sp, #52]	@ 0x34
 800851a:	443b      	add	r3, r7
 800851c:	9306      	str	r3, [sp, #24]
 800851e:	2300      	movs	r3, #0
 8008520:	9308      	str	r3, [sp, #32]
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	2b09      	cmp	r3, #9
 8008526:	d863      	bhi.n	80085f0 <_dtoa_r+0x280>
 8008528:	2b05      	cmp	r3, #5
 800852a:	bfc4      	itt	gt
 800852c:	3b04      	subgt	r3, #4
 800852e:	9307      	strgt	r3, [sp, #28]
 8008530:	9b07      	ldr	r3, [sp, #28]
 8008532:	f1a3 0302 	sub.w	r3, r3, #2
 8008536:	bfcc      	ite	gt
 8008538:	2400      	movgt	r4, #0
 800853a:	2401      	movle	r4, #1
 800853c:	2b03      	cmp	r3, #3
 800853e:	d863      	bhi.n	8008608 <_dtoa_r+0x298>
 8008540:	e8df f003 	tbb	[pc, r3]
 8008544:	2b375452 	.word	0x2b375452
 8008548:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800854c:	441e      	add	r6, r3
 800854e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008552:	2b20      	cmp	r3, #32
 8008554:	bfc1      	itttt	gt
 8008556:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800855a:	409f      	lslgt	r7, r3
 800855c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008560:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008564:	bfd6      	itet	le
 8008566:	f1c3 0320 	rsble	r3, r3, #32
 800856a:	ea47 0003 	orrgt.w	r0, r7, r3
 800856e:	fa04 f003 	lslle.w	r0, r4, r3
 8008572:	f7f7 ffef 	bl	8000554 <__aeabi_ui2d>
 8008576:	2201      	movs	r2, #1
 8008578:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800857c:	3e01      	subs	r6, #1
 800857e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008580:	e776      	b.n	8008470 <_dtoa_r+0x100>
 8008582:	2301      	movs	r3, #1
 8008584:	e7b7      	b.n	80084f6 <_dtoa_r+0x186>
 8008586:	9010      	str	r0, [sp, #64]	@ 0x40
 8008588:	e7b6      	b.n	80084f8 <_dtoa_r+0x188>
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	1bdb      	subs	r3, r3, r7
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	427b      	negs	r3, r7
 8008592:	9308      	str	r3, [sp, #32]
 8008594:	2300      	movs	r3, #0
 8008596:	930d      	str	r3, [sp, #52]	@ 0x34
 8008598:	e7c3      	b.n	8008522 <_dtoa_r+0x1b2>
 800859a:	2301      	movs	r3, #1
 800859c:	9309      	str	r3, [sp, #36]	@ 0x24
 800859e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085a0:	eb07 0b03 	add.w	fp, r7, r3
 80085a4:	f10b 0301 	add.w	r3, fp, #1
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	9303      	str	r3, [sp, #12]
 80085ac:	bfb8      	it	lt
 80085ae:	2301      	movlt	r3, #1
 80085b0:	e006      	b.n	80085c0 <_dtoa_r+0x250>
 80085b2:	2301      	movs	r3, #1
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dd28      	ble.n	800860e <_dtoa_r+0x29e>
 80085bc:	469b      	mov	fp, r3
 80085be:	9303      	str	r3, [sp, #12]
 80085c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80085c4:	2100      	movs	r1, #0
 80085c6:	2204      	movs	r2, #4
 80085c8:	f102 0514 	add.w	r5, r2, #20
 80085cc:	429d      	cmp	r5, r3
 80085ce:	d926      	bls.n	800861e <_dtoa_r+0x2ae>
 80085d0:	6041      	str	r1, [r0, #4]
 80085d2:	4648      	mov	r0, r9
 80085d4:	f000 fd9c 	bl	8009110 <_Balloc>
 80085d8:	4682      	mov	sl, r0
 80085da:	2800      	cmp	r0, #0
 80085dc:	d142      	bne.n	8008664 <_dtoa_r+0x2f4>
 80085de:	4b1e      	ldr	r3, [pc, #120]	@ (8008658 <_dtoa_r+0x2e8>)
 80085e0:	4602      	mov	r2, r0
 80085e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80085e6:	e6da      	b.n	800839e <_dtoa_r+0x2e>
 80085e8:	2300      	movs	r3, #0
 80085ea:	e7e3      	b.n	80085b4 <_dtoa_r+0x244>
 80085ec:	2300      	movs	r3, #0
 80085ee:	e7d5      	b.n	800859c <_dtoa_r+0x22c>
 80085f0:	2401      	movs	r4, #1
 80085f2:	2300      	movs	r3, #0
 80085f4:	9307      	str	r3, [sp, #28]
 80085f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80085f8:	f04f 3bff 	mov.w	fp, #4294967295
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8008602:	2312      	movs	r3, #18
 8008604:	920c      	str	r2, [sp, #48]	@ 0x30
 8008606:	e7db      	b.n	80085c0 <_dtoa_r+0x250>
 8008608:	2301      	movs	r3, #1
 800860a:	9309      	str	r3, [sp, #36]	@ 0x24
 800860c:	e7f4      	b.n	80085f8 <_dtoa_r+0x288>
 800860e:	f04f 0b01 	mov.w	fp, #1
 8008612:	f8cd b00c 	str.w	fp, [sp, #12]
 8008616:	465b      	mov	r3, fp
 8008618:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800861c:	e7d0      	b.n	80085c0 <_dtoa_r+0x250>
 800861e:	3101      	adds	r1, #1
 8008620:	0052      	lsls	r2, r2, #1
 8008622:	e7d1      	b.n	80085c8 <_dtoa_r+0x258>
 8008624:	f3af 8000 	nop.w
 8008628:	636f4361 	.word	0x636f4361
 800862c:	3fd287a7 	.word	0x3fd287a7
 8008630:	8b60c8b3 	.word	0x8b60c8b3
 8008634:	3fc68a28 	.word	0x3fc68a28
 8008638:	509f79fb 	.word	0x509f79fb
 800863c:	3fd34413 	.word	0x3fd34413
 8008640:	0800abbd 	.word	0x0800abbd
 8008644:	0800abd4 	.word	0x0800abd4
 8008648:	7ff00000 	.word	0x7ff00000
 800864c:	0800ab8d 	.word	0x0800ab8d
 8008650:	3ff80000 	.word	0x3ff80000
 8008654:	0800ad28 	.word	0x0800ad28
 8008658:	0800ac2c 	.word	0x0800ac2c
 800865c:	0800abb9 	.word	0x0800abb9
 8008660:	0800ab8c 	.word	0x0800ab8c
 8008664:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008668:	6018      	str	r0, [r3, #0]
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	2b0e      	cmp	r3, #14
 800866e:	f200 80a1 	bhi.w	80087b4 <_dtoa_r+0x444>
 8008672:	2c00      	cmp	r4, #0
 8008674:	f000 809e 	beq.w	80087b4 <_dtoa_r+0x444>
 8008678:	2f00      	cmp	r7, #0
 800867a:	dd33      	ble.n	80086e4 <_dtoa_r+0x374>
 800867c:	4b9c      	ldr	r3, [pc, #624]	@ (80088f0 <_dtoa_r+0x580>)
 800867e:	f007 020f 	and.w	r2, r7, #15
 8008682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008686:	ed93 7b00 	vldr	d7, [r3]
 800868a:	05f8      	lsls	r0, r7, #23
 800868c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008690:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008694:	d516      	bpl.n	80086c4 <_dtoa_r+0x354>
 8008696:	4b97      	ldr	r3, [pc, #604]	@ (80088f4 <_dtoa_r+0x584>)
 8008698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800869c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086a0:	f7f8 f8fc 	bl	800089c <__aeabi_ddiv>
 80086a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086a8:	f004 040f 	and.w	r4, r4, #15
 80086ac:	2603      	movs	r6, #3
 80086ae:	4d91      	ldr	r5, [pc, #580]	@ (80088f4 <_dtoa_r+0x584>)
 80086b0:	b954      	cbnz	r4, 80086c8 <_dtoa_r+0x358>
 80086b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ba:	f7f8 f8ef 	bl	800089c <__aeabi_ddiv>
 80086be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086c2:	e028      	b.n	8008716 <_dtoa_r+0x3a6>
 80086c4:	2602      	movs	r6, #2
 80086c6:	e7f2      	b.n	80086ae <_dtoa_r+0x33e>
 80086c8:	07e1      	lsls	r1, r4, #31
 80086ca:	d508      	bpl.n	80086de <_dtoa_r+0x36e>
 80086cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086d4:	f7f7 ffb8 	bl	8000648 <__aeabi_dmul>
 80086d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086dc:	3601      	adds	r6, #1
 80086de:	1064      	asrs	r4, r4, #1
 80086e0:	3508      	adds	r5, #8
 80086e2:	e7e5      	b.n	80086b0 <_dtoa_r+0x340>
 80086e4:	f000 80af 	beq.w	8008846 <_dtoa_r+0x4d6>
 80086e8:	427c      	negs	r4, r7
 80086ea:	4b81      	ldr	r3, [pc, #516]	@ (80088f0 <_dtoa_r+0x580>)
 80086ec:	4d81      	ldr	r5, [pc, #516]	@ (80088f4 <_dtoa_r+0x584>)
 80086ee:	f004 020f 	and.w	r2, r4, #15
 80086f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086fe:	f7f7 ffa3 	bl	8000648 <__aeabi_dmul>
 8008702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008706:	1124      	asrs	r4, r4, #4
 8008708:	2300      	movs	r3, #0
 800870a:	2602      	movs	r6, #2
 800870c:	2c00      	cmp	r4, #0
 800870e:	f040 808f 	bne.w	8008830 <_dtoa_r+0x4c0>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1d3      	bne.n	80086be <_dtoa_r+0x34e>
 8008716:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008718:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 8094 	beq.w	800884a <_dtoa_r+0x4da>
 8008722:	4b75      	ldr	r3, [pc, #468]	@ (80088f8 <_dtoa_r+0x588>)
 8008724:	2200      	movs	r2, #0
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f8 f9ff 	bl	8000b2c <__aeabi_dcmplt>
 800872e:	2800      	cmp	r0, #0
 8008730:	f000 808b 	beq.w	800884a <_dtoa_r+0x4da>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 8087 	beq.w	800884a <_dtoa_r+0x4da>
 800873c:	f1bb 0f00 	cmp.w	fp, #0
 8008740:	dd34      	ble.n	80087ac <_dtoa_r+0x43c>
 8008742:	4620      	mov	r0, r4
 8008744:	4b6d      	ldr	r3, [pc, #436]	@ (80088fc <_dtoa_r+0x58c>)
 8008746:	2200      	movs	r2, #0
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 ff7d 	bl	8000648 <__aeabi_dmul>
 800874e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008752:	f107 38ff 	add.w	r8, r7, #4294967295
 8008756:	3601      	adds	r6, #1
 8008758:	465c      	mov	r4, fp
 800875a:	4630      	mov	r0, r6
 800875c:	f7f7 ff0a 	bl	8000574 <__aeabi_i2d>
 8008760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008764:	f7f7 ff70 	bl	8000648 <__aeabi_dmul>
 8008768:	4b65      	ldr	r3, [pc, #404]	@ (8008900 <_dtoa_r+0x590>)
 800876a:	2200      	movs	r2, #0
 800876c:	f7f7 fdb6 	bl	80002dc <__adddf3>
 8008770:	4605      	mov	r5, r0
 8008772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008776:	2c00      	cmp	r4, #0
 8008778:	d16a      	bne.n	8008850 <_dtoa_r+0x4e0>
 800877a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800877e:	4b61      	ldr	r3, [pc, #388]	@ (8008904 <_dtoa_r+0x594>)
 8008780:	2200      	movs	r2, #0
 8008782:	f7f7 fda9 	bl	80002d8 <__aeabi_dsub>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800878e:	462a      	mov	r2, r5
 8008790:	4633      	mov	r3, r6
 8008792:	f7f8 f9e9 	bl	8000b68 <__aeabi_dcmpgt>
 8008796:	2800      	cmp	r0, #0
 8008798:	f040 8298 	bne.w	8008ccc <_dtoa_r+0x95c>
 800879c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a0:	462a      	mov	r2, r5
 80087a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087a6:	f7f8 f9c1 	bl	8000b2c <__aeabi_dcmplt>
 80087aa:	bb38      	cbnz	r0, 80087fc <_dtoa_r+0x48c>
 80087ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80087b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80087b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f2c0 8157 	blt.w	8008a6a <_dtoa_r+0x6fa>
 80087bc:	2f0e      	cmp	r7, #14
 80087be:	f300 8154 	bgt.w	8008a6a <_dtoa_r+0x6fa>
 80087c2:	4b4b      	ldr	r3, [pc, #300]	@ (80088f0 <_dtoa_r+0x580>)
 80087c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087c8:	ed93 7b00 	vldr	d7, [r3]
 80087cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	ed8d 7b00 	vstr	d7, [sp]
 80087d4:	f280 80e5 	bge.w	80089a2 <_dtoa_r+0x632>
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f300 80e1 	bgt.w	80089a2 <_dtoa_r+0x632>
 80087e0:	d10c      	bne.n	80087fc <_dtoa_r+0x48c>
 80087e2:	4b48      	ldr	r3, [pc, #288]	@ (8008904 <_dtoa_r+0x594>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	ec51 0b17 	vmov	r0, r1, d7
 80087ea:	f7f7 ff2d 	bl	8000648 <__aeabi_dmul>
 80087ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f2:	f7f8 f9af 	bl	8000b54 <__aeabi_dcmpge>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f000 8266 	beq.w	8008cc8 <_dtoa_r+0x958>
 80087fc:	2400      	movs	r4, #0
 80087fe:	4625      	mov	r5, r4
 8008800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008802:	4656      	mov	r6, sl
 8008804:	ea6f 0803 	mvn.w	r8, r3
 8008808:	2700      	movs	r7, #0
 800880a:	4621      	mov	r1, r4
 800880c:	4648      	mov	r0, r9
 800880e:	f000 fcbf 	bl	8009190 <_Bfree>
 8008812:	2d00      	cmp	r5, #0
 8008814:	f000 80bd 	beq.w	8008992 <_dtoa_r+0x622>
 8008818:	b12f      	cbz	r7, 8008826 <_dtoa_r+0x4b6>
 800881a:	42af      	cmp	r7, r5
 800881c:	d003      	beq.n	8008826 <_dtoa_r+0x4b6>
 800881e:	4639      	mov	r1, r7
 8008820:	4648      	mov	r0, r9
 8008822:	f000 fcb5 	bl	8009190 <_Bfree>
 8008826:	4629      	mov	r1, r5
 8008828:	4648      	mov	r0, r9
 800882a:	f000 fcb1 	bl	8009190 <_Bfree>
 800882e:	e0b0      	b.n	8008992 <_dtoa_r+0x622>
 8008830:	07e2      	lsls	r2, r4, #31
 8008832:	d505      	bpl.n	8008840 <_dtoa_r+0x4d0>
 8008834:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008838:	f7f7 ff06 	bl	8000648 <__aeabi_dmul>
 800883c:	3601      	adds	r6, #1
 800883e:	2301      	movs	r3, #1
 8008840:	1064      	asrs	r4, r4, #1
 8008842:	3508      	adds	r5, #8
 8008844:	e762      	b.n	800870c <_dtoa_r+0x39c>
 8008846:	2602      	movs	r6, #2
 8008848:	e765      	b.n	8008716 <_dtoa_r+0x3a6>
 800884a:	9c03      	ldr	r4, [sp, #12]
 800884c:	46b8      	mov	r8, r7
 800884e:	e784      	b.n	800875a <_dtoa_r+0x3ea>
 8008850:	4b27      	ldr	r3, [pc, #156]	@ (80088f0 <_dtoa_r+0x580>)
 8008852:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008854:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008858:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800885c:	4454      	add	r4, sl
 800885e:	2900      	cmp	r1, #0
 8008860:	d054      	beq.n	800890c <_dtoa_r+0x59c>
 8008862:	4929      	ldr	r1, [pc, #164]	@ (8008908 <_dtoa_r+0x598>)
 8008864:	2000      	movs	r0, #0
 8008866:	f7f8 f819 	bl	800089c <__aeabi_ddiv>
 800886a:	4633      	mov	r3, r6
 800886c:	462a      	mov	r2, r5
 800886e:	f7f7 fd33 	bl	80002d8 <__aeabi_dsub>
 8008872:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008876:	4656      	mov	r6, sl
 8008878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800887c:	f7f8 f994 	bl	8000ba8 <__aeabi_d2iz>
 8008880:	4605      	mov	r5, r0
 8008882:	f7f7 fe77 	bl	8000574 <__aeabi_i2d>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800888e:	f7f7 fd23 	bl	80002d8 <__aeabi_dsub>
 8008892:	3530      	adds	r5, #48	@ 0x30
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800889c:	f806 5b01 	strb.w	r5, [r6], #1
 80088a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088a4:	f7f8 f942 	bl	8000b2c <__aeabi_dcmplt>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d172      	bne.n	8008992 <_dtoa_r+0x622>
 80088ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b0:	4911      	ldr	r1, [pc, #68]	@ (80088f8 <_dtoa_r+0x588>)
 80088b2:	2000      	movs	r0, #0
 80088b4:	f7f7 fd10 	bl	80002d8 <__aeabi_dsub>
 80088b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088bc:	f7f8 f936 	bl	8000b2c <__aeabi_dcmplt>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	f040 80b4 	bne.w	8008a2e <_dtoa_r+0x6be>
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	f43f af70 	beq.w	80087ac <_dtoa_r+0x43c>
 80088cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088d0:	4b0a      	ldr	r3, [pc, #40]	@ (80088fc <_dtoa_r+0x58c>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	f7f7 feb8 	bl	8000648 <__aeabi_dmul>
 80088d8:	4b08      	ldr	r3, [pc, #32]	@ (80088fc <_dtoa_r+0x58c>)
 80088da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088de:	2200      	movs	r2, #0
 80088e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088e4:	f7f7 feb0 	bl	8000648 <__aeabi_dmul>
 80088e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088ec:	e7c4      	b.n	8008878 <_dtoa_r+0x508>
 80088ee:	bf00      	nop
 80088f0:	0800ad28 	.word	0x0800ad28
 80088f4:	0800ad00 	.word	0x0800ad00
 80088f8:	3ff00000 	.word	0x3ff00000
 80088fc:	40240000 	.word	0x40240000
 8008900:	401c0000 	.word	0x401c0000
 8008904:	40140000 	.word	0x40140000
 8008908:	3fe00000 	.word	0x3fe00000
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	f7f7 fe9a 	bl	8000648 <__aeabi_dmul>
 8008914:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008918:	9413      	str	r4, [sp, #76]	@ 0x4c
 800891a:	4656      	mov	r6, sl
 800891c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008920:	f7f8 f942 	bl	8000ba8 <__aeabi_d2iz>
 8008924:	4605      	mov	r5, r0
 8008926:	f7f7 fe25 	bl	8000574 <__aeabi_i2d>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008932:	f7f7 fcd1 	bl	80002d8 <__aeabi_dsub>
 8008936:	3530      	adds	r5, #48	@ 0x30
 8008938:	f806 5b01 	strb.w	r5, [r6], #1
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	42a6      	cmp	r6, r4
 8008942:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	d124      	bne.n	8008996 <_dtoa_r+0x626>
 800894c:	4baf      	ldr	r3, [pc, #700]	@ (8008c0c <_dtoa_r+0x89c>)
 800894e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008952:	f7f7 fcc3 	bl	80002dc <__adddf3>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800895e:	f7f8 f903 	bl	8000b68 <__aeabi_dcmpgt>
 8008962:	2800      	cmp	r0, #0
 8008964:	d163      	bne.n	8008a2e <_dtoa_r+0x6be>
 8008966:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800896a:	49a8      	ldr	r1, [pc, #672]	@ (8008c0c <_dtoa_r+0x89c>)
 800896c:	2000      	movs	r0, #0
 800896e:	f7f7 fcb3 	bl	80002d8 <__aeabi_dsub>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800897a:	f7f8 f8d7 	bl	8000b2c <__aeabi_dcmplt>
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f af14 	beq.w	80087ac <_dtoa_r+0x43c>
 8008984:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008986:	1e73      	subs	r3, r6, #1
 8008988:	9313      	str	r3, [sp, #76]	@ 0x4c
 800898a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800898e:	2b30      	cmp	r3, #48	@ 0x30
 8008990:	d0f8      	beq.n	8008984 <_dtoa_r+0x614>
 8008992:	4647      	mov	r7, r8
 8008994:	e03b      	b.n	8008a0e <_dtoa_r+0x69e>
 8008996:	4b9e      	ldr	r3, [pc, #632]	@ (8008c10 <_dtoa_r+0x8a0>)
 8008998:	f7f7 fe56 	bl	8000648 <__aeabi_dmul>
 800899c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089a0:	e7bc      	b.n	800891c <_dtoa_r+0x5ac>
 80089a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80089a6:	4656      	mov	r6, sl
 80089a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f7 ff74 	bl	800089c <__aeabi_ddiv>
 80089b4:	f7f8 f8f8 	bl	8000ba8 <__aeabi_d2iz>
 80089b8:	4680      	mov	r8, r0
 80089ba:	f7f7 fddb 	bl	8000574 <__aeabi_i2d>
 80089be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c2:	f7f7 fe41 	bl	8000648 <__aeabi_dmul>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4620      	mov	r0, r4
 80089cc:	4629      	mov	r1, r5
 80089ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089d2:	f7f7 fc81 	bl	80002d8 <__aeabi_dsub>
 80089d6:	f806 4b01 	strb.w	r4, [r6], #1
 80089da:	9d03      	ldr	r5, [sp, #12]
 80089dc:	eba6 040a 	sub.w	r4, r6, sl
 80089e0:	42a5      	cmp	r5, r4
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	d133      	bne.n	8008a50 <_dtoa_r+0x6e0>
 80089e8:	f7f7 fc78 	bl	80002dc <__adddf3>
 80089ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089f0:	4604      	mov	r4, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	f7f8 f8b8 	bl	8000b68 <__aeabi_dcmpgt>
 80089f8:	b9c0      	cbnz	r0, 8008a2c <_dtoa_r+0x6bc>
 80089fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089fe:	4620      	mov	r0, r4
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7f8 f889 	bl	8000b18 <__aeabi_dcmpeq>
 8008a06:	b110      	cbz	r0, 8008a0e <_dtoa_r+0x69e>
 8008a08:	f018 0f01 	tst.w	r8, #1
 8008a0c:	d10e      	bne.n	8008a2c <_dtoa_r+0x6bc>
 8008a0e:	9902      	ldr	r1, [sp, #8]
 8008a10:	4648      	mov	r0, r9
 8008a12:	f000 fbbd 	bl	8009190 <_Bfree>
 8008a16:	2300      	movs	r3, #0
 8008a18:	7033      	strb	r3, [r6, #0]
 8008a1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a1c:	3701      	adds	r7, #1
 8008a1e:	601f      	str	r7, [r3, #0]
 8008a20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 824b 	beq.w	8008ebe <_dtoa_r+0xb4e>
 8008a28:	601e      	str	r6, [r3, #0]
 8008a2a:	e248      	b.n	8008ebe <_dtoa_r+0xb4e>
 8008a2c:	46b8      	mov	r8, r7
 8008a2e:	4633      	mov	r3, r6
 8008a30:	461e      	mov	r6, r3
 8008a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a36:	2a39      	cmp	r2, #57	@ 0x39
 8008a38:	d106      	bne.n	8008a48 <_dtoa_r+0x6d8>
 8008a3a:	459a      	cmp	sl, r3
 8008a3c:	d1f8      	bne.n	8008a30 <_dtoa_r+0x6c0>
 8008a3e:	2230      	movs	r2, #48	@ 0x30
 8008a40:	f108 0801 	add.w	r8, r8, #1
 8008a44:	f88a 2000 	strb.w	r2, [sl]
 8008a48:	781a      	ldrb	r2, [r3, #0]
 8008a4a:	3201      	adds	r2, #1
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	e7a0      	b.n	8008992 <_dtoa_r+0x622>
 8008a50:	4b6f      	ldr	r3, [pc, #444]	@ (8008c10 <_dtoa_r+0x8a0>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	f7f7 fdf8 	bl	8000648 <__aeabi_dmul>
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	460d      	mov	r5, r1
 8008a60:	f7f8 f85a 	bl	8000b18 <__aeabi_dcmpeq>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d09f      	beq.n	80089a8 <_dtoa_r+0x638>
 8008a68:	e7d1      	b.n	8008a0e <_dtoa_r+0x69e>
 8008a6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f000 80ea 	beq.w	8008c46 <_dtoa_r+0x8d6>
 8008a72:	9a07      	ldr	r2, [sp, #28]
 8008a74:	2a01      	cmp	r2, #1
 8008a76:	f300 80cd 	bgt.w	8008c14 <_dtoa_r+0x8a4>
 8008a7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	f000 80c1 	beq.w	8008c04 <_dtoa_r+0x894>
 8008a82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a86:	9c08      	ldr	r4, [sp, #32]
 8008a88:	9e00      	ldr	r6, [sp, #0]
 8008a8a:	9a00      	ldr	r2, [sp, #0]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	9200      	str	r2, [sp, #0]
 8008a90:	9a06      	ldr	r2, [sp, #24]
 8008a92:	2101      	movs	r1, #1
 8008a94:	441a      	add	r2, r3
 8008a96:	4648      	mov	r0, r9
 8008a98:	9206      	str	r2, [sp, #24]
 8008a9a:	f000 fc2d 	bl	80092f8 <__i2b>
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	b166      	cbz	r6, 8008abc <_dtoa_r+0x74c>
 8008aa2:	9b06      	ldr	r3, [sp, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dd09      	ble.n	8008abc <_dtoa_r+0x74c>
 8008aa8:	42b3      	cmp	r3, r6
 8008aaa:	9a00      	ldr	r2, [sp, #0]
 8008aac:	bfa8      	it	ge
 8008aae:	4633      	movge	r3, r6
 8008ab0:	1ad2      	subs	r2, r2, r3
 8008ab2:	9200      	str	r2, [sp, #0]
 8008ab4:	9a06      	ldr	r2, [sp, #24]
 8008ab6:	1af6      	subs	r6, r6, r3
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	9306      	str	r3, [sp, #24]
 8008abc:	9b08      	ldr	r3, [sp, #32]
 8008abe:	b30b      	cbz	r3, 8008b04 <_dtoa_r+0x794>
 8008ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 80c6 	beq.w	8008c54 <_dtoa_r+0x8e4>
 8008ac8:	2c00      	cmp	r4, #0
 8008aca:	f000 80c0 	beq.w	8008c4e <_dtoa_r+0x8de>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	4648      	mov	r0, r9
 8008ad4:	f000 fcc8 	bl	8009468 <__pow5mult>
 8008ad8:	9a02      	ldr	r2, [sp, #8]
 8008ada:	4601      	mov	r1, r0
 8008adc:	4605      	mov	r5, r0
 8008ade:	4648      	mov	r0, r9
 8008ae0:	f000 fc20 	bl	8009324 <__multiply>
 8008ae4:	9902      	ldr	r1, [sp, #8]
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4648      	mov	r0, r9
 8008aea:	f000 fb51 	bl	8009190 <_Bfree>
 8008aee:	9b08      	ldr	r3, [sp, #32]
 8008af0:	1b1b      	subs	r3, r3, r4
 8008af2:	9308      	str	r3, [sp, #32]
 8008af4:	f000 80b1 	beq.w	8008c5a <_dtoa_r+0x8ea>
 8008af8:	9a08      	ldr	r2, [sp, #32]
 8008afa:	4641      	mov	r1, r8
 8008afc:	4648      	mov	r0, r9
 8008afe:	f000 fcb3 	bl	8009468 <__pow5mult>
 8008b02:	9002      	str	r0, [sp, #8]
 8008b04:	2101      	movs	r1, #1
 8008b06:	4648      	mov	r0, r9
 8008b08:	f000 fbf6 	bl	80092f8 <__i2b>
 8008b0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b0e:	4604      	mov	r4, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 81d8 	beq.w	8008ec6 <_dtoa_r+0xb56>
 8008b16:	461a      	mov	r2, r3
 8008b18:	4601      	mov	r1, r0
 8008b1a:	4648      	mov	r0, r9
 8008b1c:	f000 fca4 	bl	8009468 <__pow5mult>
 8008b20:	9b07      	ldr	r3, [sp, #28]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	4604      	mov	r4, r0
 8008b26:	f300 809f 	bgt.w	8008c68 <_dtoa_r+0x8f8>
 8008b2a:	9b04      	ldr	r3, [sp, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 8097 	bne.w	8008c60 <_dtoa_r+0x8f0>
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 8093 	bne.w	8008c64 <_dtoa_r+0x8f4>
 8008b3e:	9b05      	ldr	r3, [sp, #20]
 8008b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b44:	0d1b      	lsrs	r3, r3, #20
 8008b46:	051b      	lsls	r3, r3, #20
 8008b48:	b133      	cbz	r3, 8008b58 <_dtoa_r+0x7e8>
 8008b4a:	9b00      	ldr	r3, [sp, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	9b06      	ldr	r3, [sp, #24]
 8008b52:	3301      	adds	r3, #1
 8008b54:	9306      	str	r3, [sp, #24]
 8008b56:	2301      	movs	r3, #1
 8008b58:	9308      	str	r3, [sp, #32]
 8008b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 81b8 	beq.w	8008ed2 <_dtoa_r+0xb62>
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b68:	6918      	ldr	r0, [r3, #16]
 8008b6a:	f000 fb79 	bl	8009260 <__hi0bits>
 8008b6e:	f1c0 0020 	rsb	r0, r0, #32
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	4418      	add	r0, r3
 8008b76:	f010 001f 	ands.w	r0, r0, #31
 8008b7a:	f000 8082 	beq.w	8008c82 <_dtoa_r+0x912>
 8008b7e:	f1c0 0320 	rsb	r3, r0, #32
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	dd73      	ble.n	8008c6e <_dtoa_r+0x8fe>
 8008b86:	9b00      	ldr	r3, [sp, #0]
 8008b88:	f1c0 001c 	rsb	r0, r0, #28
 8008b8c:	4403      	add	r3, r0
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	9b06      	ldr	r3, [sp, #24]
 8008b92:	4403      	add	r3, r0
 8008b94:	4406      	add	r6, r0
 8008b96:	9306      	str	r3, [sp, #24]
 8008b98:	9b00      	ldr	r3, [sp, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dd05      	ble.n	8008baa <_dtoa_r+0x83a>
 8008b9e:	9902      	ldr	r1, [sp, #8]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4648      	mov	r0, r9
 8008ba4:	f000 fcba 	bl	800951c <__lshift>
 8008ba8:	9002      	str	r0, [sp, #8]
 8008baa:	9b06      	ldr	r3, [sp, #24]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dd05      	ble.n	8008bbc <_dtoa_r+0x84c>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4648      	mov	r0, r9
 8008bb6:	f000 fcb1 	bl	800951c <__lshift>
 8008bba:	4604      	mov	r4, r0
 8008bbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d061      	beq.n	8008c86 <_dtoa_r+0x916>
 8008bc2:	9802      	ldr	r0, [sp, #8]
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f000 fd15 	bl	80095f4 <__mcmp>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	da5b      	bge.n	8008c86 <_dtoa_r+0x916>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9902      	ldr	r1, [sp, #8]
 8008bd2:	220a      	movs	r2, #10
 8008bd4:	4648      	mov	r0, r9
 8008bd6:	f000 fafd 	bl	80091d4 <__multadd>
 8008bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bdc:	9002      	str	r0, [sp, #8]
 8008bde:	f107 38ff 	add.w	r8, r7, #4294967295
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 8177 	beq.w	8008ed6 <_dtoa_r+0xb66>
 8008be8:	4629      	mov	r1, r5
 8008bea:	2300      	movs	r3, #0
 8008bec:	220a      	movs	r2, #10
 8008bee:	4648      	mov	r0, r9
 8008bf0:	f000 faf0 	bl	80091d4 <__multadd>
 8008bf4:	f1bb 0f00 	cmp.w	fp, #0
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	dc6f      	bgt.n	8008cdc <_dtoa_r+0x96c>
 8008bfc:	9b07      	ldr	r3, [sp, #28]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	dc49      	bgt.n	8008c96 <_dtoa_r+0x926>
 8008c02:	e06b      	b.n	8008cdc <_dtoa_r+0x96c>
 8008c04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c0a:	e73c      	b.n	8008a86 <_dtoa_r+0x716>
 8008c0c:	3fe00000 	.word	0x3fe00000
 8008c10:	40240000 	.word	0x40240000
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	1e5c      	subs	r4, r3, #1
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	db09      	blt.n	8008c32 <_dtoa_r+0x8c2>
 8008c1e:	1b1c      	subs	r4, r3, r4
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f6bf af30 	bge.w	8008a88 <_dtoa_r+0x718>
 8008c28:	9b00      	ldr	r3, [sp, #0]
 8008c2a:	9a03      	ldr	r2, [sp, #12]
 8008c2c:	1a9e      	subs	r6, r3, r2
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e72b      	b.n	8008a8a <_dtoa_r+0x71a>
 8008c32:	9b08      	ldr	r3, [sp, #32]
 8008c34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c36:	9408      	str	r4, [sp, #32]
 8008c38:	1ae3      	subs	r3, r4, r3
 8008c3a:	441a      	add	r2, r3
 8008c3c:	9e00      	ldr	r6, [sp, #0]
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	920d      	str	r2, [sp, #52]	@ 0x34
 8008c42:	2400      	movs	r4, #0
 8008c44:	e721      	b.n	8008a8a <_dtoa_r+0x71a>
 8008c46:	9c08      	ldr	r4, [sp, #32]
 8008c48:	9e00      	ldr	r6, [sp, #0]
 8008c4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008c4c:	e728      	b.n	8008aa0 <_dtoa_r+0x730>
 8008c4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008c52:	e751      	b.n	8008af8 <_dtoa_r+0x788>
 8008c54:	9a08      	ldr	r2, [sp, #32]
 8008c56:	9902      	ldr	r1, [sp, #8]
 8008c58:	e750      	b.n	8008afc <_dtoa_r+0x78c>
 8008c5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c5e:	e751      	b.n	8008b04 <_dtoa_r+0x794>
 8008c60:	2300      	movs	r3, #0
 8008c62:	e779      	b.n	8008b58 <_dtoa_r+0x7e8>
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	e777      	b.n	8008b58 <_dtoa_r+0x7e8>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9308      	str	r3, [sp, #32]
 8008c6c:	e779      	b.n	8008b62 <_dtoa_r+0x7f2>
 8008c6e:	d093      	beq.n	8008b98 <_dtoa_r+0x828>
 8008c70:	9a00      	ldr	r2, [sp, #0]
 8008c72:	331c      	adds	r3, #28
 8008c74:	441a      	add	r2, r3
 8008c76:	9200      	str	r2, [sp, #0]
 8008c78:	9a06      	ldr	r2, [sp, #24]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	441e      	add	r6, r3
 8008c7e:	9206      	str	r2, [sp, #24]
 8008c80:	e78a      	b.n	8008b98 <_dtoa_r+0x828>
 8008c82:	4603      	mov	r3, r0
 8008c84:	e7f4      	b.n	8008c70 <_dtoa_r+0x900>
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	46b8      	mov	r8, r7
 8008c8c:	dc20      	bgt.n	8008cd0 <_dtoa_r+0x960>
 8008c8e:	469b      	mov	fp, r3
 8008c90:	9b07      	ldr	r3, [sp, #28]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	dd1e      	ble.n	8008cd4 <_dtoa_r+0x964>
 8008c96:	f1bb 0f00 	cmp.w	fp, #0
 8008c9a:	f47f adb1 	bne.w	8008800 <_dtoa_r+0x490>
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	465b      	mov	r3, fp
 8008ca2:	2205      	movs	r2, #5
 8008ca4:	4648      	mov	r0, r9
 8008ca6:	f000 fa95 	bl	80091d4 <__multadd>
 8008caa:	4601      	mov	r1, r0
 8008cac:	4604      	mov	r4, r0
 8008cae:	9802      	ldr	r0, [sp, #8]
 8008cb0:	f000 fca0 	bl	80095f4 <__mcmp>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f77f ada3 	ble.w	8008800 <_dtoa_r+0x490>
 8008cba:	4656      	mov	r6, sl
 8008cbc:	2331      	movs	r3, #49	@ 0x31
 8008cbe:	f806 3b01 	strb.w	r3, [r6], #1
 8008cc2:	f108 0801 	add.w	r8, r8, #1
 8008cc6:	e59f      	b.n	8008808 <_dtoa_r+0x498>
 8008cc8:	9c03      	ldr	r4, [sp, #12]
 8008cca:	46b8      	mov	r8, r7
 8008ccc:	4625      	mov	r5, r4
 8008cce:	e7f4      	b.n	8008cba <_dtoa_r+0x94a>
 8008cd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 8101 	beq.w	8008ede <_dtoa_r+0xb6e>
 8008cdc:	2e00      	cmp	r6, #0
 8008cde:	dd05      	ble.n	8008cec <_dtoa_r+0x97c>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4632      	mov	r2, r6
 8008ce4:	4648      	mov	r0, r9
 8008ce6:	f000 fc19 	bl	800951c <__lshift>
 8008cea:	4605      	mov	r5, r0
 8008cec:	9b08      	ldr	r3, [sp, #32]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d05c      	beq.n	8008dac <_dtoa_r+0xa3c>
 8008cf2:	6869      	ldr	r1, [r5, #4]
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	f000 fa0b 	bl	8009110 <_Balloc>
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	b928      	cbnz	r0, 8008d0a <_dtoa_r+0x99a>
 8008cfe:	4b82      	ldr	r3, [pc, #520]	@ (8008f08 <_dtoa_r+0xb98>)
 8008d00:	4602      	mov	r2, r0
 8008d02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d06:	f7ff bb4a 	b.w	800839e <_dtoa_r+0x2e>
 8008d0a:	692a      	ldr	r2, [r5, #16]
 8008d0c:	3202      	adds	r2, #2
 8008d0e:	0092      	lsls	r2, r2, #2
 8008d10:	f105 010c 	add.w	r1, r5, #12
 8008d14:	300c      	adds	r0, #12
 8008d16:	f001 f969 	bl	8009fec <memcpy>
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4648      	mov	r0, r9
 8008d20:	f000 fbfc 	bl	800951c <__lshift>
 8008d24:	f10a 0301 	add.w	r3, sl, #1
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	eb0a 030b 	add.w	r3, sl, fp
 8008d2e:	9308      	str	r3, [sp, #32]
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	462f      	mov	r7, r5
 8008d38:	9306      	str	r3, [sp, #24]
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	9802      	ldr	r0, [sp, #8]
 8008d40:	4621      	mov	r1, r4
 8008d42:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d46:	f7ff fa8a 	bl	800825e <quorem>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	3330      	adds	r3, #48	@ 0x30
 8008d4e:	9003      	str	r0, [sp, #12]
 8008d50:	4639      	mov	r1, r7
 8008d52:	9802      	ldr	r0, [sp, #8]
 8008d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d56:	f000 fc4d 	bl	80095f4 <__mcmp>
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	9004      	str	r0, [sp, #16]
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4648      	mov	r0, r9
 8008d62:	f000 fc63 	bl	800962c <__mdiff>
 8008d66:	68c2      	ldr	r2, [r0, #12]
 8008d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	bb02      	cbnz	r2, 8008db0 <_dtoa_r+0xa40>
 8008d6e:	4601      	mov	r1, r0
 8008d70:	9802      	ldr	r0, [sp, #8]
 8008d72:	f000 fc3f 	bl	80095f4 <__mcmp>
 8008d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d78:	4602      	mov	r2, r0
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4648      	mov	r0, r9
 8008d7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d82:	f000 fa05 	bl	8009190 <_Bfree>
 8008d86:	9b07      	ldr	r3, [sp, #28]
 8008d88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d8a:	9e00      	ldr	r6, [sp, #0]
 8008d8c:	ea42 0103 	orr.w	r1, r2, r3
 8008d90:	9b06      	ldr	r3, [sp, #24]
 8008d92:	4319      	orrs	r1, r3
 8008d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d96:	d10d      	bne.n	8008db4 <_dtoa_r+0xa44>
 8008d98:	2b39      	cmp	r3, #57	@ 0x39
 8008d9a:	d027      	beq.n	8008dec <_dtoa_r+0xa7c>
 8008d9c:	9a04      	ldr	r2, [sp, #16]
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	dd01      	ble.n	8008da6 <_dtoa_r+0xa36>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	3331      	adds	r3, #49	@ 0x31
 8008da6:	f88b 3000 	strb.w	r3, [fp]
 8008daa:	e52e      	b.n	800880a <_dtoa_r+0x49a>
 8008dac:	4628      	mov	r0, r5
 8008dae:	e7b9      	b.n	8008d24 <_dtoa_r+0x9b4>
 8008db0:	2201      	movs	r2, #1
 8008db2:	e7e2      	b.n	8008d7a <_dtoa_r+0xa0a>
 8008db4:	9904      	ldr	r1, [sp, #16]
 8008db6:	2900      	cmp	r1, #0
 8008db8:	db04      	blt.n	8008dc4 <_dtoa_r+0xa54>
 8008dba:	9807      	ldr	r0, [sp, #28]
 8008dbc:	4301      	orrs	r1, r0
 8008dbe:	9806      	ldr	r0, [sp, #24]
 8008dc0:	4301      	orrs	r1, r0
 8008dc2:	d120      	bne.n	8008e06 <_dtoa_r+0xa96>
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	ddee      	ble.n	8008da6 <_dtoa_r+0xa36>
 8008dc8:	9902      	ldr	r1, [sp, #8]
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	4648      	mov	r0, r9
 8008dd0:	f000 fba4 	bl	800951c <__lshift>
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	9002      	str	r0, [sp, #8]
 8008dd8:	f000 fc0c 	bl	80095f4 <__mcmp>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	9b00      	ldr	r3, [sp, #0]
 8008de0:	dc02      	bgt.n	8008de8 <_dtoa_r+0xa78>
 8008de2:	d1e0      	bne.n	8008da6 <_dtoa_r+0xa36>
 8008de4:	07da      	lsls	r2, r3, #31
 8008de6:	d5de      	bpl.n	8008da6 <_dtoa_r+0xa36>
 8008de8:	2b39      	cmp	r3, #57	@ 0x39
 8008dea:	d1da      	bne.n	8008da2 <_dtoa_r+0xa32>
 8008dec:	2339      	movs	r3, #57	@ 0x39
 8008dee:	f88b 3000 	strb.w	r3, [fp]
 8008df2:	4633      	mov	r3, r6
 8008df4:	461e      	mov	r6, r3
 8008df6:	3b01      	subs	r3, #1
 8008df8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008dfc:	2a39      	cmp	r2, #57	@ 0x39
 8008dfe:	d04e      	beq.n	8008e9e <_dtoa_r+0xb2e>
 8008e00:	3201      	adds	r2, #1
 8008e02:	701a      	strb	r2, [r3, #0]
 8008e04:	e501      	b.n	800880a <_dtoa_r+0x49a>
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	dd03      	ble.n	8008e12 <_dtoa_r+0xaa2>
 8008e0a:	2b39      	cmp	r3, #57	@ 0x39
 8008e0c:	d0ee      	beq.n	8008dec <_dtoa_r+0xa7c>
 8008e0e:	3301      	adds	r3, #1
 8008e10:	e7c9      	b.n	8008da6 <_dtoa_r+0xa36>
 8008e12:	9a00      	ldr	r2, [sp, #0]
 8008e14:	9908      	ldr	r1, [sp, #32]
 8008e16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e1a:	428a      	cmp	r2, r1
 8008e1c:	d028      	beq.n	8008e70 <_dtoa_r+0xb00>
 8008e1e:	9902      	ldr	r1, [sp, #8]
 8008e20:	2300      	movs	r3, #0
 8008e22:	220a      	movs	r2, #10
 8008e24:	4648      	mov	r0, r9
 8008e26:	f000 f9d5 	bl	80091d4 <__multadd>
 8008e2a:	42af      	cmp	r7, r5
 8008e2c:	9002      	str	r0, [sp, #8]
 8008e2e:	f04f 0300 	mov.w	r3, #0
 8008e32:	f04f 020a 	mov.w	r2, #10
 8008e36:	4639      	mov	r1, r7
 8008e38:	4648      	mov	r0, r9
 8008e3a:	d107      	bne.n	8008e4c <_dtoa_r+0xadc>
 8008e3c:	f000 f9ca 	bl	80091d4 <__multadd>
 8008e40:	4607      	mov	r7, r0
 8008e42:	4605      	mov	r5, r0
 8008e44:	9b00      	ldr	r3, [sp, #0]
 8008e46:	3301      	adds	r3, #1
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	e777      	b.n	8008d3c <_dtoa_r+0x9cc>
 8008e4c:	f000 f9c2 	bl	80091d4 <__multadd>
 8008e50:	4629      	mov	r1, r5
 8008e52:	4607      	mov	r7, r0
 8008e54:	2300      	movs	r3, #0
 8008e56:	220a      	movs	r2, #10
 8008e58:	4648      	mov	r0, r9
 8008e5a:	f000 f9bb 	bl	80091d4 <__multadd>
 8008e5e:	4605      	mov	r5, r0
 8008e60:	e7f0      	b.n	8008e44 <_dtoa_r+0xad4>
 8008e62:	f1bb 0f00 	cmp.w	fp, #0
 8008e66:	bfcc      	ite	gt
 8008e68:	465e      	movgt	r6, fp
 8008e6a:	2601      	movle	r6, #1
 8008e6c:	4456      	add	r6, sl
 8008e6e:	2700      	movs	r7, #0
 8008e70:	9902      	ldr	r1, [sp, #8]
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	2201      	movs	r2, #1
 8008e76:	4648      	mov	r0, r9
 8008e78:	f000 fb50 	bl	800951c <__lshift>
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	9002      	str	r0, [sp, #8]
 8008e80:	f000 fbb8 	bl	80095f4 <__mcmp>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	dcb4      	bgt.n	8008df2 <_dtoa_r+0xa82>
 8008e88:	d102      	bne.n	8008e90 <_dtoa_r+0xb20>
 8008e8a:	9b00      	ldr	r3, [sp, #0]
 8008e8c:	07db      	lsls	r3, r3, #31
 8008e8e:	d4b0      	bmi.n	8008df2 <_dtoa_r+0xa82>
 8008e90:	4633      	mov	r3, r6
 8008e92:	461e      	mov	r6, r3
 8008e94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e98:	2a30      	cmp	r2, #48	@ 0x30
 8008e9a:	d0fa      	beq.n	8008e92 <_dtoa_r+0xb22>
 8008e9c:	e4b5      	b.n	800880a <_dtoa_r+0x49a>
 8008e9e:	459a      	cmp	sl, r3
 8008ea0:	d1a8      	bne.n	8008df4 <_dtoa_r+0xa84>
 8008ea2:	2331      	movs	r3, #49	@ 0x31
 8008ea4:	f108 0801 	add.w	r8, r8, #1
 8008ea8:	f88a 3000 	strb.w	r3, [sl]
 8008eac:	e4ad      	b.n	800880a <_dtoa_r+0x49a>
 8008eae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008eb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008f0c <_dtoa_r+0xb9c>
 8008eb4:	b11b      	cbz	r3, 8008ebe <_dtoa_r+0xb4e>
 8008eb6:	f10a 0308 	add.w	r3, sl, #8
 8008eba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	b017      	add	sp, #92	@ 0x5c
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	9b07      	ldr	r3, [sp, #28]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	f77f ae2e 	ble.w	8008b2a <_dtoa_r+0x7ba>
 8008ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ed0:	9308      	str	r3, [sp, #32]
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	e64d      	b.n	8008b72 <_dtoa_r+0x802>
 8008ed6:	f1bb 0f00 	cmp.w	fp, #0
 8008eda:	f77f aed9 	ble.w	8008c90 <_dtoa_r+0x920>
 8008ede:	4656      	mov	r6, sl
 8008ee0:	9802      	ldr	r0, [sp, #8]
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	f7ff f9bb 	bl	800825e <quorem>
 8008ee8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008eec:	f806 3b01 	strb.w	r3, [r6], #1
 8008ef0:	eba6 020a 	sub.w	r2, r6, sl
 8008ef4:	4593      	cmp	fp, r2
 8008ef6:	ddb4      	ble.n	8008e62 <_dtoa_r+0xaf2>
 8008ef8:	9902      	ldr	r1, [sp, #8]
 8008efa:	2300      	movs	r3, #0
 8008efc:	220a      	movs	r2, #10
 8008efe:	4648      	mov	r0, r9
 8008f00:	f000 f968 	bl	80091d4 <__multadd>
 8008f04:	9002      	str	r0, [sp, #8]
 8008f06:	e7eb      	b.n	8008ee0 <_dtoa_r+0xb70>
 8008f08:	0800ac2c 	.word	0x0800ac2c
 8008f0c:	0800abb0 	.word	0x0800abb0

08008f10 <_free_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4605      	mov	r5, r0
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d041      	beq.n	8008f9c <_free_r+0x8c>
 8008f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1c:	1f0c      	subs	r4, r1, #4
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bfb8      	it	lt
 8008f22:	18e4      	addlt	r4, r4, r3
 8008f24:	f000 f8e8 	bl	80090f8 <__malloc_lock>
 8008f28:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa0 <_free_r+0x90>)
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	b933      	cbnz	r3, 8008f3c <_free_r+0x2c>
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6014      	str	r4, [r2, #0]
 8008f32:	4628      	mov	r0, r5
 8008f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f38:	f000 b8e4 	b.w	8009104 <__malloc_unlock>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d908      	bls.n	8008f52 <_free_r+0x42>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	1821      	adds	r1, r4, r0
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf01      	itttt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1809      	addeq	r1, r1, r0
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	e7ed      	b.n	8008f2e <_free_r+0x1e>
 8008f52:	461a      	mov	r2, r3
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b10b      	cbz	r3, 8008f5c <_free_r+0x4c>
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d9fa      	bls.n	8008f52 <_free_r+0x42>
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	1850      	adds	r0, r2, r1
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d10b      	bne.n	8008f7c <_free_r+0x6c>
 8008f64:	6820      	ldr	r0, [r4, #0]
 8008f66:	4401      	add	r1, r0
 8008f68:	1850      	adds	r0, r2, r1
 8008f6a:	4283      	cmp	r3, r0
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	d1e0      	bne.n	8008f32 <_free_r+0x22>
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	6053      	str	r3, [r2, #4]
 8008f76:	4408      	add	r0, r1
 8008f78:	6010      	str	r0, [r2, #0]
 8008f7a:	e7da      	b.n	8008f32 <_free_r+0x22>
 8008f7c:	d902      	bls.n	8008f84 <_free_r+0x74>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	e7d6      	b.n	8008f32 <_free_r+0x22>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	1821      	adds	r1, r4, r0
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf04      	itt	eq
 8008f8c:	6819      	ldreq	r1, [r3, #0]
 8008f8e:	685b      	ldreq	r3, [r3, #4]
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	bf04      	itt	eq
 8008f94:	1809      	addeq	r1, r1, r0
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	6054      	str	r4, [r2, #4]
 8008f9a:	e7ca      	b.n	8008f32 <_free_r+0x22>
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000944 	.word	0x20000944

08008fa4 <malloc>:
 8008fa4:	4b02      	ldr	r3, [pc, #8]	@ (8008fb0 <malloc+0xc>)
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f000 b825 	b.w	8008ff8 <_malloc_r>
 8008fae:	bf00      	nop
 8008fb0:	20000018 	.word	0x20000018

08008fb4 <sbrk_aligned>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8008ff4 <sbrk_aligned+0x40>)
 8008fb8:	460c      	mov	r4, r1
 8008fba:	6831      	ldr	r1, [r6, #0]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	b911      	cbnz	r1, 8008fc6 <sbrk_aligned+0x12>
 8008fc0:	f001 f804 	bl	8009fcc <_sbrk_r>
 8008fc4:	6030      	str	r0, [r6, #0]
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f000 ffff 	bl	8009fcc <_sbrk_r>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d103      	bne.n	8008fda <sbrk_aligned+0x26>
 8008fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	bd70      	pop	{r4, r5, r6, pc}
 8008fda:	1cc4      	adds	r4, r0, #3
 8008fdc:	f024 0403 	bic.w	r4, r4, #3
 8008fe0:	42a0      	cmp	r0, r4
 8008fe2:	d0f8      	beq.n	8008fd6 <sbrk_aligned+0x22>
 8008fe4:	1a21      	subs	r1, r4, r0
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 fff0 	bl	8009fcc <_sbrk_r>
 8008fec:	3001      	adds	r0, #1
 8008fee:	d1f2      	bne.n	8008fd6 <sbrk_aligned+0x22>
 8008ff0:	e7ef      	b.n	8008fd2 <sbrk_aligned+0x1e>
 8008ff2:	bf00      	nop
 8008ff4:	20000940 	.word	0x20000940

08008ff8 <_malloc_r>:
 8008ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ffc:	1ccd      	adds	r5, r1, #3
 8008ffe:	f025 0503 	bic.w	r5, r5, #3
 8009002:	3508      	adds	r5, #8
 8009004:	2d0c      	cmp	r5, #12
 8009006:	bf38      	it	cc
 8009008:	250c      	movcc	r5, #12
 800900a:	2d00      	cmp	r5, #0
 800900c:	4606      	mov	r6, r0
 800900e:	db01      	blt.n	8009014 <_malloc_r+0x1c>
 8009010:	42a9      	cmp	r1, r5
 8009012:	d904      	bls.n	800901e <_malloc_r+0x26>
 8009014:	230c      	movs	r3, #12
 8009016:	6033      	str	r3, [r6, #0]
 8009018:	2000      	movs	r0, #0
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090f4 <_malloc_r+0xfc>
 8009022:	f000 f869 	bl	80090f8 <__malloc_lock>
 8009026:	f8d8 3000 	ldr.w	r3, [r8]
 800902a:	461c      	mov	r4, r3
 800902c:	bb44      	cbnz	r4, 8009080 <_malloc_r+0x88>
 800902e:	4629      	mov	r1, r5
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff ffbf 	bl	8008fb4 <sbrk_aligned>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	4604      	mov	r4, r0
 800903a:	d158      	bne.n	80090ee <_malloc_r+0xf6>
 800903c:	f8d8 4000 	ldr.w	r4, [r8]
 8009040:	4627      	mov	r7, r4
 8009042:	2f00      	cmp	r7, #0
 8009044:	d143      	bne.n	80090ce <_malloc_r+0xd6>
 8009046:	2c00      	cmp	r4, #0
 8009048:	d04b      	beq.n	80090e2 <_malloc_r+0xea>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	4639      	mov	r1, r7
 800904e:	4630      	mov	r0, r6
 8009050:	eb04 0903 	add.w	r9, r4, r3
 8009054:	f000 ffba 	bl	8009fcc <_sbrk_r>
 8009058:	4581      	cmp	r9, r0
 800905a:	d142      	bne.n	80090e2 <_malloc_r+0xea>
 800905c:	6821      	ldr	r1, [r4, #0]
 800905e:	1a6d      	subs	r5, r5, r1
 8009060:	4629      	mov	r1, r5
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ffa6 	bl	8008fb4 <sbrk_aligned>
 8009068:	3001      	adds	r0, #1
 800906a:	d03a      	beq.n	80090e2 <_malloc_r+0xea>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	442b      	add	r3, r5
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	f8d8 3000 	ldr.w	r3, [r8]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	bb62      	cbnz	r2, 80090d4 <_malloc_r+0xdc>
 800907a:	f8c8 7000 	str.w	r7, [r8]
 800907e:	e00f      	b.n	80090a0 <_malloc_r+0xa8>
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	1b52      	subs	r2, r2, r5
 8009084:	d420      	bmi.n	80090c8 <_malloc_r+0xd0>
 8009086:	2a0b      	cmp	r2, #11
 8009088:	d917      	bls.n	80090ba <_malloc_r+0xc2>
 800908a:	1961      	adds	r1, r4, r5
 800908c:	42a3      	cmp	r3, r4
 800908e:	6025      	str	r5, [r4, #0]
 8009090:	bf18      	it	ne
 8009092:	6059      	strne	r1, [r3, #4]
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	bf08      	it	eq
 8009098:	f8c8 1000 	streq.w	r1, [r8]
 800909c:	5162      	str	r2, [r4, r5]
 800909e:	604b      	str	r3, [r1, #4]
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 f82f 	bl	8009104 <__malloc_unlock>
 80090a6:	f104 000b 	add.w	r0, r4, #11
 80090aa:	1d23      	adds	r3, r4, #4
 80090ac:	f020 0007 	bic.w	r0, r0, #7
 80090b0:	1ac2      	subs	r2, r0, r3
 80090b2:	bf1c      	itt	ne
 80090b4:	1a1b      	subne	r3, r3, r0
 80090b6:	50a3      	strne	r3, [r4, r2]
 80090b8:	e7af      	b.n	800901a <_malloc_r+0x22>
 80090ba:	6862      	ldr	r2, [r4, #4]
 80090bc:	42a3      	cmp	r3, r4
 80090be:	bf0c      	ite	eq
 80090c0:	f8c8 2000 	streq.w	r2, [r8]
 80090c4:	605a      	strne	r2, [r3, #4]
 80090c6:	e7eb      	b.n	80090a0 <_malloc_r+0xa8>
 80090c8:	4623      	mov	r3, r4
 80090ca:	6864      	ldr	r4, [r4, #4]
 80090cc:	e7ae      	b.n	800902c <_malloc_r+0x34>
 80090ce:	463c      	mov	r4, r7
 80090d0:	687f      	ldr	r7, [r7, #4]
 80090d2:	e7b6      	b.n	8009042 <_malloc_r+0x4a>
 80090d4:	461a      	mov	r2, r3
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d1fb      	bne.n	80090d4 <_malloc_r+0xdc>
 80090dc:	2300      	movs	r3, #0
 80090de:	6053      	str	r3, [r2, #4]
 80090e0:	e7de      	b.n	80090a0 <_malloc_r+0xa8>
 80090e2:	230c      	movs	r3, #12
 80090e4:	6033      	str	r3, [r6, #0]
 80090e6:	4630      	mov	r0, r6
 80090e8:	f000 f80c 	bl	8009104 <__malloc_unlock>
 80090ec:	e794      	b.n	8009018 <_malloc_r+0x20>
 80090ee:	6005      	str	r5, [r0, #0]
 80090f0:	e7d6      	b.n	80090a0 <_malloc_r+0xa8>
 80090f2:	bf00      	nop
 80090f4:	20000944 	.word	0x20000944

080090f8 <__malloc_lock>:
 80090f8:	4801      	ldr	r0, [pc, #4]	@ (8009100 <__malloc_lock+0x8>)
 80090fa:	f7ff b8ae 	b.w	800825a <__retarget_lock_acquire_recursive>
 80090fe:	bf00      	nop
 8009100:	2000093c 	.word	0x2000093c

08009104 <__malloc_unlock>:
 8009104:	4801      	ldr	r0, [pc, #4]	@ (800910c <__malloc_unlock+0x8>)
 8009106:	f7ff b8a9 	b.w	800825c <__retarget_lock_release_recursive>
 800910a:	bf00      	nop
 800910c:	2000093c 	.word	0x2000093c

08009110 <_Balloc>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	69c6      	ldr	r6, [r0, #28]
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	b976      	cbnz	r6, 8009138 <_Balloc+0x28>
 800911a:	2010      	movs	r0, #16
 800911c:	f7ff ff42 	bl	8008fa4 <malloc>
 8009120:	4602      	mov	r2, r0
 8009122:	61e0      	str	r0, [r4, #28]
 8009124:	b920      	cbnz	r0, 8009130 <_Balloc+0x20>
 8009126:	4b18      	ldr	r3, [pc, #96]	@ (8009188 <_Balloc+0x78>)
 8009128:	4818      	ldr	r0, [pc, #96]	@ (800918c <_Balloc+0x7c>)
 800912a:	216b      	movs	r1, #107	@ 0x6b
 800912c:	f000 ff6c 	bl	800a008 <__assert_func>
 8009130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009134:	6006      	str	r6, [r0, #0]
 8009136:	60c6      	str	r6, [r0, #12]
 8009138:	69e6      	ldr	r6, [r4, #28]
 800913a:	68f3      	ldr	r3, [r6, #12]
 800913c:	b183      	cbz	r3, 8009160 <_Balloc+0x50>
 800913e:	69e3      	ldr	r3, [r4, #28]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009146:	b9b8      	cbnz	r0, 8009178 <_Balloc+0x68>
 8009148:	2101      	movs	r1, #1
 800914a:	fa01 f605 	lsl.w	r6, r1, r5
 800914e:	1d72      	adds	r2, r6, #5
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	4620      	mov	r0, r4
 8009154:	f000 ff76 	bl	800a044 <_calloc_r>
 8009158:	b160      	cbz	r0, 8009174 <_Balloc+0x64>
 800915a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800915e:	e00e      	b.n	800917e <_Balloc+0x6e>
 8009160:	2221      	movs	r2, #33	@ 0x21
 8009162:	2104      	movs	r1, #4
 8009164:	4620      	mov	r0, r4
 8009166:	f000 ff6d 	bl	800a044 <_calloc_r>
 800916a:	69e3      	ldr	r3, [r4, #28]
 800916c:	60f0      	str	r0, [r6, #12]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e4      	bne.n	800913e <_Balloc+0x2e>
 8009174:	2000      	movs	r0, #0
 8009176:	bd70      	pop	{r4, r5, r6, pc}
 8009178:	6802      	ldr	r2, [r0, #0]
 800917a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800917e:	2300      	movs	r3, #0
 8009180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009184:	e7f7      	b.n	8009176 <_Balloc+0x66>
 8009186:	bf00      	nop
 8009188:	0800abbd 	.word	0x0800abbd
 800918c:	0800ac3d 	.word	0x0800ac3d

08009190 <_Bfree>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	69c6      	ldr	r6, [r0, #28]
 8009194:	4605      	mov	r5, r0
 8009196:	460c      	mov	r4, r1
 8009198:	b976      	cbnz	r6, 80091b8 <_Bfree+0x28>
 800919a:	2010      	movs	r0, #16
 800919c:	f7ff ff02 	bl	8008fa4 <malloc>
 80091a0:	4602      	mov	r2, r0
 80091a2:	61e8      	str	r0, [r5, #28]
 80091a4:	b920      	cbnz	r0, 80091b0 <_Bfree+0x20>
 80091a6:	4b09      	ldr	r3, [pc, #36]	@ (80091cc <_Bfree+0x3c>)
 80091a8:	4809      	ldr	r0, [pc, #36]	@ (80091d0 <_Bfree+0x40>)
 80091aa:	218f      	movs	r1, #143	@ 0x8f
 80091ac:	f000 ff2c 	bl	800a008 <__assert_func>
 80091b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091b4:	6006      	str	r6, [r0, #0]
 80091b6:	60c6      	str	r6, [r0, #12]
 80091b8:	b13c      	cbz	r4, 80091ca <_Bfree+0x3a>
 80091ba:	69eb      	ldr	r3, [r5, #28]
 80091bc:	6862      	ldr	r2, [r4, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091c4:	6021      	str	r1, [r4, #0]
 80091c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	0800abbd 	.word	0x0800abbd
 80091d0:	0800ac3d 	.word	0x0800ac3d

080091d4 <__multadd>:
 80091d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d8:	690d      	ldr	r5, [r1, #16]
 80091da:	4607      	mov	r7, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	461e      	mov	r6, r3
 80091e0:	f101 0c14 	add.w	ip, r1, #20
 80091e4:	2000      	movs	r0, #0
 80091e6:	f8dc 3000 	ldr.w	r3, [ip]
 80091ea:	b299      	uxth	r1, r3
 80091ec:	fb02 6101 	mla	r1, r2, r1, r6
 80091f0:	0c1e      	lsrs	r6, r3, #16
 80091f2:	0c0b      	lsrs	r3, r1, #16
 80091f4:	fb02 3306 	mla	r3, r2, r6, r3
 80091f8:	b289      	uxth	r1, r1
 80091fa:	3001      	adds	r0, #1
 80091fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009200:	4285      	cmp	r5, r0
 8009202:	f84c 1b04 	str.w	r1, [ip], #4
 8009206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800920a:	dcec      	bgt.n	80091e6 <__multadd+0x12>
 800920c:	b30e      	cbz	r6, 8009252 <__multadd+0x7e>
 800920e:	68a3      	ldr	r3, [r4, #8]
 8009210:	42ab      	cmp	r3, r5
 8009212:	dc19      	bgt.n	8009248 <__multadd+0x74>
 8009214:	6861      	ldr	r1, [r4, #4]
 8009216:	4638      	mov	r0, r7
 8009218:	3101      	adds	r1, #1
 800921a:	f7ff ff79 	bl	8009110 <_Balloc>
 800921e:	4680      	mov	r8, r0
 8009220:	b928      	cbnz	r0, 800922e <__multadd+0x5a>
 8009222:	4602      	mov	r2, r0
 8009224:	4b0c      	ldr	r3, [pc, #48]	@ (8009258 <__multadd+0x84>)
 8009226:	480d      	ldr	r0, [pc, #52]	@ (800925c <__multadd+0x88>)
 8009228:	21ba      	movs	r1, #186	@ 0xba
 800922a:	f000 feed 	bl	800a008 <__assert_func>
 800922e:	6922      	ldr	r2, [r4, #16]
 8009230:	3202      	adds	r2, #2
 8009232:	f104 010c 	add.w	r1, r4, #12
 8009236:	0092      	lsls	r2, r2, #2
 8009238:	300c      	adds	r0, #12
 800923a:	f000 fed7 	bl	8009fec <memcpy>
 800923e:	4621      	mov	r1, r4
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff ffa5 	bl	8009190 <_Bfree>
 8009246:	4644      	mov	r4, r8
 8009248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800924c:	3501      	adds	r5, #1
 800924e:	615e      	str	r6, [r3, #20]
 8009250:	6125      	str	r5, [r4, #16]
 8009252:	4620      	mov	r0, r4
 8009254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009258:	0800ac2c 	.word	0x0800ac2c
 800925c:	0800ac3d 	.word	0x0800ac3d

08009260 <__hi0bits>:
 8009260:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009264:	4603      	mov	r3, r0
 8009266:	bf36      	itet	cc
 8009268:	0403      	lslcc	r3, r0, #16
 800926a:	2000      	movcs	r0, #0
 800926c:	2010      	movcc	r0, #16
 800926e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009272:	bf3c      	itt	cc
 8009274:	021b      	lslcc	r3, r3, #8
 8009276:	3008      	addcc	r0, #8
 8009278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800927c:	bf3c      	itt	cc
 800927e:	011b      	lslcc	r3, r3, #4
 8009280:	3004      	addcc	r0, #4
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009286:	bf3c      	itt	cc
 8009288:	009b      	lslcc	r3, r3, #2
 800928a:	3002      	addcc	r0, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	db05      	blt.n	800929c <__hi0bits+0x3c>
 8009290:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009294:	f100 0001 	add.w	r0, r0, #1
 8009298:	bf08      	it	eq
 800929a:	2020      	moveq	r0, #32
 800929c:	4770      	bx	lr

0800929e <__lo0bits>:
 800929e:	6803      	ldr	r3, [r0, #0]
 80092a0:	4602      	mov	r2, r0
 80092a2:	f013 0007 	ands.w	r0, r3, #7
 80092a6:	d00b      	beq.n	80092c0 <__lo0bits+0x22>
 80092a8:	07d9      	lsls	r1, r3, #31
 80092aa:	d421      	bmi.n	80092f0 <__lo0bits+0x52>
 80092ac:	0798      	lsls	r0, r3, #30
 80092ae:	bf49      	itett	mi
 80092b0:	085b      	lsrmi	r3, r3, #1
 80092b2:	089b      	lsrpl	r3, r3, #2
 80092b4:	2001      	movmi	r0, #1
 80092b6:	6013      	strmi	r3, [r2, #0]
 80092b8:	bf5c      	itt	pl
 80092ba:	6013      	strpl	r3, [r2, #0]
 80092bc:	2002      	movpl	r0, #2
 80092be:	4770      	bx	lr
 80092c0:	b299      	uxth	r1, r3
 80092c2:	b909      	cbnz	r1, 80092c8 <__lo0bits+0x2a>
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	2010      	movs	r0, #16
 80092c8:	b2d9      	uxtb	r1, r3
 80092ca:	b909      	cbnz	r1, 80092d0 <__lo0bits+0x32>
 80092cc:	3008      	adds	r0, #8
 80092ce:	0a1b      	lsrs	r3, r3, #8
 80092d0:	0719      	lsls	r1, r3, #28
 80092d2:	bf04      	itt	eq
 80092d4:	091b      	lsreq	r3, r3, #4
 80092d6:	3004      	addeq	r0, #4
 80092d8:	0799      	lsls	r1, r3, #30
 80092da:	bf04      	itt	eq
 80092dc:	089b      	lsreq	r3, r3, #2
 80092de:	3002      	addeq	r0, #2
 80092e0:	07d9      	lsls	r1, r3, #31
 80092e2:	d403      	bmi.n	80092ec <__lo0bits+0x4e>
 80092e4:	085b      	lsrs	r3, r3, #1
 80092e6:	f100 0001 	add.w	r0, r0, #1
 80092ea:	d003      	beq.n	80092f4 <__lo0bits+0x56>
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	4770      	bx	lr
 80092f0:	2000      	movs	r0, #0
 80092f2:	4770      	bx	lr
 80092f4:	2020      	movs	r0, #32
 80092f6:	4770      	bx	lr

080092f8 <__i2b>:
 80092f8:	b510      	push	{r4, lr}
 80092fa:	460c      	mov	r4, r1
 80092fc:	2101      	movs	r1, #1
 80092fe:	f7ff ff07 	bl	8009110 <_Balloc>
 8009302:	4602      	mov	r2, r0
 8009304:	b928      	cbnz	r0, 8009312 <__i2b+0x1a>
 8009306:	4b05      	ldr	r3, [pc, #20]	@ (800931c <__i2b+0x24>)
 8009308:	4805      	ldr	r0, [pc, #20]	@ (8009320 <__i2b+0x28>)
 800930a:	f240 1145 	movw	r1, #325	@ 0x145
 800930e:	f000 fe7b 	bl	800a008 <__assert_func>
 8009312:	2301      	movs	r3, #1
 8009314:	6144      	str	r4, [r0, #20]
 8009316:	6103      	str	r3, [r0, #16]
 8009318:	bd10      	pop	{r4, pc}
 800931a:	bf00      	nop
 800931c:	0800ac2c 	.word	0x0800ac2c
 8009320:	0800ac3d 	.word	0x0800ac3d

08009324 <__multiply>:
 8009324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	4617      	mov	r7, r2
 800932a:	690a      	ldr	r2, [r1, #16]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	429a      	cmp	r2, r3
 8009330:	bfa8      	it	ge
 8009332:	463b      	movge	r3, r7
 8009334:	4689      	mov	r9, r1
 8009336:	bfa4      	itt	ge
 8009338:	460f      	movge	r7, r1
 800933a:	4699      	movge	r9, r3
 800933c:	693d      	ldr	r5, [r7, #16]
 800933e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	eb05 060a 	add.w	r6, r5, sl
 800934a:	42b3      	cmp	r3, r6
 800934c:	b085      	sub	sp, #20
 800934e:	bfb8      	it	lt
 8009350:	3101      	addlt	r1, #1
 8009352:	f7ff fedd 	bl	8009110 <_Balloc>
 8009356:	b930      	cbnz	r0, 8009366 <__multiply+0x42>
 8009358:	4602      	mov	r2, r0
 800935a:	4b41      	ldr	r3, [pc, #260]	@ (8009460 <__multiply+0x13c>)
 800935c:	4841      	ldr	r0, [pc, #260]	@ (8009464 <__multiply+0x140>)
 800935e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009362:	f000 fe51 	bl	800a008 <__assert_func>
 8009366:	f100 0414 	add.w	r4, r0, #20
 800936a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800936e:	4623      	mov	r3, r4
 8009370:	2200      	movs	r2, #0
 8009372:	4573      	cmp	r3, lr
 8009374:	d320      	bcc.n	80093b8 <__multiply+0x94>
 8009376:	f107 0814 	add.w	r8, r7, #20
 800937a:	f109 0114 	add.w	r1, r9, #20
 800937e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009382:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	1beb      	subs	r3, r5, r7
 800938a:	3b15      	subs	r3, #21
 800938c:	f023 0303 	bic.w	r3, r3, #3
 8009390:	3304      	adds	r3, #4
 8009392:	3715      	adds	r7, #21
 8009394:	42bd      	cmp	r5, r7
 8009396:	bf38      	it	cc
 8009398:	2304      	movcc	r3, #4
 800939a:	9301      	str	r3, [sp, #4]
 800939c:	9b02      	ldr	r3, [sp, #8]
 800939e:	9103      	str	r1, [sp, #12]
 80093a0:	428b      	cmp	r3, r1
 80093a2:	d80c      	bhi.n	80093be <__multiply+0x9a>
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	dd03      	ble.n	80093b0 <__multiply+0x8c>
 80093a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d055      	beq.n	800945c <__multiply+0x138>
 80093b0:	6106      	str	r6, [r0, #16]
 80093b2:	b005      	add	sp, #20
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	f843 2b04 	str.w	r2, [r3], #4
 80093bc:	e7d9      	b.n	8009372 <__multiply+0x4e>
 80093be:	f8b1 a000 	ldrh.w	sl, [r1]
 80093c2:	f1ba 0f00 	cmp.w	sl, #0
 80093c6:	d01f      	beq.n	8009408 <__multiply+0xe4>
 80093c8:	46c4      	mov	ip, r8
 80093ca:	46a1      	mov	r9, r4
 80093cc:	2700      	movs	r7, #0
 80093ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093d2:	f8d9 3000 	ldr.w	r3, [r9]
 80093d6:	fa1f fb82 	uxth.w	fp, r2
 80093da:	b29b      	uxth	r3, r3
 80093dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80093e0:	443b      	add	r3, r7
 80093e2:	f8d9 7000 	ldr.w	r7, [r9]
 80093e6:	0c12      	lsrs	r2, r2, #16
 80093e8:	0c3f      	lsrs	r7, r7, #16
 80093ea:	fb0a 7202 	mla	r2, sl, r2, r7
 80093ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093f8:	4565      	cmp	r5, ip
 80093fa:	f849 3b04 	str.w	r3, [r9], #4
 80093fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009402:	d8e4      	bhi.n	80093ce <__multiply+0xaa>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	50e7      	str	r7, [r4, r3]
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800940e:	3104      	adds	r1, #4
 8009410:	f1b9 0f00 	cmp.w	r9, #0
 8009414:	d020      	beq.n	8009458 <__multiply+0x134>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	4647      	mov	r7, r8
 800941a:	46a4      	mov	ip, r4
 800941c:	f04f 0a00 	mov.w	sl, #0
 8009420:	f8b7 b000 	ldrh.w	fp, [r7]
 8009424:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009428:	fb09 220b 	mla	r2, r9, fp, r2
 800942c:	4452      	add	r2, sl
 800942e:	b29b      	uxth	r3, r3
 8009430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009434:	f84c 3b04 	str.w	r3, [ip], #4
 8009438:	f857 3b04 	ldr.w	r3, [r7], #4
 800943c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009440:	f8bc 3000 	ldrh.w	r3, [ip]
 8009444:	fb09 330a 	mla	r3, r9, sl, r3
 8009448:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800944c:	42bd      	cmp	r5, r7
 800944e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009452:	d8e5      	bhi.n	8009420 <__multiply+0xfc>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	50a3      	str	r3, [r4, r2]
 8009458:	3404      	adds	r4, #4
 800945a:	e79f      	b.n	800939c <__multiply+0x78>
 800945c:	3e01      	subs	r6, #1
 800945e:	e7a1      	b.n	80093a4 <__multiply+0x80>
 8009460:	0800ac2c 	.word	0x0800ac2c
 8009464:	0800ac3d 	.word	0x0800ac3d

08009468 <__pow5mult>:
 8009468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800946c:	4615      	mov	r5, r2
 800946e:	f012 0203 	ands.w	r2, r2, #3
 8009472:	4607      	mov	r7, r0
 8009474:	460e      	mov	r6, r1
 8009476:	d007      	beq.n	8009488 <__pow5mult+0x20>
 8009478:	4c25      	ldr	r4, [pc, #148]	@ (8009510 <__pow5mult+0xa8>)
 800947a:	3a01      	subs	r2, #1
 800947c:	2300      	movs	r3, #0
 800947e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009482:	f7ff fea7 	bl	80091d4 <__multadd>
 8009486:	4606      	mov	r6, r0
 8009488:	10ad      	asrs	r5, r5, #2
 800948a:	d03d      	beq.n	8009508 <__pow5mult+0xa0>
 800948c:	69fc      	ldr	r4, [r7, #28]
 800948e:	b97c      	cbnz	r4, 80094b0 <__pow5mult+0x48>
 8009490:	2010      	movs	r0, #16
 8009492:	f7ff fd87 	bl	8008fa4 <malloc>
 8009496:	4602      	mov	r2, r0
 8009498:	61f8      	str	r0, [r7, #28]
 800949a:	b928      	cbnz	r0, 80094a8 <__pow5mult+0x40>
 800949c:	4b1d      	ldr	r3, [pc, #116]	@ (8009514 <__pow5mult+0xac>)
 800949e:	481e      	ldr	r0, [pc, #120]	@ (8009518 <__pow5mult+0xb0>)
 80094a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094a4:	f000 fdb0 	bl	800a008 <__assert_func>
 80094a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094ac:	6004      	str	r4, [r0, #0]
 80094ae:	60c4      	str	r4, [r0, #12]
 80094b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094b8:	b94c      	cbnz	r4, 80094ce <__pow5mult+0x66>
 80094ba:	f240 2171 	movw	r1, #625	@ 0x271
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ff1a 	bl	80092f8 <__i2b>
 80094c4:	2300      	movs	r3, #0
 80094c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80094ca:	4604      	mov	r4, r0
 80094cc:	6003      	str	r3, [r0, #0]
 80094ce:	f04f 0900 	mov.w	r9, #0
 80094d2:	07eb      	lsls	r3, r5, #31
 80094d4:	d50a      	bpl.n	80094ec <__pow5mult+0x84>
 80094d6:	4631      	mov	r1, r6
 80094d8:	4622      	mov	r2, r4
 80094da:	4638      	mov	r0, r7
 80094dc:	f7ff ff22 	bl	8009324 <__multiply>
 80094e0:	4631      	mov	r1, r6
 80094e2:	4680      	mov	r8, r0
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff fe53 	bl	8009190 <_Bfree>
 80094ea:	4646      	mov	r6, r8
 80094ec:	106d      	asrs	r5, r5, #1
 80094ee:	d00b      	beq.n	8009508 <__pow5mult+0xa0>
 80094f0:	6820      	ldr	r0, [r4, #0]
 80094f2:	b938      	cbnz	r0, 8009504 <__pow5mult+0x9c>
 80094f4:	4622      	mov	r2, r4
 80094f6:	4621      	mov	r1, r4
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff ff13 	bl	8009324 <__multiply>
 80094fe:	6020      	str	r0, [r4, #0]
 8009500:	f8c0 9000 	str.w	r9, [r0]
 8009504:	4604      	mov	r4, r0
 8009506:	e7e4      	b.n	80094d2 <__pow5mult+0x6a>
 8009508:	4630      	mov	r0, r6
 800950a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950e:	bf00      	nop
 8009510:	0800acf0 	.word	0x0800acf0
 8009514:	0800abbd 	.word	0x0800abbd
 8009518:	0800ac3d 	.word	0x0800ac3d

0800951c <__lshift>:
 800951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	6849      	ldr	r1, [r1, #4]
 8009524:	6923      	ldr	r3, [r4, #16]
 8009526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800952a:	68a3      	ldr	r3, [r4, #8]
 800952c:	4607      	mov	r7, r0
 800952e:	4691      	mov	r9, r2
 8009530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009534:	f108 0601 	add.w	r6, r8, #1
 8009538:	42b3      	cmp	r3, r6
 800953a:	db0b      	blt.n	8009554 <__lshift+0x38>
 800953c:	4638      	mov	r0, r7
 800953e:	f7ff fde7 	bl	8009110 <_Balloc>
 8009542:	4605      	mov	r5, r0
 8009544:	b948      	cbnz	r0, 800955a <__lshift+0x3e>
 8009546:	4602      	mov	r2, r0
 8009548:	4b28      	ldr	r3, [pc, #160]	@ (80095ec <__lshift+0xd0>)
 800954a:	4829      	ldr	r0, [pc, #164]	@ (80095f0 <__lshift+0xd4>)
 800954c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009550:	f000 fd5a 	bl	800a008 <__assert_func>
 8009554:	3101      	adds	r1, #1
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	e7ee      	b.n	8009538 <__lshift+0x1c>
 800955a:	2300      	movs	r3, #0
 800955c:	f100 0114 	add.w	r1, r0, #20
 8009560:	f100 0210 	add.w	r2, r0, #16
 8009564:	4618      	mov	r0, r3
 8009566:	4553      	cmp	r3, sl
 8009568:	db33      	blt.n	80095d2 <__lshift+0xb6>
 800956a:	6920      	ldr	r0, [r4, #16]
 800956c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009570:	f104 0314 	add.w	r3, r4, #20
 8009574:	f019 091f 	ands.w	r9, r9, #31
 8009578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800957c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009580:	d02b      	beq.n	80095da <__lshift+0xbe>
 8009582:	f1c9 0e20 	rsb	lr, r9, #32
 8009586:	468a      	mov	sl, r1
 8009588:	2200      	movs	r2, #0
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	fa00 f009 	lsl.w	r0, r0, r9
 8009590:	4310      	orrs	r0, r2
 8009592:	f84a 0b04 	str.w	r0, [sl], #4
 8009596:	f853 2b04 	ldr.w	r2, [r3], #4
 800959a:	459c      	cmp	ip, r3
 800959c:	fa22 f20e 	lsr.w	r2, r2, lr
 80095a0:	d8f3      	bhi.n	800958a <__lshift+0x6e>
 80095a2:	ebac 0304 	sub.w	r3, ip, r4
 80095a6:	3b15      	subs	r3, #21
 80095a8:	f023 0303 	bic.w	r3, r3, #3
 80095ac:	3304      	adds	r3, #4
 80095ae:	f104 0015 	add.w	r0, r4, #21
 80095b2:	4560      	cmp	r0, ip
 80095b4:	bf88      	it	hi
 80095b6:	2304      	movhi	r3, #4
 80095b8:	50ca      	str	r2, [r1, r3]
 80095ba:	b10a      	cbz	r2, 80095c0 <__lshift+0xa4>
 80095bc:	f108 0602 	add.w	r6, r8, #2
 80095c0:	3e01      	subs	r6, #1
 80095c2:	4638      	mov	r0, r7
 80095c4:	612e      	str	r6, [r5, #16]
 80095c6:	4621      	mov	r1, r4
 80095c8:	f7ff fde2 	bl	8009190 <_Bfree>
 80095cc:	4628      	mov	r0, r5
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095d6:	3301      	adds	r3, #1
 80095d8:	e7c5      	b.n	8009566 <__lshift+0x4a>
 80095da:	3904      	subs	r1, #4
 80095dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095e4:	459c      	cmp	ip, r3
 80095e6:	d8f9      	bhi.n	80095dc <__lshift+0xc0>
 80095e8:	e7ea      	b.n	80095c0 <__lshift+0xa4>
 80095ea:	bf00      	nop
 80095ec:	0800ac2c 	.word	0x0800ac2c
 80095f0:	0800ac3d 	.word	0x0800ac3d

080095f4 <__mcmp>:
 80095f4:	690a      	ldr	r2, [r1, #16]
 80095f6:	4603      	mov	r3, r0
 80095f8:	6900      	ldr	r0, [r0, #16]
 80095fa:	1a80      	subs	r0, r0, r2
 80095fc:	b530      	push	{r4, r5, lr}
 80095fe:	d10e      	bne.n	800961e <__mcmp+0x2a>
 8009600:	3314      	adds	r3, #20
 8009602:	3114      	adds	r1, #20
 8009604:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009608:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800960c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009614:	4295      	cmp	r5, r2
 8009616:	d003      	beq.n	8009620 <__mcmp+0x2c>
 8009618:	d205      	bcs.n	8009626 <__mcmp+0x32>
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	bd30      	pop	{r4, r5, pc}
 8009620:	42a3      	cmp	r3, r4
 8009622:	d3f3      	bcc.n	800960c <__mcmp+0x18>
 8009624:	e7fb      	b.n	800961e <__mcmp+0x2a>
 8009626:	2001      	movs	r0, #1
 8009628:	e7f9      	b.n	800961e <__mcmp+0x2a>
	...

0800962c <__mdiff>:
 800962c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4689      	mov	r9, r1
 8009632:	4606      	mov	r6, r0
 8009634:	4611      	mov	r1, r2
 8009636:	4648      	mov	r0, r9
 8009638:	4614      	mov	r4, r2
 800963a:	f7ff ffdb 	bl	80095f4 <__mcmp>
 800963e:	1e05      	subs	r5, r0, #0
 8009640:	d112      	bne.n	8009668 <__mdiff+0x3c>
 8009642:	4629      	mov	r1, r5
 8009644:	4630      	mov	r0, r6
 8009646:	f7ff fd63 	bl	8009110 <_Balloc>
 800964a:	4602      	mov	r2, r0
 800964c:	b928      	cbnz	r0, 800965a <__mdiff+0x2e>
 800964e:	4b3f      	ldr	r3, [pc, #252]	@ (800974c <__mdiff+0x120>)
 8009650:	f240 2137 	movw	r1, #567	@ 0x237
 8009654:	483e      	ldr	r0, [pc, #248]	@ (8009750 <__mdiff+0x124>)
 8009656:	f000 fcd7 	bl	800a008 <__assert_func>
 800965a:	2301      	movs	r3, #1
 800965c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009660:	4610      	mov	r0, r2
 8009662:	b003      	add	sp, #12
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	bfbc      	itt	lt
 800966a:	464b      	movlt	r3, r9
 800966c:	46a1      	movlt	r9, r4
 800966e:	4630      	mov	r0, r6
 8009670:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009674:	bfba      	itte	lt
 8009676:	461c      	movlt	r4, r3
 8009678:	2501      	movlt	r5, #1
 800967a:	2500      	movge	r5, #0
 800967c:	f7ff fd48 	bl	8009110 <_Balloc>
 8009680:	4602      	mov	r2, r0
 8009682:	b918      	cbnz	r0, 800968c <__mdiff+0x60>
 8009684:	4b31      	ldr	r3, [pc, #196]	@ (800974c <__mdiff+0x120>)
 8009686:	f240 2145 	movw	r1, #581	@ 0x245
 800968a:	e7e3      	b.n	8009654 <__mdiff+0x28>
 800968c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009690:	6926      	ldr	r6, [r4, #16]
 8009692:	60c5      	str	r5, [r0, #12]
 8009694:	f109 0310 	add.w	r3, r9, #16
 8009698:	f109 0514 	add.w	r5, r9, #20
 800969c:	f104 0e14 	add.w	lr, r4, #20
 80096a0:	f100 0b14 	add.w	fp, r0, #20
 80096a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	46d9      	mov	r9, fp
 80096b0:	f04f 0c00 	mov.w	ip, #0
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	fa1f f38a 	uxth.w	r3, sl
 80096c4:	4619      	mov	r1, r3
 80096c6:	b283      	uxth	r3, r0
 80096c8:	1acb      	subs	r3, r1, r3
 80096ca:	0c00      	lsrs	r0, r0, #16
 80096cc:	4463      	add	r3, ip
 80096ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096dc:	4576      	cmp	r6, lr
 80096de:	f849 3b04 	str.w	r3, [r9], #4
 80096e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096e6:	d8e5      	bhi.n	80096b4 <__mdiff+0x88>
 80096e8:	1b33      	subs	r3, r6, r4
 80096ea:	3b15      	subs	r3, #21
 80096ec:	f023 0303 	bic.w	r3, r3, #3
 80096f0:	3415      	adds	r4, #21
 80096f2:	3304      	adds	r3, #4
 80096f4:	42a6      	cmp	r6, r4
 80096f6:	bf38      	it	cc
 80096f8:	2304      	movcc	r3, #4
 80096fa:	441d      	add	r5, r3
 80096fc:	445b      	add	r3, fp
 80096fe:	461e      	mov	r6, r3
 8009700:	462c      	mov	r4, r5
 8009702:	4544      	cmp	r4, r8
 8009704:	d30e      	bcc.n	8009724 <__mdiff+0xf8>
 8009706:	f108 0103 	add.w	r1, r8, #3
 800970a:	1b49      	subs	r1, r1, r5
 800970c:	f021 0103 	bic.w	r1, r1, #3
 8009710:	3d03      	subs	r5, #3
 8009712:	45a8      	cmp	r8, r5
 8009714:	bf38      	it	cc
 8009716:	2100      	movcc	r1, #0
 8009718:	440b      	add	r3, r1
 800971a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800971e:	b191      	cbz	r1, 8009746 <__mdiff+0x11a>
 8009720:	6117      	str	r7, [r2, #16]
 8009722:	e79d      	b.n	8009660 <__mdiff+0x34>
 8009724:	f854 1b04 	ldr.w	r1, [r4], #4
 8009728:	46e6      	mov	lr, ip
 800972a:	0c08      	lsrs	r0, r1, #16
 800972c:	fa1c fc81 	uxtah	ip, ip, r1
 8009730:	4471      	add	r1, lr
 8009732:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009736:	b289      	uxth	r1, r1
 8009738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800973c:	f846 1b04 	str.w	r1, [r6], #4
 8009740:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009744:	e7dd      	b.n	8009702 <__mdiff+0xd6>
 8009746:	3f01      	subs	r7, #1
 8009748:	e7e7      	b.n	800971a <__mdiff+0xee>
 800974a:	bf00      	nop
 800974c:	0800ac2c 	.word	0x0800ac2c
 8009750:	0800ac3d 	.word	0x0800ac3d

08009754 <__d2b>:
 8009754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009758:	460f      	mov	r7, r1
 800975a:	2101      	movs	r1, #1
 800975c:	ec59 8b10 	vmov	r8, r9, d0
 8009760:	4616      	mov	r6, r2
 8009762:	f7ff fcd5 	bl	8009110 <_Balloc>
 8009766:	4604      	mov	r4, r0
 8009768:	b930      	cbnz	r0, 8009778 <__d2b+0x24>
 800976a:	4602      	mov	r2, r0
 800976c:	4b23      	ldr	r3, [pc, #140]	@ (80097fc <__d2b+0xa8>)
 800976e:	4824      	ldr	r0, [pc, #144]	@ (8009800 <__d2b+0xac>)
 8009770:	f240 310f 	movw	r1, #783	@ 0x30f
 8009774:	f000 fc48 	bl	800a008 <__assert_func>
 8009778:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800977c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009780:	b10d      	cbz	r5, 8009786 <__d2b+0x32>
 8009782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	f1b8 0300 	subs.w	r3, r8, #0
 800978c:	d023      	beq.n	80097d6 <__d2b+0x82>
 800978e:	4668      	mov	r0, sp
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	f7ff fd84 	bl	800929e <__lo0bits>
 8009796:	e9dd 1200 	ldrd	r1, r2, [sp]
 800979a:	b1d0      	cbz	r0, 80097d2 <__d2b+0x7e>
 800979c:	f1c0 0320 	rsb	r3, r0, #32
 80097a0:	fa02 f303 	lsl.w	r3, r2, r3
 80097a4:	430b      	orrs	r3, r1
 80097a6:	40c2      	lsrs	r2, r0
 80097a8:	6163      	str	r3, [r4, #20]
 80097aa:	9201      	str	r2, [sp, #4]
 80097ac:	9b01      	ldr	r3, [sp, #4]
 80097ae:	61a3      	str	r3, [r4, #24]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bf0c      	ite	eq
 80097b4:	2201      	moveq	r2, #1
 80097b6:	2202      	movne	r2, #2
 80097b8:	6122      	str	r2, [r4, #16]
 80097ba:	b1a5      	cbz	r5, 80097e6 <__d2b+0x92>
 80097bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097c0:	4405      	add	r5, r0
 80097c2:	603d      	str	r5, [r7, #0]
 80097c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097c8:	6030      	str	r0, [r6, #0]
 80097ca:	4620      	mov	r0, r4
 80097cc:	b003      	add	sp, #12
 80097ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d2:	6161      	str	r1, [r4, #20]
 80097d4:	e7ea      	b.n	80097ac <__d2b+0x58>
 80097d6:	a801      	add	r0, sp, #4
 80097d8:	f7ff fd61 	bl	800929e <__lo0bits>
 80097dc:	9b01      	ldr	r3, [sp, #4]
 80097de:	6163      	str	r3, [r4, #20]
 80097e0:	3020      	adds	r0, #32
 80097e2:	2201      	movs	r2, #1
 80097e4:	e7e8      	b.n	80097b8 <__d2b+0x64>
 80097e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097ee:	6038      	str	r0, [r7, #0]
 80097f0:	6918      	ldr	r0, [r3, #16]
 80097f2:	f7ff fd35 	bl	8009260 <__hi0bits>
 80097f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097fa:	e7e5      	b.n	80097c8 <__d2b+0x74>
 80097fc:	0800ac2c 	.word	0x0800ac2c
 8009800:	0800ac3d 	.word	0x0800ac3d

08009804 <__ssputs_r>:
 8009804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	688e      	ldr	r6, [r1, #8]
 800980a:	461f      	mov	r7, r3
 800980c:	42be      	cmp	r6, r7
 800980e:	680b      	ldr	r3, [r1, #0]
 8009810:	4682      	mov	sl, r0
 8009812:	460c      	mov	r4, r1
 8009814:	4690      	mov	r8, r2
 8009816:	d82d      	bhi.n	8009874 <__ssputs_r+0x70>
 8009818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800981c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009820:	d026      	beq.n	8009870 <__ssputs_r+0x6c>
 8009822:	6965      	ldr	r5, [r4, #20]
 8009824:	6909      	ldr	r1, [r1, #16]
 8009826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800982a:	eba3 0901 	sub.w	r9, r3, r1
 800982e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009832:	1c7b      	adds	r3, r7, #1
 8009834:	444b      	add	r3, r9
 8009836:	106d      	asrs	r5, r5, #1
 8009838:	429d      	cmp	r5, r3
 800983a:	bf38      	it	cc
 800983c:	461d      	movcc	r5, r3
 800983e:	0553      	lsls	r3, r2, #21
 8009840:	d527      	bpl.n	8009892 <__ssputs_r+0x8e>
 8009842:	4629      	mov	r1, r5
 8009844:	f7ff fbd8 	bl	8008ff8 <_malloc_r>
 8009848:	4606      	mov	r6, r0
 800984a:	b360      	cbz	r0, 80098a6 <__ssputs_r+0xa2>
 800984c:	6921      	ldr	r1, [r4, #16]
 800984e:	464a      	mov	r2, r9
 8009850:	f000 fbcc 	bl	8009fec <memcpy>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800985a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	6126      	str	r6, [r4, #16]
 8009862:	6165      	str	r5, [r4, #20]
 8009864:	444e      	add	r6, r9
 8009866:	eba5 0509 	sub.w	r5, r5, r9
 800986a:	6026      	str	r6, [r4, #0]
 800986c:	60a5      	str	r5, [r4, #8]
 800986e:	463e      	mov	r6, r7
 8009870:	42be      	cmp	r6, r7
 8009872:	d900      	bls.n	8009876 <__ssputs_r+0x72>
 8009874:	463e      	mov	r6, r7
 8009876:	6820      	ldr	r0, [r4, #0]
 8009878:	4632      	mov	r2, r6
 800987a:	4641      	mov	r1, r8
 800987c:	f000 fb6a 	bl	8009f54 <memmove>
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	1b9b      	subs	r3, r3, r6
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	4433      	add	r3, r6
 800988a:	6023      	str	r3, [r4, #0]
 800988c:	2000      	movs	r0, #0
 800988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009892:	462a      	mov	r2, r5
 8009894:	f000 fbfc 	bl	800a090 <_realloc_r>
 8009898:	4606      	mov	r6, r0
 800989a:	2800      	cmp	r0, #0
 800989c:	d1e0      	bne.n	8009860 <__ssputs_r+0x5c>
 800989e:	6921      	ldr	r1, [r4, #16]
 80098a0:	4650      	mov	r0, sl
 80098a2:	f7ff fb35 	bl	8008f10 <_free_r>
 80098a6:	230c      	movs	r3, #12
 80098a8:	f8ca 3000 	str.w	r3, [sl]
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098b2:	81a3      	strh	r3, [r4, #12]
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	e7e9      	b.n	800988e <__ssputs_r+0x8a>
	...

080098bc <_svfiprintf_r>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	4698      	mov	r8, r3
 80098c2:	898b      	ldrh	r3, [r1, #12]
 80098c4:	061b      	lsls	r3, r3, #24
 80098c6:	b09d      	sub	sp, #116	@ 0x74
 80098c8:	4607      	mov	r7, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	4614      	mov	r4, r2
 80098ce:	d510      	bpl.n	80098f2 <_svfiprintf_r+0x36>
 80098d0:	690b      	ldr	r3, [r1, #16]
 80098d2:	b973      	cbnz	r3, 80098f2 <_svfiprintf_r+0x36>
 80098d4:	2140      	movs	r1, #64	@ 0x40
 80098d6:	f7ff fb8f 	bl	8008ff8 <_malloc_r>
 80098da:	6028      	str	r0, [r5, #0]
 80098dc:	6128      	str	r0, [r5, #16]
 80098de:	b930      	cbnz	r0, 80098ee <_svfiprintf_r+0x32>
 80098e0:	230c      	movs	r3, #12
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	b01d      	add	sp, #116	@ 0x74
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	2340      	movs	r3, #64	@ 0x40
 80098f0:	616b      	str	r3, [r5, #20]
 80098f2:	2300      	movs	r3, #0
 80098f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098f6:	2320      	movs	r3, #32
 80098f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009900:	2330      	movs	r3, #48	@ 0x30
 8009902:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009aa0 <_svfiprintf_r+0x1e4>
 8009906:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800990a:	f04f 0901 	mov.w	r9, #1
 800990e:	4623      	mov	r3, r4
 8009910:	469a      	mov	sl, r3
 8009912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009916:	b10a      	cbz	r2, 800991c <_svfiprintf_r+0x60>
 8009918:	2a25      	cmp	r2, #37	@ 0x25
 800991a:	d1f9      	bne.n	8009910 <_svfiprintf_r+0x54>
 800991c:	ebba 0b04 	subs.w	fp, sl, r4
 8009920:	d00b      	beq.n	800993a <_svfiprintf_r+0x7e>
 8009922:	465b      	mov	r3, fp
 8009924:	4622      	mov	r2, r4
 8009926:	4629      	mov	r1, r5
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff ff6b 	bl	8009804 <__ssputs_r>
 800992e:	3001      	adds	r0, #1
 8009930:	f000 80a7 	beq.w	8009a82 <_svfiprintf_r+0x1c6>
 8009934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009936:	445a      	add	r2, fp
 8009938:	9209      	str	r2, [sp, #36]	@ 0x24
 800993a:	f89a 3000 	ldrb.w	r3, [sl]
 800993e:	2b00      	cmp	r3, #0
 8009940:	f000 809f 	beq.w	8009a82 <_svfiprintf_r+0x1c6>
 8009944:	2300      	movs	r3, #0
 8009946:	f04f 32ff 	mov.w	r2, #4294967295
 800994a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800994e:	f10a 0a01 	add.w	sl, sl, #1
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	9307      	str	r3, [sp, #28]
 8009956:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800995a:	931a      	str	r3, [sp, #104]	@ 0x68
 800995c:	4654      	mov	r4, sl
 800995e:	2205      	movs	r2, #5
 8009960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009964:	484e      	ldr	r0, [pc, #312]	@ (8009aa0 <_svfiprintf_r+0x1e4>)
 8009966:	f7f6 fc5b 	bl	8000220 <memchr>
 800996a:	9a04      	ldr	r2, [sp, #16]
 800996c:	b9d8      	cbnz	r0, 80099a6 <_svfiprintf_r+0xea>
 800996e:	06d0      	lsls	r0, r2, #27
 8009970:	bf44      	itt	mi
 8009972:	2320      	movmi	r3, #32
 8009974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009978:	0711      	lsls	r1, r2, #28
 800997a:	bf44      	itt	mi
 800997c:	232b      	movmi	r3, #43	@ 0x2b
 800997e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009982:	f89a 3000 	ldrb.w	r3, [sl]
 8009986:	2b2a      	cmp	r3, #42	@ 0x2a
 8009988:	d015      	beq.n	80099b6 <_svfiprintf_r+0xfa>
 800998a:	9a07      	ldr	r2, [sp, #28]
 800998c:	4654      	mov	r4, sl
 800998e:	2000      	movs	r0, #0
 8009990:	f04f 0c0a 	mov.w	ip, #10
 8009994:	4621      	mov	r1, r4
 8009996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800999a:	3b30      	subs	r3, #48	@ 0x30
 800999c:	2b09      	cmp	r3, #9
 800999e:	d94b      	bls.n	8009a38 <_svfiprintf_r+0x17c>
 80099a0:	b1b0      	cbz	r0, 80099d0 <_svfiprintf_r+0x114>
 80099a2:	9207      	str	r2, [sp, #28]
 80099a4:	e014      	b.n	80099d0 <_svfiprintf_r+0x114>
 80099a6:	eba0 0308 	sub.w	r3, r0, r8
 80099aa:	fa09 f303 	lsl.w	r3, r9, r3
 80099ae:	4313      	orrs	r3, r2
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	46a2      	mov	sl, r4
 80099b4:	e7d2      	b.n	800995c <_svfiprintf_r+0xa0>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	1d19      	adds	r1, r3, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	9103      	str	r1, [sp, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	bfbb      	ittet	lt
 80099c2:	425b      	neglt	r3, r3
 80099c4:	f042 0202 	orrlt.w	r2, r2, #2
 80099c8:	9307      	strge	r3, [sp, #28]
 80099ca:	9307      	strlt	r3, [sp, #28]
 80099cc:	bfb8      	it	lt
 80099ce:	9204      	strlt	r2, [sp, #16]
 80099d0:	7823      	ldrb	r3, [r4, #0]
 80099d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80099d4:	d10a      	bne.n	80099ec <_svfiprintf_r+0x130>
 80099d6:	7863      	ldrb	r3, [r4, #1]
 80099d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80099da:	d132      	bne.n	8009a42 <_svfiprintf_r+0x186>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	1d1a      	adds	r2, r3, #4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	9203      	str	r2, [sp, #12]
 80099e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099e8:	3402      	adds	r4, #2
 80099ea:	9305      	str	r3, [sp, #20]
 80099ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ab0 <_svfiprintf_r+0x1f4>
 80099f0:	7821      	ldrb	r1, [r4, #0]
 80099f2:	2203      	movs	r2, #3
 80099f4:	4650      	mov	r0, sl
 80099f6:	f7f6 fc13 	bl	8000220 <memchr>
 80099fa:	b138      	cbz	r0, 8009a0c <_svfiprintf_r+0x150>
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	eba0 000a 	sub.w	r0, r0, sl
 8009a02:	2240      	movs	r2, #64	@ 0x40
 8009a04:	4082      	lsls	r2, r0
 8009a06:	4313      	orrs	r3, r2
 8009a08:	3401      	adds	r4, #1
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	4824      	ldr	r0, [pc, #144]	@ (8009aa4 <_svfiprintf_r+0x1e8>)
 8009a12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a16:	2206      	movs	r2, #6
 8009a18:	f7f6 fc02 	bl	8000220 <memchr>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d036      	beq.n	8009a8e <_svfiprintf_r+0x1d2>
 8009a20:	4b21      	ldr	r3, [pc, #132]	@ (8009aa8 <_svfiprintf_r+0x1ec>)
 8009a22:	bb1b      	cbnz	r3, 8009a6c <_svfiprintf_r+0x1b0>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	3307      	adds	r3, #7
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a32:	4433      	add	r3, r6
 8009a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a36:	e76a      	b.n	800990e <_svfiprintf_r+0x52>
 8009a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e7a8      	b.n	8009994 <_svfiprintf_r+0xd8>
 8009a42:	2300      	movs	r3, #0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0c0a 	mov.w	ip, #10
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a54:	3a30      	subs	r2, #48	@ 0x30
 8009a56:	2a09      	cmp	r2, #9
 8009a58:	d903      	bls.n	8009a62 <_svfiprintf_r+0x1a6>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0c6      	beq.n	80099ec <_svfiprintf_r+0x130>
 8009a5e:	9105      	str	r1, [sp, #20]
 8009a60:	e7c4      	b.n	80099ec <_svfiprintf_r+0x130>
 8009a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a66:	4604      	mov	r4, r0
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7f0      	b.n	8009a4e <_svfiprintf_r+0x192>
 8009a6c:	ab03      	add	r3, sp, #12
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4b0e      	ldr	r3, [pc, #56]	@ (8009aac <_svfiprintf_r+0x1f0>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	4638      	mov	r0, r7
 8009a78:	f7fd fd7c 	bl	8007574 <_printf_float>
 8009a7c:	1c42      	adds	r2, r0, #1
 8009a7e:	4606      	mov	r6, r0
 8009a80:	d1d6      	bne.n	8009a30 <_svfiprintf_r+0x174>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	065b      	lsls	r3, r3, #25
 8009a86:	f53f af2d 	bmi.w	80098e4 <_svfiprintf_r+0x28>
 8009a8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a8c:	e72c      	b.n	80098e8 <_svfiprintf_r+0x2c>
 8009a8e:	ab03      	add	r3, sp, #12
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	462a      	mov	r2, r5
 8009a94:	4b05      	ldr	r3, [pc, #20]	@ (8009aac <_svfiprintf_r+0x1f0>)
 8009a96:	a904      	add	r1, sp, #16
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7fe f803 	bl	8007aa4 <_printf_i>
 8009a9e:	e7ed      	b.n	8009a7c <_svfiprintf_r+0x1c0>
 8009aa0:	0800ac96 	.word	0x0800ac96
 8009aa4:	0800aca0 	.word	0x0800aca0
 8009aa8:	08007575 	.word	0x08007575
 8009aac:	08009805 	.word	0x08009805
 8009ab0:	0800ac9c 	.word	0x0800ac9c

08009ab4 <__sfputc_r>:
 8009ab4:	6893      	ldr	r3, [r2, #8]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	b410      	push	{r4}
 8009abc:	6093      	str	r3, [r2, #8]
 8009abe:	da08      	bge.n	8009ad2 <__sfputc_r+0x1e>
 8009ac0:	6994      	ldr	r4, [r2, #24]
 8009ac2:	42a3      	cmp	r3, r4
 8009ac4:	db01      	blt.n	8009aca <__sfputc_r+0x16>
 8009ac6:	290a      	cmp	r1, #10
 8009ac8:	d103      	bne.n	8009ad2 <__sfputc_r+0x1e>
 8009aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ace:	f7fe bab2 	b.w	8008036 <__swbuf_r>
 8009ad2:	6813      	ldr	r3, [r2, #0]
 8009ad4:	1c58      	adds	r0, r3, #1
 8009ad6:	6010      	str	r0, [r2, #0]
 8009ad8:	7019      	strb	r1, [r3, #0]
 8009ada:	4608      	mov	r0, r1
 8009adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <__sfputs_r>:
 8009ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae4:	4606      	mov	r6, r0
 8009ae6:	460f      	mov	r7, r1
 8009ae8:	4614      	mov	r4, r2
 8009aea:	18d5      	adds	r5, r2, r3
 8009aec:	42ac      	cmp	r4, r5
 8009aee:	d101      	bne.n	8009af4 <__sfputs_r+0x12>
 8009af0:	2000      	movs	r0, #0
 8009af2:	e007      	b.n	8009b04 <__sfputs_r+0x22>
 8009af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af8:	463a      	mov	r2, r7
 8009afa:	4630      	mov	r0, r6
 8009afc:	f7ff ffda 	bl	8009ab4 <__sfputc_r>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d1f3      	bne.n	8009aec <__sfputs_r+0xa>
 8009b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b08 <_vfiprintf_r>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	460d      	mov	r5, r1
 8009b0e:	b09d      	sub	sp, #116	@ 0x74
 8009b10:	4614      	mov	r4, r2
 8009b12:	4698      	mov	r8, r3
 8009b14:	4606      	mov	r6, r0
 8009b16:	b118      	cbz	r0, 8009b20 <_vfiprintf_r+0x18>
 8009b18:	6a03      	ldr	r3, [r0, #32]
 8009b1a:	b90b      	cbnz	r3, 8009b20 <_vfiprintf_r+0x18>
 8009b1c:	f7fe f96c 	bl	8007df8 <__sinit>
 8009b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b22:	07d9      	lsls	r1, r3, #31
 8009b24:	d405      	bmi.n	8009b32 <_vfiprintf_r+0x2a>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	059a      	lsls	r2, r3, #22
 8009b2a:	d402      	bmi.n	8009b32 <_vfiprintf_r+0x2a>
 8009b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b2e:	f7fe fb94 	bl	800825a <__retarget_lock_acquire_recursive>
 8009b32:	89ab      	ldrh	r3, [r5, #12]
 8009b34:	071b      	lsls	r3, r3, #28
 8009b36:	d501      	bpl.n	8009b3c <_vfiprintf_r+0x34>
 8009b38:	692b      	ldr	r3, [r5, #16]
 8009b3a:	b99b      	cbnz	r3, 8009b64 <_vfiprintf_r+0x5c>
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f7fe fab8 	bl	80080b4 <__swsetup_r>
 8009b44:	b170      	cbz	r0, 8009b64 <_vfiprintf_r+0x5c>
 8009b46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b48:	07dc      	lsls	r4, r3, #31
 8009b4a:	d504      	bpl.n	8009b56 <_vfiprintf_r+0x4e>
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b50:	b01d      	add	sp, #116	@ 0x74
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b56:	89ab      	ldrh	r3, [r5, #12]
 8009b58:	0598      	lsls	r0, r3, #22
 8009b5a:	d4f7      	bmi.n	8009b4c <_vfiprintf_r+0x44>
 8009b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b5e:	f7fe fb7d 	bl	800825c <__retarget_lock_release_recursive>
 8009b62:	e7f3      	b.n	8009b4c <_vfiprintf_r+0x44>
 8009b64:	2300      	movs	r3, #0
 8009b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b72:	2330      	movs	r3, #48	@ 0x30
 8009b74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d24 <_vfiprintf_r+0x21c>
 8009b78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b7c:	f04f 0901 	mov.w	r9, #1
 8009b80:	4623      	mov	r3, r4
 8009b82:	469a      	mov	sl, r3
 8009b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b88:	b10a      	cbz	r2, 8009b8e <_vfiprintf_r+0x86>
 8009b8a:	2a25      	cmp	r2, #37	@ 0x25
 8009b8c:	d1f9      	bne.n	8009b82 <_vfiprintf_r+0x7a>
 8009b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b92:	d00b      	beq.n	8009bac <_vfiprintf_r+0xa4>
 8009b94:	465b      	mov	r3, fp
 8009b96:	4622      	mov	r2, r4
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff ffa1 	bl	8009ae2 <__sfputs_r>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f000 80a7 	beq.w	8009cf4 <_vfiprintf_r+0x1ec>
 8009ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ba8:	445a      	add	r2, fp
 8009baa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bac:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 809f 	beq.w	8009cf4 <_vfiprintf_r+0x1ec>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc0:	f10a 0a01 	add.w	sl, sl, #1
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	9307      	str	r3, [sp, #28]
 8009bc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bce:	4654      	mov	r4, sl
 8009bd0:	2205      	movs	r2, #5
 8009bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd6:	4853      	ldr	r0, [pc, #332]	@ (8009d24 <_vfiprintf_r+0x21c>)
 8009bd8:	f7f6 fb22 	bl	8000220 <memchr>
 8009bdc:	9a04      	ldr	r2, [sp, #16]
 8009bde:	b9d8      	cbnz	r0, 8009c18 <_vfiprintf_r+0x110>
 8009be0:	06d1      	lsls	r1, r2, #27
 8009be2:	bf44      	itt	mi
 8009be4:	2320      	movmi	r3, #32
 8009be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bea:	0713      	lsls	r3, r2, #28
 8009bec:	bf44      	itt	mi
 8009bee:	232b      	movmi	r3, #43	@ 0x2b
 8009bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bfa:	d015      	beq.n	8009c28 <_vfiprintf_r+0x120>
 8009bfc:	9a07      	ldr	r2, [sp, #28]
 8009bfe:	4654      	mov	r4, sl
 8009c00:	2000      	movs	r0, #0
 8009c02:	f04f 0c0a 	mov.w	ip, #10
 8009c06:	4621      	mov	r1, r4
 8009c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c0c:	3b30      	subs	r3, #48	@ 0x30
 8009c0e:	2b09      	cmp	r3, #9
 8009c10:	d94b      	bls.n	8009caa <_vfiprintf_r+0x1a2>
 8009c12:	b1b0      	cbz	r0, 8009c42 <_vfiprintf_r+0x13a>
 8009c14:	9207      	str	r2, [sp, #28]
 8009c16:	e014      	b.n	8009c42 <_vfiprintf_r+0x13a>
 8009c18:	eba0 0308 	sub.w	r3, r0, r8
 8009c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	46a2      	mov	sl, r4
 8009c26:	e7d2      	b.n	8009bce <_vfiprintf_r+0xc6>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	1d19      	adds	r1, r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	9103      	str	r1, [sp, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfbb      	ittet	lt
 8009c34:	425b      	neglt	r3, r3
 8009c36:	f042 0202 	orrlt.w	r2, r2, #2
 8009c3a:	9307      	strge	r3, [sp, #28]
 8009c3c:	9307      	strlt	r3, [sp, #28]
 8009c3e:	bfb8      	it	lt
 8009c40:	9204      	strlt	r2, [sp, #16]
 8009c42:	7823      	ldrb	r3, [r4, #0]
 8009c44:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c46:	d10a      	bne.n	8009c5e <_vfiprintf_r+0x156>
 8009c48:	7863      	ldrb	r3, [r4, #1]
 8009c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c4c:	d132      	bne.n	8009cb4 <_vfiprintf_r+0x1ac>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	1d1a      	adds	r2, r3, #4
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	9203      	str	r2, [sp, #12]
 8009c56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c5a:	3402      	adds	r4, #2
 8009c5c:	9305      	str	r3, [sp, #20]
 8009c5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d34 <_vfiprintf_r+0x22c>
 8009c62:	7821      	ldrb	r1, [r4, #0]
 8009c64:	2203      	movs	r2, #3
 8009c66:	4650      	mov	r0, sl
 8009c68:	f7f6 fada 	bl	8000220 <memchr>
 8009c6c:	b138      	cbz	r0, 8009c7e <_vfiprintf_r+0x176>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	eba0 000a 	sub.w	r0, r0, sl
 8009c74:	2240      	movs	r2, #64	@ 0x40
 8009c76:	4082      	lsls	r2, r0
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	3401      	adds	r4, #1
 8009c7c:	9304      	str	r3, [sp, #16]
 8009c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c82:	4829      	ldr	r0, [pc, #164]	@ (8009d28 <_vfiprintf_r+0x220>)
 8009c84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c88:	2206      	movs	r2, #6
 8009c8a:	f7f6 fac9 	bl	8000220 <memchr>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d03f      	beq.n	8009d12 <_vfiprintf_r+0x20a>
 8009c92:	4b26      	ldr	r3, [pc, #152]	@ (8009d2c <_vfiprintf_r+0x224>)
 8009c94:	bb1b      	cbnz	r3, 8009cde <_vfiprintf_r+0x1d6>
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	3307      	adds	r3, #7
 8009c9a:	f023 0307 	bic.w	r3, r3, #7
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	9303      	str	r3, [sp, #12]
 8009ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca4:	443b      	add	r3, r7
 8009ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ca8:	e76a      	b.n	8009b80 <_vfiprintf_r+0x78>
 8009caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cae:	460c      	mov	r4, r1
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	e7a8      	b.n	8009c06 <_vfiprintf_r+0xfe>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	3401      	adds	r4, #1
 8009cb8:	9305      	str	r3, [sp, #20]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	f04f 0c0a 	mov.w	ip, #10
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cc6:	3a30      	subs	r2, #48	@ 0x30
 8009cc8:	2a09      	cmp	r2, #9
 8009cca:	d903      	bls.n	8009cd4 <_vfiprintf_r+0x1cc>
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d0c6      	beq.n	8009c5e <_vfiprintf_r+0x156>
 8009cd0:	9105      	str	r1, [sp, #20]
 8009cd2:	e7c4      	b.n	8009c5e <_vfiprintf_r+0x156>
 8009cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cd8:	4604      	mov	r4, r0
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e7f0      	b.n	8009cc0 <_vfiprintf_r+0x1b8>
 8009cde:	ab03      	add	r3, sp, #12
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	462a      	mov	r2, r5
 8009ce4:	4b12      	ldr	r3, [pc, #72]	@ (8009d30 <_vfiprintf_r+0x228>)
 8009ce6:	a904      	add	r1, sp, #16
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7fd fc43 	bl	8007574 <_printf_float>
 8009cee:	4607      	mov	r7, r0
 8009cf0:	1c78      	adds	r0, r7, #1
 8009cf2:	d1d6      	bne.n	8009ca2 <_vfiprintf_r+0x19a>
 8009cf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cf6:	07d9      	lsls	r1, r3, #31
 8009cf8:	d405      	bmi.n	8009d06 <_vfiprintf_r+0x1fe>
 8009cfa:	89ab      	ldrh	r3, [r5, #12]
 8009cfc:	059a      	lsls	r2, r3, #22
 8009cfe:	d402      	bmi.n	8009d06 <_vfiprintf_r+0x1fe>
 8009d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d02:	f7fe faab 	bl	800825c <__retarget_lock_release_recursive>
 8009d06:	89ab      	ldrh	r3, [r5, #12]
 8009d08:	065b      	lsls	r3, r3, #25
 8009d0a:	f53f af1f 	bmi.w	8009b4c <_vfiprintf_r+0x44>
 8009d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d10:	e71e      	b.n	8009b50 <_vfiprintf_r+0x48>
 8009d12:	ab03      	add	r3, sp, #12
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	462a      	mov	r2, r5
 8009d18:	4b05      	ldr	r3, [pc, #20]	@ (8009d30 <_vfiprintf_r+0x228>)
 8009d1a:	a904      	add	r1, sp, #16
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7fd fec1 	bl	8007aa4 <_printf_i>
 8009d22:	e7e4      	b.n	8009cee <_vfiprintf_r+0x1e6>
 8009d24:	0800ac96 	.word	0x0800ac96
 8009d28:	0800aca0 	.word	0x0800aca0
 8009d2c:	08007575 	.word	0x08007575
 8009d30:	08009ae3 	.word	0x08009ae3
 8009d34:	0800ac9c 	.word	0x0800ac9c

08009d38 <__sflush_r>:
 8009d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d40:	0716      	lsls	r6, r2, #28
 8009d42:	4605      	mov	r5, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	d454      	bmi.n	8009df2 <__sflush_r+0xba>
 8009d48:	684b      	ldr	r3, [r1, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dc02      	bgt.n	8009d54 <__sflush_r+0x1c>
 8009d4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	dd48      	ble.n	8009de6 <__sflush_r+0xae>
 8009d54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d56:	2e00      	cmp	r6, #0
 8009d58:	d045      	beq.n	8009de6 <__sflush_r+0xae>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d60:	682f      	ldr	r7, [r5, #0]
 8009d62:	6a21      	ldr	r1, [r4, #32]
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	d030      	beq.n	8009dca <__sflush_r+0x92>
 8009d68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	0759      	lsls	r1, r3, #29
 8009d6e:	d505      	bpl.n	8009d7c <__sflush_r+0x44>
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d76:	b10b      	cbz	r3, 8009d7c <__sflush_r+0x44>
 8009d78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d80:	6a21      	ldr	r1, [r4, #32]
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b0      	blx	r6
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	d106      	bne.n	8009d9a <__sflush_r+0x62>
 8009d8c:	6829      	ldr	r1, [r5, #0]
 8009d8e:	291d      	cmp	r1, #29
 8009d90:	d82b      	bhi.n	8009dea <__sflush_r+0xb2>
 8009d92:	4a2a      	ldr	r2, [pc, #168]	@ (8009e3c <__sflush_r+0x104>)
 8009d94:	40ca      	lsrs	r2, r1
 8009d96:	07d6      	lsls	r6, r2, #31
 8009d98:	d527      	bpl.n	8009dea <__sflush_r+0xb2>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	6062      	str	r2, [r4, #4]
 8009d9e:	04d9      	lsls	r1, r3, #19
 8009da0:	6922      	ldr	r2, [r4, #16]
 8009da2:	6022      	str	r2, [r4, #0]
 8009da4:	d504      	bpl.n	8009db0 <__sflush_r+0x78>
 8009da6:	1c42      	adds	r2, r0, #1
 8009da8:	d101      	bne.n	8009dae <__sflush_r+0x76>
 8009daa:	682b      	ldr	r3, [r5, #0]
 8009dac:	b903      	cbnz	r3, 8009db0 <__sflush_r+0x78>
 8009dae:	6560      	str	r0, [r4, #84]	@ 0x54
 8009db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009db2:	602f      	str	r7, [r5, #0]
 8009db4:	b1b9      	cbz	r1, 8009de6 <__sflush_r+0xae>
 8009db6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dba:	4299      	cmp	r1, r3
 8009dbc:	d002      	beq.n	8009dc4 <__sflush_r+0x8c>
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f7ff f8a6 	bl	8008f10 <_free_r>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dc8:	e00d      	b.n	8009de6 <__sflush_r+0xae>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b0      	blx	r6
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	1c50      	adds	r0, r2, #1
 8009dd4:	d1c9      	bne.n	8009d6a <__sflush_r+0x32>
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c6      	beq.n	8009d6a <__sflush_r+0x32>
 8009ddc:	2b1d      	cmp	r3, #29
 8009dde:	d001      	beq.n	8009de4 <__sflush_r+0xac>
 8009de0:	2b16      	cmp	r3, #22
 8009de2:	d11e      	bne.n	8009e22 <__sflush_r+0xea>
 8009de4:	602f      	str	r7, [r5, #0]
 8009de6:	2000      	movs	r0, #0
 8009de8:	e022      	b.n	8009e30 <__sflush_r+0xf8>
 8009dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dee:	b21b      	sxth	r3, r3
 8009df0:	e01b      	b.n	8009e2a <__sflush_r+0xf2>
 8009df2:	690f      	ldr	r7, [r1, #16]
 8009df4:	2f00      	cmp	r7, #0
 8009df6:	d0f6      	beq.n	8009de6 <__sflush_r+0xae>
 8009df8:	0793      	lsls	r3, r2, #30
 8009dfa:	680e      	ldr	r6, [r1, #0]
 8009dfc:	bf08      	it	eq
 8009dfe:	694b      	ldreq	r3, [r1, #20]
 8009e00:	600f      	str	r7, [r1, #0]
 8009e02:	bf18      	it	ne
 8009e04:	2300      	movne	r3, #0
 8009e06:	eba6 0807 	sub.w	r8, r6, r7
 8009e0a:	608b      	str	r3, [r1, #8]
 8009e0c:	f1b8 0f00 	cmp.w	r8, #0
 8009e10:	dde9      	ble.n	8009de6 <__sflush_r+0xae>
 8009e12:	6a21      	ldr	r1, [r4, #32]
 8009e14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e16:	4643      	mov	r3, r8
 8009e18:	463a      	mov	r2, r7
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b0      	blx	r6
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	dc08      	bgt.n	8009e34 <__sflush_r+0xfc>
 8009e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e34:	4407      	add	r7, r0
 8009e36:	eba8 0800 	sub.w	r8, r8, r0
 8009e3a:	e7e7      	b.n	8009e0c <__sflush_r+0xd4>
 8009e3c:	20400001 	.word	0x20400001

08009e40 <_fflush_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	690b      	ldr	r3, [r1, #16]
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	b913      	cbnz	r3, 8009e50 <_fflush_r+0x10>
 8009e4a:	2500      	movs	r5, #0
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	b118      	cbz	r0, 8009e5a <_fflush_r+0x1a>
 8009e52:	6a03      	ldr	r3, [r0, #32]
 8009e54:	b90b      	cbnz	r3, 8009e5a <_fflush_r+0x1a>
 8009e56:	f7fd ffcf 	bl	8007df8 <__sinit>
 8009e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0f3      	beq.n	8009e4a <_fflush_r+0xa>
 8009e62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e64:	07d0      	lsls	r0, r2, #31
 8009e66:	d404      	bmi.n	8009e72 <_fflush_r+0x32>
 8009e68:	0599      	lsls	r1, r3, #22
 8009e6a:	d402      	bmi.n	8009e72 <_fflush_r+0x32>
 8009e6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e6e:	f7fe f9f4 	bl	800825a <__retarget_lock_acquire_recursive>
 8009e72:	4628      	mov	r0, r5
 8009e74:	4621      	mov	r1, r4
 8009e76:	f7ff ff5f 	bl	8009d38 <__sflush_r>
 8009e7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e7c:	07da      	lsls	r2, r3, #31
 8009e7e:	4605      	mov	r5, r0
 8009e80:	d4e4      	bmi.n	8009e4c <_fflush_r+0xc>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	059b      	lsls	r3, r3, #22
 8009e86:	d4e1      	bmi.n	8009e4c <_fflush_r+0xc>
 8009e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e8a:	f7fe f9e7 	bl	800825c <__retarget_lock_release_recursive>
 8009e8e:	e7dd      	b.n	8009e4c <_fflush_r+0xc>

08009e90 <__swhatbuf_r>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	460c      	mov	r4, r1
 8009e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	b096      	sub	sp, #88	@ 0x58
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	461e      	mov	r6, r3
 8009ea0:	da0d      	bge.n	8009ebe <__swhatbuf_r+0x2e>
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ea8:	f04f 0100 	mov.w	r1, #0
 8009eac:	bf14      	ite	ne
 8009eae:	2340      	movne	r3, #64	@ 0x40
 8009eb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	6031      	str	r1, [r6, #0]
 8009eb8:	602b      	str	r3, [r5, #0]
 8009eba:	b016      	add	sp, #88	@ 0x58
 8009ebc:	bd70      	pop	{r4, r5, r6, pc}
 8009ebe:	466a      	mov	r2, sp
 8009ec0:	f000 f862 	bl	8009f88 <_fstat_r>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	dbec      	blt.n	8009ea2 <__swhatbuf_r+0x12>
 8009ec8:	9901      	ldr	r1, [sp, #4]
 8009eca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ece:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ed2:	4259      	negs	r1, r3
 8009ed4:	4159      	adcs	r1, r3
 8009ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eda:	e7eb      	b.n	8009eb4 <__swhatbuf_r+0x24>

08009edc <__smakebuf_r>:
 8009edc:	898b      	ldrh	r3, [r1, #12]
 8009ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ee0:	079d      	lsls	r5, r3, #30
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	d507      	bpl.n	8009ef8 <__smakebuf_r+0x1c>
 8009ee8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	6123      	str	r3, [r4, #16]
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	6163      	str	r3, [r4, #20]
 8009ef4:	b003      	add	sp, #12
 8009ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef8:	ab01      	add	r3, sp, #4
 8009efa:	466a      	mov	r2, sp
 8009efc:	f7ff ffc8 	bl	8009e90 <__swhatbuf_r>
 8009f00:	9f00      	ldr	r7, [sp, #0]
 8009f02:	4605      	mov	r5, r0
 8009f04:	4639      	mov	r1, r7
 8009f06:	4630      	mov	r0, r6
 8009f08:	f7ff f876 	bl	8008ff8 <_malloc_r>
 8009f0c:	b948      	cbnz	r0, 8009f22 <__smakebuf_r+0x46>
 8009f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f12:	059a      	lsls	r2, r3, #22
 8009f14:	d4ee      	bmi.n	8009ef4 <__smakebuf_r+0x18>
 8009f16:	f023 0303 	bic.w	r3, r3, #3
 8009f1a:	f043 0302 	orr.w	r3, r3, #2
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	e7e2      	b.n	8009ee8 <__smakebuf_r+0xc>
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	6020      	str	r0, [r4, #0]
 8009f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	9b01      	ldr	r3, [sp, #4]
 8009f2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f32:	b15b      	cbz	r3, 8009f4c <__smakebuf_r+0x70>
 8009f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f000 f837 	bl	8009fac <_isatty_r>
 8009f3e:	b128      	cbz	r0, 8009f4c <__smakebuf_r+0x70>
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	f023 0303 	bic.w	r3, r3, #3
 8009f46:	f043 0301 	orr.w	r3, r3, #1
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	431d      	orrs	r5, r3
 8009f50:	81a5      	strh	r5, [r4, #12]
 8009f52:	e7cf      	b.n	8009ef4 <__smakebuf_r+0x18>

08009f54 <memmove>:
 8009f54:	4288      	cmp	r0, r1
 8009f56:	b510      	push	{r4, lr}
 8009f58:	eb01 0402 	add.w	r4, r1, r2
 8009f5c:	d902      	bls.n	8009f64 <memmove+0x10>
 8009f5e:	4284      	cmp	r4, r0
 8009f60:	4623      	mov	r3, r4
 8009f62:	d807      	bhi.n	8009f74 <memmove+0x20>
 8009f64:	1e43      	subs	r3, r0, #1
 8009f66:	42a1      	cmp	r1, r4
 8009f68:	d008      	beq.n	8009f7c <memmove+0x28>
 8009f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f72:	e7f8      	b.n	8009f66 <memmove+0x12>
 8009f74:	4402      	add	r2, r0
 8009f76:	4601      	mov	r1, r0
 8009f78:	428a      	cmp	r2, r1
 8009f7a:	d100      	bne.n	8009f7e <memmove+0x2a>
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f86:	e7f7      	b.n	8009f78 <memmove+0x24>

08009f88 <_fstat_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	@ (8009fa8 <_fstat_r+0x20>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	f7f8 f88d 	bl	80020b4 <_fstat>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d102      	bne.n	8009fa4 <_fstat_r+0x1c>
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	b103      	cbz	r3, 8009fa4 <_fstat_r+0x1c>
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000938 	.word	0x20000938

08009fac <_isatty_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4d06      	ldr	r5, [pc, #24]	@ (8009fc8 <_isatty_r+0x1c>)
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	602b      	str	r3, [r5, #0]
 8009fb8:	f7f8 f88c 	bl	80020d4 <_isatty>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_isatty_r+0x1a>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_isatty_r+0x1a>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	20000938 	.word	0x20000938

08009fcc <_sbrk_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4d06      	ldr	r5, [pc, #24]	@ (8009fe8 <_sbrk_r+0x1c>)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	f7f8 f894 	bl	8002104 <_sbrk>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_sbrk_r+0x1a>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_sbrk_r+0x1a>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	20000938 	.word	0x20000938

08009fec <memcpy>:
 8009fec:	440a      	add	r2, r1
 8009fee:	4291      	cmp	r1, r2
 8009ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff4:	d100      	bne.n	8009ff8 <memcpy+0xc>
 8009ff6:	4770      	bx	lr
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a002:	4291      	cmp	r1, r2
 800a004:	d1f9      	bne.n	8009ffa <memcpy+0xe>
 800a006:	bd10      	pop	{r4, pc}

0800a008 <__assert_func>:
 800a008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a00a:	4614      	mov	r4, r2
 800a00c:	461a      	mov	r2, r3
 800a00e:	4b09      	ldr	r3, [pc, #36]	@ (800a034 <__assert_func+0x2c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4605      	mov	r5, r0
 800a014:	68d8      	ldr	r0, [r3, #12]
 800a016:	b14c      	cbz	r4, 800a02c <__assert_func+0x24>
 800a018:	4b07      	ldr	r3, [pc, #28]	@ (800a038 <__assert_func+0x30>)
 800a01a:	9100      	str	r1, [sp, #0]
 800a01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a020:	4906      	ldr	r1, [pc, #24]	@ (800a03c <__assert_func+0x34>)
 800a022:	462b      	mov	r3, r5
 800a024:	f000 f870 	bl	800a108 <fiprintf>
 800a028:	f000 f880 	bl	800a12c <abort>
 800a02c:	4b04      	ldr	r3, [pc, #16]	@ (800a040 <__assert_func+0x38>)
 800a02e:	461c      	mov	r4, r3
 800a030:	e7f3      	b.n	800a01a <__assert_func+0x12>
 800a032:	bf00      	nop
 800a034:	20000018 	.word	0x20000018
 800a038:	0800acb1 	.word	0x0800acb1
 800a03c:	0800acbe 	.word	0x0800acbe
 800a040:	0800acec 	.word	0x0800acec

0800a044 <_calloc_r>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	fba1 5402 	umull	r5, r4, r1, r2
 800a04a:	b934      	cbnz	r4, 800a05a <_calloc_r+0x16>
 800a04c:	4629      	mov	r1, r5
 800a04e:	f7fe ffd3 	bl	8008ff8 <_malloc_r>
 800a052:	4606      	mov	r6, r0
 800a054:	b928      	cbnz	r0, 800a062 <_calloc_r+0x1e>
 800a056:	4630      	mov	r0, r6
 800a058:	bd70      	pop	{r4, r5, r6, pc}
 800a05a:	220c      	movs	r2, #12
 800a05c:	6002      	str	r2, [r0, #0]
 800a05e:	2600      	movs	r6, #0
 800a060:	e7f9      	b.n	800a056 <_calloc_r+0x12>
 800a062:	462a      	mov	r2, r5
 800a064:	4621      	mov	r1, r4
 800a066:	f7fe f87b 	bl	8008160 <memset>
 800a06a:	e7f4      	b.n	800a056 <_calloc_r+0x12>

0800a06c <__ascii_mbtowc>:
 800a06c:	b082      	sub	sp, #8
 800a06e:	b901      	cbnz	r1, 800a072 <__ascii_mbtowc+0x6>
 800a070:	a901      	add	r1, sp, #4
 800a072:	b142      	cbz	r2, 800a086 <__ascii_mbtowc+0x1a>
 800a074:	b14b      	cbz	r3, 800a08a <__ascii_mbtowc+0x1e>
 800a076:	7813      	ldrb	r3, [r2, #0]
 800a078:	600b      	str	r3, [r1, #0]
 800a07a:	7812      	ldrb	r2, [r2, #0]
 800a07c:	1e10      	subs	r0, r2, #0
 800a07e:	bf18      	it	ne
 800a080:	2001      	movne	r0, #1
 800a082:	b002      	add	sp, #8
 800a084:	4770      	bx	lr
 800a086:	4610      	mov	r0, r2
 800a088:	e7fb      	b.n	800a082 <__ascii_mbtowc+0x16>
 800a08a:	f06f 0001 	mvn.w	r0, #1
 800a08e:	e7f8      	b.n	800a082 <__ascii_mbtowc+0x16>

0800a090 <_realloc_r>:
 800a090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a094:	4607      	mov	r7, r0
 800a096:	4614      	mov	r4, r2
 800a098:	460d      	mov	r5, r1
 800a09a:	b921      	cbnz	r1, 800a0a6 <_realloc_r+0x16>
 800a09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	f7fe bfa9 	b.w	8008ff8 <_malloc_r>
 800a0a6:	b92a      	cbnz	r2, 800a0b4 <_realloc_r+0x24>
 800a0a8:	f7fe ff32 	bl	8008f10 <_free_r>
 800a0ac:	4625      	mov	r5, r4
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b4:	f000 f841 	bl	800a13a <_malloc_usable_size_r>
 800a0b8:	4284      	cmp	r4, r0
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	d802      	bhi.n	800a0c4 <_realloc_r+0x34>
 800a0be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0c2:	d8f4      	bhi.n	800a0ae <_realloc_r+0x1e>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f7fe ff96 	bl	8008ff8 <_malloc_r>
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	b908      	cbnz	r0, 800a0d4 <_realloc_r+0x44>
 800a0d0:	4645      	mov	r5, r8
 800a0d2:	e7ec      	b.n	800a0ae <_realloc_r+0x1e>
 800a0d4:	42b4      	cmp	r4, r6
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	bf28      	it	cs
 800a0dc:	4632      	movcs	r2, r6
 800a0de:	f7ff ff85 	bl	8009fec <memcpy>
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f7fe ff13 	bl	8008f10 <_free_r>
 800a0ea:	e7f1      	b.n	800a0d0 <_realloc_r+0x40>

0800a0ec <__ascii_wctomb>:
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4608      	mov	r0, r1
 800a0f0:	b141      	cbz	r1, 800a104 <__ascii_wctomb+0x18>
 800a0f2:	2aff      	cmp	r2, #255	@ 0xff
 800a0f4:	d904      	bls.n	800a100 <__ascii_wctomb+0x14>
 800a0f6:	228a      	movs	r2, #138	@ 0x8a
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fe:	4770      	bx	lr
 800a100:	700a      	strb	r2, [r1, #0]
 800a102:	2001      	movs	r0, #1
 800a104:	4770      	bx	lr
	...

0800a108 <fiprintf>:
 800a108:	b40e      	push	{r1, r2, r3}
 800a10a:	b503      	push	{r0, r1, lr}
 800a10c:	4601      	mov	r1, r0
 800a10e:	ab03      	add	r3, sp, #12
 800a110:	4805      	ldr	r0, [pc, #20]	@ (800a128 <fiprintf+0x20>)
 800a112:	f853 2b04 	ldr.w	r2, [r3], #4
 800a116:	6800      	ldr	r0, [r0, #0]
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	f7ff fcf5 	bl	8009b08 <_vfiprintf_r>
 800a11e:	b002      	add	sp, #8
 800a120:	f85d eb04 	ldr.w	lr, [sp], #4
 800a124:	b003      	add	sp, #12
 800a126:	4770      	bx	lr
 800a128:	20000018 	.word	0x20000018

0800a12c <abort>:
 800a12c:	b508      	push	{r3, lr}
 800a12e:	2006      	movs	r0, #6
 800a130:	f000 f834 	bl	800a19c <raise>
 800a134:	2001      	movs	r0, #1
 800a136:	f7f7 ff6d 	bl	8002014 <_exit>

0800a13a <_malloc_usable_size_r>:
 800a13a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a13e:	1f18      	subs	r0, r3, #4
 800a140:	2b00      	cmp	r3, #0
 800a142:	bfbc      	itt	lt
 800a144:	580b      	ldrlt	r3, [r1, r0]
 800a146:	18c0      	addlt	r0, r0, r3
 800a148:	4770      	bx	lr

0800a14a <_raise_r>:
 800a14a:	291f      	cmp	r1, #31
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4605      	mov	r5, r0
 800a150:	460c      	mov	r4, r1
 800a152:	d904      	bls.n	800a15e <_raise_r+0x14>
 800a154:	2316      	movs	r3, #22
 800a156:	6003      	str	r3, [r0, #0]
 800a158:	f04f 30ff 	mov.w	r0, #4294967295
 800a15c:	bd38      	pop	{r3, r4, r5, pc}
 800a15e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a160:	b112      	cbz	r2, 800a168 <_raise_r+0x1e>
 800a162:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a166:	b94b      	cbnz	r3, 800a17c <_raise_r+0x32>
 800a168:	4628      	mov	r0, r5
 800a16a:	f000 f831 	bl	800a1d0 <_getpid_r>
 800a16e:	4622      	mov	r2, r4
 800a170:	4601      	mov	r1, r0
 800a172:	4628      	mov	r0, r5
 800a174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a178:	f000 b818 	b.w	800a1ac <_kill_r>
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d00a      	beq.n	800a196 <_raise_r+0x4c>
 800a180:	1c59      	adds	r1, r3, #1
 800a182:	d103      	bne.n	800a18c <_raise_r+0x42>
 800a184:	2316      	movs	r3, #22
 800a186:	6003      	str	r3, [r0, #0]
 800a188:	2001      	movs	r0, #1
 800a18a:	e7e7      	b.n	800a15c <_raise_r+0x12>
 800a18c:	2100      	movs	r1, #0
 800a18e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a192:	4620      	mov	r0, r4
 800a194:	4798      	blx	r3
 800a196:	2000      	movs	r0, #0
 800a198:	e7e0      	b.n	800a15c <_raise_r+0x12>
	...

0800a19c <raise>:
 800a19c:	4b02      	ldr	r3, [pc, #8]	@ (800a1a8 <raise+0xc>)
 800a19e:	4601      	mov	r1, r0
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	f7ff bfd2 	b.w	800a14a <_raise_r>
 800a1a6:	bf00      	nop
 800a1a8:	20000018 	.word	0x20000018

0800a1ac <_kill_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4d07      	ldr	r5, [pc, #28]	@ (800a1cc <_kill_r+0x20>)
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	602b      	str	r3, [r5, #0]
 800a1ba:	f7f7 ff1b 	bl	8001ff4 <_kill>
 800a1be:	1c43      	adds	r3, r0, #1
 800a1c0:	d102      	bne.n	800a1c8 <_kill_r+0x1c>
 800a1c2:	682b      	ldr	r3, [r5, #0]
 800a1c4:	b103      	cbz	r3, 800a1c8 <_kill_r+0x1c>
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000938 	.word	0x20000938

0800a1d0 <_getpid_r>:
 800a1d0:	f7f7 bf08 	b.w	8001fe4 <_getpid>

0800a1d4 <_init>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	bf00      	nop
 800a1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1da:	bc08      	pop	{r3}
 800a1dc:	469e      	mov	lr, r3
 800a1de:	4770      	bx	lr

0800a1e0 <_fini>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	bf00      	nop
 800a1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e6:	bc08      	pop	{r3}
 800a1e8:	469e      	mov	lr, r3
 800a1ea:	4770      	bx	lr
