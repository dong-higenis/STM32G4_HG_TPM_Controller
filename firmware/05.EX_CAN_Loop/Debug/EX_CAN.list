
EX_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f48  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007128  08007128  00008128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007554  08007554  000091dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007554  08007554  00008554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800755c  0800755c  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800755c  0800755c  0000855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007560  08007560  00008560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007564  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001dc  08007740  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08007740  00009498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7c1  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002397  00000000  00000000  000189cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0001ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ab  00000000  00000000  0001ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e95b  00000000  00000000  0001c3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2ac  00000000  00000000  0003ad2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd90d  00000000  00000000  00049fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001078e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a0  00000000  00000000  0010792c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010bccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007110 	.word	0x08007110

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08007110 	.word	0x08007110

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f2a:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <MX_FDCAN1_Init+0x8c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f36:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f3a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f3e:	2203      	movs	r2, #3
 8000f40:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f62:	220d      	movs	r2, #13
 8000f64:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f68:	2206      	movs	r2, #6
 8000f6a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f98:	f000 fd40 	bl	8001a1c <HAL_FDCAN_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fa2:	f000 f9a7 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f8 	.word	0x200001f8
 8000fb0:	40006400 	.word	0x40006400

08000fb4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09a      	sub	sp, #104	@ 0x68
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2244      	movs	r2, #68	@ 0x44
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fa0b 	bl	80053f0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <HAL_FDCAN_MspInit+0xcc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d149      	bne.n	8001078 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fee:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 faf1 	bl	80035dc <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001000:	f000 f978 	bl	80012f4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001034:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001038:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001046:	2309      	movs	r3, #9
 8001048:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001054:	f001 fb5e 	bl	8002714 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2015      	movs	r0, #21
 800105e:	f000 fca8 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001062:	2015      	movs	r0, #21
 8001064:	f000 fcbf 	bl	80019e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2016      	movs	r0, #22
 800106e:	f000 fca0 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001072:	2016      	movs	r0, #22
 8001074:	f000 fcb7 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001078:	bf00      	nop
 800107a:	3768      	adds	r7, #104	@ 0x68
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40006400 	.word	0x40006400
 8001084:	40021000 	.word	0x40021000

08001088 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a14      	ldr	r2, [pc, #80]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_GPIO_Init+0x5c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80010f0:	1d39      	adds	r1, r7, #4
 80010f2:	2364      	movs	r3, #100	@ 0x64
 80010f4:	2201      	movs	r2, #1
 80010f6:	4804      	ldr	r0, [pc, #16]	@ (8001108 <__io_putchar+0x20>)
 80010f8:	f002 fcb0 	bl	8003a5c <HAL_UART_Transmit>
	return ch;
 80010fc:	687b      	ldr	r3, [r7, #4]
} //printf 함수를 사용하기 위한 함수.
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200002b4 	.word	0x200002b4

0800110c <FDCAN_Init>:


void FDCAN_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0

  // CAN BUS상 특정한 can_id 값에서 전송된 메시지만을 수신하기 위해 필터를 설정합니다.

	  //========================================================
	  FDCAN_FilterTypeDef sFilterConfig =
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
	    { 0 };
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterIndex = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800112a:	2302      	movs	r3, #2
 800112c:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800112e:	2301      	movs	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID1 = 0x500; // 받고싶은 id
 8001132:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001136:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID2 = 0x7FF;  // 11비트 모두 비교 = 정확 일치 ( 이걸로 FilterID1 에서 지정한 값 기준 범위지정 가능! )
 8001138:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800113c:	61bb      	str	r3, [r7, #24]
	  if (HAL_FDCAN_ConfigFilter (&hfdcan1, &sFilterConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <FDCAN_Init+0x7c>)
 8001144:	f000 fdc4 	bl	8001cd0 <HAL_FDCAN_ConfigFilter>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <FDCAN_Init+0x46>
	  {
	    Error_Handler ();
 800114e:	f000 f8d1 	bl	80012f4 <Error_Handler>
	  //========================================================

	  // CAN 실행

	  HAL_StatusTypeDef result;
	  result = HAL_FDCAN_Start (&hfdcan1);
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <FDCAN_Init+0x7c>)
 8001154:	f000 fe16 	bl	8001d84 <HAL_FDCAN_Start>
 8001158:	4603      	mov	r3, r0
 800115a:	77fb      	strb	r3, [r7, #31]
	  if (result != HAL_OK)
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <FDCAN_Init+0x5c>
	  {
	    printf ("FDCAN Start 실패\r\n");
 8001162:	480a      	ldr	r0, [pc, #40]	@ (800118c <FDCAN_Init+0x80>)
 8001164:	f004 f864 	bl	8005230 <puts>
	  }

	  HAL_FDCAN_ActivateNotification (&hfdcan1,
 8001168:	2200      	movs	r2, #0
 800116a:	2101      	movs	r1, #1
 800116c:	4806      	ldr	r0, [pc, #24]	@ (8001188 <FDCAN_Init+0x7c>)
 800116e:	f000 ff7d 	bl	800206c <HAL_FDCAN_ActivateNotification>
	  FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
	  if (result != HAL_OK)
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <FDCAN_Init+0x72>
	  {
	    printf ("FDCAN Notification 등록 실패\r\n");
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <FDCAN_Init+0x84>)
 800117a:	f004 f859 	bl	8005230 <puts>
	  }
}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001f8 	.word	0x200001f8
 800118c:	08007128 	.word	0x08007128
 8001190:	0800713c 	.word	0x0800713c

08001194 <FDCAN_SendMessage>:

void
FDCAN_SendMessage (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0


  txHeader.Identifier = 0x500; // 전송할때 같이 보내는 can_id
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 800119a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800119e:	601a      	str	r2, [r3, #0]
  txHeader.IdType = FDCAN_STANDARD_ID;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011ae:	2208      	movs	r2, #8
 80011b0:	60da      	str	r2, [r3, #12]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  txHeader.MessageMarker = 0;
 80011ca:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]

  HAL_FDCAN_AddMessageToTxFifoQ (&hfdcan1, &txHeader, can_tx); // 보내기!!
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <FDCAN_SendMessage+0x50>)
 80011d2:	4903      	ldr	r1, [pc, #12]	@ (80011e0 <FDCAN_SendMessage+0x4c>)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <FDCAN_SendMessage+0x54>)
 80011d6:	f000 fdfd 	bl	8001dd4 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000025c 	.word	0x2000025c
 80011e4:	20000000 	.word	0x20000000
 80011e8:	200001f8 	.word	0x200001f8

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f000 fa93 	bl	800171a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f80c 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f7ff ff46 	bl	8001088 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011fc:	f000 f9c0 	bl	8001580 <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 8001200:	f7ff fe90 	bl	8000f24 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Init();
 8001204:	f7ff ff82 	bl	800110c <FDCAN_Init>
  FDCAN_SendMessage();
 8001208:	f7ff ffc4 	bl	8001194 <FDCAN_SendMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <main+0x20>

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	@ 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2238      	movs	r2, #56	@ 0x38
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f004 f8e6 	bl	80053f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001232:	2000      	movs	r0, #0
 8001234:	f001 fbf0 	bl	8002a18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	2301      	movs	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001240:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	2302      	movs	r3, #2
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001246:	2303      	movs	r3, #3
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800124a:	2301      	movs	r3, #1
 800124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800124e:	2328      	movs	r3, #40	@ 0x28
 8001250:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fc8c 	bl	8002b80 <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800126e:	f000 f841 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
 8001274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001276:	2303      	movs	r3, #3
 8001278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2104      	movs	r1, #4
 800128a:	4618      	mov	r0, r3
 800128c:	f001 ff8a 	bl	80031a4 <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001296:	f000 f82d 	bl	80012f4 <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3750      	adds	r7, #80	@ 0x50
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_FDCAN_RxFifo0Callback>:

// =========== CAN 수신 콜백함수 추가!! ========================

void
HAL_FDCAN_RxFifo0Callback (FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]


	  if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d010      	beq.n	80012da <HAL_FDCAN_RxFifo0Callback+0x36>
	  {
	    HAL_FDCAN_GetRxMessage (hfdcan, FDCAN_RX_FIFO0, &rxHeader, can_rx);
 80012b8:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80012ba:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0x44>)
 80012bc:	2140      	movs	r1, #64	@ 0x40
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fdcc 	bl	8001e5c <HAL_FDCAN_GetRxMessage>
	    if(rxHeader.Identifier != 0x500)
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <HAL_FDCAN_RxFifo0Callback+0x44>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80012cc:	d002      	beq.n	80012d4 <HAL_FDCAN_RxFifo0Callback+0x30>
	    {
	    	printf("filter not worked!!\r\n");
 80012ce:	4807      	ldr	r0, [pc, #28]	@ (80012ec <HAL_FDCAN_RxFifo0Callback+0x48>)
 80012d0:	f003 ffae 	bl	8005230 <puts>
	    }
	    printf("CAN Message Alived!!\r\n");
 80012d4:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80012d6:	f003 ffab 	bl	8005230 <puts>
	  }

}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200002a8 	.word	0x200002a8
 80012e8:	20000280 	.word	0x20000280
 80012ec:	08007160 	.word	0x08007160
 80012f0:	08007178 	.word	0x08007178

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_MspInit+0x44>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130a:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <HAL_MspInit+0x44>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6613      	str	r3, [r2, #96]	@ 0x60
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HAL_MspInit+0x44>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_MspInit+0x44>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <HAL_MspInit+0x44>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	6593      	str	r3, [r2, #88]	@ 0x58
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_MspInit+0x44>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001336:	f001 fc13 	bl	8002b60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <NMI_Handler+0x4>

08001350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <MemManage_Handler+0x4>

08001360 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <UsageFault_Handler+0x4>

08001370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139e:	f000 fa0f 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <FDCAN1_IT0_IRQHandler+0x10>)
 80013ae:	f000 ff43 	bl	8002238 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001f8 	.word	0x200001f8

080013bc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80013c0:	4802      	ldr	r0, [pc, #8]	@ (80013cc <FDCAN1_IT1_IRQHandler+0x10>)
 80013c2:	f000 ff39 	bl	8002238 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200001f8 	.word	0x200001f8

080013d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return 1;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_kill>:

int _kill(int pid, int sig)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ea:	f004 f853 	bl	8005494 <__errno>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2216      	movs	r2, #22
 80013f2:	601a      	str	r2, [r3, #0]
  return -1;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_exit>:

void _exit (int status)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ffe7 	bl	80013e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001412:	bf00      	nop
 8001414:	e7fd      	b.n	8001412 <_exit+0x12>

08001416 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e00a      	b.n	800143e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001428:	f3af 8000 	nop.w
 800142c:	4601      	mov	r1, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	60ba      	str	r2, [r7, #8]
 8001434:	b2ca      	uxtb	r2, r1
 8001436:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbf0      	blt.n	8001428 <_read+0x12>
  }

  return len;
 8001446:	687b      	ldr	r3, [r7, #4]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e009      	b.n	8001476 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	60ba      	str	r2, [r7, #8]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe3c 	bl	80010e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	dbf1      	blt.n	8001462 <_write+0x12>
  }
  return len;
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_close>:

int _close(int file)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b0:	605a      	str	r2, [r3, #4]
  return 0;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_isatty>:

int _isatty(int file)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f003 ffb8 	bl	8005494 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20008000 	.word	0x20008000
 8001550:	00000400 	.word	0x00000400
 8001554:	200002b0 	.word	0x200002b0
 8001558:	20000498 	.word	0x20000498

0800155c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	@ (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001584:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 8001586:	4a23      	ldr	r2, [pc, #140]	@ (8001614 <MX_USART1_UART_Init+0x94>)
 8001588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c8:	4811      	ldr	r0, [pc, #68]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015ca:	f002 f9f7 	bl	80039bc <HAL_UART_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015d4:	f7ff fe8e 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d8:	2100      	movs	r1, #0
 80015da:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015dc:	f002 fff0 	bl	80045c0 <HAL_UARTEx_SetTxFifoThreshold>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015e6:	f7ff fe85 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ea:	2100      	movs	r1, #0
 80015ec:	4808      	ldr	r0, [pc, #32]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015ee:	f003 f825 	bl	800463c <HAL_UARTEx_SetRxFifoThreshold>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015f8:	f7ff fe7c 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	@ (8001610 <MX_USART1_UART_Init+0x90>)
 80015fe:	f002 ffa6 	bl	800454e <HAL_UARTEx_DisableFifoMode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001608:	f7ff fe74 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200002b4 	.word	0x200002b4
 8001614:	40013800 	.word	0x40013800

08001618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09a      	sub	sp, #104	@ 0x68
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	2244      	movs	r2, #68	@ 0x44
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fed9 	bl	80053f0 <memset>
  if(uartHandle->Instance==USART1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1e      	ldr	r2, [pc, #120]	@ (80016bc <HAL_UART_MspInit+0xa4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d135      	bne.n	80016b4 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4618      	mov	r0, r3
 8001656:	f001 ffc1 	bl	80035dc <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001660:	f7ff fe48 	bl	80012f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001664:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_UART_MspInit+0xa8>)
 8001666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001668:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <HAL_UART_MspInit+0xa8>)
 800166a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <HAL_UART_MspInit+0xa8>)
 8001672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <HAL_UART_MspInit+0xa8>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001680:	4a0f      	ldr	r2, [pc, #60]	@ (80016c0 <HAL_UART_MspInit+0xa8>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_UART_MspInit+0xa8>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1_TXD_Pin|U1_RXD_Pin;
 8001694:	23c0      	movs	r3, #192	@ 0xc0
 8001696:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a4:	2307      	movs	r3, #7
 80016a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016ac:	4619      	mov	r1, r3
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <HAL_UART_MspInit+0xac>)
 80016b0:	f001 f830 	bl	8002714 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016b4:	bf00      	nop
 80016b6:	3768      	adds	r7, #104	@ 0x68
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000400 	.word	0x48000400

080016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016c8:	480d      	ldr	r0, [pc, #52]	@ (8001700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016cc:	f7ff ff46 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <LoopForever+0xe>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001714 <LoopForever+0x16>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f003 fed3 	bl	80054a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fa:	f7ff fd77 	bl	80011ec <main>

080016fe <LoopForever>:

LoopForever:
    b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   r0, =_estack
 8001700:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800170c:	08007564 	.word	0x08007564
  ldr r2, =_sbss
 8001710:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001714:	20000498 	.word	0x20000498

08001718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_2_IRQHandler>

0800171a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f939 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172a:	200f      	movs	r0, #15
 800172c:	f000 f80e 	bl	800174c <HAL_InitTick>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e001      	b.n	8001740 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800173c:	f7ff fde0 	bl	8001300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001740:	79fb      	ldrb	r3, [r7, #7]

}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001758:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <HAL_InitTick+0x68>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d022      	beq.n	80017a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_InitTick+0x6c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <HAL_InitTick+0x68>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800176c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f944 	bl	8001a02 <HAL_SYSTICK_Config>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10f      	bne.n	80017a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d809      	bhi.n	800179a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	f04f 30ff 	mov.w	r0, #4294967295
 800178e:	f000 f910 	bl	80019b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_InitTick+0x70>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e007      	b.n	80017aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e004      	b.n	80017aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000010 	.word	0x20000010
 80017b8:	20000008 	.word	0x20000008
 80017bc:	2000000c 	.word	0x2000000c

080017c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_IncTick+0x1c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_IncTick+0x20>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a03      	ldr	r2, [pc, #12]	@ (80017dc <HAL_IncTick+0x1c>)
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000348 	.word	0x20000348
 80017e0:	20000010 	.word	0x20000010

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000348 	.word	0x20000348

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	@ (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	@ (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff40 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff90 	bl	80018f0 <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5f 	bl	800189c <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff33 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa4 	bl	8001958 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e147      	b.n	8001cbe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fab6 	bl	8000fb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699a      	ldr	r2, [r3, #24]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0210 	bic.w	r2, r2, #16
 8001a56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a58:	f7ff fec4 	bl	80017e4 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a5e:	e012      	b.n	8001a86 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a60:	f7ff fec0 	bl	80017e4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b0a      	cmp	r3, #10
 8001a6c:	d90b      	bls.n	8001a86 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e11b      	b.n	8001cbe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d0e5      	beq.n	8001a60 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa4:	f7ff fe9e 	bl	80017e4 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001aaa:	e012      	b.n	8001ad2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001aac:	f7ff fe9a 	bl	80017e4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b0a      	cmp	r3, #10
 8001ab8:	d90b      	bls.n	8001ad2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0f5      	b.n	8001cbe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0e5      	beq.n	8001aac <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0202 	orr.w	r2, r2, #2
 8001aee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a74      	ldr	r2, [pc, #464]	@ (8001cc8 <HAL_FDCAN_Init+0x2ac>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d103      	bne.n	8001b02 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001afa:	4a74      	ldr	r2, [pc, #464]	@ (8001ccc <HAL_FDCAN_Init+0x2b0>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7c1b      	ldrb	r3, [r3, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b18:	619a      	str	r2, [r3, #24]
 8001b1a:	e007      	b.n	8001b2c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7c5b      	ldrb	r3, [r3, #17]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b42:	619a      	str	r2, [r3, #24]
 8001b44:	e007      	b.n	8001b56 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b54:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7c9b      	ldrb	r3, [r3, #18]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b6c:	619a      	str	r2, [r3, #24]
 8001b6e:	e007      	b.n	8001b80 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b7e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001ba4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0210 	bic.w	r2, r2, #16
 8001bb4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0204 	orr.w	r2, r2, #4
 8001bcc:	619a      	str	r2, [r3, #24]
 8001bce:	e02c      	b.n	8001c2a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d028      	beq.n	8001c2a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d01c      	beq.n	8001c1a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0210 	orr.w	r2, r2, #16
 8001bfe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d110      	bne.n	8001c2a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	619a      	str	r2, [r3, #24]
 8001c18:	e007      	b.n	8001c2a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0220 	orr.w	r2, r2, #32
 8001c28:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c3a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c52:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c54:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c5e:	d115      	bne.n	8001c8c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c6e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	3b01      	subs	r3, #1
 8001c76:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c78:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	3b01      	subs	r3, #1
 8001c82:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c88:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c8a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fc64 	bl	8002570 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40006400 	.word	0x40006400
 8001ccc:	40006500 	.word	0x40006500

08001cd0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ce0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d002      	beq.n	8001cee <HAL_FDCAN_ConfigFilter+0x1e>
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d13d      	bne.n	8001d6a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d119      	bne.n	8001d2a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d02:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001d0a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01d      	b.n	8001d66 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	075a      	lsls	r2, r3, #29
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	079a      	lsls	r2, r3, #30
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e006      	b.n	8001d78 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6e:	f043 0202 	orr.w	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
  }
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d110      	bne.n	8001dba <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e006      	b.n	8001dc8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	f043 0204 	orr.w	r2, r3, #4
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
  }
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d12c      	bne.n	8001e46 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e023      	b.n	8001e54 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fbfa 	bl	800261c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	fa01 f202 	lsl.w	r2, r1, r2
 8001e34:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e006      	b.n	8001e54 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	f043 0208 	orr.w	r2, r3, #8
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
  }
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	@ 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e74:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001e76:	7efb      	ldrb	r3, [r7, #27]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	f040 80e8 	bne.w	800204e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b40      	cmp	r3, #64	@ 0x40
 8001e82:	d137      	bne.n	8001ef4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0db      	b.n	800205c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb4:	d10a      	bne.n	8001ecc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ec6:	d101      	bne.n	8001ecc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	4413      	add	r3, r2
 8001ede:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef2:	e036      	b.n	8001f62 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0a3      	b.n	800205c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f24:	d10a      	bne.n	8001f3c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f36:	d101      	bne.n	8001f3c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0c9b      	lsrs	r3, r3, #18
 8001f7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e005      	b.n	8001f92 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	3304      	adds	r3, #4
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0e1b      	lsrs	r3, r3, #24
 8001fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0fda      	lsrs	r2, r3, #31
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	e00a      	b.n	800201e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	441a      	add	r2, r3
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	440b      	add	r3, r1
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	3301      	adds	r3, #1
 800201c:	623b      	str	r3, [r7, #32]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	461a      	mov	r2, r3
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	4293      	cmp	r3, r2
 800202c:	d3ec      	bcc.n	8002008 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d105      	bne.n	8002040 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800203e:	e004      	b.n	800204a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e006      	b.n	800205c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	f043 0208 	orr.w	r2, r3, #8
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	372c      	adds	r7, #44	@ 0x2c
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	080071a8 	.word	0x080071a8

0800206c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800207e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d003      	beq.n	800208e <HAL_FDCAN_ActivateNotification+0x22>
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 80c8 	bne.w	800221e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03b      	beq.n	8002122 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d031      	beq.n	8002122 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d027      	beq.n	8002122 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01d      	beq.n	8002122 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d013      	beq.n	8002122 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d13b      	bne.n	80021be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d131      	bne.n	80021be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d127      	bne.n	80021be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11d      	bne.n	80021be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0202 	orr.w	r2, r2, #2
 80021cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	430a      	orrs	r2, r1
 8002206:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	430a      	orrs	r2, r1
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e006      	b.n	800222c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	@ 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002246:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800224a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002254:	4013      	ands	r3, r2
 8002256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800226c:	4013      	ands	r3, r2
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002284:	4013      	ands	r3, r2
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800228e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002292:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229a:	6a3a      	ldr	r2, [r7, #32]
 800229c:	4013      	ands	r3, r2
 800229e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022aa:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022be:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	099b      	lsrs	r3, r3, #6
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2240      	movs	r2, #64	@ 0x40
 80022e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f922 	bl	8002532 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01a      	beq.n	8002330 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d014      	beq.n	8002330 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800230e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002326:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002328:	6939      	ldr	r1, [r7, #16]
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8e2 	bl	80024f4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800233c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800233e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8ac 	bl	800249e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002352:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe ffa4 	bl	80012a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002368:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800236a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f8a1 	bl	80024b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	0a5b      	lsrs	r3, r3, #9
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00d      	beq.n	800239a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	0a5b      	lsrs	r3, r3, #9
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002392:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f898 	bl	80024ca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	09db      	lsrs	r3, r3, #7
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d019      	beq.n	80023da <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	09db      	lsrs	r3, r3, #7
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d013      	beq.n	80023da <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023ba:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2280      	movs	r2, #128	@ 0x80
 80023d0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f882 	bl	80024de <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	0b5b      	lsrs	r3, r3, #13
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	0b5b      	lsrs	r3, r3, #13
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f884 	bl	800250a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	0bdb      	lsrs	r3, r3, #15
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	0bdb      	lsrs	r3, r3, #15
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002422:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f87a 	bl	800251e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	0b9b      	lsrs	r3, r3, #14
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d010      	beq.n	8002458 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	0b9b      	lsrs	r3, r3, #14
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800244a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002450:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002466:	69f9      	ldr	r1, [r7, #28]
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f876 	bl	800255a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f858 	bl	8002546 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002496:	bf00      	nop
 8002498:	3730      	adds	r7, #48	@ 0x30
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800257a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800258a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002592:	041a      	lsls	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025b0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b8:	061a      	lsls	r2, r3, #24
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e005      	b.n	80025fe <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3304      	adds	r3, #4
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3f3      	bcc.n	80025f2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	4000a400 	.word	0x4000a400

0800261c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800263a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002642:	4313      	orrs	r3, r2
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	e00a      	b.n	800265e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002650:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002656:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800265c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002668:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800266e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002674:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	3304      	adds	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3304      	adds	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e020      	b.n	80026f2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3303      	adds	r3, #3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3302      	adds	r3, #2
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	440b      	add	r3, r1
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80026c8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	440b      	add	r3, r1
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80026d6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	440a      	add	r2, r1
 80026de:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80026e0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	3304      	adds	r3, #4
 80026ea:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3304      	adds	r3, #4
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4a06      	ldr	r2, [pc, #24]	@ (8002710 <FDCAN_CopyMessageToRAM+0xf4>)
 80026f8:	5cd3      	ldrb	r3, [r2, r3]
 80026fa:	461a      	mov	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	4293      	cmp	r3, r2
 8002700:	d3d6      	bcc.n	80026b0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	3724      	adds	r7, #36	@ 0x24
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	080071a8 	.word	0x080071a8

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002722:	e15a      	b.n	80029da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 814c 	beq.w	80029d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d005      	beq.n	8002754 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002750:	2b02      	cmp	r3, #2
 8002752:	d130      	bne.n	80027b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800278a:	2201      	movs	r2, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 0201 	and.w	r2, r3, #1
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d017      	beq.n	80027f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d123      	bne.n	8002846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	6939      	ldr	r1, [r7, #16]
 8002842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0203 	and.w	r2, r3, #3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80a6 	beq.w	80029d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002888:	4b5b      	ldr	r3, [pc, #364]	@ (80029f8 <HAL_GPIO_Init+0x2e4>)
 800288a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288c:	4a5a      	ldr	r2, [pc, #360]	@ (80029f8 <HAL_GPIO_Init+0x2e4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6613      	str	r3, [r2, #96]	@ 0x60
 8002894:	4b58      	ldr	r3, [pc, #352]	@ (80029f8 <HAL_GPIO_Init+0x2e4>)
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a0:	4a56      	ldr	r2, [pc, #344]	@ (80029fc <HAL_GPIO_Init+0x2e8>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028ca:	d01f      	beq.n	800290c <HAL_GPIO_Init+0x1f8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002a00 <HAL_GPIO_Init+0x2ec>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d019      	beq.n	8002908 <HAL_GPIO_Init+0x1f4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002a04 <HAL_GPIO_Init+0x2f0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_GPIO_Init+0x1f0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a4a      	ldr	r2, [pc, #296]	@ (8002a08 <HAL_GPIO_Init+0x2f4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00d      	beq.n	8002900 <HAL_GPIO_Init+0x1ec>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a49      	ldr	r2, [pc, #292]	@ (8002a0c <HAL_GPIO_Init+0x2f8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <HAL_GPIO_Init+0x1e8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a48      	ldr	r2, [pc, #288]	@ (8002a10 <HAL_GPIO_Init+0x2fc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_GPIO_Init+0x1e4>
 80028f4:	2305      	movs	r3, #5
 80028f6:	e00a      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 80028f8:	2306      	movs	r3, #6
 80028fa:	e008      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 80028fc:	2304      	movs	r3, #4
 80028fe:	e006      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 8002900:	2303      	movs	r3, #3
 8002902:	e004      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 8002904:	2302      	movs	r3, #2
 8002906:	e002      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 800290c:	2300      	movs	r3, #0
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	f002 0203 	and.w	r2, r2, #3
 8002914:	0092      	lsls	r2, r2, #2
 8002916:	4093      	lsls	r3, r2
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291e:	4937      	ldr	r1, [pc, #220]	@ (80029fc <HAL_GPIO_Init+0x2e8>)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002950:	4a30      	ldr	r2, [pc, #192]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002956:	4b2f      	ldr	r3, [pc, #188]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800297a:	4a26      	ldr	r2, [pc, #152]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002980:	4b24      	ldr	r3, [pc, #144]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029ce:	4a11      	ldr	r2, [pc, #68]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3301      	adds	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f ae9d 	bne.w	8002724 <HAL_GPIO_Init+0x10>
  }
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40010000 	.word	0x40010000
 8002a00:	48000400 	.word	0x48000400
 8002a04:	48000800 	.word	0x48000800
 8002a08:	48000c00 	.word	0x48000c00
 8002a0c:	48001000 	.word	0x48001000
 8002a10:	48001400 	.word	0x48001400
 8002a14:	40010400 	.word	0x40010400

08002a18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d141      	bne.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a26:	4b4b      	ldr	r3, [pc, #300]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a32:	d131      	bne.n	8002a98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a34:	4b47      	ldr	r3, [pc, #284]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a3a:	4a46      	ldr	r2, [pc, #280]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a44:	4b43      	ldr	r3, [pc, #268]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a4c:	4a41      	ldr	r2, [pc, #260]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a54:	4b40      	ldr	r3, [pc, #256]	@ (8002b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2232      	movs	r2, #50	@ 0x32
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	0c9b      	lsrs	r3, r3, #18
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a6a:	e002      	b.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a72:	4b38      	ldr	r3, [pc, #224]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	d102      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f2      	bne.n	8002a6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a86:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a92:	d158      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e057      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a98:	4b2e      	ldr	r3, [pc, #184]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002aa8:	e04d      	b.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ab0:	d141      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ab2:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002abe:	d131      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ac0:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ac6:	4a23      	ldr	r2, [pc, #140]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ad0:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2232      	movs	r2, #50	@ 0x32
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	4a1c      	ldr	r2, [pc, #112]	@ (8002b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9b      	lsrs	r3, r3, #18
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af6:	e002      	b.n	8002afe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0a:	d102      	bne.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f2      	bne.n	8002af8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1e:	d112      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e011      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b34:	e007      	b.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b36:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b3e:	4a05      	ldr	r2, [pc, #20]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40007000 	.word	0x40007000
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	431bde83 	.word	0x431bde83

08002b60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a04      	ldr	r2, [pc, #16]	@ (8002b7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6e:	6093      	str	r3, [r2, #8]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40007000 	.word	0x40007000

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e2fe      	b.n	8003190 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d075      	beq.n	8002c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	4b97      	ldr	r3, [pc, #604]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba8:	4b94      	ldr	r3, [pc, #592]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3e>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x44>
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	4b8d      	ldr	r3, [pc, #564]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05b      	beq.n	8002c88 <HAL_RCC_OscConfig+0x108>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d157      	bne.n	8002c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e2d9      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x74>
 8002be6:	4b85      	ldr	r3, [pc, #532]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a84      	ldr	r2, [pc, #528]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x98>
 8002bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7e      	ldr	r2, [pc, #504]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7b      	ldr	r2, [pc, #492]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002c18:	4b78      	ldr	r3, [pc, #480]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a77      	ldr	r2, [pc, #476]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b75      	ldr	r3, [pc, #468]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a74      	ldr	r2, [pc, #464]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fdd4 	bl	80017e4 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe fdd0 	bl	80017e4 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	@ 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e29e      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c52:	4b6a      	ldr	r3, [pc, #424]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xc0>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fdc0 	bl	80017e4 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fdbc 	bl	80017e4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	@ 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e28a      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7a:	4b60      	ldr	r3, [pc, #384]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0xe8>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d075      	beq.n	8002d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c96:	4b59      	ldr	r3, [pc, #356]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca0:	4b56      	ldr	r3, [pc, #344]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d102      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x136>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_OscConfig+0x13c>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d11f      	bne.n	8002cfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x154>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e25d      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b49      	ldr	r3, [pc, #292]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	4946      	ldr	r1, [pc, #280]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ce8:	4b45      	ldr	r3, [pc, #276]	@ (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fd2d 	bl	800174c <HAL_InitTick>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d043      	beq.n	8002d80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e249      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d023      	beq.n	8002d4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d04:	4b3d      	ldr	r3, [pc, #244]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3c      	ldr	r2, [pc, #240]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fd68 	bl	80017e4 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d18:	f7fe fd64 	bl	80017e4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e232      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2a:	4b34      	ldr	r3, [pc, #208]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	061b      	lsls	r3, r3, #24
 8002d44:	492d      	ldr	r1, [pc, #180]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
 8002d4a:	e01a      	b.n	8002d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe fd44 	bl	80017e4 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d60:	f7fe fd40 	bl	80017e4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e20e      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d72:	4b22      	ldr	r3, [pc, #136]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x1e0>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d041      	beq.n	8002e12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d96:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d9c:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da6:	f7fe fd1d 	bl	80017e4 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dae:	f7fe fd19 	bl	80017e4 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1e7      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0ef      	beq.n	8002dae <HAL_RCC_OscConfig+0x22e>
 8002dce:	e020      	b.n	8002e12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd6:	4a09      	ldr	r2, [pc, #36]	@ (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fd00 	bl	80017e4 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de6:	e00d      	b.n	8002e04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe fcfc 	bl	80017e4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d906      	bls.n	8002e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1ca      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	4b8c      	ldr	r3, [pc, #560]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ea      	bne.n	8002de8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80a6 	beq.w	8002f6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e24:	4b84      	ldr	r3, [pc, #528]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2b4>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x2b6>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e46:	4b7c      	ldr	r3, [pc, #496]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e56:	4b79      	ldr	r3, [pc, #484]	@ (800303c <HAL_RCC_OscConfig+0x4bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e62:	4b76      	ldr	r3, [pc, #472]	@ (800303c <HAL_RCC_OscConfig+0x4bc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a75      	ldr	r2, [pc, #468]	@ (800303c <HAL_RCC_OscConfig+0x4bc>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fcb9 	bl	80017e4 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe fcb5 	bl	80017e4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e183      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e88:	4b6c      	ldr	r3, [pc, #432]	@ (800303c <HAL_RCC_OscConfig+0x4bc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d108      	bne.n	8002eae <HAL_RCC_OscConfig+0x32e>
 8002e9c:	4b66      	ldr	r3, [pc, #408]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea2:	4a65      	ldr	r2, [pc, #404]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eac:	e024      	b.n	8002ef8 <HAL_RCC_OscConfig+0x378>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d110      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x358>
 8002eb6:	4b60      	ldr	r3, [pc, #384]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebc:	4a5e      	ldr	r2, [pc, #376]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	4a5a      	ldr	r2, [pc, #360]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed6:	e00f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x378>
 8002ed8:	4b57      	ldr	r3, [pc, #348]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	4a56      	ldr	r2, [pc, #344]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee8:	4b53      	ldr	r3, [pc, #332]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	4a52      	ldr	r2, [pc, #328]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d016      	beq.n	8002f2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fc70 	bl	80017e4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fc6c 	bl	80017e4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e138      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1e:	4b46      	ldr	r3, [pc, #280]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ed      	beq.n	8002f08 <HAL_RCC_OscConfig+0x388>
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fc59 	bl	80017e4 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fc55 	bl	80017e4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e121      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ed      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b35      	ldr	r3, [pc, #212]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f64:	4a34      	ldr	r2, [pc, #208]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d03c      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01c      	beq.n	8002fba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f80:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f86:	4a2c      	ldr	r2, [pc, #176]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fc28 	bl	80017e4 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f98:	f7fe fc24 	bl	80017e4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0f2      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002faa:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ef      	beq.n	8002f98 <HAL_RCC_OscConfig+0x418>
 8002fb8:	e01b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fba:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7fe fc0b 	bl	80017e4 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd2:	f7fe fc07 	bl	80017e4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0d5      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ef      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80c9 	beq.w	800318e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b0c      	cmp	r3, #12
 8003006:	f000 8083 	beq.w	8003110 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d15e      	bne.n	80030d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <HAL_RCC_OscConfig+0x4b8>)
 8003018:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fbe1 	bl	80017e4 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	e00c      	b.n	8003040 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fbdd 	bl	80017e4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d905      	bls.n	8003040 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0ab      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	4b55      	ldr	r3, [pc, #340]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ec      	bne.n	8003026 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304c:	4b52      	ldr	r3, [pc, #328]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	4b52      	ldr	r3, [pc, #328]	@ (800319c <HAL_RCC_OscConfig+0x61c>)
 8003052:	4013      	ands	r3, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6a11      	ldr	r1, [r2, #32]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800305c:	3a01      	subs	r2, #1
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	4311      	orrs	r1, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003066:	0212      	lsls	r2, r2, #8
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0552      	lsls	r2, r2, #21
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800307a:	0852      	lsrs	r2, r2, #1
 800307c:	3a01      	subs	r2, #1
 800307e:	0652      	lsls	r2, r2, #25
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003086:	06d2      	lsls	r2, r2, #27
 8003088:	430a      	orrs	r2, r1
 800308a:	4943      	ldr	r1, [pc, #268]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 800308c:	4313      	orrs	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b41      	ldr	r3, [pc, #260]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a40      	ldr	r2, [pc, #256]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800309c:	4b3e      	ldr	r3, [pc, #248]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fb9c 	bl	80017e4 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fb98 	bl	80017e4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e066      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c2:	4b35      	ldr	r3, [pc, #212]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x530>
 80030ce:	e05e      	b.n	800318e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b31      	ldr	r3, [pc, #196]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a30      	ldr	r2, [pc, #192]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 80030d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fb82 	bl	80017e4 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe fb7e 	bl	80017e4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04c      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f6:	4b28      	ldr	r3, [pc, #160]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003102:	4b25      	ldr	r3, [pc, #148]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	4924      	ldr	r1, [pc, #144]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 8003108:	4b25      	ldr	r3, [pc, #148]	@ (80031a0 <HAL_RCC_OscConfig+0x620>)
 800310a:	4013      	ands	r3, r2
 800310c:	60cb      	str	r3, [r1, #12]
 800310e:	e03e      	b.n	800318e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e039      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800311c:	4b1e      	ldr	r3, [pc, #120]	@ (8003198 <HAL_RCC_OscConfig+0x618>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0203 	and.w	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	429a      	cmp	r2, r3
 800312e:	d12c      	bne.n	800318a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	3b01      	subs	r3, #1
 800313c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d123      	bne.n	800318a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d11b      	bne.n	800318a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d113      	bne.n	800318a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	3b01      	subs	r3, #1
 8003170:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d109      	bne.n	800318a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	3b01      	subs	r3, #1
 8003184:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d001      	beq.n	800318e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	019f800c 	.word	0x019f800c
 80031a0:	feeefffc 	.word	0xfeeefffc

080031a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e11e      	b.n	80033fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b91      	ldr	r3, [pc, #580]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d910      	bls.n	80031ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 020f 	bic.w	r2, r3, #15
 80031d2:	498c      	ldr	r1, [pc, #560]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b8a      	ldr	r3, [pc, #552]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e106      	b.n	80033fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d073      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d129      	bne.n	8003254 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003200:	4b81      	ldr	r3, [pc, #516]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0f4      	b.n	80033fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003210:	f000 f99e 	bl	8003550 <RCC_GetSysClockFreqFromPLLSource>
 8003214:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4a7c      	ldr	r2, [pc, #496]	@ (800340c <HAL_RCC_ClockConfig+0x268>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d93f      	bls.n	800329e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800321e:	4b7a      	ldr	r3, [pc, #488]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003232:	2b00      	cmp	r3, #0
 8003234:	d033      	beq.n	800329e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d12f      	bne.n	800329e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800323e:	4b72      	ldr	r3, [pc, #456]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003246:	4a70      	ldr	r2, [pc, #448]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 8003248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800324c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e024      	b.n	800329e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d107      	bne.n	800326c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325c:	4b6a      	ldr	r3, [pc, #424]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0c6      	b.n	80033fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326c:	4b66      	ldr	r3, [pc, #408]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0be      	b.n	80033fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800327c:	f000 f8ce 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8003280:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4a61      	ldr	r2, [pc, #388]	@ (800340c <HAL_RCC_ClockConfig+0x268>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d909      	bls.n	800329e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800328a:	4b5f      	ldr	r3, [pc, #380]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003292:	4a5d      	ldr	r2, [pc, #372]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 8003294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003298:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b5a      	ldr	r3, [pc, #360]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4957      	ldr	r1, [pc, #348]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b0:	f7fe fa98 	bl	80017e4 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe fa94 	bl	80017e4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e095      	b.n	80033fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d023      	beq.n	8003334 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f8:	4b43      	ldr	r3, [pc, #268]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a42      	ldr	r2, [pc, #264]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80032fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003302:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003310:	4b3d      	ldr	r3, [pc, #244]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003318:	4a3b      	ldr	r2, [pc, #236]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 800331a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800331e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003320:	4b39      	ldr	r3, [pc, #228]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4936      	ldr	r1, [pc, #216]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
 8003332:	e008      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b80      	cmp	r3, #128	@ 0x80
 8003338:	d105      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800333a:	4b33      	ldr	r3, [pc, #204]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4a32      	ldr	r2, [pc, #200]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 8003340:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003344:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003346:	4b2f      	ldr	r3, [pc, #188]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d21d      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003354:	4b2b      	ldr	r3, [pc, #172]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 020f 	bic.w	r2, r3, #15
 800335c:	4929      	ldr	r1, [pc, #164]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003364:	f7fe fa3e 	bl	80017e4 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fe fa3a 	bl	80017e4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e03b      	b.n	80033fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d1ed      	bne.n	800336c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339c:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4917      	ldr	r1, [pc, #92]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	490f      	ldr	r1, [pc, #60]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ce:	f000 f825 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <HAL_RCC_ClockConfig+0x264>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	490c      	ldr	r1, [pc, #48]	@ (8003410 <HAL_RCC_ClockConfig+0x26c>)
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <HAL_RCC_ClockConfig+0x270>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_RCC_ClockConfig+0x274>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe f9aa 	bl	800174c <HAL_InitTick>
 80033f8:	4603      	mov	r3, r0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40022000 	.word	0x40022000
 8003408:	40021000 	.word	0x40021000
 800340c:	04c4b400 	.word	0x04c4b400
 8003410:	08007190 	.word	0x08007190
 8003414:	20000008 	.word	0x20000008
 8003418:	2000000c 	.word	0x2000000c

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003422:	4b2c      	ldr	r3, [pc, #176]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b04      	cmp	r3, #4
 800342c:	d102      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800342e:	4b2a      	ldr	r3, [pc, #168]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e047      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003434:	4b27      	ldr	r3, [pc, #156]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d102      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003440:	4b26      	ldr	r3, [pc, #152]	@ (80034dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	e03e      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003446:	4b23      	ldr	r3, [pc, #140]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d136      	bne.n	80034c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003452:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345c:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3301      	adds	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d10c      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003470:	4a1a      	ldr	r2, [pc, #104]	@ (80034dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	4a16      	ldr	r2, [pc, #88]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347a:	68d2      	ldr	r2, [r2, #12]
 800347c:	0a12      	lsrs	r2, r2, #8
 800347e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	617b      	str	r3, [r7, #20]
      break;
 8003488:	e00c      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800348a:	4a13      	ldr	r2, [pc, #76]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	4a10      	ldr	r2, [pc, #64]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003494:	68d2      	ldr	r2, [r2, #12]
 8003496:	0a12      	lsrs	r2, r2, #8
 8003498:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
      break;
 80034a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034a4:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	0e5b      	lsrs	r3, r3, #25
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	3301      	adds	r3, #1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	e001      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034c4:	693b      	ldr	r3, [r7, #16]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	007a1200 	.word	0x007a1200

080034e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b03      	ldr	r3, [pc, #12]	@ (80034f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000008 	.word	0x20000008

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034fc:	f7ff fff0 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4904      	ldr	r1, [pc, #16]	@ (8003520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	080071a0 	.word	0x080071a0

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003528:	f7ff ffda 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0adb      	lsrs	r3, r3, #11
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4904      	ldr	r1, [pc, #16]	@ (800354c <HAL_RCC_GetPCLK2Freq+0x28>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	080071a0 	.word	0x080071a0

08003550 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003556:	4b1e      	ldr	r3, [pc, #120]	@ (80035d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003560:	4b1b      	ldr	r3, [pc, #108]	@ (80035d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3301      	adds	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d10c      	bne.n	800358e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003574:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	4a14      	ldr	r2, [pc, #80]	@ (80035d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800357e:	68d2      	ldr	r2, [r2, #12]
 8003580:	0a12      	lsrs	r2, r2, #8
 8003582:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	617b      	str	r3, [r7, #20]
    break;
 800358c:	e00c      	b.n	80035a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800358e:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	4a0e      	ldr	r2, [pc, #56]	@ (80035d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003598:	68d2      	ldr	r2, [r2, #12]
 800359a:	0a12      	lsrs	r2, r2, #8
 800359c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
    break;
 80035a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035a8:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	0e5b      	lsrs	r3, r3, #25
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	3301      	adds	r3, #1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035c2:	687b      	ldr	r3, [r7, #4]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40021000 	.word	0x40021000
 80035d4:	007a1200 	.word	0x007a1200
 80035d8:	00f42400 	.word	0x00f42400

080035dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035e4:	2300      	movs	r3, #0
 80035e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035e8:	2300      	movs	r3, #0
 80035ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8098 	beq.w	800372a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fe:	4b43      	ldr	r3, [pc, #268]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10d      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	4b40      	ldr	r3, [pc, #256]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	4a3f      	ldr	r2, [pc, #252]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003614:	6593      	str	r3, [r2, #88]	@ 0x58
 8003616:	4b3d      	ldr	r3, [pc, #244]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003622:	2301      	movs	r3, #1
 8003624:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003626:	4b3a      	ldr	r3, [pc, #232]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a39      	ldr	r2, [pc, #228]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003632:	f7fe f8d7 	bl	80017e4 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003638:	e009      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fe f8d3 	bl	80017e4 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d902      	bls.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	74fb      	strb	r3, [r7, #19]
        break;
 800364c:	e005      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800364e:	4b30      	ldr	r3, [pc, #192]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0ef      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d159      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003660:	4b2a      	ldr	r3, [pc, #168]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01e      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	429a      	cmp	r2, r3
 800367a:	d019      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800367c:	4b23      	ldr	r3, [pc, #140]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003688:	4b20      	ldr	r3, [pc, #128]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	4a1f      	ldr	r2, [pc, #124]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003698:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	4a1b      	ldr	r2, [pc, #108]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036a8:	4a18      	ldr	r2, [pc, #96]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d016      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fe f893 	bl	80017e4 <HAL_GetTick>
 80036be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c0:	e00b      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe f88f 	bl	80017e4 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d902      	bls.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	74fb      	strb	r3, [r7, #19]
            break;
 80036d8:	e006      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036da:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ec      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10b      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ee:	4b07      	ldr	r3, [pc, #28]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	4903      	ldr	r1, [pc, #12]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003704:	e008      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	74bb      	strb	r3, [r7, #18]
 800370a:	e005      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003718:	7c7b      	ldrb	r3, [r7, #17]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371e:	4ba6      	ldr	r3, [pc, #664]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	4aa5      	ldr	r2, [pc, #660]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003728:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003736:	4ba0      	ldr	r3, [pc, #640]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373c:	f023 0203 	bic.w	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	499c      	ldr	r1, [pc, #624]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003758:	4b97      	ldr	r3, [pc, #604]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	f023 020c 	bic.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	4994      	ldr	r1, [pc, #592]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800377a:	4b8f      	ldr	r3, [pc, #572]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	498b      	ldr	r1, [pc, #556]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800379c:	4b86      	ldr	r3, [pc, #536]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	4983      	ldr	r1, [pc, #524]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037be:	4b7e      	ldr	r3, [pc, #504]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	497a      	ldr	r1, [pc, #488]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037e0:	4b75      	ldr	r3, [pc, #468]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	4972      	ldr	r1, [pc, #456]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003802:	4b6d      	ldr	r3, [pc, #436]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4969      	ldr	r1, [pc, #420]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003824:	4b64      	ldr	r3, [pc, #400]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4961      	ldr	r1, [pc, #388]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003846:	4b5c      	ldr	r3, [pc, #368]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	4958      	ldr	r1, [pc, #352]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d015      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003868:	4b53      	ldr	r3, [pc, #332]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	4950      	ldr	r1, [pc, #320]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003886:	d105      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003888:	4b4b      	ldr	r3, [pc, #300]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a4a      	ldr	r2, [pc, #296]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003892:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038a0:	4b45      	ldr	r3, [pc, #276]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	4942      	ldr	r1, [pc, #264]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038be:	d105      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c0:	4b3d      	ldr	r3, [pc, #244]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a3c      	ldr	r2, [pc, #240]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d015      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038d8:	4b37      	ldr	r3, [pc, #220]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	4934      	ldr	r1, [pc, #208]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038f6:	d105      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f8:	4b2f      	ldr	r3, [pc, #188]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4a2e      	ldr	r2, [pc, #184]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003902:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d015      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003910:	4b29      	ldr	r3, [pc, #164]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003916:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	4926      	ldr	r1, [pc, #152]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800392e:	d105      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003930:	4b21      	ldr	r3, [pc, #132]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4a20      	ldr	r2, [pc, #128]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800393a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d015      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	4918      	ldr	r1, [pc, #96]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003962:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003966:	d105      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003968:	4b13      	ldr	r3, [pc, #76]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a12      	ldr	r2, [pc, #72]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003972:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003980:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398e:	490a      	ldr	r1, [pc, #40]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000

080039bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e042      	b.n	8003a54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fd fe19 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2224      	movs	r2, #36	@ 0x24
 80039ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fb82 	bl	8004110 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8b3 	bl	8003b78 <UART_SetConfig>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e01b      	b.n	8003a54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fc01 	bl	8004254 <UART_CheckIdleState>
 8003a52:	4603      	mov	r3, r0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	@ 0x28
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d17b      	bne.n	8003b6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_Transmit+0x26>
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e074      	b.n	8003b70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2221      	movs	r2, #33	@ 0x21
 8003a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a96:	f7fd fea5 	bl	80017e4 <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab4:	d108      	bne.n	8003ac8 <HAL_UART_Transmit+0x6c>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	e003      	b.n	8003ad0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad0:	e030      	b.n	8003b34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2180      	movs	r1, #128	@ 0x80
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fc63 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e03d      	b.n	8003b70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	e007      	b.n	8003b22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1c8      	bne.n	8003ad2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2140      	movs	r1, #64	@ 0x40
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fc2c 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e006      	b.n	8003b70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b08c      	sub	sp, #48	@ 0x30
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4bab      	ldr	r3, [pc, #684]	@ (8003e54 <UART_SetConfig+0x2dc>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4aa0      	ldr	r2, [pc, #640]	@ (8003e58 <UART_SetConfig+0x2e0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003be0:	4313      	orrs	r3, r2
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003bee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c02:	f023 010f 	bic.w	r1, r3, #15
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a91      	ldr	r2, [pc, #580]	@ (8003e5c <UART_SetConfig+0x2e4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d125      	bne.n	8003c68 <UART_SetConfig+0xf0>
 8003c1c:	4b90      	ldr	r3, [pc, #576]	@ (8003e60 <UART_SetConfig+0x2e8>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d81a      	bhi.n	8003c60 <UART_SetConfig+0xe8>
 8003c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c30 <UART_SetConfig+0xb8>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c41 	.word	0x08003c41
 8003c34:	08003c51 	.word	0x08003c51
 8003c38:	08003c49 	.word	0x08003c49
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c46:	e0d6      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4e:	e0d2      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c56:	e0ce      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5e:	e0ca      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c66:	e0c6      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e64 <UART_SetConfig+0x2ec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d138      	bne.n	8003ce4 <UART_SetConfig+0x16c>
 8003c72:	4b7b      	ldr	r3, [pc, #492]	@ (8003e60 <UART_SetConfig+0x2e8>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d82d      	bhi.n	8003cdc <UART_SetConfig+0x164>
 8003c80:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <UART_SetConfig+0x110>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	08003cdd 	.word	0x08003cdd
 8003c90:	08003cdd 	.word	0x08003cdd
 8003c94:	08003cdd 	.word	0x08003cdd
 8003c98:	08003ccd 	.word	0x08003ccd
 8003c9c:	08003cdd 	.word	0x08003cdd
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003cdd 	.word	0x08003cdd
 8003ca8:	08003cc5 	.word	0x08003cc5
 8003cac:	08003cdd 	.word	0x08003cdd
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cdd 	.word	0x08003cdd
 8003cb8:	08003cd5 	.word	0x08003cd5
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc2:	e098      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cca:	e094      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cd2:	e090      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cda:	e08c      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce2:	e088      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8003e68 <UART_SetConfig+0x2f0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d125      	bne.n	8003d3a <UART_SetConfig+0x1c2>
 8003cee:	4b5c      	ldr	r3, [pc, #368]	@ (8003e60 <UART_SetConfig+0x2e8>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cf8:	2b30      	cmp	r3, #48	@ 0x30
 8003cfa:	d016      	beq.n	8003d2a <UART_SetConfig+0x1b2>
 8003cfc:	2b30      	cmp	r3, #48	@ 0x30
 8003cfe:	d818      	bhi.n	8003d32 <UART_SetConfig+0x1ba>
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d00a      	beq.n	8003d1a <UART_SetConfig+0x1a2>
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d814      	bhi.n	8003d32 <UART_SetConfig+0x1ba>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <UART_SetConfig+0x19a>
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d008      	beq.n	8003d22 <UART_SetConfig+0x1aa>
 8003d10:	e00f      	b.n	8003d32 <UART_SetConfig+0x1ba>
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d18:	e06d      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d20:	e069      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d22:	2304      	movs	r3, #4
 8003d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d28:	e065      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d30:	e061      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d32:	2310      	movs	r3, #16
 8003d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d38:	e05d      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a4b      	ldr	r2, [pc, #300]	@ (8003e6c <UART_SetConfig+0x2f4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d125      	bne.n	8003d90 <UART_SetConfig+0x218>
 8003d44:	4b46      	ldr	r3, [pc, #280]	@ (8003e60 <UART_SetConfig+0x2e8>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d50:	d016      	beq.n	8003d80 <UART_SetConfig+0x208>
 8003d52:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d54:	d818      	bhi.n	8003d88 <UART_SetConfig+0x210>
 8003d56:	2b80      	cmp	r3, #128	@ 0x80
 8003d58:	d00a      	beq.n	8003d70 <UART_SetConfig+0x1f8>
 8003d5a:	2b80      	cmp	r3, #128	@ 0x80
 8003d5c:	d814      	bhi.n	8003d88 <UART_SetConfig+0x210>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <UART_SetConfig+0x1f0>
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d008      	beq.n	8003d78 <UART_SetConfig+0x200>
 8003d66:	e00f      	b.n	8003d88 <UART_SetConfig+0x210>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6e:	e042      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d70:	2302      	movs	r3, #2
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d76:	e03e      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d7e:	e03a      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d80:	2308      	movs	r3, #8
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d86:	e036      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d8e:	e032      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a30      	ldr	r2, [pc, #192]	@ (8003e58 <UART_SetConfig+0x2e0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d12a      	bne.n	8003df0 <UART_SetConfig+0x278>
 8003d9a:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <UART_SetConfig+0x2e8>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003da4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003da8:	d01a      	beq.n	8003de0 <UART_SetConfig+0x268>
 8003daa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dae:	d81b      	bhi.n	8003de8 <UART_SetConfig+0x270>
 8003db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003db4:	d00c      	beq.n	8003dd0 <UART_SetConfig+0x258>
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dba:	d815      	bhi.n	8003de8 <UART_SetConfig+0x270>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <UART_SetConfig+0x250>
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc4:	d008      	beq.n	8003dd8 <UART_SetConfig+0x260>
 8003dc6:	e00f      	b.n	8003de8 <UART_SetConfig+0x270>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	e012      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd6:	e00e      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dde:	e00a      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003de0:	2308      	movs	r3, #8
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de6:	e006      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003de8:	2310      	movs	r3, #16
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dee:	e002      	b.n	8003df6 <UART_SetConfig+0x27e>
 8003df0:	2310      	movs	r3, #16
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a17      	ldr	r2, [pc, #92]	@ (8003e58 <UART_SetConfig+0x2e0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	f040 80a8 	bne.w	8003f52 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d834      	bhi.n	8003e74 <UART_SetConfig+0x2fc>
 8003e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <UART_SetConfig+0x298>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e75 	.word	0x08003e75
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e75 	.word	0x08003e75
 8003e20:	08003e43 	.word	0x08003e43
 8003e24:	08003e75 	.word	0x08003e75
 8003e28:	08003e75 	.word	0x08003e75
 8003e2c:	08003e75 	.word	0x08003e75
 8003e30:	08003e4b 	.word	0x08003e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7ff fb60 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8003e38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e3a:	e021      	b.n	8003e80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <UART_SetConfig+0x2f8>)
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e40:	e01e      	b.n	8003e80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e42:	f7ff faeb 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8003e46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e48:	e01a      	b.n	8003e80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e50:	e016      	b.n	8003e80 <UART_SetConfig+0x308>
 8003e52:	bf00      	nop
 8003e54:	cfff69f3 	.word	0xcfff69f3
 8003e58:	40008000 	.word	0x40008000
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40004800 	.word	0x40004800
 8003e6c:	40004c00 	.word	0x40004c00
 8003e70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 812a 	beq.w	80040dc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	4a9e      	ldr	r2, [pc, #632]	@ (8004108 <UART_SetConfig+0x590>)
 8003e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d305      	bcc.n	8003eb8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d903      	bls.n	8003ec0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ebe:	e10d      	b.n	80040dc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	60fa      	str	r2, [r7, #12]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	4a8e      	ldr	r2, [pc, #568]	@ (8004108 <UART_SetConfig+0x590>)
 8003ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ede:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ee2:	f7fc fe89 	bl	8000bf8 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	020b      	lsls	r3, r1, #8
 8003ef8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003efc:	0202      	lsls	r2, r0, #8
 8003efe:	6979      	ldr	r1, [r7, #20]
 8003f00:	6849      	ldr	r1, [r1, #4]
 8003f02:	0849      	lsrs	r1, r1, #1
 8003f04:	2000      	movs	r0, #0
 8003f06:	460c      	mov	r4, r1
 8003f08:	4605      	mov	r5, r0
 8003f0a:	eb12 0804 	adds.w	r8, r2, r4
 8003f0e:	eb43 0905 	adc.w	r9, r3, r5
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	469a      	mov	sl, r3
 8003f1a:	4693      	mov	fp, r2
 8003f1c:	4652      	mov	r2, sl
 8003f1e:	465b      	mov	r3, fp
 8003f20:	4640      	mov	r0, r8
 8003f22:	4649      	mov	r1, r9
 8003f24:	f7fc fe68 	bl	8000bf8 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f36:	d308      	bcc.n	8003f4a <UART_SetConfig+0x3d2>
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f3e:	d204      	bcs.n	8003f4a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	e0c8      	b.n	80040dc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f50:	e0c4      	b.n	80040dc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f5a:	d167      	bne.n	800402c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d828      	bhi.n	8003fb6 <UART_SetConfig+0x43e>
 8003f64:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <UART_SetConfig+0x3f4>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003f99 	.word	0x08003f99
 8003f74:	08003fa1 	.word	0x08003fa1
 8003f78:	08003fb7 	.word	0x08003fb7
 8003f7c:	08003fa7 	.word	0x08003fa7
 8003f80:	08003fb7 	.word	0x08003fb7
 8003f84:	08003fb7 	.word	0x08003fb7
 8003f88:	08003fb7 	.word	0x08003fb7
 8003f8c:	08003faf 	.word	0x08003faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f90:	f7ff fab2 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8003f94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f96:	e014      	b.n	8003fc2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f98:	f7ff fac4 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8003f9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f9e:	e010      	b.n	8003fc2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800410c <UART_SetConfig+0x594>)
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fa4:	e00d      	b.n	8003fc2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa6:	f7ff fa39 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8003faa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fac:	e009      	b.n	8003fc2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fb4:	e005      	b.n	8003fc2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8089 	beq.w	80040dc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	4a4e      	ldr	r2, [pc, #312]	@ (8004108 <UART_SetConfig+0x590>)
 8003fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fdc:	005a      	lsls	r2, r3, #1
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	441a      	add	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	2b0f      	cmp	r3, #15
 8003ff4:	d916      	bls.n	8004024 <UART_SetConfig+0x4ac>
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ffc:	d212      	bcs.n	8004024 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f023 030f 	bic.w	r3, r3, #15
 8004006:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	b29b      	uxth	r3, r3
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	b29a      	uxth	r2, r3
 8004014:	8bfb      	ldrh	r3, [r7, #30]
 8004016:	4313      	orrs	r3, r2
 8004018:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	8bfa      	ldrh	r2, [r7, #30]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	e05b      	b.n	80040dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800402a:	e057      	b.n	80040dc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800402c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004030:	2b08      	cmp	r3, #8
 8004032:	d828      	bhi.n	8004086 <UART_SetConfig+0x50e>
 8004034:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <UART_SetConfig+0x4c4>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	08004061 	.word	0x08004061
 8004040:	08004069 	.word	0x08004069
 8004044:	08004071 	.word	0x08004071
 8004048:	08004087 	.word	0x08004087
 800404c:	08004077 	.word	0x08004077
 8004050:	08004087 	.word	0x08004087
 8004054:	08004087 	.word	0x08004087
 8004058:	08004087 	.word	0x08004087
 800405c:	0800407f 	.word	0x0800407f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004060:	f7ff fa4a 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004066:	e014      	b.n	8004092 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004068:	f7ff fa5c 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 800406c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800406e:	e010      	b.n	8004092 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004070:	4b26      	ldr	r3, [pc, #152]	@ (800410c <UART_SetConfig+0x594>)
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004074:	e00d      	b.n	8004092 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004076:	f7ff f9d1 	bl	800341c <HAL_RCC_GetSysClockFreq>
 800407a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800407c:	e009      	b.n	8004092 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004084:	e005      	b.n	8004092 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004090:	bf00      	nop
    }

    if (pclk != 0U)
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d021      	beq.n	80040dc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	4a1a      	ldr	r2, [pc, #104]	@ (8004108 <UART_SetConfig+0x590>)
 800409e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040a2:	461a      	mov	r2, r3
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	441a      	add	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	d909      	bls.n	80040d6 <UART_SetConfig+0x55e>
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c8:	d205      	bcs.n	80040d6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	e002      	b.n	80040dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2201      	movs	r2, #1
 80040e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80040f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3730      	adds	r7, #48	@ 0x30
 8004100:	46bd      	mov	sp, r7
 8004102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004106:	bf00      	nop
 8004108:	080071b8 	.word	0x080071b8
 800410c:	00f42400 	.word	0x00f42400

08004110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01a      	beq.n	8004226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800420e:	d10a      	bne.n	8004226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  }
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b098      	sub	sp, #96	@ 0x60
 8004258:	af02      	add	r7, sp, #8
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004264:	f7fd fabe 	bl	80017e4 <HAL_GetTick>
 8004268:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d12f      	bne.n	80042d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004278:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004280:	2200      	movs	r2, #0
 8004282:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f88e 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d022      	beq.n	80042d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e6      	bne.n	8004292 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e063      	b.n	80043a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d149      	bne.n	800437a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ee:	2200      	movs	r2, #0
 80042f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f857 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d03c      	beq.n	800437a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	623b      	str	r3, [r7, #32]
   return(result);
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800431e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004320:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e6      	bne.n	8004300 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3308      	adds	r3, #8
 8004338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	60fb      	str	r3, [r7, #12]
   return(result);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3308      	adds	r3, #8
 8004350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004352:	61fa      	str	r2, [r7, #28]
 8004354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	617b      	str	r3, [r7, #20]
   return(result);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e012      	b.n	80043a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3758      	adds	r7, #88	@ 0x58
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b8:	e04f      	b.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d04b      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fd fa0f 	bl	80017e4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e04e      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d037      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b80      	cmp	r3, #128	@ 0x80
 80043ee:	d034      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b40      	cmp	r3, #64	@ 0x40
 80043f4:	d031      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b08      	cmp	r3, #8
 8004402:	d110      	bne.n	8004426 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2208      	movs	r2, #8
 800440a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f838 	bl	8004482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2208      	movs	r2, #8
 8004416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e029      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004434:	d111      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800443e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f81e 	bl	8004482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e00f      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0a0      	beq.n	80043ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004482:	b480      	push	{r7}
 8004484:	b095      	sub	sp, #84	@ 0x54
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800449e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e6      	bne.n	800448a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3308      	adds	r3, #8
 80044c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e3      	bne.n	80044bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d118      	bne.n	800452e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	60bb      	str	r3, [r7, #8]
   return(result);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f023 0310 	bic.w	r3, r3, #16
 8004510:	647b      	str	r3, [r7, #68]	@ 0x44
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	613b      	str	r3, [r7, #16]
   return(result);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e6      	bne.n	80044fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004542:	bf00      	nop
 8004544:	3754      	adds	r7, #84	@ 0x54
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_UARTEx_DisableFifoMode+0x16>
 8004560:	2302      	movs	r3, #2
 8004562:	e027      	b.n	80045b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	@ 0x24
 8004570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004592:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e02d      	b.n	8004634 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	@ 0x24
 80045e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f84f 	bl	80046b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e02d      	b.n	80046b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2224      	movs	r2, #36	@ 0x24
 8004660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f811 	bl	80046b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d108      	bne.n	80046da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046d8:	e031      	b.n	800473e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046da:	2308      	movs	r3, #8
 80046dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046de:	2308      	movs	r3, #8
 80046e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	0e5b      	lsrs	r3, r3, #25
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	0f5b      	lsrs	r3, r3, #29
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004702:	7bbb      	ldrb	r3, [r7, #14]
 8004704:	7b3a      	ldrb	r2, [r7, #12]
 8004706:	4911      	ldr	r1, [pc, #68]	@ (800474c <UARTEx_SetNbDataToProcess+0x94>)
 8004708:	5c8a      	ldrb	r2, [r1, r2]
 800470a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800470e:	7b3a      	ldrb	r2, [r7, #12]
 8004710:	490f      	ldr	r1, [pc, #60]	@ (8004750 <UARTEx_SetNbDataToProcess+0x98>)
 8004712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004714:	fb93 f3f2 	sdiv	r3, r3, r2
 8004718:	b29a      	uxth	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	7b7a      	ldrb	r2, [r7, #13]
 8004724:	4909      	ldr	r1, [pc, #36]	@ (800474c <UARTEx_SetNbDataToProcess+0x94>)
 8004726:	5c8a      	ldrb	r2, [r1, r2]
 8004728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800472c:	7b7a      	ldrb	r2, [r7, #13]
 800472e:	4908      	ldr	r1, [pc, #32]	@ (8004750 <UARTEx_SetNbDataToProcess+0x98>)
 8004730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004732:	fb93 f3f2 	sdiv	r3, r3, r2
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	080071d0 	.word	0x080071d0
 8004750:	080071d8 	.word	0x080071d8

08004754 <__cvt>:
 8004754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	ec57 6b10 	vmov	r6, r7, d0
 800475c:	2f00      	cmp	r7, #0
 800475e:	460c      	mov	r4, r1
 8004760:	4619      	mov	r1, r3
 8004762:	463b      	mov	r3, r7
 8004764:	bfbb      	ittet	lt
 8004766:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800476a:	461f      	movlt	r7, r3
 800476c:	2300      	movge	r3, #0
 800476e:	232d      	movlt	r3, #45	@ 0x2d
 8004770:	700b      	strb	r3, [r1, #0]
 8004772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004774:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004778:	4691      	mov	r9, r2
 800477a:	f023 0820 	bic.w	r8, r3, #32
 800477e:	bfbc      	itt	lt
 8004780:	4632      	movlt	r2, r6
 8004782:	4616      	movlt	r6, r2
 8004784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004788:	d005      	beq.n	8004796 <__cvt+0x42>
 800478a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800478e:	d100      	bne.n	8004792 <__cvt+0x3e>
 8004790:	3401      	adds	r4, #1
 8004792:	2102      	movs	r1, #2
 8004794:	e000      	b.n	8004798 <__cvt+0x44>
 8004796:	2103      	movs	r1, #3
 8004798:	ab03      	add	r3, sp, #12
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	ab02      	add	r3, sp, #8
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	ec47 6b10 	vmov	d0, r6, r7
 80047a4:	4653      	mov	r3, sl
 80047a6:	4622      	mov	r2, r4
 80047a8:	f000 ff2a 	bl	8005600 <_dtoa_r>
 80047ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047b0:	4605      	mov	r5, r0
 80047b2:	d119      	bne.n	80047e8 <__cvt+0x94>
 80047b4:	f019 0f01 	tst.w	r9, #1
 80047b8:	d00e      	beq.n	80047d8 <__cvt+0x84>
 80047ba:	eb00 0904 	add.w	r9, r0, r4
 80047be:	2200      	movs	r2, #0
 80047c0:	2300      	movs	r3, #0
 80047c2:	4630      	mov	r0, r6
 80047c4:	4639      	mov	r1, r7
 80047c6:	f7fc f9a7 	bl	8000b18 <__aeabi_dcmpeq>
 80047ca:	b108      	cbz	r0, 80047d0 <__cvt+0x7c>
 80047cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80047d0:	2230      	movs	r2, #48	@ 0x30
 80047d2:	9b03      	ldr	r3, [sp, #12]
 80047d4:	454b      	cmp	r3, r9
 80047d6:	d31e      	bcc.n	8004816 <__cvt+0xc2>
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047dc:	1b5b      	subs	r3, r3, r5
 80047de:	4628      	mov	r0, r5
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	b004      	add	sp, #16
 80047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047ec:	eb00 0904 	add.w	r9, r0, r4
 80047f0:	d1e5      	bne.n	80047be <__cvt+0x6a>
 80047f2:	7803      	ldrb	r3, [r0, #0]
 80047f4:	2b30      	cmp	r3, #48	@ 0x30
 80047f6:	d10a      	bne.n	800480e <__cvt+0xba>
 80047f8:	2200      	movs	r2, #0
 80047fa:	2300      	movs	r3, #0
 80047fc:	4630      	mov	r0, r6
 80047fe:	4639      	mov	r1, r7
 8004800:	f7fc f98a 	bl	8000b18 <__aeabi_dcmpeq>
 8004804:	b918      	cbnz	r0, 800480e <__cvt+0xba>
 8004806:	f1c4 0401 	rsb	r4, r4, #1
 800480a:	f8ca 4000 	str.w	r4, [sl]
 800480e:	f8da 3000 	ldr.w	r3, [sl]
 8004812:	4499      	add	r9, r3
 8004814:	e7d3      	b.n	80047be <__cvt+0x6a>
 8004816:	1c59      	adds	r1, r3, #1
 8004818:	9103      	str	r1, [sp, #12]
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e7d9      	b.n	80047d2 <__cvt+0x7e>

0800481e <__exponent>:
 800481e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004820:	2900      	cmp	r1, #0
 8004822:	bfba      	itte	lt
 8004824:	4249      	neglt	r1, r1
 8004826:	232d      	movlt	r3, #45	@ 0x2d
 8004828:	232b      	movge	r3, #43	@ 0x2b
 800482a:	2909      	cmp	r1, #9
 800482c:	7002      	strb	r2, [r0, #0]
 800482e:	7043      	strb	r3, [r0, #1]
 8004830:	dd29      	ble.n	8004886 <__exponent+0x68>
 8004832:	f10d 0307 	add.w	r3, sp, #7
 8004836:	461d      	mov	r5, r3
 8004838:	270a      	movs	r7, #10
 800483a:	461a      	mov	r2, r3
 800483c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004840:	fb07 1416 	mls	r4, r7, r6, r1
 8004844:	3430      	adds	r4, #48	@ 0x30
 8004846:	f802 4c01 	strb.w	r4, [r2, #-1]
 800484a:	460c      	mov	r4, r1
 800484c:	2c63      	cmp	r4, #99	@ 0x63
 800484e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004852:	4631      	mov	r1, r6
 8004854:	dcf1      	bgt.n	800483a <__exponent+0x1c>
 8004856:	3130      	adds	r1, #48	@ 0x30
 8004858:	1e94      	subs	r4, r2, #2
 800485a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800485e:	1c41      	adds	r1, r0, #1
 8004860:	4623      	mov	r3, r4
 8004862:	42ab      	cmp	r3, r5
 8004864:	d30a      	bcc.n	800487c <__exponent+0x5e>
 8004866:	f10d 0309 	add.w	r3, sp, #9
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	42ac      	cmp	r4, r5
 800486e:	bf88      	it	hi
 8004870:	2300      	movhi	r3, #0
 8004872:	3302      	adds	r3, #2
 8004874:	4403      	add	r3, r0
 8004876:	1a18      	subs	r0, r3, r0
 8004878:	b003      	add	sp, #12
 800487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800487c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004880:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004884:	e7ed      	b.n	8004862 <__exponent+0x44>
 8004886:	2330      	movs	r3, #48	@ 0x30
 8004888:	3130      	adds	r1, #48	@ 0x30
 800488a:	7083      	strb	r3, [r0, #2]
 800488c:	70c1      	strb	r1, [r0, #3]
 800488e:	1d03      	adds	r3, r0, #4
 8004890:	e7f1      	b.n	8004876 <__exponent+0x58>
	...

08004894 <_printf_float>:
 8004894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	b08d      	sub	sp, #52	@ 0x34
 800489a:	460c      	mov	r4, r1
 800489c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80048a0:	4616      	mov	r6, r2
 80048a2:	461f      	mov	r7, r3
 80048a4:	4605      	mov	r5, r0
 80048a6:	f000 fdab 	bl	8005400 <_localeconv_r>
 80048aa:	6803      	ldr	r3, [r0, #0]
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb fd06 	bl	80002c0 <strlen>
 80048b4:	2300      	movs	r3, #0
 80048b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80048b8:	f8d8 3000 	ldr.w	r3, [r8]
 80048bc:	9005      	str	r0, [sp, #20]
 80048be:	3307      	adds	r3, #7
 80048c0:	f023 0307 	bic.w	r3, r3, #7
 80048c4:	f103 0208 	add.w	r2, r3, #8
 80048c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048cc:	f8d4 b000 	ldr.w	fp, [r4]
 80048d0:	f8c8 2000 	str.w	r2, [r8]
 80048d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048dc:	9307      	str	r3, [sp, #28]
 80048de:	f8cd 8018 	str.w	r8, [sp, #24]
 80048e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048ea:	4b9c      	ldr	r3, [pc, #624]	@ (8004b5c <_printf_float+0x2c8>)
 80048ec:	f04f 32ff 	mov.w	r2, #4294967295
 80048f0:	f7fc f944 	bl	8000b7c <__aeabi_dcmpun>
 80048f4:	bb70      	cbnz	r0, 8004954 <_printf_float+0xc0>
 80048f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048fa:	4b98      	ldr	r3, [pc, #608]	@ (8004b5c <_printf_float+0x2c8>)
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004900:	f7fc f91e 	bl	8000b40 <__aeabi_dcmple>
 8004904:	bb30      	cbnz	r0, 8004954 <_printf_float+0xc0>
 8004906:	2200      	movs	r2, #0
 8004908:	2300      	movs	r3, #0
 800490a:	4640      	mov	r0, r8
 800490c:	4649      	mov	r1, r9
 800490e:	f7fc f90d 	bl	8000b2c <__aeabi_dcmplt>
 8004912:	b110      	cbz	r0, 800491a <_printf_float+0x86>
 8004914:	232d      	movs	r3, #45	@ 0x2d
 8004916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800491a:	4a91      	ldr	r2, [pc, #580]	@ (8004b60 <_printf_float+0x2cc>)
 800491c:	4b91      	ldr	r3, [pc, #580]	@ (8004b64 <_printf_float+0x2d0>)
 800491e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004922:	bf8c      	ite	hi
 8004924:	4690      	movhi	r8, r2
 8004926:	4698      	movls	r8, r3
 8004928:	2303      	movs	r3, #3
 800492a:	6123      	str	r3, [r4, #16]
 800492c:	f02b 0304 	bic.w	r3, fp, #4
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	f04f 0900 	mov.w	r9, #0
 8004936:	9700      	str	r7, [sp, #0]
 8004938:	4633      	mov	r3, r6
 800493a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800493c:	4621      	mov	r1, r4
 800493e:	4628      	mov	r0, r5
 8004940:	f000 f9d2 	bl	8004ce8 <_printf_common>
 8004944:	3001      	adds	r0, #1
 8004946:	f040 808d 	bne.w	8004a64 <_printf_float+0x1d0>
 800494a:	f04f 30ff 	mov.w	r0, #4294967295
 800494e:	b00d      	add	sp, #52	@ 0x34
 8004950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004954:	4642      	mov	r2, r8
 8004956:	464b      	mov	r3, r9
 8004958:	4640      	mov	r0, r8
 800495a:	4649      	mov	r1, r9
 800495c:	f7fc f90e 	bl	8000b7c <__aeabi_dcmpun>
 8004960:	b140      	cbz	r0, 8004974 <_printf_float+0xe0>
 8004962:	464b      	mov	r3, r9
 8004964:	2b00      	cmp	r3, #0
 8004966:	bfbc      	itt	lt
 8004968:	232d      	movlt	r3, #45	@ 0x2d
 800496a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800496e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b68 <_printf_float+0x2d4>)
 8004970:	4b7e      	ldr	r3, [pc, #504]	@ (8004b6c <_printf_float+0x2d8>)
 8004972:	e7d4      	b.n	800491e <_printf_float+0x8a>
 8004974:	6863      	ldr	r3, [r4, #4]
 8004976:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800497a:	9206      	str	r2, [sp, #24]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	d13b      	bne.n	80049f8 <_printf_float+0x164>
 8004980:	2306      	movs	r3, #6
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004988:	2300      	movs	r3, #0
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	9303      	str	r3, [sp, #12]
 800498e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004990:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004994:	ab09      	add	r3, sp, #36	@ 0x24
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	6861      	ldr	r1, [r4, #4]
 800499a:	ec49 8b10 	vmov	d0, r8, r9
 800499e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80049a2:	4628      	mov	r0, r5
 80049a4:	f7ff fed6 	bl	8004754 <__cvt>
 80049a8:	9b06      	ldr	r3, [sp, #24]
 80049aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049ac:	2b47      	cmp	r3, #71	@ 0x47
 80049ae:	4680      	mov	r8, r0
 80049b0:	d129      	bne.n	8004a06 <_printf_float+0x172>
 80049b2:	1cc8      	adds	r0, r1, #3
 80049b4:	db02      	blt.n	80049bc <_printf_float+0x128>
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	4299      	cmp	r1, r3
 80049ba:	dd41      	ble.n	8004a40 <_printf_float+0x1ac>
 80049bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80049c0:	fa5f fa8a 	uxtb.w	sl, sl
 80049c4:	3901      	subs	r1, #1
 80049c6:	4652      	mov	r2, sl
 80049c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80049ce:	f7ff ff26 	bl	800481e <__exponent>
 80049d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049d4:	1813      	adds	r3, r2, r0
 80049d6:	2a01      	cmp	r2, #1
 80049d8:	4681      	mov	r9, r0
 80049da:	6123      	str	r3, [r4, #16]
 80049dc:	dc02      	bgt.n	80049e4 <_printf_float+0x150>
 80049de:	6822      	ldr	r2, [r4, #0]
 80049e0:	07d2      	lsls	r2, r2, #31
 80049e2:	d501      	bpl.n	80049e8 <_printf_float+0x154>
 80049e4:	3301      	adds	r3, #1
 80049e6:	6123      	str	r3, [r4, #16]
 80049e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0a2      	beq.n	8004936 <_printf_float+0xa2>
 80049f0:	232d      	movs	r3, #45	@ 0x2d
 80049f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049f6:	e79e      	b.n	8004936 <_printf_float+0xa2>
 80049f8:	9a06      	ldr	r2, [sp, #24]
 80049fa:	2a47      	cmp	r2, #71	@ 0x47
 80049fc:	d1c2      	bne.n	8004984 <_printf_float+0xf0>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1c0      	bne.n	8004984 <_printf_float+0xf0>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e7bd      	b.n	8004982 <_printf_float+0xee>
 8004a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a0a:	d9db      	bls.n	80049c4 <_printf_float+0x130>
 8004a0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a10:	d118      	bne.n	8004a44 <_printf_float+0x1b0>
 8004a12:	2900      	cmp	r1, #0
 8004a14:	6863      	ldr	r3, [r4, #4]
 8004a16:	dd0b      	ble.n	8004a30 <_printf_float+0x19c>
 8004a18:	6121      	str	r1, [r4, #16]
 8004a1a:	b913      	cbnz	r3, 8004a22 <_printf_float+0x18e>
 8004a1c:	6822      	ldr	r2, [r4, #0]
 8004a1e:	07d0      	lsls	r0, r2, #31
 8004a20:	d502      	bpl.n	8004a28 <_printf_float+0x194>
 8004a22:	3301      	adds	r3, #1
 8004a24:	440b      	add	r3, r1
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a2a:	f04f 0900 	mov.w	r9, #0
 8004a2e:	e7db      	b.n	80049e8 <_printf_float+0x154>
 8004a30:	b913      	cbnz	r3, 8004a38 <_printf_float+0x1a4>
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	07d2      	lsls	r2, r2, #31
 8004a36:	d501      	bpl.n	8004a3c <_printf_float+0x1a8>
 8004a38:	3302      	adds	r3, #2
 8004a3a:	e7f4      	b.n	8004a26 <_printf_float+0x192>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e7f2      	b.n	8004a26 <_printf_float+0x192>
 8004a40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a46:	4299      	cmp	r1, r3
 8004a48:	db05      	blt.n	8004a56 <_printf_float+0x1c2>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	6121      	str	r1, [r4, #16]
 8004a4e:	07d8      	lsls	r0, r3, #31
 8004a50:	d5ea      	bpl.n	8004a28 <_printf_float+0x194>
 8004a52:	1c4b      	adds	r3, r1, #1
 8004a54:	e7e7      	b.n	8004a26 <_printf_float+0x192>
 8004a56:	2900      	cmp	r1, #0
 8004a58:	bfd4      	ite	le
 8004a5a:	f1c1 0202 	rsble	r2, r1, #2
 8004a5e:	2201      	movgt	r2, #1
 8004a60:	4413      	add	r3, r2
 8004a62:	e7e0      	b.n	8004a26 <_printf_float+0x192>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	055a      	lsls	r2, r3, #21
 8004a68:	d407      	bmi.n	8004a7a <_printf_float+0x1e6>
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	d12b      	bne.n	8004ad0 <_printf_float+0x23c>
 8004a78:	e767      	b.n	800494a <_printf_float+0xb6>
 8004a7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a7e:	f240 80dd 	bls.w	8004c3c <_printf_float+0x3a8>
 8004a82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a86:	2200      	movs	r2, #0
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f7fc f845 	bl	8000b18 <__aeabi_dcmpeq>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d033      	beq.n	8004afa <_printf_float+0x266>
 8004a92:	4a37      	ldr	r2, [pc, #220]	@ (8004b70 <_printf_float+0x2dc>)
 8004a94:	2301      	movs	r3, #1
 8004a96:	4631      	mov	r1, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f af54 	beq.w	800494a <_printf_float+0xb6>
 8004aa2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004aa6:	4543      	cmp	r3, r8
 8004aa8:	db02      	blt.n	8004ab0 <_printf_float+0x21c>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	07d8      	lsls	r0, r3, #31
 8004aae:	d50f      	bpl.n	8004ad0 <_printf_float+0x23c>
 8004ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	47b8      	blx	r7
 8004aba:	3001      	adds	r0, #1
 8004abc:	f43f af45 	beq.w	800494a <_printf_float+0xb6>
 8004ac0:	f04f 0900 	mov.w	r9, #0
 8004ac4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ac8:	f104 0a1a 	add.w	sl, r4, #26
 8004acc:	45c8      	cmp	r8, r9
 8004ace:	dc09      	bgt.n	8004ae4 <_printf_float+0x250>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	079b      	lsls	r3, r3, #30
 8004ad4:	f100 8103 	bmi.w	8004cde <_printf_float+0x44a>
 8004ad8:	68e0      	ldr	r0, [r4, #12]
 8004ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004adc:	4298      	cmp	r0, r3
 8004ade:	bfb8      	it	lt
 8004ae0:	4618      	movlt	r0, r3
 8004ae2:	e734      	b.n	800494e <_printf_float+0xba>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4652      	mov	r2, sl
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4628      	mov	r0, r5
 8004aec:	47b8      	blx	r7
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f af2b 	beq.w	800494a <_printf_float+0xb6>
 8004af4:	f109 0901 	add.w	r9, r9, #1
 8004af8:	e7e8      	b.n	8004acc <_printf_float+0x238>
 8004afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	dc39      	bgt.n	8004b74 <_printf_float+0x2e0>
 8004b00:	4a1b      	ldr	r2, [pc, #108]	@ (8004b70 <_printf_float+0x2dc>)
 8004b02:	2301      	movs	r3, #1
 8004b04:	4631      	mov	r1, r6
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b8      	blx	r7
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	f43f af1d 	beq.w	800494a <_printf_float+0xb6>
 8004b10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b14:	ea59 0303 	orrs.w	r3, r9, r3
 8004b18:	d102      	bne.n	8004b20 <_printf_float+0x28c>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	07d9      	lsls	r1, r3, #31
 8004b1e:	d5d7      	bpl.n	8004ad0 <_printf_float+0x23c>
 8004b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b24:	4631      	mov	r1, r6
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b8      	blx	r7
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	f43f af0d 	beq.w	800494a <_printf_float+0xb6>
 8004b30:	f04f 0a00 	mov.w	sl, #0
 8004b34:	f104 0b1a 	add.w	fp, r4, #26
 8004b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b3a:	425b      	negs	r3, r3
 8004b3c:	4553      	cmp	r3, sl
 8004b3e:	dc01      	bgt.n	8004b44 <_printf_float+0x2b0>
 8004b40:	464b      	mov	r3, r9
 8004b42:	e793      	b.n	8004a6c <_printf_float+0x1d8>
 8004b44:	2301      	movs	r3, #1
 8004b46:	465a      	mov	r2, fp
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b8      	blx	r7
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f43f aefb 	beq.w	800494a <_printf_float+0xb6>
 8004b54:	f10a 0a01 	add.w	sl, sl, #1
 8004b58:	e7ee      	b.n	8004b38 <_printf_float+0x2a4>
 8004b5a:	bf00      	nop
 8004b5c:	7fefffff 	.word	0x7fefffff
 8004b60:	080071e4 	.word	0x080071e4
 8004b64:	080071e0 	.word	0x080071e0
 8004b68:	080071ec 	.word	0x080071ec
 8004b6c:	080071e8 	.word	0x080071e8
 8004b70:	080071f0 	.word	0x080071f0
 8004b74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b7a:	4553      	cmp	r3, sl
 8004b7c:	bfa8      	it	ge
 8004b7e:	4653      	movge	r3, sl
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	4699      	mov	r9, r3
 8004b84:	dc36      	bgt.n	8004bf4 <_printf_float+0x360>
 8004b86:	f04f 0b00 	mov.w	fp, #0
 8004b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b8e:	f104 021a 	add.w	r2, r4, #26
 8004b92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b94:	9306      	str	r3, [sp, #24]
 8004b96:	eba3 0309 	sub.w	r3, r3, r9
 8004b9a:	455b      	cmp	r3, fp
 8004b9c:	dc31      	bgt.n	8004c02 <_printf_float+0x36e>
 8004b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba0:	459a      	cmp	sl, r3
 8004ba2:	dc3a      	bgt.n	8004c1a <_printf_float+0x386>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	07da      	lsls	r2, r3, #31
 8004ba8:	d437      	bmi.n	8004c1a <_printf_float+0x386>
 8004baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bac:	ebaa 0903 	sub.w	r9, sl, r3
 8004bb0:	9b06      	ldr	r3, [sp, #24]
 8004bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8004bb6:	4599      	cmp	r9, r3
 8004bb8:	bfa8      	it	ge
 8004bba:	4699      	movge	r9, r3
 8004bbc:	f1b9 0f00 	cmp.w	r9, #0
 8004bc0:	dc33      	bgt.n	8004c2a <_printf_float+0x396>
 8004bc2:	f04f 0800 	mov.w	r8, #0
 8004bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bca:	f104 0b1a 	add.w	fp, r4, #26
 8004bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bd0:	ebaa 0303 	sub.w	r3, sl, r3
 8004bd4:	eba3 0309 	sub.w	r3, r3, r9
 8004bd8:	4543      	cmp	r3, r8
 8004bda:	f77f af79 	ble.w	8004ad0 <_printf_float+0x23c>
 8004bde:	2301      	movs	r3, #1
 8004be0:	465a      	mov	r2, fp
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	f43f aeae 	beq.w	800494a <_printf_float+0xb6>
 8004bee:	f108 0801 	add.w	r8, r8, #1
 8004bf2:	e7ec      	b.n	8004bce <_printf_float+0x33a>
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b8      	blx	r7
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d1c2      	bne.n	8004b86 <_printf_float+0x2f2>
 8004c00:	e6a3      	b.n	800494a <_printf_float+0xb6>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4631      	mov	r1, r6
 8004c06:	4628      	mov	r0, r5
 8004c08:	9206      	str	r2, [sp, #24]
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	f43f ae9c 	beq.w	800494a <_printf_float+0xb6>
 8004c12:	9a06      	ldr	r2, [sp, #24]
 8004c14:	f10b 0b01 	add.w	fp, fp, #1
 8004c18:	e7bb      	b.n	8004b92 <_printf_float+0x2fe>
 8004c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	d1c0      	bne.n	8004baa <_printf_float+0x316>
 8004c28:	e68f      	b.n	800494a <_printf_float+0xb6>
 8004c2a:	9a06      	ldr	r2, [sp, #24]
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	4442      	add	r2, r8
 8004c30:	4631      	mov	r1, r6
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	d1c3      	bne.n	8004bc2 <_printf_float+0x32e>
 8004c3a:	e686      	b.n	800494a <_printf_float+0xb6>
 8004c3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c40:	f1ba 0f01 	cmp.w	sl, #1
 8004c44:	dc01      	bgt.n	8004c4a <_printf_float+0x3b6>
 8004c46:	07db      	lsls	r3, r3, #31
 8004c48:	d536      	bpl.n	8004cb8 <_printf_float+0x424>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	f43f ae78 	beq.w	800494a <_printf_float+0xb6>
 8004c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	f43f ae70 	beq.w	800494a <_printf_float+0xb6>
 8004c6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2300      	movs	r3, #0
 8004c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c76:	f7fb ff4f 	bl	8000b18 <__aeabi_dcmpeq>
 8004c7a:	b9c0      	cbnz	r0, 8004cae <_printf_float+0x41a>
 8004c7c:	4653      	mov	r3, sl
 8004c7e:	f108 0201 	add.w	r2, r8, #1
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d10c      	bne.n	8004ca6 <_printf_float+0x412>
 8004c8c:	e65d      	b.n	800494a <_printf_float+0xb6>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	465a      	mov	r2, fp
 8004c92:	4631      	mov	r1, r6
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b8      	blx	r7
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f43f ae56 	beq.w	800494a <_printf_float+0xb6>
 8004c9e:	f108 0801 	add.w	r8, r8, #1
 8004ca2:	45d0      	cmp	r8, sl
 8004ca4:	dbf3      	blt.n	8004c8e <_printf_float+0x3fa>
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004cac:	e6df      	b.n	8004a6e <_printf_float+0x1da>
 8004cae:	f04f 0800 	mov.w	r8, #0
 8004cb2:	f104 0b1a 	add.w	fp, r4, #26
 8004cb6:	e7f4      	b.n	8004ca2 <_printf_float+0x40e>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4642      	mov	r2, r8
 8004cbc:	e7e1      	b.n	8004c82 <_printf_float+0x3ee>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	464a      	mov	r2, r9
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	f43f ae3e 	beq.w	800494a <_printf_float+0xb6>
 8004cce:	f108 0801 	add.w	r8, r8, #1
 8004cd2:	68e3      	ldr	r3, [r4, #12]
 8004cd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cd6:	1a5b      	subs	r3, r3, r1
 8004cd8:	4543      	cmp	r3, r8
 8004cda:	dcf0      	bgt.n	8004cbe <_printf_float+0x42a>
 8004cdc:	e6fc      	b.n	8004ad8 <_printf_float+0x244>
 8004cde:	f04f 0800 	mov.w	r8, #0
 8004ce2:	f104 0919 	add.w	r9, r4, #25
 8004ce6:	e7f4      	b.n	8004cd2 <_printf_float+0x43e>

08004ce8 <_printf_common>:
 8004ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	4616      	mov	r6, r2
 8004cee:	4698      	mov	r8, r3
 8004cf0:	688a      	ldr	r2, [r1, #8]
 8004cf2:	690b      	ldr	r3, [r1, #16]
 8004cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bfb8      	it	lt
 8004cfc:	4613      	movlt	r3, r2
 8004cfe:	6033      	str	r3, [r6, #0]
 8004d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d04:	4607      	mov	r7, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	b10a      	cbz	r2, 8004d0e <_printf_common+0x26>
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	0699      	lsls	r1, r3, #26
 8004d12:	bf42      	ittt	mi
 8004d14:	6833      	ldrmi	r3, [r6, #0]
 8004d16:	3302      	addmi	r3, #2
 8004d18:	6033      	strmi	r3, [r6, #0]
 8004d1a:	6825      	ldr	r5, [r4, #0]
 8004d1c:	f015 0506 	ands.w	r5, r5, #6
 8004d20:	d106      	bne.n	8004d30 <_printf_common+0x48>
 8004d22:	f104 0a19 	add.w	sl, r4, #25
 8004d26:	68e3      	ldr	r3, [r4, #12]
 8004d28:	6832      	ldr	r2, [r6, #0]
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	42ab      	cmp	r3, r5
 8004d2e:	dc26      	bgt.n	8004d7e <_printf_common+0x96>
 8004d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	3b00      	subs	r3, #0
 8004d38:	bf18      	it	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	0692      	lsls	r2, r2, #26
 8004d3e:	d42b      	bmi.n	8004d98 <_printf_common+0xb0>
 8004d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d44:	4641      	mov	r1, r8
 8004d46:	4638      	mov	r0, r7
 8004d48:	47c8      	blx	r9
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d01e      	beq.n	8004d8c <_printf_common+0xa4>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	6922      	ldr	r2, [r4, #16]
 8004d52:	f003 0306 	and.w	r3, r3, #6
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	bf02      	ittt	eq
 8004d5a:	68e5      	ldreq	r5, [r4, #12]
 8004d5c:	6833      	ldreq	r3, [r6, #0]
 8004d5e:	1aed      	subeq	r5, r5, r3
 8004d60:	68a3      	ldr	r3, [r4, #8]
 8004d62:	bf0c      	ite	eq
 8004d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d68:	2500      	movne	r5, #0
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bfc4      	itt	gt
 8004d6e:	1a9b      	subgt	r3, r3, r2
 8004d70:	18ed      	addgt	r5, r5, r3
 8004d72:	2600      	movs	r6, #0
 8004d74:	341a      	adds	r4, #26
 8004d76:	42b5      	cmp	r5, r6
 8004d78:	d11a      	bne.n	8004db0 <_printf_common+0xc8>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e008      	b.n	8004d90 <_printf_common+0xa8>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4652      	mov	r2, sl
 8004d82:	4641      	mov	r1, r8
 8004d84:	4638      	mov	r0, r7
 8004d86:	47c8      	blx	r9
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d103      	bne.n	8004d94 <_printf_common+0xac>
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d94:	3501      	adds	r5, #1
 8004d96:	e7c6      	b.n	8004d26 <_printf_common+0x3e>
 8004d98:	18e1      	adds	r1, r4, r3
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	2030      	movs	r0, #48	@ 0x30
 8004d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004da2:	4422      	add	r2, r4
 8004da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dac:	3302      	adds	r3, #2
 8004dae:	e7c7      	b.n	8004d40 <_printf_common+0x58>
 8004db0:	2301      	movs	r3, #1
 8004db2:	4622      	mov	r2, r4
 8004db4:	4641      	mov	r1, r8
 8004db6:	4638      	mov	r0, r7
 8004db8:	47c8      	blx	r9
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d0e6      	beq.n	8004d8c <_printf_common+0xa4>
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7d9      	b.n	8004d76 <_printf_common+0x8e>
	...

08004dc4 <_printf_i>:
 8004dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	7e0f      	ldrb	r7, [r1, #24]
 8004dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dcc:	2f78      	cmp	r7, #120	@ 0x78
 8004dce:	4691      	mov	r9, r2
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	469a      	mov	sl, r3
 8004dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dda:	d807      	bhi.n	8004dec <_printf_i+0x28>
 8004ddc:	2f62      	cmp	r7, #98	@ 0x62
 8004dde:	d80a      	bhi.n	8004df6 <_printf_i+0x32>
 8004de0:	2f00      	cmp	r7, #0
 8004de2:	f000 80d1 	beq.w	8004f88 <_printf_i+0x1c4>
 8004de6:	2f58      	cmp	r7, #88	@ 0x58
 8004de8:	f000 80b8 	beq.w	8004f5c <_printf_i+0x198>
 8004dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004df4:	e03a      	b.n	8004e6c <_printf_i+0xa8>
 8004df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dfa:	2b15      	cmp	r3, #21
 8004dfc:	d8f6      	bhi.n	8004dec <_printf_i+0x28>
 8004dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8004e04 <_printf_i+0x40>)
 8004e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e04:	08004e5d 	.word	0x08004e5d
 8004e08:	08004e71 	.word	0x08004e71
 8004e0c:	08004ded 	.word	0x08004ded
 8004e10:	08004ded 	.word	0x08004ded
 8004e14:	08004ded 	.word	0x08004ded
 8004e18:	08004ded 	.word	0x08004ded
 8004e1c:	08004e71 	.word	0x08004e71
 8004e20:	08004ded 	.word	0x08004ded
 8004e24:	08004ded 	.word	0x08004ded
 8004e28:	08004ded 	.word	0x08004ded
 8004e2c:	08004ded 	.word	0x08004ded
 8004e30:	08004f6f 	.word	0x08004f6f
 8004e34:	08004e9b 	.word	0x08004e9b
 8004e38:	08004f29 	.word	0x08004f29
 8004e3c:	08004ded 	.word	0x08004ded
 8004e40:	08004ded 	.word	0x08004ded
 8004e44:	08004f91 	.word	0x08004f91
 8004e48:	08004ded 	.word	0x08004ded
 8004e4c:	08004e9b 	.word	0x08004e9b
 8004e50:	08004ded 	.word	0x08004ded
 8004e54:	08004ded 	.word	0x08004ded
 8004e58:	08004f31 	.word	0x08004f31
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6032      	str	r2, [r6, #0]
 8004e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e09c      	b.n	8004faa <_printf_i+0x1e6>
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	1d19      	adds	r1, r3, #4
 8004e76:	6031      	str	r1, [r6, #0]
 8004e78:	0606      	lsls	r6, r0, #24
 8004e7a:	d501      	bpl.n	8004e80 <_printf_i+0xbc>
 8004e7c:	681d      	ldr	r5, [r3, #0]
 8004e7e:	e003      	b.n	8004e88 <_printf_i+0xc4>
 8004e80:	0645      	lsls	r5, r0, #25
 8004e82:	d5fb      	bpl.n	8004e7c <_printf_i+0xb8>
 8004e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	da03      	bge.n	8004e94 <_printf_i+0xd0>
 8004e8c:	232d      	movs	r3, #45	@ 0x2d
 8004e8e:	426d      	negs	r5, r5
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e94:	4858      	ldr	r0, [pc, #352]	@ (8004ff8 <_printf_i+0x234>)
 8004e96:	230a      	movs	r3, #10
 8004e98:	e011      	b.n	8004ebe <_printf_i+0xfa>
 8004e9a:	6821      	ldr	r1, [r4, #0]
 8004e9c:	6833      	ldr	r3, [r6, #0]
 8004e9e:	0608      	lsls	r0, r1, #24
 8004ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ea4:	d402      	bmi.n	8004eac <_printf_i+0xe8>
 8004ea6:	0649      	lsls	r1, r1, #25
 8004ea8:	bf48      	it	mi
 8004eaa:	b2ad      	uxthmi	r5, r5
 8004eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eae:	4852      	ldr	r0, [pc, #328]	@ (8004ff8 <_printf_i+0x234>)
 8004eb0:	6033      	str	r3, [r6, #0]
 8004eb2:	bf14      	ite	ne
 8004eb4:	230a      	movne	r3, #10
 8004eb6:	2308      	moveq	r3, #8
 8004eb8:	2100      	movs	r1, #0
 8004eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ebe:	6866      	ldr	r6, [r4, #4]
 8004ec0:	60a6      	str	r6, [r4, #8]
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	db05      	blt.n	8004ed2 <_printf_i+0x10e>
 8004ec6:	6821      	ldr	r1, [r4, #0]
 8004ec8:	432e      	orrs	r6, r5
 8004eca:	f021 0104 	bic.w	r1, r1, #4
 8004ece:	6021      	str	r1, [r4, #0]
 8004ed0:	d04b      	beq.n	8004f6a <_printf_i+0x1a6>
 8004ed2:	4616      	mov	r6, r2
 8004ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8004edc:	5dc7      	ldrb	r7, [r0, r7]
 8004ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ee2:	462f      	mov	r7, r5
 8004ee4:	42bb      	cmp	r3, r7
 8004ee6:	460d      	mov	r5, r1
 8004ee8:	d9f4      	bls.n	8004ed4 <_printf_i+0x110>
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d10b      	bne.n	8004f06 <_printf_i+0x142>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	07df      	lsls	r7, r3, #31
 8004ef2:	d508      	bpl.n	8004f06 <_printf_i+0x142>
 8004ef4:	6923      	ldr	r3, [r4, #16]
 8004ef6:	6861      	ldr	r1, [r4, #4]
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	bfde      	ittt	le
 8004efc:	2330      	movle	r3, #48	@ 0x30
 8004efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f06:	1b92      	subs	r2, r2, r6
 8004f08:	6122      	str	r2, [r4, #16]
 8004f0a:	f8cd a000 	str.w	sl, [sp]
 8004f0e:	464b      	mov	r3, r9
 8004f10:	aa03      	add	r2, sp, #12
 8004f12:	4621      	mov	r1, r4
 8004f14:	4640      	mov	r0, r8
 8004f16:	f7ff fee7 	bl	8004ce8 <_printf_common>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d14a      	bne.n	8004fb4 <_printf_i+0x1f0>
 8004f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f22:	b004      	add	sp, #16
 8004f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	f043 0320 	orr.w	r3, r3, #32
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	4832      	ldr	r0, [pc, #200]	@ (8004ffc <_printf_i+0x238>)
 8004f32:	2778      	movs	r7, #120	@ 0x78
 8004f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	6831      	ldr	r1, [r6, #0]
 8004f3c:	061f      	lsls	r7, r3, #24
 8004f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f42:	d402      	bmi.n	8004f4a <_printf_i+0x186>
 8004f44:	065f      	lsls	r7, r3, #25
 8004f46:	bf48      	it	mi
 8004f48:	b2ad      	uxthmi	r5, r5
 8004f4a:	6031      	str	r1, [r6, #0]
 8004f4c:	07d9      	lsls	r1, r3, #31
 8004f4e:	bf44      	itt	mi
 8004f50:	f043 0320 	orrmi.w	r3, r3, #32
 8004f54:	6023      	strmi	r3, [r4, #0]
 8004f56:	b11d      	cbz	r5, 8004f60 <_printf_i+0x19c>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	e7ad      	b.n	8004eb8 <_printf_i+0xf4>
 8004f5c:	4826      	ldr	r0, [pc, #152]	@ (8004ff8 <_printf_i+0x234>)
 8004f5e:	e7e9      	b.n	8004f34 <_printf_i+0x170>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	f023 0320 	bic.w	r3, r3, #32
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	e7f6      	b.n	8004f58 <_printf_i+0x194>
 8004f6a:	4616      	mov	r6, r2
 8004f6c:	e7bd      	b.n	8004eea <_printf_i+0x126>
 8004f6e:	6833      	ldr	r3, [r6, #0]
 8004f70:	6825      	ldr	r5, [r4, #0]
 8004f72:	6961      	ldr	r1, [r4, #20]
 8004f74:	1d18      	adds	r0, r3, #4
 8004f76:	6030      	str	r0, [r6, #0]
 8004f78:	062e      	lsls	r6, r5, #24
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	d501      	bpl.n	8004f82 <_printf_i+0x1be>
 8004f7e:	6019      	str	r1, [r3, #0]
 8004f80:	e002      	b.n	8004f88 <_printf_i+0x1c4>
 8004f82:	0668      	lsls	r0, r5, #25
 8004f84:	d5fb      	bpl.n	8004f7e <_printf_i+0x1ba>
 8004f86:	8019      	strh	r1, [r3, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	e7bc      	b.n	8004f0a <_printf_i+0x146>
 8004f90:	6833      	ldr	r3, [r6, #0]
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	6032      	str	r2, [r6, #0]
 8004f96:	681e      	ldr	r6, [r3, #0]
 8004f98:	6862      	ldr	r2, [r4, #4]
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f7fb f93f 	bl	8000220 <memchr>
 8004fa2:	b108      	cbz	r0, 8004fa8 <_printf_i+0x1e4>
 8004fa4:	1b80      	subs	r0, r0, r6
 8004fa6:	6060      	str	r0, [r4, #4]
 8004fa8:	6863      	ldr	r3, [r4, #4]
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	2300      	movs	r3, #0
 8004fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb2:	e7aa      	b.n	8004f0a <_printf_i+0x146>
 8004fb4:	6923      	ldr	r3, [r4, #16]
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	4649      	mov	r1, r9
 8004fba:	4640      	mov	r0, r8
 8004fbc:	47d0      	blx	sl
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d0ad      	beq.n	8004f1e <_printf_i+0x15a>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	079b      	lsls	r3, r3, #30
 8004fc6:	d413      	bmi.n	8004ff0 <_printf_i+0x22c>
 8004fc8:	68e0      	ldr	r0, [r4, #12]
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	4298      	cmp	r0, r3
 8004fce:	bfb8      	it	lt
 8004fd0:	4618      	movlt	r0, r3
 8004fd2:	e7a6      	b.n	8004f22 <_printf_i+0x15e>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4632      	mov	r2, r6
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4640      	mov	r0, r8
 8004fdc:	47d0      	blx	sl
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d09d      	beq.n	8004f1e <_printf_i+0x15a>
 8004fe2:	3501      	adds	r5, #1
 8004fe4:	68e3      	ldr	r3, [r4, #12]
 8004fe6:	9903      	ldr	r1, [sp, #12]
 8004fe8:	1a5b      	subs	r3, r3, r1
 8004fea:	42ab      	cmp	r3, r5
 8004fec:	dcf2      	bgt.n	8004fd4 <_printf_i+0x210>
 8004fee:	e7eb      	b.n	8004fc8 <_printf_i+0x204>
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	f104 0619 	add.w	r6, r4, #25
 8004ff6:	e7f5      	b.n	8004fe4 <_printf_i+0x220>
 8004ff8:	080071f2 	.word	0x080071f2
 8004ffc:	08007203 	.word	0x08007203

08005000 <std>:
 8005000:	2300      	movs	r3, #0
 8005002:	b510      	push	{r4, lr}
 8005004:	4604      	mov	r4, r0
 8005006:	e9c0 3300 	strd	r3, r3, [r0]
 800500a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800500e:	6083      	str	r3, [r0, #8]
 8005010:	8181      	strh	r1, [r0, #12]
 8005012:	6643      	str	r3, [r0, #100]	@ 0x64
 8005014:	81c2      	strh	r2, [r0, #14]
 8005016:	6183      	str	r3, [r0, #24]
 8005018:	4619      	mov	r1, r3
 800501a:	2208      	movs	r2, #8
 800501c:	305c      	adds	r0, #92	@ 0x5c
 800501e:	f000 f9e7 	bl	80053f0 <memset>
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <std+0x58>)
 8005024:	6263      	str	r3, [r4, #36]	@ 0x24
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <std+0x5c>)
 8005028:	62a3      	str	r3, [r4, #40]	@ 0x28
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <std+0x60>)
 800502c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <std+0x64>)
 8005030:	6323      	str	r3, [r4, #48]	@ 0x30
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <std+0x68>)
 8005034:	6224      	str	r4, [r4, #32]
 8005036:	429c      	cmp	r4, r3
 8005038:	d006      	beq.n	8005048 <std+0x48>
 800503a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800503e:	4294      	cmp	r4, r2
 8005040:	d002      	beq.n	8005048 <std+0x48>
 8005042:	33d0      	adds	r3, #208	@ 0xd0
 8005044:	429c      	cmp	r4, r3
 8005046:	d105      	bne.n	8005054 <std+0x54>
 8005048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800504c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005050:	f000 ba4a 	b.w	80054e8 <__retarget_lock_init_recursive>
 8005054:	bd10      	pop	{r4, pc}
 8005056:	bf00      	nop
 8005058:	08005241 	.word	0x08005241
 800505c:	08005263 	.word	0x08005263
 8005060:	0800529b 	.word	0x0800529b
 8005064:	080052bf 	.word	0x080052bf
 8005068:	2000034c 	.word	0x2000034c

0800506c <stdio_exit_handler>:
 800506c:	4a02      	ldr	r2, [pc, #8]	@ (8005078 <stdio_exit_handler+0xc>)
 800506e:	4903      	ldr	r1, [pc, #12]	@ (800507c <stdio_exit_handler+0x10>)
 8005070:	4803      	ldr	r0, [pc, #12]	@ (8005080 <stdio_exit_handler+0x14>)
 8005072:	f000 b869 	b.w	8005148 <_fwalk_sglue>
 8005076:	bf00      	nop
 8005078:	20000014 	.word	0x20000014
 800507c:	08006b9d 	.word	0x08006b9d
 8005080:	20000024 	.word	0x20000024

08005084 <cleanup_stdio>:
 8005084:	6841      	ldr	r1, [r0, #4]
 8005086:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <cleanup_stdio+0x34>)
 8005088:	4299      	cmp	r1, r3
 800508a:	b510      	push	{r4, lr}
 800508c:	4604      	mov	r4, r0
 800508e:	d001      	beq.n	8005094 <cleanup_stdio+0x10>
 8005090:	f001 fd84 	bl	8006b9c <_fflush_r>
 8005094:	68a1      	ldr	r1, [r4, #8]
 8005096:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <cleanup_stdio+0x38>)
 8005098:	4299      	cmp	r1, r3
 800509a:	d002      	beq.n	80050a2 <cleanup_stdio+0x1e>
 800509c:	4620      	mov	r0, r4
 800509e:	f001 fd7d 	bl	8006b9c <_fflush_r>
 80050a2:	68e1      	ldr	r1, [r4, #12]
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <cleanup_stdio+0x3c>)
 80050a6:	4299      	cmp	r1, r3
 80050a8:	d004      	beq.n	80050b4 <cleanup_stdio+0x30>
 80050aa:	4620      	mov	r0, r4
 80050ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b0:	f001 bd74 	b.w	8006b9c <_fflush_r>
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	bf00      	nop
 80050b8:	2000034c 	.word	0x2000034c
 80050bc:	200003b4 	.word	0x200003b4
 80050c0:	2000041c 	.word	0x2000041c

080050c4 <global_stdio_init.part.0>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <global_stdio_init.part.0+0x30>)
 80050c8:	4c0b      	ldr	r4, [pc, #44]	@ (80050f8 <global_stdio_init.part.0+0x34>)
 80050ca:	4a0c      	ldr	r2, [pc, #48]	@ (80050fc <global_stdio_init.part.0+0x38>)
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	4620      	mov	r0, r4
 80050d0:	2200      	movs	r2, #0
 80050d2:	2104      	movs	r1, #4
 80050d4:	f7ff ff94 	bl	8005000 <std>
 80050d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050dc:	2201      	movs	r2, #1
 80050de:	2109      	movs	r1, #9
 80050e0:	f7ff ff8e 	bl	8005000 <std>
 80050e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050e8:	2202      	movs	r2, #2
 80050ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ee:	2112      	movs	r1, #18
 80050f0:	f7ff bf86 	b.w	8005000 <std>
 80050f4:	20000484 	.word	0x20000484
 80050f8:	2000034c 	.word	0x2000034c
 80050fc:	0800506d 	.word	0x0800506d

08005100 <__sfp_lock_acquire>:
 8005100:	4801      	ldr	r0, [pc, #4]	@ (8005108 <__sfp_lock_acquire+0x8>)
 8005102:	f000 b9f2 	b.w	80054ea <__retarget_lock_acquire_recursive>
 8005106:	bf00      	nop
 8005108:	2000048d 	.word	0x2000048d

0800510c <__sfp_lock_release>:
 800510c:	4801      	ldr	r0, [pc, #4]	@ (8005114 <__sfp_lock_release+0x8>)
 800510e:	f000 b9ed 	b.w	80054ec <__retarget_lock_release_recursive>
 8005112:	bf00      	nop
 8005114:	2000048d 	.word	0x2000048d

08005118 <__sinit>:
 8005118:	b510      	push	{r4, lr}
 800511a:	4604      	mov	r4, r0
 800511c:	f7ff fff0 	bl	8005100 <__sfp_lock_acquire>
 8005120:	6a23      	ldr	r3, [r4, #32]
 8005122:	b11b      	cbz	r3, 800512c <__sinit+0x14>
 8005124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005128:	f7ff bff0 	b.w	800510c <__sfp_lock_release>
 800512c:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <__sinit+0x28>)
 800512e:	6223      	str	r3, [r4, #32]
 8005130:	4b04      	ldr	r3, [pc, #16]	@ (8005144 <__sinit+0x2c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f5      	bne.n	8005124 <__sinit+0xc>
 8005138:	f7ff ffc4 	bl	80050c4 <global_stdio_init.part.0>
 800513c:	e7f2      	b.n	8005124 <__sinit+0xc>
 800513e:	bf00      	nop
 8005140:	08005085 	.word	0x08005085
 8005144:	20000484 	.word	0x20000484

08005148 <_fwalk_sglue>:
 8005148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800514c:	4607      	mov	r7, r0
 800514e:	4688      	mov	r8, r1
 8005150:	4614      	mov	r4, r2
 8005152:	2600      	movs	r6, #0
 8005154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005158:	f1b9 0901 	subs.w	r9, r9, #1
 800515c:	d505      	bpl.n	800516a <_fwalk_sglue+0x22>
 800515e:	6824      	ldr	r4, [r4, #0]
 8005160:	2c00      	cmp	r4, #0
 8005162:	d1f7      	bne.n	8005154 <_fwalk_sglue+0xc>
 8005164:	4630      	mov	r0, r6
 8005166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800516a:	89ab      	ldrh	r3, [r5, #12]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d907      	bls.n	8005180 <_fwalk_sglue+0x38>
 8005170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005174:	3301      	adds	r3, #1
 8005176:	d003      	beq.n	8005180 <_fwalk_sglue+0x38>
 8005178:	4629      	mov	r1, r5
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	4306      	orrs	r6, r0
 8005180:	3568      	adds	r5, #104	@ 0x68
 8005182:	e7e9      	b.n	8005158 <_fwalk_sglue+0x10>

08005184 <_puts_r>:
 8005184:	6a03      	ldr	r3, [r0, #32]
 8005186:	b570      	push	{r4, r5, r6, lr}
 8005188:	6884      	ldr	r4, [r0, #8]
 800518a:	4605      	mov	r5, r0
 800518c:	460e      	mov	r6, r1
 800518e:	b90b      	cbnz	r3, 8005194 <_puts_r+0x10>
 8005190:	f7ff ffc2 	bl	8005118 <__sinit>
 8005194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005196:	07db      	lsls	r3, r3, #31
 8005198:	d405      	bmi.n	80051a6 <_puts_r+0x22>
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	0598      	lsls	r0, r3, #22
 800519e:	d402      	bmi.n	80051a6 <_puts_r+0x22>
 80051a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051a2:	f000 f9a2 	bl	80054ea <__retarget_lock_acquire_recursive>
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	0719      	lsls	r1, r3, #28
 80051aa:	d502      	bpl.n	80051b2 <_puts_r+0x2e>
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d135      	bne.n	800521e <_puts_r+0x9a>
 80051b2:	4621      	mov	r1, r4
 80051b4:	4628      	mov	r0, r5
 80051b6:	f000 f8c5 	bl	8005344 <__swsetup_r>
 80051ba:	b380      	cbz	r0, 800521e <_puts_r+0x9a>
 80051bc:	f04f 35ff 	mov.w	r5, #4294967295
 80051c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051c2:	07da      	lsls	r2, r3, #31
 80051c4:	d405      	bmi.n	80051d2 <_puts_r+0x4e>
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	059b      	lsls	r3, r3, #22
 80051ca:	d402      	bmi.n	80051d2 <_puts_r+0x4e>
 80051cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ce:	f000 f98d 	bl	80054ec <__retarget_lock_release_recursive>
 80051d2:	4628      	mov	r0, r5
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da04      	bge.n	80051e4 <_puts_r+0x60>
 80051da:	69a2      	ldr	r2, [r4, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	dc17      	bgt.n	8005210 <_puts_r+0x8c>
 80051e0:	290a      	cmp	r1, #10
 80051e2:	d015      	beq.n	8005210 <_puts_r+0x8c>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	6022      	str	r2, [r4, #0]
 80051ea:	7019      	strb	r1, [r3, #0]
 80051ec:	68a3      	ldr	r3, [r4, #8]
 80051ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051f2:	3b01      	subs	r3, #1
 80051f4:	60a3      	str	r3, [r4, #8]
 80051f6:	2900      	cmp	r1, #0
 80051f8:	d1ed      	bne.n	80051d6 <_puts_r+0x52>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da11      	bge.n	8005222 <_puts_r+0x9e>
 80051fe:	4622      	mov	r2, r4
 8005200:	210a      	movs	r1, #10
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f85f 	bl	80052c6 <__swbuf_r>
 8005208:	3001      	adds	r0, #1
 800520a:	d0d7      	beq.n	80051bc <_puts_r+0x38>
 800520c:	250a      	movs	r5, #10
 800520e:	e7d7      	b.n	80051c0 <_puts_r+0x3c>
 8005210:	4622      	mov	r2, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f857 	bl	80052c6 <__swbuf_r>
 8005218:	3001      	adds	r0, #1
 800521a:	d1e7      	bne.n	80051ec <_puts_r+0x68>
 800521c:	e7ce      	b.n	80051bc <_puts_r+0x38>
 800521e:	3e01      	subs	r6, #1
 8005220:	e7e4      	b.n	80051ec <_puts_r+0x68>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	6022      	str	r2, [r4, #0]
 8005228:	220a      	movs	r2, #10
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e7ee      	b.n	800520c <_puts_r+0x88>
	...

08005230 <puts>:
 8005230:	4b02      	ldr	r3, [pc, #8]	@ (800523c <puts+0xc>)
 8005232:	4601      	mov	r1, r0
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	f7ff bfa5 	b.w	8005184 <_puts_r>
 800523a:	bf00      	nop
 800523c:	20000020 	.word	0x20000020

08005240 <__sread>:
 8005240:	b510      	push	{r4, lr}
 8005242:	460c      	mov	r4, r1
 8005244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005248:	f000 f900 	bl	800544c <_read_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	bfab      	itete	ge
 8005250:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005252:	89a3      	ldrhlt	r3, [r4, #12]
 8005254:	181b      	addge	r3, r3, r0
 8005256:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800525a:	bfac      	ite	ge
 800525c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800525e:	81a3      	strhlt	r3, [r4, #12]
 8005260:	bd10      	pop	{r4, pc}

08005262 <__swrite>:
 8005262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005266:	461f      	mov	r7, r3
 8005268:	898b      	ldrh	r3, [r1, #12]
 800526a:	05db      	lsls	r3, r3, #23
 800526c:	4605      	mov	r5, r0
 800526e:	460c      	mov	r4, r1
 8005270:	4616      	mov	r6, r2
 8005272:	d505      	bpl.n	8005280 <__swrite+0x1e>
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	2302      	movs	r3, #2
 800527a:	2200      	movs	r2, #0
 800527c:	f000 f8d4 	bl	8005428 <_lseek_r>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	4632      	mov	r2, r6
 800528e:	463b      	mov	r3, r7
 8005290:	4628      	mov	r0, r5
 8005292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005296:	f000 b8eb 	b.w	8005470 <_write_r>

0800529a <__sseek>:
 800529a:	b510      	push	{r4, lr}
 800529c:	460c      	mov	r4, r1
 800529e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a2:	f000 f8c1 	bl	8005428 <_lseek_r>
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	bf15      	itete	ne
 80052ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052b6:	81a3      	strheq	r3, [r4, #12]
 80052b8:	bf18      	it	ne
 80052ba:	81a3      	strhne	r3, [r4, #12]
 80052bc:	bd10      	pop	{r4, pc}

080052be <__sclose>:
 80052be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c2:	f000 b8a1 	b.w	8005408 <_close_r>

080052c6 <__swbuf_r>:
 80052c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c8:	460e      	mov	r6, r1
 80052ca:	4614      	mov	r4, r2
 80052cc:	4605      	mov	r5, r0
 80052ce:	b118      	cbz	r0, 80052d8 <__swbuf_r+0x12>
 80052d0:	6a03      	ldr	r3, [r0, #32]
 80052d2:	b90b      	cbnz	r3, 80052d8 <__swbuf_r+0x12>
 80052d4:	f7ff ff20 	bl	8005118 <__sinit>
 80052d8:	69a3      	ldr	r3, [r4, #24]
 80052da:	60a3      	str	r3, [r4, #8]
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	071a      	lsls	r2, r3, #28
 80052e0:	d501      	bpl.n	80052e6 <__swbuf_r+0x20>
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	b943      	cbnz	r3, 80052f8 <__swbuf_r+0x32>
 80052e6:	4621      	mov	r1, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	f000 f82b 	bl	8005344 <__swsetup_r>
 80052ee:	b118      	cbz	r0, 80052f8 <__swbuf_r+0x32>
 80052f0:	f04f 37ff 	mov.w	r7, #4294967295
 80052f4:	4638      	mov	r0, r7
 80052f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	6922      	ldr	r2, [r4, #16]
 80052fc:	1a98      	subs	r0, r3, r2
 80052fe:	6963      	ldr	r3, [r4, #20]
 8005300:	b2f6      	uxtb	r6, r6
 8005302:	4283      	cmp	r3, r0
 8005304:	4637      	mov	r7, r6
 8005306:	dc05      	bgt.n	8005314 <__swbuf_r+0x4e>
 8005308:	4621      	mov	r1, r4
 800530a:	4628      	mov	r0, r5
 800530c:	f001 fc46 	bl	8006b9c <_fflush_r>
 8005310:	2800      	cmp	r0, #0
 8005312:	d1ed      	bne.n	80052f0 <__swbuf_r+0x2a>
 8005314:	68a3      	ldr	r3, [r4, #8]
 8005316:	3b01      	subs	r3, #1
 8005318:	60a3      	str	r3, [r4, #8]
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	6022      	str	r2, [r4, #0]
 8005320:	701e      	strb	r6, [r3, #0]
 8005322:	6962      	ldr	r2, [r4, #20]
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	429a      	cmp	r2, r3
 8005328:	d004      	beq.n	8005334 <__swbuf_r+0x6e>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	07db      	lsls	r3, r3, #31
 800532e:	d5e1      	bpl.n	80052f4 <__swbuf_r+0x2e>
 8005330:	2e0a      	cmp	r6, #10
 8005332:	d1df      	bne.n	80052f4 <__swbuf_r+0x2e>
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	f001 fc30 	bl	8006b9c <_fflush_r>
 800533c:	2800      	cmp	r0, #0
 800533e:	d0d9      	beq.n	80052f4 <__swbuf_r+0x2e>
 8005340:	e7d6      	b.n	80052f0 <__swbuf_r+0x2a>
	...

08005344 <__swsetup_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4b29      	ldr	r3, [pc, #164]	@ (80053ec <__swsetup_r+0xa8>)
 8005348:	4605      	mov	r5, r0
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	460c      	mov	r4, r1
 800534e:	b118      	cbz	r0, 8005358 <__swsetup_r+0x14>
 8005350:	6a03      	ldr	r3, [r0, #32]
 8005352:	b90b      	cbnz	r3, 8005358 <__swsetup_r+0x14>
 8005354:	f7ff fee0 	bl	8005118 <__sinit>
 8005358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535c:	0719      	lsls	r1, r3, #28
 800535e:	d422      	bmi.n	80053a6 <__swsetup_r+0x62>
 8005360:	06da      	lsls	r2, r3, #27
 8005362:	d407      	bmi.n	8005374 <__swsetup_r+0x30>
 8005364:	2209      	movs	r2, #9
 8005366:	602a      	str	r2, [r5, #0]
 8005368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	f04f 30ff 	mov.w	r0, #4294967295
 8005372:	e033      	b.n	80053dc <__swsetup_r+0x98>
 8005374:	0758      	lsls	r0, r3, #29
 8005376:	d512      	bpl.n	800539e <__swsetup_r+0x5a>
 8005378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800537a:	b141      	cbz	r1, 800538e <__swsetup_r+0x4a>
 800537c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005380:	4299      	cmp	r1, r3
 8005382:	d002      	beq.n	800538a <__swsetup_r+0x46>
 8005384:	4628      	mov	r0, r5
 8005386:	f000 ff0b 	bl	80061a0 <_free_r>
 800538a:	2300      	movs	r3, #0
 800538c:	6363      	str	r3, [r4, #52]	@ 0x34
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	2300      	movs	r3, #0
 8005398:	6063      	str	r3, [r4, #4]
 800539a:	6923      	ldr	r3, [r4, #16]
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	f043 0308 	orr.w	r3, r3, #8
 80053a4:	81a3      	strh	r3, [r4, #12]
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	b94b      	cbnz	r3, 80053be <__swsetup_r+0x7a>
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b4:	d003      	beq.n	80053be <__swsetup_r+0x7a>
 80053b6:	4621      	mov	r1, r4
 80053b8:	4628      	mov	r0, r5
 80053ba:	f001 fc3d 	bl	8006c38 <__smakebuf_r>
 80053be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c2:	f013 0201 	ands.w	r2, r3, #1
 80053c6:	d00a      	beq.n	80053de <__swsetup_r+0x9a>
 80053c8:	2200      	movs	r2, #0
 80053ca:	60a2      	str	r2, [r4, #8]
 80053cc:	6962      	ldr	r2, [r4, #20]
 80053ce:	4252      	negs	r2, r2
 80053d0:	61a2      	str	r2, [r4, #24]
 80053d2:	6922      	ldr	r2, [r4, #16]
 80053d4:	b942      	cbnz	r2, 80053e8 <__swsetup_r+0xa4>
 80053d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053da:	d1c5      	bne.n	8005368 <__swsetup_r+0x24>
 80053dc:	bd38      	pop	{r3, r4, r5, pc}
 80053de:	0799      	lsls	r1, r3, #30
 80053e0:	bf58      	it	pl
 80053e2:	6962      	ldrpl	r2, [r4, #20]
 80053e4:	60a2      	str	r2, [r4, #8]
 80053e6:	e7f4      	b.n	80053d2 <__swsetup_r+0x8e>
 80053e8:	2000      	movs	r0, #0
 80053ea:	e7f7      	b.n	80053dc <__swsetup_r+0x98>
 80053ec:	20000020 	.word	0x20000020

080053f0 <memset>:
 80053f0:	4402      	add	r2, r0
 80053f2:	4603      	mov	r3, r0
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d100      	bne.n	80053fa <memset+0xa>
 80053f8:	4770      	bx	lr
 80053fa:	f803 1b01 	strb.w	r1, [r3], #1
 80053fe:	e7f9      	b.n	80053f4 <memset+0x4>

08005400 <_localeconv_r>:
 8005400:	4800      	ldr	r0, [pc, #0]	@ (8005404 <_localeconv_r+0x4>)
 8005402:	4770      	bx	lr
 8005404:	20000160 	.word	0x20000160

08005408 <_close_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d06      	ldr	r5, [pc, #24]	@ (8005424 <_close_r+0x1c>)
 800540c:	2300      	movs	r3, #0
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fc f838 	bl	8001488 <_close>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_close_r+0x1a>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_close_r+0x1a>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20000488 	.word	0x20000488

08005428 <_lseek_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d07      	ldr	r5, [pc, #28]	@ (8005448 <_lseek_r+0x20>)
 800542c:	4604      	mov	r4, r0
 800542e:	4608      	mov	r0, r1
 8005430:	4611      	mov	r1, r2
 8005432:	2200      	movs	r2, #0
 8005434:	602a      	str	r2, [r5, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f7fc f84d 	bl	80014d6 <_lseek>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_lseek_r+0x1e>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_lseek_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	20000488 	.word	0x20000488

0800544c <_read_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d07      	ldr	r5, [pc, #28]	@ (800546c <_read_r+0x20>)
 8005450:	4604      	mov	r4, r0
 8005452:	4608      	mov	r0, r1
 8005454:	4611      	mov	r1, r2
 8005456:	2200      	movs	r2, #0
 8005458:	602a      	str	r2, [r5, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f7fb ffdb 	bl	8001416 <_read>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_read_r+0x1e>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_read_r+0x1e>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20000488 	.word	0x20000488

08005470 <_write_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d07      	ldr	r5, [pc, #28]	@ (8005490 <_write_r+0x20>)
 8005474:	4604      	mov	r4, r0
 8005476:	4608      	mov	r0, r1
 8005478:	4611      	mov	r1, r2
 800547a:	2200      	movs	r2, #0
 800547c:	602a      	str	r2, [r5, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f7fb ffe6 	bl	8001450 <_write>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_write_r+0x1e>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_write_r+0x1e>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20000488 	.word	0x20000488

08005494 <__errno>:
 8005494:	4b01      	ldr	r3, [pc, #4]	@ (800549c <__errno+0x8>)
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000020 	.word	0x20000020

080054a0 <__libc_init_array>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4d0d      	ldr	r5, [pc, #52]	@ (80054d8 <__libc_init_array+0x38>)
 80054a4:	4c0d      	ldr	r4, [pc, #52]	@ (80054dc <__libc_init_array+0x3c>)
 80054a6:	1b64      	subs	r4, r4, r5
 80054a8:	10a4      	asrs	r4, r4, #2
 80054aa:	2600      	movs	r6, #0
 80054ac:	42a6      	cmp	r6, r4
 80054ae:	d109      	bne.n	80054c4 <__libc_init_array+0x24>
 80054b0:	4d0b      	ldr	r5, [pc, #44]	@ (80054e0 <__libc_init_array+0x40>)
 80054b2:	4c0c      	ldr	r4, [pc, #48]	@ (80054e4 <__libc_init_array+0x44>)
 80054b4:	f001 fe2c 	bl	8007110 <_init>
 80054b8:	1b64      	subs	r4, r4, r5
 80054ba:	10a4      	asrs	r4, r4, #2
 80054bc:	2600      	movs	r6, #0
 80054be:	42a6      	cmp	r6, r4
 80054c0:	d105      	bne.n	80054ce <__libc_init_array+0x2e>
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c8:	4798      	blx	r3
 80054ca:	3601      	adds	r6, #1
 80054cc:	e7ee      	b.n	80054ac <__libc_init_array+0xc>
 80054ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d2:	4798      	blx	r3
 80054d4:	3601      	adds	r6, #1
 80054d6:	e7f2      	b.n	80054be <__libc_init_array+0x1e>
 80054d8:	0800755c 	.word	0x0800755c
 80054dc:	0800755c 	.word	0x0800755c
 80054e0:	0800755c 	.word	0x0800755c
 80054e4:	08007560 	.word	0x08007560

080054e8 <__retarget_lock_init_recursive>:
 80054e8:	4770      	bx	lr

080054ea <__retarget_lock_acquire_recursive>:
 80054ea:	4770      	bx	lr

080054ec <__retarget_lock_release_recursive>:
 80054ec:	4770      	bx	lr

080054ee <quorem>:
 80054ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f2:	6903      	ldr	r3, [r0, #16]
 80054f4:	690c      	ldr	r4, [r1, #16]
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	4607      	mov	r7, r0
 80054fa:	db7e      	blt.n	80055fa <quorem+0x10c>
 80054fc:	3c01      	subs	r4, #1
 80054fe:	f101 0814 	add.w	r8, r1, #20
 8005502:	00a3      	lsls	r3, r4, #2
 8005504:	f100 0514 	add.w	r5, r0, #20
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005518:	3301      	adds	r3, #1
 800551a:	429a      	cmp	r2, r3
 800551c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005520:	fbb2 f6f3 	udiv	r6, r2, r3
 8005524:	d32e      	bcc.n	8005584 <quorem+0x96>
 8005526:	f04f 0a00 	mov.w	sl, #0
 800552a:	46c4      	mov	ip, r8
 800552c:	46ae      	mov	lr, r5
 800552e:	46d3      	mov	fp, sl
 8005530:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005534:	b298      	uxth	r0, r3
 8005536:	fb06 a000 	mla	r0, r6, r0, sl
 800553a:	0c02      	lsrs	r2, r0, #16
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	fb06 2303 	mla	r3, r6, r3, r2
 8005542:	f8de 2000 	ldr.w	r2, [lr]
 8005546:	b280      	uxth	r0, r0
 8005548:	b292      	uxth	r2, r2
 800554a:	1a12      	subs	r2, r2, r0
 800554c:	445a      	add	r2, fp
 800554e:	f8de 0000 	ldr.w	r0, [lr]
 8005552:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005556:	b29b      	uxth	r3, r3
 8005558:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800555c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005560:	b292      	uxth	r2, r2
 8005562:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005566:	45e1      	cmp	r9, ip
 8005568:	f84e 2b04 	str.w	r2, [lr], #4
 800556c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005570:	d2de      	bcs.n	8005530 <quorem+0x42>
 8005572:	9b00      	ldr	r3, [sp, #0]
 8005574:	58eb      	ldr	r3, [r5, r3]
 8005576:	b92b      	cbnz	r3, 8005584 <quorem+0x96>
 8005578:	9b01      	ldr	r3, [sp, #4]
 800557a:	3b04      	subs	r3, #4
 800557c:	429d      	cmp	r5, r3
 800557e:	461a      	mov	r2, r3
 8005580:	d32f      	bcc.n	80055e2 <quorem+0xf4>
 8005582:	613c      	str	r4, [r7, #16]
 8005584:	4638      	mov	r0, r7
 8005586:	f001 f97d 	bl	8006884 <__mcmp>
 800558a:	2800      	cmp	r0, #0
 800558c:	db25      	blt.n	80055da <quorem+0xec>
 800558e:	4629      	mov	r1, r5
 8005590:	2000      	movs	r0, #0
 8005592:	f858 2b04 	ldr.w	r2, [r8], #4
 8005596:	f8d1 c000 	ldr.w	ip, [r1]
 800559a:	fa1f fe82 	uxth.w	lr, r2
 800559e:	fa1f f38c 	uxth.w	r3, ip
 80055a2:	eba3 030e 	sub.w	r3, r3, lr
 80055a6:	4403      	add	r3, r0
 80055a8:	0c12      	lsrs	r2, r2, #16
 80055aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b8:	45c1      	cmp	r9, r8
 80055ba:	f841 3b04 	str.w	r3, [r1], #4
 80055be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055c2:	d2e6      	bcs.n	8005592 <quorem+0xa4>
 80055c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055cc:	b922      	cbnz	r2, 80055d8 <quorem+0xea>
 80055ce:	3b04      	subs	r3, #4
 80055d0:	429d      	cmp	r5, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	d30b      	bcc.n	80055ee <quorem+0x100>
 80055d6:	613c      	str	r4, [r7, #16]
 80055d8:	3601      	adds	r6, #1
 80055da:	4630      	mov	r0, r6
 80055dc:	b003      	add	sp, #12
 80055de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	3b04      	subs	r3, #4
 80055e6:	2a00      	cmp	r2, #0
 80055e8:	d1cb      	bne.n	8005582 <quorem+0x94>
 80055ea:	3c01      	subs	r4, #1
 80055ec:	e7c6      	b.n	800557c <quorem+0x8e>
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	3b04      	subs	r3, #4
 80055f2:	2a00      	cmp	r2, #0
 80055f4:	d1ef      	bne.n	80055d6 <quorem+0xe8>
 80055f6:	3c01      	subs	r4, #1
 80055f8:	e7ea      	b.n	80055d0 <quorem+0xe2>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e7ee      	b.n	80055dc <quorem+0xee>
	...

08005600 <_dtoa_r>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	69c7      	ldr	r7, [r0, #28]
 8005606:	b097      	sub	sp, #92	@ 0x5c
 8005608:	ed8d 0b04 	vstr	d0, [sp, #16]
 800560c:	ec55 4b10 	vmov	r4, r5, d0
 8005610:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005612:	9107      	str	r1, [sp, #28]
 8005614:	4681      	mov	r9, r0
 8005616:	920c      	str	r2, [sp, #48]	@ 0x30
 8005618:	9311      	str	r3, [sp, #68]	@ 0x44
 800561a:	b97f      	cbnz	r7, 800563c <_dtoa_r+0x3c>
 800561c:	2010      	movs	r0, #16
 800561e:	f000 fe09 	bl	8006234 <malloc>
 8005622:	4602      	mov	r2, r0
 8005624:	f8c9 001c 	str.w	r0, [r9, #28]
 8005628:	b920      	cbnz	r0, 8005634 <_dtoa_r+0x34>
 800562a:	4ba9      	ldr	r3, [pc, #676]	@ (80058d0 <_dtoa_r+0x2d0>)
 800562c:	21ef      	movs	r1, #239	@ 0xef
 800562e:	48a9      	ldr	r0, [pc, #676]	@ (80058d4 <_dtoa_r+0x2d4>)
 8005630:	f001 fb7e 	bl	8006d30 <__assert_func>
 8005634:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005638:	6007      	str	r7, [r0, #0]
 800563a:	60c7      	str	r7, [r0, #12]
 800563c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005640:	6819      	ldr	r1, [r3, #0]
 8005642:	b159      	cbz	r1, 800565c <_dtoa_r+0x5c>
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	604a      	str	r2, [r1, #4]
 8005648:	2301      	movs	r3, #1
 800564a:	4093      	lsls	r3, r2
 800564c:	608b      	str	r3, [r1, #8]
 800564e:	4648      	mov	r0, r9
 8005650:	f000 fee6 	bl	8006420 <_Bfree>
 8005654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	1e2b      	subs	r3, r5, #0
 800565e:	bfb9      	ittee	lt
 8005660:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005664:	9305      	strlt	r3, [sp, #20]
 8005666:	2300      	movge	r3, #0
 8005668:	6033      	strge	r3, [r6, #0]
 800566a:	9f05      	ldr	r7, [sp, #20]
 800566c:	4b9a      	ldr	r3, [pc, #616]	@ (80058d8 <_dtoa_r+0x2d8>)
 800566e:	bfbc      	itt	lt
 8005670:	2201      	movlt	r2, #1
 8005672:	6032      	strlt	r2, [r6, #0]
 8005674:	43bb      	bics	r3, r7
 8005676:	d112      	bne.n	800569e <_dtoa_r+0x9e>
 8005678:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800567a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005684:	4323      	orrs	r3, r4
 8005686:	f000 855a 	beq.w	800613e <_dtoa_r+0xb3e>
 800568a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800568c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80058ec <_dtoa_r+0x2ec>
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 855c 	beq.w	800614e <_dtoa_r+0xb4e>
 8005696:	f10a 0303 	add.w	r3, sl, #3
 800569a:	f000 bd56 	b.w	800614a <_dtoa_r+0xb4a>
 800569e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80056a2:	2200      	movs	r2, #0
 80056a4:	ec51 0b17 	vmov	r0, r1, d7
 80056a8:	2300      	movs	r3, #0
 80056aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80056ae:	f7fb fa33 	bl	8000b18 <__aeabi_dcmpeq>
 80056b2:	4680      	mov	r8, r0
 80056b4:	b158      	cbz	r0, 80056ce <_dtoa_r+0xce>
 80056b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80056b8:	2301      	movs	r3, #1
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056be:	b113      	cbz	r3, 80056c6 <_dtoa_r+0xc6>
 80056c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80056c2:	4b86      	ldr	r3, [pc, #536]	@ (80058dc <_dtoa_r+0x2dc>)
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80058f0 <_dtoa_r+0x2f0>
 80056ca:	f000 bd40 	b.w	800614e <_dtoa_r+0xb4e>
 80056ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80056d2:	aa14      	add	r2, sp, #80	@ 0x50
 80056d4:	a915      	add	r1, sp, #84	@ 0x54
 80056d6:	4648      	mov	r0, r9
 80056d8:	f001 f984 	bl	80069e4 <__d2b>
 80056dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80056e0:	9002      	str	r0, [sp, #8]
 80056e2:	2e00      	cmp	r6, #0
 80056e4:	d078      	beq.n	80057d8 <_dtoa_r+0x1d8>
 80056e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80056ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80056f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80056fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005700:	4619      	mov	r1, r3
 8005702:	2200      	movs	r2, #0
 8005704:	4b76      	ldr	r3, [pc, #472]	@ (80058e0 <_dtoa_r+0x2e0>)
 8005706:	f7fa fde7 	bl	80002d8 <__aeabi_dsub>
 800570a:	a36b      	add	r3, pc, #428	@ (adr r3, 80058b8 <_dtoa_r+0x2b8>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa ff9a 	bl	8000648 <__aeabi_dmul>
 8005714:	a36a      	add	r3, pc, #424	@ (adr r3, 80058c0 <_dtoa_r+0x2c0>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f7fa fddf 	bl	80002dc <__adddf3>
 800571e:	4604      	mov	r4, r0
 8005720:	4630      	mov	r0, r6
 8005722:	460d      	mov	r5, r1
 8005724:	f7fa ff26 	bl	8000574 <__aeabi_i2d>
 8005728:	a367      	add	r3, pc, #412	@ (adr r3, 80058c8 <_dtoa_r+0x2c8>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa ff8b 	bl	8000648 <__aeabi_dmul>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fa fdcf 	bl	80002dc <__adddf3>
 800573e:	4604      	mov	r4, r0
 8005740:	460d      	mov	r5, r1
 8005742:	f7fb fa31 	bl	8000ba8 <__aeabi_d2iz>
 8005746:	2200      	movs	r2, #0
 8005748:	4607      	mov	r7, r0
 800574a:	2300      	movs	r3, #0
 800574c:	4620      	mov	r0, r4
 800574e:	4629      	mov	r1, r5
 8005750:	f7fb f9ec 	bl	8000b2c <__aeabi_dcmplt>
 8005754:	b140      	cbz	r0, 8005768 <_dtoa_r+0x168>
 8005756:	4638      	mov	r0, r7
 8005758:	f7fa ff0c 	bl	8000574 <__aeabi_i2d>
 800575c:	4622      	mov	r2, r4
 800575e:	462b      	mov	r3, r5
 8005760:	f7fb f9da 	bl	8000b18 <__aeabi_dcmpeq>
 8005764:	b900      	cbnz	r0, 8005768 <_dtoa_r+0x168>
 8005766:	3f01      	subs	r7, #1
 8005768:	2f16      	cmp	r7, #22
 800576a:	d852      	bhi.n	8005812 <_dtoa_r+0x212>
 800576c:	4b5d      	ldr	r3, [pc, #372]	@ (80058e4 <_dtoa_r+0x2e4>)
 800576e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800577a:	f7fb f9d7 	bl	8000b2c <__aeabi_dcmplt>
 800577e:	2800      	cmp	r0, #0
 8005780:	d049      	beq.n	8005816 <_dtoa_r+0x216>
 8005782:	3f01      	subs	r7, #1
 8005784:	2300      	movs	r3, #0
 8005786:	9310      	str	r3, [sp, #64]	@ 0x40
 8005788:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800578a:	1b9b      	subs	r3, r3, r6
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	bf45      	ittet	mi
 8005790:	f1c3 0301 	rsbmi	r3, r3, #1
 8005794:	9300      	strmi	r3, [sp, #0]
 8005796:	2300      	movpl	r3, #0
 8005798:	2300      	movmi	r3, #0
 800579a:	9206      	str	r2, [sp, #24]
 800579c:	bf54      	ite	pl
 800579e:	9300      	strpl	r3, [sp, #0]
 80057a0:	9306      	strmi	r3, [sp, #24]
 80057a2:	2f00      	cmp	r7, #0
 80057a4:	db39      	blt.n	800581a <_dtoa_r+0x21a>
 80057a6:	9b06      	ldr	r3, [sp, #24]
 80057a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80057aa:	443b      	add	r3, r7
 80057ac:	9306      	str	r3, [sp, #24]
 80057ae:	2300      	movs	r3, #0
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	9b07      	ldr	r3, [sp, #28]
 80057b4:	2b09      	cmp	r3, #9
 80057b6:	d863      	bhi.n	8005880 <_dtoa_r+0x280>
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	bfc4      	itt	gt
 80057bc:	3b04      	subgt	r3, #4
 80057be:	9307      	strgt	r3, [sp, #28]
 80057c0:	9b07      	ldr	r3, [sp, #28]
 80057c2:	f1a3 0302 	sub.w	r3, r3, #2
 80057c6:	bfcc      	ite	gt
 80057c8:	2400      	movgt	r4, #0
 80057ca:	2401      	movle	r4, #1
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d863      	bhi.n	8005898 <_dtoa_r+0x298>
 80057d0:	e8df f003 	tbb	[pc, r3]
 80057d4:	2b375452 	.word	0x2b375452
 80057d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057dc:	441e      	add	r6, r3
 80057de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	bfc1      	itttt	gt
 80057e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057ea:	409f      	lslgt	r7, r3
 80057ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057f4:	bfd6      	itet	le
 80057f6:	f1c3 0320 	rsble	r3, r3, #32
 80057fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80057fe:	fa04 f003 	lslle.w	r0, r4, r3
 8005802:	f7fa fea7 	bl	8000554 <__aeabi_ui2d>
 8005806:	2201      	movs	r2, #1
 8005808:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800580c:	3e01      	subs	r6, #1
 800580e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005810:	e776      	b.n	8005700 <_dtoa_r+0x100>
 8005812:	2301      	movs	r3, #1
 8005814:	e7b7      	b.n	8005786 <_dtoa_r+0x186>
 8005816:	9010      	str	r0, [sp, #64]	@ 0x40
 8005818:	e7b6      	b.n	8005788 <_dtoa_r+0x188>
 800581a:	9b00      	ldr	r3, [sp, #0]
 800581c:	1bdb      	subs	r3, r3, r7
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	427b      	negs	r3, r7
 8005822:	9308      	str	r3, [sp, #32]
 8005824:	2300      	movs	r3, #0
 8005826:	930d      	str	r3, [sp, #52]	@ 0x34
 8005828:	e7c3      	b.n	80057b2 <_dtoa_r+0x1b2>
 800582a:	2301      	movs	r3, #1
 800582c:	9309      	str	r3, [sp, #36]	@ 0x24
 800582e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005830:	eb07 0b03 	add.w	fp, r7, r3
 8005834:	f10b 0301 	add.w	r3, fp, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	9303      	str	r3, [sp, #12]
 800583c:	bfb8      	it	lt
 800583e:	2301      	movlt	r3, #1
 8005840:	e006      	b.n	8005850 <_dtoa_r+0x250>
 8005842:	2301      	movs	r3, #1
 8005844:	9309      	str	r3, [sp, #36]	@ 0x24
 8005846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005848:	2b00      	cmp	r3, #0
 800584a:	dd28      	ble.n	800589e <_dtoa_r+0x29e>
 800584c:	469b      	mov	fp, r3
 800584e:	9303      	str	r3, [sp, #12]
 8005850:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005854:	2100      	movs	r1, #0
 8005856:	2204      	movs	r2, #4
 8005858:	f102 0514 	add.w	r5, r2, #20
 800585c:	429d      	cmp	r5, r3
 800585e:	d926      	bls.n	80058ae <_dtoa_r+0x2ae>
 8005860:	6041      	str	r1, [r0, #4]
 8005862:	4648      	mov	r0, r9
 8005864:	f000 fd9c 	bl	80063a0 <_Balloc>
 8005868:	4682      	mov	sl, r0
 800586a:	2800      	cmp	r0, #0
 800586c:	d142      	bne.n	80058f4 <_dtoa_r+0x2f4>
 800586e:	4b1e      	ldr	r3, [pc, #120]	@ (80058e8 <_dtoa_r+0x2e8>)
 8005870:	4602      	mov	r2, r0
 8005872:	f240 11af 	movw	r1, #431	@ 0x1af
 8005876:	e6da      	b.n	800562e <_dtoa_r+0x2e>
 8005878:	2300      	movs	r3, #0
 800587a:	e7e3      	b.n	8005844 <_dtoa_r+0x244>
 800587c:	2300      	movs	r3, #0
 800587e:	e7d5      	b.n	800582c <_dtoa_r+0x22c>
 8005880:	2401      	movs	r4, #1
 8005882:	2300      	movs	r3, #0
 8005884:	9307      	str	r3, [sp, #28]
 8005886:	9409      	str	r4, [sp, #36]	@ 0x24
 8005888:	f04f 3bff 	mov.w	fp, #4294967295
 800588c:	2200      	movs	r2, #0
 800588e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005892:	2312      	movs	r3, #18
 8005894:	920c      	str	r2, [sp, #48]	@ 0x30
 8005896:	e7db      	b.n	8005850 <_dtoa_r+0x250>
 8005898:	2301      	movs	r3, #1
 800589a:	9309      	str	r3, [sp, #36]	@ 0x24
 800589c:	e7f4      	b.n	8005888 <_dtoa_r+0x288>
 800589e:	f04f 0b01 	mov.w	fp, #1
 80058a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80058a6:	465b      	mov	r3, fp
 80058a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80058ac:	e7d0      	b.n	8005850 <_dtoa_r+0x250>
 80058ae:	3101      	adds	r1, #1
 80058b0:	0052      	lsls	r2, r2, #1
 80058b2:	e7d1      	b.n	8005858 <_dtoa_r+0x258>
 80058b4:	f3af 8000 	nop.w
 80058b8:	636f4361 	.word	0x636f4361
 80058bc:	3fd287a7 	.word	0x3fd287a7
 80058c0:	8b60c8b3 	.word	0x8b60c8b3
 80058c4:	3fc68a28 	.word	0x3fc68a28
 80058c8:	509f79fb 	.word	0x509f79fb
 80058cc:	3fd34413 	.word	0x3fd34413
 80058d0:	08007221 	.word	0x08007221
 80058d4:	08007238 	.word	0x08007238
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	080071f1 	.word	0x080071f1
 80058e0:	3ff80000 	.word	0x3ff80000
 80058e4:	08007388 	.word	0x08007388
 80058e8:	08007290 	.word	0x08007290
 80058ec:	0800721d 	.word	0x0800721d
 80058f0:	080071f0 	.word	0x080071f0
 80058f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80058f8:	6018      	str	r0, [r3, #0]
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	2b0e      	cmp	r3, #14
 80058fe:	f200 80a1 	bhi.w	8005a44 <_dtoa_r+0x444>
 8005902:	2c00      	cmp	r4, #0
 8005904:	f000 809e 	beq.w	8005a44 <_dtoa_r+0x444>
 8005908:	2f00      	cmp	r7, #0
 800590a:	dd33      	ble.n	8005974 <_dtoa_r+0x374>
 800590c:	4b9c      	ldr	r3, [pc, #624]	@ (8005b80 <_dtoa_r+0x580>)
 800590e:	f007 020f 	and.w	r2, r7, #15
 8005912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005916:	ed93 7b00 	vldr	d7, [r3]
 800591a:	05f8      	lsls	r0, r7, #23
 800591c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005920:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005924:	d516      	bpl.n	8005954 <_dtoa_r+0x354>
 8005926:	4b97      	ldr	r3, [pc, #604]	@ (8005b84 <_dtoa_r+0x584>)
 8005928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800592c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005930:	f7fa ffb4 	bl	800089c <__aeabi_ddiv>
 8005934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005938:	f004 040f 	and.w	r4, r4, #15
 800593c:	2603      	movs	r6, #3
 800593e:	4d91      	ldr	r5, [pc, #580]	@ (8005b84 <_dtoa_r+0x584>)
 8005940:	b954      	cbnz	r4, 8005958 <_dtoa_r+0x358>
 8005942:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800594a:	f7fa ffa7 	bl	800089c <__aeabi_ddiv>
 800594e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005952:	e028      	b.n	80059a6 <_dtoa_r+0x3a6>
 8005954:	2602      	movs	r6, #2
 8005956:	e7f2      	b.n	800593e <_dtoa_r+0x33e>
 8005958:	07e1      	lsls	r1, r4, #31
 800595a:	d508      	bpl.n	800596e <_dtoa_r+0x36e>
 800595c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005964:	f7fa fe70 	bl	8000648 <__aeabi_dmul>
 8005968:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800596c:	3601      	adds	r6, #1
 800596e:	1064      	asrs	r4, r4, #1
 8005970:	3508      	adds	r5, #8
 8005972:	e7e5      	b.n	8005940 <_dtoa_r+0x340>
 8005974:	f000 80af 	beq.w	8005ad6 <_dtoa_r+0x4d6>
 8005978:	427c      	negs	r4, r7
 800597a:	4b81      	ldr	r3, [pc, #516]	@ (8005b80 <_dtoa_r+0x580>)
 800597c:	4d81      	ldr	r5, [pc, #516]	@ (8005b84 <_dtoa_r+0x584>)
 800597e:	f004 020f 	and.w	r2, r4, #15
 8005982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800598e:	f7fa fe5b 	bl	8000648 <__aeabi_dmul>
 8005992:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005996:	1124      	asrs	r4, r4, #4
 8005998:	2300      	movs	r3, #0
 800599a:	2602      	movs	r6, #2
 800599c:	2c00      	cmp	r4, #0
 800599e:	f040 808f 	bne.w	8005ac0 <_dtoa_r+0x4c0>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1d3      	bne.n	800594e <_dtoa_r+0x34e>
 80059a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80059a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8094 	beq.w	8005ada <_dtoa_r+0x4da>
 80059b2:	4b75      	ldr	r3, [pc, #468]	@ (8005b88 <_dtoa_r+0x588>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	4620      	mov	r0, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7fb f8b7 	bl	8000b2c <__aeabi_dcmplt>
 80059be:	2800      	cmp	r0, #0
 80059c0:	f000 808b 	beq.w	8005ada <_dtoa_r+0x4da>
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8087 	beq.w	8005ada <_dtoa_r+0x4da>
 80059cc:	f1bb 0f00 	cmp.w	fp, #0
 80059d0:	dd34      	ble.n	8005a3c <_dtoa_r+0x43c>
 80059d2:	4620      	mov	r0, r4
 80059d4:	4b6d      	ldr	r3, [pc, #436]	@ (8005b8c <_dtoa_r+0x58c>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	4629      	mov	r1, r5
 80059da:	f7fa fe35 	bl	8000648 <__aeabi_dmul>
 80059de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80059e6:	3601      	adds	r6, #1
 80059e8:	465c      	mov	r4, fp
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7fa fdc2 	bl	8000574 <__aeabi_i2d>
 80059f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f4:	f7fa fe28 	bl	8000648 <__aeabi_dmul>
 80059f8:	4b65      	ldr	r3, [pc, #404]	@ (8005b90 <_dtoa_r+0x590>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	f7fa fc6e 	bl	80002dc <__adddf3>
 8005a00:	4605      	mov	r5, r0
 8005a02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a06:	2c00      	cmp	r4, #0
 8005a08:	d16a      	bne.n	8005ae0 <_dtoa_r+0x4e0>
 8005a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a0e:	4b61      	ldr	r3, [pc, #388]	@ (8005b94 <_dtoa_r+0x594>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	f7fa fc61 	bl	80002d8 <__aeabi_dsub>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a1e:	462a      	mov	r2, r5
 8005a20:	4633      	mov	r3, r6
 8005a22:	f7fb f8a1 	bl	8000b68 <__aeabi_dcmpgt>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	f040 8298 	bne.w	8005f5c <_dtoa_r+0x95c>
 8005a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a30:	462a      	mov	r2, r5
 8005a32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a36:	f7fb f879 	bl	8000b2c <__aeabi_dcmplt>
 8005a3a:	bb38      	cbnz	r0, 8005a8c <_dtoa_r+0x48c>
 8005a3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005a40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f2c0 8157 	blt.w	8005cfa <_dtoa_r+0x6fa>
 8005a4c:	2f0e      	cmp	r7, #14
 8005a4e:	f300 8154 	bgt.w	8005cfa <_dtoa_r+0x6fa>
 8005a52:	4b4b      	ldr	r3, [pc, #300]	@ (8005b80 <_dtoa_r+0x580>)
 8005a54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a58:	ed93 7b00 	vldr	d7, [r3]
 8005a5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	ed8d 7b00 	vstr	d7, [sp]
 8005a64:	f280 80e5 	bge.w	8005c32 <_dtoa_r+0x632>
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f300 80e1 	bgt.w	8005c32 <_dtoa_r+0x632>
 8005a70:	d10c      	bne.n	8005a8c <_dtoa_r+0x48c>
 8005a72:	4b48      	ldr	r3, [pc, #288]	@ (8005b94 <_dtoa_r+0x594>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	ec51 0b17 	vmov	r0, r1, d7
 8005a7a:	f7fa fde5 	bl	8000648 <__aeabi_dmul>
 8005a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a82:	f7fb f867 	bl	8000b54 <__aeabi_dcmpge>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f000 8266 	beq.w	8005f58 <_dtoa_r+0x958>
 8005a8c:	2400      	movs	r4, #0
 8005a8e:	4625      	mov	r5, r4
 8005a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a92:	4656      	mov	r6, sl
 8005a94:	ea6f 0803 	mvn.w	r8, r3
 8005a98:	2700      	movs	r7, #0
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4648      	mov	r0, r9
 8005a9e:	f000 fcbf 	bl	8006420 <_Bfree>
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	f000 80bd 	beq.w	8005c22 <_dtoa_r+0x622>
 8005aa8:	b12f      	cbz	r7, 8005ab6 <_dtoa_r+0x4b6>
 8005aaa:	42af      	cmp	r7, r5
 8005aac:	d003      	beq.n	8005ab6 <_dtoa_r+0x4b6>
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f000 fcb5 	bl	8006420 <_Bfree>
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f000 fcb1 	bl	8006420 <_Bfree>
 8005abe:	e0b0      	b.n	8005c22 <_dtoa_r+0x622>
 8005ac0:	07e2      	lsls	r2, r4, #31
 8005ac2:	d505      	bpl.n	8005ad0 <_dtoa_r+0x4d0>
 8005ac4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ac8:	f7fa fdbe 	bl	8000648 <__aeabi_dmul>
 8005acc:	3601      	adds	r6, #1
 8005ace:	2301      	movs	r3, #1
 8005ad0:	1064      	asrs	r4, r4, #1
 8005ad2:	3508      	adds	r5, #8
 8005ad4:	e762      	b.n	800599c <_dtoa_r+0x39c>
 8005ad6:	2602      	movs	r6, #2
 8005ad8:	e765      	b.n	80059a6 <_dtoa_r+0x3a6>
 8005ada:	9c03      	ldr	r4, [sp, #12]
 8005adc:	46b8      	mov	r8, r7
 8005ade:	e784      	b.n	80059ea <_dtoa_r+0x3ea>
 8005ae0:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <_dtoa_r+0x580>)
 8005ae2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005aec:	4454      	add	r4, sl
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d054      	beq.n	8005b9c <_dtoa_r+0x59c>
 8005af2:	4929      	ldr	r1, [pc, #164]	@ (8005b98 <_dtoa_r+0x598>)
 8005af4:	2000      	movs	r0, #0
 8005af6:	f7fa fed1 	bl	800089c <__aeabi_ddiv>
 8005afa:	4633      	mov	r3, r6
 8005afc:	462a      	mov	r2, r5
 8005afe:	f7fa fbeb 	bl	80002d8 <__aeabi_dsub>
 8005b02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b06:	4656      	mov	r6, sl
 8005b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b0c:	f7fb f84c 	bl	8000ba8 <__aeabi_d2iz>
 8005b10:	4605      	mov	r5, r0
 8005b12:	f7fa fd2f 	bl	8000574 <__aeabi_i2d>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b1e:	f7fa fbdb 	bl	80002d8 <__aeabi_dsub>
 8005b22:	3530      	adds	r5, #48	@ 0x30
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b2c:	f806 5b01 	strb.w	r5, [r6], #1
 8005b30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b34:	f7fa fffa 	bl	8000b2c <__aeabi_dcmplt>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d172      	bne.n	8005c22 <_dtoa_r+0x622>
 8005b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b40:	4911      	ldr	r1, [pc, #68]	@ (8005b88 <_dtoa_r+0x588>)
 8005b42:	2000      	movs	r0, #0
 8005b44:	f7fa fbc8 	bl	80002d8 <__aeabi_dsub>
 8005b48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b4c:	f7fa ffee 	bl	8000b2c <__aeabi_dcmplt>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	f040 80b4 	bne.w	8005cbe <_dtoa_r+0x6be>
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	f43f af70 	beq.w	8005a3c <_dtoa_r+0x43c>
 8005b5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005b60:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <_dtoa_r+0x58c>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	f7fa fd70 	bl	8000648 <__aeabi_dmul>
 8005b68:	4b08      	ldr	r3, [pc, #32]	@ (8005b8c <_dtoa_r+0x58c>)
 8005b6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b6e:	2200      	movs	r2, #0
 8005b70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b74:	f7fa fd68 	bl	8000648 <__aeabi_dmul>
 8005b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b7c:	e7c4      	b.n	8005b08 <_dtoa_r+0x508>
 8005b7e:	bf00      	nop
 8005b80:	08007388 	.word	0x08007388
 8005b84:	08007360 	.word	0x08007360
 8005b88:	3ff00000 	.word	0x3ff00000
 8005b8c:	40240000 	.word	0x40240000
 8005b90:	401c0000 	.word	0x401c0000
 8005b94:	40140000 	.word	0x40140000
 8005b98:	3fe00000 	.word	0x3fe00000
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f7fa fd52 	bl	8000648 <__aeabi_dmul>
 8005ba4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005ba8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005baa:	4656      	mov	r6, sl
 8005bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bb0:	f7fa fffa 	bl	8000ba8 <__aeabi_d2iz>
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	f7fa fcdd 	bl	8000574 <__aeabi_i2d>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bc2:	f7fa fb89 	bl	80002d8 <__aeabi_dsub>
 8005bc6:	3530      	adds	r5, #48	@ 0x30
 8005bc8:	f806 5b01 	strb.w	r5, [r6], #1
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	42a6      	cmp	r6, r4
 8005bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	d124      	bne.n	8005c26 <_dtoa_r+0x626>
 8005bdc:	4baf      	ldr	r3, [pc, #700]	@ (8005e9c <_dtoa_r+0x89c>)
 8005bde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005be2:	f7fa fb7b 	bl	80002dc <__adddf3>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bee:	f7fa ffbb 	bl	8000b68 <__aeabi_dcmpgt>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d163      	bne.n	8005cbe <_dtoa_r+0x6be>
 8005bf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005bfa:	49a8      	ldr	r1, [pc, #672]	@ (8005e9c <_dtoa_r+0x89c>)
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f7fa fb6b 	bl	80002d8 <__aeabi_dsub>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c0a:	f7fa ff8f 	bl	8000b2c <__aeabi_dcmplt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f43f af14 	beq.w	8005a3c <_dtoa_r+0x43c>
 8005c14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c16:	1e73      	subs	r3, r6, #1
 8005c18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c1e:	2b30      	cmp	r3, #48	@ 0x30
 8005c20:	d0f8      	beq.n	8005c14 <_dtoa_r+0x614>
 8005c22:	4647      	mov	r7, r8
 8005c24:	e03b      	b.n	8005c9e <_dtoa_r+0x69e>
 8005c26:	4b9e      	ldr	r3, [pc, #632]	@ (8005ea0 <_dtoa_r+0x8a0>)
 8005c28:	f7fa fd0e 	bl	8000648 <__aeabi_dmul>
 8005c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c30:	e7bc      	b.n	8005bac <_dtoa_r+0x5ac>
 8005c32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005c36:	4656      	mov	r6, sl
 8005c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa fe2c 	bl	800089c <__aeabi_ddiv>
 8005c44:	f7fa ffb0 	bl	8000ba8 <__aeabi_d2iz>
 8005c48:	4680      	mov	r8, r0
 8005c4a:	f7fa fc93 	bl	8000574 <__aeabi_i2d>
 8005c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c52:	f7fa fcf9 	bl	8000648 <__aeabi_dmul>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c62:	f7fa fb39 	bl	80002d8 <__aeabi_dsub>
 8005c66:	f806 4b01 	strb.w	r4, [r6], #1
 8005c6a:	9d03      	ldr	r5, [sp, #12]
 8005c6c:	eba6 040a 	sub.w	r4, r6, sl
 8005c70:	42a5      	cmp	r5, r4
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	d133      	bne.n	8005ce0 <_dtoa_r+0x6e0>
 8005c78:	f7fa fb30 	bl	80002dc <__adddf3>
 8005c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c80:	4604      	mov	r4, r0
 8005c82:	460d      	mov	r5, r1
 8005c84:	f7fa ff70 	bl	8000b68 <__aeabi_dcmpgt>
 8005c88:	b9c0      	cbnz	r0, 8005cbc <_dtoa_r+0x6bc>
 8005c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa ff41 	bl	8000b18 <__aeabi_dcmpeq>
 8005c96:	b110      	cbz	r0, 8005c9e <_dtoa_r+0x69e>
 8005c98:	f018 0f01 	tst.w	r8, #1
 8005c9c:	d10e      	bne.n	8005cbc <_dtoa_r+0x6bc>
 8005c9e:	9902      	ldr	r1, [sp, #8]
 8005ca0:	4648      	mov	r0, r9
 8005ca2:	f000 fbbd 	bl	8006420 <_Bfree>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	7033      	strb	r3, [r6, #0]
 8005caa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005cac:	3701      	adds	r7, #1
 8005cae:	601f      	str	r7, [r3, #0]
 8005cb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 824b 	beq.w	800614e <_dtoa_r+0xb4e>
 8005cb8:	601e      	str	r6, [r3, #0]
 8005cba:	e248      	b.n	800614e <_dtoa_r+0xb4e>
 8005cbc:	46b8      	mov	r8, r7
 8005cbe:	4633      	mov	r3, r6
 8005cc0:	461e      	mov	r6, r3
 8005cc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc6:	2a39      	cmp	r2, #57	@ 0x39
 8005cc8:	d106      	bne.n	8005cd8 <_dtoa_r+0x6d8>
 8005cca:	459a      	cmp	sl, r3
 8005ccc:	d1f8      	bne.n	8005cc0 <_dtoa_r+0x6c0>
 8005cce:	2230      	movs	r2, #48	@ 0x30
 8005cd0:	f108 0801 	add.w	r8, r8, #1
 8005cd4:	f88a 2000 	strb.w	r2, [sl]
 8005cd8:	781a      	ldrb	r2, [r3, #0]
 8005cda:	3201      	adds	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e7a0      	b.n	8005c22 <_dtoa_r+0x622>
 8005ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8005ea0 <_dtoa_r+0x8a0>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f7fa fcb0 	bl	8000648 <__aeabi_dmul>
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2300      	movs	r3, #0
 8005cec:	4604      	mov	r4, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	f7fa ff12 	bl	8000b18 <__aeabi_dcmpeq>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d09f      	beq.n	8005c38 <_dtoa_r+0x638>
 8005cf8:	e7d1      	b.n	8005c9e <_dtoa_r+0x69e>
 8005cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	f000 80ea 	beq.w	8005ed6 <_dtoa_r+0x8d6>
 8005d02:	9a07      	ldr	r2, [sp, #28]
 8005d04:	2a01      	cmp	r2, #1
 8005d06:	f300 80cd 	bgt.w	8005ea4 <_dtoa_r+0x8a4>
 8005d0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d0c:	2a00      	cmp	r2, #0
 8005d0e:	f000 80c1 	beq.w	8005e94 <_dtoa_r+0x894>
 8005d12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d16:	9c08      	ldr	r4, [sp, #32]
 8005d18:	9e00      	ldr	r6, [sp, #0]
 8005d1a:	9a00      	ldr	r2, [sp, #0]
 8005d1c:	441a      	add	r2, r3
 8005d1e:	9200      	str	r2, [sp, #0]
 8005d20:	9a06      	ldr	r2, [sp, #24]
 8005d22:	2101      	movs	r1, #1
 8005d24:	441a      	add	r2, r3
 8005d26:	4648      	mov	r0, r9
 8005d28:	9206      	str	r2, [sp, #24]
 8005d2a:	f000 fc2d 	bl	8006588 <__i2b>
 8005d2e:	4605      	mov	r5, r0
 8005d30:	b166      	cbz	r6, 8005d4c <_dtoa_r+0x74c>
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dd09      	ble.n	8005d4c <_dtoa_r+0x74c>
 8005d38:	42b3      	cmp	r3, r6
 8005d3a:	9a00      	ldr	r2, [sp, #0]
 8005d3c:	bfa8      	it	ge
 8005d3e:	4633      	movge	r3, r6
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	9200      	str	r2, [sp, #0]
 8005d44:	9a06      	ldr	r2, [sp, #24]
 8005d46:	1af6      	subs	r6, r6, r3
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	9306      	str	r3, [sp, #24]
 8005d4c:	9b08      	ldr	r3, [sp, #32]
 8005d4e:	b30b      	cbz	r3, 8005d94 <_dtoa_r+0x794>
 8005d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80c6 	beq.w	8005ee4 <_dtoa_r+0x8e4>
 8005d58:	2c00      	cmp	r4, #0
 8005d5a:	f000 80c0 	beq.w	8005ede <_dtoa_r+0x8de>
 8005d5e:	4629      	mov	r1, r5
 8005d60:	4622      	mov	r2, r4
 8005d62:	4648      	mov	r0, r9
 8005d64:	f000 fcc8 	bl	80066f8 <__pow5mult>
 8005d68:	9a02      	ldr	r2, [sp, #8]
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	4648      	mov	r0, r9
 8005d70:	f000 fc20 	bl	80065b4 <__multiply>
 8005d74:	9902      	ldr	r1, [sp, #8]
 8005d76:	4680      	mov	r8, r0
 8005d78:	4648      	mov	r0, r9
 8005d7a:	f000 fb51 	bl	8006420 <_Bfree>
 8005d7e:	9b08      	ldr	r3, [sp, #32]
 8005d80:	1b1b      	subs	r3, r3, r4
 8005d82:	9308      	str	r3, [sp, #32]
 8005d84:	f000 80b1 	beq.w	8005eea <_dtoa_r+0x8ea>
 8005d88:	9a08      	ldr	r2, [sp, #32]
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	4648      	mov	r0, r9
 8005d8e:	f000 fcb3 	bl	80066f8 <__pow5mult>
 8005d92:	9002      	str	r0, [sp, #8]
 8005d94:	2101      	movs	r1, #1
 8005d96:	4648      	mov	r0, r9
 8005d98:	f000 fbf6 	bl	8006588 <__i2b>
 8005d9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d9e:	4604      	mov	r4, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 81d8 	beq.w	8006156 <_dtoa_r+0xb56>
 8005da6:	461a      	mov	r2, r3
 8005da8:	4601      	mov	r1, r0
 8005daa:	4648      	mov	r0, r9
 8005dac:	f000 fca4 	bl	80066f8 <__pow5mult>
 8005db0:	9b07      	ldr	r3, [sp, #28]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	4604      	mov	r4, r0
 8005db6:	f300 809f 	bgt.w	8005ef8 <_dtoa_r+0x8f8>
 8005dba:	9b04      	ldr	r3, [sp, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f040 8097 	bne.w	8005ef0 <_dtoa_r+0x8f0>
 8005dc2:	9b05      	ldr	r3, [sp, #20]
 8005dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 8093 	bne.w	8005ef4 <_dtoa_r+0x8f4>
 8005dce:	9b05      	ldr	r3, [sp, #20]
 8005dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dd4:	0d1b      	lsrs	r3, r3, #20
 8005dd6:	051b      	lsls	r3, r3, #20
 8005dd8:	b133      	cbz	r3, 8005de8 <_dtoa_r+0x7e8>
 8005dda:	9b00      	ldr	r3, [sp, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	9b06      	ldr	r3, [sp, #24]
 8005de2:	3301      	adds	r3, #1
 8005de4:	9306      	str	r3, [sp, #24]
 8005de6:	2301      	movs	r3, #1
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 81b8 	beq.w	8006162 <_dtoa_r+0xb62>
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005df8:	6918      	ldr	r0, [r3, #16]
 8005dfa:	f000 fb79 	bl	80064f0 <__hi0bits>
 8005dfe:	f1c0 0020 	rsb	r0, r0, #32
 8005e02:	9b06      	ldr	r3, [sp, #24]
 8005e04:	4418      	add	r0, r3
 8005e06:	f010 001f 	ands.w	r0, r0, #31
 8005e0a:	f000 8082 	beq.w	8005f12 <_dtoa_r+0x912>
 8005e0e:	f1c0 0320 	rsb	r3, r0, #32
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	dd73      	ble.n	8005efe <_dtoa_r+0x8fe>
 8005e16:	9b00      	ldr	r3, [sp, #0]
 8005e18:	f1c0 001c 	rsb	r0, r0, #28
 8005e1c:	4403      	add	r3, r0
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	9b06      	ldr	r3, [sp, #24]
 8005e22:	4403      	add	r3, r0
 8005e24:	4406      	add	r6, r0
 8005e26:	9306      	str	r3, [sp, #24]
 8005e28:	9b00      	ldr	r3, [sp, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dd05      	ble.n	8005e3a <_dtoa_r+0x83a>
 8005e2e:	9902      	ldr	r1, [sp, #8]
 8005e30:	461a      	mov	r2, r3
 8005e32:	4648      	mov	r0, r9
 8005e34:	f000 fcba 	bl	80067ac <__lshift>
 8005e38:	9002      	str	r0, [sp, #8]
 8005e3a:	9b06      	ldr	r3, [sp, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dd05      	ble.n	8005e4c <_dtoa_r+0x84c>
 8005e40:	4621      	mov	r1, r4
 8005e42:	461a      	mov	r2, r3
 8005e44:	4648      	mov	r0, r9
 8005e46:	f000 fcb1 	bl	80067ac <__lshift>
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d061      	beq.n	8005f16 <_dtoa_r+0x916>
 8005e52:	9802      	ldr	r0, [sp, #8]
 8005e54:	4621      	mov	r1, r4
 8005e56:	f000 fd15 	bl	8006884 <__mcmp>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	da5b      	bge.n	8005f16 <_dtoa_r+0x916>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9902      	ldr	r1, [sp, #8]
 8005e62:	220a      	movs	r2, #10
 8005e64:	4648      	mov	r0, r9
 8005e66:	f000 fafd 	bl	8006464 <__multadd>
 8005e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6c:	9002      	str	r0, [sp, #8]
 8005e6e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 8177 	beq.w	8006166 <_dtoa_r+0xb66>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	220a      	movs	r2, #10
 8005e7e:	4648      	mov	r0, r9
 8005e80:	f000 faf0 	bl	8006464 <__multadd>
 8005e84:	f1bb 0f00 	cmp.w	fp, #0
 8005e88:	4605      	mov	r5, r0
 8005e8a:	dc6f      	bgt.n	8005f6c <_dtoa_r+0x96c>
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	dc49      	bgt.n	8005f26 <_dtoa_r+0x926>
 8005e92:	e06b      	b.n	8005f6c <_dtoa_r+0x96c>
 8005e94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e9a:	e73c      	b.n	8005d16 <_dtoa_r+0x716>
 8005e9c:	3fe00000 	.word	0x3fe00000
 8005ea0:	40240000 	.word	0x40240000
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	1e5c      	subs	r4, r3, #1
 8005ea8:	9b08      	ldr	r3, [sp, #32]
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	db09      	blt.n	8005ec2 <_dtoa_r+0x8c2>
 8005eae:	1b1c      	subs	r4, r3, r4
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f6bf af30 	bge.w	8005d18 <_dtoa_r+0x718>
 8005eb8:	9b00      	ldr	r3, [sp, #0]
 8005eba:	9a03      	ldr	r2, [sp, #12]
 8005ebc:	1a9e      	subs	r6, r3, r2
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e72b      	b.n	8005d1a <_dtoa_r+0x71a>
 8005ec2:	9b08      	ldr	r3, [sp, #32]
 8005ec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005ec6:	9408      	str	r4, [sp, #32]
 8005ec8:	1ae3      	subs	r3, r4, r3
 8005eca:	441a      	add	r2, r3
 8005ecc:	9e00      	ldr	r6, [sp, #0]
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005ed2:	2400      	movs	r4, #0
 8005ed4:	e721      	b.n	8005d1a <_dtoa_r+0x71a>
 8005ed6:	9c08      	ldr	r4, [sp, #32]
 8005ed8:	9e00      	ldr	r6, [sp, #0]
 8005eda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005edc:	e728      	b.n	8005d30 <_dtoa_r+0x730>
 8005ede:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005ee2:	e751      	b.n	8005d88 <_dtoa_r+0x788>
 8005ee4:	9a08      	ldr	r2, [sp, #32]
 8005ee6:	9902      	ldr	r1, [sp, #8]
 8005ee8:	e750      	b.n	8005d8c <_dtoa_r+0x78c>
 8005eea:	f8cd 8008 	str.w	r8, [sp, #8]
 8005eee:	e751      	b.n	8005d94 <_dtoa_r+0x794>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e779      	b.n	8005de8 <_dtoa_r+0x7e8>
 8005ef4:	9b04      	ldr	r3, [sp, #16]
 8005ef6:	e777      	b.n	8005de8 <_dtoa_r+0x7e8>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9308      	str	r3, [sp, #32]
 8005efc:	e779      	b.n	8005df2 <_dtoa_r+0x7f2>
 8005efe:	d093      	beq.n	8005e28 <_dtoa_r+0x828>
 8005f00:	9a00      	ldr	r2, [sp, #0]
 8005f02:	331c      	adds	r3, #28
 8005f04:	441a      	add	r2, r3
 8005f06:	9200      	str	r2, [sp, #0]
 8005f08:	9a06      	ldr	r2, [sp, #24]
 8005f0a:	441a      	add	r2, r3
 8005f0c:	441e      	add	r6, r3
 8005f0e:	9206      	str	r2, [sp, #24]
 8005f10:	e78a      	b.n	8005e28 <_dtoa_r+0x828>
 8005f12:	4603      	mov	r3, r0
 8005f14:	e7f4      	b.n	8005f00 <_dtoa_r+0x900>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	46b8      	mov	r8, r7
 8005f1c:	dc20      	bgt.n	8005f60 <_dtoa_r+0x960>
 8005f1e:	469b      	mov	fp, r3
 8005f20:	9b07      	ldr	r3, [sp, #28]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	dd1e      	ble.n	8005f64 <_dtoa_r+0x964>
 8005f26:	f1bb 0f00 	cmp.w	fp, #0
 8005f2a:	f47f adb1 	bne.w	8005a90 <_dtoa_r+0x490>
 8005f2e:	4621      	mov	r1, r4
 8005f30:	465b      	mov	r3, fp
 8005f32:	2205      	movs	r2, #5
 8005f34:	4648      	mov	r0, r9
 8005f36:	f000 fa95 	bl	8006464 <__multadd>
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	9802      	ldr	r0, [sp, #8]
 8005f40:	f000 fca0 	bl	8006884 <__mcmp>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	f77f ada3 	ble.w	8005a90 <_dtoa_r+0x490>
 8005f4a:	4656      	mov	r6, sl
 8005f4c:	2331      	movs	r3, #49	@ 0x31
 8005f4e:	f806 3b01 	strb.w	r3, [r6], #1
 8005f52:	f108 0801 	add.w	r8, r8, #1
 8005f56:	e59f      	b.n	8005a98 <_dtoa_r+0x498>
 8005f58:	9c03      	ldr	r4, [sp, #12]
 8005f5a:	46b8      	mov	r8, r7
 8005f5c:	4625      	mov	r5, r4
 8005f5e:	e7f4      	b.n	8005f4a <_dtoa_r+0x94a>
 8005f60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 8101 	beq.w	800616e <_dtoa_r+0xb6e>
 8005f6c:	2e00      	cmp	r6, #0
 8005f6e:	dd05      	ble.n	8005f7c <_dtoa_r+0x97c>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4632      	mov	r2, r6
 8005f74:	4648      	mov	r0, r9
 8005f76:	f000 fc19 	bl	80067ac <__lshift>
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	9b08      	ldr	r3, [sp, #32]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d05c      	beq.n	800603c <_dtoa_r+0xa3c>
 8005f82:	6869      	ldr	r1, [r5, #4]
 8005f84:	4648      	mov	r0, r9
 8005f86:	f000 fa0b 	bl	80063a0 <_Balloc>
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	b928      	cbnz	r0, 8005f9a <_dtoa_r+0x99a>
 8005f8e:	4b82      	ldr	r3, [pc, #520]	@ (8006198 <_dtoa_r+0xb98>)
 8005f90:	4602      	mov	r2, r0
 8005f92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f96:	f7ff bb4a 	b.w	800562e <_dtoa_r+0x2e>
 8005f9a:	692a      	ldr	r2, [r5, #16]
 8005f9c:	3202      	adds	r2, #2
 8005f9e:	0092      	lsls	r2, r2, #2
 8005fa0:	f105 010c 	add.w	r1, r5, #12
 8005fa4:	300c      	adds	r0, #12
 8005fa6:	f000 feb5 	bl	8006d14 <memcpy>
 8005faa:	2201      	movs	r2, #1
 8005fac:	4631      	mov	r1, r6
 8005fae:	4648      	mov	r0, r9
 8005fb0:	f000 fbfc 	bl	80067ac <__lshift>
 8005fb4:	f10a 0301 	add.w	r3, sl, #1
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	eb0a 030b 	add.w	r3, sl, fp
 8005fbe:	9308      	str	r3, [sp, #32]
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	462f      	mov	r7, r5
 8005fc8:	9306      	str	r3, [sp, #24]
 8005fca:	4605      	mov	r5, r0
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	9802      	ldr	r0, [sp, #8]
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fd6:	f7ff fa8a 	bl	80054ee <quorem>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	3330      	adds	r3, #48	@ 0x30
 8005fde:	9003      	str	r0, [sp, #12]
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	9802      	ldr	r0, [sp, #8]
 8005fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe6:	f000 fc4d 	bl	8006884 <__mcmp>
 8005fea:	462a      	mov	r2, r5
 8005fec:	9004      	str	r0, [sp, #16]
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4648      	mov	r0, r9
 8005ff2:	f000 fc63 	bl	80068bc <__mdiff>
 8005ff6:	68c2      	ldr	r2, [r0, #12]
 8005ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	bb02      	cbnz	r2, 8006040 <_dtoa_r+0xa40>
 8005ffe:	4601      	mov	r1, r0
 8006000:	9802      	ldr	r0, [sp, #8]
 8006002:	f000 fc3f 	bl	8006884 <__mcmp>
 8006006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006008:	4602      	mov	r2, r0
 800600a:	4631      	mov	r1, r6
 800600c:	4648      	mov	r0, r9
 800600e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006010:	9309      	str	r3, [sp, #36]	@ 0x24
 8006012:	f000 fa05 	bl	8006420 <_Bfree>
 8006016:	9b07      	ldr	r3, [sp, #28]
 8006018:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800601a:	9e00      	ldr	r6, [sp, #0]
 800601c:	ea42 0103 	orr.w	r1, r2, r3
 8006020:	9b06      	ldr	r3, [sp, #24]
 8006022:	4319      	orrs	r1, r3
 8006024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006026:	d10d      	bne.n	8006044 <_dtoa_r+0xa44>
 8006028:	2b39      	cmp	r3, #57	@ 0x39
 800602a:	d027      	beq.n	800607c <_dtoa_r+0xa7c>
 800602c:	9a04      	ldr	r2, [sp, #16]
 800602e:	2a00      	cmp	r2, #0
 8006030:	dd01      	ble.n	8006036 <_dtoa_r+0xa36>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	3331      	adds	r3, #49	@ 0x31
 8006036:	f88b 3000 	strb.w	r3, [fp]
 800603a:	e52e      	b.n	8005a9a <_dtoa_r+0x49a>
 800603c:	4628      	mov	r0, r5
 800603e:	e7b9      	b.n	8005fb4 <_dtoa_r+0x9b4>
 8006040:	2201      	movs	r2, #1
 8006042:	e7e2      	b.n	800600a <_dtoa_r+0xa0a>
 8006044:	9904      	ldr	r1, [sp, #16]
 8006046:	2900      	cmp	r1, #0
 8006048:	db04      	blt.n	8006054 <_dtoa_r+0xa54>
 800604a:	9807      	ldr	r0, [sp, #28]
 800604c:	4301      	orrs	r1, r0
 800604e:	9806      	ldr	r0, [sp, #24]
 8006050:	4301      	orrs	r1, r0
 8006052:	d120      	bne.n	8006096 <_dtoa_r+0xa96>
 8006054:	2a00      	cmp	r2, #0
 8006056:	ddee      	ble.n	8006036 <_dtoa_r+0xa36>
 8006058:	9902      	ldr	r1, [sp, #8]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2201      	movs	r2, #1
 800605e:	4648      	mov	r0, r9
 8006060:	f000 fba4 	bl	80067ac <__lshift>
 8006064:	4621      	mov	r1, r4
 8006066:	9002      	str	r0, [sp, #8]
 8006068:	f000 fc0c 	bl	8006884 <__mcmp>
 800606c:	2800      	cmp	r0, #0
 800606e:	9b00      	ldr	r3, [sp, #0]
 8006070:	dc02      	bgt.n	8006078 <_dtoa_r+0xa78>
 8006072:	d1e0      	bne.n	8006036 <_dtoa_r+0xa36>
 8006074:	07da      	lsls	r2, r3, #31
 8006076:	d5de      	bpl.n	8006036 <_dtoa_r+0xa36>
 8006078:	2b39      	cmp	r3, #57	@ 0x39
 800607a:	d1da      	bne.n	8006032 <_dtoa_r+0xa32>
 800607c:	2339      	movs	r3, #57	@ 0x39
 800607e:	f88b 3000 	strb.w	r3, [fp]
 8006082:	4633      	mov	r3, r6
 8006084:	461e      	mov	r6, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800608c:	2a39      	cmp	r2, #57	@ 0x39
 800608e:	d04e      	beq.n	800612e <_dtoa_r+0xb2e>
 8006090:	3201      	adds	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e501      	b.n	8005a9a <_dtoa_r+0x49a>
 8006096:	2a00      	cmp	r2, #0
 8006098:	dd03      	ble.n	80060a2 <_dtoa_r+0xaa2>
 800609a:	2b39      	cmp	r3, #57	@ 0x39
 800609c:	d0ee      	beq.n	800607c <_dtoa_r+0xa7c>
 800609e:	3301      	adds	r3, #1
 80060a0:	e7c9      	b.n	8006036 <_dtoa_r+0xa36>
 80060a2:	9a00      	ldr	r2, [sp, #0]
 80060a4:	9908      	ldr	r1, [sp, #32]
 80060a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060aa:	428a      	cmp	r2, r1
 80060ac:	d028      	beq.n	8006100 <_dtoa_r+0xb00>
 80060ae:	9902      	ldr	r1, [sp, #8]
 80060b0:	2300      	movs	r3, #0
 80060b2:	220a      	movs	r2, #10
 80060b4:	4648      	mov	r0, r9
 80060b6:	f000 f9d5 	bl	8006464 <__multadd>
 80060ba:	42af      	cmp	r7, r5
 80060bc:	9002      	str	r0, [sp, #8]
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	f04f 020a 	mov.w	r2, #10
 80060c6:	4639      	mov	r1, r7
 80060c8:	4648      	mov	r0, r9
 80060ca:	d107      	bne.n	80060dc <_dtoa_r+0xadc>
 80060cc:	f000 f9ca 	bl	8006464 <__multadd>
 80060d0:	4607      	mov	r7, r0
 80060d2:	4605      	mov	r5, r0
 80060d4:	9b00      	ldr	r3, [sp, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	e777      	b.n	8005fcc <_dtoa_r+0x9cc>
 80060dc:	f000 f9c2 	bl	8006464 <__multadd>
 80060e0:	4629      	mov	r1, r5
 80060e2:	4607      	mov	r7, r0
 80060e4:	2300      	movs	r3, #0
 80060e6:	220a      	movs	r2, #10
 80060e8:	4648      	mov	r0, r9
 80060ea:	f000 f9bb 	bl	8006464 <__multadd>
 80060ee:	4605      	mov	r5, r0
 80060f0:	e7f0      	b.n	80060d4 <_dtoa_r+0xad4>
 80060f2:	f1bb 0f00 	cmp.w	fp, #0
 80060f6:	bfcc      	ite	gt
 80060f8:	465e      	movgt	r6, fp
 80060fa:	2601      	movle	r6, #1
 80060fc:	4456      	add	r6, sl
 80060fe:	2700      	movs	r7, #0
 8006100:	9902      	ldr	r1, [sp, #8]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	2201      	movs	r2, #1
 8006106:	4648      	mov	r0, r9
 8006108:	f000 fb50 	bl	80067ac <__lshift>
 800610c:	4621      	mov	r1, r4
 800610e:	9002      	str	r0, [sp, #8]
 8006110:	f000 fbb8 	bl	8006884 <__mcmp>
 8006114:	2800      	cmp	r0, #0
 8006116:	dcb4      	bgt.n	8006082 <_dtoa_r+0xa82>
 8006118:	d102      	bne.n	8006120 <_dtoa_r+0xb20>
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	07db      	lsls	r3, r3, #31
 800611e:	d4b0      	bmi.n	8006082 <_dtoa_r+0xa82>
 8006120:	4633      	mov	r3, r6
 8006122:	461e      	mov	r6, r3
 8006124:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006128:	2a30      	cmp	r2, #48	@ 0x30
 800612a:	d0fa      	beq.n	8006122 <_dtoa_r+0xb22>
 800612c:	e4b5      	b.n	8005a9a <_dtoa_r+0x49a>
 800612e:	459a      	cmp	sl, r3
 8006130:	d1a8      	bne.n	8006084 <_dtoa_r+0xa84>
 8006132:	2331      	movs	r3, #49	@ 0x31
 8006134:	f108 0801 	add.w	r8, r8, #1
 8006138:	f88a 3000 	strb.w	r3, [sl]
 800613c:	e4ad      	b.n	8005a9a <_dtoa_r+0x49a>
 800613e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006140:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800619c <_dtoa_r+0xb9c>
 8006144:	b11b      	cbz	r3, 800614e <_dtoa_r+0xb4e>
 8006146:	f10a 0308 	add.w	r3, sl, #8
 800614a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4650      	mov	r0, sl
 8006150:	b017      	add	sp, #92	@ 0x5c
 8006152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	2b01      	cmp	r3, #1
 800615a:	f77f ae2e 	ble.w	8005dba <_dtoa_r+0x7ba>
 800615e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006160:	9308      	str	r3, [sp, #32]
 8006162:	2001      	movs	r0, #1
 8006164:	e64d      	b.n	8005e02 <_dtoa_r+0x802>
 8006166:	f1bb 0f00 	cmp.w	fp, #0
 800616a:	f77f aed9 	ble.w	8005f20 <_dtoa_r+0x920>
 800616e:	4656      	mov	r6, sl
 8006170:	9802      	ldr	r0, [sp, #8]
 8006172:	4621      	mov	r1, r4
 8006174:	f7ff f9bb 	bl	80054ee <quorem>
 8006178:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800617c:	f806 3b01 	strb.w	r3, [r6], #1
 8006180:	eba6 020a 	sub.w	r2, r6, sl
 8006184:	4593      	cmp	fp, r2
 8006186:	ddb4      	ble.n	80060f2 <_dtoa_r+0xaf2>
 8006188:	9902      	ldr	r1, [sp, #8]
 800618a:	2300      	movs	r3, #0
 800618c:	220a      	movs	r2, #10
 800618e:	4648      	mov	r0, r9
 8006190:	f000 f968 	bl	8006464 <__multadd>
 8006194:	9002      	str	r0, [sp, #8]
 8006196:	e7eb      	b.n	8006170 <_dtoa_r+0xb70>
 8006198:	08007290 	.word	0x08007290
 800619c:	08007214 	.word	0x08007214

080061a0 <_free_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4605      	mov	r5, r0
 80061a4:	2900      	cmp	r1, #0
 80061a6:	d041      	beq.n	800622c <_free_r+0x8c>
 80061a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ac:	1f0c      	subs	r4, r1, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bfb8      	it	lt
 80061b2:	18e4      	addlt	r4, r4, r3
 80061b4:	f000 f8e8 	bl	8006388 <__malloc_lock>
 80061b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006230 <_free_r+0x90>)
 80061ba:	6813      	ldr	r3, [r2, #0]
 80061bc:	b933      	cbnz	r3, 80061cc <_free_r+0x2c>
 80061be:	6063      	str	r3, [r4, #4]
 80061c0:	6014      	str	r4, [r2, #0]
 80061c2:	4628      	mov	r0, r5
 80061c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061c8:	f000 b8e4 	b.w	8006394 <__malloc_unlock>
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d908      	bls.n	80061e2 <_free_r+0x42>
 80061d0:	6820      	ldr	r0, [r4, #0]
 80061d2:	1821      	adds	r1, r4, r0
 80061d4:	428b      	cmp	r3, r1
 80061d6:	bf01      	itttt	eq
 80061d8:	6819      	ldreq	r1, [r3, #0]
 80061da:	685b      	ldreq	r3, [r3, #4]
 80061dc:	1809      	addeq	r1, r1, r0
 80061de:	6021      	streq	r1, [r4, #0]
 80061e0:	e7ed      	b.n	80061be <_free_r+0x1e>
 80061e2:	461a      	mov	r2, r3
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	b10b      	cbz	r3, 80061ec <_free_r+0x4c>
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	d9fa      	bls.n	80061e2 <_free_r+0x42>
 80061ec:	6811      	ldr	r1, [r2, #0]
 80061ee:	1850      	adds	r0, r2, r1
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	d10b      	bne.n	800620c <_free_r+0x6c>
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	4401      	add	r1, r0
 80061f8:	1850      	adds	r0, r2, r1
 80061fa:	4283      	cmp	r3, r0
 80061fc:	6011      	str	r1, [r2, #0]
 80061fe:	d1e0      	bne.n	80061c2 <_free_r+0x22>
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	6053      	str	r3, [r2, #4]
 8006206:	4408      	add	r0, r1
 8006208:	6010      	str	r0, [r2, #0]
 800620a:	e7da      	b.n	80061c2 <_free_r+0x22>
 800620c:	d902      	bls.n	8006214 <_free_r+0x74>
 800620e:	230c      	movs	r3, #12
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	e7d6      	b.n	80061c2 <_free_r+0x22>
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	1821      	adds	r1, r4, r0
 8006218:	428b      	cmp	r3, r1
 800621a:	bf04      	itt	eq
 800621c:	6819      	ldreq	r1, [r3, #0]
 800621e:	685b      	ldreq	r3, [r3, #4]
 8006220:	6063      	str	r3, [r4, #4]
 8006222:	bf04      	itt	eq
 8006224:	1809      	addeq	r1, r1, r0
 8006226:	6021      	streq	r1, [r4, #0]
 8006228:	6054      	str	r4, [r2, #4]
 800622a:	e7ca      	b.n	80061c2 <_free_r+0x22>
 800622c:	bd38      	pop	{r3, r4, r5, pc}
 800622e:	bf00      	nop
 8006230:	20000494 	.word	0x20000494

08006234 <malloc>:
 8006234:	4b02      	ldr	r3, [pc, #8]	@ (8006240 <malloc+0xc>)
 8006236:	4601      	mov	r1, r0
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	f000 b825 	b.w	8006288 <_malloc_r>
 800623e:	bf00      	nop
 8006240:	20000020 	.word	0x20000020

08006244 <sbrk_aligned>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4e0f      	ldr	r6, [pc, #60]	@ (8006284 <sbrk_aligned+0x40>)
 8006248:	460c      	mov	r4, r1
 800624a:	6831      	ldr	r1, [r6, #0]
 800624c:	4605      	mov	r5, r0
 800624e:	b911      	cbnz	r1, 8006256 <sbrk_aligned+0x12>
 8006250:	f000 fd50 	bl	8006cf4 <_sbrk_r>
 8006254:	6030      	str	r0, [r6, #0]
 8006256:	4621      	mov	r1, r4
 8006258:	4628      	mov	r0, r5
 800625a:	f000 fd4b 	bl	8006cf4 <_sbrk_r>
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	d103      	bne.n	800626a <sbrk_aligned+0x26>
 8006262:	f04f 34ff 	mov.w	r4, #4294967295
 8006266:	4620      	mov	r0, r4
 8006268:	bd70      	pop	{r4, r5, r6, pc}
 800626a:	1cc4      	adds	r4, r0, #3
 800626c:	f024 0403 	bic.w	r4, r4, #3
 8006270:	42a0      	cmp	r0, r4
 8006272:	d0f8      	beq.n	8006266 <sbrk_aligned+0x22>
 8006274:	1a21      	subs	r1, r4, r0
 8006276:	4628      	mov	r0, r5
 8006278:	f000 fd3c 	bl	8006cf4 <_sbrk_r>
 800627c:	3001      	adds	r0, #1
 800627e:	d1f2      	bne.n	8006266 <sbrk_aligned+0x22>
 8006280:	e7ef      	b.n	8006262 <sbrk_aligned+0x1e>
 8006282:	bf00      	nop
 8006284:	20000490 	.word	0x20000490

08006288 <_malloc_r>:
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800628c:	1ccd      	adds	r5, r1, #3
 800628e:	f025 0503 	bic.w	r5, r5, #3
 8006292:	3508      	adds	r5, #8
 8006294:	2d0c      	cmp	r5, #12
 8006296:	bf38      	it	cc
 8006298:	250c      	movcc	r5, #12
 800629a:	2d00      	cmp	r5, #0
 800629c:	4606      	mov	r6, r0
 800629e:	db01      	blt.n	80062a4 <_malloc_r+0x1c>
 80062a0:	42a9      	cmp	r1, r5
 80062a2:	d904      	bls.n	80062ae <_malloc_r+0x26>
 80062a4:	230c      	movs	r3, #12
 80062a6:	6033      	str	r3, [r6, #0]
 80062a8:	2000      	movs	r0, #0
 80062aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006384 <_malloc_r+0xfc>
 80062b2:	f000 f869 	bl	8006388 <__malloc_lock>
 80062b6:	f8d8 3000 	ldr.w	r3, [r8]
 80062ba:	461c      	mov	r4, r3
 80062bc:	bb44      	cbnz	r4, 8006310 <_malloc_r+0x88>
 80062be:	4629      	mov	r1, r5
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff ffbf 	bl	8006244 <sbrk_aligned>
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	4604      	mov	r4, r0
 80062ca:	d158      	bne.n	800637e <_malloc_r+0xf6>
 80062cc:	f8d8 4000 	ldr.w	r4, [r8]
 80062d0:	4627      	mov	r7, r4
 80062d2:	2f00      	cmp	r7, #0
 80062d4:	d143      	bne.n	800635e <_malloc_r+0xd6>
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	d04b      	beq.n	8006372 <_malloc_r+0xea>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	4639      	mov	r1, r7
 80062de:	4630      	mov	r0, r6
 80062e0:	eb04 0903 	add.w	r9, r4, r3
 80062e4:	f000 fd06 	bl	8006cf4 <_sbrk_r>
 80062e8:	4581      	cmp	r9, r0
 80062ea:	d142      	bne.n	8006372 <_malloc_r+0xea>
 80062ec:	6821      	ldr	r1, [r4, #0]
 80062ee:	1a6d      	subs	r5, r5, r1
 80062f0:	4629      	mov	r1, r5
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff ffa6 	bl	8006244 <sbrk_aligned>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d03a      	beq.n	8006372 <_malloc_r+0xea>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	442b      	add	r3, r5
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	f8d8 3000 	ldr.w	r3, [r8]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	bb62      	cbnz	r2, 8006364 <_malloc_r+0xdc>
 800630a:	f8c8 7000 	str.w	r7, [r8]
 800630e:	e00f      	b.n	8006330 <_malloc_r+0xa8>
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	1b52      	subs	r2, r2, r5
 8006314:	d420      	bmi.n	8006358 <_malloc_r+0xd0>
 8006316:	2a0b      	cmp	r2, #11
 8006318:	d917      	bls.n	800634a <_malloc_r+0xc2>
 800631a:	1961      	adds	r1, r4, r5
 800631c:	42a3      	cmp	r3, r4
 800631e:	6025      	str	r5, [r4, #0]
 8006320:	bf18      	it	ne
 8006322:	6059      	strne	r1, [r3, #4]
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	bf08      	it	eq
 8006328:	f8c8 1000 	streq.w	r1, [r8]
 800632c:	5162      	str	r2, [r4, r5]
 800632e:	604b      	str	r3, [r1, #4]
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f82f 	bl	8006394 <__malloc_unlock>
 8006336:	f104 000b 	add.w	r0, r4, #11
 800633a:	1d23      	adds	r3, r4, #4
 800633c:	f020 0007 	bic.w	r0, r0, #7
 8006340:	1ac2      	subs	r2, r0, r3
 8006342:	bf1c      	itt	ne
 8006344:	1a1b      	subne	r3, r3, r0
 8006346:	50a3      	strne	r3, [r4, r2]
 8006348:	e7af      	b.n	80062aa <_malloc_r+0x22>
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	42a3      	cmp	r3, r4
 800634e:	bf0c      	ite	eq
 8006350:	f8c8 2000 	streq.w	r2, [r8]
 8006354:	605a      	strne	r2, [r3, #4]
 8006356:	e7eb      	b.n	8006330 <_malloc_r+0xa8>
 8006358:	4623      	mov	r3, r4
 800635a:	6864      	ldr	r4, [r4, #4]
 800635c:	e7ae      	b.n	80062bc <_malloc_r+0x34>
 800635e:	463c      	mov	r4, r7
 8006360:	687f      	ldr	r7, [r7, #4]
 8006362:	e7b6      	b.n	80062d2 <_malloc_r+0x4a>
 8006364:	461a      	mov	r2, r3
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	42a3      	cmp	r3, r4
 800636a:	d1fb      	bne.n	8006364 <_malloc_r+0xdc>
 800636c:	2300      	movs	r3, #0
 800636e:	6053      	str	r3, [r2, #4]
 8006370:	e7de      	b.n	8006330 <_malloc_r+0xa8>
 8006372:	230c      	movs	r3, #12
 8006374:	6033      	str	r3, [r6, #0]
 8006376:	4630      	mov	r0, r6
 8006378:	f000 f80c 	bl	8006394 <__malloc_unlock>
 800637c:	e794      	b.n	80062a8 <_malloc_r+0x20>
 800637e:	6005      	str	r5, [r0, #0]
 8006380:	e7d6      	b.n	8006330 <_malloc_r+0xa8>
 8006382:	bf00      	nop
 8006384:	20000494 	.word	0x20000494

08006388 <__malloc_lock>:
 8006388:	4801      	ldr	r0, [pc, #4]	@ (8006390 <__malloc_lock+0x8>)
 800638a:	f7ff b8ae 	b.w	80054ea <__retarget_lock_acquire_recursive>
 800638e:	bf00      	nop
 8006390:	2000048c 	.word	0x2000048c

08006394 <__malloc_unlock>:
 8006394:	4801      	ldr	r0, [pc, #4]	@ (800639c <__malloc_unlock+0x8>)
 8006396:	f7ff b8a9 	b.w	80054ec <__retarget_lock_release_recursive>
 800639a:	bf00      	nop
 800639c:	2000048c 	.word	0x2000048c

080063a0 <_Balloc>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	69c6      	ldr	r6, [r0, #28]
 80063a4:	4604      	mov	r4, r0
 80063a6:	460d      	mov	r5, r1
 80063a8:	b976      	cbnz	r6, 80063c8 <_Balloc+0x28>
 80063aa:	2010      	movs	r0, #16
 80063ac:	f7ff ff42 	bl	8006234 <malloc>
 80063b0:	4602      	mov	r2, r0
 80063b2:	61e0      	str	r0, [r4, #28]
 80063b4:	b920      	cbnz	r0, 80063c0 <_Balloc+0x20>
 80063b6:	4b18      	ldr	r3, [pc, #96]	@ (8006418 <_Balloc+0x78>)
 80063b8:	4818      	ldr	r0, [pc, #96]	@ (800641c <_Balloc+0x7c>)
 80063ba:	216b      	movs	r1, #107	@ 0x6b
 80063bc:	f000 fcb8 	bl	8006d30 <__assert_func>
 80063c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063c4:	6006      	str	r6, [r0, #0]
 80063c6:	60c6      	str	r6, [r0, #12]
 80063c8:	69e6      	ldr	r6, [r4, #28]
 80063ca:	68f3      	ldr	r3, [r6, #12]
 80063cc:	b183      	cbz	r3, 80063f0 <_Balloc+0x50>
 80063ce:	69e3      	ldr	r3, [r4, #28]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063d6:	b9b8      	cbnz	r0, 8006408 <_Balloc+0x68>
 80063d8:	2101      	movs	r1, #1
 80063da:	fa01 f605 	lsl.w	r6, r1, r5
 80063de:	1d72      	adds	r2, r6, #5
 80063e0:	0092      	lsls	r2, r2, #2
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 fcc2 	bl	8006d6c <_calloc_r>
 80063e8:	b160      	cbz	r0, 8006404 <_Balloc+0x64>
 80063ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063ee:	e00e      	b.n	800640e <_Balloc+0x6e>
 80063f0:	2221      	movs	r2, #33	@ 0x21
 80063f2:	2104      	movs	r1, #4
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 fcb9 	bl	8006d6c <_calloc_r>
 80063fa:	69e3      	ldr	r3, [r4, #28]
 80063fc:	60f0      	str	r0, [r6, #12]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e4      	bne.n	80063ce <_Balloc+0x2e>
 8006404:	2000      	movs	r0, #0
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	6802      	ldr	r2, [r0, #0]
 800640a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800640e:	2300      	movs	r3, #0
 8006410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006414:	e7f7      	b.n	8006406 <_Balloc+0x66>
 8006416:	bf00      	nop
 8006418:	08007221 	.word	0x08007221
 800641c:	080072a1 	.word	0x080072a1

08006420 <_Bfree>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	69c6      	ldr	r6, [r0, #28]
 8006424:	4605      	mov	r5, r0
 8006426:	460c      	mov	r4, r1
 8006428:	b976      	cbnz	r6, 8006448 <_Bfree+0x28>
 800642a:	2010      	movs	r0, #16
 800642c:	f7ff ff02 	bl	8006234 <malloc>
 8006430:	4602      	mov	r2, r0
 8006432:	61e8      	str	r0, [r5, #28]
 8006434:	b920      	cbnz	r0, 8006440 <_Bfree+0x20>
 8006436:	4b09      	ldr	r3, [pc, #36]	@ (800645c <_Bfree+0x3c>)
 8006438:	4809      	ldr	r0, [pc, #36]	@ (8006460 <_Bfree+0x40>)
 800643a:	218f      	movs	r1, #143	@ 0x8f
 800643c:	f000 fc78 	bl	8006d30 <__assert_func>
 8006440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006444:	6006      	str	r6, [r0, #0]
 8006446:	60c6      	str	r6, [r0, #12]
 8006448:	b13c      	cbz	r4, 800645a <_Bfree+0x3a>
 800644a:	69eb      	ldr	r3, [r5, #28]
 800644c:	6862      	ldr	r2, [r4, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006454:	6021      	str	r1, [r4, #0]
 8006456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	08007221 	.word	0x08007221
 8006460:	080072a1 	.word	0x080072a1

08006464 <__multadd>:
 8006464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006468:	690d      	ldr	r5, [r1, #16]
 800646a:	4607      	mov	r7, r0
 800646c:	460c      	mov	r4, r1
 800646e:	461e      	mov	r6, r3
 8006470:	f101 0c14 	add.w	ip, r1, #20
 8006474:	2000      	movs	r0, #0
 8006476:	f8dc 3000 	ldr.w	r3, [ip]
 800647a:	b299      	uxth	r1, r3
 800647c:	fb02 6101 	mla	r1, r2, r1, r6
 8006480:	0c1e      	lsrs	r6, r3, #16
 8006482:	0c0b      	lsrs	r3, r1, #16
 8006484:	fb02 3306 	mla	r3, r2, r6, r3
 8006488:	b289      	uxth	r1, r1
 800648a:	3001      	adds	r0, #1
 800648c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006490:	4285      	cmp	r5, r0
 8006492:	f84c 1b04 	str.w	r1, [ip], #4
 8006496:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800649a:	dcec      	bgt.n	8006476 <__multadd+0x12>
 800649c:	b30e      	cbz	r6, 80064e2 <__multadd+0x7e>
 800649e:	68a3      	ldr	r3, [r4, #8]
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	dc19      	bgt.n	80064d8 <__multadd+0x74>
 80064a4:	6861      	ldr	r1, [r4, #4]
 80064a6:	4638      	mov	r0, r7
 80064a8:	3101      	adds	r1, #1
 80064aa:	f7ff ff79 	bl	80063a0 <_Balloc>
 80064ae:	4680      	mov	r8, r0
 80064b0:	b928      	cbnz	r0, 80064be <__multadd+0x5a>
 80064b2:	4602      	mov	r2, r0
 80064b4:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <__multadd+0x84>)
 80064b6:	480d      	ldr	r0, [pc, #52]	@ (80064ec <__multadd+0x88>)
 80064b8:	21ba      	movs	r1, #186	@ 0xba
 80064ba:	f000 fc39 	bl	8006d30 <__assert_func>
 80064be:	6922      	ldr	r2, [r4, #16]
 80064c0:	3202      	adds	r2, #2
 80064c2:	f104 010c 	add.w	r1, r4, #12
 80064c6:	0092      	lsls	r2, r2, #2
 80064c8:	300c      	adds	r0, #12
 80064ca:	f000 fc23 	bl	8006d14 <memcpy>
 80064ce:	4621      	mov	r1, r4
 80064d0:	4638      	mov	r0, r7
 80064d2:	f7ff ffa5 	bl	8006420 <_Bfree>
 80064d6:	4644      	mov	r4, r8
 80064d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064dc:	3501      	adds	r5, #1
 80064de:	615e      	str	r6, [r3, #20]
 80064e0:	6125      	str	r5, [r4, #16]
 80064e2:	4620      	mov	r0, r4
 80064e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e8:	08007290 	.word	0x08007290
 80064ec:	080072a1 	.word	0x080072a1

080064f0 <__hi0bits>:
 80064f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064f4:	4603      	mov	r3, r0
 80064f6:	bf36      	itet	cc
 80064f8:	0403      	lslcc	r3, r0, #16
 80064fa:	2000      	movcs	r0, #0
 80064fc:	2010      	movcc	r0, #16
 80064fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006502:	bf3c      	itt	cc
 8006504:	021b      	lslcc	r3, r3, #8
 8006506:	3008      	addcc	r0, #8
 8006508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800650c:	bf3c      	itt	cc
 800650e:	011b      	lslcc	r3, r3, #4
 8006510:	3004      	addcc	r0, #4
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006516:	bf3c      	itt	cc
 8006518:	009b      	lslcc	r3, r3, #2
 800651a:	3002      	addcc	r0, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	db05      	blt.n	800652c <__hi0bits+0x3c>
 8006520:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006524:	f100 0001 	add.w	r0, r0, #1
 8006528:	bf08      	it	eq
 800652a:	2020      	moveq	r0, #32
 800652c:	4770      	bx	lr

0800652e <__lo0bits>:
 800652e:	6803      	ldr	r3, [r0, #0]
 8006530:	4602      	mov	r2, r0
 8006532:	f013 0007 	ands.w	r0, r3, #7
 8006536:	d00b      	beq.n	8006550 <__lo0bits+0x22>
 8006538:	07d9      	lsls	r1, r3, #31
 800653a:	d421      	bmi.n	8006580 <__lo0bits+0x52>
 800653c:	0798      	lsls	r0, r3, #30
 800653e:	bf49      	itett	mi
 8006540:	085b      	lsrmi	r3, r3, #1
 8006542:	089b      	lsrpl	r3, r3, #2
 8006544:	2001      	movmi	r0, #1
 8006546:	6013      	strmi	r3, [r2, #0]
 8006548:	bf5c      	itt	pl
 800654a:	6013      	strpl	r3, [r2, #0]
 800654c:	2002      	movpl	r0, #2
 800654e:	4770      	bx	lr
 8006550:	b299      	uxth	r1, r3
 8006552:	b909      	cbnz	r1, 8006558 <__lo0bits+0x2a>
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	2010      	movs	r0, #16
 8006558:	b2d9      	uxtb	r1, r3
 800655a:	b909      	cbnz	r1, 8006560 <__lo0bits+0x32>
 800655c:	3008      	adds	r0, #8
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	0719      	lsls	r1, r3, #28
 8006562:	bf04      	itt	eq
 8006564:	091b      	lsreq	r3, r3, #4
 8006566:	3004      	addeq	r0, #4
 8006568:	0799      	lsls	r1, r3, #30
 800656a:	bf04      	itt	eq
 800656c:	089b      	lsreq	r3, r3, #2
 800656e:	3002      	addeq	r0, #2
 8006570:	07d9      	lsls	r1, r3, #31
 8006572:	d403      	bmi.n	800657c <__lo0bits+0x4e>
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	f100 0001 	add.w	r0, r0, #1
 800657a:	d003      	beq.n	8006584 <__lo0bits+0x56>
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	4770      	bx	lr
 8006580:	2000      	movs	r0, #0
 8006582:	4770      	bx	lr
 8006584:	2020      	movs	r0, #32
 8006586:	4770      	bx	lr

08006588 <__i2b>:
 8006588:	b510      	push	{r4, lr}
 800658a:	460c      	mov	r4, r1
 800658c:	2101      	movs	r1, #1
 800658e:	f7ff ff07 	bl	80063a0 <_Balloc>
 8006592:	4602      	mov	r2, r0
 8006594:	b928      	cbnz	r0, 80065a2 <__i2b+0x1a>
 8006596:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <__i2b+0x24>)
 8006598:	4805      	ldr	r0, [pc, #20]	@ (80065b0 <__i2b+0x28>)
 800659a:	f240 1145 	movw	r1, #325	@ 0x145
 800659e:	f000 fbc7 	bl	8006d30 <__assert_func>
 80065a2:	2301      	movs	r3, #1
 80065a4:	6144      	str	r4, [r0, #20]
 80065a6:	6103      	str	r3, [r0, #16]
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	bf00      	nop
 80065ac:	08007290 	.word	0x08007290
 80065b0:	080072a1 	.word	0x080072a1

080065b4 <__multiply>:
 80065b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	4617      	mov	r7, r2
 80065ba:	690a      	ldr	r2, [r1, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	429a      	cmp	r2, r3
 80065c0:	bfa8      	it	ge
 80065c2:	463b      	movge	r3, r7
 80065c4:	4689      	mov	r9, r1
 80065c6:	bfa4      	itt	ge
 80065c8:	460f      	movge	r7, r1
 80065ca:	4699      	movge	r9, r3
 80065cc:	693d      	ldr	r5, [r7, #16]
 80065ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	eb05 060a 	add.w	r6, r5, sl
 80065da:	42b3      	cmp	r3, r6
 80065dc:	b085      	sub	sp, #20
 80065de:	bfb8      	it	lt
 80065e0:	3101      	addlt	r1, #1
 80065e2:	f7ff fedd 	bl	80063a0 <_Balloc>
 80065e6:	b930      	cbnz	r0, 80065f6 <__multiply+0x42>
 80065e8:	4602      	mov	r2, r0
 80065ea:	4b41      	ldr	r3, [pc, #260]	@ (80066f0 <__multiply+0x13c>)
 80065ec:	4841      	ldr	r0, [pc, #260]	@ (80066f4 <__multiply+0x140>)
 80065ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065f2:	f000 fb9d 	bl	8006d30 <__assert_func>
 80065f6:	f100 0414 	add.w	r4, r0, #20
 80065fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80065fe:	4623      	mov	r3, r4
 8006600:	2200      	movs	r2, #0
 8006602:	4573      	cmp	r3, lr
 8006604:	d320      	bcc.n	8006648 <__multiply+0x94>
 8006606:	f107 0814 	add.w	r8, r7, #20
 800660a:	f109 0114 	add.w	r1, r9, #20
 800660e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006612:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006616:	9302      	str	r3, [sp, #8]
 8006618:	1beb      	subs	r3, r5, r7
 800661a:	3b15      	subs	r3, #21
 800661c:	f023 0303 	bic.w	r3, r3, #3
 8006620:	3304      	adds	r3, #4
 8006622:	3715      	adds	r7, #21
 8006624:	42bd      	cmp	r5, r7
 8006626:	bf38      	it	cc
 8006628:	2304      	movcc	r3, #4
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	9b02      	ldr	r3, [sp, #8]
 800662e:	9103      	str	r1, [sp, #12]
 8006630:	428b      	cmp	r3, r1
 8006632:	d80c      	bhi.n	800664e <__multiply+0x9a>
 8006634:	2e00      	cmp	r6, #0
 8006636:	dd03      	ble.n	8006640 <__multiply+0x8c>
 8006638:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800663c:	2b00      	cmp	r3, #0
 800663e:	d055      	beq.n	80066ec <__multiply+0x138>
 8006640:	6106      	str	r6, [r0, #16]
 8006642:	b005      	add	sp, #20
 8006644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006648:	f843 2b04 	str.w	r2, [r3], #4
 800664c:	e7d9      	b.n	8006602 <__multiply+0x4e>
 800664e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006652:	f1ba 0f00 	cmp.w	sl, #0
 8006656:	d01f      	beq.n	8006698 <__multiply+0xe4>
 8006658:	46c4      	mov	ip, r8
 800665a:	46a1      	mov	r9, r4
 800665c:	2700      	movs	r7, #0
 800665e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006662:	f8d9 3000 	ldr.w	r3, [r9]
 8006666:	fa1f fb82 	uxth.w	fp, r2
 800666a:	b29b      	uxth	r3, r3
 800666c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006670:	443b      	add	r3, r7
 8006672:	f8d9 7000 	ldr.w	r7, [r9]
 8006676:	0c12      	lsrs	r2, r2, #16
 8006678:	0c3f      	lsrs	r7, r7, #16
 800667a:	fb0a 7202 	mla	r2, sl, r2, r7
 800667e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006682:	b29b      	uxth	r3, r3
 8006684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006688:	4565      	cmp	r5, ip
 800668a:	f849 3b04 	str.w	r3, [r9], #4
 800668e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006692:	d8e4      	bhi.n	800665e <__multiply+0xaa>
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	50e7      	str	r7, [r4, r3]
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800669e:	3104      	adds	r1, #4
 80066a0:	f1b9 0f00 	cmp.w	r9, #0
 80066a4:	d020      	beq.n	80066e8 <__multiply+0x134>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	4647      	mov	r7, r8
 80066aa:	46a4      	mov	ip, r4
 80066ac:	f04f 0a00 	mov.w	sl, #0
 80066b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80066b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80066b8:	fb09 220b 	mla	r2, r9, fp, r2
 80066bc:	4452      	add	r2, sl
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066c4:	f84c 3b04 	str.w	r3, [ip], #4
 80066c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80066cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80066d4:	fb09 330a 	mla	r3, r9, sl, r3
 80066d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80066dc:	42bd      	cmp	r5, r7
 80066de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066e2:	d8e5      	bhi.n	80066b0 <__multiply+0xfc>
 80066e4:	9a01      	ldr	r2, [sp, #4]
 80066e6:	50a3      	str	r3, [r4, r2]
 80066e8:	3404      	adds	r4, #4
 80066ea:	e79f      	b.n	800662c <__multiply+0x78>
 80066ec:	3e01      	subs	r6, #1
 80066ee:	e7a1      	b.n	8006634 <__multiply+0x80>
 80066f0:	08007290 	.word	0x08007290
 80066f4:	080072a1 	.word	0x080072a1

080066f8 <__pow5mult>:
 80066f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066fc:	4615      	mov	r5, r2
 80066fe:	f012 0203 	ands.w	r2, r2, #3
 8006702:	4607      	mov	r7, r0
 8006704:	460e      	mov	r6, r1
 8006706:	d007      	beq.n	8006718 <__pow5mult+0x20>
 8006708:	4c25      	ldr	r4, [pc, #148]	@ (80067a0 <__pow5mult+0xa8>)
 800670a:	3a01      	subs	r2, #1
 800670c:	2300      	movs	r3, #0
 800670e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006712:	f7ff fea7 	bl	8006464 <__multadd>
 8006716:	4606      	mov	r6, r0
 8006718:	10ad      	asrs	r5, r5, #2
 800671a:	d03d      	beq.n	8006798 <__pow5mult+0xa0>
 800671c:	69fc      	ldr	r4, [r7, #28]
 800671e:	b97c      	cbnz	r4, 8006740 <__pow5mult+0x48>
 8006720:	2010      	movs	r0, #16
 8006722:	f7ff fd87 	bl	8006234 <malloc>
 8006726:	4602      	mov	r2, r0
 8006728:	61f8      	str	r0, [r7, #28]
 800672a:	b928      	cbnz	r0, 8006738 <__pow5mult+0x40>
 800672c:	4b1d      	ldr	r3, [pc, #116]	@ (80067a4 <__pow5mult+0xac>)
 800672e:	481e      	ldr	r0, [pc, #120]	@ (80067a8 <__pow5mult+0xb0>)
 8006730:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006734:	f000 fafc 	bl	8006d30 <__assert_func>
 8006738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800673c:	6004      	str	r4, [r0, #0]
 800673e:	60c4      	str	r4, [r0, #12]
 8006740:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006748:	b94c      	cbnz	r4, 800675e <__pow5mult+0x66>
 800674a:	f240 2171 	movw	r1, #625	@ 0x271
 800674e:	4638      	mov	r0, r7
 8006750:	f7ff ff1a 	bl	8006588 <__i2b>
 8006754:	2300      	movs	r3, #0
 8006756:	f8c8 0008 	str.w	r0, [r8, #8]
 800675a:	4604      	mov	r4, r0
 800675c:	6003      	str	r3, [r0, #0]
 800675e:	f04f 0900 	mov.w	r9, #0
 8006762:	07eb      	lsls	r3, r5, #31
 8006764:	d50a      	bpl.n	800677c <__pow5mult+0x84>
 8006766:	4631      	mov	r1, r6
 8006768:	4622      	mov	r2, r4
 800676a:	4638      	mov	r0, r7
 800676c:	f7ff ff22 	bl	80065b4 <__multiply>
 8006770:	4631      	mov	r1, r6
 8006772:	4680      	mov	r8, r0
 8006774:	4638      	mov	r0, r7
 8006776:	f7ff fe53 	bl	8006420 <_Bfree>
 800677a:	4646      	mov	r6, r8
 800677c:	106d      	asrs	r5, r5, #1
 800677e:	d00b      	beq.n	8006798 <__pow5mult+0xa0>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	b938      	cbnz	r0, 8006794 <__pow5mult+0x9c>
 8006784:	4622      	mov	r2, r4
 8006786:	4621      	mov	r1, r4
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff ff13 	bl	80065b4 <__multiply>
 800678e:	6020      	str	r0, [r4, #0]
 8006790:	f8c0 9000 	str.w	r9, [r0]
 8006794:	4604      	mov	r4, r0
 8006796:	e7e4      	b.n	8006762 <__pow5mult+0x6a>
 8006798:	4630      	mov	r0, r6
 800679a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800679e:	bf00      	nop
 80067a0:	08007354 	.word	0x08007354
 80067a4:	08007221 	.word	0x08007221
 80067a8:	080072a1 	.word	0x080072a1

080067ac <__lshift>:
 80067ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b0:	460c      	mov	r4, r1
 80067b2:	6849      	ldr	r1, [r1, #4]
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	4607      	mov	r7, r0
 80067be:	4691      	mov	r9, r2
 80067c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067c4:	f108 0601 	add.w	r6, r8, #1
 80067c8:	42b3      	cmp	r3, r6
 80067ca:	db0b      	blt.n	80067e4 <__lshift+0x38>
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7ff fde7 	bl	80063a0 <_Balloc>
 80067d2:	4605      	mov	r5, r0
 80067d4:	b948      	cbnz	r0, 80067ea <__lshift+0x3e>
 80067d6:	4602      	mov	r2, r0
 80067d8:	4b28      	ldr	r3, [pc, #160]	@ (800687c <__lshift+0xd0>)
 80067da:	4829      	ldr	r0, [pc, #164]	@ (8006880 <__lshift+0xd4>)
 80067dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067e0:	f000 faa6 	bl	8006d30 <__assert_func>
 80067e4:	3101      	adds	r1, #1
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	e7ee      	b.n	80067c8 <__lshift+0x1c>
 80067ea:	2300      	movs	r3, #0
 80067ec:	f100 0114 	add.w	r1, r0, #20
 80067f0:	f100 0210 	add.w	r2, r0, #16
 80067f4:	4618      	mov	r0, r3
 80067f6:	4553      	cmp	r3, sl
 80067f8:	db33      	blt.n	8006862 <__lshift+0xb6>
 80067fa:	6920      	ldr	r0, [r4, #16]
 80067fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006800:	f104 0314 	add.w	r3, r4, #20
 8006804:	f019 091f 	ands.w	r9, r9, #31
 8006808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800680c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006810:	d02b      	beq.n	800686a <__lshift+0xbe>
 8006812:	f1c9 0e20 	rsb	lr, r9, #32
 8006816:	468a      	mov	sl, r1
 8006818:	2200      	movs	r2, #0
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	fa00 f009 	lsl.w	r0, r0, r9
 8006820:	4310      	orrs	r0, r2
 8006822:	f84a 0b04 	str.w	r0, [sl], #4
 8006826:	f853 2b04 	ldr.w	r2, [r3], #4
 800682a:	459c      	cmp	ip, r3
 800682c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006830:	d8f3      	bhi.n	800681a <__lshift+0x6e>
 8006832:	ebac 0304 	sub.w	r3, ip, r4
 8006836:	3b15      	subs	r3, #21
 8006838:	f023 0303 	bic.w	r3, r3, #3
 800683c:	3304      	adds	r3, #4
 800683e:	f104 0015 	add.w	r0, r4, #21
 8006842:	4560      	cmp	r0, ip
 8006844:	bf88      	it	hi
 8006846:	2304      	movhi	r3, #4
 8006848:	50ca      	str	r2, [r1, r3]
 800684a:	b10a      	cbz	r2, 8006850 <__lshift+0xa4>
 800684c:	f108 0602 	add.w	r6, r8, #2
 8006850:	3e01      	subs	r6, #1
 8006852:	4638      	mov	r0, r7
 8006854:	612e      	str	r6, [r5, #16]
 8006856:	4621      	mov	r1, r4
 8006858:	f7ff fde2 	bl	8006420 <_Bfree>
 800685c:	4628      	mov	r0, r5
 800685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006862:	f842 0f04 	str.w	r0, [r2, #4]!
 8006866:	3301      	adds	r3, #1
 8006868:	e7c5      	b.n	80067f6 <__lshift+0x4a>
 800686a:	3904      	subs	r1, #4
 800686c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006870:	f841 2f04 	str.w	r2, [r1, #4]!
 8006874:	459c      	cmp	ip, r3
 8006876:	d8f9      	bhi.n	800686c <__lshift+0xc0>
 8006878:	e7ea      	b.n	8006850 <__lshift+0xa4>
 800687a:	bf00      	nop
 800687c:	08007290 	.word	0x08007290
 8006880:	080072a1 	.word	0x080072a1

08006884 <__mcmp>:
 8006884:	690a      	ldr	r2, [r1, #16]
 8006886:	4603      	mov	r3, r0
 8006888:	6900      	ldr	r0, [r0, #16]
 800688a:	1a80      	subs	r0, r0, r2
 800688c:	b530      	push	{r4, r5, lr}
 800688e:	d10e      	bne.n	80068ae <__mcmp+0x2a>
 8006890:	3314      	adds	r3, #20
 8006892:	3114      	adds	r1, #20
 8006894:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006898:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800689c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068a4:	4295      	cmp	r5, r2
 80068a6:	d003      	beq.n	80068b0 <__mcmp+0x2c>
 80068a8:	d205      	bcs.n	80068b6 <__mcmp+0x32>
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295
 80068ae:	bd30      	pop	{r4, r5, pc}
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	d3f3      	bcc.n	800689c <__mcmp+0x18>
 80068b4:	e7fb      	b.n	80068ae <__mcmp+0x2a>
 80068b6:	2001      	movs	r0, #1
 80068b8:	e7f9      	b.n	80068ae <__mcmp+0x2a>
	...

080068bc <__mdiff>:
 80068bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	4689      	mov	r9, r1
 80068c2:	4606      	mov	r6, r0
 80068c4:	4611      	mov	r1, r2
 80068c6:	4648      	mov	r0, r9
 80068c8:	4614      	mov	r4, r2
 80068ca:	f7ff ffdb 	bl	8006884 <__mcmp>
 80068ce:	1e05      	subs	r5, r0, #0
 80068d0:	d112      	bne.n	80068f8 <__mdiff+0x3c>
 80068d2:	4629      	mov	r1, r5
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff fd63 	bl	80063a0 <_Balloc>
 80068da:	4602      	mov	r2, r0
 80068dc:	b928      	cbnz	r0, 80068ea <__mdiff+0x2e>
 80068de:	4b3f      	ldr	r3, [pc, #252]	@ (80069dc <__mdiff+0x120>)
 80068e0:	f240 2137 	movw	r1, #567	@ 0x237
 80068e4:	483e      	ldr	r0, [pc, #248]	@ (80069e0 <__mdiff+0x124>)
 80068e6:	f000 fa23 	bl	8006d30 <__assert_func>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068f0:	4610      	mov	r0, r2
 80068f2:	b003      	add	sp, #12
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f8:	bfbc      	itt	lt
 80068fa:	464b      	movlt	r3, r9
 80068fc:	46a1      	movlt	r9, r4
 80068fe:	4630      	mov	r0, r6
 8006900:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006904:	bfba      	itte	lt
 8006906:	461c      	movlt	r4, r3
 8006908:	2501      	movlt	r5, #1
 800690a:	2500      	movge	r5, #0
 800690c:	f7ff fd48 	bl	80063a0 <_Balloc>
 8006910:	4602      	mov	r2, r0
 8006912:	b918      	cbnz	r0, 800691c <__mdiff+0x60>
 8006914:	4b31      	ldr	r3, [pc, #196]	@ (80069dc <__mdiff+0x120>)
 8006916:	f240 2145 	movw	r1, #581	@ 0x245
 800691a:	e7e3      	b.n	80068e4 <__mdiff+0x28>
 800691c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006920:	6926      	ldr	r6, [r4, #16]
 8006922:	60c5      	str	r5, [r0, #12]
 8006924:	f109 0310 	add.w	r3, r9, #16
 8006928:	f109 0514 	add.w	r5, r9, #20
 800692c:	f104 0e14 	add.w	lr, r4, #20
 8006930:	f100 0b14 	add.w	fp, r0, #20
 8006934:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006938:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	46d9      	mov	r9, fp
 8006940:	f04f 0c00 	mov.w	ip, #0
 8006944:	9b01      	ldr	r3, [sp, #4]
 8006946:	f85e 0b04 	ldr.w	r0, [lr], #4
 800694a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	fa1f f38a 	uxth.w	r3, sl
 8006954:	4619      	mov	r1, r3
 8006956:	b283      	uxth	r3, r0
 8006958:	1acb      	subs	r3, r1, r3
 800695a:	0c00      	lsrs	r0, r0, #16
 800695c:	4463      	add	r3, ip
 800695e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006962:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006966:	b29b      	uxth	r3, r3
 8006968:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800696c:	4576      	cmp	r6, lr
 800696e:	f849 3b04 	str.w	r3, [r9], #4
 8006972:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006976:	d8e5      	bhi.n	8006944 <__mdiff+0x88>
 8006978:	1b33      	subs	r3, r6, r4
 800697a:	3b15      	subs	r3, #21
 800697c:	f023 0303 	bic.w	r3, r3, #3
 8006980:	3415      	adds	r4, #21
 8006982:	3304      	adds	r3, #4
 8006984:	42a6      	cmp	r6, r4
 8006986:	bf38      	it	cc
 8006988:	2304      	movcc	r3, #4
 800698a:	441d      	add	r5, r3
 800698c:	445b      	add	r3, fp
 800698e:	461e      	mov	r6, r3
 8006990:	462c      	mov	r4, r5
 8006992:	4544      	cmp	r4, r8
 8006994:	d30e      	bcc.n	80069b4 <__mdiff+0xf8>
 8006996:	f108 0103 	add.w	r1, r8, #3
 800699a:	1b49      	subs	r1, r1, r5
 800699c:	f021 0103 	bic.w	r1, r1, #3
 80069a0:	3d03      	subs	r5, #3
 80069a2:	45a8      	cmp	r8, r5
 80069a4:	bf38      	it	cc
 80069a6:	2100      	movcc	r1, #0
 80069a8:	440b      	add	r3, r1
 80069aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069ae:	b191      	cbz	r1, 80069d6 <__mdiff+0x11a>
 80069b0:	6117      	str	r7, [r2, #16]
 80069b2:	e79d      	b.n	80068f0 <__mdiff+0x34>
 80069b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80069b8:	46e6      	mov	lr, ip
 80069ba:	0c08      	lsrs	r0, r1, #16
 80069bc:	fa1c fc81 	uxtah	ip, ip, r1
 80069c0:	4471      	add	r1, lr
 80069c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069c6:	b289      	uxth	r1, r1
 80069c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069cc:	f846 1b04 	str.w	r1, [r6], #4
 80069d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069d4:	e7dd      	b.n	8006992 <__mdiff+0xd6>
 80069d6:	3f01      	subs	r7, #1
 80069d8:	e7e7      	b.n	80069aa <__mdiff+0xee>
 80069da:	bf00      	nop
 80069dc:	08007290 	.word	0x08007290
 80069e0:	080072a1 	.word	0x080072a1

080069e4 <__d2b>:
 80069e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069e8:	460f      	mov	r7, r1
 80069ea:	2101      	movs	r1, #1
 80069ec:	ec59 8b10 	vmov	r8, r9, d0
 80069f0:	4616      	mov	r6, r2
 80069f2:	f7ff fcd5 	bl	80063a0 <_Balloc>
 80069f6:	4604      	mov	r4, r0
 80069f8:	b930      	cbnz	r0, 8006a08 <__d2b+0x24>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b23      	ldr	r3, [pc, #140]	@ (8006a8c <__d2b+0xa8>)
 80069fe:	4824      	ldr	r0, [pc, #144]	@ (8006a90 <__d2b+0xac>)
 8006a00:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a04:	f000 f994 	bl	8006d30 <__assert_func>
 8006a08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a10:	b10d      	cbz	r5, 8006a16 <__d2b+0x32>
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	f1b8 0300 	subs.w	r3, r8, #0
 8006a1c:	d023      	beq.n	8006a66 <__d2b+0x82>
 8006a1e:	4668      	mov	r0, sp
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	f7ff fd84 	bl	800652e <__lo0bits>
 8006a26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a2a:	b1d0      	cbz	r0, 8006a62 <__d2b+0x7e>
 8006a2c:	f1c0 0320 	rsb	r3, r0, #32
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	430b      	orrs	r3, r1
 8006a36:	40c2      	lsrs	r2, r0
 8006a38:	6163      	str	r3, [r4, #20]
 8006a3a:	9201      	str	r2, [sp, #4]
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	61a3      	str	r3, [r4, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bf0c      	ite	eq
 8006a44:	2201      	moveq	r2, #1
 8006a46:	2202      	movne	r2, #2
 8006a48:	6122      	str	r2, [r4, #16]
 8006a4a:	b1a5      	cbz	r5, 8006a76 <__d2b+0x92>
 8006a4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a50:	4405      	add	r5, r0
 8006a52:	603d      	str	r5, [r7, #0]
 8006a54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a58:	6030      	str	r0, [r6, #0]
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	b003      	add	sp, #12
 8006a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a62:	6161      	str	r1, [r4, #20]
 8006a64:	e7ea      	b.n	8006a3c <__d2b+0x58>
 8006a66:	a801      	add	r0, sp, #4
 8006a68:	f7ff fd61 	bl	800652e <__lo0bits>
 8006a6c:	9b01      	ldr	r3, [sp, #4]
 8006a6e:	6163      	str	r3, [r4, #20]
 8006a70:	3020      	adds	r0, #32
 8006a72:	2201      	movs	r2, #1
 8006a74:	e7e8      	b.n	8006a48 <__d2b+0x64>
 8006a76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a7e:	6038      	str	r0, [r7, #0]
 8006a80:	6918      	ldr	r0, [r3, #16]
 8006a82:	f7ff fd35 	bl	80064f0 <__hi0bits>
 8006a86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a8a:	e7e5      	b.n	8006a58 <__d2b+0x74>
 8006a8c:	08007290 	.word	0x08007290
 8006a90:	080072a1 	.word	0x080072a1

08006a94 <__sflush_r>:
 8006a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	0716      	lsls	r6, r2, #28
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	d454      	bmi.n	8006b4e <__sflush_r+0xba>
 8006aa4:	684b      	ldr	r3, [r1, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dc02      	bgt.n	8006ab0 <__sflush_r+0x1c>
 8006aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd48      	ble.n	8006b42 <__sflush_r+0xae>
 8006ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d045      	beq.n	8006b42 <__sflush_r+0xae>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006abc:	682f      	ldr	r7, [r5, #0]
 8006abe:	6a21      	ldr	r1, [r4, #32]
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	d030      	beq.n	8006b26 <__sflush_r+0x92>
 8006ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	0759      	lsls	r1, r3, #29
 8006aca:	d505      	bpl.n	8006ad8 <__sflush_r+0x44>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ad2:	b10b      	cbz	r3, 8006ad8 <__sflush_r+0x44>
 8006ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ad6:	1ad2      	subs	r2, r2, r3
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006adc:	6a21      	ldr	r1, [r4, #32]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b0      	blx	r6
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	d106      	bne.n	8006af6 <__sflush_r+0x62>
 8006ae8:	6829      	ldr	r1, [r5, #0]
 8006aea:	291d      	cmp	r1, #29
 8006aec:	d82b      	bhi.n	8006b46 <__sflush_r+0xb2>
 8006aee:	4a2a      	ldr	r2, [pc, #168]	@ (8006b98 <__sflush_r+0x104>)
 8006af0:	40ca      	lsrs	r2, r1
 8006af2:	07d6      	lsls	r6, r2, #31
 8006af4:	d527      	bpl.n	8006b46 <__sflush_r+0xb2>
 8006af6:	2200      	movs	r2, #0
 8006af8:	6062      	str	r2, [r4, #4]
 8006afa:	04d9      	lsls	r1, r3, #19
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	d504      	bpl.n	8006b0c <__sflush_r+0x78>
 8006b02:	1c42      	adds	r2, r0, #1
 8006b04:	d101      	bne.n	8006b0a <__sflush_r+0x76>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	b903      	cbnz	r3, 8006b0c <__sflush_r+0x78>
 8006b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b0e:	602f      	str	r7, [r5, #0]
 8006b10:	b1b9      	cbz	r1, 8006b42 <__sflush_r+0xae>
 8006b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b16:	4299      	cmp	r1, r3
 8006b18:	d002      	beq.n	8006b20 <__sflush_r+0x8c>
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7ff fb40 	bl	80061a0 <_free_r>
 8006b20:	2300      	movs	r3, #0
 8006b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b24:	e00d      	b.n	8006b42 <__sflush_r+0xae>
 8006b26:	2301      	movs	r3, #1
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b0      	blx	r6
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	1c50      	adds	r0, r2, #1
 8006b30:	d1c9      	bne.n	8006ac6 <__sflush_r+0x32>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0c6      	beq.n	8006ac6 <__sflush_r+0x32>
 8006b38:	2b1d      	cmp	r3, #29
 8006b3a:	d001      	beq.n	8006b40 <__sflush_r+0xac>
 8006b3c:	2b16      	cmp	r3, #22
 8006b3e:	d11e      	bne.n	8006b7e <__sflush_r+0xea>
 8006b40:	602f      	str	r7, [r5, #0]
 8006b42:	2000      	movs	r0, #0
 8006b44:	e022      	b.n	8006b8c <__sflush_r+0xf8>
 8006b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	e01b      	b.n	8006b86 <__sflush_r+0xf2>
 8006b4e:	690f      	ldr	r7, [r1, #16]
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	d0f6      	beq.n	8006b42 <__sflush_r+0xae>
 8006b54:	0793      	lsls	r3, r2, #30
 8006b56:	680e      	ldr	r6, [r1, #0]
 8006b58:	bf08      	it	eq
 8006b5a:	694b      	ldreq	r3, [r1, #20]
 8006b5c:	600f      	str	r7, [r1, #0]
 8006b5e:	bf18      	it	ne
 8006b60:	2300      	movne	r3, #0
 8006b62:	eba6 0807 	sub.w	r8, r6, r7
 8006b66:	608b      	str	r3, [r1, #8]
 8006b68:	f1b8 0f00 	cmp.w	r8, #0
 8006b6c:	dde9      	ble.n	8006b42 <__sflush_r+0xae>
 8006b6e:	6a21      	ldr	r1, [r4, #32]
 8006b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b72:	4643      	mov	r3, r8
 8006b74:	463a      	mov	r2, r7
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b0      	blx	r6
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	dc08      	bgt.n	8006b90 <__sflush_r+0xfc>
 8006b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b90:	4407      	add	r7, r0
 8006b92:	eba8 0800 	sub.w	r8, r8, r0
 8006b96:	e7e7      	b.n	8006b68 <__sflush_r+0xd4>
 8006b98:	20400001 	.word	0x20400001

08006b9c <_fflush_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	690b      	ldr	r3, [r1, #16]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b913      	cbnz	r3, 8006bac <_fflush_r+0x10>
 8006ba6:	2500      	movs	r5, #0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	b118      	cbz	r0, 8006bb6 <_fflush_r+0x1a>
 8006bae:	6a03      	ldr	r3, [r0, #32]
 8006bb0:	b90b      	cbnz	r3, 8006bb6 <_fflush_r+0x1a>
 8006bb2:	f7fe fab1 	bl	8005118 <__sinit>
 8006bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f3      	beq.n	8006ba6 <_fflush_r+0xa>
 8006bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bc0:	07d0      	lsls	r0, r2, #31
 8006bc2:	d404      	bmi.n	8006bce <_fflush_r+0x32>
 8006bc4:	0599      	lsls	r1, r3, #22
 8006bc6:	d402      	bmi.n	8006bce <_fflush_r+0x32>
 8006bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bca:	f7fe fc8e 	bl	80054ea <__retarget_lock_acquire_recursive>
 8006bce:	4628      	mov	r0, r5
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f7ff ff5f 	bl	8006a94 <__sflush_r>
 8006bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bd8:	07da      	lsls	r2, r3, #31
 8006bda:	4605      	mov	r5, r0
 8006bdc:	d4e4      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	059b      	lsls	r3, r3, #22
 8006be2:	d4e1      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006be6:	f7fe fc81 	bl	80054ec <__retarget_lock_release_recursive>
 8006bea:	e7dd      	b.n	8006ba8 <_fflush_r+0xc>

08006bec <__swhatbuf_r>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	460c      	mov	r4, r1
 8006bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf4:	2900      	cmp	r1, #0
 8006bf6:	b096      	sub	sp, #88	@ 0x58
 8006bf8:	4615      	mov	r5, r2
 8006bfa:	461e      	mov	r6, r3
 8006bfc:	da0d      	bge.n	8006c1a <__swhatbuf_r+0x2e>
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	bf14      	ite	ne
 8006c0a:	2340      	movne	r3, #64	@ 0x40
 8006c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c10:	2000      	movs	r0, #0
 8006c12:	6031      	str	r1, [r6, #0]
 8006c14:	602b      	str	r3, [r5, #0]
 8006c16:	b016      	add	sp, #88	@ 0x58
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
 8006c1a:	466a      	mov	r2, sp
 8006c1c:	f000 f848 	bl	8006cb0 <_fstat_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	dbec      	blt.n	8006bfe <__swhatbuf_r+0x12>
 8006c24:	9901      	ldr	r1, [sp, #4]
 8006c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c2e:	4259      	negs	r1, r3
 8006c30:	4159      	adcs	r1, r3
 8006c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c36:	e7eb      	b.n	8006c10 <__swhatbuf_r+0x24>

08006c38 <__smakebuf_r>:
 8006c38:	898b      	ldrh	r3, [r1, #12]
 8006c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c3c:	079d      	lsls	r5, r3, #30
 8006c3e:	4606      	mov	r6, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	d507      	bpl.n	8006c54 <__smakebuf_r+0x1c>
 8006c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	6123      	str	r3, [r4, #16]
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	6163      	str	r3, [r4, #20]
 8006c50:	b003      	add	sp, #12
 8006c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c54:	ab01      	add	r3, sp, #4
 8006c56:	466a      	mov	r2, sp
 8006c58:	f7ff ffc8 	bl	8006bec <__swhatbuf_r>
 8006c5c:	9f00      	ldr	r7, [sp, #0]
 8006c5e:	4605      	mov	r5, r0
 8006c60:	4639      	mov	r1, r7
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff fb10 	bl	8006288 <_malloc_r>
 8006c68:	b948      	cbnz	r0, 8006c7e <__smakebuf_r+0x46>
 8006c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6e:	059a      	lsls	r2, r3, #22
 8006c70:	d4ee      	bmi.n	8006c50 <__smakebuf_r+0x18>
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	f043 0302 	orr.w	r3, r3, #2
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	e7e2      	b.n	8006c44 <__smakebuf_r+0xc>
 8006c7e:	89a3      	ldrh	r3, [r4, #12]
 8006c80:	6020      	str	r0, [r4, #0]
 8006c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	9b01      	ldr	r3, [sp, #4]
 8006c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c8e:	b15b      	cbz	r3, 8006ca8 <__smakebuf_r+0x70>
 8006c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c94:	4630      	mov	r0, r6
 8006c96:	f000 f81d 	bl	8006cd4 <_isatty_r>
 8006c9a:	b128      	cbz	r0, 8006ca8 <__smakebuf_r+0x70>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	431d      	orrs	r5, r3
 8006cac:	81a5      	strh	r5, [r4, #12]
 8006cae:	e7cf      	b.n	8006c50 <__smakebuf_r+0x18>

08006cb0 <_fstat_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d07      	ldr	r5, [pc, #28]	@ (8006cd0 <_fstat_r+0x20>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	f7fa fbef 	bl	80014a0 <_fstat>
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	d102      	bne.n	8006ccc <_fstat_r+0x1c>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	b103      	cbz	r3, 8006ccc <_fstat_r+0x1c>
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	bd38      	pop	{r3, r4, r5, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000488 	.word	0x20000488

08006cd4 <_isatty_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d06      	ldr	r5, [pc, #24]	@ (8006cf0 <_isatty_r+0x1c>)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4608      	mov	r0, r1
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	f7fa fbee 	bl	80014c0 <_isatty>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_isatty_r+0x1a>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_isatty_r+0x1a>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	20000488 	.word	0x20000488

08006cf4 <_sbrk_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d06      	ldr	r5, [pc, #24]	@ (8006d10 <_sbrk_r+0x1c>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	602b      	str	r3, [r5, #0]
 8006d00:	f7fa fbf6 	bl	80014f0 <_sbrk>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_sbrk_r+0x1a>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_sbrk_r+0x1a>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	20000488 	.word	0x20000488

08006d14 <memcpy>:
 8006d14:	440a      	add	r2, r1
 8006d16:	4291      	cmp	r1, r2
 8006d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d1c:	d100      	bne.n	8006d20 <memcpy+0xc>
 8006d1e:	4770      	bx	lr
 8006d20:	b510      	push	{r4, lr}
 8006d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d2a:	4291      	cmp	r1, r2
 8006d2c:	d1f9      	bne.n	8006d22 <memcpy+0xe>
 8006d2e:	bd10      	pop	{r4, pc}

08006d30 <__assert_func>:
 8006d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d32:	4614      	mov	r4, r2
 8006d34:	461a      	mov	r2, r3
 8006d36:	4b09      	ldr	r3, [pc, #36]	@ (8006d5c <__assert_func+0x2c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	68d8      	ldr	r0, [r3, #12]
 8006d3e:	b14c      	cbz	r4, 8006d54 <__assert_func+0x24>
 8006d40:	4b07      	ldr	r3, [pc, #28]	@ (8006d60 <__assert_func+0x30>)
 8006d42:	9100      	str	r1, [sp, #0]
 8006d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d48:	4906      	ldr	r1, [pc, #24]	@ (8006d64 <__assert_func+0x34>)
 8006d4a:	462b      	mov	r3, r5
 8006d4c:	f000 f842 	bl	8006dd4 <fiprintf>
 8006d50:	f000 f852 	bl	8006df8 <abort>
 8006d54:	4b04      	ldr	r3, [pc, #16]	@ (8006d68 <__assert_func+0x38>)
 8006d56:	461c      	mov	r4, r3
 8006d58:	e7f3      	b.n	8006d42 <__assert_func+0x12>
 8006d5a:	bf00      	nop
 8006d5c:	20000020 	.word	0x20000020
 8006d60:	08007304 	.word	0x08007304
 8006d64:	08007311 	.word	0x08007311
 8006d68:	0800733f 	.word	0x0800733f

08006d6c <_calloc_r>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	fba1 5402 	umull	r5, r4, r1, r2
 8006d72:	b934      	cbnz	r4, 8006d82 <_calloc_r+0x16>
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7ff fa87 	bl	8006288 <_malloc_r>
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	b928      	cbnz	r0, 8006d8a <_calloc_r+0x1e>
 8006d7e:	4630      	mov	r0, r6
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
 8006d82:	220c      	movs	r2, #12
 8006d84:	6002      	str	r2, [r0, #0]
 8006d86:	2600      	movs	r6, #0
 8006d88:	e7f9      	b.n	8006d7e <_calloc_r+0x12>
 8006d8a:	462a      	mov	r2, r5
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	f7fe fb2f 	bl	80053f0 <memset>
 8006d92:	e7f4      	b.n	8006d7e <_calloc_r+0x12>

08006d94 <__ascii_mbtowc>:
 8006d94:	b082      	sub	sp, #8
 8006d96:	b901      	cbnz	r1, 8006d9a <__ascii_mbtowc+0x6>
 8006d98:	a901      	add	r1, sp, #4
 8006d9a:	b142      	cbz	r2, 8006dae <__ascii_mbtowc+0x1a>
 8006d9c:	b14b      	cbz	r3, 8006db2 <__ascii_mbtowc+0x1e>
 8006d9e:	7813      	ldrb	r3, [r2, #0]
 8006da0:	600b      	str	r3, [r1, #0]
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	1e10      	subs	r0, r2, #0
 8006da6:	bf18      	it	ne
 8006da8:	2001      	movne	r0, #1
 8006daa:	b002      	add	sp, #8
 8006dac:	4770      	bx	lr
 8006dae:	4610      	mov	r0, r2
 8006db0:	e7fb      	b.n	8006daa <__ascii_mbtowc+0x16>
 8006db2:	f06f 0001 	mvn.w	r0, #1
 8006db6:	e7f8      	b.n	8006daa <__ascii_mbtowc+0x16>

08006db8 <__ascii_wctomb>:
 8006db8:	4603      	mov	r3, r0
 8006dba:	4608      	mov	r0, r1
 8006dbc:	b141      	cbz	r1, 8006dd0 <__ascii_wctomb+0x18>
 8006dbe:	2aff      	cmp	r2, #255	@ 0xff
 8006dc0:	d904      	bls.n	8006dcc <__ascii_wctomb+0x14>
 8006dc2:	228a      	movs	r2, #138	@ 0x8a
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dca:	4770      	bx	lr
 8006dcc:	700a      	strb	r2, [r1, #0]
 8006dce:	2001      	movs	r0, #1
 8006dd0:	4770      	bx	lr
	...

08006dd4 <fiprintf>:
 8006dd4:	b40e      	push	{r1, r2, r3}
 8006dd6:	b503      	push	{r0, r1, lr}
 8006dd8:	4601      	mov	r1, r0
 8006dda:	ab03      	add	r3, sp, #12
 8006ddc:	4805      	ldr	r0, [pc, #20]	@ (8006df4 <fiprintf+0x20>)
 8006dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de2:	6800      	ldr	r0, [r0, #0]
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	f000 f837 	bl	8006e58 <_vfiprintf_r>
 8006dea:	b002      	add	sp, #8
 8006dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df0:	b003      	add	sp, #12
 8006df2:	4770      	bx	lr
 8006df4:	20000020 	.word	0x20000020

08006df8 <abort>:
 8006df8:	b508      	push	{r3, lr}
 8006dfa:	2006      	movs	r0, #6
 8006dfc:	f000 f96c 	bl	80070d8 <raise>
 8006e00:	2001      	movs	r0, #1
 8006e02:	f7fa fafd 	bl	8001400 <_exit>

08006e06 <__sfputc_r>:
 8006e06:	6893      	ldr	r3, [r2, #8]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	b410      	push	{r4}
 8006e0e:	6093      	str	r3, [r2, #8]
 8006e10:	da08      	bge.n	8006e24 <__sfputc_r+0x1e>
 8006e12:	6994      	ldr	r4, [r2, #24]
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	db01      	blt.n	8006e1c <__sfputc_r+0x16>
 8006e18:	290a      	cmp	r1, #10
 8006e1a:	d103      	bne.n	8006e24 <__sfputc_r+0x1e>
 8006e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e20:	f7fe ba51 	b.w	80052c6 <__swbuf_r>
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	1c58      	adds	r0, r3, #1
 8006e28:	6010      	str	r0, [r2, #0]
 8006e2a:	7019      	strb	r1, [r3, #0]
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <__sfputs_r>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	4606      	mov	r6, r0
 8006e38:	460f      	mov	r7, r1
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	18d5      	adds	r5, r2, r3
 8006e3e:	42ac      	cmp	r4, r5
 8006e40:	d101      	bne.n	8006e46 <__sfputs_r+0x12>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e007      	b.n	8006e56 <__sfputs_r+0x22>
 8006e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4a:	463a      	mov	r2, r7
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff ffda 	bl	8006e06 <__sfputc_r>
 8006e52:	1c43      	adds	r3, r0, #1
 8006e54:	d1f3      	bne.n	8006e3e <__sfputs_r+0xa>
 8006e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e58 <_vfiprintf_r>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	460d      	mov	r5, r1
 8006e5e:	b09d      	sub	sp, #116	@ 0x74
 8006e60:	4614      	mov	r4, r2
 8006e62:	4698      	mov	r8, r3
 8006e64:	4606      	mov	r6, r0
 8006e66:	b118      	cbz	r0, 8006e70 <_vfiprintf_r+0x18>
 8006e68:	6a03      	ldr	r3, [r0, #32]
 8006e6a:	b90b      	cbnz	r3, 8006e70 <_vfiprintf_r+0x18>
 8006e6c:	f7fe f954 	bl	8005118 <__sinit>
 8006e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e72:	07d9      	lsls	r1, r3, #31
 8006e74:	d405      	bmi.n	8006e82 <_vfiprintf_r+0x2a>
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	059a      	lsls	r2, r3, #22
 8006e7a:	d402      	bmi.n	8006e82 <_vfiprintf_r+0x2a>
 8006e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e7e:	f7fe fb34 	bl	80054ea <__retarget_lock_acquire_recursive>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	071b      	lsls	r3, r3, #28
 8006e86:	d501      	bpl.n	8006e8c <_vfiprintf_r+0x34>
 8006e88:	692b      	ldr	r3, [r5, #16]
 8006e8a:	b99b      	cbnz	r3, 8006eb4 <_vfiprintf_r+0x5c>
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7fe fa58 	bl	8005344 <__swsetup_r>
 8006e94:	b170      	cbz	r0, 8006eb4 <_vfiprintf_r+0x5c>
 8006e96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e98:	07dc      	lsls	r4, r3, #31
 8006e9a:	d504      	bpl.n	8006ea6 <_vfiprintf_r+0x4e>
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	b01d      	add	sp, #116	@ 0x74
 8006ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	0598      	lsls	r0, r3, #22
 8006eaa:	d4f7      	bmi.n	8006e9c <_vfiprintf_r+0x44>
 8006eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eae:	f7fe fb1d 	bl	80054ec <__retarget_lock_release_recursive>
 8006eb2:	e7f3      	b.n	8006e9c <_vfiprintf_r+0x44>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ec2:	2330      	movs	r3, #48	@ 0x30
 8006ec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007074 <_vfiprintf_r+0x21c>
 8006ec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ecc:	f04f 0901 	mov.w	r9, #1
 8006ed0:	4623      	mov	r3, r4
 8006ed2:	469a      	mov	sl, r3
 8006ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed8:	b10a      	cbz	r2, 8006ede <_vfiprintf_r+0x86>
 8006eda:	2a25      	cmp	r2, #37	@ 0x25
 8006edc:	d1f9      	bne.n	8006ed2 <_vfiprintf_r+0x7a>
 8006ede:	ebba 0b04 	subs.w	fp, sl, r4
 8006ee2:	d00b      	beq.n	8006efc <_vfiprintf_r+0xa4>
 8006ee4:	465b      	mov	r3, fp
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7ff ffa2 	bl	8006e34 <__sfputs_r>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f000 80a7 	beq.w	8007044 <_vfiprintf_r+0x1ec>
 8006ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ef8:	445a      	add	r2, fp
 8006efa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 809f 	beq.w	8007044 <_vfiprintf_r+0x1ec>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f10:	f10a 0a01 	add.w	sl, sl, #1
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f1e:	4654      	mov	r4, sl
 8006f20:	2205      	movs	r2, #5
 8006f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f26:	4853      	ldr	r0, [pc, #332]	@ (8007074 <_vfiprintf_r+0x21c>)
 8006f28:	f7f9 f97a 	bl	8000220 <memchr>
 8006f2c:	9a04      	ldr	r2, [sp, #16]
 8006f2e:	b9d8      	cbnz	r0, 8006f68 <_vfiprintf_r+0x110>
 8006f30:	06d1      	lsls	r1, r2, #27
 8006f32:	bf44      	itt	mi
 8006f34:	2320      	movmi	r3, #32
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f3a:	0713      	lsls	r3, r2, #28
 8006f3c:	bf44      	itt	mi
 8006f3e:	232b      	movmi	r3, #43	@ 0x2b
 8006f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f44:	f89a 3000 	ldrb.w	r3, [sl]
 8006f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f4a:	d015      	beq.n	8006f78 <_vfiprintf_r+0x120>
 8006f4c:	9a07      	ldr	r2, [sp, #28]
 8006f4e:	4654      	mov	r4, sl
 8006f50:	2000      	movs	r0, #0
 8006f52:	f04f 0c0a 	mov.w	ip, #10
 8006f56:	4621      	mov	r1, r4
 8006f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f5c:	3b30      	subs	r3, #48	@ 0x30
 8006f5e:	2b09      	cmp	r3, #9
 8006f60:	d94b      	bls.n	8006ffa <_vfiprintf_r+0x1a2>
 8006f62:	b1b0      	cbz	r0, 8006f92 <_vfiprintf_r+0x13a>
 8006f64:	9207      	str	r2, [sp, #28]
 8006f66:	e014      	b.n	8006f92 <_vfiprintf_r+0x13a>
 8006f68:	eba0 0308 	sub.w	r3, r0, r8
 8006f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f70:	4313      	orrs	r3, r2
 8006f72:	9304      	str	r3, [sp, #16]
 8006f74:	46a2      	mov	sl, r4
 8006f76:	e7d2      	b.n	8006f1e <_vfiprintf_r+0xc6>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	1d19      	adds	r1, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	9103      	str	r1, [sp, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bfbb      	ittet	lt
 8006f84:	425b      	neglt	r3, r3
 8006f86:	f042 0202 	orrlt.w	r2, r2, #2
 8006f8a:	9307      	strge	r3, [sp, #28]
 8006f8c:	9307      	strlt	r3, [sp, #28]
 8006f8e:	bfb8      	it	lt
 8006f90:	9204      	strlt	r2, [sp, #16]
 8006f92:	7823      	ldrb	r3, [r4, #0]
 8006f94:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f96:	d10a      	bne.n	8006fae <_vfiprintf_r+0x156>
 8006f98:	7863      	ldrb	r3, [r4, #1]
 8006f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f9c:	d132      	bne.n	8007004 <_vfiprintf_r+0x1ac>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	1d1a      	adds	r2, r3, #4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	9203      	str	r2, [sp, #12]
 8006fa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006faa:	3402      	adds	r4, #2
 8006fac:	9305      	str	r3, [sp, #20]
 8006fae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007084 <_vfiprintf_r+0x22c>
 8006fb2:	7821      	ldrb	r1, [r4, #0]
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	f7f9 f932 	bl	8000220 <memchr>
 8006fbc:	b138      	cbz	r0, 8006fce <_vfiprintf_r+0x176>
 8006fbe:	9b04      	ldr	r3, [sp, #16]
 8006fc0:	eba0 000a 	sub.w	r0, r0, sl
 8006fc4:	2240      	movs	r2, #64	@ 0x40
 8006fc6:	4082      	lsls	r2, r0
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	3401      	adds	r4, #1
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd2:	4829      	ldr	r0, [pc, #164]	@ (8007078 <_vfiprintf_r+0x220>)
 8006fd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fd8:	2206      	movs	r2, #6
 8006fda:	f7f9 f921 	bl	8000220 <memchr>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d03f      	beq.n	8007062 <_vfiprintf_r+0x20a>
 8006fe2:	4b26      	ldr	r3, [pc, #152]	@ (800707c <_vfiprintf_r+0x224>)
 8006fe4:	bb1b      	cbnz	r3, 800702e <_vfiprintf_r+0x1d6>
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	3307      	adds	r3, #7
 8006fea:	f023 0307 	bic.w	r3, r3, #7
 8006fee:	3308      	adds	r3, #8
 8006ff0:	9303      	str	r3, [sp, #12]
 8006ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff4:	443b      	add	r3, r7
 8006ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff8:	e76a      	b.n	8006ed0 <_vfiprintf_r+0x78>
 8006ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ffe:	460c      	mov	r4, r1
 8007000:	2001      	movs	r0, #1
 8007002:	e7a8      	b.n	8006f56 <_vfiprintf_r+0xfe>
 8007004:	2300      	movs	r3, #0
 8007006:	3401      	adds	r4, #1
 8007008:	9305      	str	r3, [sp, #20]
 800700a:	4619      	mov	r1, r3
 800700c:	f04f 0c0a 	mov.w	ip, #10
 8007010:	4620      	mov	r0, r4
 8007012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007016:	3a30      	subs	r2, #48	@ 0x30
 8007018:	2a09      	cmp	r2, #9
 800701a:	d903      	bls.n	8007024 <_vfiprintf_r+0x1cc>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0c6      	beq.n	8006fae <_vfiprintf_r+0x156>
 8007020:	9105      	str	r1, [sp, #20]
 8007022:	e7c4      	b.n	8006fae <_vfiprintf_r+0x156>
 8007024:	fb0c 2101 	mla	r1, ip, r1, r2
 8007028:	4604      	mov	r4, r0
 800702a:	2301      	movs	r3, #1
 800702c:	e7f0      	b.n	8007010 <_vfiprintf_r+0x1b8>
 800702e:	ab03      	add	r3, sp, #12
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	462a      	mov	r2, r5
 8007034:	4b12      	ldr	r3, [pc, #72]	@ (8007080 <_vfiprintf_r+0x228>)
 8007036:	a904      	add	r1, sp, #16
 8007038:	4630      	mov	r0, r6
 800703a:	f7fd fc2b 	bl	8004894 <_printf_float>
 800703e:	4607      	mov	r7, r0
 8007040:	1c78      	adds	r0, r7, #1
 8007042:	d1d6      	bne.n	8006ff2 <_vfiprintf_r+0x19a>
 8007044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007046:	07d9      	lsls	r1, r3, #31
 8007048:	d405      	bmi.n	8007056 <_vfiprintf_r+0x1fe>
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	059a      	lsls	r2, r3, #22
 800704e:	d402      	bmi.n	8007056 <_vfiprintf_r+0x1fe>
 8007050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007052:	f7fe fa4b 	bl	80054ec <__retarget_lock_release_recursive>
 8007056:	89ab      	ldrh	r3, [r5, #12]
 8007058:	065b      	lsls	r3, r3, #25
 800705a:	f53f af1f 	bmi.w	8006e9c <_vfiprintf_r+0x44>
 800705e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007060:	e71e      	b.n	8006ea0 <_vfiprintf_r+0x48>
 8007062:	ab03      	add	r3, sp, #12
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	462a      	mov	r2, r5
 8007068:	4b05      	ldr	r3, [pc, #20]	@ (8007080 <_vfiprintf_r+0x228>)
 800706a:	a904      	add	r1, sp, #16
 800706c:	4630      	mov	r0, r6
 800706e:	f7fd fea9 	bl	8004dc4 <_printf_i>
 8007072:	e7e4      	b.n	800703e <_vfiprintf_r+0x1e6>
 8007074:	08007340 	.word	0x08007340
 8007078:	0800734a 	.word	0x0800734a
 800707c:	08004895 	.word	0x08004895
 8007080:	08006e35 	.word	0x08006e35
 8007084:	08007346 	.word	0x08007346

08007088 <_raise_r>:
 8007088:	291f      	cmp	r1, #31
 800708a:	b538      	push	{r3, r4, r5, lr}
 800708c:	4605      	mov	r5, r0
 800708e:	460c      	mov	r4, r1
 8007090:	d904      	bls.n	800709c <_raise_r+0x14>
 8007092:	2316      	movs	r3, #22
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	f04f 30ff 	mov.w	r0, #4294967295
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800709e:	b112      	cbz	r2, 80070a6 <_raise_r+0x1e>
 80070a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070a4:	b94b      	cbnz	r3, 80070ba <_raise_r+0x32>
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 f830 	bl	800710c <_getpid_r>
 80070ac:	4622      	mov	r2, r4
 80070ae:	4601      	mov	r1, r0
 80070b0:	4628      	mov	r0, r5
 80070b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b6:	f000 b817 	b.w	80070e8 <_kill_r>
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d00a      	beq.n	80070d4 <_raise_r+0x4c>
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	d103      	bne.n	80070ca <_raise_r+0x42>
 80070c2:	2316      	movs	r3, #22
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	2001      	movs	r0, #1
 80070c8:	e7e7      	b.n	800709a <_raise_r+0x12>
 80070ca:	2100      	movs	r1, #0
 80070cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070d0:	4620      	mov	r0, r4
 80070d2:	4798      	blx	r3
 80070d4:	2000      	movs	r0, #0
 80070d6:	e7e0      	b.n	800709a <_raise_r+0x12>

080070d8 <raise>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	@ (80070e4 <raise+0xc>)
 80070da:	4601      	mov	r1, r0
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	f7ff bfd3 	b.w	8007088 <_raise_r>
 80070e2:	bf00      	nop
 80070e4:	20000020 	.word	0x20000020

080070e8 <_kill_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	@ (8007108 <_kill_r+0x20>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	f7fa f973 	bl	80013e0 <_kill>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	d102      	bne.n	8007104 <_kill_r+0x1c>
 80070fe:	682b      	ldr	r3, [r5, #0]
 8007100:	b103      	cbz	r3, 8007104 <_kill_r+0x1c>
 8007102:	6023      	str	r3, [r4, #0]
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	20000488 	.word	0x20000488

0800710c <_getpid_r>:
 800710c:	f7fa b960 	b.w	80013d0 <_getpid>

08007110 <_init>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	bf00      	nop
 8007114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007116:	bc08      	pop	{r3}
 8007118:	469e      	mov	lr, r3
 800711a:	4770      	bx	lr

0800711c <_fini>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	bf00      	nop
 8007120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007122:	bc08      	pop	{r3}
 8007124:	469e      	mov	lr, r3
 8007126:	4770      	bx	lr
