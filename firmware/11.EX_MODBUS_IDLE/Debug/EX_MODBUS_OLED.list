
EX_MODBUS_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  08009bb0  08009bb0  0000abb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7ac  0800a7ac  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a7ac  0800a7ac  0000b7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7b4  0800a7b4  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7b8  0800a7b8  0000b7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a7bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  200001d4  0800a990  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  0800a990  0000c948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173af  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003721  00000000  00000000  000235b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00026cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e07  00000000  00000000  00027f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020744  00000000  00000000  00028d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b39  00000000  00000000  000494ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3a0c  00000000  00000000  00060fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001249f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d98  00000000  00000000  00124a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0012a7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009b94 	.word	0x08009b94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009b94 	.word	0x08009b94

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f2a:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <MX_FDCAN1_Init+0x8c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f36:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f3a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f62:	220d      	movs	r2, #13
 8000f64:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f68:	2206      	movs	r2, #6
 8000f6a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f98:	f001 fc2e 	bl	80027f8 <HAL_FDCAN_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fa2:	f000 fb3f 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f0 	.word	0x200001f0
 8000fb0:	40006400 	.word	0x40006400

08000fb4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09a      	sub	sp, #104	@ 0x68
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2244      	movs	r2, #68	@ 0x44
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fda1 	bl	8007b1c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <HAL_FDCAN_MspInit+0xcc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d148      	bne.n	8001076 <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fee:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 ffcb 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001000:	f000 fb10 	bl	8001624 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001034:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001038:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001046:	2309      	movs	r3, #9
 8001048:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104e:	4619      	mov	r1, r3
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <HAL_FDCAN_MspInit+0xd4>)
 8001052:	f001 ff29 	bl	8002ea8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2015      	movs	r0, #21
 800105c:	f001 fad7 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001060:	2015      	movs	r0, #21
 8001062:	f001 faee 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2016      	movs	r0, #22
 800106c:	f001 facf 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001070:	2016      	movs	r0, #22
 8001072:	f001 fae6 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3768      	adds	r7, #104	@ 0x68
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40006400 	.word	0x40006400
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a2:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a29      	ldr	r2, [pc, #164]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f0:	4817      	ldr	r0, [pc, #92]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010f2:	f002 f85b 	bl	80031ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f002 f854 	bl	80031ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <MX_GPIO_Init+0xc4>)
 800111e:	f001 fec3 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8001122:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113e:	f001 feb3 	bl	8002ea8 <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400

08001154 <__io_putchar>:
/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// printf 함수 리디렉션
int __io_putchar(int ch) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    (void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	2364      	movs	r3, #100	@ 0x64
 8001160:	2201      	movs	r2, #1
 8001162:	4804      	ldr	r0, [pc, #16]	@ (8001174 <__io_putchar+0x20>)
 8001164:	f003 fcda 	bl	8004b1c <HAL_UART_Transmit>
    return ch;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200003f4 	.word	0x200003f4

08001178 <calcCRC16>:

// ================= Modbus RTU 관련 ==========================
/* Modbus RTU CRC16 계산 함수 */
static uint16_t calcCRC16(uint8_t *data, uint16_t length)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF; // 1111 1111 1111 1111
 8001184:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001188:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) // 들어온 모든 데이터에 대해..
 800118a:	2300      	movs	r3, #0
 800118c:	81bb      	strh	r3, [r7, #12]
 800118e:	e022      	b.n	80011d6 <calcCRC16+0x5e>
    {
        crc ^= data[i]; // 0xFFFF 와 XOR 연산
 8001190:	89bb      	ldrh	r3, [r7, #12]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	4053      	eors	r3, r2
 800119e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) // 모든 비트에 대해 ..
 80011a0:	2300      	movs	r3, #0
 80011a2:	72fb      	strb	r3, [r7, #11]
 80011a4:	e011      	b.n	80011ca <calcCRC16+0x52>
        {
            if (crc & 0x0001) // LSB가 1이라면..
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <calcCRC16+0x46>
            {
                crc = (crc >> 1) ^ 0xA001; // 오른쪽 쉬프트 한칸 -> 0xA001과 XOR연산
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <calcCRC16+0x74>)
 80011b8:	4053      	eors	r3, r2
 80011ba:	81fb      	strh	r3, [r7, #14]
 80011bc:	e002      	b.n	80011c4 <calcCRC16+0x4c>
            }
            else
            {
                crc = crc >> 1; // LSB가 0이라면... 쉬프트만...
 80011be:	89fb      	ldrh	r3, [r7, #14]
 80011c0:	085b      	lsrs	r3, r3, #1
 80011c2:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) // 모든 비트에 대해 ..
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	3301      	adds	r3, #1
 80011c8:	72fb      	strb	r3, [r7, #11]
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	d9ea      	bls.n	80011a6 <calcCRC16+0x2e>
    for (uint16_t i = 0; i < length; i++) // 들어온 모든 데이터에 대해..
 80011d0:	89bb      	ldrh	r3, [r7, #12]
 80011d2:	3301      	adds	r3, #1
 80011d4:	81bb      	strh	r3, [r7, #12]
 80011d6:	89ba      	ldrh	r2, [r7, #12]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3d8      	bcc.n	8001190 <calcCRC16+0x18>
            }
        }
    }
    return crc;
 80011de:	89fb      	ldrh	r3, [r7, #14]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	ffffa001 	.word	0xffffa001

080011f0 <modbusRequset>:

/* Modbus RTU 요청 전송 */
HAL_StatusTypeDef modbusRequset(uint8_t slave_addr, uint8_t func_code, uint16_t start_addr, uint16_t reg_count)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4604      	mov	r4, r0
 80011f8:	4608      	mov	r0, r1
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4623      	mov	r3, r4
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	4603      	mov	r3, r0
 8001204:	71bb      	strb	r3, [r7, #6]
 8001206:	460b      	mov	r3, r1
 8001208:	80bb      	strh	r3, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	807b      	strh	r3, [r7, #2]
    uint8_t request_frame[MODBUS_REQUEST_SIZE];
    uint16_t crc;

    // 프레임 구성
    request_frame[0] = slave_addr;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	733b      	strb	r3, [r7, #12]
    request_frame[1] = func_code;
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	737b      	strb	r3, [r7, #13]
    request_frame[2] = (start_addr >> 8) & 0xFF;    // 시작 주소 상위 바이트
 8001216:	88bb      	ldrh	r3, [r7, #4]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	b29b      	uxth	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	73bb      	strb	r3, [r7, #14]
    request_frame[3] = start_addr & 0xFF;           // 시작 주소 하위 바이트
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	73fb      	strb	r3, [r7, #15]
    request_frame[4] = (reg_count >> 8) & 0xFF;     // 레지스터 개수 상위 바이트
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	743b      	strb	r3, [r7, #16]
    request_frame[5] = reg_count & 0xFF;            // 레지스터 개수 하위 바이트
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	747b      	strb	r3, [r7, #17]

    // CRC 계산 (첫 6바이트에 대해)
    crc = calcCRC16(request_frame, 6);
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2106      	movs	r1, #6
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff9b 	bl	8001178 <calcCRC16>
 8001242:	4603      	mov	r3, r0
 8001244:	82fb      	strh	r3, [r7, #22]

    request_frame[6] = crc & 0xFF;          // CRC 하위 바이트 (리틀엔디안)
 8001246:	8afb      	ldrh	r3, [r7, #22]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	74bb      	strb	r3, [r7, #18]
    request_frame[7] = (crc >> 8) & 0xFF;   // CRC 상위 바이트
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	74fb      	strb	r3, [r7, #19]

    // UART3(RS485)로 전송
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, request_frame, MODBUS_REQUEST_SIZE, 1000);
 8001256:	f107 010c 	add.w	r1, r7, #12
 800125a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125e:	2208      	movs	r2, #8
 8001260:	4808      	ldr	r0, [pc, #32]	@ (8001284 <modbusRequset+0x94>)
 8001262:	f003 fc5b 	bl	8004b1c <HAL_UART_Transmit>
 8001266:	4603      	mov	r3, r0
 8001268:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 800126a:	7d7b      	ldrb	r3, [r7, #21]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <modbusRequset+0x8a>
    {
    	printf("Modbus Request Failed: Staㄴtus=%d\r\n", status);
 8001270:	7d7b      	ldrb	r3, [r7, #21]
 8001272:	4619      	mov	r1, r3
 8001274:	4804      	ldr	r0, [pc, #16]	@ (8001288 <modbusRequset+0x98>)
 8001276:	f006 fad3 	bl	8007820 <iprintf>
    }
    return status;
 800127a:	7d7b      	ldrb	r3, [r7, #21]
}
 800127c:	4618      	mov	r0, r3
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	20000488 	.word	0x20000488
 8001288:	08009bb0 	.word	0x08009bb0

0800128c <modbusResponse>:

/* Modbus RTU 응답 처리 */
HAL_StatusTypeDef modbusResponse(uint8_t* response_data, uint16_t length)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
    if (length < 5) return HAL_ERROR;
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	2b04      	cmp	r3, #4
 800129c:	d801      	bhi.n	80012a2 <modbusResponse+0x16>
 800129e:	2301      	movs	r3, #1
 80012a0:	e025      	b.n	80012ee <modbusResponse+0x62>

    // CRC 계산
    uint16_t calc_crc = calcCRC16(response_data, length - 2);
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff64 	bl	8001178 <calcCRC16>
 80012b0:	4603      	mov	r3, r0
 80012b2:	81fb      	strh	r3, [r7, #14]

    // Modbus RTU는 리틀엔디안 표준 사용
    uint16_t recv_crc = response_data[length-2] | (response_data[length-1] << 8);
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	3b02      	subs	r3, #2
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b21a      	sxth	r2, r3
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	81bb      	strh	r3, [r7, #12]

    // 슬레이브 주소 확인
    Modbus_Response_t* response = (Modbus_Response_t*)response_data;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60bb      	str	r3, [r7, #8]
    if (response->slave_addr != MODBUS_SLAVE_ADDR) {
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <modbusResponse+0x5a>
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e003      	b.n	80012ee <modbusResponse+0x62>
    }

    responseSensorData(response);
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f000 f810 	bl	800130c <responseSensorData>
    return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <requestSensorData>:


/* 풍량센서 데이터 요청 */
void requestSensorData(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
    // 풍속과 온도 데이터 요청 (위에서 define했던 값 세개!!! (레지스터는 두개))
	modbusRequset(MODBUS_SLAVE_ADDR, MODBUS_FUNC_READ_HOLD, WIND_SPEED_REG, 2);
 80012fa:	2302      	movs	r3, #2
 80012fc:	2200      	movs	r2, #0
 80012fe:	2103      	movs	r1, #3
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff ff75 	bl	80011f0 <modbusRequset>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <responseSensorData>:


/* 풍량센서 응답 데이터 파싱 */
void responseSensorData(Modbus_Response_t* response)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    if (response->function_code == MODBUS_FUNC_READ_HOLD && response->byte_count >= 4)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d12c      	bne.n	8001376 <responseSensorData+0x6a>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d928      	bls.n	8001376 <responseSensorData+0x6a>
    {
        // 풍속 데이터 (첫 번째 레지스터)
        uint16_t wind_raw = (response->data[0] << 8) | response->data[1];
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	78db      	ldrb	r3, [r3, #3]
 8001328:	b21b      	sxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	81fb      	strh	r3, [r7, #14]
        sensor_data.wind_speed = wind_raw * 0.1f; // 0.1 m/s 단위
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001344:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001380 <responseSensorData+0x74>
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <responseSensorData+0x78>)
 800134e:	edc3 7a00 	vstr	s15, [r3]
        sensor_data.timestamp = HAL_GetTick();
 8001352:	f001 f853 	bl	80023fc <HAL_GetTick>
 8001356:	4603      	mov	r3, r0
 8001358:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <responseSensorData+0x78>)
 800135a:	6053      	str	r3, [r2, #4]
        sensor_data.valid = 1;
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <responseSensorData+0x78>)
 800135e:	2201      	movs	r2, #1
 8001360:	721a      	strb	r2, [r3, #8]
        printf("Wind Speed: %.1f m/s",sensor_data.wind_speed);
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <responseSensorData+0x78>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f916 	bl	8000598 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <responseSensorData+0x7c>)
 8001372:	f006 fa55 	bl	8007820 <iprintf>
    }
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	3dcccccd 	.word	0x3dcccccd
 8001384:	20000254 	.word	0x20000254
 8001388:	08009bd8 	.word	0x08009bd8

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001392:	f000 ffce 	bl	8002332 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 8001396:	f000 f8b9 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139a:	f7ff fe77 	bl	800108c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800139e:	f7ff fdc1 	bl	8000f24 <MX_FDCAN1_Init>
  MX_USB_PCD_Init();
 80013a2:	f000 ff41 	bl	8002228 <MX_USB_PCD_Init>
  MX_SPI3_Init();
 80013a6:	f000 fc25 	bl	8001bf4 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80013aa:	f000 fe45 	bl	8002038 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80013ae:	f000 fdf7 	bl	8001fa0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Modbus RTU 수신 시작2
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	4946      	ldr	r1, [pc, #280]	@ (80014d0 <main+0x144>)
 80013b6:	4847      	ldr	r0, [pc, #284]	@ (80014d4 <main+0x148>)
 80013b8:	f003 fc3e 	bl	8004c38 <HAL_UART_Receive_IT>
  OLED_init();
 80013bc:	f000 f9b6 	bl	800172c <OLED_init>
  OLED_fill(0);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 fa8d 	bl	80018e0 <OLED_fill>
  oled_drawString(0, 0, "Modbus Monitor", &font_07x10, 15);      // ✨ 제목 변경
 80013c6:	230f      	movs	r3, #15
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <main+0x14c>)
 80013cc:	4a43      	ldr	r2, [pc, #268]	@ (80014dc <main+0x150>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 fbd9 	bl	8001b88 <oled_drawString>
  oled_drawString(0, 20, "Wind Speed:", &font_07x10, 15);         // CAN 수신용
 80013d6:	230f      	movs	r3, #15
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <main+0x14c>)
 80013dc:	4a40      	ldr	r2, [pc, #256]	@ (80014e0 <main+0x154>)
 80013de:	2114      	movs	r1, #20
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 fbd1 	bl	8001b88 <oled_drawString>
  printf("Modbus RTU Bridge Started!\r\n");
 80013e6:	483f      	ldr	r0, [pc, #252]	@ (80014e4 <main+0x158>)
 80013e8:	f006 fa82 	bl	80078f0 <puts>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t last_request_time = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]

  while (1) {

	     // 0.5초마다 센서 데이터 요청
	     if (HAL_GetTick() - last_request_time >= 500)
 80013f0:	f001 f804 	bl	80023fc <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013fe:	d30f      	bcc.n	8001420 <main+0x94>
	     {
	         // 이전 데이터 정리
	         modbus_rx_index = 0;
 8001400:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <main+0x15c>)
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
	         modbus_frame_ready = 0;
 8001406:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <main+0x160>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]

	         // 센서 데이터 요청
	         requestSensorData();
 800140c:	f7ff ff73 	bl	80012f6 <requestSensorData>

	         // 타이밍 리셋
	         last_request_time = HAL_GetTick();
 8001410:	f000 fff4 	bl	80023fc <HAL_GetTick>
 8001414:	6078      	str	r0, [r7, #4]
	         last_rx_time = HAL_GetTick();
 8001416:	f000 fff1 	bl	80023fc <HAL_GetTick>
 800141a:	4603      	mov	r3, r0
 800141c:	4a34      	ldr	r2, [pc, #208]	@ (80014f0 <main+0x164>)
 800141e:	6013      	str	r3, [r2, #0]
	     }

	     // 50ms 동안 새로운 바이트가 오지 않으면 프레임 완료로 판단
	     if (modbus_rx_index > 0 && !modbus_frame_ready &&
 8001420:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <main+0x15c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00e      	beq.n	8001446 <main+0xba>
 8001428:	4b30      	ldr	r3, [pc, #192]	@ (80014ec <main+0x160>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10a      	bne.n	8001446 <main+0xba>
	         (HAL_GetTick() - last_rx_time > 50))
 8001430:	f000 ffe4 	bl	80023fc <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <main+0x164>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1ad3      	subs	r3, r2, r3
	     if (modbus_rx_index > 0 && !modbus_frame_ready &&
 800143c:	2b32      	cmp	r3, #50	@ 0x32
 800143e:	d902      	bls.n	8001446 <main+0xba>
	     {
	         modbus_frame_ready = 1; // 프레임 완료 플래그 설정
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <main+0x160>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
	     }

	     // Modbus 응답 처리
	     if (modbus_frame_ready)
 8001446:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <main+0x160>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01c      	beq.n	8001488 <main+0xfc>
	     {

	         // 최소 길이 체크 (5바이트 이상, CRC를 제외한 나머지 프레임 구성요소가 5바이트)
	         if (modbus_rx_index >= 5)
 800144e:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <main+0x15c>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	2b04      	cmp	r3, #4
 8001454:	d906      	bls.n	8001464 <main+0xd8>
	         {
	             modbusResponse(modbus_rx_buffer, modbus_rx_index);
 8001456:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <main+0x15c>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	4825      	ldr	r0, [pc, #148]	@ (80014f4 <main+0x168>)
 800145e:	f7ff ff15 	bl	800128c <modbusResponse>
 8001462:	e005      	b.n	8001470 <main+0xe4>
	         }
	         else
	         {
	             printf("[ERROR] Frame too short: %d bytes\r\n", modbus_rx_index);
 8001464:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <main+0x15c>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	4823      	ldr	r0, [pc, #140]	@ (80014f8 <main+0x16c>)
 800146c:	f006 f9d8 	bl	8007820 <iprintf>
	         }
	         // 버퍼 리셋
	         modbus_rx_index = 0;
 8001470:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <main+0x15c>)
 8001472:	2200      	movs	r2, #0
 8001474:	801a      	strh	r2, [r3, #0]
	         modbus_frame_ready = 0;
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <main+0x160>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
	         memset(modbus_rx_buffer, 0, sizeof(modbus_rx_buffer));
 800147c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001480:	2100      	movs	r1, #0
 8001482:	481c      	ldr	r0, [pc, #112]	@ (80014f4 <main+0x168>)
 8001484:	f006 fb4a 	bl	8007b1c <memset>
	     }
	     // OLED 업데이트 (기존과 동일)
	     if (sensor_data.valid)
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <main+0x170>)
 800148a:	7a1b      	ldrb	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d016      	beq.n	80014be <main+0x132>
	     {
	         snprintf(buf, sizeof(buf), "%.1f m/s", sensor_data.wind_speed);
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <main+0x170>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f87f 	bl	8000598 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	e9cd 2300 	strd	r2, r3, [sp]
 80014a2:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <main+0x174>)
 80014a4:	2120      	movs	r1, #32
 80014a6:	4817      	ldr	r0, [pc, #92]	@ (8001504 <main+0x178>)
 80014a8:	f006 fa2a 	bl	8007900 <sniprintf>
	         oled_drawString(80, 20, buf, &font_07x10, 15);
 80014ac:	230f      	movs	r3, #15
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <main+0x14c>)
 80014b2:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <main+0x178>)
 80014b4:	2114      	movs	r1, #20
 80014b6:	2050      	movs	r0, #80	@ 0x50
 80014b8:	f000 fb66 	bl	8001b88 <oled_drawString>
 80014bc:	e798      	b.n	80013f0 <main+0x64>
	     }
	     else
	     {
	         oled_drawString(80, 20, "WAIT...", &font_07x10, 15); // 유효한 센서값이 들어오지 않을때 출력
 80014be:	230f      	movs	r3, #15
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <main+0x14c>)
 80014c4:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <main+0x17c>)
 80014c6:	2114      	movs	r1, #20
 80014c8:	2050      	movs	r0, #80	@ 0x50
 80014ca:	f000 fb5d 	bl	8001b88 <oled_drawString>
	     if (HAL_GetTick() - last_request_time >= 500)
 80014ce:	e78f      	b.n	80013f0 <main+0x64>
 80014d0:	20000363 	.word	0x20000363
 80014d4:	20000488 	.word	0x20000488
 80014d8:	0800a3f0 	.word	0x0800a3f0
 80014dc:	08009bf0 	.word	0x08009bf0
 80014e0:	08009c00 	.word	0x08009c00
 80014e4:	08009c0c 	.word	0x08009c0c
 80014e8:	20000360 	.word	0x20000360
 80014ec:	20000362 	.word	0x20000362
 80014f0:	20000384 	.word	0x20000384
 80014f4:	20000260 	.word	0x20000260
 80014f8:	08009c28 	.word	0x08009c28
 80014fc:	20000254 	.word	0x20000254
 8001500:	08009c4c 	.word	0x08009c4c
 8001504:	20000364 	.word	0x20000364
 8001508:	08009c58 	.word	0x08009c58

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	@ 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	2238      	movs	r2, #56	@ 0x38
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f006 fafe 	bl	8007b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800152e:	2000      	movs	r0, #0
 8001530:	f001 ff4c 	bl	80033cc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001534:	2321      	movs	r3, #33	@ 0x21
 8001536:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001538:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800153c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800153e:	2301      	movs	r3, #1
 8001540:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	2302      	movs	r3, #2
 8001544:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001546:	2303      	movs	r3, #3
 8001548:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800154a:	2301      	movs	r3, #1
 800154c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800154e:	2328      	movs	r3, #40	@ 0x28
 8001550:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	4618      	mov	r0, r3
 8001564:	f001 ffe6 	bl	8003534 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800156e:	f000 f859 	bl	8001624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2303      	movs	r3, #3
 8001578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2104      	movs	r1, #4
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fae4 	bl	8003b58 <HAL_RCC_ClockConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001596:	f000 f845 	bl	8001624 <Error_Handler>
  }
}
 800159a:	bf00      	nop
 800159c:	3750      	adds	r7, #80	@ 0x50
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

// UART 수신 콜백 ( UART3 == 센서 )
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <HAL_UART_RxCpltCallback+0x60>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d121      	bne.n	80015fa <HAL_UART_RxCpltCallback+0x56>
    {
    	last_rx_time = 0;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <HAL_UART_RxCpltCallback+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        // 수신된 바이트 저장
        modbus_rx_buffer[modbus_rx_index++] = rx_byte;
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <HAL_UART_RxCpltCallback+0x68>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	b291      	uxth	r1, r2
 80015c4:	4a11      	ldr	r2, [pc, #68]	@ (800160c <HAL_UART_RxCpltCallback+0x68>)
 80015c6:	8011      	strh	r1, [r2, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_UART_RxCpltCallback+0x6c>)
 80015cc:	7819      	ldrb	r1, [r3, #0]
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_UART_RxCpltCallback+0x70>)
 80015d0:	5499      	strb	r1, [r3, r2]
        last_rx_time = HAL_GetTick();
 80015d2:	f000 ff13 	bl	80023fc <HAL_GetTick>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_UART_RxCpltCallback+0x64>)
 80015da:	6013      	str	r3, [r2, #0]


        if (modbus_rx_index >= sizeof(modbus_rx_buffer) - 1)
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_UART_RxCpltCallback+0x68>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80015e2:	d905      	bls.n	80015f0 <HAL_UART_RxCpltCallback+0x4c>
        {
            modbus_frame_ready = 1; // 프레임 받을 준비 완료
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <HAL_UART_RxCpltCallback+0x74>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
            printf("\r\n[DEBUG] Buffer full, frame ready\r\n");
 80015ea:	480c      	ldr	r0, [pc, #48]	@ (800161c <HAL_UART_RxCpltCallback+0x78>)
 80015ec:	f006 f980 	bl	80078f0 <puts>
        }

        // 다음 바이트 수신 준비
        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	4907      	ldr	r1, [pc, #28]	@ (8001610 <HAL_UART_RxCpltCallback+0x6c>)
 80015f4:	480a      	ldr	r0, [pc, #40]	@ (8001620 <HAL_UART_RxCpltCallback+0x7c>)
 80015f6:	f003 fb1f 	bl	8004c38 <HAL_UART_Receive_IT>
    }
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40004800 	.word	0x40004800
 8001608:	20000384 	.word	0x20000384
 800160c:	20000360 	.word	0x20000360
 8001610:	20000363 	.word	0x20000363
 8001614:	20000260 	.word	0x20000260
 8001618:	20000362 	.word	0x20000362
 800161c:	08009c60 	.word	0x08009c60
 8001620:	20000488 	.word	0x20000488

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <Error_Handler+0x8>

08001630 <OLED_write_cmd>:

/* ======== Static 함수들 ======== */

// OLED 명령어 모드!
static void OLED_write_cmd(uint8_t cmd)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  DC_CMD();     // DC핀을 LOW로 설정 (명령어 모드)
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001644:	f001 fdb2 	bl	80031ac <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800164e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001652:	f001 fdab 	bl	80031ac <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);  // SPI로 명령어 전송
 8001656:	1df9      	adds	r1, r7, #7
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	2201      	movs	r2, #1
 800165e:	4807      	ldr	r0, [pc, #28]	@ (800167c <OLED_write_cmd+0x4c>)
 8001660:	f002 ff31 	bl	80044c6 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166e:	f001 fd9d 	bl	80031ac <HAL_GPIO_WritePin>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000038c 	.word	0x2000038c

08001680 <OLED_write_data>:

// OLED 데이터 모드!
static void OLED_write_data(const uint8_t* p, uint16_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
  DC_DATA();    // DC핀을 HIGH로 설정 (데이터 모드)
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001696:	f001 fd89 	bl	80031ac <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f001 fd82 	bl	80031ac <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)p, len, HAL_MAX_DELAY);  // SPI로 데이터 전송
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4806      	ldr	r0, [pc, #24]	@ (80016cc <OLED_write_data+0x4c>)
 80016b2:	f002 ff08 	bl	80044c6 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f001 fd74 	bl	80031ac <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000038c 	.word	0x2000038c

080016d0 <OLED_set_window>:

// 화면의 특정 영역을 선택하는 함수 (그리기 영역 설정)
static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4604      	mov	r4, r0
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	4603      	mov	r3, r0
 80016e4:	71bb      	strb	r3, [r7, #6]
 80016e6:	460b      	mov	r3, r1
 80016e8:	717b      	strb	r3, [r7, #5]
 80016ea:	4613      	mov	r3, r2
 80016ec:	713b      	strb	r3, [r7, #4]
  // 열(가로) 범위 설정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 80016ee:	2015      	movs	r0, #21
 80016f0:	f7ff ff9e 	bl	8001630 <OLED_write_cmd>
  uint8_t col[2] = { col_start, col_end };
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	733b      	strb	r3, [r7, #12]
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ffbc 	bl	8001680 <OLED_write_data>

  // 행(세로) 범위 설정
  OLED_write_cmd(OLED_SETROWADDR);
 8001708:	2075      	movs	r0, #117	@ 0x75
 800170a:	f7ff ff91 	bl	8001630 <OLED_write_cmd>
  uint8_t row[2] = { row_start, row_end };
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	723b      	strb	r3, [r7, #8]
 8001712:	793b      	ldrb	r3, [r7, #4]
 8001714:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	2102      	movs	r1, #2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ffaf 	bl	8001680 <OLED_write_data>
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
	...

0800172c <OLED_init>:

/* ======== Public 함수들 ======== */

/* OLED 디스플레이를 초기화하는 함수 */
void OLED_init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
  // 1단계: 하드웨어 리셋
  RST_L();
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001738:	4867      	ldr	r0, [pc, #412]	@ (80018d8 <OLED_init+0x1ac>)
 800173a:	f001 fd37 	bl	80031ac <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 LOW로 10ms
 800173e:	200a      	movs	r0, #10
 8001740:	f000 fe68 	bl	8002414 <HAL_Delay>
  RST_H();
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800174a:	4863      	ldr	r0, [pc, #396]	@ (80018d8 <OLED_init+0x1ac>)
 800174c:	f001 fd2e 	bl	80031ac <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 HIGH로 10ms
 8001750:	200a      	movs	r0, #10
 8001752:	f000 fe5f 	bl	8002414 <HAL_Delay>

  // 2단계: 디스플레이 끄기
  OLED_write_cmd(OLED_DISPLAYOFF);
 8001756:	20ae      	movs	r0, #174	@ 0xae
 8001758:	f7ff ff6a 	bl	8001630 <OLED_write_cmd>

  // 3단계: 기본 설정들
  OLED_write_cmd(OLED_SETCOMMANDLOCK);  // 명령어 잠금 해제
 800175c:	20fd      	movs	r0, #253	@ 0xfd
 800175e:	f7ff ff67 	bl	8001630 <OLED_write_cmd>
  d = 0x12;
 8001762:	4b5e      	ldr	r3, [pc, #376]	@ (80018dc <OLED_init+0x1b0>)
 8001764:	2212      	movs	r2, #18
 8001766:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001768:	2101      	movs	r1, #1
 800176a:	485c      	ldr	r0, [pc, #368]	@ (80018dc <OLED_init+0x1b0>)
 800176c:	f7ff ff88 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_SETCLOCKDIVIDER); // 클럭 주파수 설정
 8001770:	20b3      	movs	r0, #179	@ 0xb3
 8001772:	f7ff ff5d 	bl	8001630 <OLED_write_cmd>
  d = 0x91;
 8001776:	4b59      	ldr	r3, [pc, #356]	@ (80018dc <OLED_init+0x1b0>)
 8001778:	2291      	movs	r2, #145	@ 0x91
 800177a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800177c:	2101      	movs	r1, #1
 800177e:	4857      	ldr	r0, [pc, #348]	@ (80018dc <OLED_init+0x1b0>)
 8001780:	f7ff ff7e 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_SETMUXRATIO);     // 화면 높이 설정 (64줄)
 8001784:	20ca      	movs	r0, #202	@ 0xca
 8001786:	f7ff ff53 	bl	8001630 <OLED_write_cmd>
  d = 0x3F;
 800178a:	4b54      	ldr	r3, [pc, #336]	@ (80018dc <OLED_init+0x1b0>)
 800178c:	223f      	movs	r2, #63	@ 0x3f
 800178e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001790:	2101      	movs	r1, #1
 8001792:	4852      	ldr	r0, [pc, #328]	@ (80018dc <OLED_init+0x1b0>)
 8001794:	f7ff ff74 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_SETDISPLAYOFFSET); // 화면 위치 오프셋
 8001798:	20a2      	movs	r0, #162	@ 0xa2
 800179a:	f7ff ff49 	bl	8001630 <OLED_write_cmd>
  d = 0x00;
 800179e:	4b4f      	ldr	r3, [pc, #316]	@ (80018dc <OLED_init+0x1b0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80017a4:	2101      	movs	r1, #1
 80017a6:	484d      	ldr	r0, [pc, #308]	@ (80018dc <OLED_init+0x1b0>)
 80017a8:	f7ff ff6a 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_SETSTARTLINE);     // 시작 줄 설정
 80017ac:	20a1      	movs	r0, #161	@ 0xa1
 80017ae:	f7ff ff3f 	bl	8001630 <OLED_write_cmd>
  d = 0x00;
 80017b2:	4b4a      	ldr	r3, [pc, #296]	@ (80018dc <OLED_init+0x1b0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80017b8:	2101      	movs	r1, #1
 80017ba:	4848      	ldr	r0, [pc, #288]	@ (80018dc <OLED_init+0x1b0>)
 80017bc:	f7ff ff60 	bl	8001680 <OLED_write_data>

  // 4단계: 화면 방향과 색상 배치 설정
  OLED_write_cmd(OLED_SETREMAP);
 80017c0:	20a0      	movs	r0, #160	@ 0xa0
 80017c2:	f7ff ff35 	bl	8001630 <OLED_write_cmd>
  {
    uint8_t remap[2] = {0x6, 0x11};  // 니블 순서, 듀얼COM 설정
 80017c6:	f241 1306 	movw	r3, #4358	@ 0x1106
 80017ca:	81bb      	strh	r3, [r7, #12]
    OLED_write_data(remap, 2);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2102      	movs	r1, #2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff54 	bl	8001680 <OLED_write_data>
  } // Dual COM 모드로 설정시, Column 범위가 [ 0x1C <= x <= 0x5B ]가 됩니다.



  // 5단계: GPIO와 기능 설정 ( 안씀 )
  OLED_write_cmd(OLED_SETGPIO);
 80017d8:	20b5      	movs	r0, #181	@ 0xb5
 80017da:	f7ff ff29 	bl	8001630 <OLED_write_cmd>
  d = 0x00;
 80017de:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <OLED_init+0x1b0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80017e4:	2101      	movs	r1, #1
 80017e6:	483d      	ldr	r0, [pc, #244]	@ (80018dc <OLED_init+0x1b0>)
 80017e8:	f7ff ff4a 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_FUNCTIONSELECT);  // 내부 전원 사용
 80017ec:	20ab      	movs	r0, #171	@ 0xab
 80017ee:	f7ff ff1f 	bl	8001630 <OLED_write_cmd>
  d = 0x01;
 80017f2:	4b3a      	ldr	r3, [pc, #232]	@ (80018dc <OLED_init+0x1b0>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80017f8:	2101      	movs	r1, #1
 80017fa:	4838      	ldr	r0, [pc, #224]	@ (80018dc <OLED_init+0x1b0>)
 80017fc:	f7ff ff40 	bl	8001680 <OLED_write_data>

  // 6단계: 화면 품질 향상 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 8001800:	20b4      	movs	r0, #180	@ 0xb4
 8001802:	f7ff ff15 	bl	8001630 <OLED_write_cmd>
  {
    uint8_t enhA[2] = {0xA0, 0xFD};
 8001806:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 800180a:	813b      	strh	r3, [r7, #8]
    OLED_write_data(enhA, 2);
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	2102      	movs	r1, #2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff34 	bl	8001680 <OLED_write_data>
  }

  // 7단계: 밝기와 전류 설정
  OLED_write_cmd(OLED_SETCONTRAST);     // 최대 밝기
 8001818:	20c1      	movs	r0, #193	@ 0xc1
 800181a:	f7ff ff09 	bl	8001630 <OLED_write_cmd>
  d = 0xFF;
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <OLED_init+0x1b0>)
 8001820:	22ff      	movs	r2, #255	@ 0xff
 8001822:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001824:	2101      	movs	r1, #1
 8001826:	482d      	ldr	r0, [pc, #180]	@ (80018dc <OLED_init+0x1b0>)
 8001828:	f7ff ff2a 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_MASTERCURRENT);   // 마스터 전류
 800182c:	20c7      	movs	r0, #199	@ 0xc7
 800182e:	f7ff feff 	bl	8001630 <OLED_write_cmd>
  d = 0x0F;
 8001832:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <OLED_init+0x1b0>)
 8001834:	220f      	movs	r2, #15
 8001836:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001838:	2101      	movs	r1, #1
 800183a:	4828      	ldr	r0, [pc, #160]	@ (80018dc <OLED_init+0x1b0>)
 800183c:	f7ff ff20 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_DEFAULTGRAYSCALE); // 기본 그레이스케일 사용
 8001840:	20b9      	movs	r0, #185	@ 0xb9
 8001842:	f7ff fef5 	bl	8001630 <OLED_write_cmd>

  // 8단계: 전기적 특성 설정
  OLED_write_cmd(OLED_SETPHASELENGTH);  // 페이즈 길이
 8001846:	20b1      	movs	r0, #177	@ 0xb1
 8001848:	f7ff fef2 	bl	8001630 <OLED_write_cmd>
  d = 0xE2;
 800184c:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <OLED_init+0x1b0>)
 800184e:	22e2      	movs	r2, #226	@ 0xe2
 8001850:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001852:	2101      	movs	r1, #1
 8001854:	4821      	ldr	r0, [pc, #132]	@ (80018dc <OLED_init+0x1b0>)
 8001856:	f7ff ff13 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_DISPLAYENHANCE_B); // 화면 품질 향상 B
 800185a:	20d1      	movs	r0, #209	@ 0xd1
 800185c:	f7ff fee8 	bl	8001630 <OLED_write_cmd>
  {
    uint8_t enhB[2] = {0x82, 0x20};
 8001860:	f242 0382 	movw	r3, #8322	@ 0x2082
 8001864:	80bb      	strh	r3, [r7, #4]
    OLED_write_data(enhB, 2);
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2102      	movs	r1, #2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff08 	bl	8001680 <OLED_write_data>
  }

  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE); // 프리차지 전압
 8001870:	20bb      	movs	r0, #187	@ 0xbb
 8001872:	f7ff fedd 	bl	8001630 <OLED_write_cmd>
  d = 0x1F;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <OLED_init+0x1b0>)
 8001878:	221f      	movs	r2, #31
 800187a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800187c:	2101      	movs	r1, #1
 800187e:	4817      	ldr	r0, [pc, #92]	@ (80018dc <OLED_init+0x1b0>)
 8001880:	f7ff fefe 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_SETSECONDPRECHARGE);  // 두 번째 프리차지
 8001884:	20b6      	movs	r0, #182	@ 0xb6
 8001886:	f7ff fed3 	bl	8001630 <OLED_write_cmd>
  d = 0x08;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <OLED_init+0x1b0>)
 800188c:	2208      	movs	r2, #8
 800188e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001890:	2101      	movs	r1, #1
 8001892:	4812      	ldr	r0, [pc, #72]	@ (80018dc <OLED_init+0x1b0>)
 8001894:	f7ff fef4 	bl	8001680 <OLED_write_data>

  OLED_write_cmd(OLED_SETVCOMH);            // VCOM 전압
 8001898:	20be      	movs	r0, #190	@ 0xbe
 800189a:	f7ff fec9 	bl	8001630 <OLED_write_cmd>
  d = 0x07;
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <OLED_init+0x1b0>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80018a4:	2101      	movs	r1, #1
 80018a6:	480d      	ldr	r0, [pc, #52]	@ (80018dc <OLED_init+0x1b0>)
 80018a8:	f7ff feea 	bl	8001680 <OLED_write_data>

  // 9단계: 디스플레이 모드 설정
  OLED_write_cmd(OLED_NORMALDISPLAY);       // 정상 디스플레이 모드
 80018ac:	20a6      	movs	r0, #166	@ 0xa6
 80018ae:	f7ff febf 	bl	8001630 <OLED_write_cmd>
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);  // 부분 디스플레이 모드 해제
 80018b2:	20a9      	movs	r0, #169	@ 0xa9
 80018b4:	f7ff febc 	bl	8001630 <OLED_write_cmd>

  // 10단계: 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80018b8:	233f      	movs	r3, #63	@ 0x3f
 80018ba:	2200      	movs	r2, #0
 80018bc:	215b      	movs	r1, #91	@ 0x5b
 80018be:	201c      	movs	r0, #28
 80018c0:	f7ff ff06 	bl	80016d0 <OLED_set_window>

  // 11단계: 디스플레이 켜기
  OLED_write_cmd(OLED_DISPLAYON);
 80018c4:	20af      	movs	r0, #175	@ 0xaf
 80018c6:	f7ff feb3 	bl	8001630 <OLED_write_cmd>
  HAL_Delay(50);  // 안정화 대기
 80018ca:	2032      	movs	r0, #50	@ 0x32
 80018cc:	f000 fda2 	bl	8002414 <HAL_Delay>
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	48000400 	.word	0x48000400
 80018dc:	20000388 	.word	0x20000388

080018e0 <OLED_fill>:

/* 화면 전체를 하나의 색으로 채우는 함수 */
void OLED_fill(uint8_t gray)  // gray: 0(검정)~15(흰색)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0a4      	sub	sp, #144	@ 0x90
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  // 4bpp에서는 1바이트에 2픽셀이 들어감 (4bit씩)
  uint8_t b = (gray << 4) | (gray & 0x0F);  // 왼쪽4bit + 오른쪽4bit
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t line[OLED_W/2];  // 한 줄에 필요한 바이트 수 (256픽셀 / 2 = 128바이트)
  memset(line, b, sizeof(line));  // 배열을 같은 값으로 채움
 8001904:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	2280      	movs	r2, #128	@ 0x80
 800190e:	4618      	mov	r0, r3
 8001910:	f006 f904 	bl	8007b1c <memset>

  // 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8001914:	233f      	movs	r3, #63	@ 0x3f
 8001916:	2200      	movs	r2, #0
 8001918:	215b      	movs	r1, #91	@ 0x5b
 800191a:	201c      	movs	r0, #28
 800191c:	f7ff fed8 	bl	80016d0 <OLED_set_window>
  OLED_write_cmd(OLED_WRITERAM);  // 메모리 쓰기 시작
 8001920:	205c      	movs	r0, #92	@ 0x5c
 8001922:	f7ff fe85 	bl	8001630 <OLED_write_cmd>

  // 64줄을 반복해서 같은 데이터 전송
  for (int y = 0; y < OLED_H; y++) {
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800192c:	e00a      	b.n	8001944 <OLED_fill+0x64>
    OLED_write_data(line, sizeof(line));
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2180      	movs	r1, #128	@ 0x80
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fea3 	bl	8001680 <OLED_write_data>
  for (int y = 0; y < OLED_H; y++) {
 800193a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800193e:	3301      	adds	r3, #1
 8001940:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001944:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001948:	2b3f      	cmp	r3, #63	@ 0x3f
 800194a:	ddf0      	ble.n	800192e <OLED_fill+0x4e>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3790      	adds	r7, #144	@ 0x90
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <colbyte_from_x>:

/* ======== 좌표 변환 함수들 ======== */

/* 픽셀의 x좌표를 OLED의 column 바이트 주소로 변환 */
static uint8_t colbyte_from_x(int x)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  // 4bpp에서는 2픽셀당 1바이트이므로 x를 2로 나눔
  return OLED_COL_START + (x >> 1);  // x >> 1은 x / 2와 같음
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	105b      	asrs	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	331c      	adds	r3, #28
 8001966:	b2db      	uxtb	r3, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <rowaddr_from_y>:

/* 픽셀의 y좌표를 OLED의 row 주소로 변환 */
static uint8_t rowaddr_from_y(int y)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y;  // y좌표는 그대로 사용
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	b2db      	uxtb	r3, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <oled_drawChar>:

/* ======== 문자 그리기 함수들 ======== */

/* 하나의 문자를 화면에 그리는 함수 */
void oled_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b0ae      	sub	sp, #184	@ 0xb8
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	71fb      	strb	r3, [r7, #7]
  // 1단계: 입력값 검증
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b1f      	cmp	r3, #31
 80019a0:	f240 80ea 	bls.w	8001b78 <oled_drawChar+0x1ec>
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80019a8:	f200 80e6 	bhi.w	8001b78 <oled_drawChar+0x1ec>
  if (gray > 15) gray = 15;         // 최대 밝기 제한
 80019ac:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d902      	bls.n	80019ba <oled_drawChar+0x2e>
 80019b4:	230f      	movs	r3, #15
 80019b6:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0

  // 2단계: 화면 범위 검사
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f2c0 80dd 	blt.w	8001b7c <oled_drawChar+0x1f0>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019d0:	f300 80d4 	bgt.w	8001b7c <oled_drawChar+0x1f0>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f2c0 80d2 	blt.w	8001b80 <oled_drawChar+0x1f4>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	461a      	mov	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	4413      	add	r3, r2
 80019e6:	2b40      	cmp	r3, #64	@ 0x40
 80019e8:	f300 80ca 	bgt.w	8001b80 <oled_drawChar+0x1f4>

  // 3단계: 폰트 데이터에서 문자 찾기
  const int stride = font->height;           // 한 문자의 데이터 줄 수
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start  = (ch - 32) * stride;     // 문자 데이터 시작 위치 ('A'는 65-32=33번째)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f1a3 0220 	sub.w	r2, r3, #32
 80019fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2;  // 한 줄당 필요한 바이트 수
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	0fda      	lsrs	r2, r3, #31
 8001a0e:	4413      	add	r3, r2
 8001a10:	105b      	asrs	r3, r3, #1
 8001a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W/2];  // 한 줄 데이터를 저장할 버퍼

  // 4단계: 문자의 각 줄을 처리
  for (int row = 0; row < font->height; row++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a1c:	e0a3      	b.n	8001b66 <oled_drawChar+0x1da>
  {
    // 폰트 데이터에서 현재 줄의 비트맵 가져오기
    uint16_t mask = font->data[start + row];
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a2a:	440b      	add	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    // 줄 버퍼를 0으로 초기화 (배경색)
    memset(linebuf, 0x00, bytes_per_row);
 8001a36:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f006 f86b 	bl	8007b1c <memset>

    // 5단계: 각 픽셀을 처리 (왼쪽부터 오른쪽으로)
    for (int col = 0; col < font->width; col++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a4c:	e04f      	b.n	8001aee <oled_drawChar+0x162>
    {
      int byte_idx = (col >> 1);              // 현재 픽셀이 들어갈 바이트 위치
 8001a4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a52:	105b      	asrs	r3, r3, #1
 8001a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0);     // 바이트의 왼쪽 4bit인지 오른쪽 4bit인지
 8001a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      // 현재 픽셀이 켜져있는지 확인
      if (mask & (0x8000 >> col))  // 0x8000에서 오른쪽으로 col번 이동한 비트 확인
 8001a6e:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001a72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a7a:	fa41 f303 	asr.w	r3, r1, r3
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d02f      	beq.n	8001ae4 <oled_drawChar+0x158>
      {
        // 픽셀이 켜져있으면 해당 위치에 색상 설정
        if (left_nibble)
 8001a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d015      	beq.n	8001ab8 <oled_drawChar+0x12c>
          linebuf[byte_idx] |= (gray << 4);   // 왼쪽 4bit에 색상
 8001a8c:	f107 0214 	add.w	r2, r7, #20
 8001a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25a      	sxtb	r2, r3
 8001a9a:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	b2d9      	uxtb	r1, r3
 8001aa8:	f107 0214 	add.w	r2, r7, #20
 8001aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ab0:	4413      	add	r3, r2
 8001ab2:	460a      	mov	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e015      	b.n	8001ae4 <oled_drawChar+0x158>
        else
          linebuf[byte_idx] |= (gray & 0x0F); // 오른쪽 4bit에 색상
 8001ab8:	f107 0214 	add.w	r2, r7, #20
 8001abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b25a      	sxtb	r2, r3
 8001ac6:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	b2d9      	uxtb	r1, r3
 8001ad6:	f107 0214 	add.w	r2, r7, #20
 8001ada:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ade:	4413      	add	r3, r2
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8001ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001af8:	4293      	cmp	r3, r2
 8001afa:	dba8      	blt.n	8001a4e <oled_drawChar+0xc2>
      }
    }

    // 6단계: 현재 줄을 OLED에 전송
    uint8_t col_start = colbyte_from_x(x);           // 시작 column 주소
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff ff2a 	bl	8001956 <colbyte_from_x>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end   = col_start + bytes_per_row - 1;  // 끝 column 주소
 8001b08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8001b12:	4413      	add	r3, r2
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr  = rowaddr_from_y(y + row);     // 현재 row 주소
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b22:	4413      	add	r3, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff25 	bl	8001974 <rowaddr_from_y>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr);  // 그리기 영역 설정
 8001b30:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001b34:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8001b38:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8001b3c:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 8001b40:	f7ff fdc6 	bl	80016d0 <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);                   // 메모리 쓰기 시작
 8001b44:	205c      	movs	r0, #92	@ 0x5c
 8001b46:	f7ff fd73 	bl	8001630 <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);         // 데이터 전송
 8001b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd92 	bl	8001680 <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 8001b5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b60:	3301      	adds	r3, #1
 8001b62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f6ff af54 	blt.w	8001a1e <oled_drawChar+0x92>
 8001b76:	e004      	b.n	8001b82 <oled_drawChar+0x1f6>
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8001b78:	bf00      	nop
 8001b7a:	e002      	b.n	8001b82 <oled_drawChar+0x1f6>
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8001b7c:	bf00      	nop
 8001b7e:	e000      	b.n	8001b82 <oled_drawChar+0x1f6>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8001b80:	bf00      	nop
  }
}
 8001b82:	37b8      	adds	r7, #184	@ 0xb8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <oled_drawString>:

/* 문자열을 화면에 그리는 함수 */
void oled_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  int cx = x, cy = y;  // 현재 커서 위치
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	613b      	str	r3, [r7, #16]

  // 문자열의 끝까지 반복
  while (*str) {
 8001b9e:	e020      	b.n	8001be2 <oled_drawString+0x5a>
    if (*str == '\n') {  // 줄바꿈 문자
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b0a      	cmp	r3, #10
 8001ba6:	d108      	bne.n	8001bba <oled_drawString+0x32>
      cy += font->height + 1;  // 다음 줄로 이동 (+1은 줄 간격)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	3301      	adds	r3, #1
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
      cx = x;                  // 맨 왼쪽으로 돌아가기
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e010      	b.n	8001bdc <oled_drawString+0x54>
     // if (cx & 1) cx--;        // 시작 위치를 짝수로 맞춤 (니블 정렬)
    } // 사용시 "str\nstr" 이런식으로 쓰시면 됩니다.

    else if (*str != '\r') {   // 캐리지 리턴이 아닌 일반 문자
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b0d      	cmp	r3, #13
 8001bc0:	d00c      	beq.n	8001bdc <oled_drawString+0x54>
      oled_drawChar(cx, cy, *str, font, gray);  // 현재 위치에 문자 그리기
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6939      	ldr	r1, [r7, #16]
 8001bd0:	6978      	ldr	r0, [r7, #20]
 8001bd2:	f7ff fedb 	bl	800198c <oled_drawChar>
      cx += 4;  // 다음 문자 위치로 이동 (4픽셀 간격으로 설정)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	617b      	str	r3, [r7, #20]

      // 원래 코드: cx += font->width + 1; (폰트 너비 + 1픽셀 간격)
      // 원래 코드: if (cx & 1) cx++;      (다음 위치를 짝수로 맞춤)
      // → 이 두 줄이 문자 사이에 큰 간격을 만들었음
    }
    str++;  // 다음 문자로 이동
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
  while (*str) {
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1da      	bne.n	8001ba0 <oled_drawString+0x18>
  }
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c6c <MX_SPI3_Init+0x78>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c0e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c12:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c2a:	2228      	movs	r2, #40	@ 0x28
 8001c2c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c42:	2207      	movs	r2, #7
 8001c44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c4e:	2208      	movs	r2, #8
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <MX_SPI3_Init+0x74>)
 8001c54:	f002 fb8c 	bl	8004370 <HAL_SPI_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001c5e:	f7ff fce1 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000038c 	.word	0x2000038c
 8001c6c:	40003c00 	.word	0x40003c00

08001c70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a17      	ldr	r2, [pc, #92]	@ (8001cec <HAL_SPI_MspInit+0x7c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d127      	bne.n	8001ce2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_SPI_MspInit+0x80>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <HAL_SPI_MspInit+0x80>)
 8001c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_SPI_MspInit+0x80>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_SPI_MspInit+0x80>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <HAL_SPI_MspInit+0x80>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_SPI_MspInit+0x80>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001cc2:	2328      	movs	r3, #40	@ 0x28
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_SPI_MspInit+0x84>)
 8001cde:	f001 f8e3 	bl	8002ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	@ 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40003c00 	.word	0x40003c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000400 	.word	0x48000400

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d02:	4a0e      	ldr	r2, [pc, #56]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	4a08      	ldr	r2, [pc, #32]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_MspInit+0x44>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d2e:	f001 fbf1 	bl	8003514 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <NMI_Handler+0x4>

08001d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <MemManage_Handler+0x4>

08001d58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d96:	f000 fb1f 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <FDCAN1_IT0_IRQHandler+0x10>)
 8001da6:	f000 fe81 	bl	8002aac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001f0 	.word	0x200001f0

08001db4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <FDCAN1_IT1_IRQHandler+0x10>)
 8001dba:	f000 fe77 	bl	8002aac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200001f0 	.word	0x200001f0

08001dc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <USART1_IRQHandler+0x10>)
 8001dce:	f002 ff7f 	bl	8004cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200003f4 	.word	0x200003f4

08001ddc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <USART3_IRQHandler+0x10>)
 8001de2:	f002 ff75 	bl	8004cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000488 	.word	0x20000488

08001df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_kill>:

int _kill(int pid, int sig)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e0a:	f005 fed9 	bl	8007bc0 <__errno>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2216      	movs	r2, #22
 8001e12:	601a      	str	r2, [r3, #0]
  return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_exit>:

void _exit (int status)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ffe7 	bl	8001e00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e32:	bf00      	nop
 8001e34:	e7fd      	b.n	8001e32 <_exit+0x12>

08001e36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e00a      	b.n	8001e5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e48:	f3af 8000 	nop.w
 8001e4c:	4601      	mov	r1, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	60ba      	str	r2, [r7, #8]
 8001e54:	b2ca      	uxtb	r2, r1
 8001e56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dbf0      	blt.n	8001e48 <_read+0x12>
  }

  return len;
 8001e66:	687b      	ldr	r3, [r7, #4]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	e009      	b.n	8001e96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	60ba      	str	r2, [r7, #8]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f962 	bl	8001154 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dbf1      	blt.n	8001e82 <_write+0x12>
  }
  return len;
 8001e9e:	687b      	ldr	r3, [r7, #4]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_close>:

int _close(int file)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ed0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_isatty>:

int _isatty(int file)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f18:	4a14      	ldr	r2, [pc, #80]	@ (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f40:	f005 fe3e 	bl	8007bc0 <__errno>
 8001f44:	4603      	mov	r3, r0
 8001f46:	220c      	movs	r2, #12
 8001f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20008000 	.word	0x20008000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	200003f0 	.word	0x200003f0
 8001f78:	20000948 	.word	0x20000948

08001f7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f80:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <SystemInit+0x20>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <SystemInit+0x20>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa4:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fa6:	4a23      	ldr	r2, [pc, #140]	@ (8002034 <MX_USART1_UART_Init+0x94>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe8:	4811      	ldr	r0, [pc, #68]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fea:	f002 fd47 	bl	8004a7c <HAL_UART_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ff4:	f7ff fb16 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	480d      	ldr	r0, [pc, #52]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001ffc:	f004 fdf6 	bl	8006bec <HAL_UARTEx_SetTxFifoThreshold>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002006:	f7ff fb0d 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800200a:	2100      	movs	r1, #0
 800200c:	4808      	ldr	r0, [pc, #32]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 800200e:	f004 fe2b 	bl	8006c68 <HAL_UARTEx_SetRxFifoThreshold>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002018:	f7ff fb04 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 800201e:	f004 fdac 	bl	8006b7a <HAL_UARTEx_DisableFifoMode>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002028:	f7ff fafc 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200003f4 	.word	0x200003f4
 8002034:	40013800 	.word	0x40013800

08002038 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800203c:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 800203e:	4a25      	ldr	r2, [pc, #148]	@ (80020d4 <MX_USART3_UART_Init+0x9c>)
 8002040:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002042:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 8002044:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002048:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002056:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800205c:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 800205e:	220c      	movs	r2, #12
 8002060:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 8002070:	2200      	movs	r2, #0
 8002072:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 800207c:	2200      	movs	r2, #0
 800207e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002080:	2300      	movs	r3, #0
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	4812      	ldr	r0, [pc, #72]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 8002088:	f004 fcf0 	bl	8006a6c <HAL_RS485Ex_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8002092:	f7ff fac7 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002096:	2100      	movs	r1, #0
 8002098:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 800209a:	f004 fda7 	bl	8006bec <HAL_UARTEx_SetTxFifoThreshold>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 80020a4:	f7ff fabe 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a8:	2100      	movs	r1, #0
 80020aa:	4809      	ldr	r0, [pc, #36]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 80020ac:	f004 fddc 	bl	8006c68 <HAL_UARTEx_SetRxFifoThreshold>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 80020b6:	f7ff fab5 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <MX_USART3_UART_Init+0x98>)
 80020bc:	f004 fd5d 	bl	8006b7a <HAL_UARTEx_DisableFifoMode>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 80020c6:	f7ff faad 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000488 	.word	0x20000488
 80020d4:	40004800 	.word	0x40004800

080020d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b09c      	sub	sp, #112	@ 0x70
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	2244      	movs	r2, #68	@ 0x44
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f005 fd0f 	bl	8007b1c <memset>
  if(uartHandle->Instance==USART1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a45      	ldr	r2, [pc, #276]	@ (8002218 <HAL_UART_MspInit+0x140>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d13e      	bne.n	8002186 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002108:	2301      	movs	r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002110:	f107 0318 	add.w	r3, r7, #24
 8002114:	4618      	mov	r0, r3
 8002116:	f001 ff3b 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002120:	f7ff fa80 	bl	8001624 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002124:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <HAL_UART_MspInit+0x144>)
 8002126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002128:	4a3c      	ldr	r2, [pc, #240]	@ (800221c <HAL_UART_MspInit+0x144>)
 800212a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002130:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <HAL_UART_MspInit+0x144>)
 8002132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213c:	4b37      	ldr	r3, [pc, #220]	@ (800221c <HAL_UART_MspInit+0x144>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002140:	4a36      	ldr	r2, [pc, #216]	@ (800221c <HAL_UART_MspInit+0x144>)
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002148:	4b34      	ldr	r3, [pc, #208]	@ (800221c <HAL_UART_MspInit+0x144>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002154:	23c0      	movs	r3, #192	@ 0xc0
 8002156:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002164:	2307      	movs	r3, #7
 8002166:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800216c:	4619      	mov	r1, r3
 800216e:	482c      	ldr	r0, [pc, #176]	@ (8002220 <HAL_UART_MspInit+0x148>)
 8002170:	f000 fe9a 	bl	8002ea8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	2025      	movs	r0, #37	@ 0x25
 800217a:	f000 fa48 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800217e:	2025      	movs	r0, #37	@ 0x25
 8002180:	f000 fa5f 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002184:	e043      	b.n	800220e <HAL_UART_MspInit+0x136>
  else if(uartHandle->Instance==USART3)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a26      	ldr	r2, [pc, #152]	@ (8002224 <HAL_UART_MspInit+0x14c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d13e      	bne.n	800220e <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002190:	2304      	movs	r3, #4
 8002192:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fef7 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80021a8:	f7ff fa3c 	bl	8001624 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <HAL_UART_MspInit+0x144>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	4a1a      	ldr	r2, [pc, #104]	@ (800221c <HAL_UART_MspInit+0x144>)
 80021b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_UART_MspInit+0x144>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_UART_MspInit+0x144>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c8:	4a14      	ldr	r2, [pc, #80]	@ (800221c <HAL_UART_MspInit+0x144>)
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_UART_MspInit+0x144>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 80021dc:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 80021e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021ee:	2307      	movs	r3, #7
 80021f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021f6:	4619      	mov	r1, r3
 80021f8:	4809      	ldr	r0, [pc, #36]	@ (8002220 <HAL_UART_MspInit+0x148>)
 80021fa:	f000 fe55 	bl	8002ea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	2027      	movs	r0, #39	@ 0x27
 8002204:	f000 fa03 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002208:	2027      	movs	r0, #39	@ 0x27
 800220a:	f000 fa1a 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3770      	adds	r7, #112	@ 0x70
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40013800 	.word	0x40013800
 800221c:	40021000 	.word	0x40021000
 8002220:	48000400 	.word	0x48000400
 8002224:	40004800 	.word	0x40004800

08002228 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800222c:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 800222e:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <MX_USB_PCD_Init+0x4c>)
 8002230:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 8002234:	2208      	movs	r2, #8
 8002236:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002238:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 800223a:	2202      	movs	r2, #2
 800223c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 8002240:	2202      	movs	r2, #2
 8002242:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 8002246:	2200      	movs	r2, #0
 8002248:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 800224c:	2200      	movs	r2, #0
 800224e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 8002252:	2200      	movs	r2, #0
 8002254:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 8002258:	2200      	movs	r2, #0
 800225a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	@ (8002270 <MX_USB_PCD_Init+0x48>)
 800225e:	f000 ffbd 	bl	80031dc <HAL_PCD_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002268:	f7ff f9dc 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000051c 	.word	0x2000051c
 8002274:	40005c00 	.word	0x40005c00

08002278 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b094      	sub	sp, #80	@ 0x50
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2244      	movs	r2, #68	@ 0x44
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f005 fc47 	bl	8007b1c <memset>
  if(pcdHandle->Instance==USB)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a11      	ldr	r2, [pc, #68]	@ (80022d8 <HAL_PCD_MspInit+0x60>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d11a      	bne.n	80022ce <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002298:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800229c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800229e:	2300      	movs	r3, #0
 80022a0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fe72 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80022b2:	f7ff f9b7 	bl	8001624 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_PCD_MspInit+0x64>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_PCD_MspInit+0x64>)
 80022bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_PCD_MspInit+0x64>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80022ce:	bf00      	nop
 80022d0:	3750      	adds	r7, #80	@ 0x50
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40005c00 	.word	0x40005c00
 80022dc:	40021000 	.word	0x40021000

080022e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022e0:	480d      	ldr	r0, [pc, #52]	@ (8002318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e4:	f7ff fe4a 	bl	8001f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	@ (800231c <LoopForever+0x6>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	@ (8002320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <LoopForever+0xe>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	@ (800232c <LoopForever+0x16>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800230e:	f005 fc5d 	bl	8007bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002312:	f7ff f83b 	bl	800138c <main>

08002316 <LoopForever>:

LoopForever:
    b LoopForever
 8002316:	e7fe      	b.n	8002316 <LoopForever>
  ldr   r0, =_estack
 8002318:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002324:	0800a7bc 	.word	0x0800a7bc
  ldr r2, =_sbss
 8002328:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800232c:	20000948 	.word	0x20000948

08002330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC1_2_IRQHandler>

08002332 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233c:	2003      	movs	r0, #3
 800233e:	f000 f95b 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002342:	200f      	movs	r0, #15
 8002344:	f000 f80e 	bl	8002364 <HAL_InitTick>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	71fb      	strb	r3, [r7, #7]
 8002352:	e001      	b.n	8002358 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002354:	f7ff fcd0 	bl	8001cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002358:	79fb      	ldrb	r3, [r7, #7]

}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002370:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <HAL_InitTick+0x68>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d022      	beq.n	80023be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002378:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <HAL_InitTick+0x6c>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <HAL_InitTick+0x68>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002384:	fbb1 f3f3 	udiv	r3, r1, r3
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f966 	bl	800265e <HAL_SYSTICK_Config>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10f      	bne.n	80023b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b0f      	cmp	r3, #15
 800239c:	d809      	bhi.n	80023b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239e:	2200      	movs	r2, #0
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	f04f 30ff 	mov.w	r0, #4294967295
 80023a6:	f000 f932 	bl	800260e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023aa:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <HAL_InitTick+0x70>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e007      	b.n	80023c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e004      	b.n	80023c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e001      	b.n	80023c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000008 	.word	0x20000008
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_IncTick+0x1c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_IncTick+0x20>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	4a03      	ldr	r2, [pc, #12]	@ (80023f4 <HAL_IncTick+0x1c>)
 80023e8:	6013      	str	r3, [r2, #0]
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	200007f8 	.word	0x200007f8
 80023f8:	20000008 	.word	0x20000008

080023fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <HAL_GetTick+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	200007f8 	.word	0x200007f8

08002414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800241c:	f7ff ffee 	bl	80023fc <HAL_GetTick>
 8002420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d004      	beq.n	8002438 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_Delay+0x40>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002438:	bf00      	nop
 800243a:	f7ff ffdf 	bl	80023fc <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	429a      	cmp	r2, r3
 8002448:	d8f7      	bhi.n	800243a <HAL_Delay+0x26>
  {
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000008 	.word	0x20000008

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	@ (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	@ (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	@ (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	@ (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	@ 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff40 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff90 	bl	800254c <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5f 	bl	80024f8 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff33 	bl	80024bc <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa4 	bl	80025b4 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d005      	beq.n	800269a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2204      	movs	r2, #4
 8002692:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e037      	b.n	800270a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020e 	bic.w	r2, r2, #14
 80026a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f003 021f 	and.w	r2, r3, #31
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00c      	beq.n	800270a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002708:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d00d      	beq.n	800275c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2204      	movs	r2, #4
 8002744:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e047      	b.n	80027ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 020e 	bic.w	r2, r2, #14
 800276a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002786:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800278a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
    }
  }
  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e147      	b.n	8002a9a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe fbc8 	bl	8000fb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0210 	bic.w	r2, r2, #16
 8002832:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002834:	f7ff fde2 	bl	80023fc <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800283a:	e012      	b.n	8002862 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800283c:	f7ff fdde 	bl	80023fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b0a      	cmp	r3, #10
 8002848:	d90b      	bls.n	8002862 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e11b      	b.n	8002a9a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b08      	cmp	r3, #8
 800286e:	d0e5      	beq.n	800283c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002880:	f7ff fdbc 	bl	80023fc <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002886:	e012      	b.n	80028ae <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002888:	f7ff fdb8 	bl	80023fc <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d90b      	bls.n	80028ae <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2203      	movs	r2, #3
 80028a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0f5      	b.n	8002a9a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0e5      	beq.n	8002888 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0202 	orr.w	r2, r2, #2
 80028ca:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a74      	ldr	r2, [pc, #464]	@ (8002aa4 <HAL_FDCAN_Init+0x2ac>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d103      	bne.n	80028de <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80028d6:	4a74      	ldr	r2, [pc, #464]	@ (8002aa8 <HAL_FDCAN_Init+0x2b0>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7c1b      	ldrb	r3, [r3, #16]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f4:	619a      	str	r2, [r3, #24]
 80028f6:	e007      	b.n	8002908 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002906:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7c5b      	ldrb	r3, [r3, #17]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800291e:	619a      	str	r2, [r3, #24]
 8002920:	e007      	b.n	8002932 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002930:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7c9b      	ldrb	r3, [r3, #18]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002948:	619a      	str	r2, [r3, #24]
 800294a:	e007      	b.n	800295c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800295a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002980:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0210 	bic.w	r2, r2, #16
 8002990:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0204 	orr.w	r2, r2, #4
 80029a8:	619a      	str	r2, [r3, #24]
 80029aa:	e02c      	b.n	8002a06 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d028      	beq.n	8002a06 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d01c      	beq.n	80029f6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029ca:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0210 	orr.w	r2, r2, #16
 80029da:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d110      	bne.n	8002a06 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0220 	orr.w	r2, r2, #32
 80029f2:	619a      	str	r2, [r3, #24]
 80029f4:	e007      	b.n	8002a06 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0220 	orr.w	r2, r2, #32
 8002a04:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a16:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a1e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002a2e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a30:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a3a:	d115      	bne.n	8002a68 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	3b01      	subs	r3, #1
 8002a48:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a4a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	3b01      	subs	r3, #1
 8002a52:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a54:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a64:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a66:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9bc 	bl	8002dfc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40006400 	.word	0x40006400
 8002aa8:	40006500 	.word	0x40006500

08002aac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08c      	sub	sp, #48	@ 0x30
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ac8:	4013      	ands	r3, r2
 8002aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af8:	4013      	ands	r3, r2
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b02:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002b06:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	4013      	ands	r3, r2
 8002b12:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b1e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b32:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00c      	beq.n	8002b62 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2240      	movs	r2, #64	@ 0x40
 8002b5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f92d 	bl	8002dbc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01a      	beq.n	8002ba4 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d014      	beq.n	8002ba4 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b82:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002b9c:	6939      	ldr	r1, [r7, #16]
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8ed 	bl	8002d7e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8ac 	bl	8002d12 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bc6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f8ac 	bl	8002d28 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bdc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002bde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8ac 	bl	8002d3e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	0a5b      	lsrs	r3, r3, #9
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	0a5b      	lsrs	r3, r3, #9
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c06:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8a3 	bl	8002d54 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	09db      	lsrs	r3, r3, #7
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d019      	beq.n	8002c4e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	09db      	lsrs	r3, r3, #7
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d013      	beq.n	8002c4e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002c2e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2280      	movs	r2, #128	@ 0x80
 8002c44:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002c46:	68f9      	ldr	r1, [r7, #12]
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f88d 	bl	8002d68 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	0b5b      	lsrs	r3, r3, #13
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	0b5b      	lsrs	r3, r3, #13
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f88f 	bl	8002d94 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	0bdb      	lsrs	r3, r3, #15
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	0bdb      	lsrs	r3, r3, #15
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f885 	bl	8002da8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	0b9b      	lsrs	r3, r3, #14
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	0b9b      	lsrs	r3, r3, #14
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002cda:	69f9      	ldr	r1, [r7, #28]
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f881 	bl	8002de4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f863 	bl	8002dd0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3730      	adds	r7, #48	@ 0x30
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002e04:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002e06:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e16:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1e:	041a      	lsls	r2, r3, #16
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e3c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e44:	061a      	lsls	r2, r3, #24
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e005      	b.n	8002e8a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3f3      	bcc.n	8002e7e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	4000a400 	.word	0x4000a400

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eb6:	e15a      	b.n	800316e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 814c 	beq.w	8003168 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d005      	beq.n	8002ee8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d130      	bne.n	8002f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1e:	2201      	movs	r2, #1
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 0201 	and.w	r2, r3, #1
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d017      	beq.n	8002f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d123      	bne.n	8002fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	6939      	ldr	r1, [r7, #16]
 8002fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0203 	and.w	r2, r3, #3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80a6 	beq.w	8003168 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301c:	4b5b      	ldr	r3, [pc, #364]	@ (800318c <HAL_GPIO_Init+0x2e4>)
 800301e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003020:	4a5a      	ldr	r2, [pc, #360]	@ (800318c <HAL_GPIO_Init+0x2e4>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6613      	str	r3, [r2, #96]	@ 0x60
 8003028:	4b58      	ldr	r3, [pc, #352]	@ (800318c <HAL_GPIO_Init+0x2e4>)
 800302a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003034:	4a56      	ldr	r2, [pc, #344]	@ (8003190 <HAL_GPIO_Init+0x2e8>)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	220f      	movs	r2, #15
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800305e:	d01f      	beq.n	80030a0 <HAL_GPIO_Init+0x1f8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a4c      	ldr	r2, [pc, #304]	@ (8003194 <HAL_GPIO_Init+0x2ec>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d019      	beq.n	800309c <HAL_GPIO_Init+0x1f4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a4b      	ldr	r2, [pc, #300]	@ (8003198 <HAL_GPIO_Init+0x2f0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_GPIO_Init+0x1f0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a4a      	ldr	r2, [pc, #296]	@ (800319c <HAL_GPIO_Init+0x2f4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00d      	beq.n	8003094 <HAL_GPIO_Init+0x1ec>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a49      	ldr	r2, [pc, #292]	@ (80031a0 <HAL_GPIO_Init+0x2f8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d007      	beq.n	8003090 <HAL_GPIO_Init+0x1e8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a48      	ldr	r2, [pc, #288]	@ (80031a4 <HAL_GPIO_Init+0x2fc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_GPIO_Init+0x1e4>
 8003088:	2305      	movs	r3, #5
 800308a:	e00a      	b.n	80030a2 <HAL_GPIO_Init+0x1fa>
 800308c:	2306      	movs	r3, #6
 800308e:	e008      	b.n	80030a2 <HAL_GPIO_Init+0x1fa>
 8003090:	2304      	movs	r3, #4
 8003092:	e006      	b.n	80030a2 <HAL_GPIO_Init+0x1fa>
 8003094:	2303      	movs	r3, #3
 8003096:	e004      	b.n	80030a2 <HAL_GPIO_Init+0x1fa>
 8003098:	2302      	movs	r3, #2
 800309a:	e002      	b.n	80030a2 <HAL_GPIO_Init+0x1fa>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_GPIO_Init+0x1fa>
 80030a0:	2300      	movs	r3, #0
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	f002 0203 	and.w	r2, r2, #3
 80030a8:	0092      	lsls	r2, r2, #2
 80030aa:	4093      	lsls	r3, r2
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b2:	4937      	ldr	r1, [pc, #220]	@ (8003190 <HAL_GPIO_Init+0x2e8>)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_GPIO_Init+0x300>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030e4:	4a30      	ldr	r2, [pc, #192]	@ (80031a8 <HAL_GPIO_Init+0x300>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030ea:	4b2f      	ldr	r3, [pc, #188]	@ (80031a8 <HAL_GPIO_Init+0x300>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800310e:	4a26      	ldr	r2, [pc, #152]	@ (80031a8 <HAL_GPIO_Init+0x300>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003114:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_GPIO_Init+0x300>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003138:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_GPIO_Init+0x300>)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800313e:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <HAL_GPIO_Init+0x300>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003162:	4a11      	ldr	r2, [pc, #68]	@ (80031a8 <HAL_GPIO_Init+0x300>)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3301      	adds	r3, #1
 800316c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f ae9d 	bne.w	8002eb8 <HAL_GPIO_Init+0x10>
  }
}
 800317e:	bf00      	nop
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	40021000 	.word	0x40021000
 8003190:	40010000 	.word	0x40010000
 8003194:	48000400 	.word	0x48000400
 8003198:	48000800 	.word	0x48000800
 800319c:	48000c00 	.word	0x48000c00
 80031a0:	48001000 	.word	0x48001000
 80031a4:	48001400 	.word	0x48001400
 80031a8:	40010400 	.word	0x40010400

080031ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
 80031b8:	4613      	mov	r3, r2
 80031ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031bc:	787b      	ldrb	r3, [r7, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ca:	887a      	ldrh	r2, [r7, #2]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0c0      	b.n	8003370 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff f838 	bl	8002278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2203      	movs	r2, #3
 800320c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fdb3 	bl	8006d80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	e03e      	b.n	800329e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	3311      	adds	r3, #17
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	3310      	adds	r3, #16
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	3313      	adds	r3, #19
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	3320      	adds	r3, #32
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3324      	adds	r3, #36	@ 0x24
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	3301      	adds	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	791b      	ldrb	r3, [r3, #4]
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3bb      	bcc.n	8003220 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e044      	b.n	8003338 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	3301      	adds	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	791b      	ldrb	r3, [r3, #4]
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	429a      	cmp	r2, r3
 8003340:	d3b5      	bcc.n	80032ae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800334e:	f003 fd32 	bl	8006db6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7a9b      	ldrb	r3, [r3, #10]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f805 	bl	8003378 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800339c:	b29b      	uxth	r3, r3
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f043 0302 	orr.w	r3, r3, #2
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d141      	bne.n	800345e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033da:	4b4b      	ldr	r3, [pc, #300]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e6:	d131      	bne.n	800344c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033e8:	4b47      	ldr	r3, [pc, #284]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ee:	4a46      	ldr	r2, [pc, #280]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f8:	4b43      	ldr	r3, [pc, #268]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003400:	4a41      	ldr	r2, [pc, #260]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003406:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003408:	4b40      	ldr	r3, [pc, #256]	@ (800350c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2232      	movs	r2, #50	@ 0x32
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	4a3f      	ldr	r2, [pc, #252]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	0c9b      	lsrs	r3, r3, #18
 800341a:	3301      	adds	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800341e:	e002      	b.n	8003426 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3b01      	subs	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003426:	4b38      	ldr	r3, [pc, #224]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003432:	d102      	bne.n	800343a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f2      	bne.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800343a:	4b33      	ldr	r3, [pc, #204]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003446:	d158      	bne.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e057      	b.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800344c:	4b2e      	ldr	r3, [pc, #184]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003452:	4a2d      	ldr	r2, [pc, #180]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003458:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800345c:	e04d      	b.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003464:	d141      	bne.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003466:	4b28      	ldr	r3, [pc, #160]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003472:	d131      	bne.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003474:	4b24      	ldr	r3, [pc, #144]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800347a:	4a23      	ldr	r2, [pc, #140]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003484:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800348c:	4a1e      	ldr	r2, [pc, #120]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003494:	4b1d      	ldr	r3, [pc, #116]	@ (800350c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2232      	movs	r2, #50	@ 0x32
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	4a1c      	ldr	r2, [pc, #112]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	0c9b      	lsrs	r3, r3, #18
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034aa:	e002      	b.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b2:	4b15      	ldr	r3, [pc, #84]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034be:	d102      	bne.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f2      	bne.n	80034ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d2:	d112      	bne.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e011      	b.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034de:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034e8:	e007      	b.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034ea:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034f2:	4a05      	ldr	r2, [pc, #20]	@ (8003508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40007000 	.word	0x40007000
 800350c:	20000000 	.word	0x20000000
 8003510:	431bde83 	.word	0x431bde83

08003514 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800351e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003522:	6093      	str	r3, [r2, #8]
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40007000 	.word	0x40007000

08003534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e2fe      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d075      	beq.n	800363e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003552:	4b97      	ldr	r3, [pc, #604]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800355c:	4b94      	ldr	r3, [pc, #592]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d102      	bne.n	8003572 <HAL_RCC_OscConfig+0x3e>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d002      	beq.n	8003578 <HAL_RCC_OscConfig+0x44>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d10b      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	4b8d      	ldr	r3, [pc, #564]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d05b      	beq.n	800363c <HAL_RCC_OscConfig+0x108>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d157      	bne.n	800363c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e2d9      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x74>
 800359a:	4b85      	ldr	r3, [pc, #532]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a84      	ldr	r2, [pc, #528]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x98>
 80035b2:	4b7f      	ldr	r3, [pc, #508]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7e      	ldr	r2, [pc, #504]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b7c      	ldr	r3, [pc, #496]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7b      	ldr	r2, [pc, #492]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035cc:	4b78      	ldr	r3, [pc, #480]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a77      	ldr	r2, [pc, #476]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b75      	ldr	r3, [pc, #468]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a74      	ldr	r2, [pc, #464]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fe ff06 	bl	80023fc <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe ff02 	bl	80023fc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	@ 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e29e      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003606:	4b6a      	ldr	r3, [pc, #424]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0xc0>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe fef2 	bl	80023fc <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800361c:	f7fe feee 	bl	80023fc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	@ 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e28a      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362e:	4b60      	ldr	r3, [pc, #384]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0xe8>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d075      	beq.n	8003736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364a:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003654:	4b56      	ldr	r3, [pc, #344]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d102      	bne.n	800366a <HAL_RCC_OscConfig+0x136>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d002      	beq.n	8003670 <HAL_RCC_OscConfig+0x13c>
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d11f      	bne.n	80036b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003670:	4b4f      	ldr	r3, [pc, #316]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_OscConfig+0x154>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e25d      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b49      	ldr	r3, [pc, #292]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	4946      	ldr	r1, [pc, #280]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800369c:	4b45      	ldr	r3, [pc, #276]	@ (80037b4 <HAL_RCC_OscConfig+0x280>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fe5f 	bl	8002364 <HAL_InitTick>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d043      	beq.n	8003734 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e249      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d023      	beq.n	8003700 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b8:	4b3d      	ldr	r3, [pc, #244]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3c      	ldr	r2, [pc, #240]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80036be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe fe9a 	bl	80023fc <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fe fe96 	bl	80023fc <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e232      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036de:	4b34      	ldr	r3, [pc, #208]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	061b      	lsls	r3, r3, #24
 80036f8:	492d      	ldr	r1, [pc, #180]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
 80036fe:	e01a      	b.n	8003736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003700:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2a      	ldr	r2, [pc, #168]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800370a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe fe76 	bl	80023fc <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003714:	f7fe fe72 	bl	80023fc <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e20e      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003726:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1e0>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d041      	beq.n	80037c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01c      	beq.n	8003784 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374a:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800374c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003750:	4a17      	ldr	r2, [pc, #92]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe fe4f 	bl	80023fc <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003762:	f7fe fe4b 	bl	80023fc <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1e7      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003774:	4b0e      	ldr	r3, [pc, #56]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0ef      	beq.n	8003762 <HAL_RCC_OscConfig+0x22e>
 8003782:	e020      	b.n	80037c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003784:	4b0a      	ldr	r3, [pc, #40]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378a:	4a09      	ldr	r2, [pc, #36]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe fe32 	bl	80023fc <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800379a:	e00d      	b.n	80037b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379c:	f7fe fe2e 	bl	80023fc <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d906      	bls.n	80037b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e1ca      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b8:	4b8c      	ldr	r3, [pc, #560]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ea      	bne.n	800379c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80a6 	beq.w	8003920 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037d8:	4b84      	ldr	r3, [pc, #528]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_OscConfig+0x2b4>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x2b6>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	4b7f      	ldr	r3, [pc, #508]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	4a7e      	ldr	r2, [pc, #504]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037fa:	4b7c      	ldr	r3, [pc, #496]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380a:	4b79      	ldr	r3, [pc, #484]	@ (80039f0 <HAL_RCC_OscConfig+0x4bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d118      	bne.n	8003848 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003816:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCC_OscConfig+0x4bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a75      	ldr	r2, [pc, #468]	@ (80039f0 <HAL_RCC_OscConfig+0x4bc>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7fe fdeb 	bl	80023fc <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fe fde7 	bl	80023fc <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e183      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383c:	4b6c      	ldr	r3, [pc, #432]	@ (80039f0 <HAL_RCC_OscConfig+0x4bc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d108      	bne.n	8003862 <HAL_RCC_OscConfig+0x32e>
 8003850:	4b66      	ldr	r3, [pc, #408]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	4a65      	ldr	r2, [pc, #404]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003860:	e024      	b.n	80038ac <HAL_RCC_OscConfig+0x378>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b05      	cmp	r3, #5
 8003868:	d110      	bne.n	800388c <HAL_RCC_OscConfig+0x358>
 800386a:	4b60      	ldr	r3, [pc, #384]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003870:	4a5e      	ldr	r2, [pc, #376]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800387a:	4b5c      	ldr	r3, [pc, #368]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003880:	4a5a      	ldr	r2, [pc, #360]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800388a:	e00f      	b.n	80038ac <HAL_RCC_OscConfig+0x378>
 800388c:	4b57      	ldr	r3, [pc, #348]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003892:	4a56      	ldr	r2, [pc, #344]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800389c:	4b53      	ldr	r3, [pc, #332]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a2:	4a52      	ldr	r2, [pc, #328]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80038a4:	f023 0304 	bic.w	r3, r3, #4
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d016      	beq.n	80038e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fe fda2 	bl	80023fc <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe fd9e 	bl	80023fc <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e138      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d2:	4b46      	ldr	r3, [pc, #280]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ed      	beq.n	80038bc <HAL_RCC_OscConfig+0x388>
 80038e0:	e015      	b.n	800390e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fe fd8b 	bl	80023fc <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e8:	e00a      	b.n	8003900 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fe fd87 	bl	80023fc <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e121      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003900:	4b3a      	ldr	r3, [pc, #232]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ed      	bne.n	80038ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800390e:	7ffb      	ldrb	r3, [r7, #31]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003914:	4b35      	ldr	r3, [pc, #212]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003918:	4a34      	ldr	r2, [pc, #208]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d03c      	beq.n	80039a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01c      	beq.n	800396e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003934:	4b2d      	ldr	r3, [pc, #180]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800393a:	4a2c      	ldr	r2, [pc, #176]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fe fd5a 	bl	80023fc <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800394c:	f7fe fd56 	bl	80023fc <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0f2      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800395e:	4b23      	ldr	r3, [pc, #140]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003960:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <HAL_RCC_OscConfig+0x418>
 800396c:	e01b      	b.n	80039a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800396e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003970:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fe fd3d 	bl	80023fc <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003986:	f7fe fd39 	bl	80023fc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0d5      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003998:	4b14      	ldr	r3, [pc, #80]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 800399a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ef      	bne.n	8003986 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80c9 	beq.w	8003b42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b0:	4b0e      	ldr	r3, [pc, #56]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	f000 8083 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d15e      	bne.n	8003a84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c6:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <HAL_RCC_OscConfig+0x4b8>)
 80039cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fe fd13 	bl	80023fc <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d8:	e00c      	b.n	80039f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe fd0f 	bl	80023fc <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d905      	bls.n	80039f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e0ab      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f4:	4b55      	ldr	r3, [pc, #340]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ec      	bne.n	80039da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a00:	4b52      	ldr	r3, [pc, #328]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	4b52      	ldr	r3, [pc, #328]	@ (8003b50 <HAL_RCC_OscConfig+0x61c>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6a11      	ldr	r1, [r2, #32]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a10:	3a01      	subs	r2, #1
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	4311      	orrs	r1, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a1a:	0212      	lsls	r2, r2, #8
 8003a1c:	4311      	orrs	r1, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a22:	0852      	lsrs	r2, r2, #1
 8003a24:	3a01      	subs	r2, #1
 8003a26:	0552      	lsls	r2, r2, #21
 8003a28:	4311      	orrs	r1, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a2e:	0852      	lsrs	r2, r2, #1
 8003a30:	3a01      	subs	r2, #1
 8003a32:	0652      	lsls	r2, r2, #25
 8003a34:	4311      	orrs	r1, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a3a:	06d2      	lsls	r2, r2, #27
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	4943      	ldr	r1, [pc, #268]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	4b41      	ldr	r3, [pc, #260]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a40      	ldr	r2, [pc, #256]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a50:	4b3e      	ldr	r3, [pc, #248]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a3d      	ldr	r2, [pc, #244]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fcce 	bl	80023fc <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe fcca 	bl	80023fc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e066      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a76:	4b35      	ldr	r3, [pc, #212]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x530>
 8003a82:	e05e      	b.n	8003b42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a84:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a30      	ldr	r2, [pc, #192]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe fcb4 	bl	80023fc <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fe fcb0 	bl	80023fc <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e04c      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aaa:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ab6:	4b25      	ldr	r3, [pc, #148]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	4924      	ldr	r1, [pc, #144]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003abc:	4b25      	ldr	r3, [pc, #148]	@ (8003b54 <HAL_RCC_OscConfig+0x620>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	60cb      	str	r3, [r1, #12]
 8003ac2:	e03e      	b.n	8003b42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e039      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <HAL_RCC_OscConfig+0x618>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 0203 	and.w	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d12c      	bne.n	8003b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	3b01      	subs	r3, #1
 8003af0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d123      	bne.n	8003b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d11b      	bne.n	8003b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d113      	bne.n	8003b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	3b01      	subs	r3, #1
 8003b24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	3b01      	subs	r3, #1
 8003b38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	019f800c 	.word	0x019f800c
 8003b54:	feeefffc 	.word	0xfeeefffc

08003b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e11e      	b.n	8003dae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b91      	ldr	r3, [pc, #580]	@ (8003db8 <HAL_RCC_ClockConfig+0x260>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d910      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b8e      	ldr	r3, [pc, #568]	@ (8003db8 <HAL_RCC_ClockConfig+0x260>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 020f 	bic.w	r2, r3, #15
 8003b86:	498c      	ldr	r1, [pc, #560]	@ (8003db8 <HAL_RCC_ClockConfig+0x260>)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b8a      	ldr	r3, [pc, #552]	@ (8003db8 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e106      	b.n	8003dae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d073      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d129      	bne.n	8003c08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb4:	4b81      	ldr	r3, [pc, #516]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0f4      	b.n	8003dae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bc4:	f000 f99e 	bl	8003f04 <RCC_GetSysClockFreqFromPLLSource>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc0 <HAL_RCC_ClockConfig+0x268>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d93f      	bls.n	8003c52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d033      	beq.n	8003c52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d12f      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bf2:	4b72      	ldr	r3, [pc, #456]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bfa:	4a70      	ldr	r2, [pc, #448]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e024      	b.n	8003c52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c10:	4b6a      	ldr	r3, [pc, #424]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0c6      	b.n	8003dae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c20:	4b66      	ldr	r3, [pc, #408]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0be      	b.n	8003dae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c30:	f000 f8ce 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4a61      	ldr	r2, [pc, #388]	@ (8003dc0 <HAL_RCC_ClockConfig+0x268>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d909      	bls.n	8003c52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c46:	4a5d      	ldr	r2, [pc, #372]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c4e:	2380      	movs	r3, #128	@ 0x80
 8003c50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b5a      	ldr	r3, [pc, #360]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4957      	ldr	r1, [pc, #348]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c64:	f7fe fbca 	bl	80023fc <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fe fbc6 	bl	80023fc <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e095      	b.n	8003dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b4e      	ldr	r3, [pc, #312]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d023      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cac:	4b43      	ldr	r3, [pc, #268]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a42      	ldr	r2, [pc, #264]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003cb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003cce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b39      	ldr	r3, [pc, #228]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4936      	ldr	r1, [pc, #216]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b80      	cmp	r3, #128	@ 0x80
 8003cec:	d105      	bne.n	8003cfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cee:	4b33      	ldr	r3, [pc, #204]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4a32      	ldr	r2, [pc, #200]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003cf4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8003db8 <HAL_RCC_ClockConfig+0x260>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d21d      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d08:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <HAL_RCC_ClockConfig+0x260>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 020f 	bic.w	r2, r3, #15
 8003d10:	4929      	ldr	r1, [pc, #164]	@ (8003db8 <HAL_RCC_ClockConfig+0x260>)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d18:	f7fe fb70 	bl	80023fc <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fe fb6c 	bl	80023fc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e03b      	b.n	8003dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b20      	ldr	r3, [pc, #128]	@ (8003db8 <HAL_RCC_ClockConfig+0x260>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d1ed      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4917      	ldr	r1, [pc, #92]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	490f      	ldr	r1, [pc, #60]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d82:	f000 f825 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4b0c      	ldr	r3, [pc, #48]	@ (8003dbc <HAL_RCC_ClockConfig+0x264>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	490c      	ldr	r1, [pc, #48]	@ (8003dc4 <HAL_RCC_ClockConfig+0x26c>)
 8003d94:	5ccb      	ldrb	r3, [r1, r3]
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <HAL_RCC_ClockConfig+0x270>)
 8003da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003da2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <HAL_RCC_ClockConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fadc 	bl	8002364 <HAL_InitTick>
 8003dac:	4603      	mov	r3, r0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	04c4b400 	.word	0x04c4b400
 8003dc4:	0800a3f8 	.word	0x0800a3f8
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	20000004 	.word	0x20000004

08003dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d102      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003de2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	e047      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003de8:	4b27      	ldr	r3, [pc, #156]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d102      	bne.n	8003dfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003df4:	4b26      	ldr	r3, [pc, #152]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e03e      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003dfa:	4b23      	ldr	r3, [pc, #140]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d136      	bne.n	8003e74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e10:	4b1d      	ldr	r3, [pc, #116]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d10c      	bne.n	8003e3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e24:	4a1a      	ldr	r2, [pc, #104]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	4a16      	ldr	r2, [pc, #88]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e2e:	68d2      	ldr	r2, [r2, #12]
 8003e30:	0a12      	lsrs	r2, r2, #8
 8003e32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	617b      	str	r3, [r7, #20]
      break;
 8003e3c:	e00c      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e3e:	4a13      	ldr	r2, [pc, #76]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	4a10      	ldr	r2, [pc, #64]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e48:	68d2      	ldr	r2, [r2, #12]
 8003e4a:	0a12      	lsrs	r2, r2, #8
 8003e4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
      break;
 8003e56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e58:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	0e5b      	lsrs	r3, r3, #25
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	3301      	adds	r3, #1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e001      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e78:	693b      	ldr	r3, [r7, #16]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200

08003e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e98:	4b03      	ldr	r3, [pc, #12]	@ (8003ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000000 	.word	0x20000000

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4904      	ldr	r1, [pc, #16]	@ (8003ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800a408 	.word	0x0800a408

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003edc:	f7ff ffda 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0adb      	lsrs	r3, r3, #11
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	@ (8003f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800a408 	.word	0x0800a408

08003f04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d10c      	bne.n	8003f42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f28:	4a17      	ldr	r2, [pc, #92]	@ (8003f88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	4a14      	ldr	r2, [pc, #80]	@ (8003f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f32:	68d2      	ldr	r2, [r2, #12]
 8003f34:	0a12      	lsrs	r2, r2, #8
 8003f36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	617b      	str	r3, [r7, #20]
    break;
 8003f40:	e00c      	b.n	8003f5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f42:	4a12      	ldr	r2, [pc, #72]	@ (8003f8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f4c:	68d2      	ldr	r2, [r2, #12]
 8003f4e:	0a12      	lsrs	r2, r2, #8
 8003f50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
    break;
 8003f5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	0e5b      	lsrs	r3, r3, #25
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f76:	687b      	ldr	r3, [r7, #4]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40021000 	.word	0x40021000
 8003f88:	007a1200 	.word	0x007a1200
 8003f8c:	00f42400 	.word	0x00f42400

08003f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f98:	2300      	movs	r3, #0
 8003f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8098 	beq.w	80040de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb2:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	4b40      	ldr	r3, [pc, #256]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fca:	4b3d      	ldr	r3, [pc, #244]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fda:	4b3a      	ldr	r3, [pc, #232]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a39      	ldr	r2, [pc, #228]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fe6:	f7fe fa09 	bl	80023fc <HAL_GetTick>
 8003fea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fec:	e009      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fe fa05 	bl	80023fc <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d902      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	74fb      	strb	r3, [r7, #19]
        break;
 8004000:	e005      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004002:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0ef      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d159      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004014:	4b2a      	ldr	r3, [pc, #168]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01e      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	d019      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004030:	4b23      	ldr	r3, [pc, #140]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800403c:	4b20      	ldr	r3, [pc, #128]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004042:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800404c:	4b1c      	ldr	r3, [pc, #112]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	4a1b      	ldr	r2, [pc, #108]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800405c:	4a18      	ldr	r2, [pc, #96]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fe f9c5 	bl	80023fc <HAL_GetTick>
 8004072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004074:	e00b      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fe f9c1 	bl	80023fc <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d902      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	74fb      	strb	r3, [r7, #19]
            break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408e:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ec      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a2:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	4903      	ldr	r1, [pc, #12]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040b8:	e008      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	74bb      	strb	r3, [r7, #18]
 80040be:	e005      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040cc:	7c7b      	ldrb	r3, [r7, #17]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4ba6      	ldr	r3, [pc, #664]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	4aa5      	ldr	r2, [pc, #660]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ea:	4ba0      	ldr	r3, [pc, #640]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f023 0203 	bic.w	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	499c      	ldr	r1, [pc, #624]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800410c:	4b97      	ldr	r3, [pc, #604]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 020c 	bic.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	4994      	ldr	r1, [pc, #592]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800412e:	4b8f      	ldr	r3, [pc, #572]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004134:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	498b      	ldr	r1, [pc, #556]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004150:	4b86      	ldr	r3, [pc, #536]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	4983      	ldr	r1, [pc, #524]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004172:	4b7e      	ldr	r3, [pc, #504]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	497a      	ldr	r1, [pc, #488]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004194:	4b75      	ldr	r3, [pc, #468]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	4972      	ldr	r1, [pc, #456]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b6:	4b6d      	ldr	r3, [pc, #436]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4969      	ldr	r1, [pc, #420]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d8:	4b64      	ldr	r3, [pc, #400]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	4961      	ldr	r1, [pc, #388]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041fa:	4b5c      	ldr	r3, [pc, #368]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	4958      	ldr	r1, [pc, #352]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800421c:	4b53      	ldr	r3, [pc, #332]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	4950      	ldr	r1, [pc, #320]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800423a:	d105      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b4b      	ldr	r3, [pc, #300]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a4a      	ldr	r2, [pc, #296]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004246:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004254:	4b45      	ldr	r3, [pc, #276]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	4942      	ldr	r1, [pc, #264]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004272:	d105      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004274:	4b3d      	ldr	r3, [pc, #244]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a3c      	ldr	r2, [pc, #240]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800427e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800428c:	4b37      	ldr	r3, [pc, #220]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	4934      	ldr	r1, [pc, #208]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4b2f      	ldr	r3, [pc, #188]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a2e      	ldr	r2, [pc, #184]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c4:	4b29      	ldr	r3, [pc, #164]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d2:	4926      	ldr	r1, [pc, #152]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b21      	ldr	r3, [pc, #132]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a20      	ldr	r2, [pc, #128]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042fc:	4b1b      	ldr	r3, [pc, #108]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430a:	4918      	ldr	r1, [pc, #96]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b13      	ldr	r3, [pc, #76]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a12      	ldr	r2, [pc, #72]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004326:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004334:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004342:	490a      	ldr	r1, [pc, #40]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004354:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a04      	ldr	r2, [pc, #16]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800435e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004360:	7cbb      	ldrb	r3, [r7, #18]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000

08004370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e09d      	b.n	80044be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004392:	d009      	beq.n	80043a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	61da      	str	r2, [r3, #28]
 800439a:	e005      	b.n	80043a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fd fc54 	bl	8001c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043e8:	d902      	bls.n	80043f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e002      	b.n	80043f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80043fe:	d007      	beq.n	8004410 <HAL_SPI_Init+0xa0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004452:	ea42 0103 	orr.w	r1, r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	f003 0204 	and.w	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800448c:	ea42 0103 	orr.w	r1, r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b088      	sub	sp, #32
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044d6:	f7fd ff91 	bl	80023fc <HAL_GetTick>
 80044da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d001      	beq.n	80044f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	e15c      	b.n	80047aa <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Transmit+0x36>
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e154      	b.n	80047aa <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_SPI_Transmit+0x48>
 800450a:	2302      	movs	r3, #2
 800450c:	e14d      	b.n	80047aa <HAL_SPI_Transmit+0x2e4>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2203      	movs	r2, #3
 800451a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004560:	d10f      	bne.n	8004582 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004580:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458c:	2b40      	cmp	r3, #64	@ 0x40
 800458e:	d007      	beq.n	80045a0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045a8:	d952      	bls.n	8004650 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_SPI_Transmit+0xf2>
 80045b2:	8b7b      	ldrh	r3, [r7, #26]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d145      	bne.n	8004644 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	881a      	ldrh	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	1c9a      	adds	r2, r3, #2
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045dc:	e032      	b.n	8004644 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d112      	bne.n	8004612 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	881a      	ldrh	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fc:	1c9a      	adds	r2, r3, #2
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004610:	e018      	b.n	8004644 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004612:	f7fd fef3 	bl	80023fc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d803      	bhi.n	800462a <HAL_SPI_Transmit+0x164>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Transmit+0x16a>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e0b2      	b.n	80047aa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1c7      	bne.n	80045de <HAL_SPI_Transmit+0x118>
 800464e:	e083      	b.n	8004758 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_SPI_Transmit+0x198>
 8004658:	8b7b      	ldrh	r3, [r7, #26]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d177      	bne.n	800474e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d912      	bls.n	800468e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b02      	subs	r3, #2
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800468c:	e05f      	b.n	800474e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80046b4:	e04b      	b.n	800474e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d12b      	bne.n	800471c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d912      	bls.n	80046f4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d2:	881a      	ldrh	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046de:	1c9a      	adds	r2, r3, #2
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b02      	subs	r3, #2
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046f2:	e02c      	b.n	800474e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	7812      	ldrb	r2, [r2, #0]
 8004700:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800471a:	e018      	b.n	800474e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800471c:	f7fd fe6e 	bl	80023fc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d803      	bhi.n	8004734 <HAL_SPI_Transmit+0x26e>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d102      	bne.n	800473a <HAL_SPI_Transmit+0x274>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e02d      	b.n	80047aa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ae      	bne.n	80046b6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	6839      	ldr	r1, [r7, #0]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f947 	bl	80049f0 <SPI_EndRxTxTransaction>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80047a8:	2300      	movs	r3, #0
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047c4:	f7fd fe1a 	bl	80023fc <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	4413      	add	r3, r2
 80047d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047d4:	f7fd fe12 	bl	80023fc <HAL_GetTick>
 80047d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047da:	4b39      	ldr	r3, [pc, #228]	@ (80048c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	015b      	lsls	r3, r3, #5
 80047e0:	0d1b      	lsrs	r3, r3, #20
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ea:	e054      	b.n	8004896 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d050      	beq.n	8004896 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047f4:	f7fd fe02 	bl	80023fc <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	429a      	cmp	r2, r3
 8004802:	d902      	bls.n	800480a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d13d      	bne.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004818:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004822:	d111      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800482c:	d004      	beq.n	8004838 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004836:	d107      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004846:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004850:	d10f      	bne.n	8004872 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004870:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e017      	b.n	80048b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	3b01      	subs	r3, #1
 8004894:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d19b      	bne.n	80047ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3720      	adds	r7, #32
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000000 	.word	0x20000000

080048c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	@ 0x28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048d6:	f7fd fd91 	bl	80023fc <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	4413      	add	r3, r2
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80048e6:	f7fd fd89 	bl	80023fc <HAL_GetTick>
 80048ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048f4:	4b3d      	ldr	r3, [pc, #244]	@ (80049ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	00da      	lsls	r2, r3, #3
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	0d1b      	lsrs	r3, r3, #20
 8004904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800490c:	e060      	b.n	80049d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004914:	d107      	bne.n	8004926 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004924:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d050      	beq.n	80049d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800492e:	f7fd fd65 	bl	80023fc <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493a:	429a      	cmp	r2, r3
 800493c:	d902      	bls.n	8004944 <SPI_WaitFifoStateUntilTimeout+0x80>
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d13d      	bne.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004952:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800495c:	d111      	bne.n	8004982 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004966:	d004      	beq.n	8004972 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004970:	d107      	bne.n	8004982 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004980:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498a:	d10f      	bne.n	80049ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e010      	b.n	80049e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d196      	bne.n	800490e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3728      	adds	r7, #40	@ 0x28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000000 	.word	0x20000000

080049f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff ff5b 	bl	80048c4 <SPI_WaitFifoStateUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a18:	f043 0220 	orr.w	r2, r3, #32
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e027      	b.n	8004a74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2180      	movs	r1, #128	@ 0x80
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fec0 	bl	80047b4 <SPI_WaitFlagStateUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e014      	b.n	8004a74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ff34 	bl	80048c4 <SPI_WaitFifoStateUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e000      	b.n	8004a74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e042      	b.n	8004b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fd fb19 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2224      	movs	r2, #36	@ 0x24
 8004aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 ff30 	bl	800592c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fc61 	bl	8005394 <UART_SetConfig>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e01b      	b.n	8004b14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 ffaf 	bl	8005a70 <UART_CheckIdleState>
 8004b12:	4603      	mov	r3, r0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	@ 0x28
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d17b      	bne.n	8004c2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_UART_Transmit+0x26>
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e074      	b.n	8004c30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2221      	movs	r2, #33	@ 0x21
 8004b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b56:	f7fd fc51 	bl	80023fc <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b74:	d108      	bne.n	8004b88 <HAL_UART_Transmit+0x6c>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	e003      	b.n	8004b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b90:	e030      	b.n	8004bf4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2180      	movs	r1, #128	@ 0x80
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f001 f811 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e03d      	b.n	8004c30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10b      	bne.n	8004bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	e007      	b.n	8004be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	3301      	adds	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1c8      	bne.n	8004b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2200      	movs	r2, #0
 8004c08:	2140      	movs	r1, #64	@ 0x40
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 ffda 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e006      	b.n	8004c30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e000      	b.n	8004c30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
  }
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	@ 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d137      	bne.n	8004cc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_UART_Receive_IT+0x24>
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e030      	b.n	8004cc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <HAL_UART_Receive_IT+0x94>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01f      	beq.n	8004cb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d018      	beq.n	8004cb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	69f9      	ldr	r1, [r7, #28]
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e6      	bne.n	8004c7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fff2 	bl	8005ca0 <UART_Start_Receive_IT>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	e000      	b.n	8004cc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3728      	adds	r7, #40	@ 0x28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40008000 	.word	0x40008000

08004cd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004cfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004cfe:	4013      	ands	r3, r2
 8004d00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11b      	bne.n	8004d44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d105      	bne.n	8004d30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8300 	beq.w	800533a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
      }
      return;
 8004d42:	e2fa      	b.n	800533a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8123 	beq.w	8004f94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d52:	4b8d      	ldr	r3, [pc, #564]	@ (8004f88 <HAL_UART_IRQHandler+0x2b8>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f8c <HAL_UART_IRQHandler+0x2bc>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8116 	beq.w	8004f94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <HAL_UART_IRQHandler+0xc8>
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2201      	movs	r2, #1
 8004d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f043 0201 	orr.w	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d011      	beq.n	8004dc8 <HAL_UART_IRQHandler+0xf8>
 8004da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00b      	beq.n	8004dc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2202      	movs	r2, #2
 8004db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d011      	beq.n	8004df8 <HAL_UART_IRQHandler+0x128>
 8004dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2204      	movs	r2, #4
 8004de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dee:	f043 0202 	orr.w	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e14:	4b5c      	ldr	r3, [pc, #368]	@ (8004f88 <HAL_UART_IRQHandler+0x2b8>)
 8004e16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2208      	movs	r2, #8
 8004e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2a:	f043 0208 	orr.w	r2, r3, #8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <HAL_UART_IRQHandler+0x196>
 8004e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8266 	beq.w	800533e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d013      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eba:	2b40      	cmp	r3, #64	@ 0x40
 8004ebc:	d005      	beq.n	8004eca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d054      	beq.n	8004f74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f001 f80a 	bl	8005ee4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b40      	cmp	r3, #64	@ 0x40
 8004edc:	d146      	bne.n	8004f6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1d9      	bne.n	8004ede <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d017      	beq.n	8004f64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3a:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <HAL_UART_IRQHandler+0x2c0>)
 8004f3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fd fbef 	bl	8002728 <HAL_DMA_Abort_IT>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d019      	beq.n	8004f84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f62:	e00f      	b.n	8004f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f9ff 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6a:	e00b      	b.n	8004f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9fb 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f72:	e007      	b.n	8004f84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f9f7 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004f82:	e1dc      	b.n	800533e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	bf00      	nop
    return;
 8004f86:	e1da      	b.n	800533e <HAL_UART_IRQHandler+0x66e>
 8004f88:	10000001 	.word	0x10000001
 8004f8c:	04000120 	.word	0x04000120
 8004f90:	08005fb1 	.word	0x08005fb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f040 8170 	bne.w	800527e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8169 	beq.w	800527e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8162 	beq.w	800527e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	f040 80d8 	bne.w	8005182 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80af 	beq.w	8005148 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ff0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	f080 80a7 	bcs.w	8005148 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005000:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	f040 8087 	bne.w	8005126 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800502c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005046:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800504e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800505a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1da      	bne.n	8005018 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3308      	adds	r3, #8
 8005068:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3308      	adds	r3, #8
 8005082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005086:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800508a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800508e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005098:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e1      	bne.n	8005062 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3308      	adds	r3, #8
 80050a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e3      	bne.n	800509e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f4:	f023 0310 	bic.w	r3, r3, #16
 80050f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005106:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005108:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800510c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e4      	bne.n	80050e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005120:	4618      	mov	r0, r3
 8005122:	f7fd faa8 	bl	8002676 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005138:	b29b      	uxth	r3, r3
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	b29b      	uxth	r3, r3
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f91b 	bl	800537c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005146:	e0fc      	b.n	8005342 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800514e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005152:	429a      	cmp	r2, r3
 8005154:	f040 80f5 	bne.w	8005342 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	f040 80eb 	bne.w	8005342 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8fe 	bl	800537c <HAL_UARTEx_RxEventCallback>
      return;
 8005180:	e0df      	b.n	8005342 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800518e:	b29b      	uxth	r3, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80d1 	beq.w	8005346 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80051a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80cc 	beq.w	8005346 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e4      	bne.n	80051ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3308      	adds	r3, #8
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	623b      	str	r3, [r7, #32]
   return(result);
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800520c:	633a      	str	r2, [r7, #48]	@ 0x30
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e1      	bne.n	80051e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	60fb      	str	r3, [r7, #12]
   return(result);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f023 0310 	bic.w	r3, r3, #16
 8005248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	69b9      	ldr	r1, [r7, #24]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	617b      	str	r3, [r7, #20]
   return(result);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e4      	bne.n	8005234 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f880 	bl	800537c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800527c:	e063      	b.n	8005346 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <HAL_UART_IRQHandler+0x5d8>
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800528e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800529e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f001 fc4c 	bl	8006b3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052a6:	e051      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d014      	beq.n	80052de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d03a      	beq.n	800534a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
    }
    return;
 80052dc:	e035      	b.n	800534a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_UART_IRQHandler+0x62e>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fe6c 	bl	8005fd4 <UART_EndTransmit_IT>
    return;
 80052fc:	e026      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_UART_IRQHandler+0x64e>
 800530a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 fc25 	bl	8006b66 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800531c:	e016      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005322:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d010      	beq.n	800534c <HAL_UART_IRQHandler+0x67c>
 800532a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532e:	2b00      	cmp	r3, #0
 8005330:	da0c      	bge.n	800534c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 fc0d 	bl	8006b52 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005338:	e008      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
      return;
 800533a:	bf00      	nop
 800533c:	e006      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
    return;
 800533e:	bf00      	nop
 8005340:	e004      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
      return;
 8005342:	bf00      	nop
 8005344:	e002      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
      return;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <HAL_UART_IRQHandler+0x67c>
    return;
 800534a:	bf00      	nop
  }
}
 800534c:	37e8      	adds	r7, #232	@ 0xe8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop

08005354 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005398:	b08c      	sub	sp, #48	@ 0x30
 800539a:	af00      	add	r7, sp, #0
 800539c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4bab      	ldr	r3, [pc, #684]	@ (8005670 <UART_SetConfig+0x2dc>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4aa0      	ldr	r2, [pc, #640]	@ (8005674 <UART_SetConfig+0x2e0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053fc:	4313      	orrs	r3, r2
 80053fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800540a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005414:	430b      	orrs	r3, r1
 8005416:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	f023 010f 	bic.w	r1, r3, #15
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a91      	ldr	r2, [pc, #580]	@ (8005678 <UART_SetConfig+0x2e4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d125      	bne.n	8005484 <UART_SetConfig+0xf0>
 8005438:	4b90      	ldr	r3, [pc, #576]	@ (800567c <UART_SetConfig+0x2e8>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d81a      	bhi.n	800547c <UART_SetConfig+0xe8>
 8005446:	a201      	add	r2, pc, #4	@ (adr r2, 800544c <UART_SetConfig+0xb8>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	0800545d 	.word	0x0800545d
 8005450:	0800546d 	.word	0x0800546d
 8005454:	08005465 	.word	0x08005465
 8005458:	08005475 	.word	0x08005475
 800545c:	2301      	movs	r3, #1
 800545e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005462:	e0d6      	b.n	8005612 <UART_SetConfig+0x27e>
 8005464:	2302      	movs	r3, #2
 8005466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546a:	e0d2      	b.n	8005612 <UART_SetConfig+0x27e>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005472:	e0ce      	b.n	8005612 <UART_SetConfig+0x27e>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547a:	e0ca      	b.n	8005612 <UART_SetConfig+0x27e>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005482:	e0c6      	b.n	8005612 <UART_SetConfig+0x27e>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a7d      	ldr	r2, [pc, #500]	@ (8005680 <UART_SetConfig+0x2ec>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d138      	bne.n	8005500 <UART_SetConfig+0x16c>
 800548e:	4b7b      	ldr	r3, [pc, #492]	@ (800567c <UART_SetConfig+0x2e8>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b0c      	cmp	r3, #12
 800549a:	d82d      	bhi.n	80054f8 <UART_SetConfig+0x164>
 800549c:	a201      	add	r2, pc, #4	@ (adr r2, 80054a4 <UART_SetConfig+0x110>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054d9 	.word	0x080054d9
 80054a8:	080054f9 	.word	0x080054f9
 80054ac:	080054f9 	.word	0x080054f9
 80054b0:	080054f9 	.word	0x080054f9
 80054b4:	080054e9 	.word	0x080054e9
 80054b8:	080054f9 	.word	0x080054f9
 80054bc:	080054f9 	.word	0x080054f9
 80054c0:	080054f9 	.word	0x080054f9
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	080054f9 	.word	0x080054f9
 80054cc:	080054f9 	.word	0x080054f9
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	080054f1 	.word	0x080054f1
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054de:	e098      	b.n	8005612 <UART_SetConfig+0x27e>
 80054e0:	2302      	movs	r3, #2
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	e094      	b.n	8005612 <UART_SetConfig+0x27e>
 80054e8:	2304      	movs	r3, #4
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ee:	e090      	b.n	8005612 <UART_SetConfig+0x27e>
 80054f0:	2308      	movs	r3, #8
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f6:	e08c      	b.n	8005612 <UART_SetConfig+0x27e>
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fe:	e088      	b.n	8005612 <UART_SetConfig+0x27e>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a5f      	ldr	r2, [pc, #380]	@ (8005684 <UART_SetConfig+0x2f0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d125      	bne.n	8005556 <UART_SetConfig+0x1c2>
 800550a:	4b5c      	ldr	r3, [pc, #368]	@ (800567c <UART_SetConfig+0x2e8>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005510:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005514:	2b30      	cmp	r3, #48	@ 0x30
 8005516:	d016      	beq.n	8005546 <UART_SetConfig+0x1b2>
 8005518:	2b30      	cmp	r3, #48	@ 0x30
 800551a:	d818      	bhi.n	800554e <UART_SetConfig+0x1ba>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d00a      	beq.n	8005536 <UART_SetConfig+0x1a2>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d814      	bhi.n	800554e <UART_SetConfig+0x1ba>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <UART_SetConfig+0x19a>
 8005528:	2b10      	cmp	r3, #16
 800552a:	d008      	beq.n	800553e <UART_SetConfig+0x1aa>
 800552c:	e00f      	b.n	800554e <UART_SetConfig+0x1ba>
 800552e:	2300      	movs	r3, #0
 8005530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005534:	e06d      	b.n	8005612 <UART_SetConfig+0x27e>
 8005536:	2302      	movs	r3, #2
 8005538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553c:	e069      	b.n	8005612 <UART_SetConfig+0x27e>
 800553e:	2304      	movs	r3, #4
 8005540:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005544:	e065      	b.n	8005612 <UART_SetConfig+0x27e>
 8005546:	2308      	movs	r3, #8
 8005548:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554c:	e061      	b.n	8005612 <UART_SetConfig+0x27e>
 800554e:	2310      	movs	r3, #16
 8005550:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005554:	e05d      	b.n	8005612 <UART_SetConfig+0x27e>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a4b      	ldr	r2, [pc, #300]	@ (8005688 <UART_SetConfig+0x2f4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d125      	bne.n	80055ac <UART_SetConfig+0x218>
 8005560:	4b46      	ldr	r3, [pc, #280]	@ (800567c <UART_SetConfig+0x2e8>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800556a:	2bc0      	cmp	r3, #192	@ 0xc0
 800556c:	d016      	beq.n	800559c <UART_SetConfig+0x208>
 800556e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005570:	d818      	bhi.n	80055a4 <UART_SetConfig+0x210>
 8005572:	2b80      	cmp	r3, #128	@ 0x80
 8005574:	d00a      	beq.n	800558c <UART_SetConfig+0x1f8>
 8005576:	2b80      	cmp	r3, #128	@ 0x80
 8005578:	d814      	bhi.n	80055a4 <UART_SetConfig+0x210>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <UART_SetConfig+0x1f0>
 800557e:	2b40      	cmp	r3, #64	@ 0x40
 8005580:	d008      	beq.n	8005594 <UART_SetConfig+0x200>
 8005582:	e00f      	b.n	80055a4 <UART_SetConfig+0x210>
 8005584:	2300      	movs	r3, #0
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558a:	e042      	b.n	8005612 <UART_SetConfig+0x27e>
 800558c:	2302      	movs	r3, #2
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e03e      	b.n	8005612 <UART_SetConfig+0x27e>
 8005594:	2304      	movs	r3, #4
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559a:	e03a      	b.n	8005612 <UART_SetConfig+0x27e>
 800559c:	2308      	movs	r3, #8
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a2:	e036      	b.n	8005612 <UART_SetConfig+0x27e>
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055aa:	e032      	b.n	8005612 <UART_SetConfig+0x27e>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a30      	ldr	r2, [pc, #192]	@ (8005674 <UART_SetConfig+0x2e0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d12a      	bne.n	800560c <UART_SetConfig+0x278>
 80055b6:	4b31      	ldr	r3, [pc, #196]	@ (800567c <UART_SetConfig+0x2e8>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055c4:	d01a      	beq.n	80055fc <UART_SetConfig+0x268>
 80055c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055ca:	d81b      	bhi.n	8005604 <UART_SetConfig+0x270>
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d0:	d00c      	beq.n	80055ec <UART_SetConfig+0x258>
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d6:	d815      	bhi.n	8005604 <UART_SetConfig+0x270>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <UART_SetConfig+0x250>
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e0:	d008      	beq.n	80055f4 <UART_SetConfig+0x260>
 80055e2:	e00f      	b.n	8005604 <UART_SetConfig+0x270>
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ea:	e012      	b.n	8005612 <UART_SetConfig+0x27e>
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f2:	e00e      	b.n	8005612 <UART_SetConfig+0x27e>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fa:	e00a      	b.n	8005612 <UART_SetConfig+0x27e>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005602:	e006      	b.n	8005612 <UART_SetConfig+0x27e>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560a:	e002      	b.n	8005612 <UART_SetConfig+0x27e>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <UART_SetConfig+0x2e0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	f040 80a8 	bne.w	800576e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800561e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005622:	2b08      	cmp	r3, #8
 8005624:	d834      	bhi.n	8005690 <UART_SetConfig+0x2fc>
 8005626:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <UART_SetConfig+0x298>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005651 	.word	0x08005651
 8005630:	08005691 	.word	0x08005691
 8005634:	08005659 	.word	0x08005659
 8005638:	08005691 	.word	0x08005691
 800563c:	0800565f 	.word	0x0800565f
 8005640:	08005691 	.word	0x08005691
 8005644:	08005691 	.word	0x08005691
 8005648:	08005691 	.word	0x08005691
 800564c:	08005667 	.word	0x08005667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005650:	f7fe fc2c 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8005654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005656:	e021      	b.n	800569c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b0c      	ldr	r3, [pc, #48]	@ (800568c <UART_SetConfig+0x2f8>)
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800565c:	e01e      	b.n	800569c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7fe fbb7 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8005662:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005664:	e01a      	b.n	800569c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800566c:	e016      	b.n	800569c <UART_SetConfig+0x308>
 800566e:	bf00      	nop
 8005670:	cfff69f3 	.word	0xcfff69f3
 8005674:	40008000 	.word	0x40008000
 8005678:	40013800 	.word	0x40013800
 800567c:	40021000 	.word	0x40021000
 8005680:	40004400 	.word	0x40004400
 8005684:	40004800 	.word	0x40004800
 8005688:	40004c00 	.word	0x40004c00
 800568c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800569a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 812a 	beq.w	80058f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	4a9e      	ldr	r2, [pc, #632]	@ (8005924 <UART_SetConfig+0x590>)
 80056aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ae:	461a      	mov	r2, r3
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	4413      	add	r3, r2
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d305      	bcc.n	80056d4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d903      	bls.n	80056dc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056da:	e10d      	b.n	80058f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	2200      	movs	r2, #0
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	60fa      	str	r2, [r7, #12]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	4a8e      	ldr	r2, [pc, #568]	@ (8005924 <UART_SetConfig+0x590>)
 80056ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2200      	movs	r2, #0
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056fe:	f7fb fa7b 	bl	8000bf8 <__aeabi_uldivmod>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	020b      	lsls	r3, r1, #8
 8005714:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005718:	0202      	lsls	r2, r0, #8
 800571a:	6979      	ldr	r1, [r7, #20]
 800571c:	6849      	ldr	r1, [r1, #4]
 800571e:	0849      	lsrs	r1, r1, #1
 8005720:	2000      	movs	r0, #0
 8005722:	460c      	mov	r4, r1
 8005724:	4605      	mov	r5, r0
 8005726:	eb12 0804 	adds.w	r8, r2, r4
 800572a:	eb43 0905 	adc.w	r9, r3, r5
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	469a      	mov	sl, r3
 8005736:	4693      	mov	fp, r2
 8005738:	4652      	mov	r2, sl
 800573a:	465b      	mov	r3, fp
 800573c:	4640      	mov	r0, r8
 800573e:	4649      	mov	r1, r9
 8005740:	f7fb fa5a 	bl	8000bf8 <__aeabi_uldivmod>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4613      	mov	r3, r2
 800574a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005752:	d308      	bcc.n	8005766 <UART_SetConfig+0x3d2>
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575a:	d204      	bcs.n	8005766 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	60da      	str	r2, [r3, #12]
 8005764:	e0c8      	b.n	80058f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800576c:	e0c4      	b.n	80058f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005776:	d167      	bne.n	8005848 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005778:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800577c:	2b08      	cmp	r3, #8
 800577e:	d828      	bhi.n	80057d2 <UART_SetConfig+0x43e>
 8005780:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <UART_SetConfig+0x3f4>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057bd 	.word	0x080057bd
 8005794:	080057d3 	.word	0x080057d3
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057d3 	.word	0x080057d3
 80057a0:	080057d3 	.word	0x080057d3
 80057a4:	080057d3 	.word	0x080057d3
 80057a8:	080057cb 	.word	0x080057cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ac:	f7fe fb7e 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 80057b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057b2:	e014      	b.n	80057de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057b4:	f7fe fb90 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 80057b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057ba:	e010      	b.n	80057de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005928 <UART_SetConfig+0x594>)
 80057be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057c0:	e00d      	b.n	80057de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c2:	f7fe fb05 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 80057c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057c8:	e009      	b.n	80057de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057d0:	e005      	b.n	80057de <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8089 	beq.w	80058f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005924 <UART_SetConfig+0x590>)
 80057ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f0:	461a      	mov	r2, r3
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f8:	005a      	lsls	r2, r3, #1
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	441a      	add	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2b0f      	cmp	r3, #15
 8005810:	d916      	bls.n	8005840 <UART_SetConfig+0x4ac>
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005818:	d212      	bcs.n	8005840 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f023 030f 	bic.w	r3, r3, #15
 8005822:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	b29a      	uxth	r2, r3
 8005830:	8bfb      	ldrh	r3, [r7, #30]
 8005832:	4313      	orrs	r3, r2
 8005834:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	8bfa      	ldrh	r2, [r7, #30]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	e05b      	b.n	80058f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005846:	e057      	b.n	80058f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005848:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800584c:	2b08      	cmp	r3, #8
 800584e:	d828      	bhi.n	80058a2 <UART_SetConfig+0x50e>
 8005850:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <UART_SetConfig+0x4c4>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005893 	.word	0x08005893
 800586c:	080058a3 	.word	0x080058a3
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058a3 	.word	0x080058a3
 8005878:	0800589b 	.word	0x0800589b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fe fb16 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8005880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005882:	e014      	b.n	80058ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fe fb28 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8005888:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800588a:	e010      	b.n	80058ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800588c:	4b26      	ldr	r3, [pc, #152]	@ (8005928 <UART_SetConfig+0x594>)
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005890:	e00d      	b.n	80058ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005892:	f7fe fa9d 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8005896:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058a0:	e005      	b.n	80058ae <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058ac:	bf00      	nop
    }

    if (pclk != 0U)
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d021      	beq.n	80058f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005924 <UART_SetConfig+0x590>)
 80058ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058be:	461a      	mov	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	441a      	add	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d909      	bls.n	80058f2 <UART_SetConfig+0x55e>
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e4:	d205      	bcs.n	80058f2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e002      	b.n	80058f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2201      	movs	r2, #1
 8005904:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2200      	movs	r2, #0
 800590c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005914:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005918:	4618      	mov	r0, r3
 800591a:	3730      	adds	r7, #48	@ 0x30
 800591c:	46bd      	mov	sp, r7
 800591e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005922:	bf00      	nop
 8005924:	0800a410 	.word	0x0800a410
 8005928:	00f42400 	.word	0x00f42400

0800592c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a2a:	d10a      	bne.n	8005a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b098      	sub	sp, #96	@ 0x60
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a80:	f7fc fcbc 	bl	80023fc <HAL_GetTick>
 8005a84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d12f      	bne.n	8005af4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f88e 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d022      	beq.n	8005af4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ac2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ace:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e6      	bne.n	8005aae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e063      	b.n	8005bbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d149      	bne.n	8005b96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f857 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d03c      	beq.n	8005b96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	623b      	str	r3, [r7, #32]
   return(result);
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e6      	bne.n	8005b1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3308      	adds	r3, #8
 8005b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b6e:	61fa      	str	r2, [r7, #28]
 8005b70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	69b9      	ldr	r1, [r7, #24]
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e5      	bne.n	8005b4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e012      	b.n	8005bbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3758      	adds	r7, #88	@ 0x58
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd4:	e04f      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d04b      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fc fc0d 	bl	80023fc <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e04e      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d037      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b80      	cmp	r3, #128	@ 0x80
 8005c0a:	d034      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b40      	cmp	r3, #64	@ 0x40
 8005c10:	d031      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d110      	bne.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2208      	movs	r2, #8
 8005c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f95b 	bl	8005ee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2208      	movs	r2, #8
 8005c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e029      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c50:	d111      	bne.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f941 	bl	8005ee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e00f      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	bf0c      	ite	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	2300      	movne	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d0a0      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b0a3      	sub	sp, #140	@ 0x8c
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	88fa      	ldrh	r2, [r7, #6]
 8005cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd2:	d10e      	bne.n	8005cf2 <UART_Start_Receive_IT+0x52>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <UART_Start_Receive_IT+0x48>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ce6:	e02d      	b.n	8005d44 <UART_Start_Receive_IT+0xa4>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	22ff      	movs	r2, #255	@ 0xff
 8005cec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cf0:	e028      	b.n	8005d44 <UART_Start_Receive_IT+0xa4>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10d      	bne.n	8005d16 <UART_Start_Receive_IT+0x76>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <UART_Start_Receive_IT+0x6c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	22ff      	movs	r2, #255	@ 0xff
 8005d06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d0a:	e01b      	b.n	8005d44 <UART_Start_Receive_IT+0xa4>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	227f      	movs	r2, #127	@ 0x7f
 8005d10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d14:	e016      	b.n	8005d44 <UART_Start_Receive_IT+0xa4>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d1e:	d10d      	bne.n	8005d3c <UART_Start_Receive_IT+0x9c>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <UART_Start_Receive_IT+0x92>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	227f      	movs	r2, #127	@ 0x7f
 8005d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d30:	e008      	b.n	8005d44 <UART_Start_Receive_IT+0xa4>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	223f      	movs	r2, #63	@ 0x3f
 8005d36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d3a:	e003      	b.n	8005d44 <UART_Start_Receive_IT+0xa4>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2222      	movs	r2, #34	@ 0x22
 8005d50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005d64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005d78:	673a      	str	r2, [r7, #112]	@ 0x70
 8005d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005d7e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005d86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e3      	bne.n	8005d54 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d94:	d14f      	bne.n	8005e36 <UART_Start_Receive_IT+0x196>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d349      	bcc.n	8005e36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005daa:	d107      	bne.n	8005dbc <UART_Start_Receive_IT+0x11c>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a47      	ldr	r2, [pc, #284]	@ (8005ed4 <UART_Start_Receive_IT+0x234>)
 8005db8:	675a      	str	r2, [r3, #116]	@ 0x74
 8005dba:	e002      	b.n	8005dc2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4a46      	ldr	r2, [pc, #280]	@ (8005ed8 <UART_Start_Receive_IT+0x238>)
 8005dc0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01a      	beq.n	8005e00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd2:	e853 3f00 	ldrex	r3, [r3]
 8005dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005df2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e4      	bne.n	8005dca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3308      	adds	r3, #8
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005e20:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005e22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_Start_Receive_IT+0x160>
 8005e34:	e046      	b.n	8005ec4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3e:	d107      	bne.n	8005e50 <UART_Start_Receive_IT+0x1b0>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a24      	ldr	r2, [pc, #144]	@ (8005edc <UART_Start_Receive_IT+0x23c>)
 8005e4c:	675a      	str	r2, [r3, #116]	@ 0x74
 8005e4e:	e002      	b.n	8005e56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a23      	ldr	r2, [pc, #140]	@ (8005ee0 <UART_Start_Receive_IT+0x240>)
 8005e54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d019      	beq.n	8005e92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005e72:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e6      	bne.n	8005e5e <UART_Start_Receive_IT+0x1be>
 8005e90:	e018      	b.n	8005ec4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f043 0320 	orr.w	r3, r3, #32
 8005ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eb0:	623b      	str	r3, [r7, #32]
 8005eb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	69f9      	ldr	r1, [r7, #28]
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e6      	bne.n	8005e92 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	378c      	adds	r7, #140	@ 0x8c
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	08006701 	.word	0x08006701
 8005ed8:	0800639d 	.word	0x0800639d
 8005edc:	080061e5 	.word	0x080061e5
 8005ee0:	0800602d 	.word	0x0800602d

08005ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b095      	sub	sp, #84	@ 0x54
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e6      	bne.n	8005eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e3      	bne.n	8005f1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d118      	bne.n	8005f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0310 	bic.w	r3, r3, #16
 8005f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6979      	ldr	r1, [r7, #20]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e6      	bne.n	8005f5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fa4:	bf00      	nop
 8005fa6:	3754      	adds	r7, #84	@ 0x54
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff f9ce 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6979      	ldr	r1, [r7, #20]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	613b      	str	r3, [r7, #16]
   return(result);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e6      	bne.n	8005fdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff f999 	bl	8005354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006022:	bf00      	nop
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b09c      	sub	sp, #112	@ 0x70
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800603a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006044:	2b22      	cmp	r3, #34	@ 0x22
 8006046:	f040 80be 	bne.w	80061c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006050:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006054:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006058:	b2d9      	uxtb	r1, r3
 800605a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800605e:	b2da      	uxtb	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006064:	400a      	ands	r2, r1
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	f040 80a1 	bne.w	80061d6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e6      	bne.n	8006094 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80060e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e5      	bne.n	80060c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a33      	ldr	r2, [pc, #204]	@ (80061e0 <UART_RxISR_8BIT+0x1b4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d01f      	beq.n	8006158 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	623b      	str	r3, [r7, #32]
   return(result);
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800613a:	663b      	str	r3, [r7, #96]	@ 0x60
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006144:	633b      	str	r3, [r7, #48]	@ 0x30
 8006146:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800614a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d12e      	bne.n	80061be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	60fb      	str	r3, [r7, #12]
   return(result);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0310 	bic.w	r3, r3, #16
 800617a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	69b9      	ldr	r1, [r7, #24]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	617b      	str	r3, [r7, #20]
   return(result);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e6      	bne.n	8006166 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d103      	bne.n	80061ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2210      	movs	r2, #16
 80061ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff f8e0 	bl	800537c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061bc:	e00b      	b.n	80061d6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fb f9f0 	bl	80015a4 <HAL_UART_RxCpltCallback>
}
 80061c4:	e007      	b.n	80061d6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699a      	ldr	r2, [r3, #24]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0208 	orr.w	r2, r2, #8
 80061d4:	619a      	str	r2, [r3, #24]
}
 80061d6:	bf00      	nop
 80061d8:	3770      	adds	r7, #112	@ 0x70
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	40008000 	.word	0x40008000

080061e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b09c      	sub	sp, #112	@ 0x70
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80061f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061fc:	2b22      	cmp	r3, #34	@ 0x22
 80061fe:	f040 80be 	bne.w	800637e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006210:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006212:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006216:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800621a:	4013      	ands	r3, r2
 800621c:	b29a      	uxth	r2, r3
 800621e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006220:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006226:	1c9a      	adds	r2, r3, #2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 80a1 	bne.w	800638e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800625a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800625c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006260:	667b      	str	r3, [r7, #100]	@ 0x64
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800626a:	657b      	str	r3, [r7, #84]	@ 0x54
 800626c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006270:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e6      	bne.n	800624c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3308      	adds	r3, #8
 8006284:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	663b      	str	r3, [r7, #96]	@ 0x60
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800629e:	643a      	str	r2, [r7, #64]	@ 0x40
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e5      	bne.n	800627e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a33      	ldr	r2, [pc, #204]	@ (8006398 <UART_RxISR_16BIT+0x1b4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d01f      	beq.n	8006310 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d018      	beq.n	8006310 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062fe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e6      	bne.n	80062de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d12e      	bne.n	8006376 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	60bb      	str	r3, [r7, #8]
   return(result);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6979      	ldr	r1, [r7, #20]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	613b      	str	r3, [r7, #16]
   return(result);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b10      	cmp	r3, #16
 800635c:	d103      	bne.n	8006366 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2210      	movs	r2, #16
 8006364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff f804 	bl	800537c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006374:	e00b      	b.n	800638e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fb f914 	bl	80015a4 <HAL_UART_RxCpltCallback>
}
 800637c:	e007      	b.n	800638e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0208 	orr.w	r2, r2, #8
 800638c:	619a      	str	r2, [r3, #24]
}
 800638e:	bf00      	nop
 8006390:	3770      	adds	r7, #112	@ 0x70
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40008000 	.word	0x40008000

0800639c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b0ac      	sub	sp, #176	@ 0xb0
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80063aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063d2:	2b22      	cmp	r3, #34	@ 0x22
 80063d4:	f040 8183 	bne.w	80066de <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80063de:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063e2:	e126      	b.n	8006632 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80063f2:	b2d9      	uxtb	r1, r3
 80063f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fe:	400a      	ands	r2, r1
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800642a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	2b00      	cmp	r3, #0
 8006434:	d053      	beq.n	80064de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d011      	beq.n	8006466 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2201      	movs	r2, #1
 8006454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d011      	beq.n	8006496 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2202      	movs	r2, #2
 8006484:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648c:	f043 0204 	orr.w	r2, r3, #4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d011      	beq.n	80064c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80064a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2204      	movs	r2, #4
 80064b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064bc:	f043 0202 	orr.w	r2, r3, #2
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d006      	beq.n	80064de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7fe ff49 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f040 80a3 	bne.w	8006632 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80064fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800650e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006510:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006514:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800651c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e4      	bne.n	80064ec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3308      	adds	r3, #8
 8006528:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800654a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800654c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006550:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e1      	bne.n	8006522 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a60      	ldr	r2, [pc, #384]	@ (80066f8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d021      	beq.n	80065c0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01a      	beq.n	80065c0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800659a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800659e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80065ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80065ae:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80065ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e4      	bne.n	800658a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d130      	bne.n	800662a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	f023 0310 	bic.w	r3, r3, #16
 80065e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e4      	bne.n	80065ce <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b10      	cmp	r3, #16
 8006610:	d103      	bne.n	800661a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2210      	movs	r2, #16
 8006618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fe feaa 	bl	800537c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006628:	e00e      	b.n	8006648 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fa ffba 	bl	80015a4 <HAL_UART_RxCpltCallback>
        break;
 8006630:	e00a      	b.n	8006648 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006632:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006636:	2b00      	cmp	r3, #0
 8006638:	d006      	beq.n	8006648 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800663a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	f47f aece 	bne.w	80063e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800664e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006652:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006656:	2b00      	cmp	r3, #0
 8006658:	d049      	beq.n	80066ee <UART_RxISR_8BIT_FIFOEN+0x352>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006660:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006664:	429a      	cmp	r2, r3
 8006666:	d242      	bcs.n	80066ee <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	61fb      	str	r3, [r7, #28]
   return(result);
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800667e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800668c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800668e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e3      	bne.n	8006668 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a16      	ldr	r2, [pc, #88]	@ (80066fc <UART_RxISR_8BIT_FIFOEN+0x360>)
 80066a4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f043 0320 	orr.w	r3, r3, #32
 80066ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6979      	ldr	r1, [r7, #20]
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	613b      	str	r3, [r7, #16]
   return(result);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e4      	bne.n	80066a6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066dc:	e007      	b.n	80066ee <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0208 	orr.w	r2, r2, #8
 80066ec:	619a      	str	r2, [r3, #24]
}
 80066ee:	bf00      	nop
 80066f0:	37b0      	adds	r7, #176	@ 0xb0
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40008000 	.word	0x40008000
 80066fc:	0800602d 	.word	0x0800602d

08006700 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b0ae      	sub	sp, #184	@ 0xb8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800670e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006736:	2b22      	cmp	r3, #34	@ 0x22
 8006738:	f040 8187 	bne.w	8006a4a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006742:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006746:	e12a      	b.n	800699e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800675a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800675e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006762:	4013      	ands	r3, r2
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800676a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006770:	1c9a      	adds	r2, r3, #2
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b00      	cmp	r3, #0
 800679c:	d053      	beq.n	8006846 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800679e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d011      	beq.n	80067ce <UART_RxISR_16BIT_FIFOEN+0xce>
 80067aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2201      	movs	r2, #1
 80067bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c4:	f043 0201 	orr.w	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d011      	beq.n	80067fe <UART_RxISR_16BIT_FIFOEN+0xfe>
 80067da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2202      	movs	r2, #2
 80067ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f4:	f043 0204 	orr.w	r2, r3, #4
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d011      	beq.n	800682e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800680a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2204      	movs	r2, #4
 800681c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006824:	f043 0202 	orr.w	r2, r3, #2
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006834:	2b00      	cmp	r3, #0
 8006836:	d006      	beq.n	8006846 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fe fd95 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	f040 80a5 	bne.w	800699e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006876:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800687a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800687e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e2      	bne.n	8006854 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800689e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80068b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e1      	bne.n	800688e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a60      	ldr	r2, [pc, #384]	@ (8006a64 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d021      	beq.n	800692c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01a      	beq.n	800692c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800690a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006918:	65bb      	str	r3, [r7, #88]	@ 0x58
 800691a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800691e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e4      	bne.n	80068f6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d130      	bne.n	8006996 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694a:	f023 0310 	bic.w	r3, r3, #16
 800694e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800695c:	647b      	str	r3, [r7, #68]	@ 0x44
 800695e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800696a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e4      	bne.n	800693a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b10      	cmp	r3, #16
 800697c:	d103      	bne.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2210      	movs	r2, #16
 8006984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe fcf4 	bl	800537c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006994:	e00e      	b.n	80069b4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fa fe04 	bl	80015a4 <HAL_UART_RxCpltCallback>
        break;
 800699c:	e00a      	b.n	80069b4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800699e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d006      	beq.n	80069b4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80069a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f47f aeca 	bne.w	8006748 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069ba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d049      	beq.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x35a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069cc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d242      	bcs.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3308      	adds	r3, #8
 80069da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	623b      	str	r3, [r7, #32]
   return(result);
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80069f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80069fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e3      	bne.n	80069d4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a16      	ldr	r2, [pc, #88]	@ (8006a68 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006a10:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f043 0320 	orr.w	r3, r3, #32
 8006a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	69b9      	ldr	r1, [r7, #24]
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	617b      	str	r3, [r7, #20]
   return(result);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e4      	bne.n	8006a12 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a48:	e007      	b.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0208 	orr.w	r2, r2, #8
 8006a58:	619a      	str	r2, [r3, #24]
}
 8006a5a:	bf00      	nop
 8006a5c:	37b8      	adds	r7, #184	@ 0xb8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40008000 	.word	0x40008000
 8006a68:	080061e5 	.word	0x080061e5

08006a6c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e058      	b.n	8006b36 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7fb fb1e 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2224      	movs	r2, #36	@ 0x24
 8006aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7fe ff35 	bl	800592c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7fe fc66 	bl	8005394 <UART_SetConfig>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e031      	b.n	8006b36 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ae0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	055b      	lsls	r3, r3, #21
 8006afa:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	041b      	lsls	r3, r3, #16
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8006b10:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	6979      	ldr	r1, [r7, #20]
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0201 	orr.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7fe ff9e 	bl	8005a70 <UART_CheckIdleState>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e027      	b.n	8006be0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2224      	movs	r2, #36	@ 0x24
 8006b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e02d      	b.n	8006c60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2224      	movs	r2, #36	@ 0x24
 8006c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f84f 	bl	8006ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e02d      	b.n	8006cdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	@ 0x24
 8006c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f811 	bl	8006ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d108      	bne.n	8006d06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d04:	e031      	b.n	8006d6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d06:	2308      	movs	r3, #8
 8006d08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	0e5b      	lsrs	r3, r3, #25
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	0f5b      	lsrs	r3, r3, #29
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	7b3a      	ldrb	r2, [r7, #12]
 8006d32:	4911      	ldr	r1, [pc, #68]	@ (8006d78 <UARTEx_SetNbDataToProcess+0x94>)
 8006d34:	5c8a      	ldrb	r2, [r1, r2]
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d3a:	7b3a      	ldrb	r2, [r7, #12]
 8006d3c:	490f      	ldr	r1, [pc, #60]	@ (8006d7c <UARTEx_SetNbDataToProcess+0x98>)
 8006d3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	7b7a      	ldrb	r2, [r7, #13]
 8006d50:	4909      	ldr	r1, [pc, #36]	@ (8006d78 <UARTEx_SetNbDataToProcess+0x94>)
 8006d52:	5c8a      	ldrb	r2, [r1, r2]
 8006d54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d58:	7b7a      	ldrb	r2, [r7, #13]
 8006d5a:	4908      	ldr	r1, [pc, #32]	@ (8006d7c <UARTEx_SetNbDataToProcess+0x98>)
 8006d5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d6a:	bf00      	nop
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	0800a428 	.word	0x0800a428
 8006d7c:	0800a430 	.word	0x0800a430

08006d80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d88:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006d8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4013      	ands	r3, r2
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	1d3b      	adds	r3, r7, #4
 8006dc0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <__cvt>:
 8006df2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df6:	ec57 6b10 	vmov	r6, r7, d0
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	4619      	mov	r1, r3
 8006e00:	463b      	mov	r3, r7
 8006e02:	bfbb      	ittet	lt
 8006e04:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e08:	461f      	movlt	r7, r3
 8006e0a:	2300      	movge	r3, #0
 8006e0c:	232d      	movlt	r3, #45	@ 0x2d
 8006e0e:	700b      	strb	r3, [r1, #0]
 8006e10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e12:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e16:	4691      	mov	r9, r2
 8006e18:	f023 0820 	bic.w	r8, r3, #32
 8006e1c:	bfbc      	itt	lt
 8006e1e:	4632      	movlt	r2, r6
 8006e20:	4616      	movlt	r6, r2
 8006e22:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e26:	d005      	beq.n	8006e34 <__cvt+0x42>
 8006e28:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e2c:	d100      	bne.n	8006e30 <__cvt+0x3e>
 8006e2e:	3401      	adds	r4, #1
 8006e30:	2102      	movs	r1, #2
 8006e32:	e000      	b.n	8006e36 <__cvt+0x44>
 8006e34:	2103      	movs	r1, #3
 8006e36:	ab03      	add	r3, sp, #12
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	ab02      	add	r3, sp, #8
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	ec47 6b10 	vmov	d0, r6, r7
 8006e42:	4653      	mov	r3, sl
 8006e44:	4622      	mov	r2, r4
 8006e46:	f000 ff73 	bl	8007d30 <_dtoa_r>
 8006e4a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e4e:	4605      	mov	r5, r0
 8006e50:	d119      	bne.n	8006e86 <__cvt+0x94>
 8006e52:	f019 0f01 	tst.w	r9, #1
 8006e56:	d00e      	beq.n	8006e76 <__cvt+0x84>
 8006e58:	eb00 0904 	add.w	r9, r0, r4
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4630      	mov	r0, r6
 8006e62:	4639      	mov	r1, r7
 8006e64:	f7f9 fe58 	bl	8000b18 <__aeabi_dcmpeq>
 8006e68:	b108      	cbz	r0, 8006e6e <__cvt+0x7c>
 8006e6a:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e6e:	2230      	movs	r2, #48	@ 0x30
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	454b      	cmp	r3, r9
 8006e74:	d31e      	bcc.n	8006eb4 <__cvt+0xc2>
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e7a:	1b5b      	subs	r3, r3, r5
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	b004      	add	sp, #16
 8006e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e86:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e8a:	eb00 0904 	add.w	r9, r0, r4
 8006e8e:	d1e5      	bne.n	8006e5c <__cvt+0x6a>
 8006e90:	7803      	ldrb	r3, [r0, #0]
 8006e92:	2b30      	cmp	r3, #48	@ 0x30
 8006e94:	d10a      	bne.n	8006eac <__cvt+0xba>
 8006e96:	2200      	movs	r2, #0
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	f7f9 fe3b 	bl	8000b18 <__aeabi_dcmpeq>
 8006ea2:	b918      	cbnz	r0, 8006eac <__cvt+0xba>
 8006ea4:	f1c4 0401 	rsb	r4, r4, #1
 8006ea8:	f8ca 4000 	str.w	r4, [sl]
 8006eac:	f8da 3000 	ldr.w	r3, [sl]
 8006eb0:	4499      	add	r9, r3
 8006eb2:	e7d3      	b.n	8006e5c <__cvt+0x6a>
 8006eb4:	1c59      	adds	r1, r3, #1
 8006eb6:	9103      	str	r1, [sp, #12]
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	e7d9      	b.n	8006e70 <__cvt+0x7e>

08006ebc <__exponent>:
 8006ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	bfba      	itte	lt
 8006ec2:	4249      	neglt	r1, r1
 8006ec4:	232d      	movlt	r3, #45	@ 0x2d
 8006ec6:	232b      	movge	r3, #43	@ 0x2b
 8006ec8:	2909      	cmp	r1, #9
 8006eca:	7002      	strb	r2, [r0, #0]
 8006ecc:	7043      	strb	r3, [r0, #1]
 8006ece:	dd29      	ble.n	8006f24 <__exponent+0x68>
 8006ed0:	f10d 0307 	add.w	r3, sp, #7
 8006ed4:	461d      	mov	r5, r3
 8006ed6:	270a      	movs	r7, #10
 8006ed8:	461a      	mov	r2, r3
 8006eda:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ede:	fb07 1416 	mls	r4, r7, r6, r1
 8006ee2:	3430      	adds	r4, #48	@ 0x30
 8006ee4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ee8:	460c      	mov	r4, r1
 8006eea:	2c63      	cmp	r4, #99	@ 0x63
 8006eec:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	dcf1      	bgt.n	8006ed8 <__exponent+0x1c>
 8006ef4:	3130      	adds	r1, #48	@ 0x30
 8006ef6:	1e94      	subs	r4, r2, #2
 8006ef8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006efc:	1c41      	adds	r1, r0, #1
 8006efe:	4623      	mov	r3, r4
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	d30a      	bcc.n	8006f1a <__exponent+0x5e>
 8006f04:	f10d 0309 	add.w	r3, sp, #9
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	42ac      	cmp	r4, r5
 8006f0c:	bf88      	it	hi
 8006f0e:	2300      	movhi	r3, #0
 8006f10:	3302      	adds	r3, #2
 8006f12:	4403      	add	r3, r0
 8006f14:	1a18      	subs	r0, r3, r0
 8006f16:	b003      	add	sp, #12
 8006f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f1e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f22:	e7ed      	b.n	8006f00 <__exponent+0x44>
 8006f24:	2330      	movs	r3, #48	@ 0x30
 8006f26:	3130      	adds	r1, #48	@ 0x30
 8006f28:	7083      	strb	r3, [r0, #2]
 8006f2a:	70c1      	strb	r1, [r0, #3]
 8006f2c:	1d03      	adds	r3, r0, #4
 8006f2e:	e7f1      	b.n	8006f14 <__exponent+0x58>

08006f30 <_printf_float>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	b08d      	sub	sp, #52	@ 0x34
 8006f36:	460c      	mov	r4, r1
 8006f38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	461f      	mov	r7, r3
 8006f40:	4605      	mov	r5, r0
 8006f42:	f000 fdf3 	bl	8007b2c <_localeconv_r>
 8006f46:	6803      	ldr	r3, [r0, #0]
 8006f48:	9304      	str	r3, [sp, #16]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7f9 f9b8 	bl	80002c0 <strlen>
 8006f50:	2300      	movs	r3, #0
 8006f52:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f54:	f8d8 3000 	ldr.w	r3, [r8]
 8006f58:	9005      	str	r0, [sp, #20]
 8006f5a:	3307      	adds	r3, #7
 8006f5c:	f023 0307 	bic.w	r3, r3, #7
 8006f60:	f103 0208 	add.w	r2, r3, #8
 8006f64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f68:	f8d4 b000 	ldr.w	fp, [r4]
 8006f6c:	f8c8 2000 	str.w	r2, [r8]
 8006f70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f78:	9307      	str	r3, [sp, #28]
 8006f7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f86:	4b9c      	ldr	r3, [pc, #624]	@ (80071f8 <_printf_float+0x2c8>)
 8006f88:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8c:	f7f9 fdf6 	bl	8000b7c <__aeabi_dcmpun>
 8006f90:	bb70      	cbnz	r0, 8006ff0 <_printf_float+0xc0>
 8006f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f96:	4b98      	ldr	r3, [pc, #608]	@ (80071f8 <_printf_float+0x2c8>)
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9c:	f7f9 fdd0 	bl	8000b40 <__aeabi_dcmple>
 8006fa0:	bb30      	cbnz	r0, 8006ff0 <_printf_float+0xc0>
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	f7f9 fdbf 	bl	8000b2c <__aeabi_dcmplt>
 8006fae:	b110      	cbz	r0, 8006fb6 <_printf_float+0x86>
 8006fb0:	232d      	movs	r3, #45	@ 0x2d
 8006fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fb6:	4a91      	ldr	r2, [pc, #580]	@ (80071fc <_printf_float+0x2cc>)
 8006fb8:	4b91      	ldr	r3, [pc, #580]	@ (8007200 <_printf_float+0x2d0>)
 8006fba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006fbe:	bf8c      	ite	hi
 8006fc0:	4690      	movhi	r8, r2
 8006fc2:	4698      	movls	r8, r3
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	f02b 0304 	bic.w	r3, fp, #4
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	f04f 0900 	mov.w	r9, #0
 8006fd2:	9700      	str	r7, [sp, #0]
 8006fd4:	4633      	mov	r3, r6
 8006fd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f000 f9d2 	bl	8007384 <_printf_common>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f040 808d 	bne.w	8007100 <_printf_float+0x1d0>
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fea:	b00d      	add	sp, #52	@ 0x34
 8006fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	f7f9 fdc0 	bl	8000b7c <__aeabi_dcmpun>
 8006ffc:	b140      	cbz	r0, 8007010 <_printf_float+0xe0>
 8006ffe:	464b      	mov	r3, r9
 8007000:	2b00      	cmp	r3, #0
 8007002:	bfbc      	itt	lt
 8007004:	232d      	movlt	r3, #45	@ 0x2d
 8007006:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800700a:	4a7e      	ldr	r2, [pc, #504]	@ (8007204 <_printf_float+0x2d4>)
 800700c:	4b7e      	ldr	r3, [pc, #504]	@ (8007208 <_printf_float+0x2d8>)
 800700e:	e7d4      	b.n	8006fba <_printf_float+0x8a>
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007016:	9206      	str	r2, [sp, #24]
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	d13b      	bne.n	8007094 <_printf_float+0x164>
 800701c:	2306      	movs	r3, #6
 800701e:	6063      	str	r3, [r4, #4]
 8007020:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007024:	2300      	movs	r3, #0
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	ab0a      	add	r3, sp, #40	@ 0x28
 800702c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007030:	ab09      	add	r3, sp, #36	@ 0x24
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	6861      	ldr	r1, [r4, #4]
 8007036:	ec49 8b10 	vmov	d0, r8, r9
 800703a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800703e:	4628      	mov	r0, r5
 8007040:	f7ff fed7 	bl	8006df2 <__cvt>
 8007044:	9b06      	ldr	r3, [sp, #24]
 8007046:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007048:	2b47      	cmp	r3, #71	@ 0x47
 800704a:	4680      	mov	r8, r0
 800704c:	d129      	bne.n	80070a2 <_printf_float+0x172>
 800704e:	1cc8      	adds	r0, r1, #3
 8007050:	db02      	blt.n	8007058 <_printf_float+0x128>
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	4299      	cmp	r1, r3
 8007056:	dd41      	ble.n	80070dc <_printf_float+0x1ac>
 8007058:	f1aa 0a02 	sub.w	sl, sl, #2
 800705c:	fa5f fa8a 	uxtb.w	sl, sl
 8007060:	3901      	subs	r1, #1
 8007062:	4652      	mov	r2, sl
 8007064:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007068:	9109      	str	r1, [sp, #36]	@ 0x24
 800706a:	f7ff ff27 	bl	8006ebc <__exponent>
 800706e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007070:	1813      	adds	r3, r2, r0
 8007072:	2a01      	cmp	r2, #1
 8007074:	4681      	mov	r9, r0
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	dc02      	bgt.n	8007080 <_printf_float+0x150>
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	07d2      	lsls	r2, r2, #31
 800707e:	d501      	bpl.n	8007084 <_printf_float+0x154>
 8007080:	3301      	adds	r3, #1
 8007082:	6123      	str	r3, [r4, #16]
 8007084:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0a2      	beq.n	8006fd2 <_printf_float+0xa2>
 800708c:	232d      	movs	r3, #45	@ 0x2d
 800708e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007092:	e79e      	b.n	8006fd2 <_printf_float+0xa2>
 8007094:	9a06      	ldr	r2, [sp, #24]
 8007096:	2a47      	cmp	r2, #71	@ 0x47
 8007098:	d1c2      	bne.n	8007020 <_printf_float+0xf0>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1c0      	bne.n	8007020 <_printf_float+0xf0>
 800709e:	2301      	movs	r3, #1
 80070a0:	e7bd      	b.n	800701e <_printf_float+0xee>
 80070a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070a6:	d9db      	bls.n	8007060 <_printf_float+0x130>
 80070a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80070ac:	d118      	bne.n	80070e0 <_printf_float+0x1b0>
 80070ae:	2900      	cmp	r1, #0
 80070b0:	6863      	ldr	r3, [r4, #4]
 80070b2:	dd0b      	ble.n	80070cc <_printf_float+0x19c>
 80070b4:	6121      	str	r1, [r4, #16]
 80070b6:	b913      	cbnz	r3, 80070be <_printf_float+0x18e>
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	07d0      	lsls	r0, r2, #31
 80070bc:	d502      	bpl.n	80070c4 <_printf_float+0x194>
 80070be:	3301      	adds	r3, #1
 80070c0:	440b      	add	r3, r1
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070c6:	f04f 0900 	mov.w	r9, #0
 80070ca:	e7db      	b.n	8007084 <_printf_float+0x154>
 80070cc:	b913      	cbnz	r3, 80070d4 <_printf_float+0x1a4>
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	07d2      	lsls	r2, r2, #31
 80070d2:	d501      	bpl.n	80070d8 <_printf_float+0x1a8>
 80070d4:	3302      	adds	r3, #2
 80070d6:	e7f4      	b.n	80070c2 <_printf_float+0x192>
 80070d8:	2301      	movs	r3, #1
 80070da:	e7f2      	b.n	80070c2 <_printf_float+0x192>
 80070dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070e2:	4299      	cmp	r1, r3
 80070e4:	db05      	blt.n	80070f2 <_printf_float+0x1c2>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	6121      	str	r1, [r4, #16]
 80070ea:	07d8      	lsls	r0, r3, #31
 80070ec:	d5ea      	bpl.n	80070c4 <_printf_float+0x194>
 80070ee:	1c4b      	adds	r3, r1, #1
 80070f0:	e7e7      	b.n	80070c2 <_printf_float+0x192>
 80070f2:	2900      	cmp	r1, #0
 80070f4:	bfd4      	ite	le
 80070f6:	f1c1 0202 	rsble	r2, r1, #2
 80070fa:	2201      	movgt	r2, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	e7e0      	b.n	80070c2 <_printf_float+0x192>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	055a      	lsls	r2, r3, #21
 8007104:	d407      	bmi.n	8007116 <_printf_float+0x1e6>
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	4642      	mov	r2, r8
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	d12b      	bne.n	800716c <_printf_float+0x23c>
 8007114:	e767      	b.n	8006fe6 <_printf_float+0xb6>
 8007116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800711a:	f240 80dd 	bls.w	80072d8 <_printf_float+0x3a8>
 800711e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007122:	2200      	movs	r2, #0
 8007124:	2300      	movs	r3, #0
 8007126:	f7f9 fcf7 	bl	8000b18 <__aeabi_dcmpeq>
 800712a:	2800      	cmp	r0, #0
 800712c:	d033      	beq.n	8007196 <_printf_float+0x266>
 800712e:	4a37      	ldr	r2, [pc, #220]	@ (800720c <_printf_float+0x2dc>)
 8007130:	2301      	movs	r3, #1
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f af54 	beq.w	8006fe6 <_printf_float+0xb6>
 800713e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007142:	4543      	cmp	r3, r8
 8007144:	db02      	blt.n	800714c <_printf_float+0x21c>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	07d8      	lsls	r0, r3, #31
 800714a:	d50f      	bpl.n	800716c <_printf_float+0x23c>
 800714c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af45 	beq.w	8006fe6 <_printf_float+0xb6>
 800715c:	f04f 0900 	mov.w	r9, #0
 8007160:	f108 38ff 	add.w	r8, r8, #4294967295
 8007164:	f104 0a1a 	add.w	sl, r4, #26
 8007168:	45c8      	cmp	r8, r9
 800716a:	dc09      	bgt.n	8007180 <_printf_float+0x250>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	079b      	lsls	r3, r3, #30
 8007170:	f100 8103 	bmi.w	800737a <_printf_float+0x44a>
 8007174:	68e0      	ldr	r0, [r4, #12]
 8007176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007178:	4298      	cmp	r0, r3
 800717a:	bfb8      	it	lt
 800717c:	4618      	movlt	r0, r3
 800717e:	e734      	b.n	8006fea <_printf_float+0xba>
 8007180:	2301      	movs	r3, #1
 8007182:	4652      	mov	r2, sl
 8007184:	4631      	mov	r1, r6
 8007186:	4628      	mov	r0, r5
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	f43f af2b 	beq.w	8006fe6 <_printf_float+0xb6>
 8007190:	f109 0901 	add.w	r9, r9, #1
 8007194:	e7e8      	b.n	8007168 <_printf_float+0x238>
 8007196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc39      	bgt.n	8007210 <_printf_float+0x2e0>
 800719c:	4a1b      	ldr	r2, [pc, #108]	@ (800720c <_printf_float+0x2dc>)
 800719e:	2301      	movs	r3, #1
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f af1d 	beq.w	8006fe6 <_printf_float+0xb6>
 80071ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071b0:	ea59 0303 	orrs.w	r3, r9, r3
 80071b4:	d102      	bne.n	80071bc <_printf_float+0x28c>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	d5d7      	bpl.n	800716c <_printf_float+0x23c>
 80071bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f af0d 	beq.w	8006fe6 <_printf_float+0xb6>
 80071cc:	f04f 0a00 	mov.w	sl, #0
 80071d0:	f104 0b1a 	add.w	fp, r4, #26
 80071d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d6:	425b      	negs	r3, r3
 80071d8:	4553      	cmp	r3, sl
 80071da:	dc01      	bgt.n	80071e0 <_printf_float+0x2b0>
 80071dc:	464b      	mov	r3, r9
 80071de:	e793      	b.n	8007108 <_printf_float+0x1d8>
 80071e0:	2301      	movs	r3, #1
 80071e2:	465a      	mov	r2, fp
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f aefb 	beq.w	8006fe6 <_printf_float+0xb6>
 80071f0:	f10a 0a01 	add.w	sl, sl, #1
 80071f4:	e7ee      	b.n	80071d4 <_printf_float+0x2a4>
 80071f6:	bf00      	nop
 80071f8:	7fefffff 	.word	0x7fefffff
 80071fc:	0800a43c 	.word	0x0800a43c
 8007200:	0800a438 	.word	0x0800a438
 8007204:	0800a444 	.word	0x0800a444
 8007208:	0800a440 	.word	0x0800a440
 800720c:	0800a448 	.word	0x0800a448
 8007210:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007212:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007216:	4553      	cmp	r3, sl
 8007218:	bfa8      	it	ge
 800721a:	4653      	movge	r3, sl
 800721c:	2b00      	cmp	r3, #0
 800721e:	4699      	mov	r9, r3
 8007220:	dc36      	bgt.n	8007290 <_printf_float+0x360>
 8007222:	f04f 0b00 	mov.w	fp, #0
 8007226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800722a:	f104 021a 	add.w	r2, r4, #26
 800722e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007230:	9306      	str	r3, [sp, #24]
 8007232:	eba3 0309 	sub.w	r3, r3, r9
 8007236:	455b      	cmp	r3, fp
 8007238:	dc31      	bgt.n	800729e <_printf_float+0x36e>
 800723a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723c:	459a      	cmp	sl, r3
 800723e:	dc3a      	bgt.n	80072b6 <_printf_float+0x386>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	07da      	lsls	r2, r3, #31
 8007244:	d437      	bmi.n	80072b6 <_printf_float+0x386>
 8007246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007248:	ebaa 0903 	sub.w	r9, sl, r3
 800724c:	9b06      	ldr	r3, [sp, #24]
 800724e:	ebaa 0303 	sub.w	r3, sl, r3
 8007252:	4599      	cmp	r9, r3
 8007254:	bfa8      	it	ge
 8007256:	4699      	movge	r9, r3
 8007258:	f1b9 0f00 	cmp.w	r9, #0
 800725c:	dc33      	bgt.n	80072c6 <_printf_float+0x396>
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007266:	f104 0b1a 	add.w	fp, r4, #26
 800726a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726c:	ebaa 0303 	sub.w	r3, sl, r3
 8007270:	eba3 0309 	sub.w	r3, r3, r9
 8007274:	4543      	cmp	r3, r8
 8007276:	f77f af79 	ble.w	800716c <_printf_float+0x23c>
 800727a:	2301      	movs	r3, #1
 800727c:	465a      	mov	r2, fp
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	f43f aeae 	beq.w	8006fe6 <_printf_float+0xb6>
 800728a:	f108 0801 	add.w	r8, r8, #1
 800728e:	e7ec      	b.n	800726a <_printf_float+0x33a>
 8007290:	4642      	mov	r2, r8
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	47b8      	blx	r7
 8007298:	3001      	adds	r0, #1
 800729a:	d1c2      	bne.n	8007222 <_printf_float+0x2f2>
 800729c:	e6a3      	b.n	8006fe6 <_printf_float+0xb6>
 800729e:	2301      	movs	r3, #1
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	9206      	str	r2, [sp, #24]
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	f43f ae9c 	beq.w	8006fe6 <_printf_float+0xb6>
 80072ae:	9a06      	ldr	r2, [sp, #24]
 80072b0:	f10b 0b01 	add.w	fp, fp, #1
 80072b4:	e7bb      	b.n	800722e <_printf_float+0x2fe>
 80072b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	d1c0      	bne.n	8007246 <_printf_float+0x316>
 80072c4:	e68f      	b.n	8006fe6 <_printf_float+0xb6>
 80072c6:	9a06      	ldr	r2, [sp, #24]
 80072c8:	464b      	mov	r3, r9
 80072ca:	4442      	add	r2, r8
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	d1c3      	bne.n	800725e <_printf_float+0x32e>
 80072d6:	e686      	b.n	8006fe6 <_printf_float+0xb6>
 80072d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072dc:	f1ba 0f01 	cmp.w	sl, #1
 80072e0:	dc01      	bgt.n	80072e6 <_printf_float+0x3b6>
 80072e2:	07db      	lsls	r3, r3, #31
 80072e4:	d536      	bpl.n	8007354 <_printf_float+0x424>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4642      	mov	r2, r8
 80072ea:	4631      	mov	r1, r6
 80072ec:	4628      	mov	r0, r5
 80072ee:	47b8      	blx	r7
 80072f0:	3001      	adds	r0, #1
 80072f2:	f43f ae78 	beq.w	8006fe6 <_printf_float+0xb6>
 80072f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	f43f ae70 	beq.w	8006fe6 <_printf_float+0xb6>
 8007306:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800730a:	2200      	movs	r2, #0
 800730c:	2300      	movs	r3, #0
 800730e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007312:	f7f9 fc01 	bl	8000b18 <__aeabi_dcmpeq>
 8007316:	b9c0      	cbnz	r0, 800734a <_printf_float+0x41a>
 8007318:	4653      	mov	r3, sl
 800731a:	f108 0201 	add.w	r2, r8, #1
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47b8      	blx	r7
 8007324:	3001      	adds	r0, #1
 8007326:	d10c      	bne.n	8007342 <_printf_float+0x412>
 8007328:	e65d      	b.n	8006fe6 <_printf_float+0xb6>
 800732a:	2301      	movs	r3, #1
 800732c:	465a      	mov	r2, fp
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	f43f ae56 	beq.w	8006fe6 <_printf_float+0xb6>
 800733a:	f108 0801 	add.w	r8, r8, #1
 800733e:	45d0      	cmp	r8, sl
 8007340:	dbf3      	blt.n	800732a <_printf_float+0x3fa>
 8007342:	464b      	mov	r3, r9
 8007344:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007348:	e6df      	b.n	800710a <_printf_float+0x1da>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	f104 0b1a 	add.w	fp, r4, #26
 8007352:	e7f4      	b.n	800733e <_printf_float+0x40e>
 8007354:	2301      	movs	r3, #1
 8007356:	4642      	mov	r2, r8
 8007358:	e7e1      	b.n	800731e <_printf_float+0x3ee>
 800735a:	2301      	movs	r3, #1
 800735c:	464a      	mov	r2, r9
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	47b8      	blx	r7
 8007364:	3001      	adds	r0, #1
 8007366:	f43f ae3e 	beq.w	8006fe6 <_printf_float+0xb6>
 800736a:	f108 0801 	add.w	r8, r8, #1
 800736e:	68e3      	ldr	r3, [r4, #12]
 8007370:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007372:	1a5b      	subs	r3, r3, r1
 8007374:	4543      	cmp	r3, r8
 8007376:	dcf0      	bgt.n	800735a <_printf_float+0x42a>
 8007378:	e6fc      	b.n	8007174 <_printf_float+0x244>
 800737a:	f04f 0800 	mov.w	r8, #0
 800737e:	f104 0919 	add.w	r9, r4, #25
 8007382:	e7f4      	b.n	800736e <_printf_float+0x43e>

08007384 <_printf_common>:
 8007384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	4616      	mov	r6, r2
 800738a:	4698      	mov	r8, r3
 800738c:	688a      	ldr	r2, [r1, #8]
 800738e:	690b      	ldr	r3, [r1, #16]
 8007390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007394:	4293      	cmp	r3, r2
 8007396:	bfb8      	it	lt
 8007398:	4613      	movlt	r3, r2
 800739a:	6033      	str	r3, [r6, #0]
 800739c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073a0:	4607      	mov	r7, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	b10a      	cbz	r2, 80073aa <_printf_common+0x26>
 80073a6:	3301      	adds	r3, #1
 80073a8:	6033      	str	r3, [r6, #0]
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	0699      	lsls	r1, r3, #26
 80073ae:	bf42      	ittt	mi
 80073b0:	6833      	ldrmi	r3, [r6, #0]
 80073b2:	3302      	addmi	r3, #2
 80073b4:	6033      	strmi	r3, [r6, #0]
 80073b6:	6825      	ldr	r5, [r4, #0]
 80073b8:	f015 0506 	ands.w	r5, r5, #6
 80073bc:	d106      	bne.n	80073cc <_printf_common+0x48>
 80073be:	f104 0a19 	add.w	sl, r4, #25
 80073c2:	68e3      	ldr	r3, [r4, #12]
 80073c4:	6832      	ldr	r2, [r6, #0]
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	dc26      	bgt.n	800741a <_printf_common+0x96>
 80073cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	3b00      	subs	r3, #0
 80073d4:	bf18      	it	ne
 80073d6:	2301      	movne	r3, #1
 80073d8:	0692      	lsls	r2, r2, #26
 80073da:	d42b      	bmi.n	8007434 <_printf_common+0xb0>
 80073dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073e0:	4641      	mov	r1, r8
 80073e2:	4638      	mov	r0, r7
 80073e4:	47c8      	blx	r9
 80073e6:	3001      	adds	r0, #1
 80073e8:	d01e      	beq.n	8007428 <_printf_common+0xa4>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	6922      	ldr	r2, [r4, #16]
 80073ee:	f003 0306 	and.w	r3, r3, #6
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	bf02      	ittt	eq
 80073f6:	68e5      	ldreq	r5, [r4, #12]
 80073f8:	6833      	ldreq	r3, [r6, #0]
 80073fa:	1aed      	subeq	r5, r5, r3
 80073fc:	68a3      	ldr	r3, [r4, #8]
 80073fe:	bf0c      	ite	eq
 8007400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007404:	2500      	movne	r5, #0
 8007406:	4293      	cmp	r3, r2
 8007408:	bfc4      	itt	gt
 800740a:	1a9b      	subgt	r3, r3, r2
 800740c:	18ed      	addgt	r5, r5, r3
 800740e:	2600      	movs	r6, #0
 8007410:	341a      	adds	r4, #26
 8007412:	42b5      	cmp	r5, r6
 8007414:	d11a      	bne.n	800744c <_printf_common+0xc8>
 8007416:	2000      	movs	r0, #0
 8007418:	e008      	b.n	800742c <_printf_common+0xa8>
 800741a:	2301      	movs	r3, #1
 800741c:	4652      	mov	r2, sl
 800741e:	4641      	mov	r1, r8
 8007420:	4638      	mov	r0, r7
 8007422:	47c8      	blx	r9
 8007424:	3001      	adds	r0, #1
 8007426:	d103      	bne.n	8007430 <_printf_common+0xac>
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007430:	3501      	adds	r5, #1
 8007432:	e7c6      	b.n	80073c2 <_printf_common+0x3e>
 8007434:	18e1      	adds	r1, r4, r3
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	2030      	movs	r0, #48	@ 0x30
 800743a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800743e:	4422      	add	r2, r4
 8007440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007448:	3302      	adds	r3, #2
 800744a:	e7c7      	b.n	80073dc <_printf_common+0x58>
 800744c:	2301      	movs	r3, #1
 800744e:	4622      	mov	r2, r4
 8007450:	4641      	mov	r1, r8
 8007452:	4638      	mov	r0, r7
 8007454:	47c8      	blx	r9
 8007456:	3001      	adds	r0, #1
 8007458:	d0e6      	beq.n	8007428 <_printf_common+0xa4>
 800745a:	3601      	adds	r6, #1
 800745c:	e7d9      	b.n	8007412 <_printf_common+0x8e>
	...

08007460 <_printf_i>:
 8007460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	7e0f      	ldrb	r7, [r1, #24]
 8007466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007468:	2f78      	cmp	r7, #120	@ 0x78
 800746a:	4691      	mov	r9, r2
 800746c:	4680      	mov	r8, r0
 800746e:	460c      	mov	r4, r1
 8007470:	469a      	mov	sl, r3
 8007472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007476:	d807      	bhi.n	8007488 <_printf_i+0x28>
 8007478:	2f62      	cmp	r7, #98	@ 0x62
 800747a:	d80a      	bhi.n	8007492 <_printf_i+0x32>
 800747c:	2f00      	cmp	r7, #0
 800747e:	f000 80d1 	beq.w	8007624 <_printf_i+0x1c4>
 8007482:	2f58      	cmp	r7, #88	@ 0x58
 8007484:	f000 80b8 	beq.w	80075f8 <_printf_i+0x198>
 8007488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800748c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007490:	e03a      	b.n	8007508 <_printf_i+0xa8>
 8007492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007496:	2b15      	cmp	r3, #21
 8007498:	d8f6      	bhi.n	8007488 <_printf_i+0x28>
 800749a:	a101      	add	r1, pc, #4	@ (adr r1, 80074a0 <_printf_i+0x40>)
 800749c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a0:	080074f9 	.word	0x080074f9
 80074a4:	0800750d 	.word	0x0800750d
 80074a8:	08007489 	.word	0x08007489
 80074ac:	08007489 	.word	0x08007489
 80074b0:	08007489 	.word	0x08007489
 80074b4:	08007489 	.word	0x08007489
 80074b8:	0800750d 	.word	0x0800750d
 80074bc:	08007489 	.word	0x08007489
 80074c0:	08007489 	.word	0x08007489
 80074c4:	08007489 	.word	0x08007489
 80074c8:	08007489 	.word	0x08007489
 80074cc:	0800760b 	.word	0x0800760b
 80074d0:	08007537 	.word	0x08007537
 80074d4:	080075c5 	.word	0x080075c5
 80074d8:	08007489 	.word	0x08007489
 80074dc:	08007489 	.word	0x08007489
 80074e0:	0800762d 	.word	0x0800762d
 80074e4:	08007489 	.word	0x08007489
 80074e8:	08007537 	.word	0x08007537
 80074ec:	08007489 	.word	0x08007489
 80074f0:	08007489 	.word	0x08007489
 80074f4:	080075cd 	.word	0x080075cd
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	1d1a      	adds	r2, r3, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6032      	str	r2, [r6, #0]
 8007500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007508:	2301      	movs	r3, #1
 800750a:	e09c      	b.n	8007646 <_printf_i+0x1e6>
 800750c:	6833      	ldr	r3, [r6, #0]
 800750e:	6820      	ldr	r0, [r4, #0]
 8007510:	1d19      	adds	r1, r3, #4
 8007512:	6031      	str	r1, [r6, #0]
 8007514:	0606      	lsls	r6, r0, #24
 8007516:	d501      	bpl.n	800751c <_printf_i+0xbc>
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	e003      	b.n	8007524 <_printf_i+0xc4>
 800751c:	0645      	lsls	r5, r0, #25
 800751e:	d5fb      	bpl.n	8007518 <_printf_i+0xb8>
 8007520:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007524:	2d00      	cmp	r5, #0
 8007526:	da03      	bge.n	8007530 <_printf_i+0xd0>
 8007528:	232d      	movs	r3, #45	@ 0x2d
 800752a:	426d      	negs	r5, r5
 800752c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007530:	4858      	ldr	r0, [pc, #352]	@ (8007694 <_printf_i+0x234>)
 8007532:	230a      	movs	r3, #10
 8007534:	e011      	b.n	800755a <_printf_i+0xfa>
 8007536:	6821      	ldr	r1, [r4, #0]
 8007538:	6833      	ldr	r3, [r6, #0]
 800753a:	0608      	lsls	r0, r1, #24
 800753c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007540:	d402      	bmi.n	8007548 <_printf_i+0xe8>
 8007542:	0649      	lsls	r1, r1, #25
 8007544:	bf48      	it	mi
 8007546:	b2ad      	uxthmi	r5, r5
 8007548:	2f6f      	cmp	r7, #111	@ 0x6f
 800754a:	4852      	ldr	r0, [pc, #328]	@ (8007694 <_printf_i+0x234>)
 800754c:	6033      	str	r3, [r6, #0]
 800754e:	bf14      	ite	ne
 8007550:	230a      	movne	r3, #10
 8007552:	2308      	moveq	r3, #8
 8007554:	2100      	movs	r1, #0
 8007556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800755a:	6866      	ldr	r6, [r4, #4]
 800755c:	60a6      	str	r6, [r4, #8]
 800755e:	2e00      	cmp	r6, #0
 8007560:	db05      	blt.n	800756e <_printf_i+0x10e>
 8007562:	6821      	ldr	r1, [r4, #0]
 8007564:	432e      	orrs	r6, r5
 8007566:	f021 0104 	bic.w	r1, r1, #4
 800756a:	6021      	str	r1, [r4, #0]
 800756c:	d04b      	beq.n	8007606 <_printf_i+0x1a6>
 800756e:	4616      	mov	r6, r2
 8007570:	fbb5 f1f3 	udiv	r1, r5, r3
 8007574:	fb03 5711 	mls	r7, r3, r1, r5
 8007578:	5dc7      	ldrb	r7, [r0, r7]
 800757a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800757e:	462f      	mov	r7, r5
 8007580:	42bb      	cmp	r3, r7
 8007582:	460d      	mov	r5, r1
 8007584:	d9f4      	bls.n	8007570 <_printf_i+0x110>
 8007586:	2b08      	cmp	r3, #8
 8007588:	d10b      	bne.n	80075a2 <_printf_i+0x142>
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	07df      	lsls	r7, r3, #31
 800758e:	d508      	bpl.n	80075a2 <_printf_i+0x142>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	6861      	ldr	r1, [r4, #4]
 8007594:	4299      	cmp	r1, r3
 8007596:	bfde      	ittt	le
 8007598:	2330      	movle	r3, #48	@ 0x30
 800759a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800759e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075a2:	1b92      	subs	r2, r2, r6
 80075a4:	6122      	str	r2, [r4, #16]
 80075a6:	f8cd a000 	str.w	sl, [sp]
 80075aa:	464b      	mov	r3, r9
 80075ac:	aa03      	add	r2, sp, #12
 80075ae:	4621      	mov	r1, r4
 80075b0:	4640      	mov	r0, r8
 80075b2:	f7ff fee7 	bl	8007384 <_printf_common>
 80075b6:	3001      	adds	r0, #1
 80075b8:	d14a      	bne.n	8007650 <_printf_i+0x1f0>
 80075ba:	f04f 30ff 	mov.w	r0, #4294967295
 80075be:	b004      	add	sp, #16
 80075c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	f043 0320 	orr.w	r3, r3, #32
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	4832      	ldr	r0, [pc, #200]	@ (8007698 <_printf_i+0x238>)
 80075ce:	2778      	movs	r7, #120	@ 0x78
 80075d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	6831      	ldr	r1, [r6, #0]
 80075d8:	061f      	lsls	r7, r3, #24
 80075da:	f851 5b04 	ldr.w	r5, [r1], #4
 80075de:	d402      	bmi.n	80075e6 <_printf_i+0x186>
 80075e0:	065f      	lsls	r7, r3, #25
 80075e2:	bf48      	it	mi
 80075e4:	b2ad      	uxthmi	r5, r5
 80075e6:	6031      	str	r1, [r6, #0]
 80075e8:	07d9      	lsls	r1, r3, #31
 80075ea:	bf44      	itt	mi
 80075ec:	f043 0320 	orrmi.w	r3, r3, #32
 80075f0:	6023      	strmi	r3, [r4, #0]
 80075f2:	b11d      	cbz	r5, 80075fc <_printf_i+0x19c>
 80075f4:	2310      	movs	r3, #16
 80075f6:	e7ad      	b.n	8007554 <_printf_i+0xf4>
 80075f8:	4826      	ldr	r0, [pc, #152]	@ (8007694 <_printf_i+0x234>)
 80075fa:	e7e9      	b.n	80075d0 <_printf_i+0x170>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	f023 0320 	bic.w	r3, r3, #32
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	e7f6      	b.n	80075f4 <_printf_i+0x194>
 8007606:	4616      	mov	r6, r2
 8007608:	e7bd      	b.n	8007586 <_printf_i+0x126>
 800760a:	6833      	ldr	r3, [r6, #0]
 800760c:	6825      	ldr	r5, [r4, #0]
 800760e:	6961      	ldr	r1, [r4, #20]
 8007610:	1d18      	adds	r0, r3, #4
 8007612:	6030      	str	r0, [r6, #0]
 8007614:	062e      	lsls	r6, r5, #24
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	d501      	bpl.n	800761e <_printf_i+0x1be>
 800761a:	6019      	str	r1, [r3, #0]
 800761c:	e002      	b.n	8007624 <_printf_i+0x1c4>
 800761e:	0668      	lsls	r0, r5, #25
 8007620:	d5fb      	bpl.n	800761a <_printf_i+0x1ba>
 8007622:	8019      	strh	r1, [r3, #0]
 8007624:	2300      	movs	r3, #0
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	4616      	mov	r6, r2
 800762a:	e7bc      	b.n	80075a6 <_printf_i+0x146>
 800762c:	6833      	ldr	r3, [r6, #0]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	6032      	str	r2, [r6, #0]
 8007632:	681e      	ldr	r6, [r3, #0]
 8007634:	6862      	ldr	r2, [r4, #4]
 8007636:	2100      	movs	r1, #0
 8007638:	4630      	mov	r0, r6
 800763a:	f7f8 fdf1 	bl	8000220 <memchr>
 800763e:	b108      	cbz	r0, 8007644 <_printf_i+0x1e4>
 8007640:	1b80      	subs	r0, r0, r6
 8007642:	6060      	str	r0, [r4, #4]
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	2300      	movs	r3, #0
 800764a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800764e:	e7aa      	b.n	80075a6 <_printf_i+0x146>
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	4632      	mov	r2, r6
 8007654:	4649      	mov	r1, r9
 8007656:	4640      	mov	r0, r8
 8007658:	47d0      	blx	sl
 800765a:	3001      	adds	r0, #1
 800765c:	d0ad      	beq.n	80075ba <_printf_i+0x15a>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	079b      	lsls	r3, r3, #30
 8007662:	d413      	bmi.n	800768c <_printf_i+0x22c>
 8007664:	68e0      	ldr	r0, [r4, #12]
 8007666:	9b03      	ldr	r3, [sp, #12]
 8007668:	4298      	cmp	r0, r3
 800766a:	bfb8      	it	lt
 800766c:	4618      	movlt	r0, r3
 800766e:	e7a6      	b.n	80075be <_printf_i+0x15e>
 8007670:	2301      	movs	r3, #1
 8007672:	4632      	mov	r2, r6
 8007674:	4649      	mov	r1, r9
 8007676:	4640      	mov	r0, r8
 8007678:	47d0      	blx	sl
 800767a:	3001      	adds	r0, #1
 800767c:	d09d      	beq.n	80075ba <_printf_i+0x15a>
 800767e:	3501      	adds	r5, #1
 8007680:	68e3      	ldr	r3, [r4, #12]
 8007682:	9903      	ldr	r1, [sp, #12]
 8007684:	1a5b      	subs	r3, r3, r1
 8007686:	42ab      	cmp	r3, r5
 8007688:	dcf2      	bgt.n	8007670 <_printf_i+0x210>
 800768a:	e7eb      	b.n	8007664 <_printf_i+0x204>
 800768c:	2500      	movs	r5, #0
 800768e:	f104 0619 	add.w	r6, r4, #25
 8007692:	e7f5      	b.n	8007680 <_printf_i+0x220>
 8007694:	0800a44a 	.word	0x0800a44a
 8007698:	0800a45b 	.word	0x0800a45b

0800769c <std>:
 800769c:	2300      	movs	r3, #0
 800769e:	b510      	push	{r4, lr}
 80076a0:	4604      	mov	r4, r0
 80076a2:	e9c0 3300 	strd	r3, r3, [r0]
 80076a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076aa:	6083      	str	r3, [r0, #8]
 80076ac:	8181      	strh	r1, [r0, #12]
 80076ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80076b0:	81c2      	strh	r2, [r0, #14]
 80076b2:	6183      	str	r3, [r0, #24]
 80076b4:	4619      	mov	r1, r3
 80076b6:	2208      	movs	r2, #8
 80076b8:	305c      	adds	r0, #92	@ 0x5c
 80076ba:	f000 fa2f 	bl	8007b1c <memset>
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x58>)
 80076c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x5c>)
 80076c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <std+0x60>)
 80076c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <std+0x64>)
 80076cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80076ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007704 <std+0x68>)
 80076d0:	6224      	str	r4, [r4, #32]
 80076d2:	429c      	cmp	r4, r3
 80076d4:	d006      	beq.n	80076e4 <std+0x48>
 80076d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076da:	4294      	cmp	r4, r2
 80076dc:	d002      	beq.n	80076e4 <std+0x48>
 80076de:	33d0      	adds	r3, #208	@ 0xd0
 80076e0:	429c      	cmp	r4, r3
 80076e2:	d105      	bne.n	80076f0 <std+0x54>
 80076e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f000 ba92 	b.w	8007c14 <__retarget_lock_init_recursive>
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	bf00      	nop
 80076f4:	0800796d 	.word	0x0800796d
 80076f8:	0800798f 	.word	0x0800798f
 80076fc:	080079c7 	.word	0x080079c7
 8007700:	080079eb 	.word	0x080079eb
 8007704:	200007fc 	.word	0x200007fc

08007708 <stdio_exit_handler>:
 8007708:	4a02      	ldr	r2, [pc, #8]	@ (8007714 <stdio_exit_handler+0xc>)
 800770a:	4903      	ldr	r1, [pc, #12]	@ (8007718 <stdio_exit_handler+0x10>)
 800770c:	4803      	ldr	r0, [pc, #12]	@ (800771c <stdio_exit_handler+0x14>)
 800770e:	f000 b869 	b.w	80077e4 <_fwalk_sglue>
 8007712:	bf00      	nop
 8007714:	2000000c 	.word	0x2000000c
 8007718:	08009801 	.word	0x08009801
 800771c:	2000001c 	.word	0x2000001c

08007720 <cleanup_stdio>:
 8007720:	6841      	ldr	r1, [r0, #4]
 8007722:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <cleanup_stdio+0x34>)
 8007724:	4299      	cmp	r1, r3
 8007726:	b510      	push	{r4, lr}
 8007728:	4604      	mov	r4, r0
 800772a:	d001      	beq.n	8007730 <cleanup_stdio+0x10>
 800772c:	f002 f868 	bl	8009800 <_fflush_r>
 8007730:	68a1      	ldr	r1, [r4, #8]
 8007732:	4b09      	ldr	r3, [pc, #36]	@ (8007758 <cleanup_stdio+0x38>)
 8007734:	4299      	cmp	r1, r3
 8007736:	d002      	beq.n	800773e <cleanup_stdio+0x1e>
 8007738:	4620      	mov	r0, r4
 800773a:	f002 f861 	bl	8009800 <_fflush_r>
 800773e:	68e1      	ldr	r1, [r4, #12]
 8007740:	4b06      	ldr	r3, [pc, #24]	@ (800775c <cleanup_stdio+0x3c>)
 8007742:	4299      	cmp	r1, r3
 8007744:	d004      	beq.n	8007750 <cleanup_stdio+0x30>
 8007746:	4620      	mov	r0, r4
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f002 b858 	b.w	8009800 <_fflush_r>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	bf00      	nop
 8007754:	200007fc 	.word	0x200007fc
 8007758:	20000864 	.word	0x20000864
 800775c:	200008cc 	.word	0x200008cc

08007760 <global_stdio_init.part.0>:
 8007760:	b510      	push	{r4, lr}
 8007762:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <global_stdio_init.part.0+0x30>)
 8007764:	4c0b      	ldr	r4, [pc, #44]	@ (8007794 <global_stdio_init.part.0+0x34>)
 8007766:	4a0c      	ldr	r2, [pc, #48]	@ (8007798 <global_stdio_init.part.0+0x38>)
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	4620      	mov	r0, r4
 800776c:	2200      	movs	r2, #0
 800776e:	2104      	movs	r1, #4
 8007770:	f7ff ff94 	bl	800769c <std>
 8007774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007778:	2201      	movs	r2, #1
 800777a:	2109      	movs	r1, #9
 800777c:	f7ff ff8e 	bl	800769c <std>
 8007780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007784:	2202      	movs	r2, #2
 8007786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778a:	2112      	movs	r1, #18
 800778c:	f7ff bf86 	b.w	800769c <std>
 8007790:	20000934 	.word	0x20000934
 8007794:	200007fc 	.word	0x200007fc
 8007798:	08007709 	.word	0x08007709

0800779c <__sfp_lock_acquire>:
 800779c:	4801      	ldr	r0, [pc, #4]	@ (80077a4 <__sfp_lock_acquire+0x8>)
 800779e:	f000 ba3a 	b.w	8007c16 <__retarget_lock_acquire_recursive>
 80077a2:	bf00      	nop
 80077a4:	2000093d 	.word	0x2000093d

080077a8 <__sfp_lock_release>:
 80077a8:	4801      	ldr	r0, [pc, #4]	@ (80077b0 <__sfp_lock_release+0x8>)
 80077aa:	f000 ba35 	b.w	8007c18 <__retarget_lock_release_recursive>
 80077ae:	bf00      	nop
 80077b0:	2000093d 	.word	0x2000093d

080077b4 <__sinit>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
 80077b8:	f7ff fff0 	bl	800779c <__sfp_lock_acquire>
 80077bc:	6a23      	ldr	r3, [r4, #32]
 80077be:	b11b      	cbz	r3, 80077c8 <__sinit+0x14>
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f7ff bff0 	b.w	80077a8 <__sfp_lock_release>
 80077c8:	4b04      	ldr	r3, [pc, #16]	@ (80077dc <__sinit+0x28>)
 80077ca:	6223      	str	r3, [r4, #32]
 80077cc:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <__sinit+0x2c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1f5      	bne.n	80077c0 <__sinit+0xc>
 80077d4:	f7ff ffc4 	bl	8007760 <global_stdio_init.part.0>
 80077d8:	e7f2      	b.n	80077c0 <__sinit+0xc>
 80077da:	bf00      	nop
 80077dc:	08007721 	.word	0x08007721
 80077e0:	20000934 	.word	0x20000934

080077e4 <_fwalk_sglue>:
 80077e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e8:	4607      	mov	r7, r0
 80077ea:	4688      	mov	r8, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	2600      	movs	r6, #0
 80077f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077f4:	f1b9 0901 	subs.w	r9, r9, #1
 80077f8:	d505      	bpl.n	8007806 <_fwalk_sglue+0x22>
 80077fa:	6824      	ldr	r4, [r4, #0]
 80077fc:	2c00      	cmp	r4, #0
 80077fe:	d1f7      	bne.n	80077f0 <_fwalk_sglue+0xc>
 8007800:	4630      	mov	r0, r6
 8007802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d907      	bls.n	800781c <_fwalk_sglue+0x38>
 800780c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007810:	3301      	adds	r3, #1
 8007812:	d003      	beq.n	800781c <_fwalk_sglue+0x38>
 8007814:	4629      	mov	r1, r5
 8007816:	4638      	mov	r0, r7
 8007818:	47c0      	blx	r8
 800781a:	4306      	orrs	r6, r0
 800781c:	3568      	adds	r5, #104	@ 0x68
 800781e:	e7e9      	b.n	80077f4 <_fwalk_sglue+0x10>

08007820 <iprintf>:
 8007820:	b40f      	push	{r0, r1, r2, r3}
 8007822:	b507      	push	{r0, r1, r2, lr}
 8007824:	4906      	ldr	r1, [pc, #24]	@ (8007840 <iprintf+0x20>)
 8007826:	ab04      	add	r3, sp, #16
 8007828:	6808      	ldr	r0, [r1, #0]
 800782a:	f853 2b04 	ldr.w	r2, [r3], #4
 800782e:	6881      	ldr	r1, [r0, #8]
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	f001 fe49 	bl	80094c8 <_vfiprintf_r>
 8007836:	b003      	add	sp, #12
 8007838:	f85d eb04 	ldr.w	lr, [sp], #4
 800783c:	b004      	add	sp, #16
 800783e:	4770      	bx	lr
 8007840:	20000018 	.word	0x20000018

08007844 <_puts_r>:
 8007844:	6a03      	ldr	r3, [r0, #32]
 8007846:	b570      	push	{r4, r5, r6, lr}
 8007848:	6884      	ldr	r4, [r0, #8]
 800784a:	4605      	mov	r5, r0
 800784c:	460e      	mov	r6, r1
 800784e:	b90b      	cbnz	r3, 8007854 <_puts_r+0x10>
 8007850:	f7ff ffb0 	bl	80077b4 <__sinit>
 8007854:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007856:	07db      	lsls	r3, r3, #31
 8007858:	d405      	bmi.n	8007866 <_puts_r+0x22>
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	0598      	lsls	r0, r3, #22
 800785e:	d402      	bmi.n	8007866 <_puts_r+0x22>
 8007860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007862:	f000 f9d8 	bl	8007c16 <__retarget_lock_acquire_recursive>
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	0719      	lsls	r1, r3, #28
 800786a:	d502      	bpl.n	8007872 <_puts_r+0x2e>
 800786c:	6923      	ldr	r3, [r4, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d135      	bne.n	80078de <_puts_r+0x9a>
 8007872:	4621      	mov	r1, r4
 8007874:	4628      	mov	r0, r5
 8007876:	f000 f8fb 	bl	8007a70 <__swsetup_r>
 800787a:	b380      	cbz	r0, 80078de <_puts_r+0x9a>
 800787c:	f04f 35ff 	mov.w	r5, #4294967295
 8007880:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007882:	07da      	lsls	r2, r3, #31
 8007884:	d405      	bmi.n	8007892 <_puts_r+0x4e>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	059b      	lsls	r3, r3, #22
 800788a:	d402      	bmi.n	8007892 <_puts_r+0x4e>
 800788c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800788e:	f000 f9c3 	bl	8007c18 <__retarget_lock_release_recursive>
 8007892:	4628      	mov	r0, r5
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	2b00      	cmp	r3, #0
 8007898:	da04      	bge.n	80078a4 <_puts_r+0x60>
 800789a:	69a2      	ldr	r2, [r4, #24]
 800789c:	429a      	cmp	r2, r3
 800789e:	dc17      	bgt.n	80078d0 <_puts_r+0x8c>
 80078a0:	290a      	cmp	r1, #10
 80078a2:	d015      	beq.n	80078d0 <_puts_r+0x8c>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	7019      	strb	r1, [r3, #0]
 80078ac:	68a3      	ldr	r3, [r4, #8]
 80078ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078b2:	3b01      	subs	r3, #1
 80078b4:	60a3      	str	r3, [r4, #8]
 80078b6:	2900      	cmp	r1, #0
 80078b8:	d1ed      	bne.n	8007896 <_puts_r+0x52>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da11      	bge.n	80078e2 <_puts_r+0x9e>
 80078be:	4622      	mov	r2, r4
 80078c0:	210a      	movs	r1, #10
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f895 	bl	80079f2 <__swbuf_r>
 80078c8:	3001      	adds	r0, #1
 80078ca:	d0d7      	beq.n	800787c <_puts_r+0x38>
 80078cc:	250a      	movs	r5, #10
 80078ce:	e7d7      	b.n	8007880 <_puts_r+0x3c>
 80078d0:	4622      	mov	r2, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f88d 	bl	80079f2 <__swbuf_r>
 80078d8:	3001      	adds	r0, #1
 80078da:	d1e7      	bne.n	80078ac <_puts_r+0x68>
 80078dc:	e7ce      	b.n	800787c <_puts_r+0x38>
 80078de:	3e01      	subs	r6, #1
 80078e0:	e7e4      	b.n	80078ac <_puts_r+0x68>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	6022      	str	r2, [r4, #0]
 80078e8:	220a      	movs	r2, #10
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e7ee      	b.n	80078cc <_puts_r+0x88>
	...

080078f0 <puts>:
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <puts+0xc>)
 80078f2:	4601      	mov	r1, r0
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f7ff bfa5 	b.w	8007844 <_puts_r>
 80078fa:	bf00      	nop
 80078fc:	20000018 	.word	0x20000018

08007900 <sniprintf>:
 8007900:	b40c      	push	{r2, r3}
 8007902:	b530      	push	{r4, r5, lr}
 8007904:	4b18      	ldr	r3, [pc, #96]	@ (8007968 <sniprintf+0x68>)
 8007906:	1e0c      	subs	r4, r1, #0
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	b09d      	sub	sp, #116	@ 0x74
 800790c:	da08      	bge.n	8007920 <sniprintf+0x20>
 800790e:	238b      	movs	r3, #139	@ 0x8b
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	b01d      	add	sp, #116	@ 0x74
 8007918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800791c:	b002      	add	sp, #8
 800791e:	4770      	bx	lr
 8007920:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007924:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800792e:	bf14      	ite	ne
 8007930:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007934:	4623      	moveq	r3, r4
 8007936:	9304      	str	r3, [sp, #16]
 8007938:	9307      	str	r3, [sp, #28]
 800793a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800793e:	9002      	str	r0, [sp, #8]
 8007940:	9006      	str	r0, [sp, #24]
 8007942:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007946:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007948:	ab21      	add	r3, sp, #132	@ 0x84
 800794a:	a902      	add	r1, sp, #8
 800794c:	4628      	mov	r0, r5
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	f001 fc94 	bl	800927c <_svfiprintf_r>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	bfbc      	itt	lt
 8007958:	238b      	movlt	r3, #139	@ 0x8b
 800795a:	602b      	strlt	r3, [r5, #0]
 800795c:	2c00      	cmp	r4, #0
 800795e:	d0da      	beq.n	8007916 <sniprintf+0x16>
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	2200      	movs	r2, #0
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e7d6      	b.n	8007916 <sniprintf+0x16>
 8007968:	20000018 	.word	0x20000018

0800796c <__sread>:
 800796c:	b510      	push	{r4, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007974:	f000 f900 	bl	8007b78 <_read_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	bfab      	itete	ge
 800797c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800797e:	89a3      	ldrhlt	r3, [r4, #12]
 8007980:	181b      	addge	r3, r3, r0
 8007982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007986:	bfac      	ite	ge
 8007988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800798a:	81a3      	strhlt	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__swrite>:
 800798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007992:	461f      	mov	r7, r3
 8007994:	898b      	ldrh	r3, [r1, #12]
 8007996:	05db      	lsls	r3, r3, #23
 8007998:	4605      	mov	r5, r0
 800799a:	460c      	mov	r4, r1
 800799c:	4616      	mov	r6, r2
 800799e:	d505      	bpl.n	80079ac <__swrite+0x1e>
 80079a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a4:	2302      	movs	r3, #2
 80079a6:	2200      	movs	r2, #0
 80079a8:	f000 f8d4 	bl	8007b54 <_lseek_r>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	4628      	mov	r0, r5
 80079be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c2:	f000 b8eb 	b.w	8007b9c <_write_r>

080079c6 <__sseek>:
 80079c6:	b510      	push	{r4, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ce:	f000 f8c1 	bl	8007b54 <_lseek_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	bf15      	itete	ne
 80079d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079e2:	81a3      	strheq	r3, [r4, #12]
 80079e4:	bf18      	it	ne
 80079e6:	81a3      	strhne	r3, [r4, #12]
 80079e8:	bd10      	pop	{r4, pc}

080079ea <__sclose>:
 80079ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ee:	f000 b8a1 	b.w	8007b34 <_close_r>

080079f2 <__swbuf_r>:
 80079f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f4:	460e      	mov	r6, r1
 80079f6:	4614      	mov	r4, r2
 80079f8:	4605      	mov	r5, r0
 80079fa:	b118      	cbz	r0, 8007a04 <__swbuf_r+0x12>
 80079fc:	6a03      	ldr	r3, [r0, #32]
 80079fe:	b90b      	cbnz	r3, 8007a04 <__swbuf_r+0x12>
 8007a00:	f7ff fed8 	bl	80077b4 <__sinit>
 8007a04:	69a3      	ldr	r3, [r4, #24]
 8007a06:	60a3      	str	r3, [r4, #8]
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	071a      	lsls	r2, r3, #28
 8007a0c:	d501      	bpl.n	8007a12 <__swbuf_r+0x20>
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	b943      	cbnz	r3, 8007a24 <__swbuf_r+0x32>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 f82b 	bl	8007a70 <__swsetup_r>
 8007a1a:	b118      	cbz	r0, 8007a24 <__swbuf_r+0x32>
 8007a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a20:	4638      	mov	r0, r7
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	6922      	ldr	r2, [r4, #16]
 8007a28:	1a98      	subs	r0, r3, r2
 8007a2a:	6963      	ldr	r3, [r4, #20]
 8007a2c:	b2f6      	uxtb	r6, r6
 8007a2e:	4283      	cmp	r3, r0
 8007a30:	4637      	mov	r7, r6
 8007a32:	dc05      	bgt.n	8007a40 <__swbuf_r+0x4e>
 8007a34:	4621      	mov	r1, r4
 8007a36:	4628      	mov	r0, r5
 8007a38:	f001 fee2 	bl	8009800 <_fflush_r>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d1ed      	bne.n	8007a1c <__swbuf_r+0x2a>
 8007a40:	68a3      	ldr	r3, [r4, #8]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	701e      	strb	r6, [r3, #0]
 8007a4e:	6962      	ldr	r2, [r4, #20]
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d004      	beq.n	8007a60 <__swbuf_r+0x6e>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	07db      	lsls	r3, r3, #31
 8007a5a:	d5e1      	bpl.n	8007a20 <__swbuf_r+0x2e>
 8007a5c:	2e0a      	cmp	r6, #10
 8007a5e:	d1df      	bne.n	8007a20 <__swbuf_r+0x2e>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f001 fecc 	bl	8009800 <_fflush_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0d9      	beq.n	8007a20 <__swbuf_r+0x2e>
 8007a6c:	e7d6      	b.n	8007a1c <__swbuf_r+0x2a>
	...

08007a70 <__swsetup_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4b29      	ldr	r3, [pc, #164]	@ (8007b18 <__swsetup_r+0xa8>)
 8007a74:	4605      	mov	r5, r0
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	460c      	mov	r4, r1
 8007a7a:	b118      	cbz	r0, 8007a84 <__swsetup_r+0x14>
 8007a7c:	6a03      	ldr	r3, [r0, #32]
 8007a7e:	b90b      	cbnz	r3, 8007a84 <__swsetup_r+0x14>
 8007a80:	f7ff fe98 	bl	80077b4 <__sinit>
 8007a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a88:	0719      	lsls	r1, r3, #28
 8007a8a:	d422      	bmi.n	8007ad2 <__swsetup_r+0x62>
 8007a8c:	06da      	lsls	r2, r3, #27
 8007a8e:	d407      	bmi.n	8007aa0 <__swsetup_r+0x30>
 8007a90:	2209      	movs	r2, #9
 8007a92:	602a      	str	r2, [r5, #0]
 8007a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9e:	e033      	b.n	8007b08 <__swsetup_r+0x98>
 8007aa0:	0758      	lsls	r0, r3, #29
 8007aa2:	d512      	bpl.n	8007aca <__swsetup_r+0x5a>
 8007aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aa6:	b141      	cbz	r1, 8007aba <__swsetup_r+0x4a>
 8007aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aac:	4299      	cmp	r1, r3
 8007aae:	d002      	beq.n	8007ab6 <__swsetup_r+0x46>
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 ff0d 	bl	80088d0 <_free_r>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6063      	str	r3, [r4, #4]
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0308 	orr.w	r3, r3, #8
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	b94b      	cbnz	r3, 8007aea <__swsetup_r+0x7a>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ae0:	d003      	beq.n	8007aea <__swsetup_r+0x7a>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f001 fed9 	bl	800989c <__smakebuf_r>
 8007aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aee:	f013 0201 	ands.w	r2, r3, #1
 8007af2:	d00a      	beq.n	8007b0a <__swsetup_r+0x9a>
 8007af4:	2200      	movs	r2, #0
 8007af6:	60a2      	str	r2, [r4, #8]
 8007af8:	6962      	ldr	r2, [r4, #20]
 8007afa:	4252      	negs	r2, r2
 8007afc:	61a2      	str	r2, [r4, #24]
 8007afe:	6922      	ldr	r2, [r4, #16]
 8007b00:	b942      	cbnz	r2, 8007b14 <__swsetup_r+0xa4>
 8007b02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b06:	d1c5      	bne.n	8007a94 <__swsetup_r+0x24>
 8007b08:	bd38      	pop	{r3, r4, r5, pc}
 8007b0a:	0799      	lsls	r1, r3, #30
 8007b0c:	bf58      	it	pl
 8007b0e:	6962      	ldrpl	r2, [r4, #20]
 8007b10:	60a2      	str	r2, [r4, #8]
 8007b12:	e7f4      	b.n	8007afe <__swsetup_r+0x8e>
 8007b14:	2000      	movs	r0, #0
 8007b16:	e7f7      	b.n	8007b08 <__swsetup_r+0x98>
 8007b18:	20000018 	.word	0x20000018

08007b1c <memset>:
 8007b1c:	4402      	add	r2, r0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d100      	bne.n	8007b26 <memset+0xa>
 8007b24:	4770      	bx	lr
 8007b26:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2a:	e7f9      	b.n	8007b20 <memset+0x4>

08007b2c <_localeconv_r>:
 8007b2c:	4800      	ldr	r0, [pc, #0]	@ (8007b30 <_localeconv_r+0x4>)
 8007b2e:	4770      	bx	lr
 8007b30:	20000158 	.word	0x20000158

08007b34 <_close_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4d06      	ldr	r5, [pc, #24]	@ (8007b50 <_close_r+0x1c>)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	f7fa f9b2 	bl	8001ea8 <_close>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_close_r+0x1a>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_close_r+0x1a>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	20000938 	.word	0x20000938

08007b54 <_lseek_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d07      	ldr	r5, [pc, #28]	@ (8007b74 <_lseek_r+0x20>)
 8007b58:	4604      	mov	r4, r0
 8007b5a:	4608      	mov	r0, r1
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	602a      	str	r2, [r5, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f7fa f9c7 	bl	8001ef6 <_lseek>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_lseek_r+0x1e>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_lseek_r+0x1e>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	20000938 	.word	0x20000938

08007b78 <_read_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4d07      	ldr	r5, [pc, #28]	@ (8007b98 <_read_r+0x20>)
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	4608      	mov	r0, r1
 8007b80:	4611      	mov	r1, r2
 8007b82:	2200      	movs	r2, #0
 8007b84:	602a      	str	r2, [r5, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f7fa f955 	bl	8001e36 <_read>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_read_r+0x1e>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_read_r+0x1e>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20000938 	.word	0x20000938

08007b9c <_write_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	4d07      	ldr	r5, [pc, #28]	@ (8007bbc <_write_r+0x20>)
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	4608      	mov	r0, r1
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	602a      	str	r2, [r5, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	f7fa f960 	bl	8001e70 <_write>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_write_r+0x1e>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_write_r+0x1e>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20000938 	.word	0x20000938

08007bc0 <__errno>:
 8007bc0:	4b01      	ldr	r3, [pc, #4]	@ (8007bc8 <__errno+0x8>)
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20000018 	.word	0x20000018

08007bcc <__libc_init_array>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	4d0d      	ldr	r5, [pc, #52]	@ (8007c04 <__libc_init_array+0x38>)
 8007bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8007c08 <__libc_init_array+0x3c>)
 8007bd2:	1b64      	subs	r4, r4, r5
 8007bd4:	10a4      	asrs	r4, r4, #2
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	42a6      	cmp	r6, r4
 8007bda:	d109      	bne.n	8007bf0 <__libc_init_array+0x24>
 8007bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8007c0c <__libc_init_array+0x40>)
 8007bde:	4c0c      	ldr	r4, [pc, #48]	@ (8007c10 <__libc_init_array+0x44>)
 8007be0:	f001 ffd8 	bl	8009b94 <_init>
 8007be4:	1b64      	subs	r4, r4, r5
 8007be6:	10a4      	asrs	r4, r4, #2
 8007be8:	2600      	movs	r6, #0
 8007bea:	42a6      	cmp	r6, r4
 8007bec:	d105      	bne.n	8007bfa <__libc_init_array+0x2e>
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf4:	4798      	blx	r3
 8007bf6:	3601      	adds	r6, #1
 8007bf8:	e7ee      	b.n	8007bd8 <__libc_init_array+0xc>
 8007bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfe:	4798      	blx	r3
 8007c00:	3601      	adds	r6, #1
 8007c02:	e7f2      	b.n	8007bea <__libc_init_array+0x1e>
 8007c04:	0800a7b4 	.word	0x0800a7b4
 8007c08:	0800a7b4 	.word	0x0800a7b4
 8007c0c:	0800a7b4 	.word	0x0800a7b4
 8007c10:	0800a7b8 	.word	0x0800a7b8

08007c14 <__retarget_lock_init_recursive>:
 8007c14:	4770      	bx	lr

08007c16 <__retarget_lock_acquire_recursive>:
 8007c16:	4770      	bx	lr

08007c18 <__retarget_lock_release_recursive>:
 8007c18:	4770      	bx	lr

08007c1a <quorem>:
 8007c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1e:	6903      	ldr	r3, [r0, #16]
 8007c20:	690c      	ldr	r4, [r1, #16]
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	4607      	mov	r7, r0
 8007c26:	db7e      	blt.n	8007d26 <quorem+0x10c>
 8007c28:	3c01      	subs	r4, #1
 8007c2a:	f101 0814 	add.w	r8, r1, #20
 8007c2e:	00a3      	lsls	r3, r4, #2
 8007c30:	f100 0514 	add.w	r5, r0, #20
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c44:	3301      	adds	r3, #1
 8007c46:	429a      	cmp	r2, r3
 8007c48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c50:	d32e      	bcc.n	8007cb0 <quorem+0x96>
 8007c52:	f04f 0a00 	mov.w	sl, #0
 8007c56:	46c4      	mov	ip, r8
 8007c58:	46ae      	mov	lr, r5
 8007c5a:	46d3      	mov	fp, sl
 8007c5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c60:	b298      	uxth	r0, r3
 8007c62:	fb06 a000 	mla	r0, r6, r0, sl
 8007c66:	0c02      	lsrs	r2, r0, #16
 8007c68:	0c1b      	lsrs	r3, r3, #16
 8007c6a:	fb06 2303 	mla	r3, r6, r3, r2
 8007c6e:	f8de 2000 	ldr.w	r2, [lr]
 8007c72:	b280      	uxth	r0, r0
 8007c74:	b292      	uxth	r2, r2
 8007c76:	1a12      	subs	r2, r2, r0
 8007c78:	445a      	add	r2, fp
 8007c7a:	f8de 0000 	ldr.w	r0, [lr]
 8007c7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c92:	45e1      	cmp	r9, ip
 8007c94:	f84e 2b04 	str.w	r2, [lr], #4
 8007c98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c9c:	d2de      	bcs.n	8007c5c <quorem+0x42>
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	58eb      	ldr	r3, [r5, r3]
 8007ca2:	b92b      	cbnz	r3, 8007cb0 <quorem+0x96>
 8007ca4:	9b01      	ldr	r3, [sp, #4]
 8007ca6:	3b04      	subs	r3, #4
 8007ca8:	429d      	cmp	r5, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	d32f      	bcc.n	8007d0e <quorem+0xf4>
 8007cae:	613c      	str	r4, [r7, #16]
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f001 f97f 	bl	8008fb4 <__mcmp>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	db25      	blt.n	8007d06 <quorem+0xec>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cc2:	f8d1 c000 	ldr.w	ip, [r1]
 8007cc6:	fa1f fe82 	uxth.w	lr, r2
 8007cca:	fa1f f38c 	uxth.w	r3, ip
 8007cce:	eba3 030e 	sub.w	r3, r3, lr
 8007cd2:	4403      	add	r3, r0
 8007cd4:	0c12      	lsrs	r2, r2, #16
 8007cd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007cda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ce4:	45c1      	cmp	r9, r8
 8007ce6:	f841 3b04 	str.w	r3, [r1], #4
 8007cea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007cee:	d2e6      	bcs.n	8007cbe <quorem+0xa4>
 8007cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cf8:	b922      	cbnz	r2, 8007d04 <quorem+0xea>
 8007cfa:	3b04      	subs	r3, #4
 8007cfc:	429d      	cmp	r5, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	d30b      	bcc.n	8007d1a <quorem+0x100>
 8007d02:	613c      	str	r4, [r7, #16]
 8007d04:	3601      	adds	r6, #1
 8007d06:	4630      	mov	r0, r6
 8007d08:	b003      	add	sp, #12
 8007d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	d1cb      	bne.n	8007cae <quorem+0x94>
 8007d16:	3c01      	subs	r4, #1
 8007d18:	e7c6      	b.n	8007ca8 <quorem+0x8e>
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	3b04      	subs	r3, #4
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	d1ef      	bne.n	8007d02 <quorem+0xe8>
 8007d22:	3c01      	subs	r4, #1
 8007d24:	e7ea      	b.n	8007cfc <quorem+0xe2>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e7ee      	b.n	8007d08 <quorem+0xee>
 8007d2a:	0000      	movs	r0, r0
 8007d2c:	0000      	movs	r0, r0
	...

08007d30 <_dtoa_r>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	69c7      	ldr	r7, [r0, #28]
 8007d36:	b097      	sub	sp, #92	@ 0x5c
 8007d38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007d3c:	ec55 4b10 	vmov	r4, r5, d0
 8007d40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007d42:	9107      	str	r1, [sp, #28]
 8007d44:	4681      	mov	r9, r0
 8007d46:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d48:	9311      	str	r3, [sp, #68]	@ 0x44
 8007d4a:	b97f      	cbnz	r7, 8007d6c <_dtoa_r+0x3c>
 8007d4c:	2010      	movs	r0, #16
 8007d4e:	f000 fe09 	bl	8008964 <malloc>
 8007d52:	4602      	mov	r2, r0
 8007d54:	f8c9 001c 	str.w	r0, [r9, #28]
 8007d58:	b920      	cbnz	r0, 8007d64 <_dtoa_r+0x34>
 8007d5a:	4ba9      	ldr	r3, [pc, #676]	@ (8008000 <_dtoa_r+0x2d0>)
 8007d5c:	21ef      	movs	r1, #239	@ 0xef
 8007d5e:	48a9      	ldr	r0, [pc, #676]	@ (8008004 <_dtoa_r+0x2d4>)
 8007d60:	f001 fe32 	bl	80099c8 <__assert_func>
 8007d64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d68:	6007      	str	r7, [r0, #0]
 8007d6a:	60c7      	str	r7, [r0, #12]
 8007d6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	b159      	cbz	r1, 8007d8c <_dtoa_r+0x5c>
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	604a      	str	r2, [r1, #4]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4093      	lsls	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
 8007d7e:	4648      	mov	r0, r9
 8007d80:	f000 fee6 	bl	8008b50 <_Bfree>
 8007d84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	1e2b      	subs	r3, r5, #0
 8007d8e:	bfb9      	ittee	lt
 8007d90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d94:	9305      	strlt	r3, [sp, #20]
 8007d96:	2300      	movge	r3, #0
 8007d98:	6033      	strge	r3, [r6, #0]
 8007d9a:	9f05      	ldr	r7, [sp, #20]
 8007d9c:	4b9a      	ldr	r3, [pc, #616]	@ (8008008 <_dtoa_r+0x2d8>)
 8007d9e:	bfbc      	itt	lt
 8007da0:	2201      	movlt	r2, #1
 8007da2:	6032      	strlt	r2, [r6, #0]
 8007da4:	43bb      	bics	r3, r7
 8007da6:	d112      	bne.n	8007dce <_dtoa_r+0x9e>
 8007da8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007daa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007db4:	4323      	orrs	r3, r4
 8007db6:	f000 855a 	beq.w	800886e <_dtoa_r+0xb3e>
 8007dba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800801c <_dtoa_r+0x2ec>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 855c 	beq.w	800887e <_dtoa_r+0xb4e>
 8007dc6:	f10a 0303 	add.w	r3, sl, #3
 8007dca:	f000 bd56 	b.w	800887a <_dtoa_r+0xb4a>
 8007dce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	ec51 0b17 	vmov	r0, r1, d7
 8007dd8:	2300      	movs	r3, #0
 8007dda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007dde:	f7f8 fe9b 	bl	8000b18 <__aeabi_dcmpeq>
 8007de2:	4680      	mov	r8, r0
 8007de4:	b158      	cbz	r0, 8007dfe <_dtoa_r+0xce>
 8007de6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007de8:	2301      	movs	r3, #1
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dee:	b113      	cbz	r3, 8007df6 <_dtoa_r+0xc6>
 8007df0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007df2:	4b86      	ldr	r3, [pc, #536]	@ (800800c <_dtoa_r+0x2dc>)
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008020 <_dtoa_r+0x2f0>
 8007dfa:	f000 bd40 	b.w	800887e <_dtoa_r+0xb4e>
 8007dfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007e02:	aa14      	add	r2, sp, #80	@ 0x50
 8007e04:	a915      	add	r1, sp, #84	@ 0x54
 8007e06:	4648      	mov	r0, r9
 8007e08:	f001 f984 	bl	8009114 <__d2b>
 8007e0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007e10:	9002      	str	r0, [sp, #8]
 8007e12:	2e00      	cmp	r6, #0
 8007e14:	d078      	beq.n	8007f08 <_dtoa_r+0x1d8>
 8007e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e30:	4619      	mov	r1, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	4b76      	ldr	r3, [pc, #472]	@ (8008010 <_dtoa_r+0x2e0>)
 8007e36:	f7f8 fa4f 	bl	80002d8 <__aeabi_dsub>
 8007e3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007fe8 <_dtoa_r+0x2b8>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f7f8 fc02 	bl	8000648 <__aeabi_dmul>
 8007e44:	a36a      	add	r3, pc, #424	@ (adr r3, 8007ff0 <_dtoa_r+0x2c0>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 fa47 	bl	80002dc <__adddf3>
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4630      	mov	r0, r6
 8007e52:	460d      	mov	r5, r1
 8007e54:	f7f8 fb8e 	bl	8000574 <__aeabi_i2d>
 8007e58:	a367      	add	r3, pc, #412	@ (adr r3, 8007ff8 <_dtoa_r+0x2c8>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 fbf3 	bl	8000648 <__aeabi_dmul>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4620      	mov	r0, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f7f8 fa37 	bl	80002dc <__adddf3>
 8007e6e:	4604      	mov	r4, r0
 8007e70:	460d      	mov	r5, r1
 8007e72:	f7f8 fe99 	bl	8000ba8 <__aeabi_d2iz>
 8007e76:	2200      	movs	r2, #0
 8007e78:	4607      	mov	r7, r0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7f8 fe54 	bl	8000b2c <__aeabi_dcmplt>
 8007e84:	b140      	cbz	r0, 8007e98 <_dtoa_r+0x168>
 8007e86:	4638      	mov	r0, r7
 8007e88:	f7f8 fb74 	bl	8000574 <__aeabi_i2d>
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	462b      	mov	r3, r5
 8007e90:	f7f8 fe42 	bl	8000b18 <__aeabi_dcmpeq>
 8007e94:	b900      	cbnz	r0, 8007e98 <_dtoa_r+0x168>
 8007e96:	3f01      	subs	r7, #1
 8007e98:	2f16      	cmp	r7, #22
 8007e9a:	d852      	bhi.n	8007f42 <_dtoa_r+0x212>
 8007e9c:	4b5d      	ldr	r3, [pc, #372]	@ (8008014 <_dtoa_r+0x2e4>)
 8007e9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007eaa:	f7f8 fe3f 	bl	8000b2c <__aeabi_dcmplt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d049      	beq.n	8007f46 <_dtoa_r+0x216>
 8007eb2:	3f01      	subs	r7, #1
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007eb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007eba:	1b9b      	subs	r3, r3, r6
 8007ebc:	1e5a      	subs	r2, r3, #1
 8007ebe:	bf45      	ittet	mi
 8007ec0:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ec4:	9300      	strmi	r3, [sp, #0]
 8007ec6:	2300      	movpl	r3, #0
 8007ec8:	2300      	movmi	r3, #0
 8007eca:	9206      	str	r2, [sp, #24]
 8007ecc:	bf54      	ite	pl
 8007ece:	9300      	strpl	r3, [sp, #0]
 8007ed0:	9306      	strmi	r3, [sp, #24]
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	db39      	blt.n	8007f4a <_dtoa_r+0x21a>
 8007ed6:	9b06      	ldr	r3, [sp, #24]
 8007ed8:	970d      	str	r7, [sp, #52]	@ 0x34
 8007eda:	443b      	add	r3, r7
 8007edc:	9306      	str	r3, [sp, #24]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	9308      	str	r3, [sp, #32]
 8007ee2:	9b07      	ldr	r3, [sp, #28]
 8007ee4:	2b09      	cmp	r3, #9
 8007ee6:	d863      	bhi.n	8007fb0 <_dtoa_r+0x280>
 8007ee8:	2b05      	cmp	r3, #5
 8007eea:	bfc4      	itt	gt
 8007eec:	3b04      	subgt	r3, #4
 8007eee:	9307      	strgt	r3, [sp, #28]
 8007ef0:	9b07      	ldr	r3, [sp, #28]
 8007ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ef6:	bfcc      	ite	gt
 8007ef8:	2400      	movgt	r4, #0
 8007efa:	2401      	movle	r4, #1
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d863      	bhi.n	8007fc8 <_dtoa_r+0x298>
 8007f00:	e8df f003 	tbb	[pc, r3]
 8007f04:	2b375452 	.word	0x2b375452
 8007f08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007f0c:	441e      	add	r6, r3
 8007f0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	bfc1      	itttt	gt
 8007f16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f1a:	409f      	lslgt	r7, r3
 8007f1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f24:	bfd6      	itet	le
 8007f26:	f1c3 0320 	rsble	r3, r3, #32
 8007f2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007f2e:	fa04 f003 	lslle.w	r0, r4, r3
 8007f32:	f7f8 fb0f 	bl	8000554 <__aeabi_ui2d>
 8007f36:	2201      	movs	r2, #1
 8007f38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f3c:	3e01      	subs	r6, #1
 8007f3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007f40:	e776      	b.n	8007e30 <_dtoa_r+0x100>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e7b7      	b.n	8007eb6 <_dtoa_r+0x186>
 8007f46:	9010      	str	r0, [sp, #64]	@ 0x40
 8007f48:	e7b6      	b.n	8007eb8 <_dtoa_r+0x188>
 8007f4a:	9b00      	ldr	r3, [sp, #0]
 8007f4c:	1bdb      	subs	r3, r3, r7
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	427b      	negs	r3, r7
 8007f52:	9308      	str	r3, [sp, #32]
 8007f54:	2300      	movs	r3, #0
 8007f56:	930d      	str	r3, [sp, #52]	@ 0x34
 8007f58:	e7c3      	b.n	8007ee2 <_dtoa_r+0x1b2>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f60:	eb07 0b03 	add.w	fp, r7, r3
 8007f64:	f10b 0301 	add.w	r3, fp, #1
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	bfb8      	it	lt
 8007f6e:	2301      	movlt	r3, #1
 8007f70:	e006      	b.n	8007f80 <_dtoa_r+0x250>
 8007f72:	2301      	movs	r3, #1
 8007f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dd28      	ble.n	8007fce <_dtoa_r+0x29e>
 8007f7c:	469b      	mov	fp, r3
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007f84:	2100      	movs	r1, #0
 8007f86:	2204      	movs	r2, #4
 8007f88:	f102 0514 	add.w	r5, r2, #20
 8007f8c:	429d      	cmp	r5, r3
 8007f8e:	d926      	bls.n	8007fde <_dtoa_r+0x2ae>
 8007f90:	6041      	str	r1, [r0, #4]
 8007f92:	4648      	mov	r0, r9
 8007f94:	f000 fd9c 	bl	8008ad0 <_Balloc>
 8007f98:	4682      	mov	sl, r0
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d142      	bne.n	8008024 <_dtoa_r+0x2f4>
 8007f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008018 <_dtoa_r+0x2e8>)
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007fa6:	e6da      	b.n	8007d5e <_dtoa_r+0x2e>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e7e3      	b.n	8007f74 <_dtoa_r+0x244>
 8007fac:	2300      	movs	r3, #0
 8007fae:	e7d5      	b.n	8007f5c <_dtoa_r+0x22c>
 8007fb0:	2401      	movs	r4, #1
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	9307      	str	r3, [sp, #28]
 8007fb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8007fb8:	f04f 3bff 	mov.w	fp, #4294967295
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8cd b00c 	str.w	fp, [sp, #12]
 8007fc2:	2312      	movs	r3, #18
 8007fc4:	920c      	str	r2, [sp, #48]	@ 0x30
 8007fc6:	e7db      	b.n	8007f80 <_dtoa_r+0x250>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fcc:	e7f4      	b.n	8007fb8 <_dtoa_r+0x288>
 8007fce:	f04f 0b01 	mov.w	fp, #1
 8007fd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8007fd6:	465b      	mov	r3, fp
 8007fd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007fdc:	e7d0      	b.n	8007f80 <_dtoa_r+0x250>
 8007fde:	3101      	adds	r1, #1
 8007fe0:	0052      	lsls	r2, r2, #1
 8007fe2:	e7d1      	b.n	8007f88 <_dtoa_r+0x258>
 8007fe4:	f3af 8000 	nop.w
 8007fe8:	636f4361 	.word	0x636f4361
 8007fec:	3fd287a7 	.word	0x3fd287a7
 8007ff0:	8b60c8b3 	.word	0x8b60c8b3
 8007ff4:	3fc68a28 	.word	0x3fc68a28
 8007ff8:	509f79fb 	.word	0x509f79fb
 8007ffc:	3fd34413 	.word	0x3fd34413
 8008000:	0800a479 	.word	0x0800a479
 8008004:	0800a490 	.word	0x0800a490
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	0800a449 	.word	0x0800a449
 8008010:	3ff80000 	.word	0x3ff80000
 8008014:	0800a5e0 	.word	0x0800a5e0
 8008018:	0800a4e8 	.word	0x0800a4e8
 800801c:	0800a475 	.word	0x0800a475
 8008020:	0800a448 	.word	0x0800a448
 8008024:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008028:	6018      	str	r0, [r3, #0]
 800802a:	9b03      	ldr	r3, [sp, #12]
 800802c:	2b0e      	cmp	r3, #14
 800802e:	f200 80a1 	bhi.w	8008174 <_dtoa_r+0x444>
 8008032:	2c00      	cmp	r4, #0
 8008034:	f000 809e 	beq.w	8008174 <_dtoa_r+0x444>
 8008038:	2f00      	cmp	r7, #0
 800803a:	dd33      	ble.n	80080a4 <_dtoa_r+0x374>
 800803c:	4b9c      	ldr	r3, [pc, #624]	@ (80082b0 <_dtoa_r+0x580>)
 800803e:	f007 020f 	and.w	r2, r7, #15
 8008042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008046:	ed93 7b00 	vldr	d7, [r3]
 800804a:	05f8      	lsls	r0, r7, #23
 800804c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008050:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008054:	d516      	bpl.n	8008084 <_dtoa_r+0x354>
 8008056:	4b97      	ldr	r3, [pc, #604]	@ (80082b4 <_dtoa_r+0x584>)
 8008058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800805c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008060:	f7f8 fc1c 	bl	800089c <__aeabi_ddiv>
 8008064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008068:	f004 040f 	and.w	r4, r4, #15
 800806c:	2603      	movs	r6, #3
 800806e:	4d91      	ldr	r5, [pc, #580]	@ (80082b4 <_dtoa_r+0x584>)
 8008070:	b954      	cbnz	r4, 8008088 <_dtoa_r+0x358>
 8008072:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800807a:	f7f8 fc0f 	bl	800089c <__aeabi_ddiv>
 800807e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008082:	e028      	b.n	80080d6 <_dtoa_r+0x3a6>
 8008084:	2602      	movs	r6, #2
 8008086:	e7f2      	b.n	800806e <_dtoa_r+0x33e>
 8008088:	07e1      	lsls	r1, r4, #31
 800808a:	d508      	bpl.n	800809e <_dtoa_r+0x36e>
 800808c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008090:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008094:	f7f8 fad8 	bl	8000648 <__aeabi_dmul>
 8008098:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800809c:	3601      	adds	r6, #1
 800809e:	1064      	asrs	r4, r4, #1
 80080a0:	3508      	adds	r5, #8
 80080a2:	e7e5      	b.n	8008070 <_dtoa_r+0x340>
 80080a4:	f000 80af 	beq.w	8008206 <_dtoa_r+0x4d6>
 80080a8:	427c      	negs	r4, r7
 80080aa:	4b81      	ldr	r3, [pc, #516]	@ (80082b0 <_dtoa_r+0x580>)
 80080ac:	4d81      	ldr	r5, [pc, #516]	@ (80082b4 <_dtoa_r+0x584>)
 80080ae:	f004 020f 	and.w	r2, r4, #15
 80080b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80080be:	f7f8 fac3 	bl	8000648 <__aeabi_dmul>
 80080c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080c6:	1124      	asrs	r4, r4, #4
 80080c8:	2300      	movs	r3, #0
 80080ca:	2602      	movs	r6, #2
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	f040 808f 	bne.w	80081f0 <_dtoa_r+0x4c0>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1d3      	bne.n	800807e <_dtoa_r+0x34e>
 80080d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8094 	beq.w	800820a <_dtoa_r+0x4da>
 80080e2:	4b75      	ldr	r3, [pc, #468]	@ (80082b8 <_dtoa_r+0x588>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	4620      	mov	r0, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7f8 fd1f 	bl	8000b2c <__aeabi_dcmplt>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	f000 808b 	beq.w	800820a <_dtoa_r+0x4da>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8087 	beq.w	800820a <_dtoa_r+0x4da>
 80080fc:	f1bb 0f00 	cmp.w	fp, #0
 8008100:	dd34      	ble.n	800816c <_dtoa_r+0x43c>
 8008102:	4620      	mov	r0, r4
 8008104:	4b6d      	ldr	r3, [pc, #436]	@ (80082bc <_dtoa_r+0x58c>)
 8008106:	2200      	movs	r2, #0
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 fa9d 	bl	8000648 <__aeabi_dmul>
 800810e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008112:	f107 38ff 	add.w	r8, r7, #4294967295
 8008116:	3601      	adds	r6, #1
 8008118:	465c      	mov	r4, fp
 800811a:	4630      	mov	r0, r6
 800811c:	f7f8 fa2a 	bl	8000574 <__aeabi_i2d>
 8008120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008124:	f7f8 fa90 	bl	8000648 <__aeabi_dmul>
 8008128:	4b65      	ldr	r3, [pc, #404]	@ (80082c0 <_dtoa_r+0x590>)
 800812a:	2200      	movs	r2, #0
 800812c:	f7f8 f8d6 	bl	80002dc <__adddf3>
 8008130:	4605      	mov	r5, r0
 8008132:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008136:	2c00      	cmp	r4, #0
 8008138:	d16a      	bne.n	8008210 <_dtoa_r+0x4e0>
 800813a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800813e:	4b61      	ldr	r3, [pc, #388]	@ (80082c4 <_dtoa_r+0x594>)
 8008140:	2200      	movs	r2, #0
 8008142:	f7f8 f8c9 	bl	80002d8 <__aeabi_dsub>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800814e:	462a      	mov	r2, r5
 8008150:	4633      	mov	r3, r6
 8008152:	f7f8 fd09 	bl	8000b68 <__aeabi_dcmpgt>
 8008156:	2800      	cmp	r0, #0
 8008158:	f040 8298 	bne.w	800868c <_dtoa_r+0x95c>
 800815c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008160:	462a      	mov	r2, r5
 8008162:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008166:	f7f8 fce1 	bl	8000b2c <__aeabi_dcmplt>
 800816a:	bb38      	cbnz	r0, 80081bc <_dtoa_r+0x48c>
 800816c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008170:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008174:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008176:	2b00      	cmp	r3, #0
 8008178:	f2c0 8157 	blt.w	800842a <_dtoa_r+0x6fa>
 800817c:	2f0e      	cmp	r7, #14
 800817e:	f300 8154 	bgt.w	800842a <_dtoa_r+0x6fa>
 8008182:	4b4b      	ldr	r3, [pc, #300]	@ (80082b0 <_dtoa_r+0x580>)
 8008184:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008188:	ed93 7b00 	vldr	d7, [r3]
 800818c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800818e:	2b00      	cmp	r3, #0
 8008190:	ed8d 7b00 	vstr	d7, [sp]
 8008194:	f280 80e5 	bge.w	8008362 <_dtoa_r+0x632>
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f300 80e1 	bgt.w	8008362 <_dtoa_r+0x632>
 80081a0:	d10c      	bne.n	80081bc <_dtoa_r+0x48c>
 80081a2:	4b48      	ldr	r3, [pc, #288]	@ (80082c4 <_dtoa_r+0x594>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	ec51 0b17 	vmov	r0, r1, d7
 80081aa:	f7f8 fa4d 	bl	8000648 <__aeabi_dmul>
 80081ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b2:	f7f8 fccf 	bl	8000b54 <__aeabi_dcmpge>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f000 8266 	beq.w	8008688 <_dtoa_r+0x958>
 80081bc:	2400      	movs	r4, #0
 80081be:	4625      	mov	r5, r4
 80081c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081c2:	4656      	mov	r6, sl
 80081c4:	ea6f 0803 	mvn.w	r8, r3
 80081c8:	2700      	movs	r7, #0
 80081ca:	4621      	mov	r1, r4
 80081cc:	4648      	mov	r0, r9
 80081ce:	f000 fcbf 	bl	8008b50 <_Bfree>
 80081d2:	2d00      	cmp	r5, #0
 80081d4:	f000 80bd 	beq.w	8008352 <_dtoa_r+0x622>
 80081d8:	b12f      	cbz	r7, 80081e6 <_dtoa_r+0x4b6>
 80081da:	42af      	cmp	r7, r5
 80081dc:	d003      	beq.n	80081e6 <_dtoa_r+0x4b6>
 80081de:	4639      	mov	r1, r7
 80081e0:	4648      	mov	r0, r9
 80081e2:	f000 fcb5 	bl	8008b50 <_Bfree>
 80081e6:	4629      	mov	r1, r5
 80081e8:	4648      	mov	r0, r9
 80081ea:	f000 fcb1 	bl	8008b50 <_Bfree>
 80081ee:	e0b0      	b.n	8008352 <_dtoa_r+0x622>
 80081f0:	07e2      	lsls	r2, r4, #31
 80081f2:	d505      	bpl.n	8008200 <_dtoa_r+0x4d0>
 80081f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081f8:	f7f8 fa26 	bl	8000648 <__aeabi_dmul>
 80081fc:	3601      	adds	r6, #1
 80081fe:	2301      	movs	r3, #1
 8008200:	1064      	asrs	r4, r4, #1
 8008202:	3508      	adds	r5, #8
 8008204:	e762      	b.n	80080cc <_dtoa_r+0x39c>
 8008206:	2602      	movs	r6, #2
 8008208:	e765      	b.n	80080d6 <_dtoa_r+0x3a6>
 800820a:	9c03      	ldr	r4, [sp, #12]
 800820c:	46b8      	mov	r8, r7
 800820e:	e784      	b.n	800811a <_dtoa_r+0x3ea>
 8008210:	4b27      	ldr	r3, [pc, #156]	@ (80082b0 <_dtoa_r+0x580>)
 8008212:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008214:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008218:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800821c:	4454      	add	r4, sl
 800821e:	2900      	cmp	r1, #0
 8008220:	d054      	beq.n	80082cc <_dtoa_r+0x59c>
 8008222:	4929      	ldr	r1, [pc, #164]	@ (80082c8 <_dtoa_r+0x598>)
 8008224:	2000      	movs	r0, #0
 8008226:	f7f8 fb39 	bl	800089c <__aeabi_ddiv>
 800822a:	4633      	mov	r3, r6
 800822c:	462a      	mov	r2, r5
 800822e:	f7f8 f853 	bl	80002d8 <__aeabi_dsub>
 8008232:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008236:	4656      	mov	r6, sl
 8008238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800823c:	f7f8 fcb4 	bl	8000ba8 <__aeabi_d2iz>
 8008240:	4605      	mov	r5, r0
 8008242:	f7f8 f997 	bl	8000574 <__aeabi_i2d>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800824e:	f7f8 f843 	bl	80002d8 <__aeabi_dsub>
 8008252:	3530      	adds	r5, #48	@ 0x30
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800825c:	f806 5b01 	strb.w	r5, [r6], #1
 8008260:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008264:	f7f8 fc62 	bl	8000b2c <__aeabi_dcmplt>
 8008268:	2800      	cmp	r0, #0
 800826a:	d172      	bne.n	8008352 <_dtoa_r+0x622>
 800826c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008270:	4911      	ldr	r1, [pc, #68]	@ (80082b8 <_dtoa_r+0x588>)
 8008272:	2000      	movs	r0, #0
 8008274:	f7f8 f830 	bl	80002d8 <__aeabi_dsub>
 8008278:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800827c:	f7f8 fc56 	bl	8000b2c <__aeabi_dcmplt>
 8008280:	2800      	cmp	r0, #0
 8008282:	f040 80b4 	bne.w	80083ee <_dtoa_r+0x6be>
 8008286:	42a6      	cmp	r6, r4
 8008288:	f43f af70 	beq.w	800816c <_dtoa_r+0x43c>
 800828c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008290:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <_dtoa_r+0x58c>)
 8008292:	2200      	movs	r2, #0
 8008294:	f7f8 f9d8 	bl	8000648 <__aeabi_dmul>
 8008298:	4b08      	ldr	r3, [pc, #32]	@ (80082bc <_dtoa_r+0x58c>)
 800829a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800829e:	2200      	movs	r2, #0
 80082a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082a4:	f7f8 f9d0 	bl	8000648 <__aeabi_dmul>
 80082a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082ac:	e7c4      	b.n	8008238 <_dtoa_r+0x508>
 80082ae:	bf00      	nop
 80082b0:	0800a5e0 	.word	0x0800a5e0
 80082b4:	0800a5b8 	.word	0x0800a5b8
 80082b8:	3ff00000 	.word	0x3ff00000
 80082bc:	40240000 	.word	0x40240000
 80082c0:	401c0000 	.word	0x401c0000
 80082c4:	40140000 	.word	0x40140000
 80082c8:	3fe00000 	.word	0x3fe00000
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	f7f8 f9ba 	bl	8000648 <__aeabi_dmul>
 80082d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80082d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80082da:	4656      	mov	r6, sl
 80082dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e0:	f7f8 fc62 	bl	8000ba8 <__aeabi_d2iz>
 80082e4:	4605      	mov	r5, r0
 80082e6:	f7f8 f945 	bl	8000574 <__aeabi_i2d>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082f2:	f7f7 fff1 	bl	80002d8 <__aeabi_dsub>
 80082f6:	3530      	adds	r5, #48	@ 0x30
 80082f8:	f806 5b01 	strb.w	r5, [r6], #1
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	42a6      	cmp	r6, r4
 8008302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008306:	f04f 0200 	mov.w	r2, #0
 800830a:	d124      	bne.n	8008356 <_dtoa_r+0x626>
 800830c:	4baf      	ldr	r3, [pc, #700]	@ (80085cc <_dtoa_r+0x89c>)
 800830e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008312:	f7f7 ffe3 	bl	80002dc <__adddf3>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800831e:	f7f8 fc23 	bl	8000b68 <__aeabi_dcmpgt>
 8008322:	2800      	cmp	r0, #0
 8008324:	d163      	bne.n	80083ee <_dtoa_r+0x6be>
 8008326:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800832a:	49a8      	ldr	r1, [pc, #672]	@ (80085cc <_dtoa_r+0x89c>)
 800832c:	2000      	movs	r0, #0
 800832e:	f7f7 ffd3 	bl	80002d8 <__aeabi_dsub>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800833a:	f7f8 fbf7 	bl	8000b2c <__aeabi_dcmplt>
 800833e:	2800      	cmp	r0, #0
 8008340:	f43f af14 	beq.w	800816c <_dtoa_r+0x43c>
 8008344:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008346:	1e73      	subs	r3, r6, #1
 8008348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800834a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800834e:	2b30      	cmp	r3, #48	@ 0x30
 8008350:	d0f8      	beq.n	8008344 <_dtoa_r+0x614>
 8008352:	4647      	mov	r7, r8
 8008354:	e03b      	b.n	80083ce <_dtoa_r+0x69e>
 8008356:	4b9e      	ldr	r3, [pc, #632]	@ (80085d0 <_dtoa_r+0x8a0>)
 8008358:	f7f8 f976 	bl	8000648 <__aeabi_dmul>
 800835c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008360:	e7bc      	b.n	80082dc <_dtoa_r+0x5ac>
 8008362:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008366:	4656      	mov	r6, sl
 8008368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800836c:	4620      	mov	r0, r4
 800836e:	4629      	mov	r1, r5
 8008370:	f7f8 fa94 	bl	800089c <__aeabi_ddiv>
 8008374:	f7f8 fc18 	bl	8000ba8 <__aeabi_d2iz>
 8008378:	4680      	mov	r8, r0
 800837a:	f7f8 f8fb 	bl	8000574 <__aeabi_i2d>
 800837e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008382:	f7f8 f961 	bl	8000648 <__aeabi_dmul>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4620      	mov	r0, r4
 800838c:	4629      	mov	r1, r5
 800838e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008392:	f7f7 ffa1 	bl	80002d8 <__aeabi_dsub>
 8008396:	f806 4b01 	strb.w	r4, [r6], #1
 800839a:	9d03      	ldr	r5, [sp, #12]
 800839c:	eba6 040a 	sub.w	r4, r6, sl
 80083a0:	42a5      	cmp	r5, r4
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	d133      	bne.n	8008410 <_dtoa_r+0x6e0>
 80083a8:	f7f7 ff98 	bl	80002dc <__adddf3>
 80083ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	f7f8 fbd8 	bl	8000b68 <__aeabi_dcmpgt>
 80083b8:	b9c0      	cbnz	r0, 80083ec <_dtoa_r+0x6bc>
 80083ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f8 fba9 	bl	8000b18 <__aeabi_dcmpeq>
 80083c6:	b110      	cbz	r0, 80083ce <_dtoa_r+0x69e>
 80083c8:	f018 0f01 	tst.w	r8, #1
 80083cc:	d10e      	bne.n	80083ec <_dtoa_r+0x6bc>
 80083ce:	9902      	ldr	r1, [sp, #8]
 80083d0:	4648      	mov	r0, r9
 80083d2:	f000 fbbd 	bl	8008b50 <_Bfree>
 80083d6:	2300      	movs	r3, #0
 80083d8:	7033      	strb	r3, [r6, #0]
 80083da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80083dc:	3701      	adds	r7, #1
 80083de:	601f      	str	r7, [r3, #0]
 80083e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 824b 	beq.w	800887e <_dtoa_r+0xb4e>
 80083e8:	601e      	str	r6, [r3, #0]
 80083ea:	e248      	b.n	800887e <_dtoa_r+0xb4e>
 80083ec:	46b8      	mov	r8, r7
 80083ee:	4633      	mov	r3, r6
 80083f0:	461e      	mov	r6, r3
 80083f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083f6:	2a39      	cmp	r2, #57	@ 0x39
 80083f8:	d106      	bne.n	8008408 <_dtoa_r+0x6d8>
 80083fa:	459a      	cmp	sl, r3
 80083fc:	d1f8      	bne.n	80083f0 <_dtoa_r+0x6c0>
 80083fe:	2230      	movs	r2, #48	@ 0x30
 8008400:	f108 0801 	add.w	r8, r8, #1
 8008404:	f88a 2000 	strb.w	r2, [sl]
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	3201      	adds	r2, #1
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	e7a0      	b.n	8008352 <_dtoa_r+0x622>
 8008410:	4b6f      	ldr	r3, [pc, #444]	@ (80085d0 <_dtoa_r+0x8a0>)
 8008412:	2200      	movs	r2, #0
 8008414:	f7f8 f918 	bl	8000648 <__aeabi_dmul>
 8008418:	2200      	movs	r2, #0
 800841a:	2300      	movs	r3, #0
 800841c:	4604      	mov	r4, r0
 800841e:	460d      	mov	r5, r1
 8008420:	f7f8 fb7a 	bl	8000b18 <__aeabi_dcmpeq>
 8008424:	2800      	cmp	r0, #0
 8008426:	d09f      	beq.n	8008368 <_dtoa_r+0x638>
 8008428:	e7d1      	b.n	80083ce <_dtoa_r+0x69e>
 800842a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800842c:	2a00      	cmp	r2, #0
 800842e:	f000 80ea 	beq.w	8008606 <_dtoa_r+0x8d6>
 8008432:	9a07      	ldr	r2, [sp, #28]
 8008434:	2a01      	cmp	r2, #1
 8008436:	f300 80cd 	bgt.w	80085d4 <_dtoa_r+0x8a4>
 800843a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800843c:	2a00      	cmp	r2, #0
 800843e:	f000 80c1 	beq.w	80085c4 <_dtoa_r+0x894>
 8008442:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008446:	9c08      	ldr	r4, [sp, #32]
 8008448:	9e00      	ldr	r6, [sp, #0]
 800844a:	9a00      	ldr	r2, [sp, #0]
 800844c:	441a      	add	r2, r3
 800844e:	9200      	str	r2, [sp, #0]
 8008450:	9a06      	ldr	r2, [sp, #24]
 8008452:	2101      	movs	r1, #1
 8008454:	441a      	add	r2, r3
 8008456:	4648      	mov	r0, r9
 8008458:	9206      	str	r2, [sp, #24]
 800845a:	f000 fc2d 	bl	8008cb8 <__i2b>
 800845e:	4605      	mov	r5, r0
 8008460:	b166      	cbz	r6, 800847c <_dtoa_r+0x74c>
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd09      	ble.n	800847c <_dtoa_r+0x74c>
 8008468:	42b3      	cmp	r3, r6
 800846a:	9a00      	ldr	r2, [sp, #0]
 800846c:	bfa8      	it	ge
 800846e:	4633      	movge	r3, r6
 8008470:	1ad2      	subs	r2, r2, r3
 8008472:	9200      	str	r2, [sp, #0]
 8008474:	9a06      	ldr	r2, [sp, #24]
 8008476:	1af6      	subs	r6, r6, r3
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	9306      	str	r3, [sp, #24]
 800847c:	9b08      	ldr	r3, [sp, #32]
 800847e:	b30b      	cbz	r3, 80084c4 <_dtoa_r+0x794>
 8008480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 80c6 	beq.w	8008614 <_dtoa_r+0x8e4>
 8008488:	2c00      	cmp	r4, #0
 800848a:	f000 80c0 	beq.w	800860e <_dtoa_r+0x8de>
 800848e:	4629      	mov	r1, r5
 8008490:	4622      	mov	r2, r4
 8008492:	4648      	mov	r0, r9
 8008494:	f000 fcc8 	bl	8008e28 <__pow5mult>
 8008498:	9a02      	ldr	r2, [sp, #8]
 800849a:	4601      	mov	r1, r0
 800849c:	4605      	mov	r5, r0
 800849e:	4648      	mov	r0, r9
 80084a0:	f000 fc20 	bl	8008ce4 <__multiply>
 80084a4:	9902      	ldr	r1, [sp, #8]
 80084a6:	4680      	mov	r8, r0
 80084a8:	4648      	mov	r0, r9
 80084aa:	f000 fb51 	bl	8008b50 <_Bfree>
 80084ae:	9b08      	ldr	r3, [sp, #32]
 80084b0:	1b1b      	subs	r3, r3, r4
 80084b2:	9308      	str	r3, [sp, #32]
 80084b4:	f000 80b1 	beq.w	800861a <_dtoa_r+0x8ea>
 80084b8:	9a08      	ldr	r2, [sp, #32]
 80084ba:	4641      	mov	r1, r8
 80084bc:	4648      	mov	r0, r9
 80084be:	f000 fcb3 	bl	8008e28 <__pow5mult>
 80084c2:	9002      	str	r0, [sp, #8]
 80084c4:	2101      	movs	r1, #1
 80084c6:	4648      	mov	r0, r9
 80084c8:	f000 fbf6 	bl	8008cb8 <__i2b>
 80084cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084ce:	4604      	mov	r4, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 81d8 	beq.w	8008886 <_dtoa_r+0xb56>
 80084d6:	461a      	mov	r2, r3
 80084d8:	4601      	mov	r1, r0
 80084da:	4648      	mov	r0, r9
 80084dc:	f000 fca4 	bl	8008e28 <__pow5mult>
 80084e0:	9b07      	ldr	r3, [sp, #28]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	4604      	mov	r4, r0
 80084e6:	f300 809f 	bgt.w	8008628 <_dtoa_r+0x8f8>
 80084ea:	9b04      	ldr	r3, [sp, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f040 8097 	bne.w	8008620 <_dtoa_r+0x8f0>
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f040 8093 	bne.w	8008624 <_dtoa_r+0x8f4>
 80084fe:	9b05      	ldr	r3, [sp, #20]
 8008500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008504:	0d1b      	lsrs	r3, r3, #20
 8008506:	051b      	lsls	r3, r3, #20
 8008508:	b133      	cbz	r3, 8008518 <_dtoa_r+0x7e8>
 800850a:	9b00      	ldr	r3, [sp, #0]
 800850c:	3301      	adds	r3, #1
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	9b06      	ldr	r3, [sp, #24]
 8008512:	3301      	adds	r3, #1
 8008514:	9306      	str	r3, [sp, #24]
 8008516:	2301      	movs	r3, #1
 8008518:	9308      	str	r3, [sp, #32]
 800851a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 81b8 	beq.w	8008892 <_dtoa_r+0xb62>
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008528:	6918      	ldr	r0, [r3, #16]
 800852a:	f000 fb79 	bl	8008c20 <__hi0bits>
 800852e:	f1c0 0020 	rsb	r0, r0, #32
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	4418      	add	r0, r3
 8008536:	f010 001f 	ands.w	r0, r0, #31
 800853a:	f000 8082 	beq.w	8008642 <_dtoa_r+0x912>
 800853e:	f1c0 0320 	rsb	r3, r0, #32
 8008542:	2b04      	cmp	r3, #4
 8008544:	dd73      	ble.n	800862e <_dtoa_r+0x8fe>
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	f1c0 001c 	rsb	r0, r0, #28
 800854c:	4403      	add	r3, r0
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	9b06      	ldr	r3, [sp, #24]
 8008552:	4403      	add	r3, r0
 8008554:	4406      	add	r6, r0
 8008556:	9306      	str	r3, [sp, #24]
 8008558:	9b00      	ldr	r3, [sp, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	dd05      	ble.n	800856a <_dtoa_r+0x83a>
 800855e:	9902      	ldr	r1, [sp, #8]
 8008560:	461a      	mov	r2, r3
 8008562:	4648      	mov	r0, r9
 8008564:	f000 fcba 	bl	8008edc <__lshift>
 8008568:	9002      	str	r0, [sp, #8]
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	dd05      	ble.n	800857c <_dtoa_r+0x84c>
 8008570:	4621      	mov	r1, r4
 8008572:	461a      	mov	r2, r3
 8008574:	4648      	mov	r0, r9
 8008576:	f000 fcb1 	bl	8008edc <__lshift>
 800857a:	4604      	mov	r4, r0
 800857c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800857e:	2b00      	cmp	r3, #0
 8008580:	d061      	beq.n	8008646 <_dtoa_r+0x916>
 8008582:	9802      	ldr	r0, [sp, #8]
 8008584:	4621      	mov	r1, r4
 8008586:	f000 fd15 	bl	8008fb4 <__mcmp>
 800858a:	2800      	cmp	r0, #0
 800858c:	da5b      	bge.n	8008646 <_dtoa_r+0x916>
 800858e:	2300      	movs	r3, #0
 8008590:	9902      	ldr	r1, [sp, #8]
 8008592:	220a      	movs	r2, #10
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fafd 	bl	8008b94 <__multadd>
 800859a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800859c:	9002      	str	r0, [sp, #8]
 800859e:	f107 38ff 	add.w	r8, r7, #4294967295
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 8177 	beq.w	8008896 <_dtoa_r+0xb66>
 80085a8:	4629      	mov	r1, r5
 80085aa:	2300      	movs	r3, #0
 80085ac:	220a      	movs	r2, #10
 80085ae:	4648      	mov	r0, r9
 80085b0:	f000 faf0 	bl	8008b94 <__multadd>
 80085b4:	f1bb 0f00 	cmp.w	fp, #0
 80085b8:	4605      	mov	r5, r0
 80085ba:	dc6f      	bgt.n	800869c <_dtoa_r+0x96c>
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	dc49      	bgt.n	8008656 <_dtoa_r+0x926>
 80085c2:	e06b      	b.n	800869c <_dtoa_r+0x96c>
 80085c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80085c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80085ca:	e73c      	b.n	8008446 <_dtoa_r+0x716>
 80085cc:	3fe00000 	.word	0x3fe00000
 80085d0:	40240000 	.word	0x40240000
 80085d4:	9b03      	ldr	r3, [sp, #12]
 80085d6:	1e5c      	subs	r4, r3, #1
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	42a3      	cmp	r3, r4
 80085dc:	db09      	blt.n	80085f2 <_dtoa_r+0x8c2>
 80085de:	1b1c      	subs	r4, r3, r4
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f6bf af30 	bge.w	8008448 <_dtoa_r+0x718>
 80085e8:	9b00      	ldr	r3, [sp, #0]
 80085ea:	9a03      	ldr	r2, [sp, #12]
 80085ec:	1a9e      	subs	r6, r3, r2
 80085ee:	2300      	movs	r3, #0
 80085f0:	e72b      	b.n	800844a <_dtoa_r+0x71a>
 80085f2:	9b08      	ldr	r3, [sp, #32]
 80085f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085f6:	9408      	str	r4, [sp, #32]
 80085f8:	1ae3      	subs	r3, r4, r3
 80085fa:	441a      	add	r2, r3
 80085fc:	9e00      	ldr	r6, [sp, #0]
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	920d      	str	r2, [sp, #52]	@ 0x34
 8008602:	2400      	movs	r4, #0
 8008604:	e721      	b.n	800844a <_dtoa_r+0x71a>
 8008606:	9c08      	ldr	r4, [sp, #32]
 8008608:	9e00      	ldr	r6, [sp, #0]
 800860a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800860c:	e728      	b.n	8008460 <_dtoa_r+0x730>
 800860e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008612:	e751      	b.n	80084b8 <_dtoa_r+0x788>
 8008614:	9a08      	ldr	r2, [sp, #32]
 8008616:	9902      	ldr	r1, [sp, #8]
 8008618:	e750      	b.n	80084bc <_dtoa_r+0x78c>
 800861a:	f8cd 8008 	str.w	r8, [sp, #8]
 800861e:	e751      	b.n	80084c4 <_dtoa_r+0x794>
 8008620:	2300      	movs	r3, #0
 8008622:	e779      	b.n	8008518 <_dtoa_r+0x7e8>
 8008624:	9b04      	ldr	r3, [sp, #16]
 8008626:	e777      	b.n	8008518 <_dtoa_r+0x7e8>
 8008628:	2300      	movs	r3, #0
 800862a:	9308      	str	r3, [sp, #32]
 800862c:	e779      	b.n	8008522 <_dtoa_r+0x7f2>
 800862e:	d093      	beq.n	8008558 <_dtoa_r+0x828>
 8008630:	9a00      	ldr	r2, [sp, #0]
 8008632:	331c      	adds	r3, #28
 8008634:	441a      	add	r2, r3
 8008636:	9200      	str	r2, [sp, #0]
 8008638:	9a06      	ldr	r2, [sp, #24]
 800863a:	441a      	add	r2, r3
 800863c:	441e      	add	r6, r3
 800863e:	9206      	str	r2, [sp, #24]
 8008640:	e78a      	b.n	8008558 <_dtoa_r+0x828>
 8008642:	4603      	mov	r3, r0
 8008644:	e7f4      	b.n	8008630 <_dtoa_r+0x900>
 8008646:	9b03      	ldr	r3, [sp, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	46b8      	mov	r8, r7
 800864c:	dc20      	bgt.n	8008690 <_dtoa_r+0x960>
 800864e:	469b      	mov	fp, r3
 8008650:	9b07      	ldr	r3, [sp, #28]
 8008652:	2b02      	cmp	r3, #2
 8008654:	dd1e      	ble.n	8008694 <_dtoa_r+0x964>
 8008656:	f1bb 0f00 	cmp.w	fp, #0
 800865a:	f47f adb1 	bne.w	80081c0 <_dtoa_r+0x490>
 800865e:	4621      	mov	r1, r4
 8008660:	465b      	mov	r3, fp
 8008662:	2205      	movs	r2, #5
 8008664:	4648      	mov	r0, r9
 8008666:	f000 fa95 	bl	8008b94 <__multadd>
 800866a:	4601      	mov	r1, r0
 800866c:	4604      	mov	r4, r0
 800866e:	9802      	ldr	r0, [sp, #8]
 8008670:	f000 fca0 	bl	8008fb4 <__mcmp>
 8008674:	2800      	cmp	r0, #0
 8008676:	f77f ada3 	ble.w	80081c0 <_dtoa_r+0x490>
 800867a:	4656      	mov	r6, sl
 800867c:	2331      	movs	r3, #49	@ 0x31
 800867e:	f806 3b01 	strb.w	r3, [r6], #1
 8008682:	f108 0801 	add.w	r8, r8, #1
 8008686:	e59f      	b.n	80081c8 <_dtoa_r+0x498>
 8008688:	9c03      	ldr	r4, [sp, #12]
 800868a:	46b8      	mov	r8, r7
 800868c:	4625      	mov	r5, r4
 800868e:	e7f4      	b.n	800867a <_dtoa_r+0x94a>
 8008690:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 8101 	beq.w	800889e <_dtoa_r+0xb6e>
 800869c:	2e00      	cmp	r6, #0
 800869e:	dd05      	ble.n	80086ac <_dtoa_r+0x97c>
 80086a0:	4629      	mov	r1, r5
 80086a2:	4632      	mov	r2, r6
 80086a4:	4648      	mov	r0, r9
 80086a6:	f000 fc19 	bl	8008edc <__lshift>
 80086aa:	4605      	mov	r5, r0
 80086ac:	9b08      	ldr	r3, [sp, #32]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d05c      	beq.n	800876c <_dtoa_r+0xa3c>
 80086b2:	6869      	ldr	r1, [r5, #4]
 80086b4:	4648      	mov	r0, r9
 80086b6:	f000 fa0b 	bl	8008ad0 <_Balloc>
 80086ba:	4606      	mov	r6, r0
 80086bc:	b928      	cbnz	r0, 80086ca <_dtoa_r+0x99a>
 80086be:	4b82      	ldr	r3, [pc, #520]	@ (80088c8 <_dtoa_r+0xb98>)
 80086c0:	4602      	mov	r2, r0
 80086c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80086c6:	f7ff bb4a 	b.w	8007d5e <_dtoa_r+0x2e>
 80086ca:	692a      	ldr	r2, [r5, #16]
 80086cc:	3202      	adds	r2, #2
 80086ce:	0092      	lsls	r2, r2, #2
 80086d0:	f105 010c 	add.w	r1, r5, #12
 80086d4:	300c      	adds	r0, #12
 80086d6:	f001 f969 	bl	80099ac <memcpy>
 80086da:	2201      	movs	r2, #1
 80086dc:	4631      	mov	r1, r6
 80086de:	4648      	mov	r0, r9
 80086e0:	f000 fbfc 	bl	8008edc <__lshift>
 80086e4:	f10a 0301 	add.w	r3, sl, #1
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	eb0a 030b 	add.w	r3, sl, fp
 80086ee:	9308      	str	r3, [sp, #32]
 80086f0:	9b04      	ldr	r3, [sp, #16]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	462f      	mov	r7, r5
 80086f8:	9306      	str	r3, [sp, #24]
 80086fa:	4605      	mov	r5, r0
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	9802      	ldr	r0, [sp, #8]
 8008700:	4621      	mov	r1, r4
 8008702:	f103 3bff 	add.w	fp, r3, #4294967295
 8008706:	f7ff fa88 	bl	8007c1a <quorem>
 800870a:	4603      	mov	r3, r0
 800870c:	3330      	adds	r3, #48	@ 0x30
 800870e:	9003      	str	r0, [sp, #12]
 8008710:	4639      	mov	r1, r7
 8008712:	9802      	ldr	r0, [sp, #8]
 8008714:	9309      	str	r3, [sp, #36]	@ 0x24
 8008716:	f000 fc4d 	bl	8008fb4 <__mcmp>
 800871a:	462a      	mov	r2, r5
 800871c:	9004      	str	r0, [sp, #16]
 800871e:	4621      	mov	r1, r4
 8008720:	4648      	mov	r0, r9
 8008722:	f000 fc63 	bl	8008fec <__mdiff>
 8008726:	68c2      	ldr	r2, [r0, #12]
 8008728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872a:	4606      	mov	r6, r0
 800872c:	bb02      	cbnz	r2, 8008770 <_dtoa_r+0xa40>
 800872e:	4601      	mov	r1, r0
 8008730:	9802      	ldr	r0, [sp, #8]
 8008732:	f000 fc3f 	bl	8008fb4 <__mcmp>
 8008736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008738:	4602      	mov	r2, r0
 800873a:	4631      	mov	r1, r6
 800873c:	4648      	mov	r0, r9
 800873e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008740:	9309      	str	r3, [sp, #36]	@ 0x24
 8008742:	f000 fa05 	bl	8008b50 <_Bfree>
 8008746:	9b07      	ldr	r3, [sp, #28]
 8008748:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800874a:	9e00      	ldr	r6, [sp, #0]
 800874c:	ea42 0103 	orr.w	r1, r2, r3
 8008750:	9b06      	ldr	r3, [sp, #24]
 8008752:	4319      	orrs	r1, r3
 8008754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008756:	d10d      	bne.n	8008774 <_dtoa_r+0xa44>
 8008758:	2b39      	cmp	r3, #57	@ 0x39
 800875a:	d027      	beq.n	80087ac <_dtoa_r+0xa7c>
 800875c:	9a04      	ldr	r2, [sp, #16]
 800875e:	2a00      	cmp	r2, #0
 8008760:	dd01      	ble.n	8008766 <_dtoa_r+0xa36>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	3331      	adds	r3, #49	@ 0x31
 8008766:	f88b 3000 	strb.w	r3, [fp]
 800876a:	e52e      	b.n	80081ca <_dtoa_r+0x49a>
 800876c:	4628      	mov	r0, r5
 800876e:	e7b9      	b.n	80086e4 <_dtoa_r+0x9b4>
 8008770:	2201      	movs	r2, #1
 8008772:	e7e2      	b.n	800873a <_dtoa_r+0xa0a>
 8008774:	9904      	ldr	r1, [sp, #16]
 8008776:	2900      	cmp	r1, #0
 8008778:	db04      	blt.n	8008784 <_dtoa_r+0xa54>
 800877a:	9807      	ldr	r0, [sp, #28]
 800877c:	4301      	orrs	r1, r0
 800877e:	9806      	ldr	r0, [sp, #24]
 8008780:	4301      	orrs	r1, r0
 8008782:	d120      	bne.n	80087c6 <_dtoa_r+0xa96>
 8008784:	2a00      	cmp	r2, #0
 8008786:	ddee      	ble.n	8008766 <_dtoa_r+0xa36>
 8008788:	9902      	ldr	r1, [sp, #8]
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	2201      	movs	r2, #1
 800878e:	4648      	mov	r0, r9
 8008790:	f000 fba4 	bl	8008edc <__lshift>
 8008794:	4621      	mov	r1, r4
 8008796:	9002      	str	r0, [sp, #8]
 8008798:	f000 fc0c 	bl	8008fb4 <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	dc02      	bgt.n	80087a8 <_dtoa_r+0xa78>
 80087a2:	d1e0      	bne.n	8008766 <_dtoa_r+0xa36>
 80087a4:	07da      	lsls	r2, r3, #31
 80087a6:	d5de      	bpl.n	8008766 <_dtoa_r+0xa36>
 80087a8:	2b39      	cmp	r3, #57	@ 0x39
 80087aa:	d1da      	bne.n	8008762 <_dtoa_r+0xa32>
 80087ac:	2339      	movs	r3, #57	@ 0x39
 80087ae:	f88b 3000 	strb.w	r3, [fp]
 80087b2:	4633      	mov	r3, r6
 80087b4:	461e      	mov	r6, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80087bc:	2a39      	cmp	r2, #57	@ 0x39
 80087be:	d04e      	beq.n	800885e <_dtoa_r+0xb2e>
 80087c0:	3201      	adds	r2, #1
 80087c2:	701a      	strb	r2, [r3, #0]
 80087c4:	e501      	b.n	80081ca <_dtoa_r+0x49a>
 80087c6:	2a00      	cmp	r2, #0
 80087c8:	dd03      	ble.n	80087d2 <_dtoa_r+0xaa2>
 80087ca:	2b39      	cmp	r3, #57	@ 0x39
 80087cc:	d0ee      	beq.n	80087ac <_dtoa_r+0xa7c>
 80087ce:	3301      	adds	r3, #1
 80087d0:	e7c9      	b.n	8008766 <_dtoa_r+0xa36>
 80087d2:	9a00      	ldr	r2, [sp, #0]
 80087d4:	9908      	ldr	r1, [sp, #32]
 80087d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087da:	428a      	cmp	r2, r1
 80087dc:	d028      	beq.n	8008830 <_dtoa_r+0xb00>
 80087de:	9902      	ldr	r1, [sp, #8]
 80087e0:	2300      	movs	r3, #0
 80087e2:	220a      	movs	r2, #10
 80087e4:	4648      	mov	r0, r9
 80087e6:	f000 f9d5 	bl	8008b94 <__multadd>
 80087ea:	42af      	cmp	r7, r5
 80087ec:	9002      	str	r0, [sp, #8]
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	f04f 020a 	mov.w	r2, #10
 80087f6:	4639      	mov	r1, r7
 80087f8:	4648      	mov	r0, r9
 80087fa:	d107      	bne.n	800880c <_dtoa_r+0xadc>
 80087fc:	f000 f9ca 	bl	8008b94 <__multadd>
 8008800:	4607      	mov	r7, r0
 8008802:	4605      	mov	r5, r0
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	3301      	adds	r3, #1
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	e777      	b.n	80086fc <_dtoa_r+0x9cc>
 800880c:	f000 f9c2 	bl	8008b94 <__multadd>
 8008810:	4629      	mov	r1, r5
 8008812:	4607      	mov	r7, r0
 8008814:	2300      	movs	r3, #0
 8008816:	220a      	movs	r2, #10
 8008818:	4648      	mov	r0, r9
 800881a:	f000 f9bb 	bl	8008b94 <__multadd>
 800881e:	4605      	mov	r5, r0
 8008820:	e7f0      	b.n	8008804 <_dtoa_r+0xad4>
 8008822:	f1bb 0f00 	cmp.w	fp, #0
 8008826:	bfcc      	ite	gt
 8008828:	465e      	movgt	r6, fp
 800882a:	2601      	movle	r6, #1
 800882c:	4456      	add	r6, sl
 800882e:	2700      	movs	r7, #0
 8008830:	9902      	ldr	r1, [sp, #8]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	2201      	movs	r2, #1
 8008836:	4648      	mov	r0, r9
 8008838:	f000 fb50 	bl	8008edc <__lshift>
 800883c:	4621      	mov	r1, r4
 800883e:	9002      	str	r0, [sp, #8]
 8008840:	f000 fbb8 	bl	8008fb4 <__mcmp>
 8008844:	2800      	cmp	r0, #0
 8008846:	dcb4      	bgt.n	80087b2 <_dtoa_r+0xa82>
 8008848:	d102      	bne.n	8008850 <_dtoa_r+0xb20>
 800884a:	9b00      	ldr	r3, [sp, #0]
 800884c:	07db      	lsls	r3, r3, #31
 800884e:	d4b0      	bmi.n	80087b2 <_dtoa_r+0xa82>
 8008850:	4633      	mov	r3, r6
 8008852:	461e      	mov	r6, r3
 8008854:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008858:	2a30      	cmp	r2, #48	@ 0x30
 800885a:	d0fa      	beq.n	8008852 <_dtoa_r+0xb22>
 800885c:	e4b5      	b.n	80081ca <_dtoa_r+0x49a>
 800885e:	459a      	cmp	sl, r3
 8008860:	d1a8      	bne.n	80087b4 <_dtoa_r+0xa84>
 8008862:	2331      	movs	r3, #49	@ 0x31
 8008864:	f108 0801 	add.w	r8, r8, #1
 8008868:	f88a 3000 	strb.w	r3, [sl]
 800886c:	e4ad      	b.n	80081ca <_dtoa_r+0x49a>
 800886e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008870:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80088cc <_dtoa_r+0xb9c>
 8008874:	b11b      	cbz	r3, 800887e <_dtoa_r+0xb4e>
 8008876:	f10a 0308 	add.w	r3, sl, #8
 800887a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	4650      	mov	r0, sl
 8008880:	b017      	add	sp, #92	@ 0x5c
 8008882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	9b07      	ldr	r3, [sp, #28]
 8008888:	2b01      	cmp	r3, #1
 800888a:	f77f ae2e 	ble.w	80084ea <_dtoa_r+0x7ba>
 800888e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008890:	9308      	str	r3, [sp, #32]
 8008892:	2001      	movs	r0, #1
 8008894:	e64d      	b.n	8008532 <_dtoa_r+0x802>
 8008896:	f1bb 0f00 	cmp.w	fp, #0
 800889a:	f77f aed9 	ble.w	8008650 <_dtoa_r+0x920>
 800889e:	4656      	mov	r6, sl
 80088a0:	9802      	ldr	r0, [sp, #8]
 80088a2:	4621      	mov	r1, r4
 80088a4:	f7ff f9b9 	bl	8007c1a <quorem>
 80088a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80088ac:	f806 3b01 	strb.w	r3, [r6], #1
 80088b0:	eba6 020a 	sub.w	r2, r6, sl
 80088b4:	4593      	cmp	fp, r2
 80088b6:	ddb4      	ble.n	8008822 <_dtoa_r+0xaf2>
 80088b8:	9902      	ldr	r1, [sp, #8]
 80088ba:	2300      	movs	r3, #0
 80088bc:	220a      	movs	r2, #10
 80088be:	4648      	mov	r0, r9
 80088c0:	f000 f968 	bl	8008b94 <__multadd>
 80088c4:	9002      	str	r0, [sp, #8]
 80088c6:	e7eb      	b.n	80088a0 <_dtoa_r+0xb70>
 80088c8:	0800a4e8 	.word	0x0800a4e8
 80088cc:	0800a46c 	.word	0x0800a46c

080088d0 <_free_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4605      	mov	r5, r0
 80088d4:	2900      	cmp	r1, #0
 80088d6:	d041      	beq.n	800895c <_free_r+0x8c>
 80088d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088dc:	1f0c      	subs	r4, r1, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb8      	it	lt
 80088e2:	18e4      	addlt	r4, r4, r3
 80088e4:	f000 f8e8 	bl	8008ab8 <__malloc_lock>
 80088e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008960 <_free_r+0x90>)
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	b933      	cbnz	r3, 80088fc <_free_r+0x2c>
 80088ee:	6063      	str	r3, [r4, #4]
 80088f0:	6014      	str	r4, [r2, #0]
 80088f2:	4628      	mov	r0, r5
 80088f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f8:	f000 b8e4 	b.w	8008ac4 <__malloc_unlock>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d908      	bls.n	8008912 <_free_r+0x42>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	1821      	adds	r1, r4, r0
 8008904:	428b      	cmp	r3, r1
 8008906:	bf01      	itttt	eq
 8008908:	6819      	ldreq	r1, [r3, #0]
 800890a:	685b      	ldreq	r3, [r3, #4]
 800890c:	1809      	addeq	r1, r1, r0
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	e7ed      	b.n	80088ee <_free_r+0x1e>
 8008912:	461a      	mov	r2, r3
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	b10b      	cbz	r3, 800891c <_free_r+0x4c>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d9fa      	bls.n	8008912 <_free_r+0x42>
 800891c:	6811      	ldr	r1, [r2, #0]
 800891e:	1850      	adds	r0, r2, r1
 8008920:	42a0      	cmp	r0, r4
 8008922:	d10b      	bne.n	800893c <_free_r+0x6c>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	4401      	add	r1, r0
 8008928:	1850      	adds	r0, r2, r1
 800892a:	4283      	cmp	r3, r0
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	d1e0      	bne.n	80088f2 <_free_r+0x22>
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	6053      	str	r3, [r2, #4]
 8008936:	4408      	add	r0, r1
 8008938:	6010      	str	r0, [r2, #0]
 800893a:	e7da      	b.n	80088f2 <_free_r+0x22>
 800893c:	d902      	bls.n	8008944 <_free_r+0x74>
 800893e:	230c      	movs	r3, #12
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	e7d6      	b.n	80088f2 <_free_r+0x22>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	1821      	adds	r1, r4, r0
 8008948:	428b      	cmp	r3, r1
 800894a:	bf04      	itt	eq
 800894c:	6819      	ldreq	r1, [r3, #0]
 800894e:	685b      	ldreq	r3, [r3, #4]
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	bf04      	itt	eq
 8008954:	1809      	addeq	r1, r1, r0
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	6054      	str	r4, [r2, #4]
 800895a:	e7ca      	b.n	80088f2 <_free_r+0x22>
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	bf00      	nop
 8008960:	20000944 	.word	0x20000944

08008964 <malloc>:
 8008964:	4b02      	ldr	r3, [pc, #8]	@ (8008970 <malloc+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f000 b825 	b.w	80089b8 <_malloc_r>
 800896e:	bf00      	nop
 8008970:	20000018 	.word	0x20000018

08008974 <sbrk_aligned>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4e0f      	ldr	r6, [pc, #60]	@ (80089b4 <sbrk_aligned+0x40>)
 8008978:	460c      	mov	r4, r1
 800897a:	6831      	ldr	r1, [r6, #0]
 800897c:	4605      	mov	r5, r0
 800897e:	b911      	cbnz	r1, 8008986 <sbrk_aligned+0x12>
 8008980:	f001 f804 	bl	800998c <_sbrk_r>
 8008984:	6030      	str	r0, [r6, #0]
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f000 ffff 	bl	800998c <_sbrk_r>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	d103      	bne.n	800899a <sbrk_aligned+0x26>
 8008992:	f04f 34ff 	mov.w	r4, #4294967295
 8008996:	4620      	mov	r0, r4
 8008998:	bd70      	pop	{r4, r5, r6, pc}
 800899a:	1cc4      	adds	r4, r0, #3
 800899c:	f024 0403 	bic.w	r4, r4, #3
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d0f8      	beq.n	8008996 <sbrk_aligned+0x22>
 80089a4:	1a21      	subs	r1, r4, r0
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 fff0 	bl	800998c <_sbrk_r>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d1f2      	bne.n	8008996 <sbrk_aligned+0x22>
 80089b0:	e7ef      	b.n	8008992 <sbrk_aligned+0x1e>
 80089b2:	bf00      	nop
 80089b4:	20000940 	.word	0x20000940

080089b8 <_malloc_r>:
 80089b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	1ccd      	adds	r5, r1, #3
 80089be:	f025 0503 	bic.w	r5, r5, #3
 80089c2:	3508      	adds	r5, #8
 80089c4:	2d0c      	cmp	r5, #12
 80089c6:	bf38      	it	cc
 80089c8:	250c      	movcc	r5, #12
 80089ca:	2d00      	cmp	r5, #0
 80089cc:	4606      	mov	r6, r0
 80089ce:	db01      	blt.n	80089d4 <_malloc_r+0x1c>
 80089d0:	42a9      	cmp	r1, r5
 80089d2:	d904      	bls.n	80089de <_malloc_r+0x26>
 80089d4:	230c      	movs	r3, #12
 80089d6:	6033      	str	r3, [r6, #0]
 80089d8:	2000      	movs	r0, #0
 80089da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ab4 <_malloc_r+0xfc>
 80089e2:	f000 f869 	bl	8008ab8 <__malloc_lock>
 80089e6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ea:	461c      	mov	r4, r3
 80089ec:	bb44      	cbnz	r4, 8008a40 <_malloc_r+0x88>
 80089ee:	4629      	mov	r1, r5
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7ff ffbf 	bl	8008974 <sbrk_aligned>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	4604      	mov	r4, r0
 80089fa:	d158      	bne.n	8008aae <_malloc_r+0xf6>
 80089fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008a00:	4627      	mov	r7, r4
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	d143      	bne.n	8008a8e <_malloc_r+0xd6>
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d04b      	beq.n	8008aa2 <_malloc_r+0xea>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	4630      	mov	r0, r6
 8008a10:	eb04 0903 	add.w	r9, r4, r3
 8008a14:	f000 ffba 	bl	800998c <_sbrk_r>
 8008a18:	4581      	cmp	r9, r0
 8008a1a:	d142      	bne.n	8008aa2 <_malloc_r+0xea>
 8008a1c:	6821      	ldr	r1, [r4, #0]
 8008a1e:	1a6d      	subs	r5, r5, r1
 8008a20:	4629      	mov	r1, r5
 8008a22:	4630      	mov	r0, r6
 8008a24:	f7ff ffa6 	bl	8008974 <sbrk_aligned>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d03a      	beq.n	8008aa2 <_malloc_r+0xea>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	442b      	add	r3, r5
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	f8d8 3000 	ldr.w	r3, [r8]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	bb62      	cbnz	r2, 8008a94 <_malloc_r+0xdc>
 8008a3a:	f8c8 7000 	str.w	r7, [r8]
 8008a3e:	e00f      	b.n	8008a60 <_malloc_r+0xa8>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	1b52      	subs	r2, r2, r5
 8008a44:	d420      	bmi.n	8008a88 <_malloc_r+0xd0>
 8008a46:	2a0b      	cmp	r2, #11
 8008a48:	d917      	bls.n	8008a7a <_malloc_r+0xc2>
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	6025      	str	r5, [r4, #0]
 8008a50:	bf18      	it	ne
 8008a52:	6059      	strne	r1, [r3, #4]
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	bf08      	it	eq
 8008a58:	f8c8 1000 	streq.w	r1, [r8]
 8008a5c:	5162      	str	r2, [r4, r5]
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 f82f 	bl	8008ac4 <__malloc_unlock>
 8008a66:	f104 000b 	add.w	r0, r4, #11
 8008a6a:	1d23      	adds	r3, r4, #4
 8008a6c:	f020 0007 	bic.w	r0, r0, #7
 8008a70:	1ac2      	subs	r2, r0, r3
 8008a72:	bf1c      	itt	ne
 8008a74:	1a1b      	subne	r3, r3, r0
 8008a76:	50a3      	strne	r3, [r4, r2]
 8008a78:	e7af      	b.n	80089da <_malloc_r+0x22>
 8008a7a:	6862      	ldr	r2, [r4, #4]
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	bf0c      	ite	eq
 8008a80:	f8c8 2000 	streq.w	r2, [r8]
 8008a84:	605a      	strne	r2, [r3, #4]
 8008a86:	e7eb      	b.n	8008a60 <_malloc_r+0xa8>
 8008a88:	4623      	mov	r3, r4
 8008a8a:	6864      	ldr	r4, [r4, #4]
 8008a8c:	e7ae      	b.n	80089ec <_malloc_r+0x34>
 8008a8e:	463c      	mov	r4, r7
 8008a90:	687f      	ldr	r7, [r7, #4]
 8008a92:	e7b6      	b.n	8008a02 <_malloc_r+0x4a>
 8008a94:	461a      	mov	r2, r3
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d1fb      	bne.n	8008a94 <_malloc_r+0xdc>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6053      	str	r3, [r2, #4]
 8008aa0:	e7de      	b.n	8008a60 <_malloc_r+0xa8>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	6033      	str	r3, [r6, #0]
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f000 f80c 	bl	8008ac4 <__malloc_unlock>
 8008aac:	e794      	b.n	80089d8 <_malloc_r+0x20>
 8008aae:	6005      	str	r5, [r0, #0]
 8008ab0:	e7d6      	b.n	8008a60 <_malloc_r+0xa8>
 8008ab2:	bf00      	nop
 8008ab4:	20000944 	.word	0x20000944

08008ab8 <__malloc_lock>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	@ (8008ac0 <__malloc_lock+0x8>)
 8008aba:	f7ff b8ac 	b.w	8007c16 <__retarget_lock_acquire_recursive>
 8008abe:	bf00      	nop
 8008ac0:	2000093c 	.word	0x2000093c

08008ac4 <__malloc_unlock>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	@ (8008acc <__malloc_unlock+0x8>)
 8008ac6:	f7ff b8a7 	b.w	8007c18 <__retarget_lock_release_recursive>
 8008aca:	bf00      	nop
 8008acc:	2000093c 	.word	0x2000093c

08008ad0 <_Balloc>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	69c6      	ldr	r6, [r0, #28]
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	460d      	mov	r5, r1
 8008ad8:	b976      	cbnz	r6, 8008af8 <_Balloc+0x28>
 8008ada:	2010      	movs	r0, #16
 8008adc:	f7ff ff42 	bl	8008964 <malloc>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	61e0      	str	r0, [r4, #28]
 8008ae4:	b920      	cbnz	r0, 8008af0 <_Balloc+0x20>
 8008ae6:	4b18      	ldr	r3, [pc, #96]	@ (8008b48 <_Balloc+0x78>)
 8008ae8:	4818      	ldr	r0, [pc, #96]	@ (8008b4c <_Balloc+0x7c>)
 8008aea:	216b      	movs	r1, #107	@ 0x6b
 8008aec:	f000 ff6c 	bl	80099c8 <__assert_func>
 8008af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008af4:	6006      	str	r6, [r0, #0]
 8008af6:	60c6      	str	r6, [r0, #12]
 8008af8:	69e6      	ldr	r6, [r4, #28]
 8008afa:	68f3      	ldr	r3, [r6, #12]
 8008afc:	b183      	cbz	r3, 8008b20 <_Balloc+0x50>
 8008afe:	69e3      	ldr	r3, [r4, #28]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b06:	b9b8      	cbnz	r0, 8008b38 <_Balloc+0x68>
 8008b08:	2101      	movs	r1, #1
 8008b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8008b0e:	1d72      	adds	r2, r6, #5
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 ff76 	bl	8009a04 <_calloc_r>
 8008b18:	b160      	cbz	r0, 8008b34 <_Balloc+0x64>
 8008b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b1e:	e00e      	b.n	8008b3e <_Balloc+0x6e>
 8008b20:	2221      	movs	r2, #33	@ 0x21
 8008b22:	2104      	movs	r1, #4
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 ff6d 	bl	8009a04 <_calloc_r>
 8008b2a:	69e3      	ldr	r3, [r4, #28]
 8008b2c:	60f0      	str	r0, [r6, #12]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e4      	bne.n	8008afe <_Balloc+0x2e>
 8008b34:	2000      	movs	r0, #0
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	6802      	ldr	r2, [r0, #0]
 8008b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b44:	e7f7      	b.n	8008b36 <_Balloc+0x66>
 8008b46:	bf00      	nop
 8008b48:	0800a479 	.word	0x0800a479
 8008b4c:	0800a4f9 	.word	0x0800a4f9

08008b50 <_Bfree>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	69c6      	ldr	r6, [r0, #28]
 8008b54:	4605      	mov	r5, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b976      	cbnz	r6, 8008b78 <_Bfree+0x28>
 8008b5a:	2010      	movs	r0, #16
 8008b5c:	f7ff ff02 	bl	8008964 <malloc>
 8008b60:	4602      	mov	r2, r0
 8008b62:	61e8      	str	r0, [r5, #28]
 8008b64:	b920      	cbnz	r0, 8008b70 <_Bfree+0x20>
 8008b66:	4b09      	ldr	r3, [pc, #36]	@ (8008b8c <_Bfree+0x3c>)
 8008b68:	4809      	ldr	r0, [pc, #36]	@ (8008b90 <_Bfree+0x40>)
 8008b6a:	218f      	movs	r1, #143	@ 0x8f
 8008b6c:	f000 ff2c 	bl	80099c8 <__assert_func>
 8008b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b74:	6006      	str	r6, [r0, #0]
 8008b76:	60c6      	str	r6, [r0, #12]
 8008b78:	b13c      	cbz	r4, 8008b8a <_Bfree+0x3a>
 8008b7a:	69eb      	ldr	r3, [r5, #28]
 8008b7c:	6862      	ldr	r2, [r4, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b84:	6021      	str	r1, [r4, #0]
 8008b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}
 8008b8c:	0800a479 	.word	0x0800a479
 8008b90:	0800a4f9 	.word	0x0800a4f9

08008b94 <__multadd>:
 8008b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b98:	690d      	ldr	r5, [r1, #16]
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	461e      	mov	r6, r3
 8008ba0:	f101 0c14 	add.w	ip, r1, #20
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8008baa:	b299      	uxth	r1, r3
 8008bac:	fb02 6101 	mla	r1, r2, r1, r6
 8008bb0:	0c1e      	lsrs	r6, r3, #16
 8008bb2:	0c0b      	lsrs	r3, r1, #16
 8008bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8008bb8:	b289      	uxth	r1, r1
 8008bba:	3001      	adds	r0, #1
 8008bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bc0:	4285      	cmp	r5, r0
 8008bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8008bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bca:	dcec      	bgt.n	8008ba6 <__multadd+0x12>
 8008bcc:	b30e      	cbz	r6, 8008c12 <__multadd+0x7e>
 8008bce:	68a3      	ldr	r3, [r4, #8]
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	dc19      	bgt.n	8008c08 <__multadd+0x74>
 8008bd4:	6861      	ldr	r1, [r4, #4]
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	3101      	adds	r1, #1
 8008bda:	f7ff ff79 	bl	8008ad0 <_Balloc>
 8008bde:	4680      	mov	r8, r0
 8008be0:	b928      	cbnz	r0, 8008bee <__multadd+0x5a>
 8008be2:	4602      	mov	r2, r0
 8008be4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c18 <__multadd+0x84>)
 8008be6:	480d      	ldr	r0, [pc, #52]	@ (8008c1c <__multadd+0x88>)
 8008be8:	21ba      	movs	r1, #186	@ 0xba
 8008bea:	f000 feed 	bl	80099c8 <__assert_func>
 8008bee:	6922      	ldr	r2, [r4, #16]
 8008bf0:	3202      	adds	r2, #2
 8008bf2:	f104 010c 	add.w	r1, r4, #12
 8008bf6:	0092      	lsls	r2, r2, #2
 8008bf8:	300c      	adds	r0, #12
 8008bfa:	f000 fed7 	bl	80099ac <memcpy>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ffa5 	bl	8008b50 <_Bfree>
 8008c06:	4644      	mov	r4, r8
 8008c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	615e      	str	r6, [r3, #20]
 8008c10:	6125      	str	r5, [r4, #16]
 8008c12:	4620      	mov	r0, r4
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	0800a4e8 	.word	0x0800a4e8
 8008c1c:	0800a4f9 	.word	0x0800a4f9

08008c20 <__hi0bits>:
 8008c20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c24:	4603      	mov	r3, r0
 8008c26:	bf36      	itet	cc
 8008c28:	0403      	lslcc	r3, r0, #16
 8008c2a:	2000      	movcs	r0, #0
 8008c2c:	2010      	movcc	r0, #16
 8008c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c32:	bf3c      	itt	cc
 8008c34:	021b      	lslcc	r3, r3, #8
 8008c36:	3008      	addcc	r0, #8
 8008c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c3c:	bf3c      	itt	cc
 8008c3e:	011b      	lslcc	r3, r3, #4
 8008c40:	3004      	addcc	r0, #4
 8008c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c46:	bf3c      	itt	cc
 8008c48:	009b      	lslcc	r3, r3, #2
 8008c4a:	3002      	addcc	r0, #2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	db05      	blt.n	8008c5c <__hi0bits+0x3c>
 8008c50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c54:	f100 0001 	add.w	r0, r0, #1
 8008c58:	bf08      	it	eq
 8008c5a:	2020      	moveq	r0, #32
 8008c5c:	4770      	bx	lr

08008c5e <__lo0bits>:
 8008c5e:	6803      	ldr	r3, [r0, #0]
 8008c60:	4602      	mov	r2, r0
 8008c62:	f013 0007 	ands.w	r0, r3, #7
 8008c66:	d00b      	beq.n	8008c80 <__lo0bits+0x22>
 8008c68:	07d9      	lsls	r1, r3, #31
 8008c6a:	d421      	bmi.n	8008cb0 <__lo0bits+0x52>
 8008c6c:	0798      	lsls	r0, r3, #30
 8008c6e:	bf49      	itett	mi
 8008c70:	085b      	lsrmi	r3, r3, #1
 8008c72:	089b      	lsrpl	r3, r3, #2
 8008c74:	2001      	movmi	r0, #1
 8008c76:	6013      	strmi	r3, [r2, #0]
 8008c78:	bf5c      	itt	pl
 8008c7a:	6013      	strpl	r3, [r2, #0]
 8008c7c:	2002      	movpl	r0, #2
 8008c7e:	4770      	bx	lr
 8008c80:	b299      	uxth	r1, r3
 8008c82:	b909      	cbnz	r1, 8008c88 <__lo0bits+0x2a>
 8008c84:	0c1b      	lsrs	r3, r3, #16
 8008c86:	2010      	movs	r0, #16
 8008c88:	b2d9      	uxtb	r1, r3
 8008c8a:	b909      	cbnz	r1, 8008c90 <__lo0bits+0x32>
 8008c8c:	3008      	adds	r0, #8
 8008c8e:	0a1b      	lsrs	r3, r3, #8
 8008c90:	0719      	lsls	r1, r3, #28
 8008c92:	bf04      	itt	eq
 8008c94:	091b      	lsreq	r3, r3, #4
 8008c96:	3004      	addeq	r0, #4
 8008c98:	0799      	lsls	r1, r3, #30
 8008c9a:	bf04      	itt	eq
 8008c9c:	089b      	lsreq	r3, r3, #2
 8008c9e:	3002      	addeq	r0, #2
 8008ca0:	07d9      	lsls	r1, r3, #31
 8008ca2:	d403      	bmi.n	8008cac <__lo0bits+0x4e>
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	f100 0001 	add.w	r0, r0, #1
 8008caa:	d003      	beq.n	8008cb4 <__lo0bits+0x56>
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	4770      	bx	lr
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	4770      	bx	lr
 8008cb4:	2020      	movs	r0, #32
 8008cb6:	4770      	bx	lr

08008cb8 <__i2b>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	460c      	mov	r4, r1
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	f7ff ff07 	bl	8008ad0 <_Balloc>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	b928      	cbnz	r0, 8008cd2 <__i2b+0x1a>
 8008cc6:	4b05      	ldr	r3, [pc, #20]	@ (8008cdc <__i2b+0x24>)
 8008cc8:	4805      	ldr	r0, [pc, #20]	@ (8008ce0 <__i2b+0x28>)
 8008cca:	f240 1145 	movw	r1, #325	@ 0x145
 8008cce:	f000 fe7b 	bl	80099c8 <__assert_func>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6144      	str	r4, [r0, #20]
 8008cd6:	6103      	str	r3, [r0, #16]
 8008cd8:	bd10      	pop	{r4, pc}
 8008cda:	bf00      	nop
 8008cdc:	0800a4e8 	.word	0x0800a4e8
 8008ce0:	0800a4f9 	.word	0x0800a4f9

08008ce4 <__multiply>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4617      	mov	r7, r2
 8008cea:	690a      	ldr	r2, [r1, #16]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	bfa8      	it	ge
 8008cf2:	463b      	movge	r3, r7
 8008cf4:	4689      	mov	r9, r1
 8008cf6:	bfa4      	itt	ge
 8008cf8:	460f      	movge	r7, r1
 8008cfa:	4699      	movge	r9, r3
 8008cfc:	693d      	ldr	r5, [r7, #16]
 8008cfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	eb05 060a 	add.w	r6, r5, sl
 8008d0a:	42b3      	cmp	r3, r6
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	bfb8      	it	lt
 8008d10:	3101      	addlt	r1, #1
 8008d12:	f7ff fedd 	bl	8008ad0 <_Balloc>
 8008d16:	b930      	cbnz	r0, 8008d26 <__multiply+0x42>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	4b41      	ldr	r3, [pc, #260]	@ (8008e20 <__multiply+0x13c>)
 8008d1c:	4841      	ldr	r0, [pc, #260]	@ (8008e24 <__multiply+0x140>)
 8008d1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d22:	f000 fe51 	bl	80099c8 <__assert_func>
 8008d26:	f100 0414 	add.w	r4, r0, #20
 8008d2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008d2e:	4623      	mov	r3, r4
 8008d30:	2200      	movs	r2, #0
 8008d32:	4573      	cmp	r3, lr
 8008d34:	d320      	bcc.n	8008d78 <__multiply+0x94>
 8008d36:	f107 0814 	add.w	r8, r7, #20
 8008d3a:	f109 0114 	add.w	r1, r9, #20
 8008d3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008d42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008d46:	9302      	str	r3, [sp, #8]
 8008d48:	1beb      	subs	r3, r5, r7
 8008d4a:	3b15      	subs	r3, #21
 8008d4c:	f023 0303 	bic.w	r3, r3, #3
 8008d50:	3304      	adds	r3, #4
 8008d52:	3715      	adds	r7, #21
 8008d54:	42bd      	cmp	r5, r7
 8008d56:	bf38      	it	cc
 8008d58:	2304      	movcc	r3, #4
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	9b02      	ldr	r3, [sp, #8]
 8008d5e:	9103      	str	r1, [sp, #12]
 8008d60:	428b      	cmp	r3, r1
 8008d62:	d80c      	bhi.n	8008d7e <__multiply+0x9a>
 8008d64:	2e00      	cmp	r6, #0
 8008d66:	dd03      	ble.n	8008d70 <__multiply+0x8c>
 8008d68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d055      	beq.n	8008e1c <__multiply+0x138>
 8008d70:	6106      	str	r6, [r0, #16]
 8008d72:	b005      	add	sp, #20
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	f843 2b04 	str.w	r2, [r3], #4
 8008d7c:	e7d9      	b.n	8008d32 <__multiply+0x4e>
 8008d7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d82:	f1ba 0f00 	cmp.w	sl, #0
 8008d86:	d01f      	beq.n	8008dc8 <__multiply+0xe4>
 8008d88:	46c4      	mov	ip, r8
 8008d8a:	46a1      	mov	r9, r4
 8008d8c:	2700      	movs	r7, #0
 8008d8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d92:	f8d9 3000 	ldr.w	r3, [r9]
 8008d96:	fa1f fb82 	uxth.w	fp, r2
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008da0:	443b      	add	r3, r7
 8008da2:	f8d9 7000 	ldr.w	r7, [r9]
 8008da6:	0c12      	lsrs	r2, r2, #16
 8008da8:	0c3f      	lsrs	r7, r7, #16
 8008daa:	fb0a 7202 	mla	r2, sl, r2, r7
 8008dae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008db8:	4565      	cmp	r5, ip
 8008dba:	f849 3b04 	str.w	r3, [r9], #4
 8008dbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008dc2:	d8e4      	bhi.n	8008d8e <__multiply+0xaa>
 8008dc4:	9b01      	ldr	r3, [sp, #4]
 8008dc6:	50e7      	str	r7, [r4, r3]
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dce:	3104      	adds	r1, #4
 8008dd0:	f1b9 0f00 	cmp.w	r9, #0
 8008dd4:	d020      	beq.n	8008e18 <__multiply+0x134>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	4647      	mov	r7, r8
 8008dda:	46a4      	mov	ip, r4
 8008ddc:	f04f 0a00 	mov.w	sl, #0
 8008de0:	f8b7 b000 	ldrh.w	fp, [r7]
 8008de4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008de8:	fb09 220b 	mla	r2, r9, fp, r2
 8008dec:	4452      	add	r2, sl
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008df4:	f84c 3b04 	str.w	r3, [ip], #4
 8008df8:	f857 3b04 	ldr.w	r3, [r7], #4
 8008dfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e00:	f8bc 3000 	ldrh.w	r3, [ip]
 8008e04:	fb09 330a 	mla	r3, r9, sl, r3
 8008e08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008e0c:	42bd      	cmp	r5, r7
 8008e0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e12:	d8e5      	bhi.n	8008de0 <__multiply+0xfc>
 8008e14:	9a01      	ldr	r2, [sp, #4]
 8008e16:	50a3      	str	r3, [r4, r2]
 8008e18:	3404      	adds	r4, #4
 8008e1a:	e79f      	b.n	8008d5c <__multiply+0x78>
 8008e1c:	3e01      	subs	r6, #1
 8008e1e:	e7a1      	b.n	8008d64 <__multiply+0x80>
 8008e20:	0800a4e8 	.word	0x0800a4e8
 8008e24:	0800a4f9 	.word	0x0800a4f9

08008e28 <__pow5mult>:
 8008e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	f012 0203 	ands.w	r2, r2, #3
 8008e32:	4607      	mov	r7, r0
 8008e34:	460e      	mov	r6, r1
 8008e36:	d007      	beq.n	8008e48 <__pow5mult+0x20>
 8008e38:	4c25      	ldr	r4, [pc, #148]	@ (8008ed0 <__pow5mult+0xa8>)
 8008e3a:	3a01      	subs	r2, #1
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e42:	f7ff fea7 	bl	8008b94 <__multadd>
 8008e46:	4606      	mov	r6, r0
 8008e48:	10ad      	asrs	r5, r5, #2
 8008e4a:	d03d      	beq.n	8008ec8 <__pow5mult+0xa0>
 8008e4c:	69fc      	ldr	r4, [r7, #28]
 8008e4e:	b97c      	cbnz	r4, 8008e70 <__pow5mult+0x48>
 8008e50:	2010      	movs	r0, #16
 8008e52:	f7ff fd87 	bl	8008964 <malloc>
 8008e56:	4602      	mov	r2, r0
 8008e58:	61f8      	str	r0, [r7, #28]
 8008e5a:	b928      	cbnz	r0, 8008e68 <__pow5mult+0x40>
 8008e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed4 <__pow5mult+0xac>)
 8008e5e:	481e      	ldr	r0, [pc, #120]	@ (8008ed8 <__pow5mult+0xb0>)
 8008e60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e64:	f000 fdb0 	bl	80099c8 <__assert_func>
 8008e68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e6c:	6004      	str	r4, [r0, #0]
 8008e6e:	60c4      	str	r4, [r0, #12]
 8008e70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e78:	b94c      	cbnz	r4, 8008e8e <__pow5mult+0x66>
 8008e7a:	f240 2171 	movw	r1, #625	@ 0x271
 8008e7e:	4638      	mov	r0, r7
 8008e80:	f7ff ff1a 	bl	8008cb8 <__i2b>
 8008e84:	2300      	movs	r3, #0
 8008e86:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	6003      	str	r3, [r0, #0]
 8008e8e:	f04f 0900 	mov.w	r9, #0
 8008e92:	07eb      	lsls	r3, r5, #31
 8008e94:	d50a      	bpl.n	8008eac <__pow5mult+0x84>
 8008e96:	4631      	mov	r1, r6
 8008e98:	4622      	mov	r2, r4
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	f7ff ff22 	bl	8008ce4 <__multiply>
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4680      	mov	r8, r0
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	f7ff fe53 	bl	8008b50 <_Bfree>
 8008eaa:	4646      	mov	r6, r8
 8008eac:	106d      	asrs	r5, r5, #1
 8008eae:	d00b      	beq.n	8008ec8 <__pow5mult+0xa0>
 8008eb0:	6820      	ldr	r0, [r4, #0]
 8008eb2:	b938      	cbnz	r0, 8008ec4 <__pow5mult+0x9c>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f7ff ff13 	bl	8008ce4 <__multiply>
 8008ebe:	6020      	str	r0, [r4, #0]
 8008ec0:	f8c0 9000 	str.w	r9, [r0]
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	e7e4      	b.n	8008e92 <__pow5mult+0x6a>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ece:	bf00      	nop
 8008ed0:	0800a5ac 	.word	0x0800a5ac
 8008ed4:	0800a479 	.word	0x0800a479
 8008ed8:	0800a4f9 	.word	0x0800a4f9

08008edc <__lshift>:
 8008edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	6849      	ldr	r1, [r1, #4]
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	4607      	mov	r7, r0
 8008eee:	4691      	mov	r9, r2
 8008ef0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ef4:	f108 0601 	add.w	r6, r8, #1
 8008ef8:	42b3      	cmp	r3, r6
 8008efa:	db0b      	blt.n	8008f14 <__lshift+0x38>
 8008efc:	4638      	mov	r0, r7
 8008efe:	f7ff fde7 	bl	8008ad0 <_Balloc>
 8008f02:	4605      	mov	r5, r0
 8008f04:	b948      	cbnz	r0, 8008f1a <__lshift+0x3e>
 8008f06:	4602      	mov	r2, r0
 8008f08:	4b28      	ldr	r3, [pc, #160]	@ (8008fac <__lshift+0xd0>)
 8008f0a:	4829      	ldr	r0, [pc, #164]	@ (8008fb0 <__lshift+0xd4>)
 8008f0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f10:	f000 fd5a 	bl	80099c8 <__assert_func>
 8008f14:	3101      	adds	r1, #1
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	e7ee      	b.n	8008ef8 <__lshift+0x1c>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f100 0114 	add.w	r1, r0, #20
 8008f20:	f100 0210 	add.w	r2, r0, #16
 8008f24:	4618      	mov	r0, r3
 8008f26:	4553      	cmp	r3, sl
 8008f28:	db33      	blt.n	8008f92 <__lshift+0xb6>
 8008f2a:	6920      	ldr	r0, [r4, #16]
 8008f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f30:	f104 0314 	add.w	r3, r4, #20
 8008f34:	f019 091f 	ands.w	r9, r9, #31
 8008f38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f40:	d02b      	beq.n	8008f9a <__lshift+0xbe>
 8008f42:	f1c9 0e20 	rsb	lr, r9, #32
 8008f46:	468a      	mov	sl, r1
 8008f48:	2200      	movs	r2, #0
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f50:	4310      	orrs	r0, r2
 8008f52:	f84a 0b04 	str.w	r0, [sl], #4
 8008f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f5a:	459c      	cmp	ip, r3
 8008f5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f60:	d8f3      	bhi.n	8008f4a <__lshift+0x6e>
 8008f62:	ebac 0304 	sub.w	r3, ip, r4
 8008f66:	3b15      	subs	r3, #21
 8008f68:	f023 0303 	bic.w	r3, r3, #3
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	f104 0015 	add.w	r0, r4, #21
 8008f72:	4560      	cmp	r0, ip
 8008f74:	bf88      	it	hi
 8008f76:	2304      	movhi	r3, #4
 8008f78:	50ca      	str	r2, [r1, r3]
 8008f7a:	b10a      	cbz	r2, 8008f80 <__lshift+0xa4>
 8008f7c:	f108 0602 	add.w	r6, r8, #2
 8008f80:	3e01      	subs	r6, #1
 8008f82:	4638      	mov	r0, r7
 8008f84:	612e      	str	r6, [r5, #16]
 8008f86:	4621      	mov	r1, r4
 8008f88:	f7ff fde2 	bl	8008b50 <_Bfree>
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f92:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f96:	3301      	adds	r3, #1
 8008f98:	e7c5      	b.n	8008f26 <__lshift+0x4a>
 8008f9a:	3904      	subs	r1, #4
 8008f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fa4:	459c      	cmp	ip, r3
 8008fa6:	d8f9      	bhi.n	8008f9c <__lshift+0xc0>
 8008fa8:	e7ea      	b.n	8008f80 <__lshift+0xa4>
 8008faa:	bf00      	nop
 8008fac:	0800a4e8 	.word	0x0800a4e8
 8008fb0:	0800a4f9 	.word	0x0800a4f9

08008fb4 <__mcmp>:
 8008fb4:	690a      	ldr	r2, [r1, #16]
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6900      	ldr	r0, [r0, #16]
 8008fba:	1a80      	subs	r0, r0, r2
 8008fbc:	b530      	push	{r4, r5, lr}
 8008fbe:	d10e      	bne.n	8008fde <__mcmp+0x2a>
 8008fc0:	3314      	adds	r3, #20
 8008fc2:	3114      	adds	r1, #20
 8008fc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fd4:	4295      	cmp	r5, r2
 8008fd6:	d003      	beq.n	8008fe0 <__mcmp+0x2c>
 8008fd8:	d205      	bcs.n	8008fe6 <__mcmp+0x32>
 8008fda:	f04f 30ff 	mov.w	r0, #4294967295
 8008fde:	bd30      	pop	{r4, r5, pc}
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	d3f3      	bcc.n	8008fcc <__mcmp+0x18>
 8008fe4:	e7fb      	b.n	8008fde <__mcmp+0x2a>
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	e7f9      	b.n	8008fde <__mcmp+0x2a>
	...

08008fec <__mdiff>:
 8008fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	4689      	mov	r9, r1
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4648      	mov	r0, r9
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	f7ff ffdb 	bl	8008fb4 <__mcmp>
 8008ffe:	1e05      	subs	r5, r0, #0
 8009000:	d112      	bne.n	8009028 <__mdiff+0x3c>
 8009002:	4629      	mov	r1, r5
 8009004:	4630      	mov	r0, r6
 8009006:	f7ff fd63 	bl	8008ad0 <_Balloc>
 800900a:	4602      	mov	r2, r0
 800900c:	b928      	cbnz	r0, 800901a <__mdiff+0x2e>
 800900e:	4b3f      	ldr	r3, [pc, #252]	@ (800910c <__mdiff+0x120>)
 8009010:	f240 2137 	movw	r1, #567	@ 0x237
 8009014:	483e      	ldr	r0, [pc, #248]	@ (8009110 <__mdiff+0x124>)
 8009016:	f000 fcd7 	bl	80099c8 <__assert_func>
 800901a:	2301      	movs	r3, #1
 800901c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009020:	4610      	mov	r0, r2
 8009022:	b003      	add	sp, #12
 8009024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009028:	bfbc      	itt	lt
 800902a:	464b      	movlt	r3, r9
 800902c:	46a1      	movlt	r9, r4
 800902e:	4630      	mov	r0, r6
 8009030:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009034:	bfba      	itte	lt
 8009036:	461c      	movlt	r4, r3
 8009038:	2501      	movlt	r5, #1
 800903a:	2500      	movge	r5, #0
 800903c:	f7ff fd48 	bl	8008ad0 <_Balloc>
 8009040:	4602      	mov	r2, r0
 8009042:	b918      	cbnz	r0, 800904c <__mdiff+0x60>
 8009044:	4b31      	ldr	r3, [pc, #196]	@ (800910c <__mdiff+0x120>)
 8009046:	f240 2145 	movw	r1, #581	@ 0x245
 800904a:	e7e3      	b.n	8009014 <__mdiff+0x28>
 800904c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009050:	6926      	ldr	r6, [r4, #16]
 8009052:	60c5      	str	r5, [r0, #12]
 8009054:	f109 0310 	add.w	r3, r9, #16
 8009058:	f109 0514 	add.w	r5, r9, #20
 800905c:	f104 0e14 	add.w	lr, r4, #20
 8009060:	f100 0b14 	add.w	fp, r0, #20
 8009064:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009068:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	46d9      	mov	r9, fp
 8009070:	f04f 0c00 	mov.w	ip, #0
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	f85e 0b04 	ldr.w	r0, [lr], #4
 800907a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	fa1f f38a 	uxth.w	r3, sl
 8009084:	4619      	mov	r1, r3
 8009086:	b283      	uxth	r3, r0
 8009088:	1acb      	subs	r3, r1, r3
 800908a:	0c00      	lsrs	r0, r0, #16
 800908c:	4463      	add	r3, ip
 800908e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009092:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009096:	b29b      	uxth	r3, r3
 8009098:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800909c:	4576      	cmp	r6, lr
 800909e:	f849 3b04 	str.w	r3, [r9], #4
 80090a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090a6:	d8e5      	bhi.n	8009074 <__mdiff+0x88>
 80090a8:	1b33      	subs	r3, r6, r4
 80090aa:	3b15      	subs	r3, #21
 80090ac:	f023 0303 	bic.w	r3, r3, #3
 80090b0:	3415      	adds	r4, #21
 80090b2:	3304      	adds	r3, #4
 80090b4:	42a6      	cmp	r6, r4
 80090b6:	bf38      	it	cc
 80090b8:	2304      	movcc	r3, #4
 80090ba:	441d      	add	r5, r3
 80090bc:	445b      	add	r3, fp
 80090be:	461e      	mov	r6, r3
 80090c0:	462c      	mov	r4, r5
 80090c2:	4544      	cmp	r4, r8
 80090c4:	d30e      	bcc.n	80090e4 <__mdiff+0xf8>
 80090c6:	f108 0103 	add.w	r1, r8, #3
 80090ca:	1b49      	subs	r1, r1, r5
 80090cc:	f021 0103 	bic.w	r1, r1, #3
 80090d0:	3d03      	subs	r5, #3
 80090d2:	45a8      	cmp	r8, r5
 80090d4:	bf38      	it	cc
 80090d6:	2100      	movcc	r1, #0
 80090d8:	440b      	add	r3, r1
 80090da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090de:	b191      	cbz	r1, 8009106 <__mdiff+0x11a>
 80090e0:	6117      	str	r7, [r2, #16]
 80090e2:	e79d      	b.n	8009020 <__mdiff+0x34>
 80090e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80090e8:	46e6      	mov	lr, ip
 80090ea:	0c08      	lsrs	r0, r1, #16
 80090ec:	fa1c fc81 	uxtah	ip, ip, r1
 80090f0:	4471      	add	r1, lr
 80090f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090f6:	b289      	uxth	r1, r1
 80090f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090fc:	f846 1b04 	str.w	r1, [r6], #4
 8009100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009104:	e7dd      	b.n	80090c2 <__mdiff+0xd6>
 8009106:	3f01      	subs	r7, #1
 8009108:	e7e7      	b.n	80090da <__mdiff+0xee>
 800910a:	bf00      	nop
 800910c:	0800a4e8 	.word	0x0800a4e8
 8009110:	0800a4f9 	.word	0x0800a4f9

08009114 <__d2b>:
 8009114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009118:	460f      	mov	r7, r1
 800911a:	2101      	movs	r1, #1
 800911c:	ec59 8b10 	vmov	r8, r9, d0
 8009120:	4616      	mov	r6, r2
 8009122:	f7ff fcd5 	bl	8008ad0 <_Balloc>
 8009126:	4604      	mov	r4, r0
 8009128:	b930      	cbnz	r0, 8009138 <__d2b+0x24>
 800912a:	4602      	mov	r2, r0
 800912c:	4b23      	ldr	r3, [pc, #140]	@ (80091bc <__d2b+0xa8>)
 800912e:	4824      	ldr	r0, [pc, #144]	@ (80091c0 <__d2b+0xac>)
 8009130:	f240 310f 	movw	r1, #783	@ 0x30f
 8009134:	f000 fc48 	bl	80099c8 <__assert_func>
 8009138:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800913c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009140:	b10d      	cbz	r5, 8009146 <__d2b+0x32>
 8009142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	f1b8 0300 	subs.w	r3, r8, #0
 800914c:	d023      	beq.n	8009196 <__d2b+0x82>
 800914e:	4668      	mov	r0, sp
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	f7ff fd84 	bl	8008c5e <__lo0bits>
 8009156:	e9dd 1200 	ldrd	r1, r2, [sp]
 800915a:	b1d0      	cbz	r0, 8009192 <__d2b+0x7e>
 800915c:	f1c0 0320 	rsb	r3, r0, #32
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	430b      	orrs	r3, r1
 8009166:	40c2      	lsrs	r2, r0
 8009168:	6163      	str	r3, [r4, #20]
 800916a:	9201      	str	r2, [sp, #4]
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	61a3      	str	r3, [r4, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf0c      	ite	eq
 8009174:	2201      	moveq	r2, #1
 8009176:	2202      	movne	r2, #2
 8009178:	6122      	str	r2, [r4, #16]
 800917a:	b1a5      	cbz	r5, 80091a6 <__d2b+0x92>
 800917c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009180:	4405      	add	r5, r0
 8009182:	603d      	str	r5, [r7, #0]
 8009184:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009188:	6030      	str	r0, [r6, #0]
 800918a:	4620      	mov	r0, r4
 800918c:	b003      	add	sp, #12
 800918e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009192:	6161      	str	r1, [r4, #20]
 8009194:	e7ea      	b.n	800916c <__d2b+0x58>
 8009196:	a801      	add	r0, sp, #4
 8009198:	f7ff fd61 	bl	8008c5e <__lo0bits>
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	6163      	str	r3, [r4, #20]
 80091a0:	3020      	adds	r0, #32
 80091a2:	2201      	movs	r2, #1
 80091a4:	e7e8      	b.n	8009178 <__d2b+0x64>
 80091a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80091ae:	6038      	str	r0, [r7, #0]
 80091b0:	6918      	ldr	r0, [r3, #16]
 80091b2:	f7ff fd35 	bl	8008c20 <__hi0bits>
 80091b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091ba:	e7e5      	b.n	8009188 <__d2b+0x74>
 80091bc:	0800a4e8 	.word	0x0800a4e8
 80091c0:	0800a4f9 	.word	0x0800a4f9

080091c4 <__ssputs_r>:
 80091c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c8:	688e      	ldr	r6, [r1, #8]
 80091ca:	461f      	mov	r7, r3
 80091cc:	42be      	cmp	r6, r7
 80091ce:	680b      	ldr	r3, [r1, #0]
 80091d0:	4682      	mov	sl, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	4690      	mov	r8, r2
 80091d6:	d82d      	bhi.n	8009234 <__ssputs_r+0x70>
 80091d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091e0:	d026      	beq.n	8009230 <__ssputs_r+0x6c>
 80091e2:	6965      	ldr	r5, [r4, #20]
 80091e4:	6909      	ldr	r1, [r1, #16]
 80091e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091ea:	eba3 0901 	sub.w	r9, r3, r1
 80091ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091f2:	1c7b      	adds	r3, r7, #1
 80091f4:	444b      	add	r3, r9
 80091f6:	106d      	asrs	r5, r5, #1
 80091f8:	429d      	cmp	r5, r3
 80091fa:	bf38      	it	cc
 80091fc:	461d      	movcc	r5, r3
 80091fe:	0553      	lsls	r3, r2, #21
 8009200:	d527      	bpl.n	8009252 <__ssputs_r+0x8e>
 8009202:	4629      	mov	r1, r5
 8009204:	f7ff fbd8 	bl	80089b8 <_malloc_r>
 8009208:	4606      	mov	r6, r0
 800920a:	b360      	cbz	r0, 8009266 <__ssputs_r+0xa2>
 800920c:	6921      	ldr	r1, [r4, #16]
 800920e:	464a      	mov	r2, r9
 8009210:	f000 fbcc 	bl	80099ac <memcpy>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800921a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	6126      	str	r6, [r4, #16]
 8009222:	6165      	str	r5, [r4, #20]
 8009224:	444e      	add	r6, r9
 8009226:	eba5 0509 	sub.w	r5, r5, r9
 800922a:	6026      	str	r6, [r4, #0]
 800922c:	60a5      	str	r5, [r4, #8]
 800922e:	463e      	mov	r6, r7
 8009230:	42be      	cmp	r6, r7
 8009232:	d900      	bls.n	8009236 <__ssputs_r+0x72>
 8009234:	463e      	mov	r6, r7
 8009236:	6820      	ldr	r0, [r4, #0]
 8009238:	4632      	mov	r2, r6
 800923a:	4641      	mov	r1, r8
 800923c:	f000 fb6a 	bl	8009914 <memmove>
 8009240:	68a3      	ldr	r3, [r4, #8]
 8009242:	1b9b      	subs	r3, r3, r6
 8009244:	60a3      	str	r3, [r4, #8]
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	4433      	add	r3, r6
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	2000      	movs	r0, #0
 800924e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009252:	462a      	mov	r2, r5
 8009254:	f000 fbfc 	bl	8009a50 <_realloc_r>
 8009258:	4606      	mov	r6, r0
 800925a:	2800      	cmp	r0, #0
 800925c:	d1e0      	bne.n	8009220 <__ssputs_r+0x5c>
 800925e:	6921      	ldr	r1, [r4, #16]
 8009260:	4650      	mov	r0, sl
 8009262:	f7ff fb35 	bl	80088d0 <_free_r>
 8009266:	230c      	movs	r3, #12
 8009268:	f8ca 3000 	str.w	r3, [sl]
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	e7e9      	b.n	800924e <__ssputs_r+0x8a>
	...

0800927c <_svfiprintf_r>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	4698      	mov	r8, r3
 8009282:	898b      	ldrh	r3, [r1, #12]
 8009284:	061b      	lsls	r3, r3, #24
 8009286:	b09d      	sub	sp, #116	@ 0x74
 8009288:	4607      	mov	r7, r0
 800928a:	460d      	mov	r5, r1
 800928c:	4614      	mov	r4, r2
 800928e:	d510      	bpl.n	80092b2 <_svfiprintf_r+0x36>
 8009290:	690b      	ldr	r3, [r1, #16]
 8009292:	b973      	cbnz	r3, 80092b2 <_svfiprintf_r+0x36>
 8009294:	2140      	movs	r1, #64	@ 0x40
 8009296:	f7ff fb8f 	bl	80089b8 <_malloc_r>
 800929a:	6028      	str	r0, [r5, #0]
 800929c:	6128      	str	r0, [r5, #16]
 800929e:	b930      	cbnz	r0, 80092ae <_svfiprintf_r+0x32>
 80092a0:	230c      	movs	r3, #12
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	b01d      	add	sp, #116	@ 0x74
 80092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ae:	2340      	movs	r3, #64	@ 0x40
 80092b0:	616b      	str	r3, [r5, #20]
 80092b2:	2300      	movs	r3, #0
 80092b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b6:	2320      	movs	r3, #32
 80092b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80092c0:	2330      	movs	r3, #48	@ 0x30
 80092c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009460 <_svfiprintf_r+0x1e4>
 80092c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092ca:	f04f 0901 	mov.w	r9, #1
 80092ce:	4623      	mov	r3, r4
 80092d0:	469a      	mov	sl, r3
 80092d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d6:	b10a      	cbz	r2, 80092dc <_svfiprintf_r+0x60>
 80092d8:	2a25      	cmp	r2, #37	@ 0x25
 80092da:	d1f9      	bne.n	80092d0 <_svfiprintf_r+0x54>
 80092dc:	ebba 0b04 	subs.w	fp, sl, r4
 80092e0:	d00b      	beq.n	80092fa <_svfiprintf_r+0x7e>
 80092e2:	465b      	mov	r3, fp
 80092e4:	4622      	mov	r2, r4
 80092e6:	4629      	mov	r1, r5
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ff6b 	bl	80091c4 <__ssputs_r>
 80092ee:	3001      	adds	r0, #1
 80092f0:	f000 80a7 	beq.w	8009442 <_svfiprintf_r+0x1c6>
 80092f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f6:	445a      	add	r2, fp
 80092f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80092fa:	f89a 3000 	ldrb.w	r3, [sl]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 809f 	beq.w	8009442 <_svfiprintf_r+0x1c6>
 8009304:	2300      	movs	r3, #0
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800930e:	f10a 0a01 	add.w	sl, sl, #1
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	9307      	str	r3, [sp, #28]
 8009316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800931a:	931a      	str	r3, [sp, #104]	@ 0x68
 800931c:	4654      	mov	r4, sl
 800931e:	2205      	movs	r2, #5
 8009320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009324:	484e      	ldr	r0, [pc, #312]	@ (8009460 <_svfiprintf_r+0x1e4>)
 8009326:	f7f6 ff7b 	bl	8000220 <memchr>
 800932a:	9a04      	ldr	r2, [sp, #16]
 800932c:	b9d8      	cbnz	r0, 8009366 <_svfiprintf_r+0xea>
 800932e:	06d0      	lsls	r0, r2, #27
 8009330:	bf44      	itt	mi
 8009332:	2320      	movmi	r3, #32
 8009334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009338:	0711      	lsls	r1, r2, #28
 800933a:	bf44      	itt	mi
 800933c:	232b      	movmi	r3, #43	@ 0x2b
 800933e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009342:	f89a 3000 	ldrb.w	r3, [sl]
 8009346:	2b2a      	cmp	r3, #42	@ 0x2a
 8009348:	d015      	beq.n	8009376 <_svfiprintf_r+0xfa>
 800934a:	9a07      	ldr	r2, [sp, #28]
 800934c:	4654      	mov	r4, sl
 800934e:	2000      	movs	r0, #0
 8009350:	f04f 0c0a 	mov.w	ip, #10
 8009354:	4621      	mov	r1, r4
 8009356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800935a:	3b30      	subs	r3, #48	@ 0x30
 800935c:	2b09      	cmp	r3, #9
 800935e:	d94b      	bls.n	80093f8 <_svfiprintf_r+0x17c>
 8009360:	b1b0      	cbz	r0, 8009390 <_svfiprintf_r+0x114>
 8009362:	9207      	str	r2, [sp, #28]
 8009364:	e014      	b.n	8009390 <_svfiprintf_r+0x114>
 8009366:	eba0 0308 	sub.w	r3, r0, r8
 800936a:	fa09 f303 	lsl.w	r3, r9, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	46a2      	mov	sl, r4
 8009374:	e7d2      	b.n	800931c <_svfiprintf_r+0xa0>
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	1d19      	adds	r1, r3, #4
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	9103      	str	r1, [sp, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfbb      	ittet	lt
 8009382:	425b      	neglt	r3, r3
 8009384:	f042 0202 	orrlt.w	r2, r2, #2
 8009388:	9307      	strge	r3, [sp, #28]
 800938a:	9307      	strlt	r3, [sp, #28]
 800938c:	bfb8      	it	lt
 800938e:	9204      	strlt	r2, [sp, #16]
 8009390:	7823      	ldrb	r3, [r4, #0]
 8009392:	2b2e      	cmp	r3, #46	@ 0x2e
 8009394:	d10a      	bne.n	80093ac <_svfiprintf_r+0x130>
 8009396:	7863      	ldrb	r3, [r4, #1]
 8009398:	2b2a      	cmp	r3, #42	@ 0x2a
 800939a:	d132      	bne.n	8009402 <_svfiprintf_r+0x186>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	1d1a      	adds	r2, r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	9203      	str	r2, [sp, #12]
 80093a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093a8:	3402      	adds	r4, #2
 80093aa:	9305      	str	r3, [sp, #20]
 80093ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009470 <_svfiprintf_r+0x1f4>
 80093b0:	7821      	ldrb	r1, [r4, #0]
 80093b2:	2203      	movs	r2, #3
 80093b4:	4650      	mov	r0, sl
 80093b6:	f7f6 ff33 	bl	8000220 <memchr>
 80093ba:	b138      	cbz	r0, 80093cc <_svfiprintf_r+0x150>
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	eba0 000a 	sub.w	r0, r0, sl
 80093c2:	2240      	movs	r2, #64	@ 0x40
 80093c4:	4082      	lsls	r2, r0
 80093c6:	4313      	orrs	r3, r2
 80093c8:	3401      	adds	r4, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d0:	4824      	ldr	r0, [pc, #144]	@ (8009464 <_svfiprintf_r+0x1e8>)
 80093d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093d6:	2206      	movs	r2, #6
 80093d8:	f7f6 ff22 	bl	8000220 <memchr>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d036      	beq.n	800944e <_svfiprintf_r+0x1d2>
 80093e0:	4b21      	ldr	r3, [pc, #132]	@ (8009468 <_svfiprintf_r+0x1ec>)
 80093e2:	bb1b      	cbnz	r3, 800942c <_svfiprintf_r+0x1b0>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	3307      	adds	r3, #7
 80093e8:	f023 0307 	bic.w	r3, r3, #7
 80093ec:	3308      	adds	r3, #8
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f2:	4433      	add	r3, r6
 80093f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f6:	e76a      	b.n	80092ce <_svfiprintf_r+0x52>
 80093f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093fc:	460c      	mov	r4, r1
 80093fe:	2001      	movs	r0, #1
 8009400:	e7a8      	b.n	8009354 <_svfiprintf_r+0xd8>
 8009402:	2300      	movs	r3, #0
 8009404:	3401      	adds	r4, #1
 8009406:	9305      	str	r3, [sp, #20]
 8009408:	4619      	mov	r1, r3
 800940a:	f04f 0c0a 	mov.w	ip, #10
 800940e:	4620      	mov	r0, r4
 8009410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009414:	3a30      	subs	r2, #48	@ 0x30
 8009416:	2a09      	cmp	r2, #9
 8009418:	d903      	bls.n	8009422 <_svfiprintf_r+0x1a6>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0c6      	beq.n	80093ac <_svfiprintf_r+0x130>
 800941e:	9105      	str	r1, [sp, #20]
 8009420:	e7c4      	b.n	80093ac <_svfiprintf_r+0x130>
 8009422:	fb0c 2101 	mla	r1, ip, r1, r2
 8009426:	4604      	mov	r4, r0
 8009428:	2301      	movs	r3, #1
 800942a:	e7f0      	b.n	800940e <_svfiprintf_r+0x192>
 800942c:	ab03      	add	r3, sp, #12
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	462a      	mov	r2, r5
 8009432:	4b0e      	ldr	r3, [pc, #56]	@ (800946c <_svfiprintf_r+0x1f0>)
 8009434:	a904      	add	r1, sp, #16
 8009436:	4638      	mov	r0, r7
 8009438:	f7fd fd7a 	bl	8006f30 <_printf_float>
 800943c:	1c42      	adds	r2, r0, #1
 800943e:	4606      	mov	r6, r0
 8009440:	d1d6      	bne.n	80093f0 <_svfiprintf_r+0x174>
 8009442:	89ab      	ldrh	r3, [r5, #12]
 8009444:	065b      	lsls	r3, r3, #25
 8009446:	f53f af2d 	bmi.w	80092a4 <_svfiprintf_r+0x28>
 800944a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800944c:	e72c      	b.n	80092a8 <_svfiprintf_r+0x2c>
 800944e:	ab03      	add	r3, sp, #12
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	462a      	mov	r2, r5
 8009454:	4b05      	ldr	r3, [pc, #20]	@ (800946c <_svfiprintf_r+0x1f0>)
 8009456:	a904      	add	r1, sp, #16
 8009458:	4638      	mov	r0, r7
 800945a:	f7fe f801 	bl	8007460 <_printf_i>
 800945e:	e7ed      	b.n	800943c <_svfiprintf_r+0x1c0>
 8009460:	0800a552 	.word	0x0800a552
 8009464:	0800a55c 	.word	0x0800a55c
 8009468:	08006f31 	.word	0x08006f31
 800946c:	080091c5 	.word	0x080091c5
 8009470:	0800a558 	.word	0x0800a558

08009474 <__sfputc_r>:
 8009474:	6893      	ldr	r3, [r2, #8]
 8009476:	3b01      	subs	r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	b410      	push	{r4}
 800947c:	6093      	str	r3, [r2, #8]
 800947e:	da08      	bge.n	8009492 <__sfputc_r+0x1e>
 8009480:	6994      	ldr	r4, [r2, #24]
 8009482:	42a3      	cmp	r3, r4
 8009484:	db01      	blt.n	800948a <__sfputc_r+0x16>
 8009486:	290a      	cmp	r1, #10
 8009488:	d103      	bne.n	8009492 <__sfputc_r+0x1e>
 800948a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800948e:	f7fe bab0 	b.w	80079f2 <__swbuf_r>
 8009492:	6813      	ldr	r3, [r2, #0]
 8009494:	1c58      	adds	r0, r3, #1
 8009496:	6010      	str	r0, [r2, #0]
 8009498:	7019      	strb	r1, [r3, #0]
 800949a:	4608      	mov	r0, r1
 800949c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <__sfputs_r>:
 80094a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a4:	4606      	mov	r6, r0
 80094a6:	460f      	mov	r7, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	18d5      	adds	r5, r2, r3
 80094ac:	42ac      	cmp	r4, r5
 80094ae:	d101      	bne.n	80094b4 <__sfputs_r+0x12>
 80094b0:	2000      	movs	r0, #0
 80094b2:	e007      	b.n	80094c4 <__sfputs_r+0x22>
 80094b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b8:	463a      	mov	r2, r7
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ffda 	bl	8009474 <__sfputc_r>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d1f3      	bne.n	80094ac <__sfputs_r+0xa>
 80094c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094c8 <_vfiprintf_r>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	460d      	mov	r5, r1
 80094ce:	b09d      	sub	sp, #116	@ 0x74
 80094d0:	4614      	mov	r4, r2
 80094d2:	4698      	mov	r8, r3
 80094d4:	4606      	mov	r6, r0
 80094d6:	b118      	cbz	r0, 80094e0 <_vfiprintf_r+0x18>
 80094d8:	6a03      	ldr	r3, [r0, #32]
 80094da:	b90b      	cbnz	r3, 80094e0 <_vfiprintf_r+0x18>
 80094dc:	f7fe f96a 	bl	80077b4 <__sinit>
 80094e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094e2:	07d9      	lsls	r1, r3, #31
 80094e4:	d405      	bmi.n	80094f2 <_vfiprintf_r+0x2a>
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	059a      	lsls	r2, r3, #22
 80094ea:	d402      	bmi.n	80094f2 <_vfiprintf_r+0x2a>
 80094ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ee:	f7fe fb92 	bl	8007c16 <__retarget_lock_acquire_recursive>
 80094f2:	89ab      	ldrh	r3, [r5, #12]
 80094f4:	071b      	lsls	r3, r3, #28
 80094f6:	d501      	bpl.n	80094fc <_vfiprintf_r+0x34>
 80094f8:	692b      	ldr	r3, [r5, #16]
 80094fa:	b99b      	cbnz	r3, 8009524 <_vfiprintf_r+0x5c>
 80094fc:	4629      	mov	r1, r5
 80094fe:	4630      	mov	r0, r6
 8009500:	f7fe fab6 	bl	8007a70 <__swsetup_r>
 8009504:	b170      	cbz	r0, 8009524 <_vfiprintf_r+0x5c>
 8009506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009508:	07dc      	lsls	r4, r3, #31
 800950a:	d504      	bpl.n	8009516 <_vfiprintf_r+0x4e>
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	b01d      	add	sp, #116	@ 0x74
 8009512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009516:	89ab      	ldrh	r3, [r5, #12]
 8009518:	0598      	lsls	r0, r3, #22
 800951a:	d4f7      	bmi.n	800950c <_vfiprintf_r+0x44>
 800951c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800951e:	f7fe fb7b 	bl	8007c18 <__retarget_lock_release_recursive>
 8009522:	e7f3      	b.n	800950c <_vfiprintf_r+0x44>
 8009524:	2300      	movs	r3, #0
 8009526:	9309      	str	r3, [sp, #36]	@ 0x24
 8009528:	2320      	movs	r3, #32
 800952a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800952e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009532:	2330      	movs	r3, #48	@ 0x30
 8009534:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80096e4 <_vfiprintf_r+0x21c>
 8009538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800953c:	f04f 0901 	mov.w	r9, #1
 8009540:	4623      	mov	r3, r4
 8009542:	469a      	mov	sl, r3
 8009544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009548:	b10a      	cbz	r2, 800954e <_vfiprintf_r+0x86>
 800954a:	2a25      	cmp	r2, #37	@ 0x25
 800954c:	d1f9      	bne.n	8009542 <_vfiprintf_r+0x7a>
 800954e:	ebba 0b04 	subs.w	fp, sl, r4
 8009552:	d00b      	beq.n	800956c <_vfiprintf_r+0xa4>
 8009554:	465b      	mov	r3, fp
 8009556:	4622      	mov	r2, r4
 8009558:	4629      	mov	r1, r5
 800955a:	4630      	mov	r0, r6
 800955c:	f7ff ffa1 	bl	80094a2 <__sfputs_r>
 8009560:	3001      	adds	r0, #1
 8009562:	f000 80a7 	beq.w	80096b4 <_vfiprintf_r+0x1ec>
 8009566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009568:	445a      	add	r2, fp
 800956a:	9209      	str	r2, [sp, #36]	@ 0x24
 800956c:	f89a 3000 	ldrb.w	r3, [sl]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 809f 	beq.w	80096b4 <_vfiprintf_r+0x1ec>
 8009576:	2300      	movs	r3, #0
 8009578:	f04f 32ff 	mov.w	r2, #4294967295
 800957c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009580:	f10a 0a01 	add.w	sl, sl, #1
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	9307      	str	r3, [sp, #28]
 8009588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800958c:	931a      	str	r3, [sp, #104]	@ 0x68
 800958e:	4654      	mov	r4, sl
 8009590:	2205      	movs	r2, #5
 8009592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009596:	4853      	ldr	r0, [pc, #332]	@ (80096e4 <_vfiprintf_r+0x21c>)
 8009598:	f7f6 fe42 	bl	8000220 <memchr>
 800959c:	9a04      	ldr	r2, [sp, #16]
 800959e:	b9d8      	cbnz	r0, 80095d8 <_vfiprintf_r+0x110>
 80095a0:	06d1      	lsls	r1, r2, #27
 80095a2:	bf44      	itt	mi
 80095a4:	2320      	movmi	r3, #32
 80095a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095aa:	0713      	lsls	r3, r2, #28
 80095ac:	bf44      	itt	mi
 80095ae:	232b      	movmi	r3, #43	@ 0x2b
 80095b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095b4:	f89a 3000 	ldrb.w	r3, [sl]
 80095b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ba:	d015      	beq.n	80095e8 <_vfiprintf_r+0x120>
 80095bc:	9a07      	ldr	r2, [sp, #28]
 80095be:	4654      	mov	r4, sl
 80095c0:	2000      	movs	r0, #0
 80095c2:	f04f 0c0a 	mov.w	ip, #10
 80095c6:	4621      	mov	r1, r4
 80095c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095cc:	3b30      	subs	r3, #48	@ 0x30
 80095ce:	2b09      	cmp	r3, #9
 80095d0:	d94b      	bls.n	800966a <_vfiprintf_r+0x1a2>
 80095d2:	b1b0      	cbz	r0, 8009602 <_vfiprintf_r+0x13a>
 80095d4:	9207      	str	r2, [sp, #28]
 80095d6:	e014      	b.n	8009602 <_vfiprintf_r+0x13a>
 80095d8:	eba0 0308 	sub.w	r3, r0, r8
 80095dc:	fa09 f303 	lsl.w	r3, r9, r3
 80095e0:	4313      	orrs	r3, r2
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	46a2      	mov	sl, r4
 80095e6:	e7d2      	b.n	800958e <_vfiprintf_r+0xc6>
 80095e8:	9b03      	ldr	r3, [sp, #12]
 80095ea:	1d19      	adds	r1, r3, #4
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	9103      	str	r1, [sp, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bfbb      	ittet	lt
 80095f4:	425b      	neglt	r3, r3
 80095f6:	f042 0202 	orrlt.w	r2, r2, #2
 80095fa:	9307      	strge	r3, [sp, #28]
 80095fc:	9307      	strlt	r3, [sp, #28]
 80095fe:	bfb8      	it	lt
 8009600:	9204      	strlt	r2, [sp, #16]
 8009602:	7823      	ldrb	r3, [r4, #0]
 8009604:	2b2e      	cmp	r3, #46	@ 0x2e
 8009606:	d10a      	bne.n	800961e <_vfiprintf_r+0x156>
 8009608:	7863      	ldrb	r3, [r4, #1]
 800960a:	2b2a      	cmp	r3, #42	@ 0x2a
 800960c:	d132      	bne.n	8009674 <_vfiprintf_r+0x1ac>
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	1d1a      	adds	r2, r3, #4
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	9203      	str	r2, [sp, #12]
 8009616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800961a:	3402      	adds	r4, #2
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80096f4 <_vfiprintf_r+0x22c>
 8009622:	7821      	ldrb	r1, [r4, #0]
 8009624:	2203      	movs	r2, #3
 8009626:	4650      	mov	r0, sl
 8009628:	f7f6 fdfa 	bl	8000220 <memchr>
 800962c:	b138      	cbz	r0, 800963e <_vfiprintf_r+0x176>
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	eba0 000a 	sub.w	r0, r0, sl
 8009634:	2240      	movs	r2, #64	@ 0x40
 8009636:	4082      	lsls	r2, r0
 8009638:	4313      	orrs	r3, r2
 800963a:	3401      	adds	r4, #1
 800963c:	9304      	str	r3, [sp, #16]
 800963e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009642:	4829      	ldr	r0, [pc, #164]	@ (80096e8 <_vfiprintf_r+0x220>)
 8009644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009648:	2206      	movs	r2, #6
 800964a:	f7f6 fde9 	bl	8000220 <memchr>
 800964e:	2800      	cmp	r0, #0
 8009650:	d03f      	beq.n	80096d2 <_vfiprintf_r+0x20a>
 8009652:	4b26      	ldr	r3, [pc, #152]	@ (80096ec <_vfiprintf_r+0x224>)
 8009654:	bb1b      	cbnz	r3, 800969e <_vfiprintf_r+0x1d6>
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	3307      	adds	r3, #7
 800965a:	f023 0307 	bic.w	r3, r3, #7
 800965e:	3308      	adds	r3, #8
 8009660:	9303      	str	r3, [sp, #12]
 8009662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009664:	443b      	add	r3, r7
 8009666:	9309      	str	r3, [sp, #36]	@ 0x24
 8009668:	e76a      	b.n	8009540 <_vfiprintf_r+0x78>
 800966a:	fb0c 3202 	mla	r2, ip, r2, r3
 800966e:	460c      	mov	r4, r1
 8009670:	2001      	movs	r0, #1
 8009672:	e7a8      	b.n	80095c6 <_vfiprintf_r+0xfe>
 8009674:	2300      	movs	r3, #0
 8009676:	3401      	adds	r4, #1
 8009678:	9305      	str	r3, [sp, #20]
 800967a:	4619      	mov	r1, r3
 800967c:	f04f 0c0a 	mov.w	ip, #10
 8009680:	4620      	mov	r0, r4
 8009682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009686:	3a30      	subs	r2, #48	@ 0x30
 8009688:	2a09      	cmp	r2, #9
 800968a:	d903      	bls.n	8009694 <_vfiprintf_r+0x1cc>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0c6      	beq.n	800961e <_vfiprintf_r+0x156>
 8009690:	9105      	str	r1, [sp, #20]
 8009692:	e7c4      	b.n	800961e <_vfiprintf_r+0x156>
 8009694:	fb0c 2101 	mla	r1, ip, r1, r2
 8009698:	4604      	mov	r4, r0
 800969a:	2301      	movs	r3, #1
 800969c:	e7f0      	b.n	8009680 <_vfiprintf_r+0x1b8>
 800969e:	ab03      	add	r3, sp, #12
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	462a      	mov	r2, r5
 80096a4:	4b12      	ldr	r3, [pc, #72]	@ (80096f0 <_vfiprintf_r+0x228>)
 80096a6:	a904      	add	r1, sp, #16
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7fd fc41 	bl	8006f30 <_printf_float>
 80096ae:	4607      	mov	r7, r0
 80096b0:	1c78      	adds	r0, r7, #1
 80096b2:	d1d6      	bne.n	8009662 <_vfiprintf_r+0x19a>
 80096b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096b6:	07d9      	lsls	r1, r3, #31
 80096b8:	d405      	bmi.n	80096c6 <_vfiprintf_r+0x1fe>
 80096ba:	89ab      	ldrh	r3, [r5, #12]
 80096bc:	059a      	lsls	r2, r3, #22
 80096be:	d402      	bmi.n	80096c6 <_vfiprintf_r+0x1fe>
 80096c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096c2:	f7fe faa9 	bl	8007c18 <__retarget_lock_release_recursive>
 80096c6:	89ab      	ldrh	r3, [r5, #12]
 80096c8:	065b      	lsls	r3, r3, #25
 80096ca:	f53f af1f 	bmi.w	800950c <_vfiprintf_r+0x44>
 80096ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096d0:	e71e      	b.n	8009510 <_vfiprintf_r+0x48>
 80096d2:	ab03      	add	r3, sp, #12
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	462a      	mov	r2, r5
 80096d8:	4b05      	ldr	r3, [pc, #20]	@ (80096f0 <_vfiprintf_r+0x228>)
 80096da:	a904      	add	r1, sp, #16
 80096dc:	4630      	mov	r0, r6
 80096de:	f7fd febf 	bl	8007460 <_printf_i>
 80096e2:	e7e4      	b.n	80096ae <_vfiprintf_r+0x1e6>
 80096e4:	0800a552 	.word	0x0800a552
 80096e8:	0800a55c 	.word	0x0800a55c
 80096ec:	08006f31 	.word	0x08006f31
 80096f0:	080094a3 	.word	0x080094a3
 80096f4:	0800a558 	.word	0x0800a558

080096f8 <__sflush_r>:
 80096f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009700:	0716      	lsls	r6, r2, #28
 8009702:	4605      	mov	r5, r0
 8009704:	460c      	mov	r4, r1
 8009706:	d454      	bmi.n	80097b2 <__sflush_r+0xba>
 8009708:	684b      	ldr	r3, [r1, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	dc02      	bgt.n	8009714 <__sflush_r+0x1c>
 800970e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	dd48      	ble.n	80097a6 <__sflush_r+0xae>
 8009714:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009716:	2e00      	cmp	r6, #0
 8009718:	d045      	beq.n	80097a6 <__sflush_r+0xae>
 800971a:	2300      	movs	r3, #0
 800971c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009720:	682f      	ldr	r7, [r5, #0]
 8009722:	6a21      	ldr	r1, [r4, #32]
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	d030      	beq.n	800978a <__sflush_r+0x92>
 8009728:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	0759      	lsls	r1, r3, #29
 800972e:	d505      	bpl.n	800973c <__sflush_r+0x44>
 8009730:	6863      	ldr	r3, [r4, #4]
 8009732:	1ad2      	subs	r2, r2, r3
 8009734:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009736:	b10b      	cbz	r3, 800973c <__sflush_r+0x44>
 8009738:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800973a:	1ad2      	subs	r2, r2, r3
 800973c:	2300      	movs	r3, #0
 800973e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009740:	6a21      	ldr	r1, [r4, #32]
 8009742:	4628      	mov	r0, r5
 8009744:	47b0      	blx	r6
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	d106      	bne.n	800975a <__sflush_r+0x62>
 800974c:	6829      	ldr	r1, [r5, #0]
 800974e:	291d      	cmp	r1, #29
 8009750:	d82b      	bhi.n	80097aa <__sflush_r+0xb2>
 8009752:	4a2a      	ldr	r2, [pc, #168]	@ (80097fc <__sflush_r+0x104>)
 8009754:	40ca      	lsrs	r2, r1
 8009756:	07d6      	lsls	r6, r2, #31
 8009758:	d527      	bpl.n	80097aa <__sflush_r+0xb2>
 800975a:	2200      	movs	r2, #0
 800975c:	6062      	str	r2, [r4, #4]
 800975e:	04d9      	lsls	r1, r3, #19
 8009760:	6922      	ldr	r2, [r4, #16]
 8009762:	6022      	str	r2, [r4, #0]
 8009764:	d504      	bpl.n	8009770 <__sflush_r+0x78>
 8009766:	1c42      	adds	r2, r0, #1
 8009768:	d101      	bne.n	800976e <__sflush_r+0x76>
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	b903      	cbnz	r3, 8009770 <__sflush_r+0x78>
 800976e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009772:	602f      	str	r7, [r5, #0]
 8009774:	b1b9      	cbz	r1, 80097a6 <__sflush_r+0xae>
 8009776:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800977a:	4299      	cmp	r1, r3
 800977c:	d002      	beq.n	8009784 <__sflush_r+0x8c>
 800977e:	4628      	mov	r0, r5
 8009780:	f7ff f8a6 	bl	80088d0 <_free_r>
 8009784:	2300      	movs	r3, #0
 8009786:	6363      	str	r3, [r4, #52]	@ 0x34
 8009788:	e00d      	b.n	80097a6 <__sflush_r+0xae>
 800978a:	2301      	movs	r3, #1
 800978c:	4628      	mov	r0, r5
 800978e:	47b0      	blx	r6
 8009790:	4602      	mov	r2, r0
 8009792:	1c50      	adds	r0, r2, #1
 8009794:	d1c9      	bne.n	800972a <__sflush_r+0x32>
 8009796:	682b      	ldr	r3, [r5, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0c6      	beq.n	800972a <__sflush_r+0x32>
 800979c:	2b1d      	cmp	r3, #29
 800979e:	d001      	beq.n	80097a4 <__sflush_r+0xac>
 80097a0:	2b16      	cmp	r3, #22
 80097a2:	d11e      	bne.n	80097e2 <__sflush_r+0xea>
 80097a4:	602f      	str	r7, [r5, #0]
 80097a6:	2000      	movs	r0, #0
 80097a8:	e022      	b.n	80097f0 <__sflush_r+0xf8>
 80097aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ae:	b21b      	sxth	r3, r3
 80097b0:	e01b      	b.n	80097ea <__sflush_r+0xf2>
 80097b2:	690f      	ldr	r7, [r1, #16]
 80097b4:	2f00      	cmp	r7, #0
 80097b6:	d0f6      	beq.n	80097a6 <__sflush_r+0xae>
 80097b8:	0793      	lsls	r3, r2, #30
 80097ba:	680e      	ldr	r6, [r1, #0]
 80097bc:	bf08      	it	eq
 80097be:	694b      	ldreq	r3, [r1, #20]
 80097c0:	600f      	str	r7, [r1, #0]
 80097c2:	bf18      	it	ne
 80097c4:	2300      	movne	r3, #0
 80097c6:	eba6 0807 	sub.w	r8, r6, r7
 80097ca:	608b      	str	r3, [r1, #8]
 80097cc:	f1b8 0f00 	cmp.w	r8, #0
 80097d0:	dde9      	ble.n	80097a6 <__sflush_r+0xae>
 80097d2:	6a21      	ldr	r1, [r4, #32]
 80097d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097d6:	4643      	mov	r3, r8
 80097d8:	463a      	mov	r2, r7
 80097da:	4628      	mov	r0, r5
 80097dc:	47b0      	blx	r6
 80097de:	2800      	cmp	r0, #0
 80097e0:	dc08      	bgt.n	80097f4 <__sflush_r+0xfc>
 80097e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	f04f 30ff 	mov.w	r0, #4294967295
 80097f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f4:	4407      	add	r7, r0
 80097f6:	eba8 0800 	sub.w	r8, r8, r0
 80097fa:	e7e7      	b.n	80097cc <__sflush_r+0xd4>
 80097fc:	20400001 	.word	0x20400001

08009800 <_fflush_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	690b      	ldr	r3, [r1, #16]
 8009804:	4605      	mov	r5, r0
 8009806:	460c      	mov	r4, r1
 8009808:	b913      	cbnz	r3, 8009810 <_fflush_r+0x10>
 800980a:	2500      	movs	r5, #0
 800980c:	4628      	mov	r0, r5
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	b118      	cbz	r0, 800981a <_fflush_r+0x1a>
 8009812:	6a03      	ldr	r3, [r0, #32]
 8009814:	b90b      	cbnz	r3, 800981a <_fflush_r+0x1a>
 8009816:	f7fd ffcd 	bl	80077b4 <__sinit>
 800981a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0f3      	beq.n	800980a <_fflush_r+0xa>
 8009822:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009824:	07d0      	lsls	r0, r2, #31
 8009826:	d404      	bmi.n	8009832 <_fflush_r+0x32>
 8009828:	0599      	lsls	r1, r3, #22
 800982a:	d402      	bmi.n	8009832 <_fflush_r+0x32>
 800982c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800982e:	f7fe f9f2 	bl	8007c16 <__retarget_lock_acquire_recursive>
 8009832:	4628      	mov	r0, r5
 8009834:	4621      	mov	r1, r4
 8009836:	f7ff ff5f 	bl	80096f8 <__sflush_r>
 800983a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800983c:	07da      	lsls	r2, r3, #31
 800983e:	4605      	mov	r5, r0
 8009840:	d4e4      	bmi.n	800980c <_fflush_r+0xc>
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	059b      	lsls	r3, r3, #22
 8009846:	d4e1      	bmi.n	800980c <_fflush_r+0xc>
 8009848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800984a:	f7fe f9e5 	bl	8007c18 <__retarget_lock_release_recursive>
 800984e:	e7dd      	b.n	800980c <_fflush_r+0xc>

08009850 <__swhatbuf_r>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	460c      	mov	r4, r1
 8009854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009858:	2900      	cmp	r1, #0
 800985a:	b096      	sub	sp, #88	@ 0x58
 800985c:	4615      	mov	r5, r2
 800985e:	461e      	mov	r6, r3
 8009860:	da0d      	bge.n	800987e <__swhatbuf_r+0x2e>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009868:	f04f 0100 	mov.w	r1, #0
 800986c:	bf14      	ite	ne
 800986e:	2340      	movne	r3, #64	@ 0x40
 8009870:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009874:	2000      	movs	r0, #0
 8009876:	6031      	str	r1, [r6, #0]
 8009878:	602b      	str	r3, [r5, #0]
 800987a:	b016      	add	sp, #88	@ 0x58
 800987c:	bd70      	pop	{r4, r5, r6, pc}
 800987e:	466a      	mov	r2, sp
 8009880:	f000 f862 	bl	8009948 <_fstat_r>
 8009884:	2800      	cmp	r0, #0
 8009886:	dbec      	blt.n	8009862 <__swhatbuf_r+0x12>
 8009888:	9901      	ldr	r1, [sp, #4]
 800988a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800988e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009892:	4259      	negs	r1, r3
 8009894:	4159      	adcs	r1, r3
 8009896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800989a:	e7eb      	b.n	8009874 <__swhatbuf_r+0x24>

0800989c <__smakebuf_r>:
 800989c:	898b      	ldrh	r3, [r1, #12]
 800989e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098a0:	079d      	lsls	r5, r3, #30
 80098a2:	4606      	mov	r6, r0
 80098a4:	460c      	mov	r4, r1
 80098a6:	d507      	bpl.n	80098b8 <__smakebuf_r+0x1c>
 80098a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	6123      	str	r3, [r4, #16]
 80098b0:	2301      	movs	r3, #1
 80098b2:	6163      	str	r3, [r4, #20]
 80098b4:	b003      	add	sp, #12
 80098b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098b8:	ab01      	add	r3, sp, #4
 80098ba:	466a      	mov	r2, sp
 80098bc:	f7ff ffc8 	bl	8009850 <__swhatbuf_r>
 80098c0:	9f00      	ldr	r7, [sp, #0]
 80098c2:	4605      	mov	r5, r0
 80098c4:	4639      	mov	r1, r7
 80098c6:	4630      	mov	r0, r6
 80098c8:	f7ff f876 	bl	80089b8 <_malloc_r>
 80098cc:	b948      	cbnz	r0, 80098e2 <__smakebuf_r+0x46>
 80098ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d2:	059a      	lsls	r2, r3, #22
 80098d4:	d4ee      	bmi.n	80098b4 <__smakebuf_r+0x18>
 80098d6:	f023 0303 	bic.w	r3, r3, #3
 80098da:	f043 0302 	orr.w	r3, r3, #2
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	e7e2      	b.n	80098a8 <__smakebuf_r+0xc>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	6020      	str	r0, [r4, #0]
 80098e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ea:	81a3      	strh	r3, [r4, #12]
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098f2:	b15b      	cbz	r3, 800990c <__smakebuf_r+0x70>
 80098f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 f837 	bl	800996c <_isatty_r>
 80098fe:	b128      	cbz	r0, 800990c <__smakebuf_r+0x70>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f023 0303 	bic.w	r3, r3, #3
 8009906:	f043 0301 	orr.w	r3, r3, #1
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	431d      	orrs	r5, r3
 8009910:	81a5      	strh	r5, [r4, #12]
 8009912:	e7cf      	b.n	80098b4 <__smakebuf_r+0x18>

08009914 <memmove>:
 8009914:	4288      	cmp	r0, r1
 8009916:	b510      	push	{r4, lr}
 8009918:	eb01 0402 	add.w	r4, r1, r2
 800991c:	d902      	bls.n	8009924 <memmove+0x10>
 800991e:	4284      	cmp	r4, r0
 8009920:	4623      	mov	r3, r4
 8009922:	d807      	bhi.n	8009934 <memmove+0x20>
 8009924:	1e43      	subs	r3, r0, #1
 8009926:	42a1      	cmp	r1, r4
 8009928:	d008      	beq.n	800993c <memmove+0x28>
 800992a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800992e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009932:	e7f8      	b.n	8009926 <memmove+0x12>
 8009934:	4402      	add	r2, r0
 8009936:	4601      	mov	r1, r0
 8009938:	428a      	cmp	r2, r1
 800993a:	d100      	bne.n	800993e <memmove+0x2a>
 800993c:	bd10      	pop	{r4, pc}
 800993e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009946:	e7f7      	b.n	8009938 <memmove+0x24>

08009948 <_fstat_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	@ (8009968 <_fstat_r+0x20>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	4611      	mov	r1, r2
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	f7f8 fab3 	bl	8001ec0 <_fstat>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d102      	bne.n	8009964 <_fstat_r+0x1c>
 800995e:	682b      	ldr	r3, [r5, #0]
 8009960:	b103      	cbz	r3, 8009964 <_fstat_r+0x1c>
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	bf00      	nop
 8009968:	20000938 	.word	0x20000938

0800996c <_isatty_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d06      	ldr	r5, [pc, #24]	@ (8009988 <_isatty_r+0x1c>)
 8009970:	2300      	movs	r3, #0
 8009972:	4604      	mov	r4, r0
 8009974:	4608      	mov	r0, r1
 8009976:	602b      	str	r3, [r5, #0]
 8009978:	f7f8 fab2 	bl	8001ee0 <_isatty>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d102      	bne.n	8009986 <_isatty_r+0x1a>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	b103      	cbz	r3, 8009986 <_isatty_r+0x1a>
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	20000938 	.word	0x20000938

0800998c <_sbrk_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d06      	ldr	r5, [pc, #24]	@ (80099a8 <_sbrk_r+0x1c>)
 8009990:	2300      	movs	r3, #0
 8009992:	4604      	mov	r4, r0
 8009994:	4608      	mov	r0, r1
 8009996:	602b      	str	r3, [r5, #0]
 8009998:	f7f8 faba 	bl	8001f10 <_sbrk>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_sbrk_r+0x1a>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_sbrk_r+0x1a>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	20000938 	.word	0x20000938

080099ac <memcpy>:
 80099ac:	440a      	add	r2, r1
 80099ae:	4291      	cmp	r1, r2
 80099b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099b4:	d100      	bne.n	80099b8 <memcpy+0xc>
 80099b6:	4770      	bx	lr
 80099b8:	b510      	push	{r4, lr}
 80099ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099c2:	4291      	cmp	r1, r2
 80099c4:	d1f9      	bne.n	80099ba <memcpy+0xe>
 80099c6:	bd10      	pop	{r4, pc}

080099c8 <__assert_func>:
 80099c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ca:	4614      	mov	r4, r2
 80099cc:	461a      	mov	r2, r3
 80099ce:	4b09      	ldr	r3, [pc, #36]	@ (80099f4 <__assert_func+0x2c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4605      	mov	r5, r0
 80099d4:	68d8      	ldr	r0, [r3, #12]
 80099d6:	b14c      	cbz	r4, 80099ec <__assert_func+0x24>
 80099d8:	4b07      	ldr	r3, [pc, #28]	@ (80099f8 <__assert_func+0x30>)
 80099da:	9100      	str	r1, [sp, #0]
 80099dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099e0:	4906      	ldr	r1, [pc, #24]	@ (80099fc <__assert_func+0x34>)
 80099e2:	462b      	mov	r3, r5
 80099e4:	f000 f870 	bl	8009ac8 <fiprintf>
 80099e8:	f000 f880 	bl	8009aec <abort>
 80099ec:	4b04      	ldr	r3, [pc, #16]	@ (8009a00 <__assert_func+0x38>)
 80099ee:	461c      	mov	r4, r3
 80099f0:	e7f3      	b.n	80099da <__assert_func+0x12>
 80099f2:	bf00      	nop
 80099f4:	20000018 	.word	0x20000018
 80099f8:	0800a56d 	.word	0x0800a56d
 80099fc:	0800a57a 	.word	0x0800a57a
 8009a00:	0800a5a8 	.word	0x0800a5a8

08009a04 <_calloc_r>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	fba1 5402 	umull	r5, r4, r1, r2
 8009a0a:	b934      	cbnz	r4, 8009a1a <_calloc_r+0x16>
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	f7fe ffd3 	bl	80089b8 <_malloc_r>
 8009a12:	4606      	mov	r6, r0
 8009a14:	b928      	cbnz	r0, 8009a22 <_calloc_r+0x1e>
 8009a16:	4630      	mov	r0, r6
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
 8009a1a:	220c      	movs	r2, #12
 8009a1c:	6002      	str	r2, [r0, #0]
 8009a1e:	2600      	movs	r6, #0
 8009a20:	e7f9      	b.n	8009a16 <_calloc_r+0x12>
 8009a22:	462a      	mov	r2, r5
 8009a24:	4621      	mov	r1, r4
 8009a26:	f7fe f879 	bl	8007b1c <memset>
 8009a2a:	e7f4      	b.n	8009a16 <_calloc_r+0x12>

08009a2c <__ascii_mbtowc>:
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	b901      	cbnz	r1, 8009a32 <__ascii_mbtowc+0x6>
 8009a30:	a901      	add	r1, sp, #4
 8009a32:	b142      	cbz	r2, 8009a46 <__ascii_mbtowc+0x1a>
 8009a34:	b14b      	cbz	r3, 8009a4a <__ascii_mbtowc+0x1e>
 8009a36:	7813      	ldrb	r3, [r2, #0]
 8009a38:	600b      	str	r3, [r1, #0]
 8009a3a:	7812      	ldrb	r2, [r2, #0]
 8009a3c:	1e10      	subs	r0, r2, #0
 8009a3e:	bf18      	it	ne
 8009a40:	2001      	movne	r0, #1
 8009a42:	b002      	add	sp, #8
 8009a44:	4770      	bx	lr
 8009a46:	4610      	mov	r0, r2
 8009a48:	e7fb      	b.n	8009a42 <__ascii_mbtowc+0x16>
 8009a4a:	f06f 0001 	mvn.w	r0, #1
 8009a4e:	e7f8      	b.n	8009a42 <__ascii_mbtowc+0x16>

08009a50 <_realloc_r>:
 8009a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a54:	4607      	mov	r7, r0
 8009a56:	4614      	mov	r4, r2
 8009a58:	460d      	mov	r5, r1
 8009a5a:	b921      	cbnz	r1, 8009a66 <_realloc_r+0x16>
 8009a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a60:	4611      	mov	r1, r2
 8009a62:	f7fe bfa9 	b.w	80089b8 <_malloc_r>
 8009a66:	b92a      	cbnz	r2, 8009a74 <_realloc_r+0x24>
 8009a68:	f7fe ff32 	bl	80088d0 <_free_r>
 8009a6c:	4625      	mov	r5, r4
 8009a6e:	4628      	mov	r0, r5
 8009a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a74:	f000 f841 	bl	8009afa <_malloc_usable_size_r>
 8009a78:	4284      	cmp	r4, r0
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	d802      	bhi.n	8009a84 <_realloc_r+0x34>
 8009a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a82:	d8f4      	bhi.n	8009a6e <_realloc_r+0x1e>
 8009a84:	4621      	mov	r1, r4
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7fe ff96 	bl	80089b8 <_malloc_r>
 8009a8c:	4680      	mov	r8, r0
 8009a8e:	b908      	cbnz	r0, 8009a94 <_realloc_r+0x44>
 8009a90:	4645      	mov	r5, r8
 8009a92:	e7ec      	b.n	8009a6e <_realloc_r+0x1e>
 8009a94:	42b4      	cmp	r4, r6
 8009a96:	4622      	mov	r2, r4
 8009a98:	4629      	mov	r1, r5
 8009a9a:	bf28      	it	cs
 8009a9c:	4632      	movcs	r2, r6
 8009a9e:	f7ff ff85 	bl	80099ac <memcpy>
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f7fe ff13 	bl	80088d0 <_free_r>
 8009aaa:	e7f1      	b.n	8009a90 <_realloc_r+0x40>

08009aac <__ascii_wctomb>:
 8009aac:	4603      	mov	r3, r0
 8009aae:	4608      	mov	r0, r1
 8009ab0:	b141      	cbz	r1, 8009ac4 <__ascii_wctomb+0x18>
 8009ab2:	2aff      	cmp	r2, #255	@ 0xff
 8009ab4:	d904      	bls.n	8009ac0 <__ascii_wctomb+0x14>
 8009ab6:	228a      	movs	r2, #138	@ 0x8a
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	4770      	bx	lr
 8009ac0:	700a      	strb	r2, [r1, #0]
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	4770      	bx	lr
	...

08009ac8 <fiprintf>:
 8009ac8:	b40e      	push	{r1, r2, r3}
 8009aca:	b503      	push	{r0, r1, lr}
 8009acc:	4601      	mov	r1, r0
 8009ace:	ab03      	add	r3, sp, #12
 8009ad0:	4805      	ldr	r0, [pc, #20]	@ (8009ae8 <fiprintf+0x20>)
 8009ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad6:	6800      	ldr	r0, [r0, #0]
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	f7ff fcf5 	bl	80094c8 <_vfiprintf_r>
 8009ade:	b002      	add	sp, #8
 8009ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae4:	b003      	add	sp, #12
 8009ae6:	4770      	bx	lr
 8009ae8:	20000018 	.word	0x20000018

08009aec <abort>:
 8009aec:	b508      	push	{r3, lr}
 8009aee:	2006      	movs	r0, #6
 8009af0:	f000 f834 	bl	8009b5c <raise>
 8009af4:	2001      	movs	r0, #1
 8009af6:	f7f8 f993 	bl	8001e20 <_exit>

08009afa <_malloc_usable_size_r>:
 8009afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009afe:	1f18      	subs	r0, r3, #4
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	bfbc      	itt	lt
 8009b04:	580b      	ldrlt	r3, [r1, r0]
 8009b06:	18c0      	addlt	r0, r0, r3
 8009b08:	4770      	bx	lr

08009b0a <_raise_r>:
 8009b0a:	291f      	cmp	r1, #31
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4605      	mov	r5, r0
 8009b10:	460c      	mov	r4, r1
 8009b12:	d904      	bls.n	8009b1e <_raise_r+0x14>
 8009b14:	2316      	movs	r3, #22
 8009b16:	6003      	str	r3, [r0, #0]
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	bd38      	pop	{r3, r4, r5, pc}
 8009b1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b20:	b112      	cbz	r2, 8009b28 <_raise_r+0x1e>
 8009b22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b26:	b94b      	cbnz	r3, 8009b3c <_raise_r+0x32>
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f000 f831 	bl	8009b90 <_getpid_r>
 8009b2e:	4622      	mov	r2, r4
 8009b30:	4601      	mov	r1, r0
 8009b32:	4628      	mov	r0, r5
 8009b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b38:	f000 b818 	b.w	8009b6c <_kill_r>
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d00a      	beq.n	8009b56 <_raise_r+0x4c>
 8009b40:	1c59      	adds	r1, r3, #1
 8009b42:	d103      	bne.n	8009b4c <_raise_r+0x42>
 8009b44:	2316      	movs	r3, #22
 8009b46:	6003      	str	r3, [r0, #0]
 8009b48:	2001      	movs	r0, #1
 8009b4a:	e7e7      	b.n	8009b1c <_raise_r+0x12>
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b52:	4620      	mov	r0, r4
 8009b54:	4798      	blx	r3
 8009b56:	2000      	movs	r0, #0
 8009b58:	e7e0      	b.n	8009b1c <_raise_r+0x12>
	...

08009b5c <raise>:
 8009b5c:	4b02      	ldr	r3, [pc, #8]	@ (8009b68 <raise+0xc>)
 8009b5e:	4601      	mov	r1, r0
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	f7ff bfd2 	b.w	8009b0a <_raise_r>
 8009b66:	bf00      	nop
 8009b68:	20000018 	.word	0x20000018

08009b6c <_kill_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4d07      	ldr	r5, [pc, #28]	@ (8009b8c <_kill_r+0x20>)
 8009b70:	2300      	movs	r3, #0
 8009b72:	4604      	mov	r4, r0
 8009b74:	4608      	mov	r0, r1
 8009b76:	4611      	mov	r1, r2
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f7f8 f941 	bl	8001e00 <_kill>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d102      	bne.n	8009b88 <_kill_r+0x1c>
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	b103      	cbz	r3, 8009b88 <_kill_r+0x1c>
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000938 	.word	0x20000938

08009b90 <_getpid_r>:
 8009b90:	f7f8 b92e 	b.w	8001df0 <_getpid>

08009b94 <_init>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_fini>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr
