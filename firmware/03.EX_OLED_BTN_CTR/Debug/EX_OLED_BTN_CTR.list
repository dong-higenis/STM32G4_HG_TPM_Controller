
EX_OLED_BTN_CTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000259c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08002774  08002774  00003774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f2c  08002f2c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f2c  08002f2c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f2c  08002f2c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f2c  08002f2c  00003f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f30  08002f30  00003f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f34  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002f40  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002f40  0000409c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007827  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e1  00000000  00000000  0000b863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0000d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c573  00000000  00000000  0000d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009006  00000000  00000000  00029dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b20f7  00000000  00000000  00032dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000e4ed0  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000005f7  00000000  00000000  000e4f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f1c  00000000  00000000  000e550c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e7428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800275c 	.word	0x0800275c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800275c 	.word	0x0800275c

08000218 <ButtonLedTask>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void ButtonLedTask(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	// 버튼1 → LED1

	// btn flag 변수로 OLED 화면 갱신을 트리거 합니다.


	if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET)
 800021c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000224:	f001 f90e 	bl	8001444 <HAL_GPIO_ReadPin>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d109      	bne.n	8000242 <ButtonLedTask+0x2a>
	{
		btn1_flag = 1;
 800022e:	4b17      	ldr	r3, [pc, #92]	@ (800028c <ButtonLedTask+0x74>)
 8000230:	2201      	movs	r2, #1
 8000232:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800023a:	4815      	ldr	r0, [pc, #84]	@ (8000290 <ButtonLedTask+0x78>)
 800023c:	f001 f91a 	bl	8001474 <HAL_GPIO_WritePin>
 8000240:	e008      	b.n	8000254 <ButtonLedTask+0x3c>
	}
	else
	{
		btn1_flag = 0;
 8000242:	4b12      	ldr	r3, [pc, #72]	@ (800028c <ButtonLedTask+0x74>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800024e:	4810      	ldr	r0, [pc, #64]	@ (8000290 <ButtonLedTask+0x78>)
 8000250:	f001 f910 	bl	8001474 <HAL_GPIO_WritePin>
	}

	// 버튼2 → LED2
	if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET)
 8000254:	2101      	movs	r1, #1
 8000256:	480f      	ldr	r0, [pc, #60]	@ (8000294 <ButtonLedTask+0x7c>)
 8000258:	f001 f8f4 	bl	8001444 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d109      	bne.n	8000276 <ButtonLedTask+0x5e>
	{
		btn2_flag = 1;
 8000262:	4b0d      	ldr	r3, [pc, #52]	@ (8000298 <ButtonLedTask+0x80>)
 8000264:	2201      	movs	r2, #1
 8000266:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LINK_LED_GPIO_Port, LINK_LED_Pin, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800026e:	4808      	ldr	r0, [pc, #32]	@ (8000290 <ButtonLedTask+0x78>)
 8000270:	f001 f900 	bl	8001474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LINK_LED_GPIO_Port, LINK_LED_Pin, GPIO_PIN_SET);
	}



}
 8000274:	e008      	b.n	8000288 <ButtonLedTask+0x70>
		btn2_flag = 0;
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <ButtonLedTask+0x80>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LINK_LED_GPIO_Port, LINK_LED_Pin, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000282:	4803      	ldr	r0, [pc, #12]	@ (8000290 <ButtonLedTask+0x78>)
 8000284:	f001 f8f6 	bl	8001474 <HAL_GPIO_WritePin>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000008c 	.word	0x2000008c
 8000290:	48000800 	.word	0x48000800
 8000294:	48000400 	.word	0x48000400
 8000298:	20000090 	.word	0x20000090

0800029c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002a2:	f000 fdd6 	bl	8000e52 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002a6:	f000 f8f1 	bl	800048c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002aa:	f000 f977 	bl	800059c <MX_GPIO_Init>
	MX_SPI3_Init();
 80002ae:	f000 f937 	bl	8000520 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	// 가장 작은 폰트로 첫 글자만
	OLED_init(); // oled 초기화
 80002b2:	f000 fa97 	bl	80007e4 <OLED_init>

	OLED_fill(0); // oled 전체를 검은색으로 칠함
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fb6e 	bl	8000998 <OLED_fill>

	// (x좌표, y좌표, String, font, 밝기)
	oled_drawString(20, 0, "Button List", &font_07x10, 15); // 화면 위쪽
 80002bc:	230f      	movs	r3, #15
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	4b68      	ldr	r3, [pc, #416]	@ (8000464 <main+0x1c8>)
 80002c2:	4a69      	ldr	r2, [pc, #420]	@ (8000468 <main+0x1cc>)
 80002c4:	2100      	movs	r1, #0
 80002c6:	2014      	movs	r0, #20
 80002c8:	f000 fcba 	bl	8000c40 <oled_drawString>
	oled_drawString(0, 20, "Button1", &font_07x10, 15); // 화면 왼쪽
 80002cc:	230f      	movs	r3, #15
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	4b64      	ldr	r3, [pc, #400]	@ (8000464 <main+0x1c8>)
 80002d2:	4a66      	ldr	r2, [pc, #408]	@ (800046c <main+0x1d0>)
 80002d4:	2114      	movs	r1, #20
 80002d6:	2000      	movs	r0, #0
 80002d8:	f000 fcb2 	bl	8000c40 <oled_drawString>
	oled_drawString(60, 20, "OFF", &font_07x10, 1); // 화면 중앙, OFF는 어둡게...
 80002dc:	2301      	movs	r3, #1
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	4b60      	ldr	r3, [pc, #384]	@ (8000464 <main+0x1c8>)
 80002e2:	4a63      	ldr	r2, [pc, #396]	@ (8000470 <main+0x1d4>)
 80002e4:	2114      	movs	r1, #20
 80002e6:	203c      	movs	r0, #60	@ 0x3c
 80002e8:	f000 fcaa 	bl	8000c40 <oled_drawString>
	oled_drawString(0, 40, "Button2", &font_07x10, 15); // Button1 아래
 80002ec:	230f      	movs	r3, #15
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	4b5c      	ldr	r3, [pc, #368]	@ (8000464 <main+0x1c8>)
 80002f2:	4a60      	ldr	r2, [pc, #384]	@ (8000474 <main+0x1d8>)
 80002f4:	2128      	movs	r1, #40	@ 0x28
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 fca2 	bl	8000c40 <oled_drawString>
	oled_drawString(60, 40, "OFF", &font_07x10, 1);
 80002fc:	2301      	movs	r3, #1
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	4b58      	ldr	r3, [pc, #352]	@ (8000464 <main+0x1c8>)
 8000302:	4a5b      	ldr	r2, [pc, #364]	@ (8000470 <main+0x1d4>)
 8000304:	2128      	movs	r1, #40	@ 0x28
 8000306:	203c      	movs	r0, #60	@ 0x3c
 8000308:	f000 fc9a 	bl	8000c40 <oled_drawString>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// 버튼을 무한정 감시합니다!
		ButtonLedTask();
 800030c:	f7ff ff84 	bl	8000218 <ButtonLedTask>

		// 버튼이 눌렸다면...
		if (btn1_flag != 0 || btn2_flag != 0)
 8000310:	4b59      	ldr	r3, [pc, #356]	@ (8000478 <main+0x1dc>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d103      	bne.n	8000320 <main+0x84>
 8000318:	4b58      	ldr	r3, [pc, #352]	@ (800047c <main+0x1e0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d07e      	beq.n	800041e <main+0x182>
		{
			// 둘다 눌린 상황이라면..
			if (btn1_flag == 1 && btn2_flag == 1)
 8000320:	4b55      	ldr	r3, [pc, #340]	@ (8000478 <main+0x1dc>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d12a      	bne.n	800037e <main+0xe2>
 8000328:	4b54      	ldr	r3, [pc, #336]	@ (800047c <main+0x1e0>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d126      	bne.n	800037e <main+0xe2>
			{
				oled_drawString(60, 20, "ON ", &font_07x10, 15); // ON 표시는 밝게!
 8000330:	230f      	movs	r3, #15
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	4b4b      	ldr	r3, [pc, #300]	@ (8000464 <main+0x1c8>)
 8000336:	4a52      	ldr	r2, [pc, #328]	@ (8000480 <main+0x1e4>)
 8000338:	2114      	movs	r1, #20
 800033a:	203c      	movs	r0, #60	@ 0x3c
 800033c:	f000 fc80 	bl	8000c40 <oled_drawString>
				oled_drawString(60, 40, "ON ", &font_07x10, 15);
 8000340:	230f      	movs	r3, #15
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	4b47      	ldr	r3, [pc, #284]	@ (8000464 <main+0x1c8>)
 8000346:	4a4e      	ldr	r2, [pc, #312]	@ (8000480 <main+0x1e4>)
 8000348:	2128      	movs	r1, #40	@ 0x28
 800034a:	203c      	movs	r0, #60	@ 0x3c
 800034c:	f000 fc78 	bl	8000c40 <oled_drawString>
				oled_drawString(80, 20, "LED1", &font_07x10, 15);
 8000350:	230f      	movs	r3, #15
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	4b43      	ldr	r3, [pc, #268]	@ (8000464 <main+0x1c8>)
 8000356:	4a4b      	ldr	r2, [pc, #300]	@ (8000484 <main+0x1e8>)
 8000358:	2114      	movs	r1, #20
 800035a:	2050      	movs	r0, #80	@ 0x50
 800035c:	f000 fc70 	bl	8000c40 <oled_drawString>
				oled_drawString(80, 40, "LED2", &font_07x10, 15);
 8000360:	230f      	movs	r3, #15
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	4b3f      	ldr	r3, [pc, #252]	@ (8000464 <main+0x1c8>)
 8000366:	4a48      	ldr	r2, [pc, #288]	@ (8000488 <main+0x1ec>)
 8000368:	2128      	movs	r1, #40	@ 0x28
 800036a:	2050      	movs	r0, #80	@ 0x50
 800036c:	f000 fc68 	bl	8000c40 <oled_drawString>
				btn1_flag = 0;
 8000370:	4b41      	ldr	r3, [pc, #260]	@ (8000478 <main+0x1dc>)
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
				btn2_flag = 0;
 8000376:	4b41      	ldr	r3, [pc, #260]	@ (800047c <main+0x1e0>)
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
			if (btn1_flag == 1 && btn2_flag == 1)
 800037c:	e070      	b.n	8000460 <main+0x1c4>

			}
			// 버튼 1번만 눌렸다면..
			else if (btn1_flag == 1)
 800037e:	4b3e      	ldr	r3, [pc, #248]	@ (8000478 <main+0x1dc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d123      	bne.n	80003ce <main+0x132>
			{

				oled_drawString(60, 20, "ON ", &font_07x10, 15);
 8000386:	230f      	movs	r3, #15
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	4b36      	ldr	r3, [pc, #216]	@ (8000464 <main+0x1c8>)
 800038c:	4a3c      	ldr	r2, [pc, #240]	@ (8000480 <main+0x1e4>)
 800038e:	2114      	movs	r1, #20
 8000390:	203c      	movs	r0, #60	@ 0x3c
 8000392:	f000 fc55 	bl	8000c40 <oled_drawString>
				oled_drawString(60, 40, "OFF", &font_07x10, 1);
 8000396:	2301      	movs	r3, #1
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	4b32      	ldr	r3, [pc, #200]	@ (8000464 <main+0x1c8>)
 800039c:	4a34      	ldr	r2, [pc, #208]	@ (8000470 <main+0x1d4>)
 800039e:	2128      	movs	r1, #40	@ 0x28
 80003a0:	203c      	movs	r0, #60	@ 0x3c
 80003a2:	f000 fc4d 	bl	8000c40 <oled_drawString>
				oled_drawString(80, 20, "LED1", &font_07x10, 15);
 80003a6:	230f      	movs	r3, #15
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000464 <main+0x1c8>)
 80003ac:	4a35      	ldr	r2, [pc, #212]	@ (8000484 <main+0x1e8>)
 80003ae:	2114      	movs	r1, #20
 80003b0:	2050      	movs	r0, #80	@ 0x50
 80003b2:	f000 fc45 	bl	8000c40 <oled_drawString>
				oled_drawString(80, 40, "LED2", &font_07x10, 0);
 80003b6:	2300      	movs	r3, #0
 80003b8:	9300      	str	r3, [sp, #0]
 80003ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000464 <main+0x1c8>)
 80003bc:	4a32      	ldr	r2, [pc, #200]	@ (8000488 <main+0x1ec>)
 80003be:	2128      	movs	r1, #40	@ 0x28
 80003c0:	2050      	movs	r0, #80	@ 0x50
 80003c2:	f000 fc3d 	bl	8000c40 <oled_drawString>
				btn1_flag = 0;
 80003c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000478 <main+0x1dc>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
			if (btn1_flag == 1 && btn2_flag == 1)
 80003cc:	e048      	b.n	8000460 <main+0x1c4>
			}
			// 버튼 2번만 눌렸다면..
			else if (btn2_flag == 1)
 80003ce:	4b2b      	ldr	r3, [pc, #172]	@ (800047c <main+0x1e0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d144      	bne.n	8000460 <main+0x1c4>
			{

				oled_drawString(60, 20, "OFF", &font_07x10, 1);
 80003d6:	2301      	movs	r3, #1
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <main+0x1c8>)
 80003dc:	4a24      	ldr	r2, [pc, #144]	@ (8000470 <main+0x1d4>)
 80003de:	2114      	movs	r1, #20
 80003e0:	203c      	movs	r0, #60	@ 0x3c
 80003e2:	f000 fc2d 	bl	8000c40 <oled_drawString>
				oled_drawString(60, 40, "ON ", &font_07x10, 15);
 80003e6:	230f      	movs	r3, #15
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <main+0x1c8>)
 80003ec:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <main+0x1e4>)
 80003ee:	2128      	movs	r1, #40	@ 0x28
 80003f0:	203c      	movs	r0, #60	@ 0x3c
 80003f2:	f000 fc25 	bl	8000c40 <oled_drawString>
				oled_drawString(80, 20, "LED1", &font_07x10, 0);
 80003f6:	2300      	movs	r3, #0
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <main+0x1c8>)
 80003fc:	4a21      	ldr	r2, [pc, #132]	@ (8000484 <main+0x1e8>)
 80003fe:	2114      	movs	r1, #20
 8000400:	2050      	movs	r0, #80	@ 0x50
 8000402:	f000 fc1d 	bl	8000c40 <oled_drawString>
				oled_drawString(80, 40, "LED2", &font_07x10, 15);
 8000406:	230f      	movs	r3, #15
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <main+0x1c8>)
 800040c:	4a1e      	ldr	r2, [pc, #120]	@ (8000488 <main+0x1ec>)
 800040e:	2128      	movs	r1, #40	@ 0x28
 8000410:	2050      	movs	r0, #80	@ 0x50
 8000412:	f000 fc15 	bl	8000c40 <oled_drawString>
				btn2_flag = 0;
 8000416:	4b19      	ldr	r3, [pc, #100]	@ (800047c <main+0x1e0>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
			if (btn1_flag == 1 && btn2_flag == 1)
 800041c:	e020      	b.n	8000460 <main+0x1c4>
			}
		}
		// 아무것도 안눌렸다면..
		else
		{
			oled_drawString(60, 20, "OFF", &font_07x10, 1);
 800041e:	2301      	movs	r3, #1
 8000420:	9300      	str	r3, [sp, #0]
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <main+0x1c8>)
 8000424:	4a12      	ldr	r2, [pc, #72]	@ (8000470 <main+0x1d4>)
 8000426:	2114      	movs	r1, #20
 8000428:	203c      	movs	r0, #60	@ 0x3c
 800042a:	f000 fc09 	bl	8000c40 <oled_drawString>
			oled_drawString(60, 40, "OFF", &font_07x10, 1);
 800042e:	2301      	movs	r3, #1
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <main+0x1c8>)
 8000434:	4a0e      	ldr	r2, [pc, #56]	@ (8000470 <main+0x1d4>)
 8000436:	2128      	movs	r1, #40	@ 0x28
 8000438:	203c      	movs	r0, #60	@ 0x3c
 800043a:	f000 fc01 	bl	8000c40 <oled_drawString>
			oled_drawString(80, 20, "LED1", &font_07x10, 0);
 800043e:	2300      	movs	r3, #0
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <main+0x1c8>)
 8000444:	4a0f      	ldr	r2, [pc, #60]	@ (8000484 <main+0x1e8>)
 8000446:	2114      	movs	r1, #20
 8000448:	2050      	movs	r0, #80	@ 0x50
 800044a:	f000 fbf9 	bl	8000c40 <oled_drawString>
			oled_drawString(80, 40, "LED2", &font_07x10, 0);
 800044e:	2300      	movs	r3, #0
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	4b04      	ldr	r3, [pc, #16]	@ (8000464 <main+0x1c8>)
 8000454:	4a0c      	ldr	r2, [pc, #48]	@ (8000488 <main+0x1ec>)
 8000456:	2128      	movs	r1, #40	@ 0x28
 8000458:	2050      	movs	r0, #80	@ 0x50
 800045a:	f000 fbf1 	bl	8000c40 <oled_drawString>
 800045e:	e755      	b.n	800030c <main+0x70>
			if (btn1_flag == 1 && btn2_flag == 1)
 8000460:	bf00      	nop
		ButtonLedTask();
 8000462:	e753      	b.n	800030c <main+0x70>
 8000464:	08002f14 	.word	0x08002f14
 8000468:	08002774 	.word	0x08002774
 800046c:	08002780 	.word	0x08002780
 8000470:	08002788 	.word	0x08002788
 8000474:	0800278c 	.word	0x0800278c
 8000478:	2000008c 	.word	0x2000008c
 800047c:	20000090 	.word	0x20000090
 8000480:	08002794 	.word	0x08002794
 8000484:	08002798 	.word	0x08002798
 8000488:	080027a0 	.word	0x080027a0

0800048c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b094      	sub	sp, #80	@ 0x50
 8000490:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	2238      	movs	r2, #56	@ 0x38
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f002 f932 	bl	8002704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 fff8 	bl	80014a4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b4:	2301      	movs	r3, #1
 80004b6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004bc:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	2302      	movs	r3, #2
 80004c0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c2:	2303      	movs	r3, #3
 80004c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004c6:	2301      	movs	r3, #1
 80004c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 40;
 80004ca:	2328      	movs	r3, #40	@ 0x28
 80004cc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ce:	2302      	movs	r3, #2
 80004d0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004d2:	2302      	movs	r3, #2
 80004d4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 f894 	bl	800160c <HAL_RCC_OscConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x62>
		Error_Handler();
 80004ea:	f000 f8f7 	bl	80006dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004ee:	230f      	movs	r3, #15
 80004f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f2:	2303      	movs	r3, #3
 80004f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2104      	movs	r1, #4
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fb92 	bl	8001c30 <HAL_RCC_ClockConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x8a>
		Error_Handler();
 8000512:	f000 f8e3 	bl	80006dc <Error_Handler>
	}
}
 8000516:	bf00      	nop
 8000518:	3750      	adds	r7, #80	@ 0x50
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000524:	4b1b      	ldr	r3, [pc, #108]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000526:	4a1c      	ldr	r2, [pc, #112]	@ (8000598 <MX_SPI3_Init+0x78>)
 8000528:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800052a:	4b1a      	ldr	r3, [pc, #104]	@ (8000594 <MX_SPI3_Init+0x74>)
 800052c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000530:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000532:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000538:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <MX_SPI3_Init+0x74>)
 800053a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800053e:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000540:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000546:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800054c:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <MX_SPI3_Init+0x74>)
 800054e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000552:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000556:	2228      	movs	r2, #40	@ 0x28
 8000558:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <MX_SPI3_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000560:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <MX_SPI3_Init+0x74>)
 800056e:	2207      	movs	r2, #7
 8000570:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000572:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <MX_SPI3_Init+0x74>)
 800057a:	2208      	movs	r2, #8
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 800057e:	4805      	ldr	r0, [pc, #20]	@ (8000594 <MX_SPI3_Init+0x74>)
 8000580:	f001 fd3a 	bl	8001ff8 <HAL_SPI_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_SPI3_Init+0x6e>
		Error_Handler();
 800058a:	f000 f8a7 	bl	80006dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000028 	.word	0x20000028
 8000598:	40003c00 	.word	0x40003c00

0800059c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	4b47      	ldr	r3, [pc, #284]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a46      	ldr	r2, [pc, #280]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b44      	ldr	r3, [pc, #272]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005ca:	4b41      	ldr	r3, [pc, #260]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005d0:	f043 0320 	orr.w	r3, r3, #32
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b3e      	ldr	r3, [pc, #248]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b3b      	ldr	r3, [pc, #236]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a3a      	ldr	r2, [pc, #232]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b38      	ldr	r3, [pc, #224]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b35      	ldr	r3, [pc, #212]	@ (80006d0 <MX_GPIO_Init+0x134>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a34      	ldr	r2, [pc, #208]	@ (80006d0 <MX_GPIO_Init+0x134>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <MX_GPIO_Init+0x134>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LINK_LED_Pin | STATUS_LED_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000618:	482e      	ldr	r0, [pc, #184]	@ (80006d4 <MX_GPIO_Init+0x138>)
 800061a:	f000 ff2b 	bl	8001474 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED3_Pin | LED4_Pin | LCD_DC_Pin | LCD_CS_Pin,
 800061e:	2200      	movs	r2, #0
 8000620:	f248 1103 	movw	r1, #33027	@ 0x8103
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f000 ff24 	bl	8001474 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LCD_RST_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8000632:	4829      	ldr	r0, [pc, #164]	@ (80006d8 <MX_GPIO_Init+0x13c>)
 8000634:	f000 ff1e 	bl	8001474 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LINK_LED_Pin STATUS_LED_Pin */
	GPIO_InitStruct.Pin = LINK_LED_Pin | STATUS_LED_Pin;
 8000638:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800063c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4820      	ldr	r0, [pc, #128]	@ (80006d4 <MX_GPIO_Init+0x138>)
 8000652:	f000 fd75 	bl	8001140 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED3_Pin LED4_Pin LCD_DC_Pin LCD_CS_Pin */
	GPIO_InitStruct.Pin = LED3_Pin | LED4_Pin | LCD_DC_Pin | LCD_CS_Pin;
 8000656:	f248 1303 	movw	r3, #33027	@ 0x8103
 800065a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f000 fd65 	bl	8001140 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin BTN3_Pin BTN4_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | BTN3_Pin | BTN4_Pin;
 8000676:	2307      	movs	r3, #7
 8000678:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4813      	ldr	r0, [pc, #76]	@ (80006d8 <MX_GPIO_Init+0x13c>)
 800068a:	f000 fd59 	bl	8001140 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LCD_RST_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LCD_RST_Pin;
 800068e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000692:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <MX_GPIO_Init+0x13c>)
 80006a8:	f000 fd4a 	bl	8001140 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN1_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin;
 80006ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f000 fd3c 	bl	8001140 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000800 	.word	0x48000800
 80006d8:	48000400 	.word	0x48000400

080006dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <OLED_write_cmd>:

/* ======== Static 함수들 ======== */

// OLED 명령어 모드!
static void OLED_write_cmd(uint8_t cmd)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  DC_CMD();     // DC핀을 LOW로 설정 (명령어 모드)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fc:	f000 feba 	bl	8001474 <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f000 feb3 	bl	8001474 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);  // SPI로 명령어 전송
 800070e:	1df9      	adds	r1, r7, #7
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	2201      	movs	r2, #1
 8000716:	4807      	ldr	r0, [pc, #28]	@ (8000734 <OLED_write_cmd+0x4c>)
 8000718:	f001 fd19 	bl	800214e <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f000 fea5 	bl	8001474 <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000028 	.word	0x20000028

08000738 <OLED_write_data>:

// OLED 데이터 모드!
static void OLED_write_data(const uint8_t* p, uint16_t len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
  DC_DATA();    // DC핀을 HIGH로 설정 (데이터 모드)
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074e:	f000 fe91 	bl	8001474 <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075c:	f000 fe8a 	bl	8001474 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)p, len, HAL_MAX_DELAY);  // SPI로 데이터 전송
 8000760:	887a      	ldrh	r2, [r7, #2]
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <OLED_write_data+0x4c>)
 800076a:	f001 fcf0 	bl	800214e <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f000 fe7c 	bl	8001474 <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000028 	.word	0x20000028

08000788 <OLED_set_window>:

// 화면의 특정 영역을 선택하는 함수 (그리기 영역 설정)
static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	4604      	mov	r4, r0
 8000790:	4608      	mov	r0, r1
 8000792:	4611      	mov	r1, r2
 8000794:	461a      	mov	r2, r3
 8000796:	4623      	mov	r3, r4
 8000798:	71fb      	strb	r3, [r7, #7]
 800079a:	4603      	mov	r3, r0
 800079c:	71bb      	strb	r3, [r7, #6]
 800079e:	460b      	mov	r3, r1
 80007a0:	717b      	strb	r3, [r7, #5]
 80007a2:	4613      	mov	r3, r2
 80007a4:	713b      	strb	r3, [r7, #4]
  // 열(가로) 범위 설정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 80007a6:	2015      	movs	r0, #21
 80007a8:	f7ff ff9e 	bl	80006e8 <OLED_write_cmd>
  uint8_t col[2] = { col_start, col_end };
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	733b      	strb	r3, [r7, #12]
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffbc 	bl	8000738 <OLED_write_data>

  // 행(세로) 범위 설정
  OLED_write_cmd(OLED_SETROWADDR);
 80007c0:	2075      	movs	r0, #117	@ 0x75
 80007c2:	f7ff ff91 	bl	80006e8 <OLED_write_cmd>
  uint8_t row[2] = { row_start, row_end };
 80007c6:	797b      	ldrb	r3, [r7, #5]
 80007c8:	723b      	strb	r3, [r7, #8]
 80007ca:	793b      	ldrb	r3, [r7, #4]
 80007cc:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2102      	movs	r1, #2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ffaf 	bl	8000738 <OLED_write_data>
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
	...

080007e4 <OLED_init>:

/* ======== Public 함수들 ======== */

/* OLED 디스플레이를 초기화하는 함수 */
void OLED_init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
  // 1단계: 하드웨어 리셋
  RST_L();
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f0:	4867      	ldr	r0, [pc, #412]	@ (8000990 <OLED_init+0x1ac>)
 80007f2:	f000 fe3f 	bl	8001474 <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 LOW로 10ms
 80007f6:	200a      	movs	r0, #10
 80007f8:	f000 fb9c 	bl	8000f34 <HAL_Delay>
  RST_H();
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000802:	4863      	ldr	r0, [pc, #396]	@ (8000990 <OLED_init+0x1ac>)
 8000804:	f000 fe36 	bl	8001474 <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 HIGH로 10ms
 8000808:	200a      	movs	r0, #10
 800080a:	f000 fb93 	bl	8000f34 <HAL_Delay>

  // 2단계: 디스플레이 끄기
  OLED_write_cmd(OLED_DISPLAYOFF);
 800080e:	20ae      	movs	r0, #174	@ 0xae
 8000810:	f7ff ff6a 	bl	80006e8 <OLED_write_cmd>

  // 3단계: 기본 설정들
  OLED_write_cmd(OLED_SETCOMMANDLOCK);  // 명령어 잠금 해제
 8000814:	20fd      	movs	r0, #253	@ 0xfd
 8000816:	f7ff ff67 	bl	80006e8 <OLED_write_cmd>
  d = 0x12;
 800081a:	4b5e      	ldr	r3, [pc, #376]	@ (8000994 <OLED_init+0x1b0>)
 800081c:	2212      	movs	r2, #18
 800081e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000820:	2101      	movs	r1, #1
 8000822:	485c      	ldr	r0, [pc, #368]	@ (8000994 <OLED_init+0x1b0>)
 8000824:	f7ff ff88 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_SETCLOCKDIVIDER); // 클럭 주파수 설정
 8000828:	20b3      	movs	r0, #179	@ 0xb3
 800082a:	f7ff ff5d 	bl	80006e8 <OLED_write_cmd>
  d = 0x91;
 800082e:	4b59      	ldr	r3, [pc, #356]	@ (8000994 <OLED_init+0x1b0>)
 8000830:	2291      	movs	r2, #145	@ 0x91
 8000832:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000834:	2101      	movs	r1, #1
 8000836:	4857      	ldr	r0, [pc, #348]	@ (8000994 <OLED_init+0x1b0>)
 8000838:	f7ff ff7e 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_SETMUXRATIO);     // 화면 높이 설정 (64줄)
 800083c:	20ca      	movs	r0, #202	@ 0xca
 800083e:	f7ff ff53 	bl	80006e8 <OLED_write_cmd>
  d = 0x3F;
 8000842:	4b54      	ldr	r3, [pc, #336]	@ (8000994 <OLED_init+0x1b0>)
 8000844:	223f      	movs	r2, #63	@ 0x3f
 8000846:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000848:	2101      	movs	r1, #1
 800084a:	4852      	ldr	r0, [pc, #328]	@ (8000994 <OLED_init+0x1b0>)
 800084c:	f7ff ff74 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_SETDISPLAYOFFSET); // 화면 위치 오프셋
 8000850:	20a2      	movs	r0, #162	@ 0xa2
 8000852:	f7ff ff49 	bl	80006e8 <OLED_write_cmd>
  d = 0x00;
 8000856:	4b4f      	ldr	r3, [pc, #316]	@ (8000994 <OLED_init+0x1b0>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800085c:	2101      	movs	r1, #1
 800085e:	484d      	ldr	r0, [pc, #308]	@ (8000994 <OLED_init+0x1b0>)
 8000860:	f7ff ff6a 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_SETSTARTLINE);     // 시작 줄 설정
 8000864:	20a1      	movs	r0, #161	@ 0xa1
 8000866:	f7ff ff3f 	bl	80006e8 <OLED_write_cmd>
  d = 0x00;
 800086a:	4b4a      	ldr	r3, [pc, #296]	@ (8000994 <OLED_init+0x1b0>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000870:	2101      	movs	r1, #1
 8000872:	4848      	ldr	r0, [pc, #288]	@ (8000994 <OLED_init+0x1b0>)
 8000874:	f7ff ff60 	bl	8000738 <OLED_write_data>

  // 4단계: 화면 방향과 색상 배치 설정
  OLED_write_cmd(OLED_SETREMAP);
 8000878:	20a0      	movs	r0, #160	@ 0xa0
 800087a:	f7ff ff35 	bl	80006e8 <OLED_write_cmd>
  {
    uint8_t remap[2] = {0x14, 0x11};  // 니블 순서, 듀얼COM 설정
 800087e:	f241 1314 	movw	r3, #4372	@ 0x1114
 8000882:	81bb      	strh	r3, [r7, #12]
    OLED_write_data(remap, 2);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2102      	movs	r1, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff54 	bl	8000738 <OLED_write_data>
  } // Dual COM 모드로 설정시, Column 범위가 [ 0x1C <= x <= 0x5B ]가 됩니다.



  // 5단계: GPIO와 기능 설정 ( 안씀 )
  OLED_write_cmd(OLED_SETGPIO);
 8000890:	20b5      	movs	r0, #181	@ 0xb5
 8000892:	f7ff ff29 	bl	80006e8 <OLED_write_cmd>
  d = 0x00;
 8000896:	4b3f      	ldr	r3, [pc, #252]	@ (8000994 <OLED_init+0x1b0>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800089c:	2101      	movs	r1, #1
 800089e:	483d      	ldr	r0, [pc, #244]	@ (8000994 <OLED_init+0x1b0>)
 80008a0:	f7ff ff4a 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_FUNCTIONSELECT);  // 내부 전원 사용
 80008a4:	20ab      	movs	r0, #171	@ 0xab
 80008a6:	f7ff ff1f 	bl	80006e8 <OLED_write_cmd>
  d = 0x01;
 80008aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000994 <OLED_init+0x1b0>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80008b0:	2101      	movs	r1, #1
 80008b2:	4838      	ldr	r0, [pc, #224]	@ (8000994 <OLED_init+0x1b0>)
 80008b4:	f7ff ff40 	bl	8000738 <OLED_write_data>

  // 6단계: 화면 품질 향상 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 80008b8:	20b4      	movs	r0, #180	@ 0xb4
 80008ba:	f7ff ff15 	bl	80006e8 <OLED_write_cmd>
  {
    uint8_t enhA[2] = {0xA0, 0xFD};
 80008be:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 80008c2:	813b      	strh	r3, [r7, #8]
    OLED_write_data(enhA, 2);
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2102      	movs	r1, #2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff34 	bl	8000738 <OLED_write_data>
  }

  // 7단계: 밝기와 전류 설정
  OLED_write_cmd(OLED_SETCONTRAST);     // 최대 밝기
 80008d0:	20c1      	movs	r0, #193	@ 0xc1
 80008d2:	f7ff ff09 	bl	80006e8 <OLED_write_cmd>
  d = 0xFF;
 80008d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <OLED_init+0x1b0>)
 80008d8:	22ff      	movs	r2, #255	@ 0xff
 80008da:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80008dc:	2101      	movs	r1, #1
 80008de:	482d      	ldr	r0, [pc, #180]	@ (8000994 <OLED_init+0x1b0>)
 80008e0:	f7ff ff2a 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_MASTERCURRENT);   // 마스터 전류
 80008e4:	20c7      	movs	r0, #199	@ 0xc7
 80008e6:	f7ff feff 	bl	80006e8 <OLED_write_cmd>
  d = 0x0F;
 80008ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <OLED_init+0x1b0>)
 80008ec:	220f      	movs	r2, #15
 80008ee:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4828      	ldr	r0, [pc, #160]	@ (8000994 <OLED_init+0x1b0>)
 80008f4:	f7ff ff20 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_DEFAULTGRAYSCALE); // 기본 그레이스케일 사용
 80008f8:	20b9      	movs	r0, #185	@ 0xb9
 80008fa:	f7ff fef5 	bl	80006e8 <OLED_write_cmd>

  // 8단계: 전기적 특성 설정
  OLED_write_cmd(OLED_SETPHASELENGTH);  // 페이즈 길이
 80008fe:	20b1      	movs	r0, #177	@ 0xb1
 8000900:	f7ff fef2 	bl	80006e8 <OLED_write_cmd>
  d = 0xE2;
 8000904:	4b23      	ldr	r3, [pc, #140]	@ (8000994 <OLED_init+0x1b0>)
 8000906:	22e2      	movs	r2, #226	@ 0xe2
 8000908:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800090a:	2101      	movs	r1, #1
 800090c:	4821      	ldr	r0, [pc, #132]	@ (8000994 <OLED_init+0x1b0>)
 800090e:	f7ff ff13 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_DISPLAYENHANCE_B); // 화면 품질 향상 B
 8000912:	20d1      	movs	r0, #209	@ 0xd1
 8000914:	f7ff fee8 	bl	80006e8 <OLED_write_cmd>
  {
    uint8_t enhB[2] = {0x82, 0x20};
 8000918:	f242 0382 	movw	r3, #8322	@ 0x2082
 800091c:	80bb      	strh	r3, [r7, #4]
    OLED_write_data(enhB, 2);
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2102      	movs	r1, #2
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ff08 	bl	8000738 <OLED_write_data>
  }

  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE); // 프리차지 전압
 8000928:	20bb      	movs	r0, #187	@ 0xbb
 800092a:	f7ff fedd 	bl	80006e8 <OLED_write_cmd>
  d = 0x1F;
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <OLED_init+0x1b0>)
 8000930:	221f      	movs	r2, #31
 8000932:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000934:	2101      	movs	r1, #1
 8000936:	4817      	ldr	r0, [pc, #92]	@ (8000994 <OLED_init+0x1b0>)
 8000938:	f7ff fefe 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_SETSECONDPRECHARGE);  // 두 번째 프리차지
 800093c:	20b6      	movs	r0, #182	@ 0xb6
 800093e:	f7ff fed3 	bl	80006e8 <OLED_write_cmd>
  d = 0x08;
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <OLED_init+0x1b0>)
 8000944:	2208      	movs	r2, #8
 8000946:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000948:	2101      	movs	r1, #1
 800094a:	4812      	ldr	r0, [pc, #72]	@ (8000994 <OLED_init+0x1b0>)
 800094c:	f7ff fef4 	bl	8000738 <OLED_write_data>

  OLED_write_cmd(OLED_SETVCOMH);            // VCOM 전압
 8000950:	20be      	movs	r0, #190	@ 0xbe
 8000952:	f7ff fec9 	bl	80006e8 <OLED_write_cmd>
  d = 0x07;
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <OLED_init+0x1b0>)
 8000958:	2207      	movs	r2, #7
 800095a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800095c:	2101      	movs	r1, #1
 800095e:	480d      	ldr	r0, [pc, #52]	@ (8000994 <OLED_init+0x1b0>)
 8000960:	f7ff feea 	bl	8000738 <OLED_write_data>

  // 9단계: 디스플레이 모드 설정
  OLED_write_cmd(OLED_NORMALDISPLAY);       // 정상 디스플레이 모드
 8000964:	20a6      	movs	r0, #166	@ 0xa6
 8000966:	f7ff febf 	bl	80006e8 <OLED_write_cmd>
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);  // 부분 디스플레이 모드 해제
 800096a:	20a9      	movs	r0, #169	@ 0xa9
 800096c:	f7ff febc 	bl	80006e8 <OLED_write_cmd>

  // 10단계: 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8000970:	233f      	movs	r3, #63	@ 0x3f
 8000972:	2200      	movs	r2, #0
 8000974:	215b      	movs	r1, #91	@ 0x5b
 8000976:	201c      	movs	r0, #28
 8000978:	f7ff ff06 	bl	8000788 <OLED_set_window>

  // 11단계: 디스플레이 켜기
  OLED_write_cmd(OLED_DISPLAYON);
 800097c:	20af      	movs	r0, #175	@ 0xaf
 800097e:	f7ff feb3 	bl	80006e8 <OLED_write_cmd>
  HAL_Delay(50);  // 안정화 대기
 8000982:	2032      	movs	r0, #50	@ 0x32
 8000984:	f000 fad6 	bl	8000f34 <HAL_Delay>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	48000400 	.word	0x48000400
 8000994:	20000094 	.word	0x20000094

08000998 <OLED_fill>:

/* 화면 전체를 하나의 색으로 채우는 함수 */
void OLED_fill(uint8_t gray)  // gray: 0(검정)~15(흰색)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0a4      	sub	sp, #144	@ 0x90
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  // 4bpp에서는 1바이트에 2픽셀이 들어감 (4bit씩)
  uint8_t b = (gray << 4) | (gray & 0x0F);  // 왼쪽4bit + 오른쪽4bit
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	b25a      	sxtb	r2, r3
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t line[OLED_W/2];  // 한 줄에 필요한 바이트 수 (256픽셀 / 2 = 128바이트)
  memset(line, b, sizeof(line));  // 배열을 같은 값으로 채움
 80009bc:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2280      	movs	r2, #128	@ 0x80
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fe9c 	bl	8002704 <memset>

  // 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80009cc:	233f      	movs	r3, #63	@ 0x3f
 80009ce:	2200      	movs	r2, #0
 80009d0:	215b      	movs	r1, #91	@ 0x5b
 80009d2:	201c      	movs	r0, #28
 80009d4:	f7ff fed8 	bl	8000788 <OLED_set_window>
  OLED_write_cmd(OLED_WRITERAM);  // 메모리 쓰기 시작
 80009d8:	205c      	movs	r0, #92	@ 0x5c
 80009da:	f7ff fe85 	bl	80006e8 <OLED_write_cmd>

  // 64줄을 반복해서 같은 데이터 전송
  for (int y = 0; y < OLED_H; y++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80009e4:	e00a      	b.n	80009fc <OLED_fill+0x64>
    OLED_write_data(line, sizeof(line));
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	2180      	movs	r1, #128	@ 0x80
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fea3 	bl	8000738 <OLED_write_data>
  for (int y = 0; y < OLED_H; y++) {
 80009f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009f6:	3301      	adds	r3, #1
 80009f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80009fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a00:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a02:	ddf0      	ble.n	80009e6 <OLED_fill+0x4e>
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3790      	adds	r7, #144	@ 0x90
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <colbyte_from_x>:

/* ======== 좌표 변환 함수들 ======== */

/* 픽셀의 x좌표를 OLED의 column 바이트 주소로 변환 */
static uint8_t colbyte_from_x(int x)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  // 4bpp에서는 2픽셀당 1바이트이므로 x를 2로 나눔
  return OLED_COL_START + (x >> 1);  // x >> 1은 x / 2와 같음
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	105b      	asrs	r3, r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	331c      	adds	r3, #28
 8000a1e:	b2db      	uxtb	r3, r3
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <rowaddr_from_y>:

/* 픽셀의 y좌표를 OLED의 row 주소로 변환 */
static uint8_t rowaddr_from_y(int y)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y;  // y좌표는 그대로 사용
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	b2db      	uxtb	r3, r3
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <oled_drawChar>:

/* ======== 문자 그리기 함수들 ======== */

/* 하나의 문자를 화면에 그리는 함수 */
void oled_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ae      	sub	sp, #184	@ 0xb8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71fb      	strb	r3, [r7, #7]
  // 1단계: 입력값 검증
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b1f      	cmp	r3, #31
 8000a58:	f240 80ea 	bls.w	8000c30 <oled_drawChar+0x1ec>
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a60:	f200 80e6 	bhi.w	8000c30 <oled_drawChar+0x1ec>
  if (gray > 15) gray = 15;         // 최대 밝기 제한
 8000a64:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d902      	bls.n	8000a72 <oled_drawChar+0x2e>
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0

  // 2단계: 화면 범위 검사
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f2c0 80dd 	blt.w	8000c34 <oled_drawChar+0x1f0>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a88:	f300 80d4 	bgt.w	8000c34 <oled_drawChar+0x1f0>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f2c0 80d2 	blt.w	8000c38 <oled_drawChar+0x1f4>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2b40      	cmp	r3, #64	@ 0x40
 8000aa0:	f300 80ca 	bgt.w	8000c38 <oled_drawChar+0x1f4>

  // 3단계: 폰트 데이터에서 문자 찾기
  const int stride = font->height;           // 한 문자의 데이터 줄 수
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	785b      	ldrb	r3, [r3, #1]
 8000aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start  = (ch - 32) * stride;     // 문자 데이터 시작 위치 ('A'는 65-32=33번째)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f1a3 0220 	sub.w	r2, r3, #32
 8000ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ab6:	fb02 f303 	mul.w	r3, r2, r3
 8000aba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2;  // 한 줄당 필요한 바이트 수
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	0fda      	lsrs	r2, r3, #31
 8000ac6:	4413      	add	r3, r2
 8000ac8:	105b      	asrs	r3, r3, #1
 8000aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W/2];  // 한 줄 데이터를 저장할 버퍼

  // 4단계: 문자의 각 줄을 처리
  for (int row = 0; row < font->height; row++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000ad4:	e0a3      	b.n	8000c1e <oled_drawChar+0x1da>
  {
    // 폰트 데이터에서 현재 줄의 비트맵 가져오기
    uint16_t mask = font->data[start + row];
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8000ade:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ae2:	440b      	add	r3, r1
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    // 줄 버퍼를 0으로 초기화 (배경색)
    memset(linebuf, 0x00, bytes_per_row);
 8000aee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 fe03 	bl	8002704 <memset>

    // 5단계: 각 픽셀을 처리 (왼쪽부터 오른쪽으로)
    for (int col = 0; col < font->width; col++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b04:	e04f      	b.n	8000ba6 <oled_drawChar+0x162>
    {
      int byte_idx = (col >> 1);              // 현재 픽셀이 들어갈 바이트 위치
 8000b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b0a:	105b      	asrs	r3, r3, #1
 8000b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0);     // 바이트의 왼쪽 4bit인지 오른쪽 4bit인지
 8000b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf0c      	ite	eq
 8000b1c:	2301      	moveq	r3, #1
 8000b1e:	2300      	movne	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      // 현재 픽셀이 켜져있는지 확인
      if (mask & (0x8000 >> col))  // 0x8000에서 오른쪽으로 col번 이동한 비트 확인
 8000b26:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8000b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b32:	fa41 f303 	asr.w	r3, r1, r3
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d02f      	beq.n	8000b9c <oled_drawChar+0x158>
      {
        // 픽셀이 켜져있으면 해당 위치에 색상 설정
        if (left_nibble)
 8000b3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d015      	beq.n	8000b70 <oled_drawChar+0x12c>
          linebuf[byte_idx] |= (gray << 4);   // 왼쪽 4bit에 색상
 8000b44:	f107 0214 	add.w	r2, r7, #20
 8000b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	b2d9      	uxtb	r1, r3
 8000b60:	f107 0214 	add.w	r2, r7, #20
 8000b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b68:	4413      	add	r3, r2
 8000b6a:	460a      	mov	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e015      	b.n	8000b9c <oled_drawChar+0x158>
        else
          linebuf[byte_idx] |= (gray & 0x0F); // 오른쪽 4bit에 색상
 8000b70:	f107 0214 	add.w	r2, r7, #20
 8000b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25a      	sxtb	r2, r3
 8000b7e:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	b2d9      	uxtb	r1, r3
 8000b8e:	f107 0214 	add.w	r2, r7, #20
 8000b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b96:	4413      	add	r3, r2
 8000b98:	460a      	mov	r2, r1
 8000b9a:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8000b9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	dba8      	blt.n	8000b06 <oled_drawChar+0xc2>
      }
    }

    // 6단계: 현재 줄을 OLED에 전송
    uint8_t col_start = colbyte_from_x(x);           // 시작 column 주소
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff ff2a 	bl	8000a0e <colbyte_from_x>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end   = col_start + bytes_per_row - 1;  // 끝 column 주소
 8000bc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8000bca:	4413      	add	r3, r2
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr  = rowaddr_from_y(y + row);     // 현재 row 주소
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000bda:	4413      	add	r3, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff25 	bl	8000a2c <rowaddr_from_y>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr);  // 그리기 영역 설정
 8000be8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000bec:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000bf0:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8000bf4:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 8000bf8:	f7ff fdc6 	bl	8000788 <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);                   // 메모리 쓰기 시작
 8000bfc:	205c      	movs	r0, #92	@ 0x5c
 8000bfe:	f7ff fd73 	bl	80006e8 <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);         // 데이터 전송
 8000c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd92 	bl	8000738 <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 8000c14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c18:	3301      	adds	r3, #1
 8000c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	f6ff af54 	blt.w	8000ad6 <oled_drawChar+0x92>
 8000c2e:	e004      	b.n	8000c3a <oled_drawChar+0x1f6>
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8000c30:	bf00      	nop
 8000c32:	e002      	b.n	8000c3a <oled_drawChar+0x1f6>
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8000c34:	bf00      	nop
 8000c36:	e000      	b.n	8000c3a <oled_drawChar+0x1f6>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8000c38:	bf00      	nop
  }
}
 8000c3a:	37b8      	adds	r7, #184	@ 0xb8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <oled_drawString>:

/* 문자열을 화면에 그리는 함수 */
void oled_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
  int cx = x, cy = y;  // 현재 커서 위치
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	613b      	str	r3, [r7, #16]

  // 문자열의 끝까지 반복
  while (*str) {
 8000c56:	e020      	b.n	8000c9a <oled_drawString+0x5a>
    if (*str == '\n') {  // 줄바꿈 문자
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b0a      	cmp	r3, #10
 8000c5e:	d108      	bne.n	8000c72 <oled_drawString+0x32>
      cy += font->height + 1;  // 다음 줄로 이동 (+1은 줄 간격)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	3301      	adds	r3, #1
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4413      	add	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
      cx = x;                  // 맨 왼쪽으로 돌아가기
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e010      	b.n	8000c94 <oled_drawString+0x54>
     // if (cx & 1) cx--;        // 시작 위치를 짝수로 맞춤 (니블 정렬)
    } // 사용시 "str\nstr" 이런식으로 쓰시면 됩니다.

    else if (*str != '\r') {   // 캐리지 리턴이 아닌 일반 문자
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b0d      	cmp	r3, #13
 8000c78:	d00c      	beq.n	8000c94 <oled_drawString+0x54>
      oled_drawChar(cx, cy, *str, font, gray);  // 현재 위치에 문자 그리기
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6939      	ldr	r1, [r7, #16]
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff fedb 	bl	8000a44 <oled_drawChar>
      cx += 4;  // 다음 문자 위치로 이동 (4픽셀 간격으로 설정)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3304      	adds	r3, #4
 8000c92:	617b      	str	r3, [r7, #20]

      // 원래 코드: cx += font->width + 1; (폰트 너비 + 1픽셀 간격)
      // 원래 코드: if (cx & 1) cx++;      (다음 위치를 짝수로 맞춤)
      // → 이 두 줄이 문자 사이에 큰 간격을 만들었음
    }
    str++;  // 다음 문자로 이동
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3301      	adds	r3, #1
 8000c98:	607b      	str	r3, [r7, #4]
  while (*str) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1da      	bne.n	8000c58 <oled_drawString+0x18>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <HAL_MspInit+0x44>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf0 <HAL_MspInit+0x44>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <HAL_MspInit+0x44>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_MspInit+0x44>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_MspInit+0x44>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_MspInit+0x44>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ce2:	f000 fc83 	bl	80015ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <HAL_SPI_MspInit+0x7c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d127      	bne.n	8000d66 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_SPI_MspInit+0x80>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1a:	4a16      	ldr	r2, [pc, #88]	@ (8000d74 <HAL_SPI_MspInit+0x80>)
 8000d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <HAL_SPI_MspInit+0x80>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <HAL_SPI_MspInit+0x80>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a10      	ldr	r2, [pc, #64]	@ (8000d74 <HAL_SPI_MspInit+0x80>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <HAL_SPI_MspInit+0x80>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000d46:	2328      	movs	r3, #40	@ 0x28
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d56:	2306      	movs	r3, #6
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <HAL_SPI_MspInit+0x84>)
 8000d62:	f000 f9ed 	bl	8001140 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	@ 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40003c00 	.word	0x40003c00
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000400 	.word	0x48000400

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f891 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e00:	480d      	ldr	r0, [pc, #52]	@ (8000e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e04:	f7ff ffea 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopForever+0xe>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopForever+0x16>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f001 fc71 	bl	8002714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e32:	f7ff fa33 	bl	800029c <main>

08000e36 <LoopForever>:

LoopForever:
    b LoopForever
 8000e36:	e7fe      	b.n	8000e36 <LoopForever>
  ldr   r0, =_estack
 8000e38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e44:	08002f34 	.word	0x08002f34
  ldr r2, =_sbss
 8000e48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e4c:	2000009c 	.word	0x2000009c

08000e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC1_2_IRQHandler>

08000e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f93d 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e62:	200f      	movs	r0, #15
 8000e64:	f000 f80e 	bl	8000e84 <HAL_InitTick>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	e001      	b.n	8000e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e74:	f7ff ff1a 	bl	8000cac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e78:	79fb      	ldrb	r3, [r7, #7]

}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_InitTick+0x68>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d022      	beq.n	8000ede <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_InitTick+0x6c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <HAL_InitTick+0x68>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f93a 	bl	8001126 <HAL_SYSTICK_Config>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10f      	bne.n	8000ed8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	d809      	bhi.n	8000ed2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec6:	f000 f914 	bl	80010f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_InitTick+0x70>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e007      	b.n	8000ee2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e004      	b.n	8000ee2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e001      	b.n	8000ee2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_IncTick+0x20>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a03      	ldr	r2, [pc, #12]	@ (8000f14 <HAL_IncTick+0x1c>)
 8000f08:	6013      	str	r3, [r2, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000098 	.word	0x20000098
 8000f18:	20000008 	.word	0x20000008

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000098 	.word	0x20000098

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d004      	beq.n	8000f58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <HAL_Delay+0x40>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f58:	bf00      	nop
 8000f5a:	f7ff ffdf 	bl	8000f1c <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d8f7      	bhi.n	8000f5a <HAL_Delay+0x26>
  {
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff5e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff90 	bl	8001030 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffb2 	bl	8001098 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800114e:	e15a      	b.n	8001406 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 814c 	beq.w	8001400 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d005      	beq.n	8001180 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800117c:	2b02      	cmp	r3, #2
 800117e:	d130      	bne.n	80011e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b6:	2201      	movs	r2, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	f003 0201 	and.w	r2, r3, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d017      	beq.n	800121e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d123      	bne.n	8001272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0203 	and.w	r2, r3, #3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80a6 	beq.w	8001400 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001424 <HAL_GPIO_Init+0x2e4>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001424 <HAL_GPIO_Init+0x2e4>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6613      	str	r3, [r2, #96]	@ 0x60
 80012c0:	4b58      	ldr	r3, [pc, #352]	@ (8001424 <HAL_GPIO_Init+0x2e4>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012cc:	4a56      	ldr	r2, [pc, #344]	@ (8001428 <HAL_GPIO_Init+0x2e8>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012f6:	d01f      	beq.n	8001338 <HAL_GPIO_Init+0x1f8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	@ (800142c <HAL_GPIO_Init+0x2ec>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d019      	beq.n	8001334 <HAL_GPIO_Init+0x1f4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4b      	ldr	r2, [pc, #300]	@ (8001430 <HAL_GPIO_Init+0x2f0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d013      	beq.n	8001330 <HAL_GPIO_Init+0x1f0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a4a      	ldr	r2, [pc, #296]	@ (8001434 <HAL_GPIO_Init+0x2f4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d00d      	beq.n	800132c <HAL_GPIO_Init+0x1ec>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a49      	ldr	r2, [pc, #292]	@ (8001438 <HAL_GPIO_Init+0x2f8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x1e8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a48      	ldr	r2, [pc, #288]	@ (800143c <HAL_GPIO_Init+0x2fc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_GPIO_Init+0x1e4>
 8001320:	2305      	movs	r3, #5
 8001322:	e00a      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001324:	2306      	movs	r3, #6
 8001326:	e008      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001328:	2304      	movs	r3, #4
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 800132c:	2303      	movs	r3, #3
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001338:	2300      	movs	r3, #0
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134a:	4937      	ldr	r1, [pc, #220]	@ (8001428 <HAL_GPIO_Init+0x2e8>)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_GPIO_Init+0x300>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800137c:	4a30      	ldr	r2, [pc, #192]	@ (8001440 <HAL_GPIO_Init+0x300>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_GPIO_Init+0x300>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013a6:	4a26      	ldr	r2, [pc, #152]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013ac:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f ae9d 	bne.w	8001150 <HAL_GPIO_Init+0x10>
  }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800
 8001434:	48000c00 	.word	0x48000c00
 8001438:	48001000 	.word	0x48001000
 800143c:	48001400 	.word	0x48001400
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001490:	e002      	b.n	8001498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d141      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b2:	4b4b      	ldr	r3, [pc, #300]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014be:	d131      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c0:	4b47      	ldr	r3, [pc, #284]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c6:	4a46      	ldr	r2, [pc, #280]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	4b43      	ldr	r3, [pc, #268]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d8:	4a41      	ldr	r2, [pc, #260]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014e0:	4b40      	ldr	r3, [pc, #256]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2232      	movs	r2, #50	@ 0x32
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a3f      	ldr	r2, [pc, #252]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	0c9b      	lsrs	r3, r3, #18
 80014f2:	3301      	adds	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f6:	e002      	b.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150a:	d102      	bne.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f2      	bne.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151e:	d158      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e057      	b.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800152a:	4a2d      	ldr	r2, [pc, #180]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001534:	e04d      	b.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800153c:	d141      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800153e:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154a:	d131      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001552:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001564:	4a1e      	ldr	r2, [pc, #120]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800156a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2232      	movs	r2, #50	@ 0x32
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4a1c      	ldr	r2, [pc, #112]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0c9b      	lsrs	r3, r3, #18
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001582:	e002      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3b01      	subs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001596:	d102      	bne.n	800159e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f2      	bne.n	8001584 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015aa:	d112      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e011      	b.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015c0:	e007      	b.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40007000 	.word	0x40007000
 80015e4:	20000000 	.word	0x20000000
 80015e8:	431bde83 	.word	0x431bde83

080015ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fa:	6093      	str	r3, [r2, #8]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40007000 	.word	0x40007000

0800160c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e2fe      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d075      	beq.n	8001716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162a:	4b97      	ldr	r3, [pc, #604]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001634:	4b94      	ldr	r3, [pc, #592]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b0c      	cmp	r3, #12
 8001642:	d102      	bne.n	800164a <HAL_RCC_OscConfig+0x3e>
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d002      	beq.n	8001650 <HAL_RCC_OscConfig+0x44>
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b8d      	ldr	r3, [pc, #564]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d05b      	beq.n	8001714 <HAL_RCC_OscConfig+0x108>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d157      	bne.n	8001714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e2d9      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x74>
 8001672:	4b85      	ldr	r3, [pc, #532]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a84      	ldr	r2, [pc, #528]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e01d      	b.n	80016bc <HAL_RCC_OscConfig+0xb0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x98>
 800168a:	4b7f      	ldr	r3, [pc, #508]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7e      	ldr	r2, [pc, #504]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b7c      	ldr	r3, [pc, #496]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7b      	ldr	r2, [pc, #492]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xb0>
 80016a4:	4b78      	ldr	r3, [pc, #480]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a77      	ldr	r2, [pc, #476]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b75      	ldr	r3, [pc, #468]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a74      	ldr	r2, [pc, #464]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc2a 	bl	8000f1c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fc26 	bl	8000f1c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	@ 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e29e      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016de:	4b6a      	ldr	r3, [pc, #424]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xc0>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc16 	bl	8000f1c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc12 	bl	8000f1c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e28a      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001706:	4b60      	ldr	r3, [pc, #384]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0xe8>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001722:	4b59      	ldr	r3, [pc, #356]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800172c:	4b56      	ldr	r3, [pc, #344]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d102      	bne.n	8001742 <HAL_RCC_OscConfig+0x136>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d002      	beq.n	8001748 <HAL_RCC_OscConfig+0x13c>
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d11f      	bne.n	8001788 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001748:	4b4f      	ldr	r3, [pc, #316]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x154>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e25d      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b49      	ldr	r3, [pc, #292]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	4946      	ldr	r1, [pc, #280]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001774:	4b45      	ldr	r3, [pc, #276]	@ (800188c <HAL_RCC_OscConfig+0x280>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb83 	bl	8000e84 <HAL_InitTick>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d043      	beq.n	800180c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e249      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3c      	ldr	r2, [pc, #240]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fbbe 	bl	8000f1c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fbba 	bl	8000f1c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e232      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b6:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	061b      	lsls	r3, r3, #24
 80017d0:	492d      	ldr	r1, [pc, #180]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
 80017d6:	e01a      	b.n	800180e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 80017de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb9a 	bl	8000f1c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff fb96 	bl	8000f1c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e20e      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017fe:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x1e0>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d041      	beq.n	800189e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d01c      	beq.n	800185c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001822:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001828:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fb73 	bl	8000f1c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183a:	f7ff fb6f 	bl	8000f1c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1e7      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0ef      	beq.n	800183a <HAL_RCC_OscConfig+0x22e>
 800185a:	e020      	b.n	800189e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185c:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001862:	4a09      	ldr	r2, [pc, #36]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fb56 	bl	8000f1c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001872:	e00d      	b.n	8001890 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff fb52 	bl	8000f1c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d906      	bls.n	8001890 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1ca      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001890:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ea      	bne.n	8001874 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80a6 	beq.w	80019f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018b0:	4b84      	ldr	r3, [pc, #528]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2b4>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x2b6>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00d      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e2:	4b79      	ldr	r3, [pc, #484]	@ (8001ac8 <HAL_RCC_OscConfig+0x4bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ee:	4b76      	ldr	r3, [pc, #472]	@ (8001ac8 <HAL_RCC_OscConfig+0x4bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a75      	ldr	r2, [pc, #468]	@ (8001ac8 <HAL_RCC_OscConfig+0x4bc>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fa:	f7ff fb0f 	bl	8000f1c <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7ff fb0b 	bl	8000f1c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e183      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001914:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac8 <HAL_RCC_OscConfig+0x4bc>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d108      	bne.n	800193a <HAL_RCC_OscConfig+0x32e>
 8001928:	4b66      	ldr	r3, [pc, #408]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192e:	4a65      	ldr	r2, [pc, #404]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001938:	e024      	b.n	8001984 <HAL_RCC_OscConfig+0x378>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d110      	bne.n	8001964 <HAL_RCC_OscConfig+0x358>
 8001942:	4b60      	ldr	r3, [pc, #384]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001948:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001952:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001958:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001962:	e00f      	b.n	8001984 <HAL_RCC_OscConfig+0x378>
 8001964:	4b57      	ldr	r3, [pc, #348]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800196a:	4a56      	ldr	r2, [pc, #344]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197a:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d016      	beq.n	80019ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fac6 	bl	8000f1c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001992:	e00a      	b.n	80019aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff fac2 	bl	8000f1c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e138      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019aa:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ed      	beq.n	8001994 <HAL_RCC_OscConfig+0x388>
 80019b8:	e015      	b.n	80019e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7ff faaf 	bl	8000f1c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff faab 	bl	8000f1c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e121      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ed      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019e6:	7ffb      	ldrb	r3, [r7, #31]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ec:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	4a34      	ldr	r2, [pc, #208]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 80019f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a12:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fa7e 	bl	8000f1c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a24:	f7ff fa7a 	bl	8000f1c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0f2      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a36:	4b23      	ldr	r3, [pc, #140]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ef      	beq.n	8001a24 <HAL_RCC_OscConfig+0x418>
 8001a44:	e01b      	b.n	8001a7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa61 	bl	8000f1c <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5e:	f7ff fa5d 	bl	8000f1c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0d5      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ef      	bne.n	8001a5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80c9 	beq.w	8001c1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	f000 8083 	beq.w	8001b9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d15e      	bne.n	8001b5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a08      	ldr	r2, [pc, #32]	@ (8001ac4 <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fa37 	bl	8000f1c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	e00c      	b.n	8001acc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff fa33 	bl	8000f1c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d905      	bls.n	8001acc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0ab      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001acc:	4b55      	ldr	r3, [pc, #340]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ec      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	4b52      	ldr	r3, [pc, #328]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	4b52      	ldr	r3, [pc, #328]	@ (8001c28 <HAL_RCC_OscConfig+0x61c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6a11      	ldr	r1, [r2, #32]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001af2:	0212      	lsls	r2, r2, #8
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001afa:	0852      	lsrs	r2, r2, #1
 8001afc:	3a01      	subs	r2, #1
 8001afe:	0552      	lsls	r2, r2, #21
 8001b00:	4311      	orrs	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b06:	0852      	lsrs	r2, r2, #1
 8001b08:	3a01      	subs	r2, #1
 8001b0a:	0652      	lsls	r2, r2, #25
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b12:	06d2      	lsls	r2, r2, #27
 8001b14:	430a      	orrs	r2, r1
 8001b16:	4943      	ldr	r1, [pc, #268]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b41      	ldr	r3, [pc, #260]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a40      	ldr	r2, [pc, #256]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b28:	4b3e      	ldr	r3, [pc, #248]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f9f2 	bl	8000f1c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f9ee 	bl	8000f1c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e066      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x530>
 8001b5a:	e05e      	b.n	8001c1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b31      	ldr	r3, [pc, #196]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a30      	ldr	r2, [pc, #192]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f9d8 	bl	8000f1c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f9d4 	bl	8000f1c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04c      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b82:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b8e:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	4924      	ldr	r1, [pc, #144]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_RCC_OscConfig+0x620>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
 8001b9a:	e03e      	b.n	8001c1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e039      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <HAL_RCC_OscConfig+0x618>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d12c      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d123      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d11b      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d113      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	085b      	lsrs	r3, r3, #1
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	019f800c 	.word	0x019f800c
 8001c2c:	feeefffc 	.word	0xfeeefffc

08001c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e11e      	b.n	8001e86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b91      	ldr	r3, [pc, #580]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d910      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b8e      	ldr	r3, [pc, #568]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 020f 	bic.w	r2, r3, #15
 8001c5e:	498c      	ldr	r1, [pc, #560]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b8a      	ldr	r3, [pc, #552]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e106      	b.n	8001e86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d073      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d129      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8c:	4b81      	ldr	r3, [pc, #516]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0f4      	b.n	8001e86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c9c:	f000 f966 	bl	8001f6c <RCC_GetSysClockFreqFromPLLSource>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4a7c      	ldr	r2, [pc, #496]	@ (8001e98 <HAL_RCC_ClockConfig+0x268>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d93f      	bls.n	8001d2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001caa:	4b7a      	ldr	r3, [pc, #488]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d033      	beq.n	8001d2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d12f      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cca:	4b72      	ldr	r3, [pc, #456]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cd2:	4a70      	ldr	r2, [pc, #448]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e024      	b.n	8001d2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0c6      	b.n	8001e86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	4b66      	ldr	r3, [pc, #408]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0be      	b.n	8001e86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d08:	f000 f8ce 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4a61      	ldr	r2, [pc, #388]	@ (8001e98 <HAL_RCC_ClockConfig+0x268>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d909      	bls.n	8001d2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d16:	4b5f      	ldr	r3, [pc, #380]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d1e:	4a5d      	ldr	r2, [pc, #372]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4957      	ldr	r1, [pc, #348]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d3c:	f7ff f8ee 	bl	8000f1c <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff f8ea 	bl	8000f1c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e095      	b.n	8001e86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	4b43      	ldr	r3, [pc, #268]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a42      	ldr	r2, [pc, #264]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001da4:	4a3b      	ldr	r2, [pc, #236]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001da6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001daa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4936      	ldr	r1, [pc, #216]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b80      	cmp	r3, #128	@ 0x80
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dc6:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4a32      	ldr	r2, [pc, #200]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001dcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d21d      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 020f 	bic.w	r2, r3, #15
 8001de8:	4929      	ldr	r1, [pc, #164]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001df0:	f7ff f894 	bl	8000f1c <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff f890 	bl	8000f1c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e03b      	b.n	8001e86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1ed      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4917      	ldr	r1, [pc, #92]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d009      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e46:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	490f      	ldr	r1, [pc, #60]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e5a:	f000 f825 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <HAL_RCC_ClockConfig+0x264>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	490c      	ldr	r1, [pc, #48]	@ (8001e9c <HAL_RCC_ClockConfig+0x26c>)
 8001e6c:	5ccb      	ldrb	r3, [r1, r3]
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <HAL_RCC_ClockConfig+0x270>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_RCC_ClockConfig+0x274>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f800 	bl	8000e84 <HAL_InitTick>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	04c4b400 	.word	0x04c4b400
 8001e9c:	08002f1c 	.word	0x08002f1c
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eae:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d102      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eba:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e047      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ec0:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d102      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ecc:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e03e      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ed2:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d136      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ede:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001efc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	4a16      	ldr	r2, [pc, #88]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f06:	68d2      	ldr	r2, [r2, #12]
 8001f08:	0a12      	lsrs	r2, r2, #8
 8001f0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
      break;
 8001f14:	e00c      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f16:	4a13      	ldr	r2, [pc, #76]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4a10      	ldr	r2, [pc, #64]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f20:	68d2      	ldr	r2, [r2, #12]
 8001f22:	0a12      	lsrs	r2, r2, #8
 8001f24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0e5b      	lsrs	r3, r3, #25
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	e001      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f50:	693b      	ldr	r3, [r7, #16]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	007a1200 	.word	0x007a1200

08001f6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f72:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3301      	adds	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d10c      	bne.n	8001faa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f90:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f9a:	68d2      	ldr	r2, [r2, #12]
 8001f9c:	0a12      	lsrs	r2, r2, #8
 8001f9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
    break;
 8001fa8:	e00c      	b.n	8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001faa:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fb4:	68d2      	ldr	r2, [r2, #12]
 8001fb6:	0a12      	lsrs	r2, r2, #8
 8001fb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    break;
 8001fc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0e5b      	lsrs	r3, r3, #25
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	007a1200 	.word	0x007a1200
 8001ff4:	00f42400 	.word	0x00f42400

08001ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e09d      	b.n	8002146 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	2b00      	cmp	r3, #0
 8002010:	d108      	bne.n	8002024 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800201a:	d009      	beq.n	8002030 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
 8002022:	e005      	b.n	8002030 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fe52 	bl	8000cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002066:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002070:	d902      	bls.n	8002078 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e002      	b.n	800207e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800207c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002086:	d007      	beq.n	8002098 <HAL_SPI_Init+0xa0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002090:	d002      	beq.n	8002098 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020da:	ea42 0103 	orr.w	r1, r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	f003 0204 	and.w	r2, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002114:	ea42 0103 	orr.w	r1, r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002134:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b088      	sub	sp, #32
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800215e:	f7fe fedd 	bl	8000f1c <HAL_GetTick>
 8002162:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
 8002176:	e15c      	b.n	8002432 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_SPI_Transmit+0x36>
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e154      	b.n	8002432 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_SPI_Transmit+0x48>
 8002192:	2302      	movs	r3, #2
 8002194:	e14d      	b.n	8002432 <HAL_SPI_Transmit+0x2e4>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2203      	movs	r2, #3
 80021a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	88fa      	ldrh	r2, [r7, #6]
 80021b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	88fa      	ldrh	r2, [r7, #6]
 80021bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021e8:	d10f      	bne.n	800220a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002208:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002214:	2b40      	cmp	r3, #64	@ 0x40
 8002216:	d007      	beq.n	8002228 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002230:	d952      	bls.n	80022d8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_SPI_Transmit+0xf2>
 800223a:	8b7b      	ldrh	r3, [r7, #26]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d145      	bne.n	80022cc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002250:	1c9a      	adds	r2, r3, #2
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002264:	e032      	b.n	80022cc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b02      	cmp	r3, #2
 8002272:	d112      	bne.n	800229a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002298:	e018      	b.n	80022cc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800229a:	f7fe fe3f 	bl	8000f1c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d803      	bhi.n	80022b2 <HAL_SPI_Transmit+0x164>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d102      	bne.n	80022b8 <HAL_SPI_Transmit+0x16a>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0b2      	b.n	8002432 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1c7      	bne.n	8002266 <HAL_SPI_Transmit+0x118>
 80022d6:	e083      	b.n	80023e0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_SPI_Transmit+0x198>
 80022e0:	8b7b      	ldrh	r3, [r7, #26]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d177      	bne.n	80023d6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d912      	bls.n	8002316 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002300:	1c9a      	adds	r2, r3, #2
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b02      	subs	r3, #2
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002314:	e05f      	b.n	80023d6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	330c      	adds	r3, #12
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800233c:	e04b      	b.n	80023d6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d12b      	bne.n	80023a4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d912      	bls.n	800237c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235a:	881a      	ldrh	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002366:	1c9a      	adds	r2, r3, #2
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b02      	subs	r3, #2
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800237a:	e02c      	b.n	80023d6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023a2:	e018      	b.n	80023d6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a4:	f7fe fdba 	bl	8000f1c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d803      	bhi.n	80023bc <HAL_SPI_Transmit+0x26e>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d102      	bne.n	80023c2 <HAL_SPI_Transmit+0x274>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e02d      	b.n	8002432 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ae      	bne.n	800233e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	6839      	ldr	r1, [r7, #0]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f947 	bl	8002678 <SPI_EndRxTxTransaction>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002430:	2300      	movs	r3, #0
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800244c:	f7fe fd66 	bl	8000f1c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800245c:	f7fe fd5e 	bl	8000f1c <HAL_GetTick>
 8002460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002462:	4b39      	ldr	r3, [pc, #228]	@ (8002548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	0d1b      	lsrs	r3, r3, #20
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002472:	e054      	b.n	800251e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d050      	beq.n	800251e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800247c:	f7fe fd4e 	bl	8000f1c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	429a      	cmp	r2, r3
 800248a:	d902      	bls.n	8002492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d13d      	bne.n	800250e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024aa:	d111      	bne.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024b4:	d004      	beq.n	80024c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024be:	d107      	bne.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024d8:	d10f      	bne.n	80024fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e017      	b.n	800253e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3b01      	subs	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4013      	ands	r3, r2
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	429a      	cmp	r2, r3
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	429a      	cmp	r2, r3
 800253a:	d19b      	bne.n	8002474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000000 	.word	0x20000000

0800254c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	@ 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800255e:	f7fe fcdd 	bl	8000f1c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800256e:	f7fe fcd5 	bl	8000f1c <HAL_GetTick>
 8002572:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800257c:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00da      	lsls	r2, r3, #3
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	0d1b      	lsrs	r3, r3, #20
 800258c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002594:	e060      	b.n	8002658 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800259c:	d107      	bne.n	80025ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d050      	beq.n	8002658 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025b6:	f7fe fcb1 	bl	8000f1c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d902      	bls.n	80025cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d13d      	bne.n	8002648 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80025da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025e4:	d111      	bne.n	800260a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ee:	d004      	beq.n	80025fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f8:	d107      	bne.n	800260a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002608:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002612:	d10f      	bne.n	8002634 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002632:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e010      	b.n	800266a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	3b01      	subs	r3, #1
 8002656:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	d196      	bne.n	8002596 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3728      	adds	r7, #40	@ 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000000 	.word	0x20000000

08002678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2200      	movs	r2, #0
 800268c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ff5b 	bl	800254c <SPI_WaitFifoStateUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e027      	b.n	80026fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2180      	movs	r1, #128	@ 0x80
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff fec0 	bl	800243c <SPI_WaitFlagStateUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e014      	b.n	80026fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff ff34 	bl	800254c <SPI_WaitFifoStateUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e000      	b.n	80026fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <memset>:
 8002704:	4402      	add	r2, r0
 8002706:	4603      	mov	r3, r0
 8002708:	4293      	cmp	r3, r2
 800270a:	d100      	bne.n	800270e <memset+0xa>
 800270c:	4770      	bx	lr
 800270e:	f803 1b01 	strb.w	r1, [r3], #1
 8002712:	e7f9      	b.n	8002708 <memset+0x4>

08002714 <__libc_init_array>:
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	4d0d      	ldr	r5, [pc, #52]	@ (800274c <__libc_init_array+0x38>)
 8002718:	4c0d      	ldr	r4, [pc, #52]	@ (8002750 <__libc_init_array+0x3c>)
 800271a:	1b64      	subs	r4, r4, r5
 800271c:	10a4      	asrs	r4, r4, #2
 800271e:	2600      	movs	r6, #0
 8002720:	42a6      	cmp	r6, r4
 8002722:	d109      	bne.n	8002738 <__libc_init_array+0x24>
 8002724:	4d0b      	ldr	r5, [pc, #44]	@ (8002754 <__libc_init_array+0x40>)
 8002726:	4c0c      	ldr	r4, [pc, #48]	@ (8002758 <__libc_init_array+0x44>)
 8002728:	f000 f818 	bl	800275c <_init>
 800272c:	1b64      	subs	r4, r4, r5
 800272e:	10a4      	asrs	r4, r4, #2
 8002730:	2600      	movs	r6, #0
 8002732:	42a6      	cmp	r6, r4
 8002734:	d105      	bne.n	8002742 <__libc_init_array+0x2e>
 8002736:	bd70      	pop	{r4, r5, r6, pc}
 8002738:	f855 3b04 	ldr.w	r3, [r5], #4
 800273c:	4798      	blx	r3
 800273e:	3601      	adds	r6, #1
 8002740:	e7ee      	b.n	8002720 <__libc_init_array+0xc>
 8002742:	f855 3b04 	ldr.w	r3, [r5], #4
 8002746:	4798      	blx	r3
 8002748:	3601      	adds	r6, #1
 800274a:	e7f2      	b.n	8002732 <__libc_init_array+0x1e>
 800274c:	08002f2c 	.word	0x08002f2c
 8002750:	08002f2c 	.word	0x08002f2c
 8002754:	08002f2c 	.word	0x08002f2c
 8002758:	08002f30 	.word	0x08002f30

0800275c <_init>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	bf00      	nop
 8002760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002762:	bc08      	pop	{r3}
 8002764:	469e      	mov	lr, r3
 8002766:	4770      	bx	lr

08002768 <_fini>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	bf00      	nop
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr
