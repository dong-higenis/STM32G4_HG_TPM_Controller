
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd9c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  0800ff80  0800ff80  00010f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e44  08010e44  00012224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010e44  08010e44  00011e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e4c  08010e4c  00012224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e4c  08010e4c  00011e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010e50  08010e50  00011e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  08010e54  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000069a0  20000224  08011078  00012224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006bc4  08011078  00012bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c49  00000000  00000000  00012254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044d4  00000000  00000000  0002ae9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0002f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f65  00000000  00000000  000307b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d44  00000000  00000000  00031715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd8c  00000000  00000000  00052459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be61a  00000000  00000000  000721e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001307ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b0  00000000  00000000  00130844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001369f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000224 	.word	0x20000224
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ff64 	.word	0x0800ff64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000228 	.word	0x20000228
 800021c:	0800ff64 	.word	0x0800ff64

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b988 	b.w	8000f40 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	468e      	mov	lr, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	4688      	mov	r8, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d962      	bls.n	8000d24 <__udivmoddi4+0xdc>
 8000c5e:	fab2 f682 	clz	r6, r2
 8000c62:	b14e      	cbz	r6, 8000c78 <__udivmoddi4+0x30>
 8000c64:	f1c6 0320 	rsb	r3, r6, #32
 8000c68:	fa01 f806 	lsl.w	r8, r1, r6
 8000c6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	ea43 0808 	orr.w	r8, r3, r8
 8000c76:	40b4      	lsls	r4, r6
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c84:	0c23      	lsrs	r3, r4, #16
 8000c86:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c9c:	f080 80ea 	bcs.w	8000e74 <__udivmoddi4+0x22c>
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f240 80e7 	bls.w	8000e74 <__udivmoddi4+0x22c>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	1a9a      	subs	r2, r3, r2
 8000cac:	b2a3      	uxth	r3, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cba:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cbe:	459c      	cmp	ip, r3
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x8e>
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc8:	f080 80d6 	bcs.w	8000e78 <__udivmoddi4+0x230>
 8000ccc:	459c      	cmp	ip, r3
 8000cce:	f240 80d3 	bls.w	8000e78 <__udivmoddi4+0x230>
 8000cd2:	443b      	add	r3, r7
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cda:	eba3 030c 	sub.w	r3, r3, ip
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11d      	cbz	r5, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40f3      	lsrs	r3, r6
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d905      	bls.n	8000cfe <__udivmoddi4+0xb6>
 8000cf2:	b10d      	cbz	r5, 8000cf8 <__udivmoddi4+0xb0>
 8000cf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e7f5      	b.n	8000cea <__udivmoddi4+0xa2>
 8000cfe:	fab3 f183 	clz	r1, r3
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d146      	bne.n	8000d94 <__udivmoddi4+0x14c>
 8000d06:	4573      	cmp	r3, lr
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xc8>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 8105 	bhi.w	8000f1a <__udivmoddi4+0x2d2>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	4690      	mov	r8, r2
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e5      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d1e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d22:	e7e2      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f000 8090 	beq.w	8000e4a <__udivmoddi4+0x202>
 8000d2a:	fab2 f682 	clz	r6, r2
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f040 80a4 	bne.w	8000e7c <__udivmoddi4+0x234>
 8000d34:	1a8a      	subs	r2, r1, r2
 8000d36:	0c03      	lsrs	r3, r0, #16
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	b280      	uxth	r0, r0
 8000d3e:	b2bc      	uxth	r4, r7
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d46:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x11e>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x11c>
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f200 80e0 	bhi.w	8000f24 <__udivmoddi4+0x2dc>
 8000d64:	46c4      	mov	ip, r8
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d6c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d70:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d74:	fb02 f404 	mul.w	r4, r2, r4
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x144>
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x142>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f200 80ca 	bhi.w	8000f1e <__udivmoddi4+0x2d6>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000d94:	f1c1 0620 	rsb	r6, r1, #32
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	431f      	orrs	r7, r3
 8000da0:	fa0e f401 	lsl.w	r4, lr, r1
 8000da4:	fa20 f306 	lsr.w	r3, r0, r6
 8000da8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db0:	4323      	orrs	r3, r4
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	fa1f fc87 	uxth.w	ip, r7
 8000dba:	fbbe f0f9 	udiv	r0, lr, r9
 8000dbe:	0c1c      	lsrs	r4, r3, #16
 8000dc0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dc4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dc8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x1a0>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dda:	f080 809c 	bcs.w	8000f16 <__udivmoddi4+0x2ce>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f240 8099 	bls.w	8000f16 <__udivmoddi4+0x2ce>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	fa1f fe83 	uxth.w	lr, r3
 8000df0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df4:	fb09 4413 	mls	r4, r9, r3, r4
 8000df8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dfc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1ce>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e0a:	f080 8082 	bcs.w	8000f12 <__udivmoddi4+0x2ca>
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d97f      	bls.n	8000f12 <__udivmoddi4+0x2ca>
 8000e12:	3b02      	subs	r3, #2
 8000e14:	443c      	add	r4, r7
 8000e16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e22:	4564      	cmp	r4, ip
 8000e24:	4673      	mov	r3, lr
 8000e26:	46e1      	mov	r9, ip
 8000e28:	d362      	bcc.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e2a:	d05f      	beq.n	8000eec <__udivmoddi4+0x2a4>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x1fe>
 8000e2e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e32:	eb64 0409 	sbc.w	r4, r4, r9
 8000e36:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e3e:	431e      	orrs	r6, r3
 8000e40:	40cc      	lsrs	r4, r1
 8000e42:	e9c5 6400 	strd	r6, r4, [r5]
 8000e46:	2100      	movs	r1, #0
 8000e48:	e74f      	b.n	8000cea <__udivmoddi4+0xa2>
 8000e4a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e4e:	0c01      	lsrs	r1, r0, #16
 8000e50:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e54:	b280      	uxth	r0, r0
 8000e56:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	463c      	mov	r4, r7
 8000e60:	46b8      	mov	r8, r7
 8000e62:	46be      	mov	lr, r7
 8000e64:	2620      	movs	r6, #32
 8000e66:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e6a:	eba2 0208 	sub.w	r2, r2, r8
 8000e6e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e72:	e766      	b.n	8000d42 <__udivmoddi4+0xfa>
 8000e74:	4601      	mov	r1, r0
 8000e76:	e718      	b.n	8000caa <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e72c      	b.n	8000cd6 <__udivmoddi4+0x8e>
 8000e7c:	f1c6 0220 	rsb	r2, r6, #32
 8000e80:	fa2e f302 	lsr.w	r3, lr, r2
 8000e84:	40b7      	lsls	r7, r6
 8000e86:	40b1      	lsls	r1, r6
 8000e88:	fa20 f202 	lsr.w	r2, r0, r2
 8000e8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e90:	430a      	orrs	r2, r1
 8000e92:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e96:	b2bc      	uxth	r4, r7
 8000e98:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb08 f904 	mul.w	r9, r8, r4
 8000ea6:	40b0      	lsls	r0, r6
 8000ea8:	4589      	cmp	r9, r1
 8000eaa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eae:	b280      	uxth	r0, r0
 8000eb0:	d93e      	bls.n	8000f30 <__udivmoddi4+0x2e8>
 8000eb2:	1879      	adds	r1, r7, r1
 8000eb4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000eb8:	d201      	bcs.n	8000ebe <__udivmoddi4+0x276>
 8000eba:	4589      	cmp	r9, r1
 8000ebc:	d81f      	bhi.n	8000efe <__udivmoddi4+0x2b6>
 8000ebe:	eba1 0109 	sub.w	r1, r1, r9
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fb09 f804 	mul.w	r8, r9, r4
 8000eca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d229      	bcs.n	8000f2c <__udivmoddi4+0x2e4>
 8000ed8:	18ba      	adds	r2, r7, r2
 8000eda:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ede:	d2c4      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee0:	4542      	cmp	r2, r8
 8000ee2:	d2c2      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ee8:	443a      	add	r2, r7
 8000eea:	e7be      	b.n	8000e6a <__udivmoddi4+0x222>
 8000eec:	45f0      	cmp	r8, lr
 8000eee:	d29d      	bcs.n	8000e2c <__udivmoddi4+0x1e4>
 8000ef0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ef4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ef8:	3801      	subs	r0, #1
 8000efa:	46e1      	mov	r9, ip
 8000efc:	e796      	b.n	8000e2c <__udivmoddi4+0x1e4>
 8000efe:	eba7 0909 	sub.w	r9, r7, r9
 8000f02:	4449      	add	r1, r9
 8000f04:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f08:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0c:	fb09 f804 	mul.w	r8, r9, r4
 8000f10:	e7db      	b.n	8000eca <__udivmoddi4+0x282>
 8000f12:	4673      	mov	r3, lr
 8000f14:	e77f      	b.n	8000e16 <__udivmoddi4+0x1ce>
 8000f16:	4650      	mov	r0, sl
 8000f18:	e766      	b.n	8000de8 <__udivmoddi4+0x1a0>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e6fd      	b.n	8000d1a <__udivmoddi4+0xd2>
 8000f1e:	443b      	add	r3, r7
 8000f20:	3a02      	subs	r2, #2
 8000f22:	e733      	b.n	8000d8c <__udivmoddi4+0x144>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	443b      	add	r3, r7
 8000f2a:	e71c      	b.n	8000d66 <__udivmoddi4+0x11e>
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	e79c      	b.n	8000e6a <__udivmoddi4+0x222>
 8000f30:	eba1 0109 	sub.w	r1, r1, r9
 8000f34:	46c4      	mov	ip, r8
 8000f36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3a:	fb09 f804 	mul.w	r8, r9, r4
 8000f3e:	e7c4      	b.n	8000eca <__udivmoddi4+0x282>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <eyesInstantExpression>:

    current_eye_state = target_state;
}

void eyesInstantExpression(double wind_speed)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	ed87 0b00 	vstr	d0, [r7]
    static eye_state_t last_state = EYE_STATE_NORMAL;
    static uint32_t force_blink_timer = 0;
    uint32_t current_time = HAL_GetTick();
 8000f4e:	f003 fdc1 	bl	8004ad4 <HAL_GetTick>
 8000f52:	60b8      	str	r0, [r7, #8]

    eye_state_t new_state;

    printf("Wind: %.2f m/s\r\n", wind_speed); // 이제 정상 출력
 8000f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f58:	4842      	ldr	r0, [pc, #264]	@ (8001064 <eyesInstantExpression+0x120>)
 8000f5a:	f00c fe19 	bl	800db90 <iprintf>
    // 범위 검사 (double로)
    if (wind_speed < 0.0 || wind_speed > 50.0 || isnan(wind_speed)) {
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f6a:	f7ff fdef 	bl	8000b4c <__aeabi_dcmplt>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d112      	bne.n	8000f9a <eyesInstantExpression+0x56>
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <eyesInstantExpression+0x124>)
 8000f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f7e:	f7ff fe03 	bl	8000b88 <__aeabi_dcmpgt>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d108      	bne.n	8000f9a <eyesInstantExpression+0x56>
 8000f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f90:	f7ff fe04 	bl	8000b9c <__aeabi_dcmpun>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <eyesInstantExpression+0x5c>
        new_state = EYE_STATE_BLINK;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e029      	b.n	8000ff4 <eyesInstantExpression+0xb0>
    } else {
        if (wind_speed > 5.0) {
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	4b31      	ldr	r3, [pc, #196]	@ (800106c <eyesInstantExpression+0x128>)
 8000fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000faa:	f7ff fded 	bl	8000b88 <__aeabi_dcmpgt>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <eyesInstantExpression+0x76>
            new_state = EYE_STATE_HAPPY;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e01c      	b.n	8000ff4 <eyesInstantExpression+0xb0>
        } else if (wind_speed > 2.0) {
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc6:	f7ff fddf 	bl	8000b88 <__aeabi_dcmpgt>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <eyesInstantExpression+0x92>
            new_state = EYE_STATE_MOVE_RIGHT;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e00e      	b.n	8000ff4 <eyesInstantExpression+0xb0>
        } else if (wind_speed > 1.0) {
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <eyesInstantExpression+0x12c>)
 8000fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe0:	f7ff fdd2 	bl	8000b88 <__aeabi_dcmpgt>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <eyesInstantExpression+0xac>
            new_state = EYE_STATE_MOVE_LEFT;
 8000fea:	2305      	movs	r3, #5
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e001      	b.n	8000ff4 <eyesInstantExpression+0xb0>
        } else {
            new_state = EYE_STATE_BLINK;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	73fb      	strb	r3, [r7, #15]
        }
    }

    // 나머지 로직은 동일...
    if (new_state != last_state) {
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <eyesInstantExpression+0x130>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d020      	beq.n	8001040 <eyesInstantExpression+0xfc>
        switch(new_state) {
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2b06      	cmp	r3, #6
 8001002:	d00f      	beq.n	8001024 <eyesInstantExpression+0xe0>
 8001004:	2b06      	cmp	r3, #6
 8001006:	dc10      	bgt.n	800102a <eyesInstantExpression+0xe6>
 8001008:	2b01      	cmp	r3, #1
 800100a:	d002      	beq.n	8001012 <eyesInstantExpression+0xce>
 800100c:	2b05      	cmp	r3, #5
 800100e:	d006      	beq.n	800101e <eyesInstantExpression+0xda>
 8001010:	e00b      	b.n	800102a <eyesInstantExpression+0xe6>
            case EYE_STATE_HAPPY:
                resetEyes(false);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f9c2 	bl	800139c <resetEyes>
                eyesHappy();
 8001018:	f000 fae2 	bl	80015e0 <eyesHappy>
                break;
 800101c:	e009      	b.n	8001032 <eyesInstantExpression+0xee>
            case EYE_STATE_MOVE_LEFT:
                eyesMoveLeftBigEye();
 800101e:	f000 fd22 	bl	8001a66 <eyesMoveLeftBigEye>
                break;
 8001022:	e006      	b.n	8001032 <eyesInstantExpression+0xee>
            case EYE_STATE_MOVE_RIGHT:
                eyesMoveRightBigEye();
 8001024:	f000 fd18 	bl	8001a58 <eyesMoveRightBigEye>
                break;
 8001028:	e003      	b.n	8001032 <eyesInstantExpression+0xee>
            case EYE_STATE_BLINK:
            default:
                eyesBlink(12);
 800102a:	200c      	movs	r0, #12
 800102c:	f000 fa18 	bl	8001460 <eyesBlink>
                break;
 8001030:	bf00      	nop
        }
        last_state = new_state;
 8001032:	4a10      	ldr	r2, [pc, #64]	@ (8001074 <eyesInstantExpression+0x130>)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	7013      	strb	r3, [r2, #0]
        force_blink_timer = current_time;
 8001038:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <eyesInstantExpression+0x134>)
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	6013      	str	r3, [r2, #0]
    }
    else if ((current_time - force_blink_timer) > 3000) {
        eyesBlink(12);
        force_blink_timer = current_time;
    }
}
 800103e:	e00d      	b.n	800105c <eyesInstantExpression+0x118>
    else if ((current_time - force_blink_timer) > 3000) {
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <eyesInstantExpression+0x134>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800104c:	4293      	cmp	r3, r2
 800104e:	d905      	bls.n	800105c <eyesInstantExpression+0x118>
        eyesBlink(12);
 8001050:	200c      	movs	r0, #12
 8001052:	f000 fa05 	bl	8001460 <eyesBlink>
        force_blink_timer = current_time;
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <eyesInstantExpression+0x134>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	0800ff80 	.word	0x0800ff80
 8001068:	40490000 	.word	0x40490000
 800106c:	40140000 	.word	0x40140000
 8001070:	3ff00000 	.word	0x3ff00000
 8001074:	20000240 	.word	0x20000240
 8001078:	20000244 	.word	0x20000244

0800107c <eyesInit>:
int right_eye_height = REF_EYE_HEIGHT;
int right_eye_width = REF_EYE_WIDTH;
int corner_radius = REF_CORNER_RADIUS;

void eyesInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    resetEyes(true);
 8001080:	2001      	movs	r0, #1
 8001082:	f000 f98b 	bl	800139c <resetEyes>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <drawRoundRect>:

void drawRoundRect(int x, int y, int w, int h, int r, uint8_t color)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af02      	add	r7, sp, #8
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	603b      	str	r3, [r7, #0]
    if (r <= 0) {
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dc08      	bgt.n	80010b0 <drawRoundRect+0x26>
        // 반지름이 0이면 그냥 사각형
        apOledDrawFilledRect(x, y, w, h, color);
 800109e:	7f3b      	ldrb	r3, [r7, #28]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f001 fbf5 	bl	8002898 <apOledDrawFilledRect>
        return;
 80010ae:	e082      	b.n	80011b6 <drawRoundRect+0x12c>
    }

    // 반지름이 너무 크면 조정
    if (r > w/2) r = w/2;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	0fda      	lsrs	r2, r3, #31
 80010b4:	4413      	add	r3, r2
 80010b6:	105b      	asrs	r3, r3, #1
 80010b8:	461a      	mov	r2, r3
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4293      	cmp	r3, r2
 80010be:	dd04      	ble.n	80010ca <drawRoundRect+0x40>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	0fda      	lsrs	r2, r3, #31
 80010c4:	4413      	add	r3, r2
 80010c6:	105b      	asrs	r3, r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
    if (r > h/2) r = h/2;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	0fda      	lsrs	r2, r3, #31
 80010ce:	4413      	add	r3, r2
 80010d0:	105b      	asrs	r3, r3, #1
 80010d2:	461a      	mov	r2, r3
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	dd04      	ble.n	80010e4 <drawRoundRect+0x5a>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	0fda      	lsrs	r2, r3, #31
 80010de:	4413      	add	r3, r2
 80010e0:	105b      	asrs	r3, r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]

    // 1. 중앙 사각형들 그리기
    apOledDrawFilledRect(x + r, y, w - 2*r, h, color);           // 가로 중앙
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	18d0      	adds	r0, r2, r3
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	1ad2      	subs	r2, r2, r3
 80010f2:	7f3b      	ldrb	r3, [r7, #28]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	f001 fbcd 	bl	8002898 <apOledDrawFilledRect>
    apOledDrawFilledRect(x, y + r, r, h - 2*r, color);           // 좌측 세로
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	18d1      	adds	r1, r2, r3
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	1ad2      	subs	r2, r2, r3
 800110c:	7f3b      	ldrb	r3, [r7, #28]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4613      	mov	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f001 fbbf 	bl	8002898 <apOledDrawFilledRect>
    apOledDrawFilledRect(x + w - r, y + r, r, h - 2*r, color);   // 우측 세로
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	441a      	add	r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	1ad0      	subs	r0, r2, r3
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	18d1      	adds	r1, r2, r3
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	1ad2      	subs	r2, r2, r3
 8001132:	7f3b      	ldrb	r3, [r7, #28]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	4613      	mov	r3, r2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f001 fbad 	bl	8002898 <apOledDrawFilledRect>

    // 2. 네 모서리에 1/4 원 그리기
    drawQuarterCircle(x + r, y + r, r, 2, color);         // 좌상단 (2사분면)
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	18d0      	adds	r0, r2, r3
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	18d1      	adds	r1, r2, r3
 800114a:	7f3b      	ldrb	r3, [r7, #28]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2302      	movs	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f000 f833 	bl	80011bc <drawQuarterCircle>
    drawQuarterCircle(x + w - r - 1, y + r, r, 1, color); // 우상단 (1사분면)
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	441a      	add	r2, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	1e58      	subs	r0, r3, #1
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	18d1      	adds	r1, r2, r3
 8001168:	7f3b      	ldrb	r3, [r7, #28]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	f000 f824 	bl	80011bc <drawQuarterCircle>
    drawQuarterCircle(x + r, y + h - r - 1, r, 3, color); // 좌하단 (3사분면)
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	18d0      	adds	r0, r2, r3
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	441a      	add	r2, r3
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	1e59      	subs	r1, r3, #1
 8001186:	7f3b      	ldrb	r3, [r7, #28]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2303      	movs	r3, #3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f000 f815 	bl	80011bc <drawQuarterCircle>
    drawQuarterCircle(x + w - r - 1, y + h - r - 1, r, 4, color); // 우하단 (4사분면)
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	441a      	add	r2, r3
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	1e58      	subs	r0, r3, #1
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	441a      	add	r2, r3
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	1e59      	subs	r1, r3, #1
 80011aa:	7f3b      	ldrb	r3, [r7, #28]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2304      	movs	r3, #4
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	f000 f803 	bl	80011bc <drawQuarterCircle>
}
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <drawQuarterCircle>:

// 1/4 원 그리기 함수
void drawQuarterCircle(int cx, int cy, int radius, int quadrant, uint8_t color)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
    for (int y = 0; y <= radius; y++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e060      	b.n	8001292 <drawQuarterCircle+0xd6>
        for (int x = 0; x <= radius; x++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	e056      	b.n	8001284 <drawQuarterCircle+0xc8>
            // 원의 방정식: x² + y² ≤ r²
            if (x*x + y*y <= radius*radius) {
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	fb03 f203 	mul.w	r2, r3, r3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	fb03 f303 	mul.w	r3, r3, r3
 80011e2:	441a      	add	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	fb03 f303 	mul.w	r3, r3, r3
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dc47      	bgt.n	800127e <drawQuarterCircle+0xc2>
                int px, py;

                switch(quadrant) {
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d842      	bhi.n	800127c <drawQuarterCircle+0xc0>
 80011f6:	a201      	add	r2, pc, #4	@ (adr r2, 80011fc <drawQuarterCircle+0x40>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	0800121f 	.word	0x0800121f
 8001204:	08001231 	.word	0x08001231
 8001208:	08001243 	.word	0x08001243
                    case 1: // 1사분면 (오른쪽 위)
                        px = cx + x; py = cy - y;
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4413      	add	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	613b      	str	r3, [r7, #16]
                        break;
 800121c:	e01a      	b.n	8001254 <drawQuarterCircle+0x98>
                    case 2: // 2사분면 (왼쪽 위)
                        px = cx - x; py = cy - y;
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	613b      	str	r3, [r7, #16]
                        break;
 800122e:	e011      	b.n	8001254 <drawQuarterCircle+0x98>
                    case 3: // 3사분면 (왼쪽 아래)
                        px = cx - x; py = cy + y;
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	4413      	add	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
                        break;
 8001240:	e008      	b.n	8001254 <drawQuarterCircle+0x98>
                    case 4: // 4사분면 (오른쪽 아래)
                        px = cx + x; py = cy + y;
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4413      	add	r3, r2
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
                        break;
 8001252:	bf00      	nop
                    default:
                        continue;
                }

                if (px >= 0 && px < SCREEN_WIDTH && py >= 0 && py < SCREEN_HEIGHT) {
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db11      	blt.n	800127e <drawQuarterCircle+0xc2>
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2bff      	cmp	r3, #255	@ 0xff
 800125e:	dc0e      	bgt.n	800127e <drawQuarterCircle+0xc2>
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <drawQuarterCircle+0xc2>
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	2b3f      	cmp	r3, #63	@ 0x3f
 800126a:	dc08      	bgt.n	800127e <drawQuarterCircle+0xc2>
                    apOledDrawPixel(px, py, color);
 800126c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001270:	461a      	mov	r2, r3
 8001272:	6939      	ldr	r1, [r7, #16]
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f001 fabb 	bl	80027f0 <apOledDrawPixel>
 800127a:	e000      	b.n	800127e <drawQuarterCircle+0xc2>
                        continue;
 800127c:	bf00      	nop
        for (int x = 0; x <= radius; x++) {
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	3301      	adds	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dda4      	ble.n	80011d6 <drawQuarterCircle+0x1a>
    for (int y = 0; y <= radius; y++) {
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	3301      	adds	r3, #1
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	dd9a      	ble.n	80011d0 <drawQuarterCircle+0x14>
                }
            }
        }
    }
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <drawEyes>:

void drawEyes(bool update)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
    apOledClear(0x00);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fa74 	bl	800279c <apOledClear>

    // 좌측 눈 (중심 좌표에서 그리기)
    int x = left_eye_x - left_eye_width/2;
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <drawEyes+0xd4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0fda      	lsrs	r2, r3, #31
 80012ba:	4413      	add	r3, r2
 80012bc:	105b      	asrs	r3, r3, #1
 80012be:	425b      	negs	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <drawEyes+0xd8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
    int y = left_eye_y - left_eye_height/2;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <drawEyes+0xdc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0fda      	lsrs	r2, r3, #31
 80012d0:	4413      	add	r3, r2
 80012d2:	105b      	asrs	r3, r3, #1
 80012d4:	425b      	negs	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <drawEyes+0xe0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]

    // 경계 체크
    if (left_eye_width > 0 && left_eye_height > 0) {
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <drawEyes+0xd4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	dd11      	ble.n	800130c <drawEyes+0x68>
 80012e8:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <drawEyes+0xdc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dd0d      	ble.n	800130c <drawEyes+0x68>
        drawRoundRect(x, y, left_eye_width, left_eye_height, corner_radius, COLOR_WHITE);
 80012f0:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <drawEyes+0xd4>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <drawEyes+0xdc>)
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <drawEyes+0xe4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	200f      	movs	r0, #15
 80012fe:	9001      	str	r0, [sp, #4]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	460b      	mov	r3, r1
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f7ff febf 	bl	800108a <drawRoundRect>
    }

    // 우측 눈
    x = right_eye_x - right_eye_width/2;
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <drawEyes+0xe8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0fda      	lsrs	r2, r3, #31
 8001312:	4413      	add	r3, r2
 8001314:	105b      	asrs	r3, r3, #1
 8001316:	425b      	negs	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <drawEyes+0xec>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
    y = right_eye_y - right_eye_height/2;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <drawEyes+0xf0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0fda      	lsrs	r2, r3, #31
 8001328:	4413      	add	r3, r2
 800132a:	105b      	asrs	r3, r3, #1
 800132c:	425b      	negs	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <drawEyes+0xf4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4413      	add	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]

    if (right_eye_width > 0 && right_eye_height > 0) {
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <drawEyes+0xe8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	dd11      	ble.n	8001364 <drawEyes+0xc0>
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <drawEyes+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	dd0d      	ble.n	8001364 <drawEyes+0xc0>
        drawRoundRect(x, y, right_eye_width, right_eye_height, corner_radius, COLOR_WHITE);
 8001348:	4b10      	ldr	r3, [pc, #64]	@ (800138c <drawEyes+0xe8>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <drawEyes+0xf0>)
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <drawEyes+0xe4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	200f      	movs	r0, #15
 8001356:	9001      	str	r0, [sp, #4]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	460b      	mov	r3, r1
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff fe93 	bl	800108a <drawRoundRect>
    }

    if (update) {
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <drawEyes+0xca>
        apOledUpdate();
 800136a:	f001 fa29 	bl	80027c0 <apOledUpdate>
    }
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000014 	.word	0x20000014
 800137c:	20000018 	.word	0x20000018
 8001380:	20000010 	.word	0x20000010
 8001384:	2000001c 	.word	0x2000001c
 8001388:	20000030 	.word	0x20000030
 800138c:	2000002c 	.word	0x2000002c
 8001390:	20000020 	.word	0x20000020
 8001394:	20000028 	.word	0x20000028
 8001398:	20000024 	.word	0x20000024

0800139c <resetEyes>:

void resetEyes(bool update)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
    // 눈을 화면 중앙으로 이동
    left_eye_height = ref_eye_height;
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <resetEyes+0x90>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <resetEyes+0x94>)
 80013ac:	6013      	str	r3, [r2, #0]
    left_eye_width = ref_eye_width;
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <resetEyes+0x98>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	@ (8001438 <resetEyes+0x9c>)
 80013b4:	6013      	str	r3, [r2, #0]
    right_eye_height = ref_eye_height;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <resetEyes+0x90>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a20      	ldr	r2, [pc, #128]	@ (800143c <resetEyes+0xa0>)
 80013bc:	6013      	str	r3, [r2, #0]
    right_eye_width = ref_eye_width;
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <resetEyes+0x98>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <resetEyes+0xa4>)
 80013c4:	6013      	str	r3, [r2, #0]

    left_eye_x = SCREEN_WIDTH/2 - ref_eye_width/2 - ref_space_between_eye/2;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <resetEyes+0x98>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	0fda      	lsrs	r2, r3, #31
 80013cc:	4413      	add	r3, r2
 80013ce:	105b      	asrs	r3, r3, #1
 80013d0:	425b      	negs	r3, r3
 80013d2:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80013d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <resetEyes+0xa8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	0fd9      	lsrs	r1, r3, #31
 80013dc:	440b      	add	r3, r1
 80013de:	105b      	asrs	r3, r3, #1
 80013e0:	425b      	negs	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	4a18      	ldr	r2, [pc, #96]	@ (8001448 <resetEyes+0xac>)
 80013e6:	6013      	str	r3, [r2, #0]
    left_eye_y = SCREEN_HEIGHT/2;
 80013e8:	4b18      	ldr	r3, [pc, #96]	@ (800144c <resetEyes+0xb0>)
 80013ea:	2220      	movs	r2, #32
 80013ec:	601a      	str	r2, [r3, #0]
    right_eye_x = SCREEN_WIDTH/2 + ref_eye_width/2 + ref_space_between_eye/2;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <resetEyes+0x98>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0fda      	lsrs	r2, r3, #31
 80013f4:	4413      	add	r3, r2
 80013f6:	105b      	asrs	r3, r3, #1
 80013f8:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <resetEyes+0xa8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	0fd9      	lsrs	r1, r3, #31
 8001402:	440b      	add	r3, r1
 8001404:	105b      	asrs	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	4a11      	ldr	r2, [pc, #68]	@ (8001450 <resetEyes+0xb4>)
 800140a:	6013      	str	r3, [r2, #0]
    right_eye_y = SCREEN_HEIGHT/2;
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <resetEyes+0xb8>)
 800140e:	2220      	movs	r2, #32
 8001410:	601a      	str	r2, [r3, #0]

    corner_radius = ref_corner_radius;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <resetEyes+0xbc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a11      	ldr	r2, [pc, #68]	@ (800145c <resetEyes+0xc0>)
 8001418:	6013      	str	r3, [r2, #0]
    drawEyes(update);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff41 	bl	80012a4 <drawEyes>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000
 8001430:	20000010 	.word	0x20000010
 8001434:	20000004 	.word	0x20000004
 8001438:	20000014 	.word	0x20000014
 800143c:	20000028 	.word	0x20000028
 8001440:	2000002c 	.word	0x2000002c
 8001444:	20000008 	.word	0x20000008
 8001448:	20000018 	.word	0x20000018
 800144c:	2000001c 	.word	0x2000001c
 8001450:	20000020 	.word	0x20000020
 8001454:	20000024 	.word	0x20000024
 8001458:	2000000c 	.word	0x2000000c
 800145c:	20000030 	.word	0x20000030

08001460 <eyesBlink>:

void eyesBlink(int speed)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    resetEyes(false);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ff97 	bl	800139c <resetEyes>
    drawEyes(true);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff ff18 	bl	80012a4 <drawEyes>

    // 눈 감기
    for (int i = 0; i < 3; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e01b      	b.n	80014b2 <eyesBlink+0x52>
        left_eye_height = left_eye_height - speed;
 800147a:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <eyesBlink+0xa8>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <eyesBlink+0xa8>)
 8001484:	6013      	str	r3, [r2, #0]
        right_eye_height = right_eye_height - speed;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <eyesBlink+0xac>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	4a1f      	ldr	r2, [pc, #124]	@ (800150c <eyesBlink+0xac>)
 8001490:	6013      	str	r3, [r2, #0]
        left_eye_width = left_eye_width + 3;
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <eyesBlink+0xb0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3303      	adds	r3, #3
 8001498:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <eyesBlink+0xb0>)
 800149a:	6013      	str	r3, [r2, #0]
        right_eye_width = right_eye_width + 3;
 800149c:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <eyesBlink+0xb4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3303      	adds	r3, #3
 80014a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001514 <eyesBlink+0xb4>)
 80014a4:	6013      	str	r3, [r2, #0]
        drawEyes(true);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff fefc 	bl	80012a4 <drawEyes>
    for (int i = 0; i < 3; i++) {
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	dde0      	ble.n	800147a <eyesBlink+0x1a>

    }

    // 눈 뜨기
    for (int i = 0; i < 3; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	e01b      	b.n	80014f6 <eyesBlink+0x96>
        left_eye_height = left_eye_height + speed;
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <eyesBlink+0xa8>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <eyesBlink+0xa8>)
 80014c8:	6013      	str	r3, [r2, #0]
        right_eye_height = right_eye_height + speed;
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <eyesBlink+0xac>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <eyesBlink+0xac>)
 80014d4:	6013      	str	r3, [r2, #0]
        left_eye_width = left_eye_width - 3;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <eyesBlink+0xb0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3b03      	subs	r3, #3
 80014dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <eyesBlink+0xb0>)
 80014de:	6013      	str	r3, [r2, #0]
        right_eye_width = right_eye_width - 3;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <eyesBlink+0xb4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <eyesBlink+0xb4>)
 80014e8:	6013      	str	r3, [r2, #0]
        drawEyes(true);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff feda 	bl	80012a4 <drawEyes>
    for (int i = 0; i < 3; i++) {
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	dde0      	ble.n	80014be <eyesBlink+0x5e>

    }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000010 	.word	0x20000010
 800150c:	20000028 	.word	0x20000028
 8001510:	20000014 	.word	0x20000014
 8001514:	2000002c 	.word	0x2000002c

08001518 <eyesSleep>:

void eyesSleep(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    resetEyes(false);
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff ff3d 	bl	800139c <resetEyes>
    left_eye_height = 4;      // 원본 2 → 4 (2배)
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <eyesSleep+0x38>)
 8001524:	2204      	movs	r2, #4
 8001526:	601a      	str	r2, [r3, #0]
    left_eye_width = ref_eye_width;
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <eyesSleep+0x3c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <eyesSleep+0x40>)
 800152e:	6013      	str	r3, [r2, #0]
    right_eye_height = 4;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <eyesSleep+0x44>)
 8001532:	2204      	movs	r2, #4
 8001534:	601a      	str	r2, [r3, #0]
    right_eye_width = ref_eye_width;
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <eyesSleep+0x3c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a09      	ldr	r2, [pc, #36]	@ (8001560 <eyesSleep+0x48>)
 800153c:	6013      	str	r3, [r2, #0]
    corner_radius = 0;
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <eyesSleep+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
    drawEyes(true);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fead 	bl	80012a4 <drawEyes>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000010 	.word	0x20000010
 8001554:	20000004 	.word	0x20000004
 8001558:	20000014 	.word	0x20000014
 800155c:	20000028 	.word	0x20000028
 8001560:	2000002c 	.word	0x2000002c
 8001564:	20000030 	.word	0x20000030

08001568 <eyesWakeup>:

void eyesWakeup(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
    resetEyes(false);
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff ff14 	bl	800139c <resetEyes>
    eyesSleep();
 8001574:	f7ff ffd0 	bl	8001518 <eyesSleep>

    for (int h = 4; h <= ref_eye_height; h += 4) {  // 원본 2 → 4 (2배)
 8001578:	2304      	movs	r3, #4
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	e01c      	b.n	80015b8 <eyesWakeup+0x50>
        left_eye_height = h;
 800157e:	4a13      	ldr	r2, [pc, #76]	@ (80015cc <eyesWakeup+0x64>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6013      	str	r3, [r2, #0]
        right_eye_height = h;
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <eyesWakeup+0x68>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
        corner_radius = h/2;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	461a      	mov	r2, r3
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <eyesWakeup+0x6c>)
 8001596:	601a      	str	r2, [r3, #0]
        if (corner_radius > ref_corner_radius) {
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <eyesWakeup+0x6c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <eyesWakeup+0x70>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dd03      	ble.n	80015ac <eyesWakeup+0x44>
            corner_radius = ref_corner_radius;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <eyesWakeup+0x70>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <eyesWakeup+0x6c>)
 80015aa:	6013      	str	r3, [r2, #0]
        }
        drawEyes(true);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff fe79 	bl	80012a4 <drawEyes>
    for (int h = 4; h <= ref_eye_height; h += 4) {  // 원본 2 → 4 (2배)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3304      	adds	r3, #4
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <eyesWakeup+0x74>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dddd      	ble.n	800157e <eyesWakeup+0x16>

    }
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000010 	.word	0x20000010
 80015d0:	20000028 	.word	0x20000028
 80015d4:	20000030 	.word	0x20000030
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	20000000 	.word	0x20000000

080015e0 <eyesHappy>:

void eyesHappy(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b090      	sub	sp, #64	@ 0x40
 80015e4:	af00      	add	r7, sp, #0
    apOledClear(0x00);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f001 f8d8 	bl	800279c <apOledClear>

    int arch_height = 15;
 80015ec:	230f      	movs	r3, #15
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // 좌측 눈 - 아래쪽 볼록 아치 (∪ 모양)
    for (int x = 0; x < left_eye_width; x++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015f4:	e069      	b.n	80016ca <eyesHappy+0xea>
        float normalized_x = (float)(x - left_eye_width/2) / (left_eye_width/2);
 80015f6:	4b75      	ldr	r3, [pc, #468]	@ (80017cc <eyesHappy+0x1ec>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0fda      	lsrs	r2, r3, #31
 80015fc:	4413      	add	r3, r2
 80015fe:	105b      	asrs	r3, r3, #1
 8001600:	425b      	negs	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001606:	4413      	add	r3, r2
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001610:	4b6e      	ldr	r3, [pc, #440]	@ (80017cc <eyesHappy+0x1ec>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0fda      	lsrs	r2, r3, #31
 8001616:	4413      	add	r3, r2
 8001618:	105b      	asrs	r3, r3, #1
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001626:	edc7 7a05 	vstr	s15, [r7, #20]
        int y_offset = (int)(arch_height * (normalized_x * normalized_x)); // 역방향!
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	edd7 7a05 	vldr	s15, [r7, #20]
 8001638:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800163c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001644:	ee17 3a90 	vmov	r3, s15
 8001648:	613b      	str	r3, [r7, #16]

        int pixel_x = left_eye_x - left_eye_width/2 + x;
 800164a:	4b60      	ldr	r3, [pc, #384]	@ (80017cc <eyesHappy+0x1ec>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0fda      	lsrs	r2, r3, #31
 8001650:	4413      	add	r3, r2
 8001652:	105b      	asrs	r3, r3, #1
 8001654:	425b      	negs	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <eyesHappy+0x1f0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4413      	add	r3, r2
 800165e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001660:	4413      	add	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
        int start_y = left_eye_y - arch_height/2 + y_offset; // 아래에서 시작
 8001664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001666:	0fda      	lsrs	r2, r3, #31
 8001668:	4413      	add	r3, r2
 800166a:	105b      	asrs	r3, r3, #1
 800166c:	425b      	negs	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	4b58      	ldr	r3, [pc, #352]	@ (80017d4 <eyesHappy+0x1f4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4413      	add	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
        int end_y = left_eye_y + arch_height/2;              // 위까지
 800167c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167e:	0fda      	lsrs	r2, r3, #31
 8001680:	4413      	add	r3, r2
 8001682:	105b      	asrs	r3, r3, #1
 8001684:	461a      	mov	r2, r3
 8001686:	4b53      	ldr	r3, [pc, #332]	@ (80017d4 <eyesHappy+0x1f4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	607b      	str	r3, [r7, #4]

        for (int y = start_y; y <= end_y; y++) {
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001692:	e013      	b.n	80016bc <eyesHappy+0xdc>
            if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH &&
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0d      	blt.n	80016b6 <eyesHappy+0xd6>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2bff      	cmp	r3, #255	@ 0xff
 800169e:	dc0a      	bgt.n	80016b6 <eyesHappy+0xd6>
 80016a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db07      	blt.n	80016b6 <eyesHappy+0xd6>
                y >= 0 && y < SCREEN_HEIGHT) {
 80016a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80016aa:	dc04      	bgt.n	80016b6 <eyesHappy+0xd6>
                apOledDrawPixel(pixel_x, y, COLOR_WHITE);
 80016ac:	220f      	movs	r2, #15
 80016ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f001 f89d 	bl	80027f0 <apOledDrawPixel>
        for (int y = start_y; y <= end_y; y++) {
 80016b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b8:	3301      	adds	r3, #1
 80016ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dde7      	ble.n	8001694 <eyesHappy+0xb4>
    for (int x = 0; x < left_eye_width; x++) {
 80016c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016c6:	3301      	adds	r3, #1
 80016c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016ca:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <eyesHappy+0x1ec>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016d0:	429a      	cmp	r2, r3
 80016d2:	db90      	blt.n	80015f6 <eyesHappy+0x16>
            }
        }
    }

    // 우측 눈도 동일하게
    for (int x = 0; x < right_eye_width; x++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80016d8:	e069      	b.n	80017ae <eyesHappy+0x1ce>
        float normalized_x = (float)(x - right_eye_width/2) / (right_eye_width/2);
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <eyesHappy+0x1f8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	0fda      	lsrs	r2, r3, #31
 80016e0:	4413      	add	r3, r2
 80016e2:	105b      	asrs	r3, r3, #1
 80016e4:	425b      	negs	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ea:	4413      	add	r3, r2
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016f4:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <eyesHappy+0x1f8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0fda      	lsrs	r2, r3, #31
 80016fa:	4413      	add	r3, r2
 80016fc:	105b      	asrs	r3, r3, #1
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        int y_offset = (int)(arch_height * (normalized_x * normalized_x));
 800170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001718:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800171c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001728:	ee17 3a90 	vmov	r3, s15
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24

        int pixel_x = right_eye_x - right_eye_width/2 + x;
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <eyesHappy+0x1f8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0fda      	lsrs	r2, r3, #31
 8001734:	4413      	add	r3, r2
 8001736:	105b      	asrs	r3, r3, #1
 8001738:	425b      	negs	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <eyesHappy+0x1fc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4413      	add	r3, r2
 8001742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001744:	4413      	add	r3, r2
 8001746:	623b      	str	r3, [r7, #32]
        int start_y = right_eye_y - arch_height/2 + y_offset;
 8001748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174a:	0fda      	lsrs	r2, r3, #31
 800174c:	4413      	add	r3, r2
 800174e:	105b      	asrs	r3, r3, #1
 8001750:	425b      	negs	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <eyesHappy+0x200>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4413      	add	r3, r2
 800175a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175c:	4413      	add	r3, r2
 800175e:	61fb      	str	r3, [r7, #28]
        int end_y = right_eye_y + arch_height/2;
 8001760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001762:	0fda      	lsrs	r2, r3, #31
 8001764:	4413      	add	r3, r2
 8001766:	105b      	asrs	r3, r3, #1
 8001768:	461a      	mov	r2, r3
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <eyesHappy+0x200>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]

        for (int y = start_y; y <= end_y; y++) {
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	633b      	str	r3, [r7, #48]	@ 0x30
 8001776:	e013      	b.n	80017a0 <eyesHappy+0x1c0>
            if (pixel_x >= 0 && pixel_x < SCREEN_WIDTH &&
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0d      	blt.n	800179a <eyesHappy+0x1ba>
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	2bff      	cmp	r3, #255	@ 0xff
 8001782:	dc0a      	bgt.n	800179a <eyesHappy+0x1ba>
 8001784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001786:	2b00      	cmp	r3, #0
 8001788:	db07      	blt.n	800179a <eyesHappy+0x1ba>
                y >= 0 && y < SCREEN_HEIGHT) {
 800178a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178c:	2b3f      	cmp	r3, #63	@ 0x3f
 800178e:	dc04      	bgt.n	800179a <eyesHappy+0x1ba>
                apOledDrawPixel(pixel_x, y, COLOR_WHITE);
 8001790:	220f      	movs	r2, #15
 8001792:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001794:	6a38      	ldr	r0, [r7, #32]
 8001796:	f001 f82b 	bl	80027f0 <apOledDrawPixel>
        for (int y = start_y; y <= end_y; y++) {
 800179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179c:	3301      	adds	r3, #1
 800179e:	633b      	str	r3, [r7, #48]	@ 0x30
 80017a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dde7      	ble.n	8001778 <eyesHappy+0x198>
    for (int x = 0; x < right_eye_width; x++) {
 80017a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017aa:	3301      	adds	r3, #1
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <eyesHappy+0x1f8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017b4:	429a      	cmp	r2, r3
 80017b6:	db90      	blt.n	80016da <eyesHappy+0xfa>
            }
        }
    }

    apOledUpdate();
 80017b8:	f001 f802 	bl	80027c0 <apOledUpdate>
    HAL_Delay(500);
 80017bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017c0:	f003 f994 	bl	8004aec <HAL_Delay>
}
 80017c4:	bf00      	nop
 80017c6:	3740      	adds	r7, #64	@ 0x40
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000014 	.word	0x20000014
 80017d0:	20000018 	.word	0x20000018
 80017d4:	2000001c 	.word	0x2000001c
 80017d8:	2000002c 	.word	0x2000002c
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000024 	.word	0x20000024

080017e4 <eyesMoveBigEye>:
        HAL_Delay(50);
    }
}

void eyesMoveBigEye(int direction)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    // direction == -1: move left, direction == 1: move right
    int direction_oversize = 2;     // 원본 1 → 2 (256x64용)
 80017ec:	2302      	movs	r3, #2
 80017ee:	617b      	str	r3, [r7, #20]
    int direction_movement_amplitude = 4; // 원본 2 → 4
 80017f0:	2304      	movs	r3, #4
 80017f2:	613b      	str	r3, [r7, #16]
    int blink_amplitude = 10;       // 원본 5 → 10
 80017f4:	230a      	movs	r3, #10
 80017f6:	60fb      	str	r3, [r7, #12]

    // 1단계: 이동 + 깜빡임 + 한쪽 눈 커지기
    for (int i = 0; i < 3; i++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80017fc:	e03f      	b.n	800187e <eyesMoveBigEye+0x9a>
        left_eye_x += direction_movement_amplitude * direction;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	fb03 f202 	mul.w	r2, r3, r2
 8001806:	4b8e      	ldr	r3, [pc, #568]	@ (8001a40 <eyesMoveBigEye+0x25c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a8c      	ldr	r2, [pc, #560]	@ (8001a40 <eyesMoveBigEye+0x25c>)
 800180e:	6013      	str	r3, [r2, #0]
        right_eye_x += direction_movement_amplitude * direction;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	fb03 f202 	mul.w	r2, r3, r2
 8001818:	4b8a      	ldr	r3, [pc, #552]	@ (8001a44 <eyesMoveBigEye+0x260>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4413      	add	r3, r2
 800181e:	4a89      	ldr	r2, [pc, #548]	@ (8001a44 <eyesMoveBigEye+0x260>)
 8001820:	6013      	str	r3, [r2, #0]
        right_eye_height -= blink_amplitude;
 8001822:	4b89      	ldr	r3, [pc, #548]	@ (8001a48 <eyesMoveBigEye+0x264>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a87      	ldr	r2, [pc, #540]	@ (8001a48 <eyesMoveBigEye+0x264>)
 800182c:	6013      	str	r3, [r2, #0]
        left_eye_height -= blink_amplitude;
 800182e:	4b87      	ldr	r3, [pc, #540]	@ (8001a4c <eyesMoveBigEye+0x268>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	4a85      	ldr	r2, [pc, #532]	@ (8001a4c <eyesMoveBigEye+0x268>)
 8001838:	6013      	str	r3, [r2, #0]

        if (direction > 0) {  // 오른쪽으로 이동시 우측 눈 커지기
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	dd0c      	ble.n	800185a <eyesMoveBigEye+0x76>
            right_eye_height += direction_oversize;
 8001840:	4b81      	ldr	r3, [pc, #516]	@ (8001a48 <eyesMoveBigEye+0x264>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	4413      	add	r3, r2
 8001848:	4a7f      	ldr	r2, [pc, #508]	@ (8001a48 <eyesMoveBigEye+0x264>)
 800184a:	6013      	str	r3, [r2, #0]
            right_eye_width += direction_oversize;
 800184c:	4b80      	ldr	r3, [pc, #512]	@ (8001a50 <eyesMoveBigEye+0x26c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	4413      	add	r3, r2
 8001854:	4a7e      	ldr	r2, [pc, #504]	@ (8001a50 <eyesMoveBigEye+0x26c>)
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e00b      	b.n	8001872 <eyesMoveBigEye+0x8e>
        } else {  // 왼쪽으로 이동시 좌측 눈 커지기
            left_eye_height += direction_oversize;
 800185a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a4c <eyesMoveBigEye+0x268>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	4a7a      	ldr	r2, [pc, #488]	@ (8001a4c <eyesMoveBigEye+0x268>)
 8001864:	6013      	str	r3, [r2, #0]
            left_eye_width += direction_oversize;
 8001866:	4b7b      	ldr	r3, [pc, #492]	@ (8001a54 <eyesMoveBigEye+0x270>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	4413      	add	r3, r2
 800186e:	4a79      	ldr	r2, [pc, #484]	@ (8001a54 <eyesMoveBigEye+0x270>)
 8001870:	6013      	str	r3, [r2, #0]
        }
        drawEyes(true);
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff fd16 	bl	80012a4 <drawEyes>
    for (int i = 0; i < 3; i++) {
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	3301      	adds	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	2b02      	cmp	r3, #2
 8001882:	ddbc      	ble.n	80017fe <eyesMoveBigEye+0x1a>

    }

    // 2단계: 계속 이동 + 눈 뜨기 + 계속 커지기
    for (int i = 0; i < 3; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	e03f      	b.n	800190a <eyesMoveBigEye+0x126>
        left_eye_x += direction_movement_amplitude * direction;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	fb03 f202 	mul.w	r2, r3, r2
 8001892:	4b6b      	ldr	r3, [pc, #428]	@ (8001a40 <eyesMoveBigEye+0x25c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a69      	ldr	r2, [pc, #420]	@ (8001a40 <eyesMoveBigEye+0x25c>)
 800189a:	6013      	str	r3, [r2, #0]
        right_eye_x += direction_movement_amplitude * direction;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	fb03 f202 	mul.w	r2, r3, r2
 80018a4:	4b67      	ldr	r3, [pc, #412]	@ (8001a44 <eyesMoveBigEye+0x260>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a66      	ldr	r2, [pc, #408]	@ (8001a44 <eyesMoveBigEye+0x260>)
 80018ac:	6013      	str	r3, [r2, #0]
        right_eye_height += blink_amplitude;
 80018ae:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <eyesMoveBigEye+0x264>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a64      	ldr	r2, [pc, #400]	@ (8001a48 <eyesMoveBigEye+0x264>)
 80018b8:	6013      	str	r3, [r2, #0]
        left_eye_height += blink_amplitude;
 80018ba:	4b64      	ldr	r3, [pc, #400]	@ (8001a4c <eyesMoveBigEye+0x268>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a62      	ldr	r2, [pc, #392]	@ (8001a4c <eyesMoveBigEye+0x268>)
 80018c4:	6013      	str	r3, [r2, #0]

        if (direction > 0) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	dd0c      	ble.n	80018e6 <eyesMoveBigEye+0x102>
            right_eye_height += direction_oversize;
 80018cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001a48 <eyesMoveBigEye+0x264>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a5c      	ldr	r2, [pc, #368]	@ (8001a48 <eyesMoveBigEye+0x264>)
 80018d6:	6013      	str	r3, [r2, #0]
            right_eye_width += direction_oversize;
 80018d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001a50 <eyesMoveBigEye+0x26c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	4413      	add	r3, r2
 80018e0:	4a5b      	ldr	r2, [pc, #364]	@ (8001a50 <eyesMoveBigEye+0x26c>)
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e00b      	b.n	80018fe <eyesMoveBigEye+0x11a>
        } else {
            left_eye_height += direction_oversize;
 80018e6:	4b59      	ldr	r3, [pc, #356]	@ (8001a4c <eyesMoveBigEye+0x268>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a57      	ldr	r2, [pc, #348]	@ (8001a4c <eyesMoveBigEye+0x268>)
 80018f0:	6013      	str	r3, [r2, #0]
            left_eye_width += direction_oversize;
 80018f2:	4b58      	ldr	r3, [pc, #352]	@ (8001a54 <eyesMoveBigEye+0x270>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a56      	ldr	r2, [pc, #344]	@ (8001a54 <eyesMoveBigEye+0x270>)
 80018fc:	6013      	str	r3, [r2, #0]
        }
        drawEyes(true);
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff fcd0 	bl	80012a4 <drawEyes>
    for (int i = 0; i < 3; i++) {
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	3301      	adds	r3, #1
 8001908:	623b      	str	r3, [r7, #32]
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	2b02      	cmp	r3, #2
 800190e:	ddbc      	ble.n	800188a <eyesMoveBigEye+0xa6>

    }

    HAL_Delay(1000); // 1초 대기
 8001910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001914:	f003 f8ea 	bl	8004aec <HAL_Delay>

    // 3단계: 원래 위치로 돌아가기 + 깜빡임 + 눈 작아지기
    for (int i = 0; i < 3; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	e03f      	b.n	800199e <eyesMoveBigEye+0x1ba>
        left_eye_x -= direction_movement_amplitude * direction;
 800191e:	4b48      	ldr	r3, [pc, #288]	@ (8001a40 <eyesMoveBigEye+0x25c>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	4a44      	ldr	r2, [pc, #272]	@ (8001a40 <eyesMoveBigEye+0x25c>)
 800192e:	6013      	str	r3, [r2, #0]
        right_eye_x -= direction_movement_amplitude * direction;
 8001930:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <eyesMoveBigEye+0x260>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	4a41      	ldr	r2, [pc, #260]	@ (8001a44 <eyesMoveBigEye+0x260>)
 8001940:	6013      	str	r3, [r2, #0]
        right_eye_height -= blink_amplitude;
 8001942:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <eyesMoveBigEye+0x264>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a48 <eyesMoveBigEye+0x264>)
 800194c:	6013      	str	r3, [r2, #0]
        left_eye_height -= blink_amplitude;
 800194e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a4c <eyesMoveBigEye+0x268>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	4a3d      	ldr	r2, [pc, #244]	@ (8001a4c <eyesMoveBigEye+0x268>)
 8001958:	6013      	str	r3, [r2, #0]

        if (direction > 0) {
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	dd0c      	ble.n	800197a <eyesMoveBigEye+0x196>
            right_eye_height -= direction_oversize;
 8001960:	4b39      	ldr	r3, [pc, #228]	@ (8001a48 <eyesMoveBigEye+0x264>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	4a37      	ldr	r2, [pc, #220]	@ (8001a48 <eyesMoveBigEye+0x264>)
 800196a:	6013      	str	r3, [r2, #0]
            right_eye_width -= direction_oversize;
 800196c:	4b38      	ldr	r3, [pc, #224]	@ (8001a50 <eyesMoveBigEye+0x26c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a36      	ldr	r2, [pc, #216]	@ (8001a50 <eyesMoveBigEye+0x26c>)
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e00b      	b.n	8001992 <eyesMoveBigEye+0x1ae>
        } else {
            left_eye_height -= direction_oversize;
 800197a:	4b34      	ldr	r3, [pc, #208]	@ (8001a4c <eyesMoveBigEye+0x268>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a32      	ldr	r2, [pc, #200]	@ (8001a4c <eyesMoveBigEye+0x268>)
 8001984:	6013      	str	r3, [r2, #0]
            left_eye_width -= direction_oversize;
 8001986:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <eyesMoveBigEye+0x270>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	4a31      	ldr	r2, [pc, #196]	@ (8001a54 <eyesMoveBigEye+0x270>)
 8001990:	6013      	str	r3, [r2, #0]
        }
        drawEyes(true);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff fc86 	bl	80012a4 <drawEyes>
    for (int i = 0; i < 3; i++) {
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3301      	adds	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	ddbc      	ble.n	800191e <eyesMoveBigEye+0x13a>

    }

    // 4단계: 완전히 원래대로
    for (int i = 0; i < 3; i++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	e03f      	b.n	8001a2a <eyesMoveBigEye+0x246>
        left_eye_x -= direction_movement_amplitude * direction;
 80019aa:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <eyesMoveBigEye+0x25c>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	4a21      	ldr	r2, [pc, #132]	@ (8001a40 <eyesMoveBigEye+0x25c>)
 80019ba:	6013      	str	r3, [r2, #0]
        right_eye_x -= direction_movement_amplitude * direction;
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <eyesMoveBigEye+0x260>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001a44 <eyesMoveBigEye+0x260>)
 80019cc:	6013      	str	r3, [r2, #0]
        right_eye_height += blink_amplitude;
 80019ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <eyesMoveBigEye+0x264>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <eyesMoveBigEye+0x264>)
 80019d8:	6013      	str	r3, [r2, #0]
        left_eye_height += blink_amplitude;
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <eyesMoveBigEye+0x268>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a4c <eyesMoveBigEye+0x268>)
 80019e4:	6013      	str	r3, [r2, #0]

        if (direction > 0) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dd0c      	ble.n	8001a06 <eyesMoveBigEye+0x222>
            right_eye_height -= direction_oversize;
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <eyesMoveBigEye+0x264>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <eyesMoveBigEye+0x264>)
 80019f6:	6013      	str	r3, [r2, #0]
            right_eye_width -= direction_oversize;
 80019f8:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <eyesMoveBigEye+0x26c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a13      	ldr	r2, [pc, #76]	@ (8001a50 <eyesMoveBigEye+0x26c>)
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e00b      	b.n	8001a1e <eyesMoveBigEye+0x23a>
        } else {
            left_eye_height -= direction_oversize;
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <eyesMoveBigEye+0x268>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a4c <eyesMoveBigEye+0x268>)
 8001a10:	6013      	str	r3, [r2, #0]
            left_eye_width -= direction_oversize;
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <eyesMoveBigEye+0x270>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <eyesMoveBigEye+0x270>)
 8001a1c:	6013      	str	r3, [r2, #0]
        }
        drawEyes(true);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff fc40 	bl	80012a4 <drawEyes>
    for (int i = 0; i < 3; i++) {
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	3301      	adds	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	ddbc      	ble.n	80019aa <eyesMoveBigEye+0x1c6>

    }

    resetEyes(true);  // 완전히 원래 상태로 복원
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fcb3 	bl	800139c <resetEyes>
}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	@ 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000018 	.word	0x20000018
 8001a44:	20000020 	.word	0x20000020
 8001a48:	20000028 	.word	0x20000028
 8001a4c:	20000010 	.word	0x20000010
 8001a50:	2000002c 	.word	0x2000002c
 8001a54:	20000014 	.word	0x20000014

08001a58 <eyesMoveRightBigEye>:

void eyesMoveRightBigEye(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
    eyesMoveBigEye(1);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7ff fec1 	bl	80017e4 <eyesMoveBigEye>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <eyesMoveLeftBigEye>:

void eyesMoveLeftBigEye(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
    eyesMoveBigEye(-1);
 8001a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6e:	f7ff feb9 	bl	80017e4 <eyesMoveBigEye>
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <eyesSurprisedAnimation>:

void eyesSurprisedAnimation(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	@ 0x38
 8001a7c:	af02      	add	r7, sp, #8
    // 1단계: 일반 눈에서 시작
    resetEyes(false);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fc8c 	bl	800139c <resetEyes>
    drawEyes(true);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7ff fc0d 	bl	80012a4 <drawEyes>
    HAL_Delay(100);
 8001a8a:	2064      	movs	r0, #100	@ 0x64
 8001a8c:	f003 f82e 	bl	8004aec <HAL_Delay>

    // 2단계: 아주 살짝만 커지기 (미세한 변화!)
    for (int i = 0; i < 3; i++) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a94:	e051      	b.n	8001b3a <eyesSurprisedAnimation+0xc2>
        apOledClear(0x00);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 fe80 	bl	800279c <apOledClear>

        // 기존 ref_eye_width=60, ref_eye_height=50
        // 최대 6픽셀만 증가하게 변경!
        int growth = i * 8; // 0, 2, 4픽셀만 증가
 8001a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	60bb      	str	r3, [r7, #8]
        int current_width = ref_eye_width + growth;
 8001aa2:	4b83      	ldr	r3, [pc, #524]	@ (8001cb0 <eyesSurprisedAnimation+0x238>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	607b      	str	r3, [r7, #4]
        int current_height = ref_eye_height + growth;
 8001aac:	4b81      	ldr	r3, [pc, #516]	@ (8001cb4 <eyesSurprisedAnimation+0x23c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	603b      	str	r3, [r7, #0]

        // 원형 대신 둥근 사각형으로 (더 자연스럽고 작음)
        drawRoundRect(left_eye_x - current_width/2, left_eye_y - current_height/2,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	0fda      	lsrs	r2, r3, #31
 8001aba:	4413      	add	r3, r2
 8001abc:	105b      	asrs	r3, r3, #1
 8001abe:	425b      	negs	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb8 <eyesSurprisedAnimation+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	18d0      	adds	r0, r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	0fda      	lsrs	r2, r3, #31
 8001acc:	4413      	add	r3, r2
 8001ace:	105b      	asrs	r3, r3, #1
 8001ad0:	425b      	negs	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b79      	ldr	r3, [pc, #484]	@ (8001cbc <eyesSurprisedAnimation+0x244>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	18d1      	adds	r1, r2, r3
 8001ada:	4b79      	ldr	r3, [pc, #484]	@ (8001cc0 <eyesSurprisedAnimation+0x248>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae0:	4413      	add	r3, r2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	9201      	str	r2, [sp, #4]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	f7ff facd 	bl	800108a <drawRoundRect>
                     current_width, current_height, corner_radius + i, COLOR_WHITE);
        drawRoundRect(right_eye_x - current_width/2, right_eye_y - current_height/2,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0fda      	lsrs	r2, r3, #31
 8001af4:	4413      	add	r3, r2
 8001af6:	105b      	asrs	r3, r3, #1
 8001af8:	425b      	negs	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b71      	ldr	r3, [pc, #452]	@ (8001cc4 <eyesSurprisedAnimation+0x24c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	18d0      	adds	r0, r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	0fda      	lsrs	r2, r3, #31
 8001b06:	4413      	add	r3, r2
 8001b08:	105b      	asrs	r3, r3, #1
 8001b0a:	425b      	negs	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc8 <eyesSurprisedAnimation+0x250>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	18d1      	adds	r1, r2, r3
 8001b14:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc0 <eyesSurprisedAnimation+0x248>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1a:	4413      	add	r3, r2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	9201      	str	r2, [sp, #4]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	f7ff fab0 	bl	800108a <drawRoundRect>
                     current_width, current_height, corner_radius + i, COLOR_WHITE);

        apOledUpdate();
 8001b2a:	f000 fe49 	bl	80027c0 <apOledUpdate>
        HAL_Delay(20);
 8001b2e:	2014      	movs	r0, #20
 8001b30:	f002 ffdc 	bl	8004aec <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8001b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b36:	3301      	adds	r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	ddaa      	ble.n	8001a96 <eyesSurprisedAnimation+0x1e>
    }

    // 3단계: 아주 살짝만 떨기 (미묘한 움직임)
    for (int i = 0; i < 6; i++) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b44:	e056      	b.n	8001bf4 <eyesSurprisedAnimation+0x17c>
        int shake_x = (i % 2 == 0) ? 1 : -1; // 1픽셀씩만 흔들기
 8001b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <eyesSurprisedAnimation+0xdc>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e001      	b.n	8001b58 <eyesSurprisedAnimation+0xe0>
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
 8001b58:	617b      	str	r3, [r7, #20]

        apOledClear(0x00);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 fe1e 	bl	800279c <apOledClear>

        // 놀란 상태 크기: 기존 + 4픽셀만
        int surprised_width = ref_eye_width + 12;
 8001b60:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <eyesSurprisedAnimation+0x238>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	330c      	adds	r3, #12
 8001b66:	613b      	str	r3, [r7, #16]
        int surprised_height = ref_eye_height + 12;
 8001b68:	4b52      	ldr	r3, [pc, #328]	@ (8001cb4 <eyesSurprisedAnimation+0x23c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	330c      	adds	r3, #12
 8001b6e:	60fb      	str	r3, [r7, #12]

        // 미세하게 흔들리는 눈
        drawRoundRect(left_eye_x - surprised_width/2 + shake_x,
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	0fda      	lsrs	r2, r3, #31
 8001b74:	4413      	add	r3, r2
 8001b76:	105b      	asrs	r3, r3, #1
 8001b78:	425b      	negs	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb8 <eyesSurprisedAnimation+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	441a      	add	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	18d0      	adds	r0, r2, r3
                     left_eye_y - surprised_height/2,
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	0fda      	lsrs	r2, r3, #31
 8001b8a:	4413      	add	r3, r2
 8001b8c:	105b      	asrs	r3, r3, #1
 8001b8e:	425b      	negs	r3, r3
 8001b90:	461a      	mov	r2, r3
        drawRoundRect(left_eye_x - surprised_width/2 + shake_x,
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <eyesSurprisedAnimation+0x244>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	18d1      	adds	r1, r2, r3
 8001b98:	4b49      	ldr	r3, [pc, #292]	@ (8001cc0 <eyesSurprisedAnimation+0x248>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	9201      	str	r2, [sp, #4]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	f7ff fa70 	bl	800108a <drawRoundRect>
                     surprised_width, surprised_height, corner_radius, COLOR_WHITE);
        drawRoundRect(right_eye_x - surprised_width/2 + shake_x,
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	0fda      	lsrs	r2, r3, #31
 8001bae:	4413      	add	r3, r2
 8001bb0:	105b      	asrs	r3, r3, #1
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <eyesSurprisedAnimation+0x24c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	441a      	add	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	18d0      	adds	r0, r2, r3
                     right_eye_y - surprised_height/2,
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	0fda      	lsrs	r2, r3, #31
 8001bc4:	4413      	add	r3, r2
 8001bc6:	105b      	asrs	r3, r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	461a      	mov	r2, r3
        drawRoundRect(right_eye_x - surprised_width/2 + shake_x,
 8001bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc8 <eyesSurprisedAnimation+0x250>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	18d1      	adds	r1, r2, r3
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <eyesSurprisedAnimation+0x248>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	9201      	str	r2, [sp, #4]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	f7ff fa53 	bl	800108a <drawRoundRect>
                     surprised_width, surprised_height, corner_radius, COLOR_WHITE);

        apOledUpdate();
 8001be4:	f000 fdec 	bl	80027c0 <apOledUpdate>
        HAL_Delay(20);
 8001be8:	2014      	movs	r0, #20
 8001bea:	f002 ff7f 	bl	8004aec <HAL_Delay>
    for (int i = 0; i < 6; i++) {
 8001bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	dda5      	ble.n	8001b46 <eyesSurprisedAnimation+0xce>
    }

    // 4단계: 빠르게 원래대로
    for (int i = 2; i >= 0; i--) {
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	e04d      	b.n	8001c9c <eyesSurprisedAnimation+0x224>
        apOledClear(0x00);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f000 fdcb 	bl	800279c <apOledClear>

        int shrink = i * 2; // 4, 2, 0픽셀 감소
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	623b      	str	r3, [r7, #32]
        int current_width = ref_eye_width + shrink;
 8001c0c:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <eyesSurprisedAnimation+0x238>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	4413      	add	r3, r2
 8001c14:	61fb      	str	r3, [r7, #28]
        int current_height = ref_eye_height + shrink;
 8001c16:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <eyesSurprisedAnimation+0x23c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a3a      	ldr	r2, [r7, #32]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]

        drawRoundRect(left_eye_x - current_width/2, left_eye_y - current_height/2,
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	0fda      	lsrs	r2, r3, #31
 8001c24:	4413      	add	r3, r2
 8001c26:	105b      	asrs	r3, r3, #1
 8001c28:	425b      	negs	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <eyesSurprisedAnimation+0x240>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	18d0      	adds	r0, r2, r3
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	0fda      	lsrs	r2, r3, #31
 8001c36:	4413      	add	r3, r2
 8001c38:	105b      	asrs	r3, r3, #1
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <eyesSurprisedAnimation+0x244>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	18d1      	adds	r1, r2, r3
 8001c44:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <eyesSurprisedAnimation+0x248>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	220f      	movs	r2, #15
 8001c4a:	9201      	str	r2, [sp, #4]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f7ff fa1a 	bl	800108a <drawRoundRect>
                     current_width, current_height, corner_radius, COLOR_WHITE);
        drawRoundRect(right_eye_x - current_width/2, right_eye_y - current_height/2,
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	0fda      	lsrs	r2, r3, #31
 8001c5a:	4413      	add	r3, r2
 8001c5c:	105b      	asrs	r3, r3, #1
 8001c5e:	425b      	negs	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <eyesSurprisedAnimation+0x24c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	18d0      	adds	r0, r2, r3
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	0fda      	lsrs	r2, r3, #31
 8001c6c:	4413      	add	r3, r2
 8001c6e:	105b      	asrs	r3, r3, #1
 8001c70:	425b      	negs	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <eyesSurprisedAnimation+0x250>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	18d1      	adds	r1, r2, r3
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <eyesSurprisedAnimation+0x248>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	220f      	movs	r2, #15
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	f7ff f9ff 	bl	800108a <drawRoundRect>
                     current_width, current_height, corner_radius, COLOR_WHITE);

        apOledUpdate();
 8001c8c:	f000 fd98 	bl	80027c0 <apOledUpdate>
        HAL_Delay(20);
 8001c90:	2014      	movs	r0, #20
 8001c92:	f002 ff2b 	bl	8004aec <HAL_Delay>
    for (int i = 2; i >= 0; i--) {
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	daae      	bge.n	8001c00 <eyesSurprisedAnimation+0x188>
    }

    // 원래 상태로 복귀
    resetEyes(true);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f7ff fb7a 	bl	800139c <resetEyes>
}
 8001ca8:	bf00      	nop
 8001caa:	3730      	adds	r7, #48	@ 0x30
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000018 	.word	0x20000018
 8001cbc:	2000001c 	.word	0x2000001c
 8001cc0:	20000030 	.word	0x20000030
 8001cc4:	20000020 	.word	0x20000020
 8001cc8:	20000024 	.word	0x20000024

08001ccc <eyesSadAnimation>:

void eyesSadAnimation(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b096      	sub	sp, #88	@ 0x58
 8001cd0:	af02      	add	r7, sp, #8
    // 1단계: 일반 눈에서 점점 슬퍼지기
    for (int sad_level = 0; sad_level < 8; sad_level++) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cd6:	e05d      	b.n	8001d94 <eyesSadAnimation+0xc8>
        apOledClear(0x00);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 fd5f 	bl	800279c <apOledClear>

        // 점점 작아지고 아래로 처지는 눈
        int current_width = ref_eye_width - sad_level * 2;      // 점점 작아짐
 8001cde:	4ba8      	ldr	r3, [pc, #672]	@ (8001f80 <eyesSadAnimation+0x2b4>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	60fb      	str	r3, [r7, #12]
        int current_height = ref_eye_height - sad_level * 3;    // 더 많이 작아짐
 8001cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cec:	461a      	mov	r2, r3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	1ad2      	subs	r2, r2, r3
 8001cf2:	4ba4      	ldr	r3, [pc, #656]	@ (8001f84 <eyesSadAnimation+0x2b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]
        int droop_offset = sad_level * 2;                       // 아래로 처짐
 8001cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]

        // 좌측 슬픈 눈 (작고 아래로)
        drawRoundRect(left_eye_x - current_width/2,
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	0fda      	lsrs	r2, r3, #31
 8001d04:	4413      	add	r3, r2
 8001d06:	105b      	asrs	r3, r3, #1
 8001d08:	425b      	negs	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b9e      	ldr	r3, [pc, #632]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	18d0      	adds	r0, r2, r3
                     left_eye_y - current_height/2 + droop_offset,
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	0fda      	lsrs	r2, r3, #31
 8001d16:	4413      	add	r3, r2
 8001d18:	105b      	asrs	r3, r3, #1
 8001d1a:	425b      	negs	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b9b      	ldr	r3, [pc, #620]	@ (8001f8c <eyesSadAnimation+0x2c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	441a      	add	r2, r3
        drawRoundRect(left_eye_x - current_width/2,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	18d1      	adds	r1, r2, r3
 8001d28:	4b99      	ldr	r3, [pc, #612]	@ (8001f90 <eyesSadAnimation+0x2c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0fda      	lsrs	r2, r3, #31
 8001d2e:	4413      	add	r3, r2
 8001d30:	105b      	asrs	r3, r3, #1
 8001d32:	461a      	mov	r2, r3
 8001d34:	230f      	movs	r3, #15
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	9200      	str	r2, [sp, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	f7ff f9a4 	bl	800108a <drawRoundRect>
                     current_width, current_height, corner_radius/2, COLOR_WHITE);

        // 우측 슬픈 눈 (작고 아래로)
        drawRoundRect(right_eye_x - current_width/2,
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	0fda      	lsrs	r2, r3, #31
 8001d46:	4413      	add	r3, r2
 8001d48:	105b      	asrs	r3, r3, #1
 8001d4a:	425b      	negs	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b91      	ldr	r3, [pc, #580]	@ (8001f94 <eyesSadAnimation+0x2c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	18d0      	adds	r0, r2, r3
                     right_eye_y - current_height/2 + droop_offset,
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0fda      	lsrs	r2, r3, #31
 8001d58:	4413      	add	r3, r2
 8001d5a:	105b      	asrs	r3, r3, #1
 8001d5c:	425b      	negs	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b8d      	ldr	r3, [pc, #564]	@ (8001f98 <eyesSadAnimation+0x2cc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	441a      	add	r2, r3
        drawRoundRect(right_eye_x - current_width/2,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	18d1      	adds	r1, r2, r3
 8001d6a:	4b89      	ldr	r3, [pc, #548]	@ (8001f90 <eyesSadAnimation+0x2c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0fda      	lsrs	r2, r3, #31
 8001d70:	4413      	add	r3, r2
 8001d72:	105b      	asrs	r3, r3, #1
 8001d74:	461a      	mov	r2, r3
 8001d76:	230f      	movs	r3, #15
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	9200      	str	r2, [sp, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f7ff f983 	bl	800108a <drawRoundRect>
                     current_width, current_height, corner_radius/2, COLOR_WHITE);

        apOledUpdate();
 8001d84:	f000 fd1c 	bl	80027c0 <apOledUpdate>
        HAL_Delay(10);
 8001d88:	200a      	movs	r0, #10
 8001d8a:	f002 feaf 	bl	8004aec <HAL_Delay>
    for (int sad_level = 0; sad_level < 8; sad_level++) {
 8001d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d90:	3301      	adds	r3, #1
 8001d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d96:	2b07      	cmp	r3, #7
 8001d98:	dd9e      	ble.n	8001cd8 <eyesSadAnimation+0xc>
    }

    HAL_Delay(30);
 8001d9a:	201e      	movs	r0, #30
 8001d9c:	f002 fea6 	bl	8004aec <HAL_Delay>

    // 2단계: 슬픈 눈에서 엄청 큰 눈물 떨어지기
    for (int tear_drop = 0; tear_drop < 25; tear_drop++) {
 8001da0:	2300      	movs	r3, #0
 8001da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001da4:	e137      	b.n	8002016 <eyesSadAnimation+0x34a>
        apOledClear(0x00);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 fcf8 	bl	800279c <apOledClear>
        // 최종 슬픈 눈 (아주 작고 아래로 처진)
        int sad_width = ref_eye_width - 14;
 8001dac:	4b74      	ldr	r3, [pc, #464]	@ (8001f80 <eyesSadAnimation+0x2b4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3b0e      	subs	r3, #14
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int sad_height = ref_eye_height - 20;
 8001db4:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <eyesSadAnimation+0x2b8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b14      	subs	r3, #20
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
        int final_droop = 15;
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24

        drawRoundRect(left_eye_x - sad_width/2,
 8001dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc2:	0fda      	lsrs	r2, r3, #31
 8001dc4:	4413      	add	r3, r2
 8001dc6:	105b      	asrs	r3, r3, #1
 8001dc8:	425b      	negs	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b6e      	ldr	r3, [pc, #440]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	18d0      	adds	r0, r2, r3
                     left_eye_y - sad_height/2 + final_droop,
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	0fda      	lsrs	r2, r3, #31
 8001dd6:	4413      	add	r3, r2
 8001dd8:	105b      	asrs	r3, r3, #1
 8001dda:	425b      	negs	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b6b      	ldr	r3, [pc, #428]	@ (8001f8c <eyesSadAnimation+0x2c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	441a      	add	r2, r3
        drawRoundRect(left_eye_x - sad_width/2,
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	18d1      	adds	r1, r2, r3
 8001de8:	230f      	movs	r3, #15
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	2302      	movs	r3, #2
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001df4:	f7ff f949 	bl	800108a <drawRoundRect>
                     sad_width, sad_height, 2, COLOR_WHITE);
        drawRoundRect(right_eye_x - sad_width/2,
 8001df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfa:	0fda      	lsrs	r2, r3, #31
 8001dfc:	4413      	add	r3, r2
 8001dfe:	105b      	asrs	r3, r3, #1
 8001e00:	425b      	negs	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b63      	ldr	r3, [pc, #396]	@ (8001f94 <eyesSadAnimation+0x2c8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	18d0      	adds	r0, r2, r3
                     right_eye_y - sad_height/2 + final_droop,
 8001e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0c:	0fda      	lsrs	r2, r3, #31
 8001e0e:	4413      	add	r3, r2
 8001e10:	105b      	asrs	r3, r3, #1
 8001e12:	425b      	negs	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b60      	ldr	r3, [pc, #384]	@ (8001f98 <eyesSadAnimation+0x2cc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	441a      	add	r2, r3
        drawRoundRect(right_eye_x - sad_width/2,
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	18d1      	adds	r1, r2, r3
 8001e20:	230f      	movs	r3, #15
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	2302      	movs	r3, #2
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e2c:	f7ff f92d 	bl	800108a <drawRoundRect>
                     sad_width, sad_height, 2, COLOR_WHITE);

        // 좌측 엄청 큰 눈물 (5x5 크기!)
        int tear_y = left_eye_y + final_droop + sad_height/2 + 3 + tear_drop * 2;
 8001e30:	4b56      	ldr	r3, [pc, #344]	@ (8001f8c <eyesSadAnimation+0x2c0>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	441a      	add	r2, r3
 8001e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3a:	0fd9      	lsrs	r1, r3, #31
 8001e3c:	440b      	add	r3, r1
 8001e3e:	105b      	asrs	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	1cda      	adds	r2, r3, #3
 8001e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	623b      	str	r3, [r7, #32]
        if (tear_y + 4 < SCREEN_HEIGHT) {
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e50:	dc5e      	bgt.n	8001f10 <eyesSadAnimation+0x244>
            // 큰 눈물 방울 (5x5)
            apOledDrawFilledRect(left_eye_x-2, tear_y, 5, 5, 0x0F);    // 메인 방울
 8001e52:	4b4d      	ldr	r3, [pc, #308]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1e98      	subs	r0, r3, #2
 8001e58:	230f      	movs	r3, #15
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	2205      	movs	r2, #5
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	f000 fd19 	bl	8002898 <apOledDrawFilledRect>
            apOledDrawPixel(left_eye_x-2, tear_y-1, 0x0A);             // 위쪽 테두리
 8001e66:	4b48      	ldr	r3, [pc, #288]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1e98      	subs	r0, r3, #2
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	220a      	movs	r2, #10
 8001e72:	4619      	mov	r1, r3
 8001e74:	f000 fcbc 	bl	80027f0 <apOledDrawPixel>
            apOledDrawPixel(left_eye_x+2, tear_y-1, 0x0A);
 8001e78:	4b43      	ldr	r3, [pc, #268]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1c98      	adds	r0, r3, #2
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	220a      	movs	r2, #10
 8001e84:	4619      	mov	r1, r3
 8001e86:	f000 fcb3 	bl	80027f0 <apOledDrawPixel>
            apOledDrawPixel(left_eye_x, tear_y-1, 0x0C);               // 위쪽 중앙
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	220c      	movs	r2, #12
 8001e94:	4619      	mov	r1, r3
 8001e96:	f000 fcab 	bl	80027f0 <apOledDrawPixel>

            // 긴 눈물 흔적 (수직으로 길게)
            for (int trail = 1; trail <= 8 && tear_drop > trail; trail++) {
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e9e:	e030      	b.n	8001f02 <eyesSadAnimation+0x236>
                int trail_y = tear_y - trail * 2;
 8001ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	6a3a      	ldr	r2, [r7, #32]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	61fb      	str	r3, [r7, #28]
                uint8_t trail_brightness = 0x0C - (trail * 1);
 8001eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f1c3 030c 	rsb	r3, r3, #12
 8001eb2:	76fb      	strb	r3, [r7, #27]
                if (trail_brightness > 0 && trail_y >= 0) {
 8001eb4:	7efb      	ldrb	r3, [r7, #27]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d020      	beq.n	8001efc <eyesSadAnimation+0x230>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db1d      	blt.n	8001efc <eyesSadAnimation+0x230>
                    apOledDrawPixel(left_eye_x, trail_y, trail_brightness);
 8001ec0:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	7efa      	ldrb	r2, [r7, #27]
 8001ec6:	69f9      	ldr	r1, [r7, #28]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fc91 	bl	80027f0 <apOledDrawPixel>
                    if (trail < 4) { // 처음 몇 개는 두껍게
 8001ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	dc13      	bgt.n	8001efc <eyesSadAnimation+0x230>
                        apOledDrawPixel(left_eye_x-1, trail_y, trail_brightness-2);
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1e58      	subs	r0, r3, #1
 8001eda:	7efb      	ldrb	r3, [r7, #27]
 8001edc:	3b02      	subs	r3, #2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	69f9      	ldr	r1, [r7, #28]
 8001ee4:	f000 fc84 	bl	80027f0 <apOledDrawPixel>
                        apOledDrawPixel(left_eye_x+1, trail_y, trail_brightness-2);
 8001ee8:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <eyesSadAnimation+0x2bc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c58      	adds	r0, r3, #1
 8001eee:	7efb      	ldrb	r3, [r7, #27]
 8001ef0:	3b02      	subs	r3, #2
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	69f9      	ldr	r1, [r7, #28]
 8001ef8:	f000 fc7a 	bl	80027f0 <apOledDrawPixel>
            for (int trail = 1; trail <= 8 && tear_drop > trail; trail++) {
 8001efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001efe:	3301      	adds	r3, #1
 8001f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	dc03      	bgt.n	8001f10 <eyesSadAnimation+0x244>
 8001f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dcc7      	bgt.n	8001ea0 <eyesSadAnimation+0x1d4>
                }
            }
        }

        // 우측 엄청 큰 눈물 (5x5 크기!)
        tear_y = right_eye_y + final_droop + sad_height/2 + 3 + tear_drop * 2;
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <eyesSadAnimation+0x2cc>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	441a      	add	r2, r3
 8001f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1a:	0fd9      	lsrs	r1, r3, #31
 8001f1c:	440b      	add	r3, r1
 8001f1e:	105b      	asrs	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	1cda      	adds	r2, r3, #3
 8001f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	623b      	str	r3, [r7, #32]
        if (tear_y + 4 < SCREEN_HEIGHT) {
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f30:	dc6c      	bgt.n	800200c <eyesSadAnimation+0x340>
            // 큰 눈물 방울 (5x5)
            apOledDrawFilledRect(right_eye_x-2, tear_y, 5, 5, 0x0F);   // 메인 방울
 8001f32:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <eyesSadAnimation+0x2c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	1e98      	subs	r0, r3, #2
 8001f38:	230f      	movs	r3, #15
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	2205      	movs	r2, #5
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	f000 fca9 	bl	8002898 <apOledDrawFilledRect>
            apOledDrawPixel(right_eye_x-2, tear_y-1, 0x0A);            // 위쪽 테두리
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <eyesSadAnimation+0x2c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1e98      	subs	r0, r3, #2
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	220a      	movs	r2, #10
 8001f52:	4619      	mov	r1, r3
 8001f54:	f000 fc4c 	bl	80027f0 <apOledDrawPixel>
            apOledDrawPixel(right_eye_x+2, tear_y-1, 0x0A);
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <eyesSadAnimation+0x2c8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	1c98      	adds	r0, r3, #2
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	220a      	movs	r2, #10
 8001f64:	4619      	mov	r1, r3
 8001f66:	f000 fc43 	bl	80027f0 <apOledDrawPixel>
            apOledDrawPixel(right_eye_x, tear_y-1, 0x0C);              // 위쪽 중앙
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <eyesSadAnimation+0x2c8>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	220c      	movs	r2, #12
 8001f74:	4619      	mov	r1, r3
 8001f76:	f000 fc3b 	bl	80027f0 <apOledDrawPixel>

            // 긴 눈물 흔적
            for (int trail = 1; trail <= 8 && tear_drop > trail; trail++) {
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f7e:	e03e      	b.n	8001ffe <eyesSadAnimation+0x332>
 8001f80:	20000004 	.word	0x20000004
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000018 	.word	0x20000018
 8001f8c:	2000001c 	.word	0x2000001c
 8001f90:	20000030 	.word	0x20000030
 8001f94:	20000020 	.word	0x20000020
 8001f98:	20000024 	.word	0x20000024
                int trail_y = tear_y - trail * 2;
 8001f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
                uint8_t trail_brightness = 0x0C - (trail * 1);
 8001fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f1c3 030c 	rsb	r3, r3, #12
 8001fae:	74fb      	strb	r3, [r7, #19]
                if (trail_brightness > 0 && trail_y >= 0) {
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d020      	beq.n	8001ff8 <eyesSadAnimation+0x32c>
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db1d      	blt.n	8001ff8 <eyesSadAnimation+0x32c>
                    apOledDrawPixel(right_eye_x, trail_y, trail_brightness);
 8001fbc:	4b52      	ldr	r3, [pc, #328]	@ (8002108 <eyesSadAnimation+0x43c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	7cfa      	ldrb	r2, [r7, #19]
 8001fc2:	6979      	ldr	r1, [r7, #20]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fc13 	bl	80027f0 <apOledDrawPixel>
                    if (trail < 4) {
 8001fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	dc13      	bgt.n	8001ff8 <eyesSadAnimation+0x32c>
                        apOledDrawPixel(right_eye_x-1, trail_y, trail_brightness-2);
 8001fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002108 <eyesSadAnimation+0x43c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	1e58      	subs	r0, r3, #1
 8001fd6:	7cfb      	ldrb	r3, [r7, #19]
 8001fd8:	3b02      	subs	r3, #2
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	6979      	ldr	r1, [r7, #20]
 8001fe0:	f000 fc06 	bl	80027f0 <apOledDrawPixel>
                        apOledDrawPixel(right_eye_x+1, trail_y, trail_brightness-2);
 8001fe4:	4b48      	ldr	r3, [pc, #288]	@ (8002108 <eyesSadAnimation+0x43c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1c58      	adds	r0, r3, #1
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	3b02      	subs	r3, #2
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6979      	ldr	r1, [r7, #20]
 8001ff4:	f000 fbfc 	bl	80027f0 <apOledDrawPixel>
            for (int trail = 1; trail <= 8 && tear_drop > trail; trail++) {
 8001ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002000:	2b08      	cmp	r3, #8
 8002002:	dc03      	bgt.n	800200c <eyesSadAnimation+0x340>
 8002004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002008:	429a      	cmp	r2, r3
 800200a:	dcc7      	bgt.n	8001f9c <eyesSadAnimation+0x2d0>
                    }
                }
            }
        }
        apOledUpdate();
 800200c:	f000 fbd8 	bl	80027c0 <apOledUpdate>
    for (int tear_drop = 0; tear_drop < 25; tear_drop++) {
 8002010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002012:	3301      	adds	r3, #1
 8002014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002018:	2b18      	cmp	r3, #24
 800201a:	f77f aec4 	ble.w	8001da6 <eyesSadAnimation+0xda>
    }

    HAL_Delay(20); // 슬픈 표정 유지
 800201e:	2014      	movs	r0, #20
 8002020:	f002 fd64 	bl	8004aec <HAL_Delay>

    // 3단계: 점점 원래 눈으로 돌아가기 (역방향 애니메이션)
    for (int recover_level = 7; recover_level >= 0; recover_level--) {
 8002024:	2307      	movs	r3, #7
 8002026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002028:	e061      	b.n	80020ee <eyesSadAnimation+0x422>
        apOledClear(0x00);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 fbb6 	bl	800279c <apOledClear>

        // 점점 커지고 원래 위치로 올라가는 눈
        int current_width = ref_eye_width - recover_level * 2;      // 점점 커짐
 8002030:	4b36      	ldr	r3, [pc, #216]	@ (800210c <eyesSadAnimation+0x440>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	63bb      	str	r3, [r7, #56]	@ 0x38
        int current_height = ref_eye_height - recover_level * 3;    // 점점 커짐
 800203c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800203e:	461a      	mov	r2, r3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	4b32      	ldr	r3, [pc, #200]	@ (8002110 <eyesSadAnimation+0x444>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4413      	add	r3, r2
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
        int droop_offset = recover_level * 2;                       // 원래 위치로
 800204c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30

        // 좌측 눈 (점점 원래대로)
        drawRoundRect(left_eye_x - current_width/2,
 8002052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002054:	0fda      	lsrs	r2, r3, #31
 8002056:	4413      	add	r3, r2
 8002058:	105b      	asrs	r3, r3, #1
 800205a:	425b      	negs	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	4b2d      	ldr	r3, [pc, #180]	@ (8002114 <eyesSadAnimation+0x448>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	18d0      	adds	r0, r2, r3
                     left_eye_y - current_height/2 + droop_offset,
 8002064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002066:	0fda      	lsrs	r2, r3, #31
 8002068:	4413      	add	r3, r2
 800206a:	105b      	asrs	r3, r3, #1
 800206c:	425b      	negs	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <eyesSadAnimation+0x44c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	441a      	add	r2, r3
        drawRoundRect(left_eye_x - current_width/2,
 8002076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002078:	18d1      	adds	r1, r2, r3
                     current_width, current_height, corner_radius/2 + recover_level, COLOR_WHITE);
 800207a:	4b28      	ldr	r3, [pc, #160]	@ (800211c <eyesSadAnimation+0x450>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0fda      	lsrs	r2, r3, #31
 8002080:	4413      	add	r3, r2
 8002082:	105b      	asrs	r3, r3, #1
 8002084:	461a      	mov	r2, r3
        drawRoundRect(left_eye_x - current_width/2,
 8002086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002088:	4413      	add	r3, r2
 800208a:	220f      	movs	r2, #15
 800208c:	9201      	str	r2, [sp, #4]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002092:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002094:	f7fe fff9 	bl	800108a <drawRoundRect>

        // 우측 눈 (점점 원래대로)
        drawRoundRect(right_eye_x - current_width/2,
 8002098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209a:	0fda      	lsrs	r2, r3, #31
 800209c:	4413      	add	r3, r2
 800209e:	105b      	asrs	r3, r3, #1
 80020a0:	425b      	negs	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <eyesSadAnimation+0x43c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	18d0      	adds	r0, r2, r3
                     right_eye_y - current_height/2 + droop_offset,
 80020aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ac:	0fda      	lsrs	r2, r3, #31
 80020ae:	4413      	add	r3, r2
 80020b0:	105b      	asrs	r3, r3, #1
 80020b2:	425b      	negs	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <eyesSadAnimation+0x454>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	441a      	add	r2, r3
        drawRoundRect(right_eye_x - current_width/2,
 80020bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020be:	18d1      	adds	r1, r2, r3
                     current_width, current_height, corner_radius/2 + recover_level, COLOR_WHITE);
 80020c0:	4b16      	ldr	r3, [pc, #88]	@ (800211c <eyesSadAnimation+0x450>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0fda      	lsrs	r2, r3, #31
 80020c6:	4413      	add	r3, r2
 80020c8:	105b      	asrs	r3, r3, #1
 80020ca:	461a      	mov	r2, r3
        drawRoundRect(right_eye_x - current_width/2,
 80020cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ce:	4413      	add	r3, r2
 80020d0:	220f      	movs	r2, #15
 80020d2:	9201      	str	r2, [sp, #4]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020da:	f7fe ffd6 	bl	800108a <drawRoundRect>

        apOledUpdate();
 80020de:	f000 fb6f 	bl	80027c0 <apOledUpdate>
        HAL_Delay(20); // 회복은 조금 더 천천히
 80020e2:	2014      	movs	r0, #20
 80020e4:	f002 fd02 	bl	8004aec <HAL_Delay>
    for (int recover_level = 7; recover_level >= 0; recover_level--) {
 80020e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ea:	3b01      	subs	r3, #1
 80020ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da9a      	bge.n	800202a <eyesSadAnimation+0x35e>
    }

    // 4단계: 완전히 원래 눈으로 복귀
    resetEyes(true);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f7ff f951 	bl	800139c <resetEyes>
    HAL_Delay(50);
 80020fa:	2032      	movs	r0, #50	@ 0x32
 80020fc:	f002 fcf6 	bl	8004aec <HAL_Delay>
}
 8002100:	bf00      	nop
 8002102:	3750      	adds	r7, #80	@ 0x50
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000020 	.word	0x20000020
 800210c:	20000004 	.word	0x20000004
 8002110:	20000000 	.word	0x20000000
 8002114:	20000018 	.word	0x20000018
 8002118:	2000001c 	.word	0x2000001c
 800211c:	20000030 	.word	0x20000030
 8002120:	20000024 	.word	0x20000024

08002124 <sdCardInit>:
int8_t closeFlag = 1;
uint8_t previousCardState = 0;
char buffer[100];


DSTATUS sdCardInit(void) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
	DSTATUS result = sdDiskInitialize(0);
 800212a:	2000      	movs	r0, #0
 800212c:	f000 fe06 	bl	8002d3c <sdDiskInitialize>
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	if (result == 0) {
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <sdCardInit+0x1e>
		printf("sdcard inited\n");
 800213a:	4807      	ldr	r0, [pc, #28]	@ (8002158 <sdCardInit+0x34>)
 800213c:	f00b fd90 	bl	800dc60 <puts>
 8002140:	e004      	b.n	800214c <sdCardInit+0x28>
	} else {
		printf("sdcard initiation failed: %d\n", result);
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	@ (800215c <sdCardInit+0x38>)
 8002148:	f00b fd22 	bl	800db90 <iprintf>
	}

	return result;
 800214c:	79fb      	ldrb	r3, [r7, #7]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	0800ff94 	.word	0x0800ff94
 800215c:	0800ffa4 	.word	0x0800ffa4

08002160 <sdCardMount>:

FRESULT sdCardMount(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	fres = f_mount(&fs, "", 0);
 8002164:	2200      	movs	r2, #0
 8002166:	490d      	ldr	r1, [pc, #52]	@ (800219c <sdCardMount+0x3c>)
 8002168:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <sdCardMount+0x40>)
 800216a:	f009 fe55 	bl	800be18 <f_mount>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <sdCardMount+0x44>)
 8002174:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <sdCardMount+0x44>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <sdCardMount+0x26>
		printf("sdcard mounte!\n");
 800217e:	480a      	ldr	r0, [pc, #40]	@ (80021a8 <sdCardMount+0x48>)
 8002180:	f00b fd6e 	bl	800dc60 <puts>
 8002184:	e005      	b.n	8002192 <sdCardMount+0x32>
	} else {
		printf("sdcard mount failed: %d\n", fres);
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <sdCardMount+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	4807      	ldr	r0, [pc, #28]	@ (80021ac <sdCardMount+0x4c>)
 800218e:	f00b fcff 	bl	800db90 <iprintf>
	}
	return fres;
 8002192:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <sdCardMount+0x44>)
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	0800ffc4 	.word	0x0800ffc4
 80021a0:	2000379c 	.word	0x2000379c
 80021a4:	20003794 	.word	0x20003794
 80021a8:	0800ffc8 	.word	0x0800ffc8
 80021ac:	0800ffd8 	.word	0x0800ffd8

080021b0 <sdCardUnMount>:

FRESULT sdCardUnMount(void) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	fres = f_mount(NULL, "", 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	490d      	ldr	r1, [pc, #52]	@ (80021ec <sdCardUnMount+0x3c>)
 80021b8:	2000      	movs	r0, #0
 80021ba:	f009 fe2d 	bl	800be18 <f_mount>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <sdCardUnMount+0x40>)
 80021c4:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <sdCardUnMount+0x40>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <sdCardUnMount+0x26>
		printf("sdcard Un-mounted\n");
 80021ce:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <sdCardUnMount+0x44>)
 80021d0:	f00b fd46 	bl	800dc60 <puts>
 80021d4:	e005      	b.n	80021e2 <sdCardUnMount+0x32>
	} else {
		printf("sdcard Un-mount failed: %d\n", fres);
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <sdCardUnMount+0x40>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	4806      	ldr	r0, [pc, #24]	@ (80021f8 <sdCardUnMount+0x48>)
 80021de:	f00b fcd7 	bl	800db90 <iprintf>
	}
	return fres;
 80021e2:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <sdCardUnMount+0x40>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	0800ffc4 	.word	0x0800ffc4
 80021f0:	20003794 	.word	0x20003794
 80021f4:	0800fff4 	.word	0x0800fff4
 80021f8:	08010008 	.word	0x08010008

080021fc <sdIsCardDetected>:

void sdIsCardDetected(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
	uint8_t currentCardState = (HAL_GPIO_ReadPin(sd_detect_port, sd_detect_pin) == GPIO_PIN_RESET);
 8002202:	2110      	movs	r1, #16
 8002204:	4815      	ldr	r0, [pc, #84]	@ (800225c <sdIsCardDetected+0x60>)
 8002206:	f003 fa63 	bl	80056d0 <HAL_GPIO_ReadPin>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	71fb      	strb	r3, [r7, #7]
	if (currentCardState && !previousCardState) {
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <sdIsCardDetected+0x3a>
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <sdIsCardDetected+0x64>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <sdIsCardDetected+0x3a>
		HAL_Delay(200);
 8002226:	20c8      	movs	r0, #200	@ 0xc8
 8002228:	f002 fc60 	bl	8004aec <HAL_Delay>
		sdCardMount();
 800222c:	f7ff ff98 	bl	8002160 <sdCardMount>
		eyesSurprisedAnimation();
 8002230:	f7ff fc22 	bl	8001a78 <eyesSurprisedAnimation>
	if (currentCardState && !previousCardState) {
 8002234:	e00a      	b.n	800224c <sdIsCardDetected+0x50>
	} else if (!currentCardState && previousCardState) {
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <sdIsCardDetected+0x50>
 800223c:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <sdIsCardDetected+0x64>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <sdIsCardDetected+0x50>
		sdCardUnMount();
 8002244:	f7ff ffb4 	bl	80021b0 <sdCardUnMount>
		eyesSadAnimation();
 8002248:	f7ff fd40 	bl	8001ccc <eyesSadAnimation>
	}
	previousCardState = currentCardState;
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <sdIsCardDetected+0x64>)
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	7013      	strb	r3, [r2, #0]

}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	48000400 	.word	0x48000400
 8002260:	20000248 	.word	0x20000248

08002264 <openFile>:

// 파일 열기(없으면 생성). append 모드로 사용
void openFile(char *p_fileName)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if (closeFlag == 0)
 800226c:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <openFile+0x84>)
 800226e:	f993 3000 	ldrsb.w	r3, [r3]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <openFile+0x1a>
  {
    printf("File already open! Close it first.\r\n");
 8002276:	481d      	ldr	r0, [pc, #116]	@ (80022ec <openFile+0x88>)
 8002278:	f00b fcf2 	bl	800dc60 <puts>
    return;
 800227c:	e030      	b.n	80022e0 <openFile+0x7c>
  }

  // 파일이 있으면 열고, 없으면 생성하여 append 모드로 사용
  fres = f_open(&fil, p_fileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800227e:	2213      	movs	r2, #19
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	481b      	ldr	r0, [pc, #108]	@ (80022f0 <openFile+0x8c>)
 8002284:	f009 fe0e 	bl	800bea4 <f_open>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <openFile+0x90>)
 800228e:	701a      	strb	r2, [r3, #0]

  if (fres == FR_OK)
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <openFile+0x90>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d118      	bne.n	80022ca <openFile+0x66>
  {
    // 항상 파일 끝으로 이동하여 이어쓰기(Append)
    f_lseek(&fil, f_size(&fil));
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <openFile+0x8c>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4619      	mov	r1, r3
 800229e:	4814      	ldr	r0, [pc, #80]	@ (80022f0 <openFile+0x8c>)
 80022a0:	f00a fb63 	bl	800c96a <f_lseek>

    printf("File '%s' ready for writing!\r\n", p_fileName);
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4814      	ldr	r0, [pc, #80]	@ (80022f8 <openFile+0x94>)
 80022a8:	f00b fc72 	bl	800db90 <iprintf>
    if (f_size(&fil) > 0)
 80022ac:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <openFile+0x8c>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <openFile+0x5e>
    {
      printf("File size: %lu bytes\r\n", f_size(&fil));
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <openFile+0x8c>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4619      	mov	r1, r3
 80022ba:	4810      	ldr	r0, [pc, #64]	@ (80022fc <openFile+0x98>)
 80022bc:	f00b fc68 	bl	800db90 <iprintf>
 80022c0:	e00b      	b.n	80022da <openFile+0x76>
    }
    else
    {
      printf("New file created.\r\n");
 80022c2:	480f      	ldr	r0, [pc, #60]	@ (8002300 <openFile+0x9c>)
 80022c4:	f00b fccc 	bl	800dc60 <puts>
 80022c8:	e007      	b.n	80022da <openFile+0x76>
    }
  }
  else
  {
    printf("Failed to open/create file '%s'. Error: %d\r\n", p_fileName, fres);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <openFile+0x90>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	480c      	ldr	r0, [pc, #48]	@ (8002304 <openFile+0xa0>)
 80022d4:	f00b fc5c 	bl	800db90 <iprintf>
    return;
 80022d8:	e002      	b.n	80022e0 <openFile+0x7c>
  }
  closeFlag = 0; // 이제 열림 상태
 80022da:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <openFile+0x84>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
}
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000034 	.word	0x20000034
 80022ec:	08010024 	.word	0x08010024
 80022f0:	20002760 	.word	0x20002760
 80022f4:	20003794 	.word	0x20003794
 80022f8:	08010048 	.word	0x08010048
 80022fc:	08010068 	.word	0x08010068
 8002300:	08010080 	.word	0x08010080
 8002304:	08010094 	.word	0x08010094

08002308 <closeFile>:

// 열린 파일 닫기
void closeFile(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  fres = f_close(&fil);
 800230c:	480d      	ldr	r0, [pc, #52]	@ (8002344 <closeFile+0x3c>)
 800230e:	f00a fb02 	bl	800c916 <f_close>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <closeFile+0x40>)
 8002318:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <closeFile+0x40>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d103      	bne.n	800232a <closeFile+0x22>
  {
    printf("File Closed !\r\n");
 8002322:	480a      	ldr	r0, [pc, #40]	@ (800234c <closeFile+0x44>)
 8002324:	f00b fc9c 	bl	800dc60 <puts>
 8002328:	e006      	b.n	8002338 <closeFile+0x30>
  }
  else if (fres != FR_OK)
 800232a:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <closeFile+0x40>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <closeFile+0x30>
  {
    printf("File Close Failed... \r\n");
 8002332:	4807      	ldr	r0, [pc, #28]	@ (8002350 <closeFile+0x48>)
 8002334:	f00b fc94 	bl	800dc60 <puts>
  }
  closeFlag = 1;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <closeFile+0x4c>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20002760 	.word	0x20002760
 8002348:	20003794 	.word	0x20003794
 800234c:	080100c4 	.word	0x080100c4
 8002350:	080100d4 	.word	0x080100d4
 8002354:	20000034 	.word	0x20000034

08002358 <checkSize>:

// SD 카드 여유 공간 조회 (KB 단위로 표시)
void checkSize(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  fres = f_getfree("", &fre_clust, &p_fs);
 800235e:	4a24      	ldr	r2, [pc, #144]	@ (80023f0 <checkSize+0x98>)
 8002360:	4924      	ldr	r1, [pc, #144]	@ (80023f4 <checkSize+0x9c>)
 8002362:	4825      	ldr	r0, [pc, #148]	@ (80023f8 <checkSize+0xa0>)
 8002364:	f00a fd25 	bl	800cdb2 <f_getfree>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <checkSize+0xa4>)
 800236e:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8002370:	4b22      	ldr	r3, [pc, #136]	@ (80023fc <checkSize+0xa4>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d130      	bne.n	80023da <checkSize+0x82>
  {
    // 클러스터 수 * 클러스터당 섹터수 * 섹터당 512바이트 → KB로 환산( /1024 = *0.5)
    uint32_t freeKB = (uint32_t)(fre_clust * p_fs->csize * 0.5f);
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <checkSize+0x98>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	895b      	ldrh	r3, [r3, #10]
 800237e:	461a      	mov	r2, r3
 8002380:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <checkSize+0x9c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002390:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	ee17 3a90 	vmov	r3, s15
 80023a0:	607b      	str	r3, [r7, #4]
    uint32_t totalKB = (uint32_t)((p_fs->n_fatent - 2) * p_fs->csize * 0.5f);
 80023a2:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <checkSize+0x98>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	3b02      	subs	r3, #2
 80023aa:	4a11      	ldr	r2, [pc, #68]	@ (80023f0 <checkSize+0x98>)
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	8952      	ldrh	r2, [r2, #10]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80023c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c8:	ee17 3a90 	vmov	r3, s15
 80023cc:	603b      	str	r3, [r7, #0]
    printf("Free: %lu KB / Total: %lu KB\r\n", freeKB, totalKB);
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	480b      	ldr	r0, [pc, #44]	@ (8002400 <checkSize+0xa8>)
 80023d4:	f00b fbdc 	bl	800db90 <iprintf>
  }
  else
  {
    printf("Failed to get free space. (FRESULT=%d)\r\n", fres);
  }
}
 80023d8:	e005      	b.n	80023e6 <checkSize+0x8e>
    printf("Failed to get free space. (FRESULT=%d)\r\n", fres);
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <checkSize+0xa4>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	4808      	ldr	r0, [pc, #32]	@ (8002404 <checkSize+0xac>)
 80023e2:	f00b fbd5 	bl	800db90 <iprintf>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20003798 	.word	0x20003798
 80023f4:	20003790 	.word	0x20003790
 80023f8:	0800ffc4 	.word	0x0800ffc4
 80023fc:	20003794 	.word	0x20003794
 8002400:	080100ec 	.word	0x080100ec
 8002404:	0801010c 	.word	0x0801010c

08002408 <writeFile>:

// 현재 열린 파일 끝에 한 줄을 추가로 기록
void writeFile(char *p_text)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if (closeFlag != 0)
 8002410:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <writeFile+0x98>)
 8002412:	f993 3000 	ldrsb.w	r3, [r3]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <writeFile+0x1a>
  {
    printf("No file is open! Use 'open <filename>' first.\r\n");
 800241a:	4822      	ldr	r0, [pc, #136]	@ (80024a4 <writeFile+0x9c>)
 800241c:	f00b fc20 	bl	800dc60 <puts>
    return;
 8002420:	e03a      	b.n	8002498 <writeFile+0x90>
  }

  // 안전하게 개행을 붙여 한 줄 단위로 기록
  snprintf(buffer, sizeof(buffer), "%s\r\n", p_text);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a20      	ldr	r2, [pc, #128]	@ (80024a8 <writeFile+0xa0>)
 8002426:	2164      	movs	r1, #100	@ 0x64
 8002428:	4820      	ldr	r0, [pc, #128]	@ (80024ac <writeFile+0xa4>)
 800242a:	f00b fc21 	bl	800dc70 <sniprintf>

  // 파일 끝으로 이동 (append)
  fres = f_lseek(&fil, f_size(&fil));
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <writeFile+0xa8>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4619      	mov	r1, r3
 8002434:	481e      	ldr	r0, [pc, #120]	@ (80024b0 <writeFile+0xa8>)
 8002436:	f00a fa98 	bl	800c96a <f_lseek>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <writeFile+0xac>)
 8002440:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <writeFile+0xac>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <writeFile+0x4a>
  {
    printf("Can't move to end of file\r\n");
 800244a:	481b      	ldr	r0, [pc, #108]	@ (80024b8 <writeFile+0xb0>)
 800244c:	f00b fc08 	bl	800dc60 <puts>
    return;
 8002450:	e022      	b.n	8002498 <writeFile+0x90>
  }

  sprintf(buffer, "%s\r\n", p_text);
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4914      	ldr	r1, [pc, #80]	@ (80024a8 <writeFile+0xa0>)
 8002456:	4815      	ldr	r0, [pc, #84]	@ (80024ac <writeFile+0xa4>)
 8002458:	f00b fc40 	bl	800dcdc <siprintf>
  fres = f_write(&fil, buffer, strlen(buffer), &bw);
 800245c:	4813      	ldr	r0, [pc, #76]	@ (80024ac <writeFile+0xa4>)
 800245e:	f7fd ff3f 	bl	80002e0 <strlen>
 8002462:	4602      	mov	r2, r0
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <writeFile+0xb4>)
 8002466:	4911      	ldr	r1, [pc, #68]	@ (80024ac <writeFile+0xa4>)
 8002468:	4811      	ldr	r0, [pc, #68]	@ (80024b0 <writeFile+0xa8>)
 800246a:	f00a f842 	bl	800c4f2 <f_write>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <writeFile+0xac>)
 8002474:	701a      	strb	r2, [r3, #0]

  if (fres == FR_OK)
 8002476:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <writeFile+0xac>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <writeFile+0x8a>
  {
    printf("Writing Complete! %lu bytes written.\r\n", bw);
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <writeFile+0xb4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4619      	mov	r1, r3
 8002484:	480e      	ldr	r0, [pc, #56]	@ (80024c0 <writeFile+0xb8>)
 8002486:	f00b fb83 	bl	800db90 <iprintf>
    f_sync(&fil); // 즉시 저장(전원 차단에 대비)
 800248a:	4809      	ldr	r0, [pc, #36]	@ (80024b0 <writeFile+0xa8>)
 800248c:	f00a f9c5 	bl	800c81a <f_sync>
 8002490:	e002      	b.n	8002498 <writeFile+0x90>
  }
  else
  {
    printf("Writing Failed\r\n");
 8002492:	480c      	ldr	r0, [pc, #48]	@ (80024c4 <writeFile+0xbc>)
 8002494:	f00b fbe4 	bl	800dc60 <puts>
  }
}
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000034 	.word	0x20000034
 80024a4:	08010138 	.word	0x08010138
 80024a8:	08010168 	.word	0x08010168
 80024ac:	200026fc 	.word	0x200026fc
 80024b0:	20002760 	.word	0x20002760
 80024b4:	20003794 	.word	0x20003794
 80024b8:	08010170 	.word	0x08010170
 80024bc:	200026f8 	.word	0x200026f8
 80024c0:	0801018c 	.word	0x0801018c
 80024c4:	080101b4 	.word	0x080101b4

080024c8 <readFile>:

// 기존의 파일 내용 읽기
void readFile(char *p_fileName)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if (closeFlag == 0)
 80024d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002588 <readFile+0xc0>)
 80024d2:	f993 3000 	ldrsb.w	r3, [r3]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <readFile+0x16>
  {
    closeFile();
 80024da:	f7ff ff15 	bl	8002308 <closeFile>
  }
  fres = f_open(&fil, p_fileName, FA_READ);
 80024de:	2201      	movs	r2, #1
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	482a      	ldr	r0, [pc, #168]	@ (800258c <readFile+0xc4>)
 80024e4:	f009 fcde 	bl	800bea4 <f_open>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <readFile+0xc8>)
 80024ee:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 80024f0:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <readFile+0xc8>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d117      	bne.n	8002528 <readFile+0x60>
  {
    printf("File '%s' opened for reading.\r\n", p_fileName);
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4826      	ldr	r0, [pc, #152]	@ (8002594 <readFile+0xcc>)
 80024fc:	f00b fb48 	bl	800db90 <iprintf>
    printf("Failed to open file '%s' for reading!\r\n", p_fileName);
    return;
  }

  // 파일 전체 읽기
  memset(buffer, 0, sizeof(buffer));
 8002500:	2264      	movs	r2, #100	@ 0x64
 8002502:	2100      	movs	r1, #0
 8002504:	4824      	ldr	r0, [pc, #144]	@ (8002598 <readFile+0xd0>)
 8002506:	f00b fce3 	bl	800ded0 <memset>
  fres = f_read(&fil, buffer, sizeof(buffer) - 1, &br);
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <readFile+0xd4>)
 800250c:	2263      	movs	r2, #99	@ 0x63
 800250e:	4922      	ldr	r1, [pc, #136]	@ (8002598 <readFile+0xd0>)
 8002510:	481e      	ldr	r0, [pc, #120]	@ (800258c <readFile+0xc4>)
 8002512:	f009 fe8f 	bl	800c234 <f_read>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <readFile+0xc8>)
 800251c:	701a      	strb	r2, [r3, #0]

  if (fres == FR_OK && br > 0)
 800251e:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <readFile+0xc8>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d126      	bne.n	8002574 <readFile+0xac>
 8002526:	e004      	b.n	8002532 <readFile+0x6a>
    printf("Failed to open file '%s' for reading!\r\n", p_fileName);
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	481d      	ldr	r0, [pc, #116]	@ (80025a0 <readFile+0xd8>)
 800252c:	f00b fb30 	bl	800db90 <iprintf>
    return;
 8002530:	e026      	b.n	8002580 <readFile+0xb8>
  if (fres == FR_OK && br > 0)
 8002532:	4b1a      	ldr	r3, [pc, #104]	@ (800259c <readFile+0xd4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d01c      	beq.n	8002574 <readFile+0xac>
  {
    printf("-----------FILE CONTENT----------\r\n");
 800253a:	481a      	ldr	r0, [pc, #104]	@ (80025a4 <readFile+0xdc>)
 800253c:	f00b fb90 	bl	800dc60 <puts>
    printf("%s", buffer);
 8002540:	4915      	ldr	r1, [pc, #84]	@ (8002598 <readFile+0xd0>)
 8002542:	4819      	ldr	r0, [pc, #100]	@ (80025a8 <readFile+0xe0>)
 8002544:	f00b fb24 	bl	800db90 <iprintf>
    if (buffer[strlen(buffer) - 1] != '\n')
 8002548:	4813      	ldr	r0, [pc, #76]	@ (8002598 <readFile+0xd0>)
 800254a:	f7fd fec9 	bl	80002e0 <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	3b01      	subs	r3, #1
 8002552:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <readFile+0xd0>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	2b0a      	cmp	r3, #10
 8002558:	d002      	beq.n	8002560 <readFile+0x98>
      printf("\r\n");
 800255a:	4814      	ldr	r0, [pc, #80]	@ (80025ac <readFile+0xe4>)
 800255c:	f00b fb80 	bl	800dc60 <puts>
    printf("-----------END OF FILE-----------\r\n");
 8002560:	4813      	ldr	r0, [pc, #76]	@ (80025b0 <readFile+0xe8>)
 8002562:	f00b fb7d 	bl	800dc60 <puts>
    printf("%lu bytes read.\r\n", br);
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <readFile+0xd4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4811      	ldr	r0, [pc, #68]	@ (80025b4 <readFile+0xec>)
 800256e:	f00b fb0f 	bl	800db90 <iprintf>
  {
 8002572:	e002      	b.n	800257a <readFile+0xb2>
  }
  else
  {
    printf("File is empty or read failed!\r\n");
 8002574:	4810      	ldr	r0, [pc, #64]	@ (80025b8 <readFile+0xf0>)
 8002576:	f00b fb73 	bl	800dc60 <puts>
  }

  f_close(&fil); // 읽기 후 파일 닫기
 800257a:	4804      	ldr	r0, [pc, #16]	@ (800258c <readFile+0xc4>)
 800257c:	f00a f9cb 	bl	800c916 <f_close>
}
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000034 	.word	0x20000034
 800258c:	20002760 	.word	0x20002760
 8002590:	20003794 	.word	0x20003794
 8002594:	080101c4 	.word	0x080101c4
 8002598:	200026fc 	.word	0x200026fc
 800259c:	200047d4 	.word	0x200047d4
 80025a0:	080101e4 	.word	0x080101e4
 80025a4:	0801020c 	.word	0x0801020c
 80025a8:	08010230 	.word	0x08010230
 80025ac:	08010234 	.word	0x08010234
 80025b0:	08010238 	.word	0x08010238
 80025b4:	0801025c 	.word	0x0801025c
 80025b8:	08010270 	.word	0x08010270

080025bc <userInput>:
#include "ap_oled.h"


/* 한 줄 명령 해석 및 실행 */
void userInput(char *command)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  printf("Command received: %s\r\n", command);
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	483a      	ldr	r0, [pc, #232]	@ (80026b0 <userInput+0xf4>)
 80025c8:	f00b fae2 	bl	800db90 <iprintf>

  if (strcmp(command, "help") == 0)
 80025cc:	4939      	ldr	r1, [pc, #228]	@ (80026b4 <userInput+0xf8>)
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fd fe26 	bl	8000220 <strcmp>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <userInput+0x24>
  {
    showHelp();
 80025da:	f000 f87f 	bl	80026dc <showHelp>
  }
  else
  {
    printf("Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
  }
}
 80025de:	e063      	b.n	80026a8 <userInput+0xec>
  else if (strcmp(command, "mount") == 0)
 80025e0:	4935      	ldr	r1, [pc, #212]	@ (80026b8 <userInput+0xfc>)
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fd fe1c 	bl	8000220 <strcmp>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <userInput+0x38>
	sdCardMount();
 80025ee:	f7ff fdb7 	bl	8002160 <sdCardMount>
}
 80025f2:	e059      	b.n	80026a8 <userInput+0xec>
  else if (strcmp(command, "unmount") == 0)
 80025f4:	4931      	ldr	r1, [pc, #196]	@ (80026bc <userInput+0x100>)
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fd fe12 	bl	8000220 <strcmp>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <userInput+0x4c>
	sdCardUnMount();
 8002602:	f7ff fdd5 	bl	80021b0 <sdCardUnMount>
}
 8002606:	e04f      	b.n	80026a8 <userInput+0xec>
  else if (strncmp(command, "open ", 5) == 0)
 8002608:	2205      	movs	r2, #5
 800260a:	492d      	ldr	r1, [pc, #180]	@ (80026c0 <userInput+0x104>)
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f00b fc67 	bl	800dee0 <strncmp>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <userInput+0x68>
    openFile(command + 5);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3305      	adds	r3, #5
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fe21 	bl	8002264 <openFile>
}
 8002622:	e041      	b.n	80026a8 <userInput+0xec>
  else if (strcmp(command, "close") == 0)
 8002624:	4927      	ldr	r1, [pc, #156]	@ (80026c4 <userInput+0x108>)
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fd fdfa 	bl	8000220 <strcmp>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <userInput+0x7c>
    closeFile();
 8002632:	f7ff fe69 	bl	8002308 <closeFile>
}
 8002636:	e037      	b.n	80026a8 <userInput+0xec>
  else if (strncmp(command, "write ", 6) == 0)
 8002638:	2206      	movs	r2, #6
 800263a:	4923      	ldr	r1, [pc, #140]	@ (80026c8 <userInput+0x10c>)
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f00b fc4f 	bl	800dee0 <strncmp>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <userInput+0x98>
    writeFile(command + 6);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3306      	adds	r3, #6
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fedb 	bl	8002408 <writeFile>
}
 8002652:	e029      	b.n	80026a8 <userInput+0xec>
  else if (strncmp(command, "read ", 5) == 0)
 8002654:	2205      	movs	r2, #5
 8002656:	491d      	ldr	r1, [pc, #116]	@ (80026cc <userInput+0x110>)
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f00b fc41 	bl	800dee0 <strncmp>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <userInput+0xb4>
    readFile(command + 5);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3305      	adds	r3, #5
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff2d 	bl	80024c8 <readFile>
}
 800266e:	e01b      	b.n	80026a8 <userInput+0xec>
  else if (strncmp(command, "image ", 6) == 0)
 8002670:	2206      	movs	r2, #6
 8002672:	4917      	ldr	r1, [pc, #92]	@ (80026d0 <userInput+0x114>)
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f00b fc33 	bl	800dee0 <strncmp>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <userInput+0xd0>
	apOledDisplayImageFromSD(command + 6);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3306      	adds	r3, #6
 8002684:	4618      	mov	r0, r3
 8002686:	f000 f933 	bl	80028f0 <apOledDisplayImageFromSD>
}
 800268a:	e00d      	b.n	80026a8 <userInput+0xec>
  else if (strcmp(command, "size") == 0)
 800268c:	4911      	ldr	r1, [pc, #68]	@ (80026d4 <userInput+0x118>)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fd fdc6 	bl	8000220 <strcmp>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <userInput+0xe4>
    checkSize();
 800269a:	f7ff fe5d 	bl	8002358 <checkSize>
}
 800269e:	e003      	b.n	80026a8 <userInput+0xec>
    printf("Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <userInput+0x11c>)
 80026a4:	f00b fa74 	bl	800db90 <iprintf>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	08010290 	.word	0x08010290
 80026b4:	080102a8 	.word	0x080102a8
 80026b8:	080102b0 	.word	0x080102b0
 80026bc:	080102b8 	.word	0x080102b8
 80026c0:	080102c0 	.word	0x080102c0
 80026c4:	080102c8 	.word	0x080102c8
 80026c8:	080102d0 	.word	0x080102d0
 80026cc:	080102d8 	.word	0x080102d8
 80026d0:	080102e0 	.word	0x080102e0
 80026d4:	080102e8 	.word	0x080102e8
 80026d8:	080102f0 	.word	0x080102f0

080026dc <showHelp>:

/* 명령 도움말 */
void showHelp(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  printf("\r\n=== Available Commands ===\r\n");
 80026e0:	4814      	ldr	r0, [pc, #80]	@ (8002734 <showHelp+0x58>)
 80026e2:	f00b fabd 	bl	800dc60 <puts>
  printf("help               - Show this help\r\n");
 80026e6:	4814      	ldr	r0, [pc, #80]	@ (8002738 <showHelp+0x5c>)
 80026e8:	f00b faba 	bl	800dc60 <puts>
  printf("mount              - Mount SD card\r\n");
 80026ec:	4813      	ldr	r0, [pc, #76]	@ (800273c <showHelp+0x60>)
 80026ee:	f00b fab7 	bl	800dc60 <puts>
  printf("unmount            - Unmount SD card\r\n");
 80026f2:	4813      	ldr	r0, [pc, #76]	@ (8002740 <showHelp+0x64>)
 80026f4:	f00b fab4 	bl	800dc60 <puts>
  printf("open <filename>    - Open (create if not exist) & append mode\r\n");
 80026f8:	4812      	ldr	r0, [pc, #72]	@ (8002744 <showHelp+0x68>)
 80026fa:	f00b fab1 	bl	800dc60 <puts>
  printf("close              - Close current file\r\n");
 80026fe:	4812      	ldr	r0, [pc, #72]	@ (8002748 <showHelp+0x6c>)
 8002700:	f00b faae 	bl	800dc60 <puts>
  printf("write <text>       - Append one line to current file\r\n");
 8002704:	4811      	ldr	r0, [pc, #68]	@ (800274c <showHelp+0x70>)
 8002706:	f00b faab 	bl	800dc60 <puts>
  printf("read <filename>    - Read file content (up to buffer size)\r\n");
 800270a:	4811      	ldr	r0, [pc, #68]	@ (8002750 <showHelp+0x74>)
 800270c:	f00b faa8 	bl	800dc60 <puts>
  printf("image <filename>   - Display 32bpp BMP on OLED\r\n");
 8002710:	4810      	ldr	r0, [pc, #64]	@ (8002754 <showHelp+0x78>)
 8002712:	f00b faa5 	bl	800dc60 <puts>
  printf("size               - Show SD free/total space (KB)\r\n");
 8002716:	4810      	ldr	r0, [pc, #64]	@ (8002758 <showHelp+0x7c>)
 8002718:	f00b faa2 	bl	800dc60 <puts>
  printf("camera             - OLED camera mode (if available)\r\n");
 800271c:	480f      	ldr	r0, [pc, #60]	@ (800275c <showHelp+0x80>)
 800271e:	f00b fa9f 	bl	800dc60 <puts>
  printf("ani <Num>          - OLED animation mode\r\n");
 8002722:	480f      	ldr	r0, [pc, #60]	@ (8002760 <showHelp+0x84>)
 8002724:	f00b fa9c 	bl	800dc60 <puts>
  printf("==========================\r\n");
 8002728:	480e      	ldr	r0, [pc, #56]	@ (8002764 <showHelp+0x88>)
 800272a:	f00b fa99 	bl	800dc60 <puts>
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	0801032c 	.word	0x0801032c
 8002738:	0801034c 	.word	0x0801034c
 800273c:	08010374 	.word	0x08010374
 8002740:	08010398 	.word	0x08010398
 8002744:	080103c0 	.word	0x080103c0
 8002748:	08010400 	.word	0x08010400
 800274c:	0801042c 	.word	0x0801042c
 8002750:	08010464 	.word	0x08010464
 8002754:	080104a0 	.word	0x080104a0
 8002758:	080104d0 	.word	0x080104d0
 800275c:	08010504 	.word	0x08010504
 8002760:	0801053c 	.word	0x0801053c
 8002764:	08010568 	.word	0x08010568

08002768 <apOledInit>:

static uint8_t frame_buffer[OLED_WIDTH * OLED_HEIGHT / 2]; // 4bit grayscale
static bool oled_inited = false;

bool apOledInit(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  bool ret = true;
 800276e:	2301      	movs	r3, #1
 8002770:	71fb      	strb	r3, [r7, #7]

  ret = hwOledInit();
 8002772:	f001 fd47 	bl	8004204 <hwOledInit>
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]

  if (ret)
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <apOledInit+0x24>
  {
    apOledClear(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f000 f80b 	bl	800279c <apOledClear>

    oled_inited = true;
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <apOledInit+0x30>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800278c:	79fb      	ldrb	r3, [r7, #7]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000224c 	.word	0x2000224c

0800279c <apOledClear>:

void apOledClear(uint8_t gray_level)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  memset(frame_buffer, gray_level, sizeof(frame_buffer));
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ac:	4619      	mov	r1, r3
 80027ae:	4803      	ldr	r0, [pc, #12]	@ (80027bc <apOledClear+0x20>)
 80027b0:	f00b fb8e 	bl	800ded0 <memset>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000024c 	.word	0x2000024c

080027c0 <apOledUpdate>:
  apOledClear(gray_level);
  apOledUpdate();
}

void apOledUpdate(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  if (!oled_inited)
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <apOledUpdate+0x28>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <apOledUpdate+0x24>
	 {
	  return;
	 }

  hwOledSetWindow(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80027cc:	233f      	movs	r3, #63	@ 0x3f
 80027ce:	2200      	movs	r2, #0
 80027d0:	215b      	movs	r1, #91	@ 0x5b
 80027d2:	201c      	movs	r0, #28
 80027d4:	f001 fe76 	bl	80044c4 <hwOledSetWindow>
  hwOledSendData(frame_buffer, sizeof(frame_buffer));
 80027d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027dc:	4803      	ldr	r0, [pc, #12]	@ (80027ec <apOledUpdate+0x2c>)
 80027de:	f001 fe41 	bl	8004464 <hwOledSendData>
 80027e2:	e000      	b.n	80027e6 <apOledUpdate+0x26>
	  return;
 80027e4:	bf00      	nop
}
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000224c 	.word	0x2000224c
 80027ec:	2000024c 	.word	0x2000024c

080027f0 <apOledDrawPixel>:

void apOledDrawPixel(int x, int y, uint8_t gray)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	71fb      	strb	r3, [r7, #7]
  if (x < 0 || x >= OLED_WIDTH || y < 0 || y >= OLED_HEIGHT)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db40      	blt.n	8002886 <apOledDrawPixel+0x96>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2bff      	cmp	r3, #255	@ 0xff
 8002808:	dc3d      	bgt.n	8002886 <apOledDrawPixel+0x96>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db3a      	blt.n	8002886 <apOledDrawPixel+0x96>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b3f      	cmp	r3, #63	@ 0x3f
 8002814:	dc37      	bgt.n	8002886 <apOledDrawPixel+0x96>
	 {
	  return;
	 }

  uint32_t index = (y * OLED_WIDTH + x) / 2;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	021a      	lsls	r2, r3, #8
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4413      	add	r3, r2
 800281e:	0fda      	lsrs	r2, r3, #31
 8002820:	4413      	add	r3, r2
 8002822:	105b      	asrs	r3, r3, #1
 8002824:	617b      	str	r3, [r7, #20]

  if (x % 2 == 0)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d114      	bne.n	800285a <apOledDrawPixel+0x6a>
  {
    frame_buffer[index] = (frame_buffer[index] & 0x0F) | (gray << 4);
 8002830:	4a18      	ldr	r2, [pc, #96]	@ (8002894 <apOledDrawPixel+0xa4>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b25b      	sxtb	r3, r3
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b25a      	sxtb	r2, r3
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	b25b      	sxtb	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b25b      	sxtb	r3, r3
 800284c:	b2d9      	uxtb	r1, r3
 800284e:	4a11      	ldr	r2, [pc, #68]	@ (8002894 <apOledDrawPixel+0xa4>)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	4413      	add	r3, r2
 8002854:	460a      	mov	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e016      	b.n	8002888 <apOledDrawPixel+0x98>
  }
  else
  {
    frame_buffer[index] = (frame_buffer[index] & 0xF0) | (gray & 0x0F);
 800285a:	4a0e      	ldr	r2, [pc, #56]	@ (8002894 <apOledDrawPixel+0xa4>)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b25b      	sxtb	r3, r3
 8002864:	f023 030f 	bic.w	r3, r3, #15
 8002868:	b25a      	sxtb	r2, r3
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	b25b      	sxtb	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b25b      	sxtb	r3, r3
 8002878:	b2d9      	uxtb	r1, r3
 800287a:	4a06      	ldr	r2, [pc, #24]	@ (8002894 <apOledDrawPixel+0xa4>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4413      	add	r3, r2
 8002880:	460a      	mov	r2, r1
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e000      	b.n	8002888 <apOledDrawPixel+0x98>
	  return;
 8002886:	bf00      	nop
  }

}
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000024c 	.word	0x2000024c

08002898 <apOledDrawFilledRect>:
    apOledDrawPixel(x + width - 1, y + i, gray);
  }
}

void apOledDrawFilledRect(int x, int y, int width, int height, uint8_t gray)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  for (int row = 0; row < height; row++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e017      	b.n	80028dc <apOledDrawFilledRect+0x44>
  {
    for (int col = 0; col < width; col++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	e00d      	b.n	80028ce <apOledDrawFilledRect+0x36>
    {
      apOledDrawPixel(x + col, y + row, gray);
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	18d0      	adds	r0, r2, r3
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	4413      	add	r3, r2
 80028be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7ff ff94 	bl	80027f0 <apOledDrawPixel>
    for (int col = 0; col < width; col++)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	3301      	adds	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	dbed      	blt.n	80028b2 <apOledDrawFilledRect+0x1a>
  for (int row = 0; row < height; row++)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dbe3      	blt.n	80028ac <apOledDrawFilledRect+0x14>
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <apOledDisplayImageFromSD>:

  apOledDrawBitmap(bmp_data, width, height, center_x, center_y);
}

void apOledDisplayImageFromSD(char *file_name)
{
 80028f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028f4:	f5ad 5d85 	sub.w	sp, sp, #4256	@ 0x10a0
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002900:	f843 0ca4 	str.w	r0, [r3, #-164]
  if (!file_name) return;
 8002904:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002908:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8206 	beq.w	8002d1e <apOledDisplayImageFromSD+0x42e>
  FIL fil;
  FRESULT fres = f_open(&fil, file_name, FA_READ);
 8002912:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002916:	4619      	mov	r1, r3
 8002918:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800291c:	3b04      	subs	r3, #4
 800291e:	2201      	movs	r2, #1
 8002920:	f851 1ca4 	ldr.w	r1, [r1, #-164]
 8002924:	4618      	mov	r0, r3
 8002926:	f009 fabd 	bl	800bea4 <f_open>
 800292a:	4603      	mov	r3, r0
 800292c:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002930:	f102 021e 	add.w	r2, r2, #30
 8002934:	7013      	strb	r3, [r2, #0]

  if (fres != FR_OK) return;
 8002936:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800293a:	f103 031e 	add.w	r3, r3, #30
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 81ee 	bne.w	8002d22 <apOledDisplayImageFromSD+0x432>

  // BMP 헤더 읽기 (54바이트)
  uint8_t bmp_header[54];
  UINT bytes_read;

  fres = f_read(&fil, bmp_header, 54, &bytes_read);
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800294e:	391c      	subs	r1, #28
 8002950:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8002954:	3804      	subs	r0, #4
 8002956:	2236      	movs	r2, #54	@ 0x36
 8002958:	f009 fc6c 	bl	800c234 <f_read>
 800295c:	4603      	mov	r3, r0
 800295e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002962:	f102 021e 	add.w	r2, r2, #30
 8002966:	7013      	strb	r3, [r2, #0]

  if (fres != FR_OK || bytes_read != 54)
 8002968:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800296c:	f103 031e 	add.w	r3, r3, #30
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <apOledDisplayImageFromSD+0x92>
 8002976:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800297a:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 800297e:	2b36      	cmp	r3, #54	@ 0x36
 8002980:	d006      	beq.n	8002990 <apOledDisplayImageFromSD+0xa0>
  {
    f_close(&fil);
 8002982:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002986:	3b04      	subs	r3, #4
 8002988:	4618      	mov	r0, r3
 800298a:	f009 ffc4 	bl	800c916 <f_close>
    return;
 800298e:	e1c9      	b.n	8002d24 <apOledDisplayImageFromSD+0x434>
  }

  // BMP 파일 확인
  if (bmp_header[0] != 'B' || bmp_header[1] != 'M')
 8002990:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002994:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8002998:	2b42      	cmp	r3, #66	@ 0x42
 800299a:	d105      	bne.n	80029a8 <apOledDisplayImageFromSD+0xb8>
 800299c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80029a0:	f813 3c9b 	ldrb.w	r3, [r3, #-155]
 80029a4:	2b4d      	cmp	r3, #77	@ 0x4d
 80029a6:	d006      	beq.n	80029b6 <apOledDisplayImageFromSD+0xc6>
  {
    f_close(&fil);
 80029a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029ac:	3b04      	subs	r3, #4
 80029ae:	4618      	mov	r0, r3
 80029b0:	f009 ffb1 	bl	800c916 <f_close>
    return;
 80029b4:	e1b6      	b.n	8002d24 <apOledDisplayImageFromSD+0x434>
  }

  // 이미지 크기 정보 읽기
  uint32_t width = *(uint32_t*)&bmp_header[18];
 80029b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029ba:	3b1c      	subs	r3, #28
 80029bc:	3312      	adds	r3, #18
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 80029c4:	f102 0218 	add.w	r2, r2, #24
 80029c8:	6013      	str	r3, [r2, #0]
  uint32_t height = *(uint32_t*)&bmp_header[22];
 80029ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029ce:	3b1c      	subs	r3, #28
 80029d0:	3316      	adds	r3, #22
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 80029d8:	f102 0214 	add.w	r2, r2, #20
 80029dc:	6013      	str	r3, [r2, #0]
  uint16_t bpp = *(uint16_t*)&bmp_header[28];
 80029de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029e2:	3b1c      	subs	r3, #28
 80029e4:	331c      	adds	r3, #28
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 80029ec:	f102 0212 	add.w	r2, r2, #18
 80029f0:	8013      	strh	r3, [r2, #0]

  // 24비트 또는 32비트 BMP만 지원
  if (bpp != 24 && bpp != 32)
 80029f2:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 80029f6:	f103 0312 	add.w	r3, r3, #18
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	2b18      	cmp	r3, #24
 80029fe:	d00d      	beq.n	8002a1c <apOledDisplayImageFromSD+0x12c>
 8002a00:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002a04:	f103 0312 	add.w	r3, r3, #18
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d006      	beq.n	8002a1c <apOledDisplayImageFromSD+0x12c>
  {
    f_close(&fil);
 8002a0e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a12:	3b04      	subs	r3, #4
 8002a14:	4618      	mov	r0, r3
 8002a16:	f009 ff7e 	bl	800c916 <f_close>
    return;
 8002a1a:	e183      	b.n	8002d24 <apOledDisplayImageFromSD+0x434>
  }

  // 픽셀 데이터 오프셋으로 이동
  uint32_t data_offset = *(uint32_t*)&bmp_header[10];
 8002a1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a20:	3b1c      	subs	r3, #28
 8002a22:	330a      	adds	r3, #10
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002a2a:	f102 020c 	add.w	r2, r2, #12
 8002a2e:	6013      	str	r3, [r2, #0]
  fres = f_lseek(&fil, data_offset);
 8002a30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a34:	3b04      	subs	r3, #4
 8002a36:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002a3a:	f102 020c 	add.w	r2, r2, #12
 8002a3e:	6811      	ldr	r1, [r2, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f009 ff92 	bl	800c96a <f_lseek>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002a4c:	f102 021e 	add.w	r2, r2, #30
 8002a50:	7013      	strb	r3, [r2, #0]

  if (fres != FR_OK)
 8002a52:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002a56:	f103 031e 	add.w	r3, r3, #30
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <apOledDisplayImageFromSD+0x17e>
  {
    f_close(&fil);
 8002a60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a64:	3b04      	subs	r3, #4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f009 ff55 	bl	800c916 <f_close>
    return;
 8002a6c:	e15a      	b.n	8002d24 <apOledDisplayImageFromSD+0x434>
  }

  // 화면 클리어
  apOledClear(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7ff fe94 	bl	800279c <apOledClear>

  // BMP는 아래쪽부터 저장되므로 y좌표를 뒤집어서 읽기
  uint32_t bytes_per_pixel = bpp / 8;
 8002a74:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002a78:	f103 0312 	add.w	r3, r3, #18
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002a86:	f102 0208 	add.w	r2, r2, #8
 8002a8a:	6013      	str	r3, [r2, #0]
  uint32_t row_size = ((width * bytes_per_pixel + 3) / 4) * 4; // 4바이트 정렬
 8002a8c:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002a90:	f103 0318 	add.w	r3, r3, #24
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002a9a:	f102 0208 	add.w	r2, r2, #8
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	3303      	adds	r3, #3
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002aae:	f102 0204 	add.w	r2, r2, #4
 8002ab2:	6013      	str	r3, [r2, #0]

  for (int y = height - 1; y >= 0; y--)
 8002ab4:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002ab8:	f103 0314 	add.w	r3, r3, #20
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8002ac4:	f102 0204 	add.w	r2, r2, #4
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e117      	b.n	8002cfc <apOledDisplayImageFromSD+0x40c>
  {
 8002acc:	466b      	mov	r3, sp
 8002ace:	461e      	mov	r6, r3
    uint8_t row_buffer[row_size];
 8002ad0:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002ad4:	f103 0304 	add.w	r3, r3, #4
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	460b      	mov	r3, r1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	461d      	mov	r5, r3
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	00eb      	lsls	r3, r5, #3
 8002af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002af8:	00e2      	lsls	r2, r4, #3
 8002afa:	2300      	movs	r3, #0
 8002afc:	4688      	mov	r8, r1
 8002afe:	4699      	mov	r9, r3
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b14:	1dcb      	adds	r3, r1, #7
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	ebad 0d03 	sub.w	sp, sp, r3
 8002b1e:	466b      	mov	r3, sp
 8002b20:	3300      	adds	r3, #0
 8002b22:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002b26:	f102 021c 	add.w	r2, r2, #28
 8002b2a:	6013      	str	r3, [r2, #0]
    fres = f_read(&fil, row_buffer, row_size, &bytes_read);
 8002b2c:	f107 0308 	add.w	r3, r7, #8
 8002b30:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8002b34:	3804      	subs	r0, #4
 8002b36:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002b3a:	f102 0204 	add.w	r2, r2, #4
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	f507 5183 	add.w	r1, r7, #4192	@ 0x1060
 8002b44:	f101 011c 	add.w	r1, r1, #28
 8002b48:	6809      	ldr	r1, [r1, #0]
 8002b4a:	f009 fb73 	bl	800c234 <f_read>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002b54:	f102 021e 	add.w	r2, r2, #30
 8002b58:	7013      	strb	r3, [r2, #0]

    if (fres != FR_OK) break;
 8002b5a:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002b5e:	f103 031e 	add.w	r3, r3, #30
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <apOledDisplayImageFromSD+0x27c>
 8002b68:	46b5      	mov	sp, r6
 8002b6a:	e0cf      	b.n	8002d0c <apOledDisplayImageFromSD+0x41c>

    for (uint32_t x = 0; x < width && x < OLED_WIDTH; x++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e0a6      	b.n	8002cc4 <apOledDisplayImageFromSD+0x3d4>
    {
      if (y < OLED_HEIGHT)
 8002b76:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002b7a:	f103 0304 	add.w	r3, r3, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b82:	f300 8098 	bgt.w	8002cb6 <apOledDisplayImageFromSD+0x3c6>
      {
        uint32_t pixel_offset = x * bytes_per_pixel;
 8002b86:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002b90:	f102 0208 	add.w	r2, r2, #8
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002b9e:	f102 0218 	add.w	r2, r2, #24
 8002ba2:	6013      	str	r3, [r2, #0]
        uint8_t b = row_buffer[pixel_offset];
 8002ba4:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002ba8:	f103 031c 	add.w	r3, r3, #28
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002bb2:	f103 0318 	add.w	r3, r3, #24
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002bc0:	f102 0217 	add.w	r2, r2, #23
 8002bc4:	7013      	strb	r3, [r2, #0]
        uint8_t g = row_buffer[pixel_offset + 1];
 8002bc6:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002bca:	f103 0318 	add.w	r3, r3, #24
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002bd6:	f102 021c 	add.w	r2, r2, #28
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	5cd3      	ldrb	r3, [r2, r3]
 8002bde:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002be2:	f102 0216 	add.w	r2, r2, #22
 8002be6:	7013      	strb	r3, [r2, #0]
        uint8_t r = row_buffer[pixel_offset + 2];
 8002be8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002bec:	f103 0318 	add.w	r3, r3, #24
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002bf8:	f102 021c 	add.w	r2, r2, #28
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002c04:	f102 0215 	add.w	r2, r2, #21
 8002c08:	7013      	strb	r3, [r2, #0]

        // RGB를 그레이스케일로 변환 (ITU-R BT.709)
        uint8_t gray = (uint8_t)((0.2126f * r + 0.7152f * g + 0.0722f * b) / 16);
 8002c0a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002c0e:	f103 0315 	add.w	r3, r3, #21
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002d30 <apOledDisplayImageFromSD+0x440>
 8002c20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c24:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002c28:	f103 0316 	add.w	r3, r3, #22
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c36:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002d34 <apOledDisplayImageFromSD+0x444>
 8002c3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c42:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002c46:	f103 0317 	add.w	r3, r3, #23
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c54:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d38 <apOledDisplayImageFromSD+0x448>
 8002c58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c60:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c6c:	edc7 7a00 	vstr	s15, [r7]
 8002c70:	783b      	ldrb	r3, [r7, #0]
 8002c72:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002c76:	f102 021f 	add.w	r2, r2, #31
 8002c7a:	7013      	strb	r3, [r2, #0]
        if (gray > 15) gray = 15;
 8002c7c:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002c80:	f103 031f 	add.w	r3, r3, #31
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	d905      	bls.n	8002c96 <apOledDisplayImageFromSD+0x3a6>
 8002c8a:	230f      	movs	r3, #15
 8002c8c:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002c90:	f102 021f 	add.w	r2, r2, #31
 8002c94:	7013      	strb	r3, [r2, #0]

        apOledDrawPixel(x, y, gray);
 8002c96:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8002ca0:	f102 021f 	add.w	r2, r2, #31
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	f507 5185 	add.w	r1, r7, #4256	@ 0x10a0
 8002caa:	f101 0104 	add.w	r1, r1, #4
 8002cae:	6809      	ldr	r1, [r1, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fd9d 	bl	80027f0 <apOledDrawPixel>
    for (uint32_t x = 0; x < width && x < OLED_WIDTH; x++)
 8002cb6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002cce:	f103 0318 	add.w	r3, r3, #24
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d205      	bcs.n	8002ce4 <apOledDisplayImageFromSD+0x3f4>
 8002cd8:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2bff      	cmp	r3, #255	@ 0xff
 8002ce0:	f67f af49 	bls.w	8002b76 <apOledDisplayImageFromSD+0x286>
 8002ce4:	46b5      	mov	sp, r6
  for (int y = height - 1; y >= 0; y--)
 8002ce6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002cea:	f103 0304 	add.w	r3, r3, #4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8002cf6:	f102 0204 	add.w	r2, r2, #4
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8002d00:	f103 0304 	add.w	r3, r3, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f6bf aee0 	bge.w	8002acc <apOledDisplayImageFromSD+0x1dc>
      }
    }
  }

  f_close(&fil);
 8002d0c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d10:	3b04      	subs	r3, #4
 8002d12:	4618      	mov	r0, r3
 8002d14:	f009 fdff 	bl	800c916 <f_close>
  apOledUpdate();
 8002d18:	f7ff fd52 	bl	80027c0 <apOledUpdate>
 8002d1c:	e002      	b.n	8002d24 <apOledDisplayImageFromSD+0x434>
  if (!file_name) return;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <apOledDisplayImageFromSD+0x434>
  if (fres != FR_OK) return;
 8002d22:	bf00      	nop
}
 8002d24:	f507 5785 	add.w	r7, r7, #4256	@ 0x10a0
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d30:	3e59b3d0 	.word	0x3e59b3d0
 8002d34:	3f371759 	.word	0x3f371759
 8002d38:	3d93dd98 	.word	0x3d93dd98

08002d3c <sdDiskInitialize>:
 * FatFs diskio 함수 구현
 **************************************/

/* SD 초기화 */
DSTATUS sdDiskInitialize(BYTE drv)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    // 1단계: 드라이브 번호 확인 (0만 지원)
    if(drv) return STA_NOINIT;
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <sdDiskInitialize+0x14>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0d2      	b.n	8002ef6 <sdDiskInitialize+0x1ba>

    // 2단계: 물리적 디스크 존재 확인
    if(hwSdGetStatus() & STA_NODISK) return hwSdGetStatus();
 8002d50:	f001 fce4 	bl	800471c <hwSdGetStatus>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <sdDiskInitialize+0x2a>
 8002d5e:	f001 fcdd 	bl	800471c <hwSdGetStatus>
 8002d62:	4603      	mov	r3, r0
 8002d64:	e0c7      	b.n	8002ef6 <sdDiskInitialize+0x1ba>

    // 3단계: 전원 켜기
    hwSdInit();
 8002d66:	f001 fcc1 	bl	80046ec <hwSdInit>

    // 4단계: 카드 선택
    hwSdSelect();
 8002d6a:	f001 fd19 	bl	80047a0 <hwSdSelect>

    type = 0;  // 카드 타입 초기화
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73bb      	strb	r3, [r7, #14]

    // 5단계: IDLE 상태 확인
    if (hwSdSendCmd(CMD0, 0) == 1)  // R1 = 0x01 (IDLE 상태) 기대
 8002d72:	2100      	movs	r1, #0
 8002d74:	2040      	movs	r0, #64	@ 0x40
 8002d76:	f001 fdcb 	bl	8004910 <hwSdSendCmd>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	f040 80a6 	bne.w	8002ece <sdDiskInitialize+0x192>
    {
        hwSdSetTimer(1000);  // 1초 타임아웃
 8002d82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d86:	f001 fd1f 	bl	80047c8 <hwSdSetTimer>

        // 6단계: SD v2+ 확인 (CMD8 지원 여부)
        if (hwSdSendCmd(CMD8, 0x1AA) == 1)  // 0x1AA = 2.7-3.6V, 0xAA 체크패턴
 8002d8a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002d8e:	2048      	movs	r0, #72	@ 0x48
 8002d90:	f001 fdbe 	bl	8004910 <hwSdSendCmd>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d158      	bne.n	8002e4c <sdDiskInitialize+0x110>
        {
            // OCR(Operation Conditions Register) 수신
            for (n = 0; n < 4; n++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e00c      	b.n	8002dba <sdDiskInitialize+0x7e>
            {
                ocr[n] = hwSdRxByte();
 8002da0:	7bfc      	ldrb	r4, [r7, #15]
 8002da2:	f001 fd09 	bl	80047b8 <hwSdRxByte>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	f104 0310 	add.w	r3, r4, #16
 8002dae:	443b      	add	r3, r7
 8002db0:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	3301      	adds	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d9ef      	bls.n	8002da0 <sdDiskInitialize+0x64>
            }

            // 전압 범위 및 체크 패턴 확인
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)  // 지원 전압 + 체크패턴
 8002dc0:	7abb      	ldrb	r3, [r7, #10]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	f040 8083 	bne.w	8002ece <sdDiskInitialize+0x192>
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	2baa      	cmp	r3, #170	@ 0xaa
 8002dcc:	d17f      	bne.n	8002ece <sdDiskInitialize+0x192>
            {
                // ACMD41로 초기화 (HCS 비트 설정)
                do {
                    if (hwSdSendCmd(CMD55, 0) <= 1 &&
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2077      	movs	r0, #119	@ 0x77
 8002dd2:	f001 fd9d 	bl	8004910 <hwSdSendCmd>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d807      	bhi.n	8002dec <sdDiskInitialize+0xb0>
                        hwSdSendCmd(CMD41, 1UL << 30) == 0) // HCS=1 (고용량 지원)
 8002ddc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002de0:	2069      	movs	r0, #105	@ 0x69
 8002de2:	f001 fd95 	bl	8004910 <hwSdSendCmd>
 8002de6:	4603      	mov	r3, r0
                    if (hwSdSendCmd(CMD55, 0) <= 1 &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <sdDiskInitialize+0xbc>
                        break;
                } while (hwSdGetTimer());
 8002dec:	f001 fcfc 	bl	80047e8 <hwSdGetTimer>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1eb      	bne.n	8002dce <sdDiskInitialize+0x92>
 8002df6:	e000      	b.n	8002dfa <sdDiskInitialize+0xbe>
                        break;
 8002df8:	bf00      	nop

                // 초기화 완료 후 OCR 읽기
                if (hwSdGetTimer() && hwSdSendCmd(CMD58, 0) == 0)
 8002dfa:	f001 fcf5 	bl	80047e8 <hwSdGetTimer>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d064      	beq.n	8002ece <sdDiskInitialize+0x192>
 8002e04:	2100      	movs	r1, #0
 8002e06:	207a      	movs	r0, #122	@ 0x7a
 8002e08:	f001 fd82 	bl	8004910 <hwSdSendCmd>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d15d      	bne.n	8002ece <sdDiskInitialize+0x192>
                {
                    for (n = 0; n < 4; n++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e00c      	b.n	8002e32 <sdDiskInitialize+0xf6>
                    {
                        ocr[n] = hwSdRxByte();
 8002e18:	7bfc      	ldrb	r4, [r7, #15]
 8002e1a:	f001 fccd 	bl	80047b8 <hwSdRxByte>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	f104 0310 	add.w	r3, r4, #16
 8002e26:	443b      	add	r3, r7
 8002e28:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d9ef      	bls.n	8002e18 <sdDiskInitialize+0xdc>
                    }

                    // CCS 비트 확인 (카드 용량 구조)
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002e38:	7a3b      	ldrb	r3, [r7, #8]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <sdDiskInitialize+0x10a>
 8002e42:	230c      	movs	r3, #12
 8002e44:	e000      	b.n	8002e48 <sdDiskInitialize+0x10c>
 8002e46:	2304      	movs	r3, #4
 8002e48:	73bb      	strb	r3, [r7, #14]
 8002e4a:	e040      	b.n	8002ece <sdDiskInitialize+0x192>
            }
        }
        else
        {
            // SD v1 또는 MMC 카드
            type = (hwSdSendCmd(CMD55, 0) <= 1 && hwSdSendCmd(CMD41, 0) <= 1)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2077      	movs	r0, #119	@ 0x77
 8002e50:	f001 fd5e 	bl	8004910 <hwSdSendCmd>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d808      	bhi.n	8002e6c <sdDiskInitialize+0x130>
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2069      	movs	r0, #105	@ 0x69
 8002e5e:	f001 fd57 	bl	8004910 <hwSdSendCmd>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d801      	bhi.n	8002e6c <sdDiskInitialize+0x130>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e000      	b.n	8002e6e <sdDiskInitialize+0x132>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73bb      	strb	r3, [r7, #14]
                   ? CT_SD1 : CT_MMC;

            do
            {
                if (type == CT_SD1)
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d10e      	bne.n	8002e94 <sdDiskInitialize+0x158>
                {
                    // SD v1: ACMD41
                    if (hwSdSendCmd(CMD55, 0) <= 1 && hwSdSendCmd(CMD41, 0) == 0)
 8002e76:	2100      	movs	r1, #0
 8002e78:	2077      	movs	r0, #119	@ 0x77
 8002e7a:	f001 fd49 	bl	8004910 <hwSdSendCmd>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d80e      	bhi.n	8002ea2 <sdDiskInitialize+0x166>
 8002e84:	2100      	movs	r1, #0
 8002e86:	2069      	movs	r0, #105	@ 0x69
 8002e88:	f001 fd42 	bl	8004910 <hwSdSendCmd>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <sdDiskInitialize+0x166>
                        break;
 8002e92:	e00d      	b.n	8002eb0 <sdDiskInitialize+0x174>
                }
                else
                {
                    // MMC: CMD1
                    if (hwSdSendCmd(CMD1, 0) == 0) break;
 8002e94:	2100      	movs	r1, #0
 8002e96:	2041      	movs	r0, #65	@ 0x41
 8002e98:	f001 fd3a 	bl	8004910 <hwSdSendCmd>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <sdDiskInitialize+0x172>
                }
            } while (hwSdGetTimer());
 8002ea2:	f001 fca1 	bl	80047e8 <hwSdGetTimer>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e1      	bne.n	8002e70 <sdDiskInitialize+0x134>
 8002eac:	e000      	b.n	8002eb0 <sdDiskInitialize+0x174>
                    if (hwSdSendCmd(CMD1, 0) == 0) break;
 8002eae:	bf00      	nop

            // 블록 크기 설정 (512바이트)
            if (!hwSdGetTimer() || hwSdSendCmd(CMD16, 512) != 0)
 8002eb0:	f001 fc9a 	bl	80047e8 <hwSdGetTimer>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <sdDiskInitialize+0x18e>
 8002eba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ebe:	2050      	movs	r0, #80	@ 0x50
 8002ec0:	f001 fd26 	bl	8004910 <hwSdSendCmd>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <sdDiskInitialize+0x192>
                type = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73bb      	strb	r3, [r7, #14]
        }
    }

    hwSdSetCardType(type);  // 감지된 카드 타입 저장
 8002ece:	7bbb      	ldrb	r3, [r7, #14]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 fc55 	bl	8004780 <hwSdSetCardType>

    hwSdDeselect();      // 카드 비활성화
 8002ed6:	f001 fc69 	bl	80047ac <hwSdDeselect>
    hwSdRxByte();        // 추가 클럭
 8002eda:	f001 fc6d 	bl	80047b8 <hwSdRxByte>

    // 상태 업데이트
    if (type)
 8002ede:	7bbb      	ldrb	r3, [r7, #14]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <sdDiskInitialize+0x1b0>
    {
        hwSdClearStatus(STA_NOINIT);  // 초기화 완료 플래그 제거
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f001 fc25 	bl	8004734 <hwSdClearStatus>
 8002eea:	e001      	b.n	8002ef0 <sdDiskInitialize+0x1b4>
    }
    else
    {
        hwSdPowerOff();        // 초기화 실패 시 전원 끄기
 8002eec:	f001 fc10 	bl	8004710 <hwSdPowerOff>
    }

    return hwSdGetStatus();
 8002ef0:	f001 fc14 	bl	800471c <hwSdGetStatus>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}

08002efe <sdDiskStatus>:

/* SD 상태 리턴함수 */
DSTATUS sdDiskStatus(BYTE drv)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <sdDiskStatus+0x14>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e002      	b.n	8002f18 <sdDiskStatus+0x1a>
    return hwSdGetStatus();
 8002f12:	f001 fc03 	bl	800471c <hwSdGetStatus>
 8002f16:	4603      	mov	r3, r0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <sdDiskRead>:

/* 섹터 읽기 함수 */
DRESULT sdDiskRead(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <sdDiskRead+0x1c>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <sdDiskRead+0x20>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	e052      	b.n	8002fe6 <sdDiskRead+0xc6>

    // 2단계: 초기화 상태 확인
    if (hwSdGetStatus() & STA_NOINIT) return RES_NOTRDY;
 8002f40:	f001 fbec 	bl	800471c <hwSdGetStatus>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <sdDiskRead+0x32>
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e049      	b.n	8002fe6 <sdDiskRead+0xc6>

    // 3단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(hwSdGetCardType() & CT_BLOCK)) sector *= 512;
 8002f52:	f001 fc09 	bl	8004768 <hwSdGetCardType>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <sdDiskRead+0x46>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	025b      	lsls	r3, r3, #9
 8002f64:	607b      	str	r3, [r7, #4]

    hwSdSelect();
 8002f66:	f001 fc1b 	bl	80047a0 <hwSdSelect>

    if (count == 1)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d111      	bne.n	8002f94 <sdDiskRead+0x74>
    {
        // 단일 블록 읽기
        if ((hwSdSendCmd(CMD17, sector) == 0) && hwSdRxDataBlock(buff, 512))
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	2051      	movs	r0, #81	@ 0x51
 8002f74:	f001 fccc 	bl	8004910 <hwSdSendCmd>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d129      	bne.n	8002fd2 <sdDiskRead+0xb2>
 8002f7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f82:	68b8      	ldr	r0, [r7, #8]
 8002f84:	f001 fc44 	bl	8004810 <hwSdRxDataBlock>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d021      	beq.n	8002fd2 <sdDiskRead+0xb2>
            count = 0;  // 성공 시 count를 0으로
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	e01e      	b.n	8002fd2 <sdDiskRead+0xb2>
    }
    else
    {
        // 다중 블록 읽기
        if (hwSdSendCmd(CMD18, sector) == 0)
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	2052      	movs	r0, #82	@ 0x52
 8002f98:	f001 fcba 	bl	8004910 <hwSdSendCmd>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d117      	bne.n	8002fd2 <sdDiskRead+0xb2>
        {
            do {
                if (!hwSdRxDataBlock(buff, 512)) break;
 8002fa2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fa6:	68b8      	ldr	r0, [r7, #8]
 8002fa8:	f001 fc32 	bl	8004810 <hwSdRxDataBlock>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <sdDiskRead+0xa8>
                buff += 512;  // 다음 블록 버퍼 위치
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002fb8:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ed      	bne.n	8002fa2 <sdDiskRead+0x82>
 8002fc6:	e000      	b.n	8002fca <sdDiskRead+0xaa>
                if (!hwSdRxDataBlock(buff, 512)) break;
 8002fc8:	bf00      	nop

            hwSdSendCmd(CMD12, 0);  // 전송 중지 명령
 8002fca:	2100      	movs	r1, #0
 8002fcc:	204c      	movs	r0, #76	@ 0x4c
 8002fce:	f001 fc9f 	bl	8004910 <hwSdSendCmd>
        }
    }

    hwSdDeselect();
 8002fd2:	f001 fbeb 	bl	80047ac <hwSdDeselect>
    hwSdRxByte();
 8002fd6:	f001 fbef 	bl	80047b8 <hwSdRxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <sdDiskWrite>:

/* 섹터 쓰기 함수 */
#if _USE_WRITE == 1
DRESULT sdDiskWrite(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <sdDiskWrite+0x1c>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <sdDiskWrite+0x20>
 800300a:	2304      	movs	r3, #4
 800300c:	e06d      	b.n	80030ea <sdDiskWrite+0xfc>

    // 2단계: 초기화 상태 확인
    if (hwSdGetStatus() & STA_NOINIT) return RES_NOTRDY;
 800300e:	f001 fb85 	bl	800471c <hwSdGetStatus>
 8003012:	4603      	mov	r3, r0
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <sdDiskWrite+0x32>
 800301c:	2303      	movs	r3, #3
 800301e:	e064      	b.n	80030ea <sdDiskWrite+0xfc>

    // 3단계: 쓰기 보호 확인
    if (hwSdGetStatus() & STA_PROTECT) return RES_WRPRT;
 8003020:	f001 fb7c 	bl	800471c <hwSdGetStatus>
 8003024:	4603      	mov	r3, r0
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <sdDiskWrite+0x44>
 800302e:	2302      	movs	r3, #2
 8003030:	e05b      	b.n	80030ea <sdDiskWrite+0xfc>

    // 4단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(hwSdGetCardType() & CT_BLOCK)) sector *= 512;
 8003032:	f001 fb99 	bl	8004768 <hwSdGetCardType>
 8003036:	4603      	mov	r3, r0
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <sdDiskWrite+0x58>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	025b      	lsls	r3, r3, #9
 8003044:	607b      	str	r3, [r7, #4]

    hwSdSelect();
 8003046:	f001 fbab 	bl	80047a0 <hwSdSelect>

    if (count == 1)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d110      	bne.n	8003072 <sdDiskWrite+0x84>
    {
        // 단일 블록 쓰기
        if ((hwSdSendCmd(CMD24, sector) == 0) &&
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	2058      	movs	r0, #88	@ 0x58
 8003054:	f001 fc5c 	bl	8004910 <hwSdSendCmd>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d13b      	bne.n	80030d6 <sdDiskWrite+0xe8>
            hwSdTxDataBlock(buff, TOKEN_START_BLOCK))
 800305e:	21fe      	movs	r1, #254	@ 0xfe
 8003060:	68b8      	ldr	r0, [r7, #8]
 8003062:	f001 fc05 	bl	8004870 <hwSdTxDataBlock>
 8003066:	4603      	mov	r3, r0
        if ((hwSdSendCmd(CMD24, sector) == 0) &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d034      	beq.n	80030d6 <sdDiskWrite+0xe8>
            count = 0;  // 성공 시 count를 0으로
 800306c:	2300      	movs	r3, #0
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	e031      	b.n	80030d6 <sdDiskWrite+0xe8>
    }
    else
    {
        // 다중 블록 쓰기
        if (hwSdGetCardType() & CT_SD1)
 8003072:	f001 fb79 	bl	8004768 <hwSdGetCardType>
 8003076:	4603      	mov	r3, r0
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <sdDiskWrite+0xa2>
        {
            hwSdSendCmd(CMD55, 0);
 8003080:	2100      	movs	r1, #0
 8003082:	2077      	movs	r0, #119	@ 0x77
 8003084:	f001 fc44 	bl	8004910 <hwSdSendCmd>
            hwSdSendCmd(CMD23, count); /* ACMD23 */
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	2057      	movs	r0, #87	@ 0x57
 800308c:	f001 fc40 	bl	8004910 <hwSdSendCmd>
        }

        if (hwSdSendCmd(CMD25, sector) == 0)
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	2059      	movs	r0, #89	@ 0x59
 8003094:	f001 fc3c 	bl	8004910 <hwSdSendCmd>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11b      	bne.n	80030d6 <sdDiskWrite+0xe8>
        {
            do {
                if(!hwSdTxDataBlock(buff, TOKEN_MULTI_WRITE)) break;
 800309e:	21fc      	movs	r1, #252	@ 0xfc
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f001 fbe5 	bl	8004870 <hwSdTxDataBlock>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <sdDiskWrite+0xd4>
                buff += 512;  // 다음 블록 버퍼 위치
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80030b2:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ee      	bne.n	800309e <sdDiskWrite+0xb0>
 80030c0:	e000      	b.n	80030c4 <sdDiskWrite+0xd6>
                if(!hwSdTxDataBlock(buff, TOKEN_MULTI_WRITE)) break;
 80030c2:	bf00      	nop

            /* STOP_TRAN 토큰 */
            if(!hwSdTxDataBlock(0, TOKEN_STOP_TRAN))
 80030c4:	21fd      	movs	r1, #253	@ 0xfd
 80030c6:	2000      	movs	r0, #0
 80030c8:	f001 fbd2 	bl	8004870 <hwSdTxDataBlock>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <sdDiskWrite+0xe8>
            {
                count = 1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	603b      	str	r3, [r7, #0]
            }
        }
    }

    hwSdDeselect();
 80030d6:	f001 fb69 	bl	80047ac <hwSdDeselect>
    hwSdRxByte();
 80030da:	f001 fb6d 	bl	80047b8 <hwSdRxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <sdDiskIoctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT sdDiskIoctl(BYTE drv, BYTE ctrl, void *buff)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b08b      	sub	sp, #44	@ 0x2c
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	603a      	str	r2, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]
 8003100:	460b      	mov	r3, r1
 8003102:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	623b      	str	r3, [r7, #32]

    if (drv) return RES_PARERR;
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <sdDiskIoctl+0x1e>
 800310e:	2304      	movs	r3, #4
 8003110:	e0ba      	b.n	8003288 <sdDiskIoctl+0x194>
    res = RES_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)  // 전원 제어
 8003118:	79bb      	ldrb	r3, [r7, #6]
 800311a:	2b05      	cmp	r3, #5
 800311c:	d124      	bne.n	8003168 <sdDiskIoctl+0x74>
    {
        switch (*ptr)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d012      	beq.n	800314c <sdDiskIoctl+0x58>
 8003126:	2b02      	cmp	r3, #2
 8003128:	dc1a      	bgt.n	8003160 <sdDiskIoctl+0x6c>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <sdDiskIoctl+0x40>
 800312e:	2b01      	cmp	r3, #1
 8003130:	d006      	beq.n	8003140 <sdDiskIoctl+0x4c>
 8003132:	e015      	b.n	8003160 <sdDiskIoctl+0x6c>
        {
        case 0: hwSdPowerOff(); res = RES_OK; break;      // 전원 끄기
 8003134:	f001 faec 	bl	8004710 <hwSdPowerOff>
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800313e:	e0a1      	b.n	8003284 <sdDiskIoctl+0x190>
        case 1: hwSdInit(); res = RES_OK; break;          // 전원 켜기
 8003140:	f001 fad4 	bl	80046ec <hwSdInit>
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800314a:	e09b      	b.n	8003284 <sdDiskIoctl+0x190>
        case 2: *(ptr + 1) = hwSdCheckPower(); res = RES_OK; break; // 전원 상태 확인
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	1c5c      	adds	r4, r3, #1
 8003150:	f001 fad2 	bl	80046f8 <hwSdCheckPower>
 8003154:	4603      	mov	r3, r0
 8003156:	7023      	strb	r3, [r4, #0]
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800315e:	e091      	b.n	8003284 <sdDiskIoctl+0x190>
        default: res = RES_PARERR;
 8003160:	2304      	movs	r3, #4
 8003162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003166:	e08d      	b.n	8003284 <sdDiskIoctl+0x190>
        }
    }
    else
    {
        if (hwSdGetStatus() & STA_NOINIT) return RES_NOTRDY;
 8003168:	f001 fad8 	bl	800471c <hwSdGetStatus>
 800316c:	4603      	mov	r3, r0
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <sdDiskIoctl+0x86>
 8003176:	2303      	movs	r3, #3
 8003178:	e086      	b.n	8003288 <sdDiskIoctl+0x194>

        hwSdSelect();
 800317a:	f001 fb11 	bl	80047a0 <hwSdSelect>

        switch (ctrl)
 800317e:	79bb      	ldrb	r3, [r7, #6]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d87b      	bhi.n	800327c <sdDiskIoctl+0x188>
 8003184:	a201      	add	r2, pc, #4	@ (adr r2, 800318c <sdDiskIoctl+0x98>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	08003257 	.word	0x08003257
 8003190:	0800319d 	.word	0x0800319d
 8003194:	08003247 	.word	0x08003247
 8003198:	08003269 	.word	0x08003269
        {
        case GET_SECTOR_COUNT:  // 총 섹터 수 얻기
            if ((hwSdSendCmd(CMD9, 0) == 0) && hwSdRxDataBlock(csd, 16))
 800319c:	2100      	movs	r1, #0
 800319e:	2049      	movs	r0, #73	@ 0x49
 80031a0:	f001 fbb6 	bl	8004910 <hwSdSendCmd>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d165      	bne.n	8003276 <sdDiskIoctl+0x182>
 80031aa:	f107 0308 	add.w	r3, r7, #8
 80031ae:	2110      	movs	r1, #16
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 fb2d 	bl	8004810 <hwSdRxDataBlock>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05c      	beq.n	8003276 <sdDiskIoctl+0x182>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 80031bc:	7a3b      	ldrb	r3, [r7, #8]
 80031be:	099b      	lsrs	r3, r3, #6
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10f      	bne.n	80031e6 <sdDiskIoctl+0xf2>
                {
                    // SDv2 CSD 파싱
                    DWORD cSize;
                    cSize = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80031ce:	7c3b      	ldrb	r3, [r7, #16]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	4313      	orrs	r3, r2
 80031d4:	7c7a      	ldrb	r2, [r7, #17]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (cSize + 1) << 10;  // (C_SIZE+1) * 1024
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	3301      	adds	r3, #1
 80031de:	029a      	lsls	r2, r3, #10
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e02b      	b.n	800323e <sdDiskIoctl+0x14a>
                }
                else /* MMC or SDC V1 */
                {
                    // 복잡한 CSD v1 계산
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80031e6:	7b7b      	ldrb	r3, [r7, #13]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	7cbb      	ldrb	r3, [r7, #18]
 80031f0:	09db      	lsrs	r3, r3, #7
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	7c7b      	ldrb	r3, [r7, #17]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0306 	and.w	r3, r3, #6
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4413      	add	r3, r2
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3302      	adds	r3, #2
 800320a:	77fb      	strb	r3, [r7, #31]
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800320c:	7c3b      	ldrb	r3, [r7, #16]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	b29b      	uxth	r3, r3
 800321a:	4413      	add	r3, r2
 800321c:	b29a      	uxth	r2, r3
 800321e:	7bbb      	ldrb	r3, [r7, #14]
 8003220:	029b      	lsls	r3, r3, #10
 8003222:	b29b      	uxth	r3, r3
 8003224:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003228:	b29b      	uxth	r3, r3
 800322a:	4413      	add	r3, r2
 800322c:	b29b      	uxth	r3, r3
 800322e:	3301      	adds	r3, #1
 8003230:	83bb      	strh	r3, [r7, #28]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003232:	8bba      	ldrh	r2, [r7, #28]
 8003234:	7ffb      	ldrb	r3, [r7, #31]
 8003236:	3b09      	subs	r3, #9
 8003238:	409a      	lsls	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8003244:	e017      	b.n	8003276 <sdDiskIoctl+0x182>

        case GET_SECTOR_SIZE:   // 섹터 크기 (항상 512)
            *(WORD*) buff = 512;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800324c:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8003254:	e012      	b.n	800327c <sdDiskIoctl+0x188>

        case CTRL_SYNC:         // 동기화 (쓰기 완료 대기)
            if (hwSdReadyWait() == 0xFF) res = RES_OK;
 8003256:	f001 fad3 	bl	8004800 <hwSdReadyWait>
 800325a:	4603      	mov	r3, r0
 800325c:	2bff      	cmp	r3, #255	@ 0xff
 800325e:	d10c      	bne.n	800327a <sdDiskIoctl+0x186>
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8003266:	e008      	b.n	800327a <sdDiskIoctl+0x186>

        case GET_BLOCK_SIZE:    // 블록 크기 (SD카드는 보통 1)
            *(DWORD*)buff = 1;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8003274:	e002      	b.n	800327c <sdDiskIoctl+0x188>
            break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <sdDiskIoctl+0x188>
            break;
 800327a:	bf00      	nop
        }

        hwSdDeselect();
 800327c:	f001 fa96 	bl	80047ac <hwSdDeselect>
        hwSdRxByte();
 8003280:	f001 fa9a 	bl	80047b8 <hwSdRxByte>
    }

    return res;
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003288:	4618      	mov	r0, r3
 800328a:	372c      	adds	r7, #44	@ 0x2c
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}

08003290 <calcCRC16>:
#define MODBUS_FUNC_READ_HOLD  0x03
#define WIND_SPEED_REG         0x0000

// CRC16 계산 함수
static uint16_t calcCRC16(uint8_t *data, uint16_t length)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 800329c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032a0:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 80032a2:	2300      	movs	r3, #0
 80032a4:	81bb      	strh	r3, [r7, #12]
 80032a6:	e022      	b.n	80032ee <calcCRC16+0x5e>
        crc ^= data[i];
 80032a8:	89bb      	ldrh	r3, [r7, #12]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	4053      	eors	r3, r2
 80032b6:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) {
 80032b8:	2300      	movs	r3, #0
 80032ba:	72fb      	strb	r3, [r7, #11]
 80032bc:	e011      	b.n	80032e2 <calcCRC16+0x52>
            if (crc & 0x0001) {
 80032be:	89fb      	ldrh	r3, [r7, #14]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <calcCRC16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <calcCRC16+0x74>)
 80032d0:	4053      	eors	r3, r2
 80032d2:	81fb      	strh	r3, [r7, #14]
 80032d4:	e002      	b.n	80032dc <calcCRC16+0x4c>
            } else {
                crc = crc >> 1;
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) {
 80032dc:	7afb      	ldrb	r3, [r7, #11]
 80032de:	3301      	adds	r3, #1
 80032e0:	72fb      	strb	r3, [r7, #11]
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	d9ea      	bls.n	80032be <calcCRC16+0x2e>
    for (uint16_t i = 0; i < length; i++) {
 80032e8:	89bb      	ldrh	r3, [r7, #12]
 80032ea:	3301      	adds	r3, #1
 80032ec:	81bb      	strh	r3, [r7, #12]
 80032ee:	89ba      	ldrh	r2, [r7, #12]
 80032f0:	887b      	ldrh	r3, [r7, #2]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d3d8      	bcc.n	80032a8 <calcCRC16+0x18>
            }
        }
    }
    return crc;
 80032f6:	89fb      	ldrh	r3, [r7, #14]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	ffffa001 	.word	0xffffa001

08003308 <apSensorInit>:

bool apSensorInit(wind_sensor_t *sensor)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
    memset(sensor, 0, sizeof(wind_sensor_t));
 8003310:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003314:	2100      	movs	r1, #0
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f00a fdda 	bl	800ded0 <memset>
    sensor->data.wind_speed = 0.0f;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    sensor->request_interval = 100; // 100ms
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2264      	movs	r2, #100	@ 0x64
 800332a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // UART3 DMA 수신 시작
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, sensor->rx_buffer,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003334:	4619      	mov	r1, r3
 8003336:	4805      	ldr	r0, [pc, #20]	@ (800334c <apSensorInit+0x44>)
 8003338:	f006 fa7e 	bl	8009838 <HAL_UARTEx_ReceiveToIdle_DMA>
                                 sizeof(sensor->rx_buffer));

    printf("Sensor Init Complete\r\n");
 800333c:	4804      	ldr	r0, [pc, #16]	@ (8003350 <apSensorInit+0x48>)
 800333e:	f00a fc8f 	bl	800dc60 <puts>
    return 1;
 8003342:	2301      	movs	r3, #1
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20004abc 	.word	0x20004abc
 8003350:	08010584 	.word	0x08010584

08003354 <apSensorRequest>:

bool apSensorRequest(wind_sensor_t *sensor)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
    uint32_t current_time = HAL_GetTick();
 800335c:	f001 fbba 	bl	8004ad4 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

    if (current_time - sensor->last_request_time >= sensor->request_interval) {
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	1ad2      	subs	r2, r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003372:	429a      	cmp	r2, r3
 8003374:	d347      	bcc.n	8003406 <apSensorRequest+0xb2>
        uint8_t request[8];

        // Modbus 요청 프레임 구성
        request[0] = MODBUS_SLAVE_ADDR;
 8003376:	2301      	movs	r3, #1
 8003378:	723b      	strb	r3, [r7, #8]
        request[1] = MODBUS_FUNC_READ_HOLD;
 800337a:	2303      	movs	r3, #3
 800337c:	727b      	strb	r3, [r7, #9]
        request[2] = (WIND_SPEED_REG >> 8) & 0xFF;
 800337e:	2300      	movs	r3, #0
 8003380:	72bb      	strb	r3, [r7, #10]
        request[3] = WIND_SPEED_REG & 0xFF;
 8003382:	2300      	movs	r3, #0
 8003384:	72fb      	strb	r3, [r7, #11]
        request[4] = 0x00; // 레지스터 개수 상위바이트
 8003386:	2300      	movs	r3, #0
 8003388:	733b      	strb	r3, [r7, #12]
        request[5] = 0x02; // 레지스터 개수 하위바이트 (2개)
 800338a:	2302      	movs	r3, #2
 800338c:	737b      	strb	r3, [r7, #13]

        // CRC 계산
        uint16_t crc = calcCRC16(request, 6);
 800338e:	f107 0308 	add.w	r3, r7, #8
 8003392:	2106      	movs	r1, #6
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff7b 	bl	8003290 <calcCRC16>
 800339a:	4603      	mov	r3, r0
 800339c:	827b      	strh	r3, [r7, #18]
        request[6] = crc & 0xFF;
 800339e:	8a7b      	ldrh	r3, [r7, #18]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	73bb      	strb	r3, [r7, #14]
        request[7] = (crc >> 8) & 0xFF;
 80033a4:	8a7b      	ldrh	r3, [r7, #18]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	73fb      	strb	r3, [r7, #15]

        // RS485 송신 모드
        HAL_GPIO_WritePin(Modbus_DE_GPIO_Port, Modbus_DE_Pin, GPIO_PIN_SET);
 80033ae:	2201      	movs	r2, #1
 80033b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033b4:	4816      	ldr	r0, [pc, #88]	@ (8003410 <apSensorRequest+0xbc>)
 80033b6:	f002 f9a3 	bl	8005700 <HAL_GPIO_WritePin>

        // UART3로 전송
        HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, request, 8, 1000);
 80033ba:	f107 0108 	add.w	r1, r7, #8
 80033be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033c2:	2208      	movs	r2, #8
 80033c4:	4813      	ldr	r0, [pc, #76]	@ (8003414 <apSensorRequest+0xc0>)
 80033c6:	f003 ff79 	bl	80072bc <HAL_UART_Transmit>
 80033ca:	4603      	mov	r3, r0
 80033cc:	747b      	strb	r3, [r7, #17]

        // 전송 완료 대기
        while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET);
 80033ce:	bf00      	nop
 80033d0:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <apSensorRequest+0xc0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033da:	2b40      	cmp	r3, #64	@ 0x40
 80033dc:	d1f8      	bne.n	80033d0 <apSensorRequest+0x7c>

        // RS485 수신 모드
        HAL_GPIO_WritePin(Modbus_DE_GPIO_Port, Modbus_DE_Pin, GPIO_PIN_RESET);
 80033de:	2200      	movs	r2, #0
 80033e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033e4:	480a      	ldr	r0, [pc, #40]	@ (8003410 <apSensorRequest+0xbc>)
 80033e6:	f002 f98b 	bl	8005700 <HAL_GPIO_WritePin>

        sensor->last_request_time = current_time;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

        if (status == HAL_OK) {
 80033f2:	7c7b      	ldrb	r3, [r7, #17]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <apSensorRequest+0xa8>
            return 1;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e005      	b.n	8003408 <apSensorRequest+0xb4>
        } else {
            printf("Modbus Request Failed: %d\r\n", status);
 80033fc:	7c7b      	ldrb	r3, [r7, #17]
 80033fe:	4619      	mov	r1, r3
 8003400:	4805      	ldr	r0, [pc, #20]	@ (8003418 <apSensorRequest+0xc4>)
 8003402:	f00a fbc5 	bl	800db90 <iprintf>
        }
    }

    return 0;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	48000400 	.word	0x48000400
 8003414:	20004abc 	.word	0x20004abc
 8003418:	0801059c 	.word	0x0801059c

0800341c <apSensorUpdate>:

bool apSensorUpdate(wind_sensor_t *sensor)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
    if (sensor->frame_ready && sensor->rx_index >= 7) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800342a:	2b00      	cmp	r3, #0
 800342c:	d06c      	beq.n	8003508 <apSensorUpdate+0xec>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003434:	2b06      	cmp	r3, #6
 8003436:	d967      	bls.n	8003508 <apSensorUpdate+0xec>

        // CRC 검증
        uint16_t calc_crc = calcCRC16(sensor->rx_buffer, sensor->rx_index - 2);
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003440:	3b02      	subs	r3, #2
 8003442:	b29b      	uxth	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f7ff ff22 	bl	8003290 <calcCRC16>
 800344c:	4603      	mov	r3, r0
 800344e:	81fb      	strh	r3, [r7, #14]
        uint16_t recv_crc = sensor->rx_buffer[sensor->rx_index - 2] |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003456:	3b02      	subs	r3, #2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	5cd3      	ldrb	r3, [r2, r3]
 800345c:	b21a      	sxth	r2, r3
                           (sensor->rx_buffer[sensor->rx_index - 1] << 8);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003464:	3b01      	subs	r3, #1
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	5ccb      	ldrb	r3, [r1, r3]
        uint16_t recv_crc = sensor->rx_buffer[sensor->rx_index - 2] |
 800346a:	b21b      	sxth	r3, r3
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	b21b      	sxth	r3, r3
 8003470:	4313      	orrs	r3, r2
 8003472:	b21b      	sxth	r3, r3
 8003474:	81bb      	strh	r3, [r7, #12]

        if (calc_crc == recv_crc) {
 8003476:	89fa      	ldrh	r2, [r7, #14]
 8003478:	89bb      	ldrh	r3, [r7, #12]
 800347a:	429a      	cmp	r2, r3
 800347c:	d12d      	bne.n	80034da <apSensorUpdate+0xbe>
            // 응답 데이터 파싱
            if (sensor->rx_buffer[0] == MODBUS_SLAVE_ADDR &&
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d12f      	bne.n	80034e6 <apSensorUpdate+0xca>
                sensor->rx_buffer[1] == MODBUS_FUNC_READ_HOLD &&
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	785b      	ldrb	r3, [r3, #1]
            if (sensor->rx_buffer[0] == MODBUS_SLAVE_ADDR &&
 800348a:	2b03      	cmp	r3, #3
 800348c:	d12b      	bne.n	80034e6 <apSensorUpdate+0xca>
                sensor->rx_buffer[2] >= 4) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	789b      	ldrb	r3, [r3, #2]
                sensor->rx_buffer[1] == MODBUS_FUNC_READ_HOLD &&
 8003492:	2b03      	cmp	r3, #3
 8003494:	d927      	bls.n	80034e6 <apSensorUpdate+0xca>

                uint16_t raw_data = (sensor->rx_buffer[3] << 8) | sensor->rx_buffer[4];
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	78db      	ldrb	r3, [r3, #3]
 800349a:	b21b      	sxth	r3, r3
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	b21a      	sxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	791b      	ldrb	r3, [r3, #4]
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	4313      	orrs	r3, r2
 80034a8:	b21b      	sxth	r3, r3
 80034aa:	817b      	strh	r3, [r7, #10]
                sensor->data.wind_speed = raw_data * 0.1f;
 80034ac:	897b      	ldrh	r3, [r7, #10]
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003514 <apSensorUpdate+0xf8>
 80034ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
                sensor->data.timestamp = HAL_GetTick();
 80034c4:	f001 fb06 	bl	8004ad4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                sensor->data.valid = 1;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 80034d8:	e005      	b.n	80034e6 <apSensorUpdate+0xca>

            }
        } else {
            printf("CRC Error: calc=0x%04X, recv=0x%04X\r\n", calc_crc, recv_crc);
 80034da:	89fb      	ldrh	r3, [r7, #14]
 80034dc:	89ba      	ldrh	r2, [r7, #12]
 80034de:	4619      	mov	r1, r3
 80034e0:	480d      	ldr	r0, [pc, #52]	@ (8003518 <apSensorUpdate+0xfc>)
 80034e2:	f00a fb55 	bl	800db90 <iprintf>
        }

        // 프레임 처리 완료
        sensor->rx_index = 0;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
        sensor->frame_ready = 0;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
        memset(sensor->rx_buffer, 0, sizeof(sensor->rx_buffer));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f00a fce6 	bl	800ded0 <memset>

        return 1;
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <apSensorUpdate+0xee>
    }

    return 0;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	3dcccccd 	.word	0x3dcccccd
 8003518:	080105b8 	.word	0x080105b8

0800351c <apSensorGetSpeed>:

float apSensorGetSpeed(wind_sensor_t *sensor)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
    return sensor->data.wind_speed;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800352a:	ee07 3a90 	vmov	s15, r3
}
 800352e:	eeb0 0a67 	vmov.f32	s0, s15
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <apSensorIsValid>:

bool apSensorIsValid(wind_sensor_t *sensor)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
    return sensor->data.valid;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800355e:	4b1a      	ldr	r3, [pc, #104]	@ (80035c8 <MX_DMA_Init+0x70>)
 8003560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003562:	4a19      	ldr	r2, [pc, #100]	@ (80035c8 <MX_DMA_Init+0x70>)
 8003564:	f043 0304 	orr.w	r3, r3, #4
 8003568:	6493      	str	r3, [r2, #72]	@ 0x48
 800356a:	4b17      	ldr	r3, [pc, #92]	@ (80035c8 <MX_DMA_Init+0x70>)
 800356c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <MX_DMA_Init+0x70>)
 8003578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800357a:	4a13      	ldr	r2, [pc, #76]	@ (80035c8 <MX_DMA_Init+0x70>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6493      	str	r3, [r2, #72]	@ 0x48
 8003582:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <MX_DMA_Init+0x70>)
 8003584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800358e:	2200      	movs	r2, #0
 8003590:	2100      	movs	r1, #0
 8003592:	200b      	movs	r0, #11
 8003594:	f001 fba7 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003598:	200b      	movs	r0, #11
 800359a:	f001 fbbe 	bl	8004d1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	2100      	movs	r1, #0
 80035a2:	200c      	movs	r0, #12
 80035a4:	f001 fb9f 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80035a8:	200c      	movs	r0, #12
 80035aa:	f001 fbb6 	bl	8004d1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	200d      	movs	r0, #13
 80035b4:	f001 fb97 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80035b8:	200d      	movs	r0, #13
 80035ba:	f001 fbae 	bl	8004d1a <HAL_NVIC_EnableIRQ>

}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000

080035cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d2:	f107 030c 	add.w	r3, r7, #12
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	60da      	str	r2, [r3, #12]
 80035e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035e2:	4b3e      	ldr	r3, [pc, #248]	@ (80036dc <MX_GPIO_Init+0x110>)
 80035e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e6:	4a3d      	ldr	r2, [pc, #244]	@ (80036dc <MX_GPIO_Init+0x110>)
 80035e8:	f043 0320 	orr.w	r3, r3, #32
 80035ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ee:	4b3b      	ldr	r3, [pc, #236]	@ (80036dc <MX_GPIO_Init+0x110>)
 80035f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	4b38      	ldr	r3, [pc, #224]	@ (80036dc <MX_GPIO_Init+0x110>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	4a37      	ldr	r2, [pc, #220]	@ (80036dc <MX_GPIO_Init+0x110>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003606:	4b35      	ldr	r3, [pc, #212]	@ (80036dc <MX_GPIO_Init+0x110>)
 8003608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003612:	4b32      	ldr	r3, [pc, #200]	@ (80036dc <MX_GPIO_Init+0x110>)
 8003614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003616:	4a31      	ldr	r2, [pc, #196]	@ (80036dc <MX_GPIO_Init+0x110>)
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800361e:	4b2f      	ldr	r3, [pc, #188]	@ (80036dc <MX_GPIO_Init+0x110>)
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800362a:	2201      	movs	r2, #1
 800362c:	2110      	movs	r1, #16
 800362e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003632:	f002 f865 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8003636:	2200      	movs	r2, #0
 8003638:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800363c:	4828      	ldr	r0, [pc, #160]	@ (80036e0 <MX_GPIO_Init+0x114>)
 800363e:	f002 f85f 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8003642:	2200      	movs	r2, #0
 8003644:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8003648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800364c:	f002 f858 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CD_GPIO_Port, SD_CD_Pin, GPIO_PIN_SET);
 8003650:	2201      	movs	r2, #1
 8003652:	2110      	movs	r1, #16
 8003654:	4822      	ldr	r0, [pc, #136]	@ (80036e0 <MX_GPIO_Init+0x114>)
 8003656:	f002 f853 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800365a:	2310      	movs	r3, #16
 800365c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800365e:	2301      	movs	r3, #1
 8003660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003666:	2301      	movs	r3, #1
 8003668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800366a:	f107 030c 	add.w	r3, r7, #12
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003674:	f001 feaa 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8003678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800367c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	2301      	movs	r3, #1
 8003680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	4619      	mov	r1, r3
 8003690:	4813      	ldr	r0, [pc, #76]	@ (80036e0 <MX_GPIO_Init+0x114>)
 8003692:	f001 fe9b 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8003696:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800369a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800369c:	2301      	movs	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	f107 030c 	add.w	r3, r7, #12
 80036ac:	4619      	mov	r1, r3
 80036ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036b2:	f001 fe8b 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 80036b6:	2310      	movs	r3, #16
 80036b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ba:	2301      	movs	r3, #1
 80036bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 80036c6:	f107 030c 	add.w	r3, r7, #12
 80036ca:	4619      	mov	r1, r3
 80036cc:	4804      	ldr	r0, [pc, #16]	@ (80036e0 <MX_GPIO_Init+0x114>)
 80036ce:	f001 fe7d 	bl	80053cc <HAL_GPIO_Init>

}
 80036d2:	bf00      	nop
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	48000400 	.word	0x48000400

080036e4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* printf() → USART1 리다이렉트 */
int __io_putchar(int ch)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80036ec:	1d39      	adds	r1, r7, #4
 80036ee:	2364      	movs	r3, #100	@ 0x64
 80036f0:	2201      	movs	r2, #1
 80036f2:	4804      	ldr	r0, [pc, #16]	@ (8003704 <__io_putchar+0x20>)
 80036f4:	f003 fde2 	bl	80072bc <HAL_UART_Transmit>
  return ch;
 80036f8:	687b      	ldr	r3, [r7, #4]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20004a28 	.word	0x20004a28

08003708 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800370e:	f001 f97c 	bl	8004a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003712:	f000 f885 	bl	8003820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003716:	f7ff ff59 	bl	80035cc <MX_GPIO_Init>
  MX_DMA_Init();
 800371a:	f7ff ff1d 	bl	8003558 <MX_DMA_Init>
  MX_SPI1_Init();
 800371e:	f000 f93d 	bl	800399c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003722:	f000 fbfd 	bl	8003f20 <MX_USART1_UART_Init>
  if (MX_FATFS_Init() != APP_OK)
 8003726:	f006 f929 	bl	800997c <MX_FATFS_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <main+0x2c>
  {
    Error_Handler();
 8003730:	f000 f92e 	bl	8003990 <Error_Handler>
  }
  MX_SPI3_Init();
 8003734:	f000 f970 	bl	8003a18 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8003738:	f000 fc3e 	bl	8003fb8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, (uint8_t *)&g_rx, 1);
 800373c:	2201      	movs	r2, #1
 800373e:	4930      	ldr	r1, [pc, #192]	@ (8003800 <main+0xf8>)
 8003740:	4830      	ldr	r0, [pc, #192]	@ (8003804 <main+0xfc>)
 8003742:	f003 fe49 	bl	80073d8 <HAL_UART_Receive_IT>

  sdCardInit();
 8003746:	f7fe fced 	bl	8002124 <sdCardInit>
  if (apOledInit())
 800374a:	f7ff f80d 	bl	8002768 <apOledInit>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <main+0x5c>
  {
    apOledUpdate();
 8003754:	f7ff f834 	bl	80027c0 <apOledUpdate>

    // apOledTest();
    eyesInit();
 8003758:	f7fd fc90 	bl	800107c <eyesInit>
    // 시작 애니메이션
    eyesSleep();
 800375c:	f7fd fedc 	bl	8001518 <eyesSleep>
    eyesWakeup();
 8003760:	f7fd ff02 	bl	8001568 <eyesWakeup>
  }
  apSensorInit(&wind_sensor);
 8003764:	4828      	ldr	r0, [pc, #160]	@ (8003808 <main+0x100>)
 8003766:	f7ff fdcf 	bl	8003308 <apSensorInit>
  uint32_t animation_timer = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  uint32_t blink_timer = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
  int current_animation = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  apSensorRequest(&wind_sensor);
 8003776:	4824      	ldr	r0, [pc, #144]	@ (8003808 <main+0x100>)
 8003778:	f7ff fdec 	bl	8003354 <apSensorRequest>
	     apSensorUpdate(&wind_sensor);
 800377c:	4822      	ldr	r0, [pc, #136]	@ (8003808 <main+0x100>)
 800377e:	f7ff fe4d 	bl	800341c <apSensorUpdate>

	     static uint32_t no_sensor_timer = 0;
	     uint32_t current_time = HAL_GetTick();
 8003782:	f001 f9a7 	bl	8004ad4 <HAL_GetTick>
 8003786:	60b8      	str	r0, [r7, #8]

	     if (apSensorIsValid(&wind_sensor)) {
 8003788:	481f      	ldr	r0, [pc, #124]	@ (8003808 <main+0x100>)
 800378a:	f7ff fed7 	bl	800353c <apSensorIsValid>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d011      	beq.n	80037b8 <main+0xb0>
	         float speed = apSensorGetSpeed(&wind_sensor);
 8003794:	481c      	ldr	r0, [pc, #112]	@ (8003808 <main+0x100>)
 8003796:	f7ff fec1 	bl	800351c <apSensorGetSpeed>
 800379a:	ed87 0a01 	vstr	s0, [r7, #4]
	         eyesInstantExpression((double)speed);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fc ff0a 	bl	80005b8 <__aeabi_f2d>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	ec43 2b10 	vmov	d0, r2, r3
 80037ac:	f7fd fbca 	bl	8000f44 <eyesInstantExpression>
	         no_sensor_timer = current_time; // 센서 유효하면 타이머 리셋
 80037b0:	4a16      	ldr	r2, [pc, #88]	@ (800380c <main+0x104>)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00f      	b.n	80037d8 <main+0xd0>
	     } else {
	         // 센서 무효 시 2초마다 기본 깜빡임
	         if ((current_time - no_sensor_timer) > 2000) {
 80037b8:	4b14      	ldr	r3, [pc, #80]	@ (800380c <main+0x104>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80037c4:	d908      	bls.n	80037d8 <main+0xd0>
	             printf("No sensor - default blink\r\n");
 80037c6:	4812      	ldr	r0, [pc, #72]	@ (8003810 <main+0x108>)
 80037c8:	f00a fa4a 	bl	800dc60 <puts>
	             eyesBlink(12);
 80037cc:	200c      	movs	r0, #12
 80037ce:	f7fd fe47 	bl	8001460 <eyesBlink>
	             no_sensor_timer = current_time;
 80037d2:	4a0e      	ldr	r2, [pc, #56]	@ (800380c <main+0x104>)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6013      	str	r3, [r2, #0]
	         }
	     }
	     sdIsCardDetected();
 80037d8:	f7fe fd10 	bl	80021fc <sdIsCardDetected>
	     if (commandReady) {
 80037dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <main+0x10c>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <main+0xee>
	         userInput(rxBuffer);
 80037e4:	480c      	ldr	r0, [pc, #48]	@ (8003818 <main+0x110>)
 80037e6:	f7fe fee9 	bl	80025bc <userInput>
	         commandReady = 0;
 80037ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <main+0x10c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
	         printf("Ready> ");
 80037f0:	480a      	ldr	r0, [pc, #40]	@ (800381c <main+0x114>)
 80037f2:	f00a f9cd 	bl	800db90 <iprintf>
	     }

	     HAL_Delay(10);
 80037f6:	200a      	movs	r0, #10
 80037f8:	f001 f978 	bl	8004aec <HAL_Delay>
  {
 80037fc:	e7bb      	b.n	8003776 <main+0x6e>
 80037fe:	bf00      	nop
 8003800:	200047d8 	.word	0x200047d8
 8003804:	20004a28 	.word	0x20004a28
 8003808:	20002250 	.word	0x20002250
 800380c:	2000236c 	.word	0x2000236c
 8003810:	080105e0 	.word	0x080105e0
 8003814:	20002369 	.word	0x20002369
 8003818:	200047dc 	.word	0x200047dc
 800381c:	080105fc 	.word	0x080105fc

08003820 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b094      	sub	sp, #80	@ 0x50
 8003824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	f107 0318 	add.w	r3, r7, #24
 800382a:	2238      	movs	r2, #56	@ 0x38
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f00a fb4e 	bl	800ded0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003842:	2000      	movs	r0, #0
 8003844:	f001 ff74 	bl	8005730 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003848:	2301      	movs	r3, #1
 800384a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800384c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003850:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003852:	2302      	movs	r3, #2
 8003854:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003856:	2303      	movs	r3, #3
 8003858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800385a:	2301      	movs	r3, #1
 800385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800385e:	2328      	movs	r3, #40	@ 0x28
 8003860:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003862:	2302      	movs	r3, #2
 8003864:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003866:	2302      	movs	r3, #2
 8003868:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800386a:	2302      	movs	r3, #2
 800386c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800386e:	f107 0318 	add.w	r3, r7, #24
 8003872:	4618      	mov	r0, r3
 8003874:	f002 f810 	bl	8005898 <HAL_RCC_OscConfig>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800387e:	f000 f887 	bl	8003990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003882:	230f      	movs	r3, #15
 8003884:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003886:	2303      	movs	r3, #3
 8003888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	2104      	movs	r1, #4
 800389a:	4618      	mov	r0, r3
 800389c:	f002 fb0e 	bl	8005ebc <HAL_RCC_ClockConfig>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80038a6:	f000 f873 	bl	8003990 <Error_Handler>
  }
}
 80038aa:	bf00      	nop
 80038ac:	3750      	adds	r7, #80	@ 0x50
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	@ (800392c <HAL_UART_RxCpltCallback+0x78>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d12e      	bne.n	8003924 <HAL_UART_RxCpltCallback+0x70>
  {
    if (g_rx == '\r' || g_rx == '\n')
 80038c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_UART_RxCpltCallback+0x7c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b0d      	cmp	r3, #13
 80038ce:	d004      	beq.n	80038da <HAL_UART_RxCpltCallback+0x26>
 80038d0:	4b17      	ldr	r3, [pc, #92]	@ (8003930 <HAL_UART_RxCpltCallback+0x7c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b0a      	cmp	r3, #10
 80038d8:	d10f      	bne.n	80038fa <HAL_UART_RxCpltCallback+0x46>
    {
      rxBuffer[rxIndex] = '\0';
 80038da:	4b16      	ldr	r3, [pc, #88]	@ (8003934 <HAL_UART_RxCpltCallback+0x80>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <HAL_UART_RxCpltCallback+0x84>)
 80038e2:	2100      	movs	r1, #0
 80038e4:	5499      	strb	r1, [r3, r2]
      commandReady = 1;
 80038e6:	4b15      	ldr	r3, [pc, #84]	@ (800393c <HAL_UART_RxCpltCallback+0x88>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
      rxIndex = 0;
 80038ec:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <HAL_UART_RxCpltCallback+0x80>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
      printf("\r\n");
 80038f2:	4813      	ldr	r0, [pc, #76]	@ (8003940 <HAL_UART_RxCpltCallback+0x8c>)
 80038f4:	f00a f9b4 	bl	800dc60 <puts>
 80038f8:	e00f      	b.n	800391a <HAL_UART_RxCpltCallback+0x66>
    }
    else if (rxIndex < sizeof(rxBuffer) - 1)
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <HAL_UART_RxCpltCallback+0x80>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b62      	cmp	r3, #98	@ 0x62
 8003900:	d80b      	bhi.n	800391a <HAL_UART_RxCpltCallback+0x66>
    {
      rxBuffer[rxIndex++] = g_rx;
 8003902:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <HAL_UART_RxCpltCallback+0x80>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	b2d1      	uxtb	r1, r2
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <HAL_UART_RxCpltCallback+0x80>)
 800390c:	7011      	strb	r1, [r2, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <HAL_UART_RxCpltCallback+0x7c>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b2d9      	uxtb	r1, r3
 8003916:	4b08      	ldr	r3, [pc, #32]	@ (8003938 <HAL_UART_RxCpltCallback+0x84>)
 8003918:	5499      	strb	r1, [r3, r2]
    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&g_rx, 1);
 800391a:	2201      	movs	r2, #1
 800391c:	4904      	ldr	r1, [pc, #16]	@ (8003930 <HAL_UART_RxCpltCallback+0x7c>)
 800391e:	4809      	ldr	r0, [pc, #36]	@ (8003944 <HAL_UART_RxCpltCallback+0x90>)
 8003920:	f003 fd5a 	bl	80073d8 <HAL_UART_Receive_IT>
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40013800 	.word	0x40013800
 8003930:	200047d8 	.word	0x200047d8
 8003934:	20002368 	.word	0x20002368
 8003938:	200047dc 	.word	0x200047dc
 800393c:	20002369 	.word	0x20002369
 8003940:	08010604 	.word	0x08010604
 8003944:	20004a28 	.word	0x20004a28

08003948 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0a      	ldr	r2, [pc, #40]	@ (8003984 <HAL_UARTEx_RxEventCallback+0x3c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d10d      	bne.n	800397a <HAL_UARTEx_RxEventCallback+0x32>
  {
    // wind_sensor 구조체에 수신 데이터 설정
    wind_sensor.rx_index = Size;
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <HAL_UARTEx_RxEventCallback+0x40>)
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	f8a2 3100 	strh.w	r3, [r2, #256]	@ 0x100
    wind_sensor.frame_ready = true;
 8003966:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <HAL_UARTEx_RxEventCallback+0x40>)
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102

    // 다음 수신을 위해 DMA 재시작
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, wind_sensor.rx_buffer,
 800396e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003972:	4905      	ldr	r1, [pc, #20]	@ (8003988 <HAL_UARTEx_RxEventCallback+0x40>)
 8003974:	4805      	ldr	r0, [pc, #20]	@ (800398c <HAL_UARTEx_RxEventCallback+0x44>)
 8003976:	f005 ff5f 	bl	8009838 <HAL_UARTEx_ReceiveToIdle_DMA>
                                 sizeof(wind_sensor.rx_buffer));
  }
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40004800 	.word	0x40004800
 8003988:	20002250 	.word	0x20002250
 800398c:	20004abc 	.word	0x20004abc

08003990 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003994:	b672      	cpsid	i
}
 8003996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003998:	bf00      	nop
 800399a:	e7fd      	b.n	8003998 <Error_Handler+0x8>

0800399c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a14 <MX_SPI1_Init+0x78>)
 80039a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039ae:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039b4:	4b16      	ldr	r3, [pc, #88]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039b6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039bc:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039c2:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039d2:	2218      	movs	r2, #24
 80039d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039ea:	2207      	movs	r2, #7
 80039ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039ee:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039f4:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039f6:	2208      	movs	r2, #8
 80039f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039fa:	4805      	ldr	r0, [pc, #20]	@ (8003a10 <MX_SPI1_Init+0x74>)
 80039fc:	f002 fe6a 	bl	80066d4 <HAL_SPI_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a06:	f7ff ffc3 	bl	8003990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20004840 	.word	0x20004840
 8003a14:	40013000 	.word	0x40013000

08003a18 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <MX_SPI3_Init+0x78>)
 8003a20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a22:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a2a:	4b18      	ldr	r3, [pc, #96]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a30:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a32:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a38:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a4e:	2228      	movs	r2, #40	@ 0x28
 8003a50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a58:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a66:	2207      	movs	r2, #7
 8003a68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a6a:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a72:	2208      	movs	r2, #8
 8003a74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a76:	4805      	ldr	r0, [pc, #20]	@ (8003a8c <MX_SPI3_Init+0x74>)
 8003a78:	f002 fe2c 	bl	80066d4 <HAL_SPI_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003a82:	f7ff ff85 	bl	8003990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200048a4 	.word	0x200048a4
 8003a90:	40003c00 	.word	0x40003c00

08003a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	@ 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a57      	ldr	r2, [pc, #348]	@ (8003c10 <HAL_SPI_MspInit+0x17c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d17b      	bne.n	8003bae <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab6:	4b57      	ldr	r3, [pc, #348]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aba:	4a56      	ldr	r2, [pc, #344]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003abc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ac0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ac2:	4b54      	ldr	r3, [pc, #336]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ace:	4b51      	ldr	r3, [pc, #324]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad2:	4a50      	ldr	r2, [pc, #320]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ada:	4b4e      	ldr	r3, [pc, #312]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_CLK_Pin|SPI1_MISO_SD_DAT0_Pin|SPI1_MOSI_SD_CMD_Pin;
 8003ae6:	23e0      	movs	r3, #224	@ 0xe0
 8003ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af2:	2303      	movs	r3, #3
 8003af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003af6:	2305      	movs	r3, #5
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afa:	f107 031c 	add.w	r3, r7, #28
 8003afe:	4619      	mov	r1, r3
 8003b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b04:	f001 fc62 	bl	80053cc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8003b08:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b0a:	4a44      	ldr	r2, [pc, #272]	@ (8003c1c <HAL_SPI_MspInit+0x188>)
 8003b0c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003b0e:	4b42      	ldr	r3, [pc, #264]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b10:	220a      	movs	r2, #10
 8003b12:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b14:	4b40      	ldr	r3, [pc, #256]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b20:	4b3d      	ldr	r3, [pc, #244]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b22:	2280      	movs	r2, #128	@ 0x80
 8003b24:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b26:	4b3c      	ldr	r3, [pc, #240]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8003b32:	4b39      	ldr	r3, [pc, #228]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b34:	2220      	movs	r2, #32
 8003b36:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b38:	4b37      	ldr	r3, [pc, #220]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003b3e:	4836      	ldr	r0, [pc, #216]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b40:	f001 f912 	bl	8004d68 <HAL_DMA_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003b4a:	f7ff ff21 	bl	8003990 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a31      	ldr	r2, [pc, #196]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b52:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b54:	4a30      	ldr	r2, [pc, #192]	@ (8003c18 <HAL_SPI_MspInit+0x184>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8003b5a:	4b31      	ldr	r3, [pc, #196]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b5c:	4a31      	ldr	r2, [pc, #196]	@ (8003c24 <HAL_SPI_MspInit+0x190>)
 8003b5e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003b60:	4b2f      	ldr	r3, [pc, #188]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b62:	220b      	movs	r2, #11
 8003b64:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b66:	4b2e      	ldr	r3, [pc, #184]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b68:	2210      	movs	r2, #16
 8003b6a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b72:	4b2b      	ldr	r3, [pc, #172]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b74:	2280      	movs	r2, #128	@ 0x80
 8003b76:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b78:	4b29      	ldr	r3, [pc, #164]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7e:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003b84:	4b26      	ldr	r3, [pc, #152]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b86:	2220      	movs	r2, #32
 8003b88:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b8a:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003b90:	4823      	ldr	r0, [pc, #140]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003b92:	f001 f8e9 	bl	8004d68 <HAL_DMA_Init>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003b9c:	f7ff fef8 	bl	8003990 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003ba4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c20 <HAL_SPI_MspInit+0x18c>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003bac:	e02c      	b.n	8003c08 <HAL_SPI_MspInit+0x174>
  else if(spiHandle->Instance==SPI3)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c28 <HAL_SPI_MspInit+0x194>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d127      	bne.n	8003c08 <HAL_SPI_MspInit+0x174>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003bb8:	4b16      	ldr	r3, [pc, #88]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbc:	4a15      	ldr	r2, [pc, #84]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc4:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003bd6:	f043 0302 	orr.w	r3, r3, #2
 8003bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <HAL_SPI_MspInit+0x180>)
 8003bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003be8:	2328      	movs	r3, #40	@ 0x28
 8003bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003bf8:	2306      	movs	r3, #6
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	4619      	mov	r1, r3
 8003c02:	480a      	ldr	r0, [pc, #40]	@ (8003c2c <HAL_SPI_MspInit+0x198>)
 8003c04:	f001 fbe2 	bl	80053cc <HAL_GPIO_Init>
}
 8003c08:	bf00      	nop
 8003c0a:	3730      	adds	r7, #48	@ 0x30
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40013000 	.word	0x40013000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	20004968 	.word	0x20004968
 8003c1c:	40020008 	.word	0x40020008
 8003c20:	20004908 	.word	0x20004908
 8003c24:	4002001c 	.word	0x4002001c
 8003c28:	40003c00 	.word	0x40003c00
 8003c2c:	48000400 	.word	0x48000400

08003c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c36:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <HAL_MspInit+0x44>)
 8003c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c74 <HAL_MspInit+0x44>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c42:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <HAL_MspInit+0x44>)
 8003c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_MspInit+0x44>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c52:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <HAL_MspInit+0x44>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c5a:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <HAL_MspInit+0x44>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003c66:	f001 fe07 	bl	8005878 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000

08003c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <NMI_Handler+0x4>

08003c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <HardFault_Handler+0x4>

08003c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c8c:	bf00      	nop
 8003c8e:	e7fd      	b.n	8003c8c <MemManage_Handler+0x4>

08003c90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <BusFault_Handler+0x4>

08003c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <UsageFault_Handler+0x4>

08003ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timer1 > 0)
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <SysTick_Handler+0x38>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <SysTick_Handler+0x18>
		timer1--;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <SysTick_Handler+0x38>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	4b08      	ldr	r3, [pc, #32]	@ (8003d04 <SysTick_Handler+0x38>)
 8003ce2:	801a      	strh	r2, [r3, #0]
	if(timer2 > 0)
 8003ce4:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <SysTick_Handler+0x3c>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <SysTick_Handler+0x2c>
		timer2--;
 8003cec:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <SysTick_Handler+0x3c>)
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <SysTick_Handler+0x3c>)
 8003cf6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cf8:	f000 feda 	bl	8004ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003cfc:	f001 f827 	bl	8004d4e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20004b50 	.word	0x20004b50
 8003d08:	20004b52 	.word	0x20004b52

08003d0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003d10:	4802      	ldr	r0, [pc, #8]	@ (8003d1c <DMA1_Channel1_IRQHandler+0x10>)
 8003d12:	f001 fa0c 	bl	800512e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20004968 	.word	0x20004968

08003d20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003d24:	4802      	ldr	r0, [pc, #8]	@ (8003d30 <DMA1_Channel2_IRQHandler+0x10>)
 8003d26:	f001 fa02 	bl	800512e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20004908 	.word	0x20004908

08003d34 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d38:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <DMA1_Channel3_IRQHandler+0x10>)
 8003d3a:	f001 f9f8 	bl	800512e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200049c8 	.word	0x200049c8

08003d48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d4c:	4802      	ldr	r0, [pc, #8]	@ (8003d58 <USART1_IRQHandler+0x10>)
 8003d4e:	f003 fb8f 	bl	8007470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20004a28 	.word	0x20004a28

08003d5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d60:	4802      	ldr	r0, [pc, #8]	@ (8003d6c <USART3_IRQHandler+0x10>)
 8003d62:	f003 fb85 	bl	8007470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20004abc 	.word	0x20004abc

08003d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return 1;
 8003d74:	2301      	movs	r3, #1
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_kill>:

int _kill(int pid, int sig)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d8a:	f00a f905 	bl	800df98 <__errno>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2216      	movs	r2, #22
 8003d92:	601a      	str	r2, [r3, #0]
  return -1;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_exit>:

void _exit (int status)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003da8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ffe7 	bl	8003d80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <_exit+0x12>

08003db6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e00a      	b.n	8003dde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dc8:	f3af 8000 	nop.w
 8003dcc:	4601      	mov	r1, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	60ba      	str	r2, [r7, #8]
 8003dd4:	b2ca      	uxtb	r2, r1
 8003dd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	dbf0      	blt.n	8003dc8 <_read+0x12>
  }

  return len;
 8003de6:	687b      	ldr	r3, [r7, #4]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e009      	b.n	8003e16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	60ba      	str	r2, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fc6a 	bl	80036e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3301      	adds	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	dbf1      	blt.n	8003e02 <_write+0x12>
  }
  return len;
 8003e1e:	687b      	ldr	r3, [r7, #4]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <_close>:

int _close(int file)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e50:	605a      	str	r2, [r3, #4]
  return 0;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <_isatty>:

int _isatty(int file)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e68:	2301      	movs	r3, #1
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e98:	4a14      	ldr	r2, [pc, #80]	@ (8003eec <_sbrk+0x5c>)
 8003e9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <_sbrk+0x60>)
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ea4:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <_sbrk+0x64>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eac:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <_sbrk+0x64>)
 8003eae:	4a12      	ldr	r2, [pc, #72]	@ (8003ef8 <_sbrk+0x68>)
 8003eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <_sbrk+0x64>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d207      	bcs.n	8003ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ec0:	f00a f86a 	bl	800df98 <__errno>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	220c      	movs	r2, #12
 8003ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ece:	e009      	b.n	8003ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ed0:	4b08      	ldr	r3, [pc, #32]	@ (8003ef4 <_sbrk+0x64>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ed6:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <_sbrk+0x64>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	4a05      	ldr	r2, [pc, #20]	@ (8003ef4 <_sbrk+0x64>)
 8003ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20008000 	.word	0x20008000
 8003ef0:	00000400 	.word	0x00000400
 8003ef4:	20002370 	.word	0x20002370
 8003ef8:	20006bc8 	.word	0x20006bc8

08003efc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <SystemInit+0x20>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	4a05      	ldr	r2, [pc, #20]	@ (8003f1c <SystemInit+0x20>)
 8003f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f24:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f26:	4a23      	ldr	r2, [pc, #140]	@ (8003fb4 <MX_USART1_UART_Init+0x94>)
 8003f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f2a:	4b21      	ldr	r3, [pc, #132]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f32:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f38:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f44:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f46:	220c      	movs	r2, #12
 8003f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f4a:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f50:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f56:	4b16      	ldr	r3, [pc, #88]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f5c:	4b14      	ldr	r3, [pc, #80]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f62:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f68:	4811      	ldr	r0, [pc, #68]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f6a:	f003 f957 	bl	800721c <HAL_UART_Init>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f74:	f7ff fd0c 	bl	8003990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f78:	2100      	movs	r1, #0
 8003f7a:	480d      	ldr	r0, [pc, #52]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f7c:	f005 fbe0 	bl	8009740 <HAL_UARTEx_SetTxFifoThreshold>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f86:	f7ff fd03 	bl	8003990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4808      	ldr	r0, [pc, #32]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f8e:	f005 fc15 	bl	80097bc <HAL_UARTEx_SetRxFifoThreshold>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f98:	f7ff fcfa 	bl	8003990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f9c:	4804      	ldr	r0, [pc, #16]	@ (8003fb0 <MX_USART1_UART_Init+0x90>)
 8003f9e:	f005 fb96 	bl	80096ce <HAL_UARTEx_DisableFifoMode>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003fa8:	f7ff fcf2 	bl	8003990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20004a28 	.word	0x20004a28
 8003fb4:	40013800 	.word	0x40013800

08003fb8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003fbc:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003fbe:	4a25      	ldr	r2, [pc, #148]	@ (8004054 <MX_USART3_UART_Init+0x9c>)
 8003fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003fc2:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003fc4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fca:	4b21      	ldr	r3, [pc, #132]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003fde:	220c      	movs	r2, #12
 8003fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fe8:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fee:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ff4:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8004000:	2300      	movs	r3, #0
 8004002:	2200      	movs	r2, #0
 8004004:	2100      	movs	r1, #0
 8004006:	4812      	ldr	r0, [pc, #72]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 8004008:	f005 fada 	bl	80095c0 <HAL_RS485Ex_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8004012:	f7ff fcbd 	bl	8003990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004016:	2100      	movs	r1, #0
 8004018:	480d      	ldr	r0, [pc, #52]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 800401a:	f005 fb91 	bl	8009740 <HAL_UARTEx_SetTxFifoThreshold>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8004024:	f7ff fcb4 	bl	8003990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004028:	2100      	movs	r1, #0
 800402a:	4809      	ldr	r0, [pc, #36]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 800402c:	f005 fbc6 	bl	80097bc <HAL_UARTEx_SetRxFifoThreshold>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8004036:	f7ff fcab 	bl	8003990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800403a:	4805      	ldr	r0, [pc, #20]	@ (8004050 <MX_USART3_UART_Init+0x98>)
 800403c:	f005 fb47 	bl	80096ce <HAL_UARTEx_DisableFifoMode>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8004046:	f7ff fca3 	bl	8003990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20004abc 	.word	0x20004abc
 8004054:	40004800 	.word	0x40004800

08004058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b09c      	sub	sp, #112	@ 0x70
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004070:	f107 0318 	add.w	r3, r7, #24
 8004074:	2244      	movs	r2, #68	@ 0x44
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f009 ff29 	bl	800ded0 <memset>
  if(uartHandle->Instance==USART1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a5a      	ldr	r2, [pc, #360]	@ (80041ec <HAL_UART_MspInit+0x194>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d13e      	bne.n	8004106 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004088:	2301      	movs	r3, #1
 800408a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800408c:	2300      	movs	r3, #0
 800408e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004090:	f107 0318 	add.w	r3, r7, #24
 8004094:	4618      	mov	r0, r3
 8004096:	f002 f92d 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80040a0:	f7ff fc76 	bl	8003990 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040a4:	4b52      	ldr	r3, [pc, #328]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	4a51      	ldr	r2, [pc, #324]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 80040aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80040b0:	4b4f      	ldr	r3, [pc, #316]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 80040b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040bc:	4b4c      	ldr	r3, [pc, #304]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 80040be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c0:	4a4b      	ldr	r2, [pc, #300]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040c8:	4b49      	ldr	r3, [pc, #292]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 80040ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040d4:	23c0      	movs	r3, #192	@ 0xc0
 80040d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	2302      	movs	r3, #2
 80040da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	2300      	movs	r3, #0
 80040e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040e4:	2307      	movs	r3, #7
 80040e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80040ec:	4619      	mov	r1, r3
 80040ee:	4841      	ldr	r0, [pc, #260]	@ (80041f4 <HAL_UART_MspInit+0x19c>)
 80040f0:	f001 f96c 	bl	80053cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040f4:	2200      	movs	r2, #0
 80040f6:	2100      	movs	r1, #0
 80040f8:	2025      	movs	r0, #37	@ 0x25
 80040fa:	f000 fdf4 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040fe:	2025      	movs	r0, #37	@ 0x25
 8004100:	f000 fe0b 	bl	8004d1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004104:	e06d      	b.n	80041e2 <HAL_UART_MspInit+0x18a>
  else if(uartHandle->Instance==USART3)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3b      	ldr	r2, [pc, #236]	@ (80041f8 <HAL_UART_MspInit+0x1a0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d168      	bne.n	80041e2 <HAL_UART_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004110:	2304      	movs	r3, #4
 8004112:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004114:	2300      	movs	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004118:	f107 0318 	add.w	r3, r7, #24
 800411c:	4618      	mov	r0, r3
 800411e:	f002 f8e9 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8004128:	f7ff fc32 	bl	8003990 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800412c:	4b30      	ldr	r3, [pc, #192]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	4a2f      	ldr	r2, [pc, #188]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 8004132:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004136:	6593      	str	r3, [r2, #88]	@ 0x58
 8004138:	4b2d      	ldr	r3, [pc, #180]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004144:	4b2a      	ldr	r3, [pc, #168]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 8004146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004148:	4a29      	ldr	r2, [pc, #164]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004150:	4b27      	ldr	r3, [pc, #156]	@ (80041f0 <HAL_UART_MspInit+0x198>)
 8004152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|Modbus_DE_Pin;
 800415c:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 8004160:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004162:	2302      	movs	r3, #2
 8004164:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004166:	2300      	movs	r3, #0
 8004168:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416a:	2300      	movs	r3, #0
 800416c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800416e:	2307      	movs	r3, #7
 8004170:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004172:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004176:	4619      	mov	r1, r3
 8004178:	481e      	ldr	r0, [pc, #120]	@ (80041f4 <HAL_UART_MspInit+0x19c>)
 800417a:	f001 f927 	bl	80053cc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800417e:	4b1f      	ldr	r3, [pc, #124]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 8004180:	4a1f      	ldr	r2, [pc, #124]	@ (8004200 <HAL_UART_MspInit+0x1a8>)
 8004182:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004184:	4b1d      	ldr	r3, [pc, #116]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 8004186:	221c      	movs	r2, #28
 8004188:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800418a:	4b1c      	ldr	r3, [pc, #112]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004190:	4b1a      	ldr	r3, [pc, #104]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 8004192:	2200      	movs	r2, #0
 8004194:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004196:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 8004198:	2280      	movs	r2, #128	@ 0x80
 800419a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800419c:	4b17      	ldr	r3, [pc, #92]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 800419e:	2200      	movs	r2, #0
 80041a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041a2:	4b16      	ldr	r3, [pc, #88]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80041a8:	4b14      	ldr	r3, [pc, #80]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041ae:	4b13      	ldr	r3, [pc, #76]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80041b4:	4811      	ldr	r0, [pc, #68]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 80041b6:	f000 fdd7 	bl	8004d68 <HAL_DMA_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_UART_MspInit+0x16c>
      Error_Handler();
 80041c0:	f7ff fbe6 	bl	8003990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0d      	ldr	r2, [pc, #52]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 80041c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80041cc:	4a0b      	ldr	r2, [pc, #44]	@ (80041fc <HAL_UART_MspInit+0x1a4>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80041d2:	2200      	movs	r2, #0
 80041d4:	2100      	movs	r1, #0
 80041d6:	2027      	movs	r0, #39	@ 0x27
 80041d8:	f000 fd85 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80041dc:	2027      	movs	r0, #39	@ 0x27
 80041de:	f000 fd9c 	bl	8004d1a <HAL_NVIC_EnableIRQ>
}
 80041e2:	bf00      	nop
 80041e4:	3770      	adds	r7, #112	@ 0x70
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40013800 	.word	0x40013800
 80041f0:	40021000 	.word	0x40021000
 80041f4:	48000400 	.word	0x48000400
 80041f8:	40004800 	.word	0x40004800
 80041fc:	200049c8 	.word	0x200049c8
 8004200:	40020030 	.word	0x40020030

08004204 <hwOledInit>:
#include "hw_oled.h"

static bool oled_inited = false;

bool hwOledInit(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
  bool ret = true;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]

  // SPI 초기화 확인
  if (hspi3.State != HAL_SPI_STATE_READY)
 800420e:	4b70      	ldr	r3, [pc, #448]	@ (80043d0 <hwOledInit+0x1cc>)
 8004210:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <hwOledInit+0x1a>
  {
    ret = false;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
  }

  if (ret)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80cf 	beq.w	80043c4 <hwOledInit+0x1c0>
  {
    hwOledReset();
 8004226:	f000 f8d7 	bl	80043d8 <hwOledReset>

    // SSD1322 초기화 시퀀스
    hwOledSendCmd(OLED_DISPLAYOFF);
 800422a:	20ae      	movs	r0, #174	@ 0xae
 800422c:	f000 f8ec 	bl	8004408 <hwOledSendCmd>

    hwOledSendCmd(OLED_SETCOMMANDLOCK);
 8004230:	20fd      	movs	r0, #253	@ 0xfd
 8004232:	f000 f8e9 	bl	8004408 <hwOledSendCmd>
    uint8_t temp_data = 0x12;
 8004236:	2312      	movs	r3, #18
 8004238:	73bb      	strb	r3, [r7, #14]
    hwOledSendData(&temp_data, 1);
 800423a:	f107 030e 	add.w	r3, r7, #14
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f000 f90f 	bl	8004464 <hwOledSendData>

    hwOledSendCmd(OLED_SETCLOCKDIVIDER);
 8004246:	20b3      	movs	r0, #179	@ 0xb3
 8004248:	f000 f8de 	bl	8004408 <hwOledSendCmd>
    temp_data = 0x91;
 800424c:	2391      	movs	r3, #145	@ 0x91
 800424e:	73bb      	strb	r3, [r7, #14]
    hwOledSendData(&temp_data, 1);
 8004250:	f107 030e 	add.w	r3, r7, #14
 8004254:	2101      	movs	r1, #1
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f904 	bl	8004464 <hwOledSendData>

    hwOledSendCmd(OLED_SETMUXRATIO);
 800425c:	20ca      	movs	r0, #202	@ 0xca
 800425e:	f000 f8d3 	bl	8004408 <hwOledSendCmd>
    temp_data = 0x3F;
 8004262:	233f      	movs	r3, #63	@ 0x3f
 8004264:	73bb      	strb	r3, [r7, #14]
    hwOledSendData(&temp_data, 1);
 8004266:	f107 030e 	add.w	r3, r7, #14
 800426a:	2101      	movs	r1, #1
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f8f9 	bl	8004464 <hwOledSendData>

    hwOledSendCmd(OLED_SETDISPLAYOFFSET);
 8004272:	20a2      	movs	r0, #162	@ 0xa2
 8004274:	f000 f8c8 	bl	8004408 <hwOledSendCmd>
    temp_data = 0x00; // 안 밀기
 8004278:	2300      	movs	r3, #0
 800427a:	73bb      	strb	r3, [r7, #14]
    hwOledSendData(&temp_data, 1);
 800427c:	f107 030e 	add.w	r3, r7, #14
 8004280:	2101      	movs	r1, #1
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f8ee 	bl	8004464 <hwOledSendData>

    hwOledSendCmd(OLED_SETSTARTLINE);
 8004288:	20a1      	movs	r0, #161	@ 0xa1
 800428a:	f000 f8bd 	bl	8004408 <hwOledSendCmd>
    temp_data = 0x00;
 800428e:	2300      	movs	r3, #0
 8004290:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 8004292:	f107 030e 	add.w	r3, r7, #14
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f8e3 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_SETREMAP);
 800429e:	20a0      	movs	r0, #160	@ 0xa0
 80042a0:	f000 f8b2 	bl	8004408 <hwOledSendCmd>
   	uint8_t remap[2] = {0x06, 0x11}; // 반대로 뒤집기 {0x14, 0x11}
 80042a4:	f241 1306 	movw	r3, #4358	@ 0x1106
 80042a8:	81bb      	strh	r3, [r7, #12]
   	hwOledSendData(remap, 2);
 80042aa:	f107 030c 	add.w	r3, r7, #12
 80042ae:	2102      	movs	r1, #2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f8d7 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_SETGPIO);
 80042b6:	20b5      	movs	r0, #181	@ 0xb5
 80042b8:	f000 f8a6 	bl	8004408 <hwOledSendCmd>
   	temp_data = 0x00;
 80042bc:	2300      	movs	r3, #0
 80042be:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 80042c0:	f107 030e 	add.w	r3, r7, #14
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f8cc 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_FUNCTIONSELECT);
 80042cc:	20ab      	movs	r0, #171	@ 0xab
 80042ce:	f000 f89b 	bl	8004408 <hwOledSendCmd>
   	temp_data = 0x01;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 80042d6:	f107 030e 	add.w	r3, r7, #14
 80042da:	2101      	movs	r1, #1
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f8c1 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_DISPLAYENHANCE_A);
 80042e2:	20b4      	movs	r0, #180	@ 0xb4
 80042e4:	f000 f890 	bl	8004408 <hwOledSendCmd>
   	uint8_t enhA[2] = {0xA0, 0xFD};
 80042e8:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 80042ec:	813b      	strh	r3, [r7, #8]
   	hwOledSendData(enhA, 2);
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f8b5 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_SETCONTRAST);
 80042fa:	20c1      	movs	r0, #193	@ 0xc1
 80042fc:	f000 f884 	bl	8004408 <hwOledSendCmd>
   	temp_data = 0xFF; // 최대 밝기
 8004300:	23ff      	movs	r3, #255	@ 0xff
 8004302:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 8004304:	f107 030e 	add.w	r3, r7, #14
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f8aa 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_MASTERCURRENT);
 8004310:	20c7      	movs	r0, #199	@ 0xc7
 8004312:	f000 f879 	bl	8004408 <hwOledSendCmd>
   	temp_data = 0x0F; // 최대
 8004316:	230f      	movs	r3, #15
 8004318:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 800431a:	f107 030e 	add.w	r3, r7, #14
 800431e:	2101      	movs	r1, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f89f 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_DEFAULTGRAYSCALE);
 8004326:	20b9      	movs	r0, #185	@ 0xb9
 8004328:	f000 f86e 	bl	8004408 <hwOledSendCmd>

   	hwOledSendCmd(OLED_SETPHASELENGTH);
 800432c:	20b1      	movs	r0, #177	@ 0xb1
 800432e:	f000 f86b 	bl	8004408 <hwOledSendCmd>
   	temp_data = 0xE2;
 8004332:	23e2      	movs	r3, #226	@ 0xe2
 8004334:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 8004336:	f107 030e 	add.w	r3, r7, #14
 800433a:	2101      	movs	r1, #1
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f891 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_DISPLAYENHANCE_B);
 8004342:	20d1      	movs	r0, #209	@ 0xd1
 8004344:	f000 f860 	bl	8004408 <hwOledSendCmd>
   	uint8_t enhB[2] = {0x82, 0x20};
 8004348:	f242 0382 	movw	r3, #8322	@ 0x2082
 800434c:	80bb      	strh	r3, [r7, #4]
   	hwOledSendData(enhB, 2);
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	2102      	movs	r1, #2
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f886 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_SETPRECHARGEVOLTAGE);
 8004358:	20bb      	movs	r0, #187	@ 0xbb
 800435a:	f000 f855 	bl	8004408 <hwOledSendCmd>
   	temp_data = 0x1F;
 800435e:	231f      	movs	r3, #31
 8004360:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 8004362:	f107 030e 	add.w	r3, r7, #14
 8004366:	2101      	movs	r1, #1
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f87b 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_SETSECONDPRECHARGE);
 800436e:	20b6      	movs	r0, #182	@ 0xb6
 8004370:	f000 f84a 	bl	8004408 <hwOledSendCmd>
   	temp_data = 0x08;
 8004374:	2308      	movs	r3, #8
 8004376:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 8004378:	f107 030e 	add.w	r3, r7, #14
 800437c:	2101      	movs	r1, #1
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f870 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_SETVCOMH);
 8004384:	20be      	movs	r0, #190	@ 0xbe
 8004386:	f000 f83f 	bl	8004408 <hwOledSendCmd>
   	temp_data = 0x07;
 800438a:	2307      	movs	r3, #7
 800438c:	73bb      	strb	r3, [r7, #14]
   	hwOledSendData(&temp_data, 1);
 800438e:	f107 030e 	add.w	r3, r7, #14
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f865 	bl	8004464 <hwOledSendData>

   	hwOledSendCmd(OLED_NORMALDISPLAY);
 800439a:	20a6      	movs	r0, #166	@ 0xa6
 800439c:	f000 f834 	bl	8004408 <hwOledSendCmd>

   	hwOledSendCmd(OLED_EXITPARTIALDISPLAY);
 80043a0:	20a9      	movs	r0, #169	@ 0xa9
 80043a2:	f000 f831 	bl	8004408 <hwOledSendCmd>

   	hwOledSetWindow(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80043a6:	233f      	movs	r3, #63	@ 0x3f
 80043a8:	2200      	movs	r2, #0
 80043aa:	215b      	movs	r1, #91	@ 0x5b
 80043ac:	201c      	movs	r0, #28
 80043ae:	f000 f889 	bl	80044c4 <hwOledSetWindow>

   	hwOledSendCmd(OLED_DISPLAYON);
 80043b2:	20af      	movs	r0, #175	@ 0xaf
 80043b4:	f000 f828 	bl	8004408 <hwOledSendCmd>
   	HAL_Delay(50);
 80043b8:	2032      	movs	r0, #50	@ 0x32
 80043ba:	f000 fb97 	bl	8004aec <HAL_Delay>

    oled_inited = true;
 80043be:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <hwOledInit+0x1d0>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	200048a4 	.word	0x200048a4
 80043d4:	20002374 	.word	0x20002374

080043d8 <hwOledReset>:

void hwOledReset(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  OLED_RST_L();
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043e2:	4808      	ldr	r0, [pc, #32]	@ (8004404 <hwOledReset+0x2c>)
 80043e4:	f001 f98c 	bl	8005700 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80043e8:	200a      	movs	r0, #10
 80043ea:	f000 fb7f 	bl	8004aec <HAL_Delay>
  OLED_RST_H();
 80043ee:	2201      	movs	r2, #1
 80043f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043f4:	4803      	ldr	r0, [pc, #12]	@ (8004404 <hwOledReset+0x2c>)
 80043f6:	f001 f983 	bl	8005700 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80043fa:	200a      	movs	r0, #10
 80043fc:	f000 fb76 	bl	8004aec <HAL_Delay>
}
 8004400:	bf00      	nop
 8004402:	bd80      	pop	{r7, pc}
 8004404:	48000400 	.word	0x48000400

08004408 <hwOledSendCmd>:

bool hwOledSendCmd(uint8_t cmd)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]

  OLED_CS_L();
 8004416:	2200      	movs	r2, #0
 8004418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800441c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004420:	f001 f96e 	bl	8005700 <HAL_GPIO_WritePin>
  OLED_DC_CMD();
 8004424:	2200      	movs	r2, #0
 8004426:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800442a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800442e:	f001 f967 	bl	8005700 <HAL_GPIO_WritePin>

  if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 100) != HAL_OK)
 8004432:	1df9      	adds	r1, r7, #7
 8004434:	2364      	movs	r3, #100	@ 0x64
 8004436:	2201      	movs	r2, #1
 8004438:	4809      	ldr	r0, [pc, #36]	@ (8004460 <hwOledSendCmd+0x58>)
 800443a:	f002 f9f6 	bl	800682a <HAL_SPI_Transmit>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <hwOledSendCmd+0x40>
  {
    ret = false;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
  }

  OLED_CS_H();
 8004448:	2201      	movs	r2, #1
 800444a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800444e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004452:	f001 f955 	bl	8005700 <HAL_GPIO_WritePin>

  return ret;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200048a4 	.word	0x200048a4

08004464 <hwOledSendData>:

bool hwOledSendData(uint8_t *p_data, uint32_t length)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]

  OLED_CS_L();
 8004472:	2200      	movs	r2, #0
 8004474:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800447c:	f001 f940 	bl	8005700 <HAL_GPIO_WritePin>
  OLED_DC_DATA();
 8004480:	2201      	movs	r2, #1
 8004482:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800448a:	f001 f939 	bl	8005700 <HAL_GPIO_WritePin>

  if (HAL_SPI_Transmit(&hspi3, p_data, length, 1000) != HAL_OK)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	b29a      	uxth	r2, r3
 8004492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4809      	ldr	r0, [pc, #36]	@ (80044c0 <hwOledSendData+0x5c>)
 800449a:	f002 f9c6 	bl	800682a <HAL_SPI_Transmit>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <hwOledSendData+0x44>
  {
    ret = false;
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]
  }

  OLED_CS_H();
 80044a8:	2201      	movs	r2, #1
 80044aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044b2:	f001 f925 	bl	8005700 <HAL_GPIO_WritePin>

  return ret;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	200048a4 	.word	0x200048a4

080044c4 <hwOledSetWindow>:

void hwOledSetWindow(uint8_t col_start, uint8_t col_end, uint8_t row_start, uint8_t row_end)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4604      	mov	r4, r0
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4623      	mov	r3, r4
 80044d4:	71fb      	strb	r3, [r7, #7]
 80044d6:	4603      	mov	r3, r0
 80044d8:	71bb      	strb	r3, [r7, #6]
 80044da:	460b      	mov	r3, r1
 80044dc:	717b      	strb	r3, [r7, #5]
 80044de:	4613      	mov	r3, r2
 80044e0:	713b      	strb	r3, [r7, #4]
  // Set Column Address
  hwOledSendCmd(OLED_SETCOLUMNADDR);
 80044e2:	2015      	movs	r0, #21
 80044e4:	f7ff ff90 	bl	8004408 <hwOledSendCmd>
  uint8_t col_data[2] = {col_start, col_end};
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	733b      	strb	r3, [r7, #12]
 80044ec:	79bb      	ldrb	r3, [r7, #6]
 80044ee:	737b      	strb	r3, [r7, #13]
  hwOledSendData(col_data, 2);
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	2102      	movs	r1, #2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ffb4 	bl	8004464 <hwOledSendData>

  // Set Row Address
  hwOledSendCmd(OLED_SETROWADDR);
 80044fc:	2075      	movs	r0, #117	@ 0x75
 80044fe:	f7ff ff83 	bl	8004408 <hwOledSendCmd>
  uint8_t row_data[2] = {row_start, row_end};
 8004502:	797b      	ldrb	r3, [r7, #5]
 8004504:	723b      	strb	r3, [r7, #8]
 8004506:	793b      	ldrb	r3, [r7, #4]
 8004508:	727b      	strb	r3, [r7, #9]
  hwOledSendData(row_data, 2);
 800450a:	f107 0308 	add.w	r3, r7, #8
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ffa7 	bl	8004464 <hwOledSendData>

  // Write RAM
  hwOledSendCmd(OLED_WRITERAM);
 8004516:	205c      	movs	r0, #92	@ 0x5c
 8004518:	f7ff ff76 	bl	8004408 <hwOledSendCmd>
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bd90      	pop	{r4, r7, pc}

08004524 <select>:



/* 슬레이브 선택 */
static void select(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004528:	2200      	movs	r2, #0
 800452a:	2110      	movs	r1, #16
 800452c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004530:	f001 f8e6 	bl	8005700 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004534:	2001      	movs	r0, #1
 8004536:	f000 fad9 	bl	8004aec <HAL_Delay>
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}

0800453e <deselect>:

/* 슬레이브 선택 해제 */
static void deselect(void)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004542:	2201      	movs	r2, #1
 8004544:	2110      	movs	r1, #16
 8004546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800454a:	f001 f8d9 	bl	8005700 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800454e:	2001      	movs	r0, #1
 8004550:	f000 facc 	bl	8004aec <HAL_Delay>
}
 8004554:	bf00      	nop
 8004556:	bd80      	pop	{r7, pc}

08004558 <spiTxByte>:

/* SPI 데이터 송신 */
static void spiTxByte(uint8_t data)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004562:	bf00      	nop
 8004564:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <spiTxByte+0x30>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b02      	cmp	r3, #2
 8004570:	d1f8      	bne.n	8004564 <spiTxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004572:	1df9      	adds	r1, r7, #7
 8004574:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004578:	2201      	movs	r2, #1
 800457a:	4803      	ldr	r0, [pc, #12]	@ (8004588 <spiTxByte+0x30>)
 800457c:	f002 f955 	bl	800682a <HAL_SPI_Transmit>
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20004840 	.word	0x20004840

0800458c <spiTxBuffer>:

/* SPI 전송 버퍼 */
static void spiTxBuffer(uint8_t *buffer, uint16_t len)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004598:	bf00      	nop
 800459a:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <spiTxBuffer+0x34>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d1f8      	bne.n	800459a <spiTxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80045a8:	887a      	ldrh	r2, [r7, #2]
 80045aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4803      	ldr	r0, [pc, #12]	@ (80045c0 <spiTxBuffer+0x34>)
 80045b2:	f002 f93a 	bl	800682a <HAL_SPI_Transmit>
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20004840 	.word	0x20004840

080045c4 <spiRxByte>:

/* SPI 데이터 수신 */
static uint8_t spiRxByte(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data;
 80045ca:	23ff      	movs	r3, #255	@ 0xff
 80045cc:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80045ce:	bf00      	nop
 80045d0:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <spiRxByte+0x38>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d1f8      	bne.n	80045d0 <spiRxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80045de:	1dba      	adds	r2, r7, #6
 80045e0:	1df9      	adds	r1, r7, #7
 80045e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2301      	movs	r3, #1
 80045ea:	4804      	ldr	r0, [pc, #16]	@ (80045fc <spiRxByte+0x38>)
 80045ec:	f002 fa93 	bl	8006b16 <HAL_SPI_TransmitReceive>

    return data;
 80045f0:	79bb      	ldrb	r3, [r7, #6]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20004840 	.word	0x20004840

08004600 <spiRxBytePtr>:

/* 포인터를 통한 SPI 수신 데이터 */
static void spiRxBytePtr(uint8_t *buff)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
    *buff = spiRxByte();
 8004608:	f7ff ffdc 	bl	80045c4 <spiRxByte>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	701a      	strb	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <sdReadyWait>:

/* SD카드 준비 상태 확인 */
static uint8_t sdReadyWait(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
    uint8_t res;

    timer2 = 500;  // 500ms 타임아웃
 8004622:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <sdReadyWait+0x30>)
 8004624:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004628:	801a      	strh	r2, [r3, #0]

    do {
        res = spiRxByte();
 800462a:	f7ff ffcb 	bl	80045c4 <spiRxByte>
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && timer2);
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	2bff      	cmp	r3, #255	@ 0xff
 8004636:	d004      	beq.n	8004642 <sdReadyWait+0x26>
 8004638:	4b04      	ldr	r3, [pc, #16]	@ (800464c <sdReadyWait+0x30>)
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f3      	bne.n	800462a <sdReadyWait+0xe>

    return res;
 8004642:	79fb      	ldrb	r3, [r7, #7]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20004b52 	.word	0x20004b52

08004650 <sdPowerOn>:

/* 전원 제어 */
static void sdPowerOn(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF;
 8004656:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800465a:	60fb      	str	r3, [r7, #12]

    // 웨이크업 시퀀스
    deselect();
 800465c:	f7ff ff6f 	bl	800453e <deselect>
    for(int i = 0; i < 10; i++)
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	e005      	b.n	8004672 <sdPowerOn+0x22>
    {
        spiTxByte(0xFF);
 8004666:	20ff      	movs	r0, #255	@ 0xff
 8004668:	f7ff ff76 	bl	8004558 <spiTxByte>
    for(int i = 0; i < 10; i++)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3301      	adds	r3, #1
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b09      	cmp	r3, #9
 8004676:	ddf6      	ble.n	8004666 <sdPowerOn+0x16>
    }

    select();
 8004678:	f7ff ff54 	bl	8004524 <select>

    // CMD0 전송
    args[0] = CMD0;
 800467c:	2340      	movs	r3, #64	@ 0x40
 800467e:	703b      	strb	r3, [r7, #0]
    args[1] = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	707b      	strb	r3, [r7, #1]
    args[2] = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;
 8004690:	2395      	movs	r3, #149	@ 0x95
 8004692:	717b      	strb	r3, [r7, #5]

    spiTxBuffer(args, sizeof(args));
 8004694:	463b      	mov	r3, r7
 8004696:	2106      	movs	r1, #6
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff77 	bl	800458c <spiTxBuffer>

    while ((spiRxByte() != 0x01) && cnt)
 800469e:	e002      	b.n	80046a6 <sdPowerOn+0x56>
    {
        cnt--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
    while ((spiRxByte() != 0x01) && cnt)
 80046a6:	f7ff ff8d 	bl	80045c4 <spiRxByte>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d002      	beq.n	80046b6 <sdPowerOn+0x66>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f4      	bne.n	80046a0 <sdPowerOn+0x50>
    }

    deselect();
 80046b6:	f7ff ff42 	bl	800453e <deselect>
    spiTxByte(0xFF);
 80046ba:	20ff      	movs	r0, #255	@ 0xff
 80046bc:	f7ff ff4c 	bl	8004558 <spiTxByte>

    powerFlag = 1;
 80046c0:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <sdPowerOn+0x80>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	701a      	strb	r2, [r3, #0]
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20002376 	.word	0x20002376

080046d4 <sdPowerOff>:

static void sdPowerOff(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
    powerFlag = 0;
 80046d8:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <sdPowerOff+0x14>)
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	20002376 	.word	0x20002376

080046ec <hwSdInit>:
/***************************************
 * 외부 함수 (public)
 **************************************/

void hwSdInit(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
    sdPowerOn();
 80046f0:	f7ff ffae 	bl	8004650 <sdPowerOn>
}
 80046f4:	bf00      	nop
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <hwSdCheckPower>:

uint8_t hwSdCheckPower(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
    return powerFlag;
 80046fc:	4b03      	ldr	r3, [pc, #12]	@ (800470c <hwSdCheckPower+0x14>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20002376 	.word	0x20002376

08004710 <hwSdPowerOff>:

void hwSdPowerOff(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
    sdPowerOff();
 8004714:	f7ff ffde 	bl	80046d4 <sdPowerOff>
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}

0800471c <hwSdGetStatus>:

DSTATUS hwSdGetStatus(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
    return stat;
 8004720:	4b03      	ldr	r3, [pc, #12]	@ (8004730 <hwSdGetStatus+0x14>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
}
 8004726:	4618      	mov	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	2000003c 	.word	0x2000003c

08004734 <hwSdClearStatus>:

void hwSdClearStatus(DSTATUS flag)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
    stat &= ~flag;
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	43db      	mvns	r3, r3
 8004744:	b25a      	sxtb	r2, r3
 8004746:	4b07      	ldr	r3, [pc, #28]	@ (8004764 <hwSdClearStatus+0x30>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	b25b      	sxtb	r3, r3
 800474e:	4013      	ands	r3, r2
 8004750:	b25b      	sxtb	r3, r3
 8004752:	b2da      	uxtb	r2, r3
 8004754:	4b03      	ldr	r3, [pc, #12]	@ (8004764 <hwSdClearStatus+0x30>)
 8004756:	701a      	strb	r2, [r3, #0]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	2000003c 	.word	0x2000003c

08004768 <hwSdGetCardType>:

uint8_t hwSdGetCardType(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
    return cardType;
 800476c:	4b03      	ldr	r3, [pc, #12]	@ (800477c <hwSdGetCardType+0x14>)
 800476e:	781b      	ldrb	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20002375 	.word	0x20002375

08004780 <hwSdSetCardType>:

void hwSdSetCardType(uint8_t type)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
    cardType = type;
 800478a:	4a04      	ldr	r2, [pc, #16]	@ (800479c <hwSdSetCardType+0x1c>)
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	7013      	strb	r3, [r2, #0]
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	20002375 	.word	0x20002375

080047a0 <hwSdSelect>:

void hwSdSelect(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
    select();
 80047a4:	f7ff febe 	bl	8004524 <select>
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}

080047ac <hwSdDeselect>:

void hwSdDeselect(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
    deselect();
 80047b0:	f7ff fec5 	bl	800453e <deselect>
}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <hwSdRxByte>:

uint8_t hwSdRxByte(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
    return spiRxByte();
 80047bc:	f7ff ff02 	bl	80045c4 <spiRxByte>
 80047c0:	4603      	mov	r3, r0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <hwSdSetTimer>:

void hwSdSetTimer(uint16_t ms)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	80fb      	strh	r3, [r7, #6]
    timer1 = ms;
 80047d2:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <hwSdSetTimer+0x1c>)
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	8013      	strh	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	20004b50 	.word	0x20004b50

080047e8 <hwSdGetTimer>:

uint16_t hwSdGetTimer(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
    return timer1;
 80047ec:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <hwSdGetTimer+0x14>)
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	20004b50 	.word	0x20004b50

08004800 <hwSdReadyWait>:

uint8_t hwSdReadyWait(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
    return sdReadyWait();
 8004804:	f7ff ff0a 	bl	800461c <sdReadyWait>
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <hwSdRxDataBlock>:

bool hwSdRxDataBlock(BYTE *buff, UINT len)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
    uint8_t token;

    timer1 = 200;  // 200ms 타임아웃
 800481a:	4b14      	ldr	r3, [pc, #80]	@ (800486c <hwSdRxDataBlock+0x5c>)
 800481c:	22c8      	movs	r2, #200	@ 0xc8
 800481e:	801a      	strh	r2, [r3, #0]

    // 데이터 토큰 대기
    do {
        token = spiRxByte();
 8004820:	f7ff fed0 	bl	80045c4 <spiRxByte>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && timer1);
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2bff      	cmp	r3, #255	@ 0xff
 800482c:	d104      	bne.n	8004838 <hwSdRxDataBlock+0x28>
 800482e:	4b0f      	ldr	r3, [pc, #60]	@ (800486c <hwSdRxDataBlock+0x5c>)
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f3      	bne.n	8004820 <hwSdRxDataBlock+0x10>

    // 토큰 검증
    if(token != 0xFE) return 0;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2bfe      	cmp	r3, #254	@ 0xfe
 800483c:	d007      	beq.n	800484e <hwSdRxDataBlock+0x3e>
 800483e:	2300      	movs	r3, #0
 8004840:	e00f      	b.n	8004862 <hwSdRxDataBlock+0x52>

    // 실제 데이터 수신
    while(len--) {
        spiRxBytePtr(buff++);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fed9 	bl	8004600 <spiRxBytePtr>
    while(len--) {
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	1e5a      	subs	r2, r3, #1
 8004852:	603a      	str	r2, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f4      	bne.n	8004842 <hwSdRxDataBlock+0x32>
    }

    // CRC 무시
    spiRxByte();
 8004858:	f7ff feb4 	bl	80045c4 <spiRxByte>
    spiRxByte();
 800485c:	f7ff feb2 	bl	80045c4 <spiRxByte>

    return 1;
 8004860:	2301      	movs	r3, #1
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20004b50 	.word	0x20004b50

08004870 <hwSdTxDataBlock>:

#if _USE_WRITE == 1
bool hwSdTxDataBlock(const uint8_t *buff, BYTE token)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF;
 800487c:	23ff      	movs	r3, #255	@ 0xff
 800487e:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	73bb      	strb	r3, [r7, #14]

    if (sdReadyWait() != 0xFF) return 0;
 8004884:	f7ff feca 	bl	800461c <sdReadyWait>
 8004888:	4603      	mov	r3, r0
 800488a:	2bff      	cmp	r3, #255	@ 0xff
 800488c:	d001      	beq.n	8004892 <hwSdTxDataBlock+0x22>
 800488e:	2300      	movs	r3, #0
 8004890:	e037      	b.n	8004902 <hwSdTxDataBlock+0x92>

    spiTxByte(token);
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fe5f 	bl	8004558 <spiTxByte>

    if (token != 0xFD)
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	2bfd      	cmp	r3, #253	@ 0xfd
 800489e:	d028      	beq.n	80048f2 <hwSdTxDataBlock+0x82>
    {
        spiTxBuffer((uint8_t*)buff, 512);
 80048a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fe71 	bl	800458c <spiTxBuffer>

        spiRxByte();  // 더미 CRC 상위
 80048aa:	f7ff fe8b 	bl	80045c4 <spiRxByte>
        spiRxByte();  // 더미 CRC 하위
 80048ae:	f7ff fe89 	bl	80045c4 <spiRxByte>

        while (i <= 64)
 80048b2:	e00b      	b.n	80048cc <hwSdTxDataBlock+0x5c>
        {
            resp = spiRxByte();
 80048b4:	f7ff fe86 	bl	80045c4 <spiRxByte>
 80048b8:	4603      	mov	r3, r0
 80048ba:	73fb      	strb	r3, [r7, #15]
            if ((resp & 0x1F) == 0x05) break;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2b05      	cmp	r3, #5
 80048c4:	d006      	beq.n	80048d4 <hwSdTxDataBlock+0x64>
            i++;
 80048c6:	7bbb      	ldrb	r3, [r7, #14]
 80048c8:	3301      	adds	r3, #1
 80048ca:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	2b40      	cmp	r3, #64	@ 0x40
 80048d0:	d9f0      	bls.n	80048b4 <hwSdTxDataBlock+0x44>
 80048d2:	e000      	b.n	80048d6 <hwSdTxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break;
 80048d4:	bf00      	nop
        }

        timer1 = 200;
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <hwSdTxDataBlock+0x9c>)
 80048d8:	22c8      	movs	r2, #200	@ 0xc8
 80048da:	801a      	strh	r2, [r3, #0]
        while ((spiRxByte() == 0) && timer1);
 80048dc:	bf00      	nop
 80048de:	f7ff fe71 	bl	80045c4 <spiRxByte>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <hwSdTxDataBlock+0x82>
 80048e8:	4b08      	ldr	r3, [pc, #32]	@ (800490c <hwSdTxDataBlock+0x9c>)
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f5      	bne.n	80048de <hwSdTxDataBlock+0x6e>
    }

    if ((resp & 0x1F) == 0x05) return 1;
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d101      	bne.n	8004900 <hwSdTxDataBlock+0x90>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <hwSdTxDataBlock+0x92>
    return 0;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20004b50 	.word	0x20004b50

08004910 <hwSdSendCmd>:
#endif

BYTE hwSdSendCmd(BYTE cmd, uint32_t arg)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    if (sdReadyWait() != 0xFF) return 0xFF;
 800491c:	f7ff fe7e 	bl	800461c <sdReadyWait>
 8004920:	4603      	mov	r3, r0
 8004922:	2bff      	cmp	r3, #255	@ 0xff
 8004924:	d001      	beq.n	800492a <hwSdSendCmd+0x1a>
 8004926:	23ff      	movs	r3, #255	@ 0xff
 8004928:	e042      	b.n	80049b0 <hwSdSendCmd+0xa0>

    // 명령어 패킷 전송
    spiTxByte(cmd);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fe13 	bl	8004558 <spiTxByte>
    spiTxByte((uint8_t)(arg >> 24));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	0e1b      	lsrs	r3, r3, #24
 8004936:	b2db      	uxtb	r3, r3
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fe0d 	bl	8004558 <spiTxByte>
    spiTxByte((uint8_t)(arg >> 16));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	b2db      	uxtb	r3, r3
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fe07 	bl	8004558 <spiTxByte>
    spiTxByte((uint8_t)(arg >> 8));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	b2db      	uxtb	r3, r3
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fe01 	bl	8004558 <spiTxByte>
    spiTxByte((uint8_t)arg);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fdfc 	bl	8004558 <spiTxByte>

    // CRC 계산
    if(cmd == CMD0) crc = 0x95;
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	2b40      	cmp	r3, #64	@ 0x40
 8004964:	d102      	bne.n	800496c <hwSdSendCmd+0x5c>
 8004966:	2395      	movs	r3, #149	@ 0x95
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e007      	b.n	800497c <hwSdSendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	2b48      	cmp	r3, #72	@ 0x48
 8004970:	d102      	bne.n	8004978 <hwSdSendCmd+0x68>
 8004972:	2387      	movs	r3, #135	@ 0x87
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e001      	b.n	800497c <hwSdSendCmd+0x6c>
    else crc = 1;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]

    spiTxByte(crc);
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fdea 	bl	8004558 <spiTxByte>

    if (cmd == CMD12) spiRxByte();
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	2b4c      	cmp	r3, #76	@ 0x4c
 8004988:	d101      	bne.n	800498e <hwSdSendCmd+0x7e>
 800498a:	f7ff fe1b 	bl	80045c4 <spiRxByte>

    // R1 응답 수신
    uint8_t n = 10;
 800498e:	230a      	movs	r3, #10
 8004990:	73bb      	strb	r3, [r7, #14]
    do {
        res = spiRxByte();
 8004992:	f7ff fe17 	bl	80045c4 <spiRxByte>
 8004996:	4603      	mov	r3, r0
 8004998:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 800499a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da05      	bge.n	80049ae <hwSdSendCmd+0x9e>
 80049a2:	7bbb      	ldrb	r3, [r7, #14]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	73bb      	strb	r3, [r7, #14]
 80049a8:	7bbb      	ldrb	r3, [r7, #14]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f1      	bne.n	8004992 <hwSdSendCmd+0x82>

    return res;
 80049ae:	7b7b      	ldrb	r3, [r7, #13]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049b8:	480d      	ldr	r0, [pc, #52]	@ (80049f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80049bc:	f7ff fa9e 	bl	8003efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049c0:	480c      	ldr	r0, [pc, #48]	@ (80049f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80049c2:	490d      	ldr	r1, [pc, #52]	@ (80049f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049c4:	4a0d      	ldr	r2, [pc, #52]	@ (80049fc <LoopForever+0xe>)
  movs r3, #0
 80049c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80049c8:	e002      	b.n	80049d0 <LoopCopyDataInit>

080049ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ce:	3304      	adds	r3, #4

080049d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049d4:	d3f9      	bcc.n	80049ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004a04 <LoopForever+0x16>)
  movs r3, #0
 80049da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049dc:	e001      	b.n	80049e2 <LoopFillZerobss>

080049de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049e0:	3204      	adds	r2, #4

080049e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049e4:	d3fb      	bcc.n	80049de <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80049e6:	f009 fadd 	bl	800dfa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049ea:	f7fe fe8d 	bl	8003708 <main>

080049ee <LoopForever>:

LoopForever:
    b LoopForever
 80049ee:	e7fe      	b.n	80049ee <LoopForever>
  ldr   r0, =_estack
 80049f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80049f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049f8:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80049fc:	08010e54 	.word	0x08010e54
  ldr r2, =_sbss
 8004a00:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8004a04:	20006bc4 	.word	0x20006bc4

08004a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a08:	e7fe      	b.n	8004a08 <ADC1_2_IRQHandler>

08004a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a14:	2003      	movs	r0, #3
 8004a16:	f000 f95b 	bl	8004cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a1a:	200f      	movs	r0, #15
 8004a1c:	f000 f80e 	bl	8004a3c <HAL_InitTick>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	71fb      	strb	r3, [r7, #7]
 8004a2a:	e001      	b.n	8004a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a2c:	f7ff f900 	bl	8003c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a30:	79fb      	ldrb	r3, [r7, #7]

}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a48:	4b16      	ldr	r3, [pc, #88]	@ (8004aa4 <HAL_InitTick+0x68>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d022      	beq.n	8004a96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a50:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <HAL_InitTick+0x6c>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <HAL_InitTick+0x68>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f966 	bl	8004d36 <HAL_SYSTICK_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10f      	bne.n	8004a90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b0f      	cmp	r3, #15
 8004a74:	d809      	bhi.n	8004a8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a76:	2200      	movs	r2, #0
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7e:	f000 f932 	bl	8004ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a82:	4a0a      	ldr	r2, [pc, #40]	@ (8004aac <HAL_InitTick+0x70>)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e007      	b.n	8004a9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	e004      	b.n	8004a9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	e001      	b.n	8004a9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000044 	.word	0x20000044
 8004aa8:	20000038 	.word	0x20000038
 8004aac:	20000040 	.word	0x20000040

08004ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <HAL_IncTick+0x1c>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <HAL_IncTick+0x20>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4413      	add	r3, r2
 8004abe:	4a03      	ldr	r2, [pc, #12]	@ (8004acc <HAL_IncTick+0x1c>)
 8004ac0:	6013      	str	r3, [r2, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20004b54 	.word	0x20004b54
 8004ad0:	20000044 	.word	0x20000044

08004ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	@ (8004ae8 <HAL_GetTick+0x14>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20004b54 	.word	0x20004b54

08004aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004af4:	f7ff ffee 	bl	8004ad4 <HAL_GetTick>
 8004af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d004      	beq.n	8004b10 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b06:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_Delay+0x40>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b10:	bf00      	nop
 8004b12:	f7ff ffdf 	bl	8004ad4 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d8f7      	bhi.n	8004b12 <HAL_Delay+0x26>
  {
  }
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000044 	.word	0x20000044

08004b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b40:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x44>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b62:	4a04      	ldr	r2, [pc, #16]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x44>)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	60d3      	str	r3, [r2, #12]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b7c:	4b04      	ldr	r3, [pc, #16]	@ (8004b90 <__NVIC_GetPriorityGrouping+0x18>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	0a1b      	lsrs	r3, r3, #8
 8004b82:	f003 0307 	and.w	r3, r3, #7
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db0b      	blt.n	8004bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	f003 021f 	and.w	r2, r3, #31
 8004bac:	4907      	ldr	r1, [pc, #28]	@ (8004bcc <__NVIC_EnableIRQ+0x38>)
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000e100 	.word	0xe000e100

08004bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	6039      	str	r1, [r7, #0]
 8004bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	db0a      	blt.n	8004bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	490c      	ldr	r1, [pc, #48]	@ (8004c1c <__NVIC_SetPriority+0x4c>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	0112      	lsls	r2, r2, #4
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf8:	e00a      	b.n	8004c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4908      	ldr	r1, [pc, #32]	@ (8004c20 <__NVIC_SetPriority+0x50>)
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	3b04      	subs	r3, #4
 8004c08:	0112      	lsls	r2, r2, #4
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	761a      	strb	r2, [r3, #24]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e100 	.word	0xe000e100
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f1c3 0307 	rsb	r3, r3, #7
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	bf28      	it	cs
 8004c42:	2304      	movcs	r3, #4
 8004c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2b06      	cmp	r3, #6
 8004c4c:	d902      	bls.n	8004c54 <NVIC_EncodePriority+0x30>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3b03      	subs	r3, #3
 8004c52:	e000      	b.n	8004c56 <NVIC_EncodePriority+0x32>
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43da      	mvns	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	401a      	ands	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	43d9      	mvns	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	4313      	orrs	r3, r2
         );
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c9c:	d301      	bcc.n	8004ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e00f      	b.n	8004cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ccc <SysTick_Config+0x40>)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004caa:	210f      	movs	r1, #15
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	f7ff ff8e 	bl	8004bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <SysTick_Config+0x40>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cba:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <SysTick_Config+0x40>)
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000e010 	.word	0xe000e010

08004cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff29 	bl	8004b30 <__NVIC_SetPriorityGrouping>
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf4:	f7ff ff40 	bl	8004b78 <__NVIC_GetPriorityGrouping>
 8004cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	6978      	ldr	r0, [r7, #20]
 8004d00:	f7ff ff90 	bl	8004c24 <NVIC_EncodePriority>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff ff5f 	bl	8004bd0 <__NVIC_SetPriority>
}
 8004d12:	bf00      	nop
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	4603      	mov	r3, r0
 8004d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff33 	bl	8004b94 <__NVIC_EnableIRQ>
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff ffa4 	bl	8004c8c <SysTick_Config>
 8004d44:	4603      	mov	r3, r0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004d52:	f000 f802 	bl	8004d5a <HAL_SYSTICK_Callback>
}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e08d      	b.n	8004e96 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b47      	ldr	r3, [pc, #284]	@ (8004ea0 <HAL_DMA_Init+0x138>)
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d80f      	bhi.n	8004da6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b45      	ldr	r3, [pc, #276]	@ (8004ea4 <HAL_DMA_Init+0x13c>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	4a45      	ldr	r2, [pc, #276]	@ (8004ea8 <HAL_DMA_Init+0x140>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	009a      	lsls	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a42      	ldr	r2, [pc, #264]	@ (8004eac <HAL_DMA_Init+0x144>)
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004da4:	e00e      	b.n	8004dc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b40      	ldr	r3, [pc, #256]	@ (8004eb0 <HAL_DMA_Init+0x148>)
 8004dae:	4413      	add	r3, r2
 8004db0:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea8 <HAL_DMA_Init+0x140>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	009a      	lsls	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8004eb4 <HAL_DMA_Init+0x14c>)
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fa76 	bl	8005308 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e24:	d102      	bne.n	8004e2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e40:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d010      	beq.n	8004e6c <HAL_DMA_Init+0x104>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d80c      	bhi.n	8004e6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fa96 	bl	8005384 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	e008      	b.n	8004e7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40020407 	.word	0x40020407
 8004ea4:	bffdfff8 	.word	0xbffdfff8
 8004ea8:	cccccccd 	.word	0xcccccccd
 8004eac:	40020000 	.word	0x40020000
 8004eb0:	bffdfbf8 	.word	0xbffdfbf8
 8004eb4:	40020400 	.word	0x40020400

08004eb8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_DMA_Start_IT+0x20>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e066      	b.n	8004fa6 <HAL_DMA_Start_IT+0xee>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d155      	bne.n	8004f98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f9bb 	bl	800528c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 020e 	orr.w	r2, r2, #14
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e00f      	b.n	8004f50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0204 	bic.w	r2, r2, #4
 8004f3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 020a 	orr.w	r2, r2, #10
 8004f4e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f6c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e005      	b.n	8004fa4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d005      	beq.n	8004fd2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
 8004fd0:	e037      	b.n	8005042 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 020e 	bic.w	r2, r2, #14
 8004fe0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ff0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f003 021f 	and.w	r2, r3, #31
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	2101      	movs	r1, #1
 8005010:	fa01 f202 	lsl.w	r2, r1, r2
 8005014:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800501e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00c      	beq.n	8005042 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005032:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005036:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005040:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d00d      	beq.n	8005094 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2204      	movs	r2, #4
 800507c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e047      	b.n	8005124 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 020e 	bic.w	r2, r2, #14
 80050a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c8:	f003 021f 	and.w	r2, r3, #31
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f202 	lsl.w	r2, r1, r2
 80050d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00c      	beq.n	8005104 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005102:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	4798      	blx	r3
    }
  }
  return status;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2204      	movs	r2, #4
 8005150:	409a      	lsls	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d026      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x7a>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d021      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d107      	bne.n	8005182 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0204 	bic.w	r2, r2, #4
 8005180:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	f003 021f 	and.w	r2, r3, #31
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	2104      	movs	r1, #4
 8005190:	fa01 f202 	lsl.w	r2, r1, r2
 8005194:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d071      	beq.n	8005282 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051a6:	e06c      	b.n	8005282 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2202      	movs	r2, #2
 80051b2:	409a      	lsls	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d02e      	beq.n	800521a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d029      	beq.n	800521a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 020a 	bic.w	r2, r2, #10
 80051e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	f003 021f 	and.w	r2, r3, #31
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f8:	2102      	movs	r1, #2
 80051fa:	fa01 f202 	lsl.w	r2, r1, r2
 80051fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d038      	beq.n	8005282 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005218:	e033      	b.n	8005282 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2208      	movs	r2, #8
 8005224:	409a      	lsls	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d02a      	beq.n	8005284 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d025      	beq.n	8005284 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 020e 	bic.w	r2, r2, #14
 8005246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524c:	f003 021f 	and.w	r2, r3, #31
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f202 	lsl.w	r2, r1, r2
 800525a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005282:	bf00      	nop
 8005284:	bf00      	nop
}
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f003 021f 	and.w	r2, r3, #31
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	2101      	movs	r1, #1
 80052c4:	fa01 f202 	lsl.w	r2, r1, r2
 80052c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b10      	cmp	r3, #16
 80052d8:	d108      	bne.n	80052ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052ea:	e007      	b.n	80052fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	4b16      	ldr	r3, [pc, #88]	@ (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005318:	429a      	cmp	r2, r3
 800531a:	d802      	bhi.n	8005322 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800531c:	4b15      	ldr	r3, [pc, #84]	@ (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e001      	b.n	8005326 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005322:	4b15      	ldr	r3, [pc, #84]	@ (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005324:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	3b08      	subs	r3, #8
 8005332:	4a12      	ldr	r2, [pc, #72]	@ (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	009a      	lsls	r2, r3, #2
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a0b      	ldr	r2, [pc, #44]	@ (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005352:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2201      	movs	r2, #1
 800535c:	409a      	lsls	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40020407 	.word	0x40020407
 8005374:	40020800 	.word	0x40020800
 8005378:	40020820 	.word	0x40020820
 800537c:	cccccccd 	.word	0xcccccccd
 8005380:	40020880 	.word	0x40020880

08005384 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	461a      	mov	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a08      	ldr	r2, [pc, #32]	@ (80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053a6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2201      	movs	r2, #1
 80053b2:	409a      	lsls	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	1000823f 	.word	0x1000823f
 80053c8:	40020940 	.word	0x40020940

080053cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053da:	e15a      	b.n	8005692 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2101      	movs	r1, #1
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	fa01 f303 	lsl.w	r3, r1, r3
 80053e8:	4013      	ands	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 814c 	beq.w	800568c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d005      	beq.n	800540c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005408:	2b02      	cmp	r3, #2
 800540a:	d130      	bne.n	800546e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	2203      	movs	r2, #3
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4013      	ands	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005442:	2201      	movs	r2, #1
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4013      	ands	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	f003 0201 	and.w	r2, r3, #1
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b03      	cmp	r3, #3
 8005478:	d017      	beq.n	80054aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	2203      	movs	r2, #3
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4013      	ands	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d123      	bne.n	80054fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	08da      	lsrs	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3208      	adds	r2, #8
 80054be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	220f      	movs	r2, #15
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	08da      	lsrs	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3208      	adds	r2, #8
 80054f8:	6939      	ldr	r1, [r7, #16]
 80054fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	2203      	movs	r2, #3
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4013      	ands	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0203 	and.w	r2, r3, #3
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80a6 	beq.w	800568c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005540:	4b5b      	ldr	r3, [pc, #364]	@ (80056b0 <HAL_GPIO_Init+0x2e4>)
 8005542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005544:	4a5a      	ldr	r2, [pc, #360]	@ (80056b0 <HAL_GPIO_Init+0x2e4>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	6613      	str	r3, [r2, #96]	@ 0x60
 800554c:	4b58      	ldr	r3, [pc, #352]	@ (80056b0 <HAL_GPIO_Init+0x2e4>)
 800554e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005558:	4a56      	ldr	r2, [pc, #344]	@ (80056b4 <HAL_GPIO_Init+0x2e8>)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	089b      	lsrs	r3, r3, #2
 800555e:	3302      	adds	r3, #2
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	220f      	movs	r2, #15
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	43db      	mvns	r3, r3
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4013      	ands	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005582:	d01f      	beq.n	80055c4 <HAL_GPIO_Init+0x1f8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a4c      	ldr	r2, [pc, #304]	@ (80056b8 <HAL_GPIO_Init+0x2ec>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d019      	beq.n	80055c0 <HAL_GPIO_Init+0x1f4>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a4b      	ldr	r2, [pc, #300]	@ (80056bc <HAL_GPIO_Init+0x2f0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <HAL_GPIO_Init+0x1f0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a4a      	ldr	r2, [pc, #296]	@ (80056c0 <HAL_GPIO_Init+0x2f4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00d      	beq.n	80055b8 <HAL_GPIO_Init+0x1ec>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a49      	ldr	r2, [pc, #292]	@ (80056c4 <HAL_GPIO_Init+0x2f8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <HAL_GPIO_Init+0x1e8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a48      	ldr	r2, [pc, #288]	@ (80056c8 <HAL_GPIO_Init+0x2fc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d101      	bne.n	80055b0 <HAL_GPIO_Init+0x1e4>
 80055ac:	2305      	movs	r3, #5
 80055ae:	e00a      	b.n	80055c6 <HAL_GPIO_Init+0x1fa>
 80055b0:	2306      	movs	r3, #6
 80055b2:	e008      	b.n	80055c6 <HAL_GPIO_Init+0x1fa>
 80055b4:	2304      	movs	r3, #4
 80055b6:	e006      	b.n	80055c6 <HAL_GPIO_Init+0x1fa>
 80055b8:	2303      	movs	r3, #3
 80055ba:	e004      	b.n	80055c6 <HAL_GPIO_Init+0x1fa>
 80055bc:	2302      	movs	r3, #2
 80055be:	e002      	b.n	80055c6 <HAL_GPIO_Init+0x1fa>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_GPIO_Init+0x1fa>
 80055c4:	2300      	movs	r3, #0
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	f002 0203 	and.w	r2, r2, #3
 80055cc:	0092      	lsls	r2, r2, #2
 80055ce:	4093      	lsls	r3, r2
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055d6:	4937      	ldr	r1, [pc, #220]	@ (80056b4 <HAL_GPIO_Init+0x2e8>)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	089b      	lsrs	r3, r3, #2
 80055dc:	3302      	adds	r3, #2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055e4:	4b39      	ldr	r3, [pc, #228]	@ (80056cc <HAL_GPIO_Init+0x300>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	43db      	mvns	r3, r3
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4013      	ands	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005608:	4a30      	ldr	r2, [pc, #192]	@ (80056cc <HAL_GPIO_Init+0x300>)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800560e:	4b2f      	ldr	r3, [pc, #188]	@ (80056cc <HAL_GPIO_Init+0x300>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	43db      	mvns	r3, r3
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005632:	4a26      	ldr	r2, [pc, #152]	@ (80056cc <HAL_GPIO_Init+0x300>)
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005638:	4b24      	ldr	r3, [pc, #144]	@ (80056cc <HAL_GPIO_Init+0x300>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	43db      	mvns	r3, r3
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800565c:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <HAL_GPIO_Init+0x300>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005662:	4b1a      	ldr	r3, [pc, #104]	@ (80056cc <HAL_GPIO_Init+0x300>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	43db      	mvns	r3, r3
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4013      	ands	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005686:	4a11      	ldr	r2, [pc, #68]	@ (80056cc <HAL_GPIO_Init+0x300>)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3301      	adds	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	f47f ae9d 	bne.w	80053dc <HAL_GPIO_Init+0x10>
  }
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40021000 	.word	0x40021000
 80056b4:	40010000 	.word	0x40010000
 80056b8:	48000400 	.word	0x48000400
 80056bc:	48000800 	.word	0x48000800
 80056c0:	48000c00 	.word	0x48000c00
 80056c4:	48001000 	.word	0x48001000
 80056c8:	48001400 	.word	0x48001400
 80056cc:	40010400 	.word	0x40010400

080056d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	887b      	ldrh	r3, [r7, #2]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	e001      	b.n	80056f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	807b      	strh	r3, [r7, #2]
 800570c:	4613      	mov	r3, r2
 800570e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005710:	787b      	ldrb	r3, [r7, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800571c:	e002      	b.n	8005724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800571e:	887a      	ldrh	r2, [r7, #2]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d141      	bne.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800573e:	4b4b      	ldr	r3, [pc, #300]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800574a:	d131      	bne.n	80057b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800574c:	4b47      	ldr	r3, [pc, #284]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005752:	4a46      	ldr	r2, [pc, #280]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005758:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800575c:	4b43      	ldr	r3, [pc, #268]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005764:	4a41      	ldr	r2, [pc, #260]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800576a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800576c:	4b40      	ldr	r3, [pc, #256]	@ (8005870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2232      	movs	r2, #50	@ 0x32
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	4a3f      	ldr	r2, [pc, #252]	@ (8005874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	0c9b      	lsrs	r3, r3, #18
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005782:	e002      	b.n	800578a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3b01      	subs	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800578a:	4b38      	ldr	r3, [pc, #224]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005796:	d102      	bne.n	800579e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f2      	bne.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800579e:	4b33      	ldr	r3, [pc, #204]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057aa:	d158      	bne.n	800585e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e057      	b.n	8005860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057b0:	4b2e      	ldr	r3, [pc, #184]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b6:	4a2d      	ldr	r2, [pc, #180]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057c0:	e04d      	b.n	800585e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c8:	d141      	bne.n	800584e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057ca:	4b28      	ldr	r3, [pc, #160]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d6:	d131      	bne.n	800583c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057d8:	4b24      	ldr	r3, [pc, #144]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057de:	4a23      	ldr	r2, [pc, #140]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057e8:	4b20      	ldr	r3, [pc, #128]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057f0:	4a1e      	ldr	r2, [pc, #120]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2232      	movs	r2, #50	@ 0x32
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	4a1c      	ldr	r2, [pc, #112]	@ (8005874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005804:	fba2 2303 	umull	r2, r3, r2, r3
 8005808:	0c9b      	lsrs	r3, r3, #18
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800580e:	e002      	b.n	8005816 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3b01      	subs	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005816:	4b15      	ldr	r3, [pc, #84]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005822:	d102      	bne.n	800582a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f2      	bne.n	8005810 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800582a:	4b10      	ldr	r3, [pc, #64]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005836:	d112      	bne.n	800585e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e011      	b.n	8005860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800583c:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005842:	4a0a      	ldr	r2, [pc, #40]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005848:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800584c:	e007      	b.n	800585e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800584e:	4b07      	ldr	r3, [pc, #28]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005856:	4a05      	ldr	r2, [pc, #20]	@ (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005858:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800585c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40007000 	.word	0x40007000
 8005870:	20000038 	.word	0x20000038
 8005874:	431bde83 	.word	0x431bde83

08005878 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800587c:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a04      	ldr	r2, [pc, #16]	@ (8005894 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005886:	6093      	str	r3, [r2, #8]
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40007000 	.word	0x40007000

08005898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e2fe      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d075      	beq.n	80059a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b6:	4b97      	ldr	r3, [pc, #604]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058c0:	4b94      	ldr	r3, [pc, #592]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b0c      	cmp	r3, #12
 80058ce:	d102      	bne.n	80058d6 <HAL_RCC_OscConfig+0x3e>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d002      	beq.n	80058dc <HAL_RCC_OscConfig+0x44>
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d10b      	bne.n	80058f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	4b8d      	ldr	r3, [pc, #564]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d05b      	beq.n	80059a0 <HAL_RCC_OscConfig+0x108>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d157      	bne.n	80059a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e2d9      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058fc:	d106      	bne.n	800590c <HAL_RCC_OscConfig+0x74>
 80058fe:	4b85      	ldr	r3, [pc, #532]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a84      	ldr	r2, [pc, #528]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e01d      	b.n	8005948 <HAL_RCC_OscConfig+0xb0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005914:	d10c      	bne.n	8005930 <HAL_RCC_OscConfig+0x98>
 8005916:	4b7f      	ldr	r3, [pc, #508]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 800591c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	4b7c      	ldr	r3, [pc, #496]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a7b      	ldr	r2, [pc, #492]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	e00b      	b.n	8005948 <HAL_RCC_OscConfig+0xb0>
 8005930:	4b78      	ldr	r3, [pc, #480]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a77      	ldr	r2, [pc, #476]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	4b75      	ldr	r3, [pc, #468]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a74      	ldr	r2, [pc, #464]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d013      	beq.n	8005978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7ff f8c0 	bl	8004ad4 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005958:	f7ff f8bc 	bl	8004ad4 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b64      	cmp	r3, #100	@ 0x64
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e29e      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800596a:	4b6a      	ldr	r3, [pc, #424]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0xc0>
 8005976:	e014      	b.n	80059a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7ff f8ac 	bl	8004ad4 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005980:	f7ff f8a8 	bl	8004ad4 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b64      	cmp	r3, #100	@ 0x64
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e28a      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005992:	4b60      	ldr	r3, [pc, #384]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f0      	bne.n	8005980 <HAL_RCC_OscConfig+0xe8>
 800599e:	e000      	b.n	80059a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d075      	beq.n	8005a9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ae:	4b59      	ldr	r3, [pc, #356]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059b8:	4b56      	ldr	r3, [pc, #344]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b0c      	cmp	r3, #12
 80059c6:	d102      	bne.n	80059ce <HAL_RCC_OscConfig+0x136>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d002      	beq.n	80059d4 <HAL_RCC_OscConfig+0x13c>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d11f      	bne.n	8005a14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_OscConfig+0x154>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e25d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ec:	4b49      	ldr	r3, [pc, #292]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	061b      	lsls	r3, r3, #24
 80059fa:	4946      	ldr	r1, [pc, #280]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a00:	4b45      	ldr	r3, [pc, #276]	@ (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff f819 	bl	8004a3c <HAL_InitTick>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d043      	beq.n	8005a98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e249      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d023      	beq.n	8005a64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a3c      	ldr	r2, [pc, #240]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7ff f854 	bl	8004ad4 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a30:	f7ff f850 	bl	8004ad4 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e232      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a42:	4b34      	ldr	r3, [pc, #208]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4e:	4b31      	ldr	r3, [pc, #196]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	061b      	lsls	r3, r3, #24
 8005a5c:	492d      	ldr	r1, [pc, #180]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	604b      	str	r3, [r1, #4]
 8005a62:	e01a      	b.n	8005a9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a64:	4b2b      	ldr	r3, [pc, #172]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2a      	ldr	r2, [pc, #168]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7ff f830 	bl	8004ad4 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a78:	f7ff f82c 	bl	8004ad4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e20e      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a8a:	4b22      	ldr	r3, [pc, #136]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x1e0>
 8005a96:	e000      	b.n	8005a9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d041      	beq.n	8005b2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01c      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aae:	4b19      	ldr	r3, [pc, #100]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ab4:	4a17      	ldr	r2, [pc, #92]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abe:	f7ff f809 	bl	8004ad4 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac6:	f7ff f805 	bl	8004ad4 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e1e7      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0ef      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x22e>
 8005ae6:	e020      	b.n	8005b2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aee:	4a09      	ldr	r2, [pc, #36]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fe ffec 	bl	8004ad4 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005afe:	e00d      	b.n	8005b1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b00:	f7fe ffe8 	bl	8004ad4 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d906      	bls.n	8005b1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e1ca      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
 8005b12:	bf00      	nop
 8005b14:	40021000 	.word	0x40021000
 8005b18:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1ea      	bne.n	8005b00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80a6 	beq.w	8005c84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b3c:	4b84      	ldr	r3, [pc, #528]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_OscConfig+0x2b4>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <HAL_RCC_OscConfig+0x2b6>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b52:	4b7f      	ldr	r3, [pc, #508]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b56:	4a7e      	ldr	r2, [pc, #504]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6e:	4b79      	ldr	r3, [pc, #484]	@ (8005d54 <HAL_RCC_OscConfig+0x4bc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d118      	bne.n	8005bac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b7a:	4b76      	ldr	r3, [pc, #472]	@ (8005d54 <HAL_RCC_OscConfig+0x4bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a75      	ldr	r2, [pc, #468]	@ (8005d54 <HAL_RCC_OscConfig+0x4bc>)
 8005b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b86:	f7fe ffa5 	bl	8004ad4 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8e:	f7fe ffa1 	bl	8004ad4 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e183      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d54 <HAL_RCC_OscConfig+0x4bc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d108      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x32e>
 8005bb4:	4b66      	ldr	r3, [pc, #408]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bba:	4a65      	ldr	r2, [pc, #404]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bc4:	e024      	b.n	8005c10 <HAL_RCC_OscConfig+0x378>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d110      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x358>
 8005bce:	4b60      	ldr	r3, [pc, #384]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd4:	4a5e      	ldr	r2, [pc, #376]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bd6:	f043 0304 	orr.w	r3, r3, #4
 8005bda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bde:	4b5c      	ldr	r3, [pc, #368]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be4:	4a5a      	ldr	r2, [pc, #360]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bee:	e00f      	b.n	8005c10 <HAL_RCC_OscConfig+0x378>
 8005bf0:	4b57      	ldr	r3, [pc, #348]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf6:	4a56      	ldr	r2, [pc, #344]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c00:	4b53      	ldr	r3, [pc, #332]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c06:	4a52      	ldr	r2, [pc, #328]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c08:	f023 0304 	bic.w	r3, r3, #4
 8005c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d016      	beq.n	8005c46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fe ff5c 	bl	8004ad4 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fe ff58 	bl	8004ad4 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e138      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c36:	4b46      	ldr	r3, [pc, #280]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ed      	beq.n	8005c20 <HAL_RCC_OscConfig+0x388>
 8005c44:	e015      	b.n	8005c72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c46:	f7fe ff45 	bl	8004ad4 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f7fe ff41 	bl	8004ad4 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e121      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c64:	4b3a      	ldr	r3, [pc, #232]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1ed      	bne.n	8005c4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d105      	bne.n	8005c84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c78:	4b35      	ldr	r3, [pc, #212]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7c:	4a34      	ldr	r2, [pc, #208]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d03c      	beq.n	8005d0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01c      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c98:	4b2d      	ldr	r3, [pc, #180]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca8:	f7fe ff14 	bl	8004ad4 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cb0:	f7fe ff10 	bl	8004ad4 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0f2      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cc2:	4b23      	ldr	r3, [pc, #140]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0ef      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x418>
 8005cd0:	e01b      	b.n	8005d0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce2:	f7fe fef7 	bl	8004ad4 <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cea:	f7fe fef3 	bl	8004ad4 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e0d5      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cfc:	4b14      	ldr	r3, [pc, #80]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ef      	bne.n	8005cea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 80c9 	beq.w	8005ea6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d14:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 030c 	and.w	r3, r3, #12
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	f000 8083 	beq.w	8005e28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d15e      	bne.n	8005de8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2a:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a08      	ldr	r2, [pc, #32]	@ (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005d30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fe fecd 	bl	8004ad4 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d3c:	e00c      	b.n	8005d58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fe fec9 	bl	8004ad4 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d905      	bls.n	8005d58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e0ab      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d58:	4b55      	ldr	r3, [pc, #340]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ec      	bne.n	8005d3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d64:	4b52      	ldr	r3, [pc, #328]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	4b52      	ldr	r3, [pc, #328]	@ (8005eb4 <HAL_RCC_OscConfig+0x61c>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6a11      	ldr	r1, [r2, #32]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d74:	3a01      	subs	r2, #1
 8005d76:	0112      	lsls	r2, r2, #4
 8005d78:	4311      	orrs	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005d7e:	0212      	lsls	r2, r2, #8
 8005d80:	4311      	orrs	r1, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d86:	0852      	lsrs	r2, r2, #1
 8005d88:	3a01      	subs	r2, #1
 8005d8a:	0552      	lsls	r2, r2, #21
 8005d8c:	4311      	orrs	r1, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d92:	0852      	lsrs	r2, r2, #1
 8005d94:	3a01      	subs	r2, #1
 8005d96:	0652      	lsls	r2, r2, #25
 8005d98:	4311      	orrs	r1, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d9e:	06d2      	lsls	r2, r2, #27
 8005da0:	430a      	orrs	r2, r1
 8005da2:	4943      	ldr	r1, [pc, #268]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da8:	4b41      	ldr	r3, [pc, #260]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a40      	ldr	r2, [pc, #256]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005db2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005db4:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	4a3d      	ldr	r2, [pc, #244]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fe fe88 	bl	8004ad4 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc8:	f7fe fe84 	bl	8004ad4 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e066      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dda:	4b35      	ldr	r3, [pc, #212]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x530>
 8005de6:	e05e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de8:	4b31      	ldr	r3, [pc, #196]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a30      	ldr	r2, [pc, #192]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fe fe6e 	bl	8004ad4 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dfc:	f7fe fe6a 	bl	8004ad4 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e04c      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e0e:	4b28      	ldr	r3, [pc, #160]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e1a:	4b25      	ldr	r3, [pc, #148]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	4924      	ldr	r1, [pc, #144]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e20:	4b25      	ldr	r3, [pc, #148]	@ (8005eb8 <HAL_RCC_OscConfig+0x620>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	60cb      	str	r3, [r1, #12]
 8005e26:	e03e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e039      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e34:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f003 0203 	and.w	r2, r3, #3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d12c      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e52:	3b01      	subs	r3, #1
 8005e54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d123      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d11b      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d113      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	3b01      	subs	r3, #1
 8005e88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d109      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d001      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	019f800c 	.word	0x019f800c
 8005eb8:	feeefffc 	.word	0xfeeefffc

08005ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e11e      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b91      	ldr	r3, [pc, #580]	@ (800611c <HAL_RCC_ClockConfig+0x260>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d910      	bls.n	8005f04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b8e      	ldr	r3, [pc, #568]	@ (800611c <HAL_RCC_ClockConfig+0x260>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 020f 	bic.w	r2, r3, #15
 8005eea:	498c      	ldr	r1, [pc, #560]	@ (800611c <HAL_RCC_ClockConfig+0x260>)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef2:	4b8a      	ldr	r3, [pc, #552]	@ (800611c <HAL_RCC_ClockConfig+0x260>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d001      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e106      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d073      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d129      	bne.n	8005f6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f18:	4b81      	ldr	r3, [pc, #516]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0f4      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f28:	f000 f99e 	bl	8006268 <RCC_GetSysClockFreqFromPLLSource>
 8005f2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4a7c      	ldr	r2, [pc, #496]	@ (8006124 <HAL_RCC_ClockConfig+0x268>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d93f      	bls.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f36:	4b7a      	ldr	r3, [pc, #488]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d033      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d12f      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f56:	4b72      	ldr	r3, [pc, #456]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f5e:	4a70      	ldr	r2, [pc, #448]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e024      	b.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f74:	4b6a      	ldr	r3, [pc, #424]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0c6      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f84:	4b66      	ldr	r3, [pc, #408]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0be      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f94:	f000 f8ce 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 8005f98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4a61      	ldr	r2, [pc, #388]	@ (8006124 <HAL_RCC_ClockConfig+0x268>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d909      	bls.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005faa:	4a5d      	ldr	r2, [pc, #372]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005fb2:	2380      	movs	r3, #128	@ 0x80
 8005fb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f023 0203 	bic.w	r2, r3, #3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4957      	ldr	r1, [pc, #348]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc8:	f7fe fd84 	bl	8004ad4 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd0:	f7fe fd80 	bl	8004ad4 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e095      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 020c 	and.w	r2, r3, #12
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d1eb      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d023      	beq.n	800604c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006010:	4b43      	ldr	r3, [pc, #268]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a42      	ldr	r2, [pc, #264]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006016:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800601a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006028:	4b3d      	ldr	r3, [pc, #244]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006030:	4a3b      	ldr	r2, [pc, #236]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006032:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006036:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006038:	4b39      	ldr	r3, [pc, #228]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4936      	ldr	r1, [pc, #216]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
 800604a:	e008      	b.n	800605e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b80      	cmp	r3, #128	@ 0x80
 8006050:	d105      	bne.n	800605e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006052:	4b33      	ldr	r3, [pc, #204]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	4a32      	ldr	r2, [pc, #200]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006058:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800605c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800605e:	4b2f      	ldr	r3, [pc, #188]	@ (800611c <HAL_RCC_ClockConfig+0x260>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d21d      	bcs.n	80060a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606c:	4b2b      	ldr	r3, [pc, #172]	@ (800611c <HAL_RCC_ClockConfig+0x260>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f023 020f 	bic.w	r2, r3, #15
 8006074:	4929      	ldr	r1, [pc, #164]	@ (800611c <HAL_RCC_ClockConfig+0x260>)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	4313      	orrs	r3, r2
 800607a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800607c:	f7fe fd2a 	bl	8004ad4 <HAL_GetTick>
 8006080:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006082:	e00a      	b.n	800609a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006084:	f7fe fd26 	bl	8004ad4 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e03b      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800609a:	4b20      	ldr	r3, [pc, #128]	@ (800611c <HAL_RCC_ClockConfig+0x260>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d1ed      	bne.n	8006084 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4917      	ldr	r1, [pc, #92]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060d2:	4b13      	ldr	r3, [pc, #76]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	490f      	ldr	r1, [pc, #60]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060e6:	f000 f825 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	490c      	ldr	r1, [pc, #48]	@ (8006128 <HAL_RCC_ClockConfig+0x26c>)
 80060f8:	5ccb      	ldrb	r3, [r1, r3]
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006102:	4a0a      	ldr	r2, [pc, #40]	@ (800612c <HAL_RCC_ClockConfig+0x270>)
 8006104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006106:	4b0a      	ldr	r3, [pc, #40]	@ (8006130 <HAL_RCC_ClockConfig+0x274>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fc96 	bl	8004a3c <HAL_InitTick>
 8006110:	4603      	mov	r3, r0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40022000 	.word	0x40022000
 8006120:	40021000 	.word	0x40021000
 8006124:	04c4b400 	.word	0x04c4b400
 8006128:	08010650 	.word	0x08010650
 800612c:	20000038 	.word	0x20000038
 8006130:	20000040 	.word	0x20000040

08006134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800613a:	4b2c      	ldr	r3, [pc, #176]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 030c 	and.w	r3, r3, #12
 8006142:	2b04      	cmp	r3, #4
 8006144:	d102      	bne.n	800614c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006146:	4b2a      	ldr	r3, [pc, #168]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e047      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800614c:	4b27      	ldr	r3, [pc, #156]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 030c 	and.w	r3, r3, #12
 8006154:	2b08      	cmp	r3, #8
 8006156:	d102      	bne.n	800615e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006158:	4b26      	ldr	r3, [pc, #152]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	e03e      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800615e:	4b23      	ldr	r3, [pc, #140]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d136      	bne.n	80061d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800616a:	4b20      	ldr	r3, [pc, #128]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006174:	4b1d      	ldr	r3, [pc, #116]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	3301      	adds	r3, #1
 8006180:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d10c      	bne.n	80061a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006188:	4a1a      	ldr	r2, [pc, #104]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	4a16      	ldr	r2, [pc, #88]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006192:	68d2      	ldr	r2, [r2, #12]
 8006194:	0a12      	lsrs	r2, r2, #8
 8006196:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	617b      	str	r3, [r7, #20]
      break;
 80061a0:	e00c      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061a2:	4a13      	ldr	r2, [pc, #76]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	4a10      	ldr	r2, [pc, #64]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ac:	68d2      	ldr	r2, [r2, #12]
 80061ae:	0a12      	lsrs	r2, r2, #8
 80061b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061b4:	fb02 f303 	mul.w	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
      break;
 80061ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061bc:	4b0b      	ldr	r3, [pc, #44]	@ (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	0e5b      	lsrs	r3, r3, #25
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	3301      	adds	r3, #1
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	e001      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061dc:	693b      	ldr	r3, [r7, #16]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40021000 	.word	0x40021000
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	007a1200 	.word	0x007a1200

080061f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061fc:	4b03      	ldr	r3, [pc, #12]	@ (800620c <HAL_RCC_GetHCLKFreq+0x14>)
 80061fe:	681b      	ldr	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000038 	.word	0x20000038

08006210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006214:	f7ff fff0 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006218:	4602      	mov	r2, r0
 800621a:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	4904      	ldr	r1, [pc, #16]	@ (8006238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006226:	5ccb      	ldrb	r3, [r1, r3]
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40021000 	.word	0x40021000
 8006238:	08010660 	.word	0x08010660

0800623c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006240:	f7ff ffda 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006244:	4602      	mov	r2, r0
 8006246:	4b06      	ldr	r3, [pc, #24]	@ (8006260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	0adb      	lsrs	r3, r3, #11
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	4904      	ldr	r1, [pc, #16]	@ (8006264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006252:	5ccb      	ldrb	r3, [r1, r3]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40021000 	.word	0x40021000
 8006264:	08010660 	.word	0x08010660

08006268 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800626e:	4b1e      	ldr	r3, [pc, #120]	@ (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006278:	4b1b      	ldr	r3, [pc, #108]	@ (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	091b      	lsrs	r3, r3, #4
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b03      	cmp	r3, #3
 800628a:	d10c      	bne.n	80062a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800628c:	4a17      	ldr	r2, [pc, #92]	@ (80062ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	fbb2 f3f3 	udiv	r3, r2, r3
 8006294:	4a14      	ldr	r2, [pc, #80]	@ (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006296:	68d2      	ldr	r2, [r2, #12]
 8006298:	0a12      	lsrs	r2, r2, #8
 800629a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	617b      	str	r3, [r7, #20]
    break;
 80062a4:	e00c      	b.n	80062c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062a6:	4a12      	ldr	r2, [pc, #72]	@ (80062f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	4a0e      	ldr	r2, [pc, #56]	@ (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062b0:	68d2      	ldr	r2, [r2, #12]
 80062b2:	0a12      	lsrs	r2, r2, #8
 80062b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062b8:	fb02 f303 	mul.w	r3, r2, r3
 80062bc:	617b      	str	r3, [r7, #20]
    break;
 80062be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062c0:	4b09      	ldr	r3, [pc, #36]	@ (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	0e5b      	lsrs	r3, r3, #25
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	3301      	adds	r3, #1
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80062da:	687b      	ldr	r3, [r7, #4]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40021000 	.word	0x40021000
 80062ec:	007a1200 	.word	0x007a1200
 80062f0:	00f42400 	.word	0x00f42400

080062f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062fc:	2300      	movs	r3, #0
 80062fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006300:	2300      	movs	r3, #0
 8006302:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8098 	beq.w	8006442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006312:	2300      	movs	r3, #0
 8006314:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006316:	4b43      	ldr	r3, [pc, #268]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10d      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006322:	4b40      	ldr	r3, [pc, #256]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006326:	4a3f      	ldr	r2, [pc, #252]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800632c:	6593      	str	r3, [r2, #88]	@ 0x58
 800632e:	4b3d      	ldr	r3, [pc, #244]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006336:	60bb      	str	r3, [r7, #8]
 8006338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800633a:	2301      	movs	r3, #1
 800633c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800633e:	4b3a      	ldr	r3, [pc, #232]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a39      	ldr	r2, [pc, #228]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800634a:	f7fe fbc3 	bl	8004ad4 <HAL_GetTick>
 800634e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006350:	e009      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006352:	f7fe fbbf 	bl	8004ad4 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d902      	bls.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	74fb      	strb	r3, [r7, #19]
        break;
 8006364:	e005      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006366:	4b30      	ldr	r3, [pc, #192]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0ef      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006372:	7cfb      	ldrb	r3, [r7, #19]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d159      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006378:	4b2a      	ldr	r3, [pc, #168]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006382:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01e      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	429a      	cmp	r2, r3
 8006392:	d019      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006394:	4b23      	ldr	r3, [pc, #140]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800639e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063a0:	4b20      	ldr	r3, [pc, #128]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063c0:	4a18      	ldr	r2, [pc, #96]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d016      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d2:	f7fe fb7f 	bl	8004ad4 <HAL_GetTick>
 80063d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d8:	e00b      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063da:	f7fe fb7b 	bl	8004ad4 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d902      	bls.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	74fb      	strb	r3, [r7, #19]
            break;
 80063f0:	e006      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0ec      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006400:	7cfb      	ldrb	r3, [r7, #19]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006406:	4b07      	ldr	r3, [pc, #28]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006414:	4903      	ldr	r1, [pc, #12]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800641e:	7cfb      	ldrb	r3, [r7, #19]
 8006420:	74bb      	strb	r3, [r7, #18]
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006424:	40021000 	.word	0x40021000
 8006428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	7cfb      	ldrb	r3, [r7, #19]
 800642e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006430:	7c7b      	ldrb	r3, [r7, #17]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d105      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006436:	4ba6      	ldr	r3, [pc, #664]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643a:	4aa5      	ldr	r2, [pc, #660]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006440:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800644e:	4ba0      	ldr	r3, [pc, #640]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006454:	f023 0203 	bic.w	r2, r3, #3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	499c      	ldr	r1, [pc, #624]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006470:	4b97      	ldr	r3, [pc, #604]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006476:	f023 020c 	bic.w	r2, r3, #12
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	4994      	ldr	r1, [pc, #592]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006492:	4b8f      	ldr	r3, [pc, #572]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006498:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	498b      	ldr	r1, [pc, #556]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064b4:	4b86      	ldr	r3, [pc, #536]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	4983      	ldr	r1, [pc, #524]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064d6:	4b7e      	ldr	r3, [pc, #504]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	497a      	ldr	r1, [pc, #488]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064f8:	4b75      	ldr	r3, [pc, #468]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	4972      	ldr	r1, [pc, #456]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006508:	4313      	orrs	r3, r2
 800650a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800651a:	4b6d      	ldr	r3, [pc, #436]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006520:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4969      	ldr	r1, [pc, #420]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800653c:	4b64      	ldr	r3, [pc, #400]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006542:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4961      	ldr	r1, [pc, #388]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800655e:	4b5c      	ldr	r3, [pc, #368]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006564:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	4958      	ldr	r1, [pc, #352]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006580:	4b53      	ldr	r3, [pc, #332]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006586:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	4950      	ldr	r1, [pc, #320]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800659e:	d105      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a0:	4b4b      	ldr	r3, [pc, #300]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4a4a      	ldr	r2, [pc, #296]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065aa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065b8:	4b45      	ldr	r3, [pc, #276]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c6:	4942      	ldr	r1, [pc, #264]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065d6:	d105      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d8:	4b3d      	ldr	r3, [pc, #244]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a3c      	ldr	r2, [pc, #240]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065f0:	4b37      	ldr	r3, [pc, #220]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	4934      	ldr	r1, [pc, #208]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800660e:	d105      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006610:	4b2f      	ldr	r3, [pc, #188]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a2e      	ldr	r2, [pc, #184]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d015      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006628:	4b29      	ldr	r3, [pc, #164]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006636:	4926      	ldr	r1, [pc, #152]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006646:	d105      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006648:	4b21      	ldr	r3, [pc, #132]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a20      	ldr	r2, [pc, #128]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006652:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006660:	4b1b      	ldr	r3, [pc, #108]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006666:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666e:	4918      	ldr	r1, [pc, #96]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800667e:	d105      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006680:	4b13      	ldr	r3, [pc, #76]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4a12      	ldr	r2, [pc, #72]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800668a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006698:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a6:	490a      	ldr	r1, [pc, #40]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b6:	d105      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066b8:	4b05      	ldr	r3, [pc, #20]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a04      	ldr	r2, [pc, #16]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000

080066d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e09d      	b.n	8006822 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d108      	bne.n	8006700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f6:	d009      	beq.n	800670c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	61da      	str	r2, [r3, #28]
 80066fe:	e005      	b.n	800670c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d106      	bne.n	800672c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fd f9b4 	bl	8003a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006742:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800674c:	d902      	bls.n	8006754 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e002      	b.n	800675a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006758:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006762:	d007      	beq.n	8006774 <HAL_SPI_Init+0xa0>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800676c:	d002      	beq.n	8006774 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b6:	ea42 0103 	orr.w	r1, r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	0c1b      	lsrs	r3, r3, #16
 80067d0:	f003 0204 	and.w	r2, r3, #4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80067f0:	ea42 0103 	orr.w	r1, r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006810:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b088      	sub	sp, #32
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683a:	f7fe f94b 	bl	8004ad4 <HAL_GetTick>
 800683e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b01      	cmp	r3, #1
 800684e:	d001      	beq.n	8006854 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
 8006852:	e15c      	b.n	8006b0e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_SPI_Transmit+0x36>
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e154      	b.n	8006b0e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <HAL_SPI_Transmit+0x48>
 800686e:	2302      	movs	r3, #2
 8006870:	e14d      	b.n	8006b0e <HAL_SPI_Transmit+0x2e4>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2203      	movs	r2, #3
 800687e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	88fa      	ldrh	r2, [r7, #6]
 8006892:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068c4:	d10f      	bne.n	80068e6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d007      	beq.n	8006904 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006902:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800690c:	d952      	bls.n	80069b4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_SPI_Transmit+0xf2>
 8006916:	8b7b      	ldrh	r3, [r7, #26]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d145      	bne.n	80069a8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006920:	881a      	ldrh	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692c:	1c9a      	adds	r2, r3, #2
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006940:	e032      	b.n	80069a8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b02      	cmp	r3, #2
 800694e:	d112      	bne.n	8006976 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006954:	881a      	ldrh	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	1c9a      	adds	r2, r3, #2
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006974:	e018      	b.n	80069a8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006976:	f7fe f8ad 	bl	8004ad4 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d803      	bhi.n	800698e <HAL_SPI_Transmit+0x164>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d102      	bne.n	8006994 <HAL_SPI_Transmit+0x16a>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d109      	bne.n	80069a8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e0b2      	b.n	8006b0e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1c7      	bne.n	8006942 <HAL_SPI_Transmit+0x118>
 80069b2:	e083      	b.n	8006abc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <HAL_SPI_Transmit+0x198>
 80069bc:	8b7b      	ldrh	r3, [r7, #26]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d177      	bne.n	8006ab2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d912      	bls.n	80069f2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d0:	881a      	ldrh	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069dc:	1c9a      	adds	r2, r3, #2
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b02      	subs	r3, #2
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069f0:	e05f      	b.n	8006ab2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	330c      	adds	r3, #12
 80069fc:	7812      	ldrb	r2, [r2, #0]
 80069fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a18:	e04b      	b.n	8006ab2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d12b      	bne.n	8006a80 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d912      	bls.n	8006a58 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a36:	881a      	ldrh	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a42:	1c9a      	adds	r2, r3, #2
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b02      	subs	r3, #2
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a56:	e02c      	b.n	8006ab2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a7e:	e018      	b.n	8006ab2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a80:	f7fe f828 	bl	8004ad4 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d803      	bhi.n	8006a98 <HAL_SPI_Transmit+0x26e>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d102      	bne.n	8006a9e <HAL_SPI_Transmit+0x274>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e02d      	b.n	8006b0e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1ae      	bne.n	8006a1a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fb65 	bl	8007190 <SPI_EndRxTxTransaction>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
  }
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3720      	adds	r7, #32
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b08a      	sub	sp, #40	@ 0x28
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b24:	2301      	movs	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b28:	f7fd ffd4 	bl	8004ad4 <HAL_GetTick>
 8006b2c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b34:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006b3c:	887b      	ldrh	r3, [r7, #2]
 8006b3e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006b40:	887b      	ldrh	r3, [r7, #2]
 8006b42:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b44:	7ffb      	ldrb	r3, [r7, #31]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d00c      	beq.n	8006b64 <HAL_SPI_TransmitReceive+0x4e>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b50:	d106      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d102      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x4a>
 8006b5a:	7ffb      	ldrb	r3, [r7, #31]
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d001      	beq.n	8006b64 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
 8006b62:	e1f3      	b.n	8006f4c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_SPI_TransmitReceive+0x60>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <HAL_SPI_TransmitReceive+0x60>
 8006b70:	887b      	ldrh	r3, [r7, #2]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e1e8      	b.n	8006f4c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_SPI_TransmitReceive+0x72>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e1e1      	b.n	8006f4c <HAL_SPI_TransmitReceive+0x436>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d003      	beq.n	8006ba4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2205      	movs	r2, #5
 8006ba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	887a      	ldrh	r2, [r7, #2]
 8006bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	887a      	ldrh	r2, [r7, #2]
 8006bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	887a      	ldrh	r2, [r7, #2]
 8006bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	887a      	ldrh	r2, [r7, #2]
 8006bd0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006be6:	d802      	bhi.n	8006bee <HAL_SPI_TransmitReceive+0xd8>
 8006be8:	8abb      	ldrh	r3, [r7, #20]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d908      	bls.n	8006c00 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bfc:	605a      	str	r2, [r3, #4]
 8006bfe:	e007      	b.n	8006c10 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1a:	2b40      	cmp	r3, #64	@ 0x40
 8006c1c:	d007      	beq.n	8006c2e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c36:	f240 8083 	bls.w	8006d40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_SPI_TransmitReceive+0x132>
 8006c42:	8afb      	ldrh	r3, [r7, #22]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d16f      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4c:	881a      	ldrh	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c58:	1c9a      	adds	r2, r3, #2
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c6c:	e05c      	b.n	8006d28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d11b      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x19e>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x19e>
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d113      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c90:	881a      	ldrh	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	1c9a      	adds	r2, r3, #2
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d11c      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x1e6>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd8:	b292      	uxth	r2, r2
 8006cda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce0:	1c9a      	adds	r2, r3, #2
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cfc:	f7fd feea 	bl	8004ad4 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d80d      	bhi.n	8006d28 <HAL_SPI_TransmitReceive+0x212>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	d009      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e111      	b.n	8006f4c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d19d      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x158>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d197      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x158>
 8006d3e:	e0e5      	b.n	8006f0c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_SPI_TransmitReceive+0x23a>
 8006d48:	8afb      	ldrh	r3, [r7, #22]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	f040 80d1 	bne.w	8006ef2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d912      	bls.n	8006d80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	1c9a      	adds	r2, r3, #2
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b02      	subs	r3, #2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d7e:	e0b8      	b.n	8006ef2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	7812      	ldrb	r2, [r2, #0]
 8006d8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006da6:	e0a4      	b.n	8006ef2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d134      	bne.n	8006e20 <HAL_SPI_TransmitReceive+0x30a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02f      	beq.n	8006e20 <HAL_SPI_TransmitReceive+0x30a>
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d12c      	bne.n	8006e20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d912      	bls.n	8006df6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b02      	subs	r3, #2
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006df4:	e012      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d148      	bne.n	8006ec0 <HAL_SPI_TransmitReceive+0x3aa>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d042      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d923      	bls.n	8006e8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e50:	b292      	uxth	r2, r2
 8006e52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e58:	1c9a      	adds	r2, r3, #2
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b02      	subs	r3, #2
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d81f      	bhi.n	8006ebc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e8a:	605a      	str	r2, [r3, #4]
 8006e8c:	e016      	b.n	8006ebc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f103 020c 	add.w	r2, r3, #12
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ec0:	f7fd fe08 	bl	8004ad4 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d803      	bhi.n	8006ed8 <HAL_SPI_TransmitReceive+0x3c2>
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d102      	bne.n	8006ede <HAL_SPI_TransmitReceive+0x3c8>
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e02c      	b.n	8006f4c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f47f af55 	bne.w	8006da8 <HAL_SPI_TransmitReceive+0x292>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f47f af4e 	bne.w	8006da8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f0c:	6a3a      	ldr	r2, [r7, #32]
 8006f0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f93d 	bl	8007190 <SPI_EndRxTxTransaction>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e00e      	b.n	8006f4c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
  }
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3728      	adds	r7, #40	@ 0x28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f64:	f7fd fdb6 	bl	8004ad4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	4413      	add	r3, r2
 8006f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f74:	f7fd fdae 	bl	8004ad4 <HAL_GetTick>
 8006f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f7a:	4b39      	ldr	r3, [pc, #228]	@ (8007060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	015b      	lsls	r3, r3, #5
 8006f80:	0d1b      	lsrs	r3, r3, #20
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	fb02 f303 	mul.w	r3, r2, r3
 8006f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f8a:	e054      	b.n	8007036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d050      	beq.n	8007036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f94:	f7fd fd9e 	bl	8004ad4 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d902      	bls.n	8006faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d13d      	bne.n	8007026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc2:	d111      	bne.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fcc:	d004      	beq.n	8006fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd6:	d107      	bne.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff0:	d10f      	bne.n	8007012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e017      	b.n	8007056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	3b01      	subs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4013      	ands	r3, r2
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	429a      	cmp	r2, r3
 8007044:	bf0c      	ite	eq
 8007046:	2301      	moveq	r3, #1
 8007048:	2300      	movne	r3, #0
 800704a:	b2db      	uxtb	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	79fb      	ldrb	r3, [r7, #7]
 8007050:	429a      	cmp	r2, r3
 8007052:	d19b      	bne.n	8006f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3720      	adds	r7, #32
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000038 	.word	0x20000038

08007064 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	@ 0x28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007076:	f7fd fd2d 	bl	8004ad4 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	4413      	add	r3, r2
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007086:	f7fd fd25 	bl	8004ad4 <HAL_GetTick>
 800708a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	330c      	adds	r3, #12
 8007092:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007094:	4b3d      	ldr	r3, [pc, #244]	@ (800718c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	00da      	lsls	r2, r3, #3
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	0d1b      	lsrs	r3, r3, #20
 80070a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80070ac:	e060      	b.n	8007170 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070b4:	d107      	bne.n	80070c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070cc:	d050      	beq.n	8007170 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070ce:	f7fd fd01 	bl	8004ad4 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070da:	429a      	cmp	r2, r3
 80070dc:	d902      	bls.n	80070e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d13d      	bne.n	8007160 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070fc:	d111      	bne.n	8007122 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007106:	d004      	beq.n	8007112 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007110:	d107      	bne.n	8007122 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007120:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800712a:	d10f      	bne.n	800714c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800714a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e010      	b.n	8007182 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	3b01      	subs	r3, #1
 800716e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4013      	ands	r3, r2
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	429a      	cmp	r2, r3
 800717e:	d196      	bne.n	80070ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3728      	adds	r7, #40	@ 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000038 	.word	0x20000038

08007190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff ff5b 	bl	8007064 <SPI_WaitFifoStateUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b8:	f043 0220 	orr.w	r2, r3, #32
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e027      	b.n	8007214 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2200      	movs	r2, #0
 80071cc:	2180      	movs	r1, #128	@ 0x80
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fec0 	bl	8006f54 <SPI_WaitFlagStateUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071de:	f043 0220 	orr.w	r2, r3, #32
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e014      	b.n	8007214 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff ff34 	bl	8007064 <SPI_WaitFifoStateUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007206:	f043 0220 	orr.w	r2, r3, #32
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e000      	b.n	8007214 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e042      	b.n	80072b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fc ff09 	bl	8004058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2224      	movs	r2, #36	@ 0x24
 800724a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0201 	bic.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 ff2e 	bl	80080c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc5f 	bl	8007b30 <UART_SetConfig>
 8007272:	4603      	mov	r3, r0
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e01b      	b.n	80072b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800728a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800729a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 ffad 	bl	800820c <UART_CheckIdleState>
 80072b2:	4603      	mov	r3, r0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	@ 0x28
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	4613      	mov	r3, r2
 80072ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d17b      	bne.n	80073ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <HAL_UART_Transmit+0x26>
 80072dc:	88fb      	ldrh	r3, [r7, #6]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e074      	b.n	80073d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2221      	movs	r2, #33	@ 0x21
 80072f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072f6:	f7fd fbed 	bl	8004ad4 <HAL_GetTick>
 80072fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	88fa      	ldrh	r2, [r7, #6]
 8007300:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	88fa      	ldrh	r2, [r7, #6]
 8007308:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007314:	d108      	bne.n	8007328 <HAL_UART_Transmit+0x6c>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d104      	bne.n	8007328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e003      	b.n	8007330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007330:	e030      	b.n	8007394 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2200      	movs	r2, #0
 800733a:	2180      	movs	r1, #128	@ 0x80
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f001 f80f 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e03d      	b.n	80073d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007368:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	3302      	adds	r3, #2
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	e007      	b.n	8007382 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1c8      	bne.n	8007332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2200      	movs	r2, #0
 80073a8:	2140      	movs	r1, #64	@ 0x40
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 ffd8 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d005      	beq.n	80073c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e006      	b.n	80073d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	@ 0x28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d137      	bne.n	8007460 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_UART_Receive_IT+0x24>
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e030      	b.n	8007462 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a18      	ldr	r2, [pc, #96]	@ (800746c <HAL_UART_Receive_IT+0x94>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d01f      	beq.n	8007450 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d018      	beq.n	8007450 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	613b      	str	r3, [r7, #16]
   return(result);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	623b      	str	r3, [r7, #32]
 800743e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	69f9      	ldr	r1, [r7, #28]
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	61bb      	str	r3, [r7, #24]
   return(result);
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e6      	bne.n	800741e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	461a      	mov	r2, r3
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 fff0 	bl	800843c <UART_Start_Receive_IT>
 800745c:	4603      	mov	r3, r0
 800745e:	e000      	b.n	8007462 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3728      	adds	r7, #40	@ 0x28
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	40008000 	.word	0x40008000

08007470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b0ba      	sub	sp, #232	@ 0xe8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800749a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800749e:	4013      	ands	r3, r2
 80074a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80074a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d11b      	bne.n	80074e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d015      	beq.n	80074e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d105      	bne.n	80074d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d009      	beq.n	80074e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8300 	beq.w	8007ada <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
      }
      return;
 80074e2:	e2fa      	b.n	8007ada <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 8123 	beq.w	8007734 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074f2:	4b8d      	ldr	r3, [pc, #564]	@ (8007728 <HAL_UART_IRQHandler+0x2b8>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80074fe:	4b8b      	ldr	r3, [pc, #556]	@ (800772c <HAL_UART_IRQHandler+0x2bc>)
 8007500:	4013      	ands	r3, r2
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8116 	beq.w	8007734 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d011      	beq.n	8007538 <HAL_UART_IRQHandler+0xc8>
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2201      	movs	r2, #1
 8007526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752e:	f043 0201 	orr.w	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d011      	beq.n	8007568 <HAL_UART_IRQHandler+0xf8>
 8007544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2202      	movs	r2, #2
 8007556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755e:	f043 0204 	orr.w	r2, r3, #4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d011      	beq.n	8007598 <HAL_UART_IRQHandler+0x128>
 8007574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2204      	movs	r2, #4
 8007586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758e:	f043 0202 	orr.w	r2, r3, #2
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d017      	beq.n	80075d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d105      	bne.n	80075bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80075b4:	4b5c      	ldr	r3, [pc, #368]	@ (8007728 <HAL_UART_IRQHandler+0x2b8>)
 80075b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2208      	movs	r2, #8
 80075c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ca:	f043 0208 	orr.w	r2, r3, #8
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d012      	beq.n	8007606 <HAL_UART_IRQHandler+0x196>
 80075e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00c      	beq.n	8007606 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8266 	beq.w	8007ade <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d013      	beq.n	8007646 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800761e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800762a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800762e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d007      	beq.n	8007646 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800764c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765a:	2b40      	cmp	r3, #64	@ 0x40
 800765c:	d005      	beq.n	800766a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800765e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007662:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007666:	2b00      	cmp	r3, #0
 8007668:	d054      	beq.n	8007714 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 f8ef 	bl	800884e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800767a:	2b40      	cmp	r3, #64	@ 0x40
 800767c:	d146      	bne.n	800770c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007694:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800769c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3308      	adds	r3, #8
 80076a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80076aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80076ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80076b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1d9      	bne.n	800767e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d017      	beq.n	8007704 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076da:	4a15      	ldr	r2, [pc, #84]	@ (8007730 <HAL_UART_IRQHandler+0x2c0>)
 80076dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fd fcbb 	bl	8005060 <HAL_DMA_Abort_IT>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d019      	beq.n	8007724 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80076fe:	4610      	mov	r0, r2
 8007700:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007702:	e00f      	b.n	8007724 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa09 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770a:	e00b      	b.n	8007724 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa05 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007712:	e007      	b.n	8007724 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa01 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007722:	e1dc      	b.n	8007ade <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007724:	bf00      	nop
    return;
 8007726:	e1da      	b.n	8007ade <HAL_UART_IRQHandler+0x66e>
 8007728:	10000001 	.word	0x10000001
 800772c:	04000120 	.word	0x04000120
 8007730:	08008b05 	.word	0x08008b05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007738:	2b01      	cmp	r3, #1
 800773a:	f040 8170 	bne.w	8007a1e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007742:	f003 0310 	and.w	r3, r3, #16
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 8169 	beq.w	8007a1e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800774c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8162 	beq.w	8007a1e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2210      	movs	r2, #16
 8007760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776c:	2b40      	cmp	r3, #64	@ 0x40
 800776e:	f040 80d8 	bne.w	8007922 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80af 	beq.w	80078e8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007790:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007794:	429a      	cmp	r2, r3
 8007796:	f080 80a7 	bcs.w	80078e8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f040 8087 	bne.w	80078c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1da      	bne.n	80077b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3308      	adds	r3, #8
 8007822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007826:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800782a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800782e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e1      	bne.n	8007802 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800784e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007868:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007894:	f023 0310 	bic.w	r3, r3, #16
 8007898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e4      	bne.n	8007884 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fd fb74 	bl	8004fae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	b29b      	uxth	r3, r3
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fc f831 	bl	8003948 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80078e6:	e0fc      	b.n	8007ae2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078f2:	429a      	cmp	r2, r3
 80078f4:	f040 80f5 	bne.w	8007ae2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b20      	cmp	r3, #32
 8007908:	f040 80eb 	bne.w	8007ae2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fc f814 	bl	8003948 <HAL_UARTEx_RxEventCallback>
      return;
 8007920:	e0df      	b.n	8007ae2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800792e:	b29b      	uxth	r3, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80d1 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80cc 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800795c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007962:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007970:	647b      	str	r3, [r7, #68]	@ 0x44
 8007972:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800797e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e4      	bne.n	800794e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	623b      	str	r3, [r7, #32]
   return(result);
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800799a:	f023 0301 	bic.w	r3, r3, #1
 800799e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80079ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e1      	bne.n	8007984 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f023 0310 	bic.w	r3, r3, #16
 80079e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	69b9      	ldr	r1, [r7, #24]
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	617b      	str	r3, [r7, #20]
   return(result);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e4      	bne.n	80079d4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fb ff96 	bl	8003948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a1c:	e063      	b.n	8007ae6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00e      	beq.n	8007a48 <HAL_UART_IRQHandler+0x5d8>
 8007a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fe26 	bl	8009692 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a46:	e051      	b.n	8007aec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d014      	beq.n	8007a7e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d008      	beq.n	8007a7e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d03a      	beq.n	8007aea <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
    }
    return;
 8007a7c:	e035      	b.n	8007aea <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d009      	beq.n	8007a9e <HAL_UART_IRQHandler+0x62e>
 8007a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f846 	bl	8008b28 <UART_EndTransmit_IT>
    return;
 8007a9c:	e026      	b.n	8007aec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d009      	beq.n	8007abe <HAL_UART_IRQHandler+0x64e>
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fdff 	bl	80096ba <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007abc:	e016      	b.n	8007aec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d010      	beq.n	8007aec <HAL_UART_IRQHandler+0x67c>
 8007aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da0c      	bge.n	8007aec <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fde7 	bl	80096a6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ad8:	e008      	b.n	8007aec <HAL_UART_IRQHandler+0x67c>
      return;
 8007ada:	bf00      	nop
 8007adc:	e006      	b.n	8007aec <HAL_UART_IRQHandler+0x67c>
    return;
 8007ade:	bf00      	nop
 8007ae0:	e004      	b.n	8007aec <HAL_UART_IRQHandler+0x67c>
      return;
 8007ae2:	bf00      	nop
 8007ae4:	e002      	b.n	8007aec <HAL_UART_IRQHandler+0x67c>
      return;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_UART_IRQHandler+0x67c>
    return;
 8007aea:	bf00      	nop
  }
}
 8007aec:	37e8      	adds	r7, #232	@ 0xe8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b34:	b08c      	sub	sp, #48	@ 0x30
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4bab      	ldr	r3, [pc, #684]	@ (8007e0c <UART_SetConfig+0x2dc>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4aa0      	ldr	r2, [pc, #640]	@ (8007e10 <UART_SetConfig+0x2e0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d004      	beq.n	8007b9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007ba6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	6812      	ldr	r2, [r2, #0]
 8007bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bba:	f023 010f 	bic.w	r1, r3, #15
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a91      	ldr	r2, [pc, #580]	@ (8007e14 <UART_SetConfig+0x2e4>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d125      	bne.n	8007c20 <UART_SetConfig+0xf0>
 8007bd4:	4b90      	ldr	r3, [pc, #576]	@ (8007e18 <UART_SetConfig+0x2e8>)
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d81a      	bhi.n	8007c18 <UART_SetConfig+0xe8>
 8007be2:	a201      	add	r2, pc, #4	@ (adr r2, 8007be8 <UART_SetConfig+0xb8>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c09 	.word	0x08007c09
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfe:	e0d6      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c00:	2302      	movs	r3, #2
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c06:	e0d2      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c08:	2304      	movs	r3, #4
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0e:	e0ce      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c10:	2308      	movs	r3, #8
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c16:	e0ca      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c18:	2310      	movs	r3, #16
 8007c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1e:	e0c6      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a7d      	ldr	r2, [pc, #500]	@ (8007e1c <UART_SetConfig+0x2ec>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d138      	bne.n	8007c9c <UART_SetConfig+0x16c>
 8007c2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e18 <UART_SetConfig+0x2e8>)
 8007c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c30:	f003 030c 	and.w	r3, r3, #12
 8007c34:	2b0c      	cmp	r3, #12
 8007c36:	d82d      	bhi.n	8007c94 <UART_SetConfig+0x164>
 8007c38:	a201      	add	r2, pc, #4	@ (adr r2, 8007c40 <UART_SetConfig+0x110>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007c75 	.word	0x08007c75
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007c95 	.word	0x08007c95
 8007c4c:	08007c95 	.word	0x08007c95
 8007c50:	08007c85 	.word	0x08007c85
 8007c54:	08007c95 	.word	0x08007c95
 8007c58:	08007c95 	.word	0x08007c95
 8007c5c:	08007c95 	.word	0x08007c95
 8007c60:	08007c7d 	.word	0x08007c7d
 8007c64:	08007c95 	.word	0x08007c95
 8007c68:	08007c95 	.word	0x08007c95
 8007c6c:	08007c95 	.word	0x08007c95
 8007c70:	08007c8d 	.word	0x08007c8d
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c7a:	e098      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c82:	e094      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c84:	2304      	movs	r3, #4
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c8a:	e090      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c92:	e08c      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c94:	2310      	movs	r3, #16
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9a:	e088      	b.n	8007dae <UART_SetConfig+0x27e>
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a5f      	ldr	r2, [pc, #380]	@ (8007e20 <UART_SetConfig+0x2f0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d125      	bne.n	8007cf2 <UART_SetConfig+0x1c2>
 8007ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8007e18 <UART_SetConfig+0x2e8>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cb0:	2b30      	cmp	r3, #48	@ 0x30
 8007cb2:	d016      	beq.n	8007ce2 <UART_SetConfig+0x1b2>
 8007cb4:	2b30      	cmp	r3, #48	@ 0x30
 8007cb6:	d818      	bhi.n	8007cea <UART_SetConfig+0x1ba>
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d00a      	beq.n	8007cd2 <UART_SetConfig+0x1a2>
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d814      	bhi.n	8007cea <UART_SetConfig+0x1ba>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <UART_SetConfig+0x19a>
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d008      	beq.n	8007cda <UART_SetConfig+0x1aa>
 8007cc8:	e00f      	b.n	8007cea <UART_SetConfig+0x1ba>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd0:	e06d      	b.n	8007dae <UART_SetConfig+0x27e>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd8:	e069      	b.n	8007dae <UART_SetConfig+0x27e>
 8007cda:	2304      	movs	r3, #4
 8007cdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce0:	e065      	b.n	8007dae <UART_SetConfig+0x27e>
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce8:	e061      	b.n	8007dae <UART_SetConfig+0x27e>
 8007cea:	2310      	movs	r3, #16
 8007cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cf0:	e05d      	b.n	8007dae <UART_SetConfig+0x27e>
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a4b      	ldr	r2, [pc, #300]	@ (8007e24 <UART_SetConfig+0x2f4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d125      	bne.n	8007d48 <UART_SetConfig+0x218>
 8007cfc:	4b46      	ldr	r3, [pc, #280]	@ (8007e18 <UART_SetConfig+0x2e8>)
 8007cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d08:	d016      	beq.n	8007d38 <UART_SetConfig+0x208>
 8007d0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d0c:	d818      	bhi.n	8007d40 <UART_SetConfig+0x210>
 8007d0e:	2b80      	cmp	r3, #128	@ 0x80
 8007d10:	d00a      	beq.n	8007d28 <UART_SetConfig+0x1f8>
 8007d12:	2b80      	cmp	r3, #128	@ 0x80
 8007d14:	d814      	bhi.n	8007d40 <UART_SetConfig+0x210>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <UART_SetConfig+0x1f0>
 8007d1a:	2b40      	cmp	r3, #64	@ 0x40
 8007d1c:	d008      	beq.n	8007d30 <UART_SetConfig+0x200>
 8007d1e:	e00f      	b.n	8007d40 <UART_SetConfig+0x210>
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d26:	e042      	b.n	8007dae <UART_SetConfig+0x27e>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2e:	e03e      	b.n	8007dae <UART_SetConfig+0x27e>
 8007d30:	2304      	movs	r3, #4
 8007d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d36:	e03a      	b.n	8007dae <UART_SetConfig+0x27e>
 8007d38:	2308      	movs	r3, #8
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3e:	e036      	b.n	8007dae <UART_SetConfig+0x27e>
 8007d40:	2310      	movs	r3, #16
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d46:	e032      	b.n	8007dae <UART_SetConfig+0x27e>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a30      	ldr	r2, [pc, #192]	@ (8007e10 <UART_SetConfig+0x2e0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d12a      	bne.n	8007da8 <UART_SetConfig+0x278>
 8007d52:	4b31      	ldr	r3, [pc, #196]	@ (8007e18 <UART_SetConfig+0x2e8>)
 8007d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d60:	d01a      	beq.n	8007d98 <UART_SetConfig+0x268>
 8007d62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d66:	d81b      	bhi.n	8007da0 <UART_SetConfig+0x270>
 8007d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d6c:	d00c      	beq.n	8007d88 <UART_SetConfig+0x258>
 8007d6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d72:	d815      	bhi.n	8007da0 <UART_SetConfig+0x270>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <UART_SetConfig+0x250>
 8007d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d7c:	d008      	beq.n	8007d90 <UART_SetConfig+0x260>
 8007d7e:	e00f      	b.n	8007da0 <UART_SetConfig+0x270>
 8007d80:	2300      	movs	r3, #0
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d86:	e012      	b.n	8007dae <UART_SetConfig+0x27e>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d8e:	e00e      	b.n	8007dae <UART_SetConfig+0x27e>
 8007d90:	2304      	movs	r3, #4
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d96:	e00a      	b.n	8007dae <UART_SetConfig+0x27e>
 8007d98:	2308      	movs	r3, #8
 8007d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d9e:	e006      	b.n	8007dae <UART_SetConfig+0x27e>
 8007da0:	2310      	movs	r3, #16
 8007da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da6:	e002      	b.n	8007dae <UART_SetConfig+0x27e>
 8007da8:	2310      	movs	r3, #16
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a17      	ldr	r2, [pc, #92]	@ (8007e10 <UART_SetConfig+0x2e0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	f040 80a8 	bne.w	8007f0a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d834      	bhi.n	8007e2c <UART_SetConfig+0x2fc>
 8007dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <UART_SetConfig+0x298>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007ded 	.word	0x08007ded
 8007dcc:	08007e2d 	.word	0x08007e2d
 8007dd0:	08007df5 	.word	0x08007df5
 8007dd4:	08007e2d 	.word	0x08007e2d
 8007dd8:	08007dfb 	.word	0x08007dfb
 8007ddc:	08007e2d 	.word	0x08007e2d
 8007de0:	08007e2d 	.word	0x08007e2d
 8007de4:	08007e2d 	.word	0x08007e2d
 8007de8:	08007e03 	.word	0x08007e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dec:	f7fe fa10 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8007df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007df2:	e021      	b.n	8007e38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007df4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e28 <UART_SetConfig+0x2f8>)
 8007df6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007df8:	e01e      	b.n	8007e38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dfa:	f7fe f99b 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 8007dfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e00:	e01a      	b.n	8007e38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e08:	e016      	b.n	8007e38 <UART_SetConfig+0x308>
 8007e0a:	bf00      	nop
 8007e0c:	cfff69f3 	.word	0xcfff69f3
 8007e10:	40008000 	.word	0x40008000
 8007e14:	40013800 	.word	0x40013800
 8007e18:	40021000 	.word	0x40021000
 8007e1c:	40004400 	.word	0x40004400
 8007e20:	40004800 	.word	0x40004800
 8007e24:	40004c00 	.word	0x40004c00
 8007e28:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 812a 	beq.w	8008094 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	4a9e      	ldr	r2, [pc, #632]	@ (80080c0 <UART_SetConfig+0x590>)
 8007e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e52:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	4413      	add	r3, r2
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d305      	bcc.n	8007e70 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d903      	bls.n	8007e78 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e76:	e10d      	b.n	8008094 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	60bb      	str	r3, [r7, #8]
 8007e7e:	60fa      	str	r2, [r7, #12]
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e84:	4a8e      	ldr	r2, [pc, #568]	@ (80080c0 <UART_SetConfig+0x590>)
 8007e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e9a:	f7f8 febd 	bl	8000c18 <__aeabi_uldivmod>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	020b      	lsls	r3, r1, #8
 8007eb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007eb4:	0202      	lsls	r2, r0, #8
 8007eb6:	6979      	ldr	r1, [r7, #20]
 8007eb8:	6849      	ldr	r1, [r1, #4]
 8007eba:	0849      	lsrs	r1, r1, #1
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	eb12 0804 	adds.w	r8, r2, r4
 8007ec6:	eb43 0905 	adc.w	r9, r3, r5
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	469a      	mov	sl, r3
 8007ed2:	4693      	mov	fp, r2
 8007ed4:	4652      	mov	r2, sl
 8007ed6:	465b      	mov	r3, fp
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4649      	mov	r1, r9
 8007edc:	f7f8 fe9c 	bl	8000c18 <__aeabi_uldivmod>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eee:	d308      	bcc.n	8007f02 <UART_SetConfig+0x3d2>
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ef6:	d204      	bcs.n	8007f02 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6a3a      	ldr	r2, [r7, #32]
 8007efe:	60da      	str	r2, [r3, #12]
 8007f00:	e0c8      	b.n	8008094 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f08:	e0c4      	b.n	8008094 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f12:	d167      	bne.n	8007fe4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007f14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d828      	bhi.n	8007f6e <UART_SetConfig+0x43e>
 8007f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f24 <UART_SetConfig+0x3f4>)
 8007f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f22:	bf00      	nop
 8007f24:	08007f49 	.word	0x08007f49
 8007f28:	08007f51 	.word	0x08007f51
 8007f2c:	08007f59 	.word	0x08007f59
 8007f30:	08007f6f 	.word	0x08007f6f
 8007f34:	08007f5f 	.word	0x08007f5f
 8007f38:	08007f6f 	.word	0x08007f6f
 8007f3c:	08007f6f 	.word	0x08007f6f
 8007f40:	08007f6f 	.word	0x08007f6f
 8007f44:	08007f67 	.word	0x08007f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f48:	f7fe f962 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8007f4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f4e:	e014      	b.n	8007f7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f50:	f7fe f974 	bl	800623c <HAL_RCC_GetPCLK2Freq>
 8007f54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f56:	e010      	b.n	8007f7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f58:	4b5a      	ldr	r3, [pc, #360]	@ (80080c4 <UART_SetConfig+0x594>)
 8007f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f5c:	e00d      	b.n	8007f7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f5e:	f7fe f8e9 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 8007f62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f64:	e009      	b.n	8007f7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f6c:	e005      	b.n	8007f7a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8089 	beq.w	8008094 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f86:	4a4e      	ldr	r2, [pc, #312]	@ (80080c0 <UART_SetConfig+0x590>)
 8007f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f94:	005a      	lsls	r2, r3, #1
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	441a      	add	r2, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	2b0f      	cmp	r3, #15
 8007fac:	d916      	bls.n	8007fdc <UART_SetConfig+0x4ac>
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb4:	d212      	bcs.n	8007fdc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f023 030f 	bic.w	r3, r3, #15
 8007fbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	8bfb      	ldrh	r3, [r7, #30]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	8bfa      	ldrh	r2, [r7, #30]
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	e05b      	b.n	8008094 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007fe2:	e057      	b.n	8008094 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d828      	bhi.n	800803e <UART_SetConfig+0x50e>
 8007fec:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff4 <UART_SetConfig+0x4c4>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008029 	.word	0x08008029
 8008000:	0800803f 	.word	0x0800803f
 8008004:	0800802f 	.word	0x0800802f
 8008008:	0800803f 	.word	0x0800803f
 800800c:	0800803f 	.word	0x0800803f
 8008010:	0800803f 	.word	0x0800803f
 8008014:	08008037 	.word	0x08008037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008018:	f7fe f8fa 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 800801c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800801e:	e014      	b.n	800804a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008020:	f7fe f90c 	bl	800623c <HAL_RCC_GetPCLK2Freq>
 8008024:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008026:	e010      	b.n	800804a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008028:	4b26      	ldr	r3, [pc, #152]	@ (80080c4 <UART_SetConfig+0x594>)
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800802c:	e00d      	b.n	800804a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800802e:	f7fe f881 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 8008032:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008034:	e009      	b.n	800804a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800803a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800803c:	e005      	b.n	800804a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008048:	bf00      	nop
    }

    if (pclk != 0U)
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d021      	beq.n	8008094 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008054:	4a1a      	ldr	r2, [pc, #104]	@ (80080c0 <UART_SetConfig+0x590>)
 8008056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800805a:	461a      	mov	r2, r3
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	441a      	add	r2, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d909      	bls.n	800808e <UART_SetConfig+0x55e>
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008080:	d205      	bcs.n	800808e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	b29a      	uxth	r2, r3
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60da      	str	r2, [r3, #12]
 800808c:	e002      	b.n	8008094 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2201      	movs	r2, #1
 8008098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2201      	movs	r2, #1
 80080a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2200      	movs	r2, #0
 80080a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2200      	movs	r2, #0
 80080ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3730      	adds	r7, #48	@ 0x30
 80080b8:	46bd      	mov	sp, r7
 80080ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080be:	bf00      	nop
 80080c0:	08010668 	.word	0x08010668
 80080c4:	00f42400 	.word	0x00f42400

080080c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01a      	beq.n	80081de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081c6:	d10a      	bne.n	80081de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	605a      	str	r2, [r3, #4]
  }
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b098      	sub	sp, #96	@ 0x60
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800821c:	f7fc fc5a 	bl	8004ad4 <HAL_GetTick>
 8008220:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b08      	cmp	r3, #8
 800822e:	d12f      	bne.n	8008290 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008230:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008238:	2200      	movs	r2, #0
 800823a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f88e 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d022      	beq.n	8008290 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800825e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008268:	647b      	str	r3, [r7, #68]	@ 0x44
 800826a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800826e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e6      	bne.n	800824a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e063      	b.n	8008358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b04      	cmp	r3, #4
 800829c:	d149      	bne.n	8008332 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800829e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082a6:	2200      	movs	r2, #0
 80082a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f857 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d03c      	beq.n	8008332 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	623b      	str	r3, [r7, #32]
   return(result);
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80082d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e6      	bne.n	80082b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3308      	adds	r3, #8
 8008308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800830a:	61fa      	str	r2, [r7, #28]
 800830c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	69b9      	ldr	r1, [r7, #24]
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	617b      	str	r3, [r7, #20]
   return(result);
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e5      	bne.n	80082ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e012      	b.n	8008358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3758      	adds	r7, #88	@ 0x58
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	4613      	mov	r3, r2
 800836e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008370:	e04f      	b.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d04b      	beq.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837a:	f7fc fbab 	bl	8004ad4 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	429a      	cmp	r2, r3
 8008388:	d302      	bcc.n	8008390 <UART_WaitOnFlagUntilTimeout+0x30>
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e04e      	b.n	8008432 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d037      	beq.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b80      	cmp	r3, #128	@ 0x80
 80083a6:	d034      	beq.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b40      	cmp	r3, #64	@ 0x40
 80083ac:	d031      	beq.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d110      	bne.n	80083de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2208      	movs	r2, #8
 80083c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fa42 	bl	800884e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2208      	movs	r2, #8
 80083ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e029      	b.n	8008432 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ec:	d111      	bne.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fa28 	bl	800884e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e00f      	b.n	8008432 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4013      	ands	r3, r2
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	bf0c      	ite	eq
 8008422:	2301      	moveq	r3, #1
 8008424:	2300      	movne	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	429a      	cmp	r2, r3
 800842e:	d0a0      	beq.n	8008372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800843c:	b480      	push	{r7}
 800843e:	b0a3      	sub	sp, #140	@ 0x8c
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	88fa      	ldrh	r2, [r7, #6]
 8008454:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800846e:	d10e      	bne.n	800848e <UART_Start_Receive_IT+0x52>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d105      	bne.n	8008484 <UART_Start_Receive_IT+0x48>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800847e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008482:	e02d      	b.n	80084e0 <UART_Start_Receive_IT+0xa4>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	22ff      	movs	r2, #255	@ 0xff
 8008488:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800848c:	e028      	b.n	80084e0 <UART_Start_Receive_IT+0xa4>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10d      	bne.n	80084b2 <UART_Start_Receive_IT+0x76>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d104      	bne.n	80084a8 <UART_Start_Receive_IT+0x6c>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	22ff      	movs	r2, #255	@ 0xff
 80084a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084a6:	e01b      	b.n	80084e0 <UART_Start_Receive_IT+0xa4>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	227f      	movs	r2, #127	@ 0x7f
 80084ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084b0:	e016      	b.n	80084e0 <UART_Start_Receive_IT+0xa4>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ba:	d10d      	bne.n	80084d8 <UART_Start_Receive_IT+0x9c>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d104      	bne.n	80084ce <UART_Start_Receive_IT+0x92>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	227f      	movs	r2, #127	@ 0x7f
 80084c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084cc:	e008      	b.n	80084e0 <UART_Start_Receive_IT+0xa4>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	223f      	movs	r2, #63	@ 0x3f
 80084d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084d6:	e003      	b.n	80084e0 <UART_Start_Receive_IT+0xa4>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2222      	movs	r2, #34	@ 0x22
 80084ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008514:	673a      	str	r2, [r7, #112]	@ 0x70
 8008516:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800851a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e3      	bne.n	80084f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800852c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008530:	d14f      	bne.n	80085d2 <UART_Start_Receive_IT+0x196>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008538:	88fa      	ldrh	r2, [r7, #6]
 800853a:	429a      	cmp	r2, r3
 800853c:	d349      	bcc.n	80085d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008546:	d107      	bne.n	8008558 <UART_Start_Receive_IT+0x11c>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d103      	bne.n	8008558 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a47      	ldr	r2, [pc, #284]	@ (8008670 <UART_Start_Receive_IT+0x234>)
 8008554:	675a      	str	r2, [r3, #116]	@ 0x74
 8008556:	e002      	b.n	800855e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4a46      	ldr	r2, [pc, #280]	@ (8008674 <UART_Start_Receive_IT+0x238>)
 800855c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d01a      	beq.n	800859c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800857a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800858a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800858e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e4      	bne.n	8008566 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3308      	adds	r3, #8
 80085ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80085bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80085be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80085ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e5      	bne.n	800859c <UART_Start_Receive_IT+0x160>
 80085d0:	e046      	b.n	8008660 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085da:	d107      	bne.n	80085ec <UART_Start_Receive_IT+0x1b0>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d103      	bne.n	80085ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4a24      	ldr	r2, [pc, #144]	@ (8008678 <UART_Start_Receive_IT+0x23c>)
 80085e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80085ea:	e002      	b.n	80085f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4a23      	ldr	r2, [pc, #140]	@ (800867c <UART_Start_Receive_IT+0x240>)
 80085f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d019      	beq.n	800862e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800860e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008618:	637b      	str	r3, [r7, #52]	@ 0x34
 800861a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800861e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e6      	bne.n	80085fa <UART_Start_Receive_IT+0x1be>
 800862c:	e018      	b.n	8008660 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	613b      	str	r3, [r7, #16]
   return(result);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f043 0320 	orr.w	r3, r3, #32
 8008642:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800864c:	623b      	str	r3, [r7, #32]
 800864e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	69f9      	ldr	r1, [r7, #28]
 8008652:	6a3a      	ldr	r2, [r7, #32]
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	61bb      	str	r3, [r7, #24]
   return(result);
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e6      	bne.n	800862e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	378c      	adds	r7, #140	@ 0x8c
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	08009255 	.word	0x08009255
 8008674:	08008ef1 	.word	0x08008ef1
 8008678:	08008d39 	.word	0x08008d39
 800867c:	08008b81 	.word	0x08008b81

08008680 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b096      	sub	sp, #88	@ 0x58
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	88fa      	ldrh	r2, [r7, #6]
 8008698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2222      	movs	r2, #34	@ 0x22
 80086a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d02d      	beq.n	8008712 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086bc:	4a40      	ldr	r2, [pc, #256]	@ (80087c0 <UART_Start_Receive_DMA+0x140>)
 80086be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c6:	4a3f      	ldr	r2, [pc, #252]	@ (80087c4 <UART_Start_Receive_DMA+0x144>)
 80086c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d0:	4a3d      	ldr	r2, [pc, #244]	@ (80087c8 <UART_Start_Receive_DMA+0x148>)
 80086d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086da:	2200      	movs	r2, #0
 80086dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3324      	adds	r3, #36	@ 0x24
 80086ea:	4619      	mov	r1, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f0:	461a      	mov	r2, r3
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	f7fc fbe0 	bl	8004eb8 <HAL_DMA_Start_IT>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2210      	movs	r2, #16
 8008702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e051      	b.n	80087b6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d018      	beq.n	800874c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800872e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800873a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800873e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008740:	e841 2300 	strex	r3, r2, [r1]
 8008744:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e6      	bne.n	800871a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3308      	adds	r3, #8
 8008752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	653b      	str	r3, [r7, #80]	@ 0x50
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3308      	adds	r3, #8
 800876a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800876c:	637a      	str	r2, [r7, #52]	@ 0x34
 800876e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008772:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800877a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e5      	bne.n	800874c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3308      	adds	r3, #8
 8008786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	613b      	str	r3, [r7, #16]
   return(result);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3308      	adds	r3, #8
 800879e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087a0:	623a      	str	r2, [r7, #32]
 80087a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a4:	69f9      	ldr	r1, [r7, #28]
 80087a6:	6a3a      	ldr	r2, [r7, #32]
 80087a8:	e841 2300 	strex	r3, r2, [r1]
 80087ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e5      	bne.n	8008780 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3758      	adds	r7, #88	@ 0x58
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	0800891b 	.word	0x0800891b
 80087c4:	08008a47 	.word	0x08008a47
 80087c8:	08008a85 	.word	0x08008a85

080087cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b08f      	sub	sp, #60	@ 0x3c
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e6      	bne.n	80087d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3308      	adds	r3, #8
 800880c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	60bb      	str	r3, [r7, #8]
   return(result);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800881c:	633b      	str	r3, [r7, #48]	@ 0x30
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3308      	adds	r3, #8
 8008824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008826:	61ba      	str	r2, [r7, #24]
 8008828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6979      	ldr	r1, [r7, #20]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	613b      	str	r3, [r7, #16]
   return(result);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e5      	bne.n	8008806 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008842:	bf00      	nop
 8008844:	373c      	adds	r7, #60	@ 0x3c
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800884e:	b480      	push	{r7}
 8008850:	b095      	sub	sp, #84	@ 0x54
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800886a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008874:	643b      	str	r3, [r7, #64]	@ 0x40
 8008876:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800887a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e6      	bne.n	8008856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3308      	adds	r3, #8
 800888e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	61fb      	str	r3, [r7, #28]
   return(result);
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800889e:	f023 0301 	bic.w	r3, r3, #1
 80088a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3308      	adds	r3, #8
 80088aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e3      	bne.n	8008888 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d118      	bne.n	80088fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f023 0310 	bic.w	r3, r3, #16
 80088dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088e6:	61bb      	str	r3, [r7, #24]
 80088e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	6979      	ldr	r1, [r7, #20]
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	613b      	str	r3, [r7, #16]
   return(result);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e6      	bne.n	80088c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800890e:	bf00      	nop
 8008910:	3754      	adds	r7, #84	@ 0x54
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b09c      	sub	sp, #112	@ 0x70
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0320 	and.w	r3, r3, #32
 8008932:	2b00      	cmp	r3, #0
 8008934:	d171      	bne.n	8008a1a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008938:	2200      	movs	r2, #0
 800893a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800893e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008946:	e853 3f00 	ldrex	r3, [r3]
 800894a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800894c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800894e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008952:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800895c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800895e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008964:	e841 2300 	strex	r3, r2, [r1]
 8008968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800896a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e6      	bne.n	800893e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3308      	adds	r3, #8
 8008976:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	667b      	str	r3, [r7, #100]	@ 0x64
 8008988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3308      	adds	r3, #8
 800898e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008990:	647a      	str	r2, [r7, #68]	@ 0x44
 8008992:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800899e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e5      	bne.n	8008970 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	623b      	str	r3, [r7, #32]
   return(result);
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80089bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80089c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80089c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e5      	bne.n	80089a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089da:	2220      	movs	r2, #32
 80089dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d118      	bne.n	8008a1a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f023 0310 	bic.w	r3, r3, #16
 80089fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	69b9      	ldr	r1, [r7, #24]
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	617b      	str	r3, [r7, #20]
   return(result);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e6      	bne.n	80089e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d107      	bne.n	8008a38 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008a32:	f7fa ff89 	bl	8003948 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a36:	e002      	b.n	8008a3e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008a38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008a3a:	f7fa ff3b 	bl	80038b4 <HAL_UART_RxCpltCallback>
}
 8008a3e:	bf00      	nop
 8008a40:	3770      	adds	r7, #112	@ 0x70
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d109      	bne.n	8008a76 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f7fa ff6a 	bl	8003948 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a74:	e002      	b.n	8008a7c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7ff f846 	bl	8007b08 <HAL_UART_RxHalfCpltCallback>
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a98:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aa0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aac:	2b80      	cmp	r3, #128	@ 0x80
 8008aae:	d109      	bne.n	8008ac4 <UART_DMAError+0x40>
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b21      	cmp	r3, #33	@ 0x21
 8008ab4:	d106      	bne.n	8008ac4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008abe:	6978      	ldr	r0, [r7, #20]
 8008ac0:	f7ff fe84 	bl	80087cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ace:	2b40      	cmp	r3, #64	@ 0x40
 8008ad0:	d109      	bne.n	8008ae6 <UART_DMAError+0x62>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b22      	cmp	r3, #34	@ 0x22
 8008ad6:	d106      	bne.n	8008ae6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008ae0:	6978      	ldr	r0, [r7, #20]
 8008ae2:	f7ff feb4 	bl	800884e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aec:	f043 0210 	orr.w	r2, r3, #16
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008af6:	6978      	ldr	r0, [r7, #20]
 8008af8:	f7ff f810 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008afc:	bf00      	nop
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7fe fffe 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b44:	61fb      	str	r3, [r7, #28]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	61bb      	str	r3, [r7, #24]
 8008b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6979      	ldr	r1, [r7, #20]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e6      	bne.n	8008b30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2220      	movs	r2, #32
 8008b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7fe ffbf 	bl	8007af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b76:	bf00      	nop
 8008b78:	3720      	adds	r7, #32
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b09c      	sub	sp, #112	@ 0x70
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b98:	2b22      	cmp	r3, #34	@ 0x22
 8008b9a:	f040 80be 	bne.w	8008d1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ba8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bac:	b2d9      	uxtb	r1, r3
 8008bae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb8:	400a      	ands	r2, r1
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f040 80a1 	bne.w	8008d2a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c0e:	e841 2300 	strex	r3, r2, [r1]
 8008c12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1e6      	bne.n	8008be8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3308      	adds	r3, #8
 8008c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2c:	f023 0301 	bic.w	r3, r3, #1
 8008c30:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3308      	adds	r3, #8
 8008c38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e5      	bne.n	8008c1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a33      	ldr	r2, [pc, #204]	@ (8008d34 <UART_RxISR_8BIT+0x1b4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d01f      	beq.n	8008cac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d018      	beq.n	8008cac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	623b      	str	r3, [r7, #32]
   return(result);
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e6      	bne.n	8008c7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d12e      	bne.n	8008d12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0310 	bic.w	r3, r3, #16
 8008cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	69b9      	ldr	r1, [r7, #24]
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e6      	bne.n	8008cba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	f003 0310 	and.w	r3, r3, #16
 8008cf6:	2b10      	cmp	r3, #16
 8008cf8:	d103      	bne.n	8008d02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2210      	movs	r2, #16
 8008d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fa fe1c 	bl	8003948 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d10:	e00b      	b.n	8008d2a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fa fdce 	bl	80038b4 <HAL_UART_RxCpltCallback>
}
 8008d18:	e007      	b.n	8008d2a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	699a      	ldr	r2, [r3, #24]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f042 0208 	orr.w	r2, r2, #8
 8008d28:	619a      	str	r2, [r3, #24]
}
 8008d2a:	bf00      	nop
 8008d2c:	3770      	adds	r7, #112	@ 0x70
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40008000 	.word	0x40008000

08008d38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b09c      	sub	sp, #112	@ 0x70
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d50:	2b22      	cmp	r3, #34	@ 0x22
 8008d52:	f040 80be 	bne.w	8008ed2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d64:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008d6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008d6e:	4013      	ands	r3, r2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d7a:	1c9a      	adds	r2, r3, #2
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f040 80a1 	bne.w	8008ee2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008db4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dc0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e6      	bne.n	8008da0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	f023 0301 	bic.w	r3, r3, #1
 8008de8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008df2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dfa:	e841 2300 	strex	r3, r2, [r1]
 8008dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e5      	bne.n	8008dd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a33      	ldr	r2, [pc, #204]	@ (8008eec <UART_RxISR_16BIT+0x1b4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d01f      	beq.n	8008e64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d018      	beq.n	8008e64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e52:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e6      	bne.n	8008e32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d12e      	bne.n	8008eca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f023 0310 	bic.w	r3, r3, #16
 8008e86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6979      	ldr	r1, [r7, #20]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e6      	bne.n	8008e72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f003 0310 	and.w	r3, r3, #16
 8008eae:	2b10      	cmp	r3, #16
 8008eb0:	d103      	bne.n	8008eba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2210      	movs	r2, #16
 8008eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fa fd40 	bl	8003948 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ec8:	e00b      	b.n	8008ee2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7fa fcf2 	bl	80038b4 <HAL_UART_RxCpltCallback>
}
 8008ed0:	e007      	b.n	8008ee2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699a      	ldr	r2, [r3, #24]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0208 	orr.w	r2, r2, #8
 8008ee0:	619a      	str	r2, [r3, #24]
}
 8008ee2:	bf00      	nop
 8008ee4:	3770      	adds	r7, #112	@ 0x70
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40008000 	.word	0x40008000

08008ef0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b0ac      	sub	sp, #176	@ 0xb0
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008efe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f26:	2b22      	cmp	r3, #34	@ 0x22
 8008f28:	f040 8183 	bne.w	8009232 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f32:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f36:	e126      	b.n	8009186 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f42:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008f46:	b2d9      	uxtb	r1, r3
 8008f48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f52:	400a      	ands	r2, r1
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d053      	beq.n	8009032 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d011      	beq.n	8008fba <UART_RxISR_8BIT_FIFOEN+0xca>
 8008f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb0:	f043 0201 	orr.w	r2, r3, #1
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d011      	beq.n	8008fea <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00b      	beq.n	8008fea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe0:	f043 0204 	orr.w	r2, r3, #4
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fee:	f003 0304 	and.w	r3, r3, #4
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d011      	beq.n	800901a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2204      	movs	r2, #4
 8009008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009010:	f043 0202 	orr.w	r2, r3, #2
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009020:	2b00      	cmp	r3, #0
 8009022:	d006      	beq.n	8009032 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fe fd79 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009038:	b29b      	uxth	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 80a3 	bne.w	8009186 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800904e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009062:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009064:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009068:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e4      	bne.n	8009040 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3308      	adds	r3, #8
 800907c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800908c:	f023 0301 	bic.w	r3, r3, #1
 8009090:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3308      	adds	r3, #8
 800909a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800909e:	66ba      	str	r2, [r7, #104]	@ 0x68
 80090a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80090a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80090a6:	e841 2300 	strex	r3, r2, [r1]
 80090aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80090ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e1      	bne.n	8009076 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2220      	movs	r2, #32
 80090b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a60      	ldr	r2, [pc, #384]	@ (800924c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d021      	beq.n	8009114 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01a      	beq.n	8009114 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80090ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009100:	657b      	str	r3, [r7, #84]	@ 0x54
 8009102:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009106:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800910e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e4      	bne.n	80090de <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009118:	2b01      	cmp	r3, #1
 800911a:	d130      	bne.n	800917e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912a:	e853 3f00 	ldrex	r3, [r3]
 800912e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	f023 0310 	bic.w	r3, r3, #16
 8009136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009144:	643b      	str	r3, [r7, #64]	@ 0x40
 8009146:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800914a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800914c:	e841 2300 	strex	r3, r2, [r1]
 8009150:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e4      	bne.n	8009122 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f003 0310 	and.w	r3, r3, #16
 8009162:	2b10      	cmp	r3, #16
 8009164:	d103      	bne.n	800916e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2210      	movs	r2, #16
 800916c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7fa fbe6 	bl	8003948 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800917c:	e00e      	b.n	800919c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fa fb98 	bl	80038b4 <HAL_UART_RxCpltCallback>
        break;
 8009184:	e00a      	b.n	800919c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009186:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800918a:	2b00      	cmp	r3, #0
 800918c:	d006      	beq.n	800919c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800918e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	f47f aece 	bne.w	8008f38 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d049      	beq.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x352>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091b4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d242      	bcs.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3308      	adds	r3, #8
 80091c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3308      	adds	r3, #8
 80091dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80091e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e3      	bne.n	80091bc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a16      	ldr	r2, [pc, #88]	@ (8009250 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80091f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	60bb      	str	r3, [r7, #8]
   return(result);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f043 0320 	orr.w	r3, r3, #32
 800920e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6979      	ldr	r1, [r7, #20]
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	613b      	str	r3, [r7, #16]
   return(result);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e4      	bne.n	80091fa <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009230:	e007      	b.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	699a      	ldr	r2, [r3, #24]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0208 	orr.w	r2, r2, #8
 8009240:	619a      	str	r2, [r3, #24]
}
 8009242:	bf00      	nop
 8009244:	37b0      	adds	r7, #176	@ 0xb0
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	40008000 	.word	0x40008000
 8009250:	08008b81 	.word	0x08008b81

08009254 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b0ae      	sub	sp, #184	@ 0xb8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009262:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800928a:	2b22      	cmp	r3, #34	@ 0x22
 800928c:	f040 8187 	bne.w	800959e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009296:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800929a:	e12a      	b.n	80094f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80092ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80092b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80092b6:	4013      	ands	r3, r2
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c4:	1c9a      	adds	r2, r3, #2
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	3b01      	subs	r3, #1
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092ea:	f003 0307 	and.w	r3, r3, #7
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d053      	beq.n	800939a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d011      	beq.n	8009322 <UART_RxISR_16BIT_FIFOEN+0xce>
 80092fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00b      	beq.n	8009322 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2201      	movs	r2, #1
 8009310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009318:	f043 0201 	orr.w	r2, r3, #1
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d011      	beq.n	8009352 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800932e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00b      	beq.n	8009352 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2202      	movs	r2, #2
 8009340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009348:	f043 0204 	orr.w	r2, r3, #4
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009356:	f003 0304 	and.w	r3, r3, #4
 800935a:	2b00      	cmp	r3, #0
 800935c:	d011      	beq.n	8009382 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800935e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2204      	movs	r2, #4
 8009370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009378:	f043 0202 	orr.w	r2, r3, #2
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009388:	2b00      	cmp	r3, #0
 800938a:	d006      	beq.n	800939a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7fe fbc5 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f040 80a5 	bne.w	80094f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80093b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e2      	bne.n	80093a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3308      	adds	r3, #8
 80093e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093f8:	f023 0301 	bic.w	r3, r3, #1
 80093fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3308      	adds	r3, #8
 8009406:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800940a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800940c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009410:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e1      	bne.n	80093e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a60      	ldr	r2, [pc, #384]	@ (80095b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d021      	beq.n	8009480 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d01a      	beq.n	8009480 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800945a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800945e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800946c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800946e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009472:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800947a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e4      	bne.n	800944a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009484:	2b01      	cmp	r3, #1
 8009486:	d130      	bne.n	80094ea <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800949c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800949e:	f023 0310 	bic.w	r3, r3, #16
 80094a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094b8:	e841 2300 	strex	r3, r2, [r1]
 80094bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1e4      	bne.n	800948e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	f003 0310 	and.w	r3, r3, #16
 80094ce:	2b10      	cmp	r3, #16
 80094d0:	d103      	bne.n	80094da <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2210      	movs	r2, #16
 80094d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7fa fa30 	bl	8003948 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80094e8:	e00e      	b.n	8009508 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fa f9e2 	bl	80038b4 <HAL_UART_RxCpltCallback>
        break;
 80094f0:	e00a      	b.n	8009508 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094f2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d006      	beq.n	8009508 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80094fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	f47f aeca 	bne.w	800929c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800950e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009512:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009516:	2b00      	cmp	r3, #0
 8009518:	d049      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x35a>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009520:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009524:	429a      	cmp	r2, r3
 8009526:	d242      	bcs.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	623b      	str	r3, [r7, #32]
   return(result);
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800953e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3308      	adds	r3, #8
 8009548:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800954c:	633a      	str	r2, [r7, #48]	@ 0x30
 800954e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800955a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e3      	bne.n	8009528 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a16      	ldr	r2, [pc, #88]	@ (80095bc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009564:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	60fb      	str	r3, [r7, #12]
   return(result);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f043 0320 	orr.w	r3, r3, #32
 800957a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009588:	61fb      	str	r3, [r7, #28]
 800958a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	69b9      	ldr	r1, [r7, #24]
 800958e:	69fa      	ldr	r2, [r7, #28]
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	617b      	str	r3, [r7, #20]
   return(result);
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e4      	bne.n	8009566 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800959c:	e007      	b.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	699a      	ldr	r2, [r3, #24]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f042 0208 	orr.w	r2, r2, #8
 80095ac:	619a      	str	r2, [r3, #24]
}
 80095ae:	bf00      	nop
 80095b0:	37b8      	adds	r7, #184	@ 0xb8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	40008000 	.word	0x40008000
 80095bc:	08008d39 	.word	0x08008d39

080095c0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e058      	b.n	800968a <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7fa fd34 	bl	8004058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2224      	movs	r2, #36	@ 0x24
 80095f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0201 	bic.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7fe fd59 	bl	80080c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7fe fa8a 	bl	8007b30 <UART_SetConfig>
 800961c:	4603      	mov	r3, r0
 800961e:	2b01      	cmp	r3, #1
 8009620:	d101      	bne.n	8009626 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e031      	b.n	800968a <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689a      	ldr	r2, [r3, #8]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009634:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	430a      	orrs	r2, r1
 8009648:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	055b      	lsls	r3, r3, #21
 800964e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	041b      	lsls	r3, r3, #16
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	4313      	orrs	r3, r2
 8009658:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8009664:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	6812      	ldr	r2, [r2, #0]
 800966c:	6979      	ldr	r1, [r7, #20]
 800966e:	430b      	orrs	r3, r1
 8009670:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f042 0201 	orr.w	r2, r2, #1
 8009680:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7fe fdc2 	bl	800820c <UART_CheckIdleState>
 8009688:	4603      	mov	r3, r0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b085      	sub	sp, #20
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d101      	bne.n	80096e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e027      	b.n	8009734 <HAL_UARTEx_DisableFifoMode+0x66>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2224      	movs	r2, #36	@ 0x24
 80096f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0201 	bic.w	r2, r2, #1
 800970a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009712:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2220      	movs	r2, #32
 8009726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009754:	2302      	movs	r3, #2
 8009756:	e02d      	b.n	80097b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2224      	movs	r2, #36	@ 0x24
 8009764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0201 	bic.w	r2, r2, #1
 800977e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f8a3 	bl	80098e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e02d      	b.n	8009830 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2224      	movs	r2, #36	@ 0x24
 80097e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f865 	bl	80098e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08c      	sub	sp, #48	@ 0x30
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800984c:	2b20      	cmp	r3, #32
 800984e:	d142      	bne.n	80098d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d002      	beq.n	800985c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009856:	88fb      	ldrh	r3, [r7, #6]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e03b      	b.n	80098d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800986c:	88fb      	ldrh	r3, [r7, #6]
 800986e:	461a      	mov	r2, r3
 8009870:	68b9      	ldr	r1, [r7, #8]
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7fe ff04 	bl	8008680 <UART_Start_Receive_DMA>
 8009878:	4603      	mov	r3, r0
 800987a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800987e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009882:	2b00      	cmp	r3, #0
 8009884:	d124      	bne.n	80098d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800988a:	2b01      	cmp	r3, #1
 800988c:	d11d      	bne.n	80098ca <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2210      	movs	r2, #16
 8009894:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	617b      	str	r3, [r7, #20]
   return(result);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f043 0310 	orr.w	r3, r3, #16
 80098aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80098b6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	6a39      	ldr	r1, [r7, #32]
 80098ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e6      	bne.n	8009896 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80098c8:	e002      	b.n	80098d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80098d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098d4:	e000      	b.n	80098d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80098d6:	2302      	movs	r3, #2
  }
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3730      	adds	r7, #48	@ 0x30
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d108      	bne.n	8009902 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009900:	e031      	b.n	8009966 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009902:	2308      	movs	r3, #8
 8009904:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009906:	2308      	movs	r3, #8
 8009908:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	0e5b      	lsrs	r3, r3, #25
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 0307 	and.w	r3, r3, #7
 8009918:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	0f5b      	lsrs	r3, r3, #29
 8009922:	b2db      	uxtb	r3, r3
 8009924:	f003 0307 	and.w	r3, r3, #7
 8009928:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	7b3a      	ldrb	r2, [r7, #12]
 800992e:	4911      	ldr	r1, [pc, #68]	@ (8009974 <UARTEx_SetNbDataToProcess+0x94>)
 8009930:	5c8a      	ldrb	r2, [r1, r2]
 8009932:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009936:	7b3a      	ldrb	r2, [r7, #12]
 8009938:	490f      	ldr	r1, [pc, #60]	@ (8009978 <UARTEx_SetNbDataToProcess+0x98>)
 800993a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800993c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009940:	b29a      	uxth	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	7b7a      	ldrb	r2, [r7, #13]
 800994c:	4909      	ldr	r1, [pc, #36]	@ (8009974 <UARTEx_SetNbDataToProcess+0x94>)
 800994e:	5c8a      	ldrb	r2, [r1, r2]
 8009950:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009954:	7b7a      	ldrb	r2, [r7, #13]
 8009956:	4908      	ldr	r1, [pc, #32]	@ (8009978 <UARTEx_SetNbDataToProcess+0x98>)
 8009958:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800995a:	fb93 f3f2 	sdiv	r3, r3, r2
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009966:	bf00      	nop
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	08010680 	.word	0x08010680
 8009978:	08010688 	.word	0x08010688

0800997c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8009980:	4907      	ldr	r1, [pc, #28]	@ (80099a0 <MX_FATFS_Init+0x24>)
 8009982:	4808      	ldr	r0, [pc, #32]	@ (80099a4 <MX_FATFS_Init+0x28>)
 8009984:	f003 fb16 	bl	800cfb4 <FATFS_LinkDriver>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800998e:	f04f 33ff 	mov.w	r3, #4294967295
 8009992:	e003      	b.n	800999c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009994:	4b04      	ldr	r3, [pc, #16]	@ (80099a8 <MX_FATFS_Init+0x2c>)
 8009996:	2201      	movs	r2, #1
 8009998:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800999a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800999c:	4618      	mov	r0, r3
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20006bc0 	.word	0x20006bc0
 80099a4:	20000048 	.word	0x20000048
 80099a8:	20002377 	.word	0x20002377

080099ac <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80099b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return sdDiskInitialize(pdrv);
 80099c6:	79fb      	ldrb	r3, [r7, #7]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7f9 f9b7 	bl	8002d3c <sdDiskInitialize>
 80099ce:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return sdDiskStatus(pdrv);
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7f9 fa8a 	bl	8002efe <sdDiskStatus>
 80099ea:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return sdDiskRead(pdrv, buff, sector, count);
 8009a04:	7bf8      	ldrb	r0, [r7, #15]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	f7f9 fa88 	bl	8002f20 <sdDiskRead>
 8009a10:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return sdDiskWrite(pdrv, buff, sector, count);
 8009a2a:	7bf8      	ldrb	r0, [r7, #15]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	f7f9 fadc 	bl	8002fee <sdDiskWrite>
 8009a36:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	603a      	str	r2, [r7, #0]
 8009a4a:	71fb      	strb	r3, [r7, #7]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return sdDiskIoctl(pdrv, cmd, buff);
 8009a50:	79b9      	ldrb	r1, [r7, #6]
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f9 fb4c 	bl	80030f4 <sdDiskIoctl>
 8009a5c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	4a08      	ldr	r2, [pc, #32]	@ (8009a98 <disk_status+0x30>)
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	79fa      	ldrb	r2, [r7, #7]
 8009a80:	4905      	ldr	r1, [pc, #20]	@ (8009a98 <disk_status+0x30>)
 8009a82:	440a      	add	r2, r1
 8009a84:	7a12      	ldrb	r2, [r2, #8]
 8009a86:	4610      	mov	r0, r2
 8009a88:	4798      	blx	r3
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200025a0 	.word	0x200025a0

08009a9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	4a0d      	ldr	r2, [pc, #52]	@ (8009ae4 <disk_initialize+0x48>)
 8009aae:	5cd3      	ldrb	r3, [r2, r3]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d111      	bne.n	8009ad8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8009ae4 <disk_initialize+0x48>)
 8009ab8:	2101      	movs	r1, #1
 8009aba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	4a09      	ldr	r2, [pc, #36]	@ (8009ae4 <disk_initialize+0x48>)
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	79fa      	ldrb	r2, [r7, #7]
 8009aca:	4906      	ldr	r1, [pc, #24]	@ (8009ae4 <disk_initialize+0x48>)
 8009acc:	440a      	add	r2, r1
 8009ace:	7a12      	ldrb	r2, [r2, #8]
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4798      	blx	r3
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200025a0 	.word	0x200025a0

08009ae8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60b9      	str	r1, [r7, #8]
 8009af0:	607a      	str	r2, [r7, #4]
 8009af2:	603b      	str	r3, [r7, #0]
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	4a0a      	ldr	r2, [pc, #40]	@ (8009b24 <disk_read+0x3c>)
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	689c      	ldr	r4, [r3, #8]
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	4a07      	ldr	r2, [pc, #28]	@ (8009b24 <disk_read+0x3c>)
 8009b08:	4413      	add	r3, r2
 8009b0a:	7a18      	ldrb	r0, [r3, #8]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	68b9      	ldr	r1, [r7, #8]
 8009b12:	47a0      	blx	r4
 8009b14:	4603      	mov	r3, r0
 8009b16:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd90      	pop	{r4, r7, pc}
 8009b22:	bf00      	nop
 8009b24:	200025a0 	.word	0x200025a0

08009b28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b28:	b590      	push	{r4, r7, lr}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8009b64 <disk_write+0x3c>)
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	68dc      	ldr	r4, [r3, #12]
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	4a07      	ldr	r2, [pc, #28]	@ (8009b64 <disk_write+0x3c>)
 8009b48:	4413      	add	r3, r2
 8009b4a:	7a18      	ldrb	r0, [r3, #8]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	47a0      	blx	r4
 8009b54:	4603      	mov	r3, r0
 8009b56:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd90      	pop	{r4, r7, pc}
 8009b62:	bf00      	nop
 8009b64:	200025a0 	.word	0x200025a0

08009b68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	603a      	str	r2, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
 8009b74:	460b      	mov	r3, r1
 8009b76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b78:	79fb      	ldrb	r3, [r7, #7]
 8009b7a:	4a09      	ldr	r2, [pc, #36]	@ (8009ba0 <disk_ioctl+0x38>)
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	79fa      	ldrb	r2, [r7, #7]
 8009b86:	4906      	ldr	r1, [pc, #24]	@ (8009ba0 <disk_ioctl+0x38>)
 8009b88:	440a      	add	r2, r1
 8009b8a:	7a10      	ldrb	r0, [r2, #8]
 8009b8c:	79b9      	ldrb	r1, [r7, #6]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	4798      	blx	r3
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]
  return res;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200025a0 	.word	0x200025a0

08009ba4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009bb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009bb8:	021b      	lsls	r3, r3, #8
 8009bba:	b21a      	sxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	b21b      	sxth	r3, r3
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	b21b      	sxth	r3, r3
 8009bc6:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009bc8:	89fb      	ldrh	r3, [r7, #14]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b085      	sub	sp, #20
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3303      	adds	r3, #3
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	021b      	lsls	r3, r3, #8
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	3202      	adds	r2, #2
 8009bee:	7812      	ldrb	r2, [r2, #0]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	3201      	adds	r2, #1
 8009bfc:	7812      	ldrb	r2, [r2, #0]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	021b      	lsls	r3, r3, #8
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	7812      	ldrb	r2, [r2, #0]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60fb      	str	r3, [r7, #12]
	return rv;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	887a      	ldrh	r2, [r7, #2]
 8009c30:	b2d2      	uxtb	r2, r2
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	887b      	ldrh	r3, [r7, #2]
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	887a      	ldrh	r2, [r7, #2]
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	607a      	str	r2, [r7, #4]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	0a1b      	lsrs	r3, r3, #8
 8009c6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	0a1b      	lsrs	r3, r3, #8
 8009c7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	607a      	str	r2, [r7, #4]
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	b2d2      	uxtb	r2, r2
 8009c8a:	701a      	strb	r2, [r3, #0]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	0a1b      	lsrs	r3, r3, #8
 8009c90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009caa:	b480      	push	{r7}
 8009cac:	b087      	sub	sp, #28
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00d      	beq.n	8009ce0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	1c53      	adds	r3, r2, #1
 8009cc8:	613b      	str	r3, [r7, #16]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	1c59      	adds	r1, r3, #1
 8009cce:	6179      	str	r1, [r7, #20]
 8009cd0:	7812      	ldrb	r2, [r2, #0]
 8009cd2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	607b      	str	r3, [r7, #4]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1f1      	bne.n	8009cc4 <mem_cpy+0x1a>
	}
}
 8009ce0:	bf00      	nop
 8009ce2:	371c      	adds	r7, #28
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	617a      	str	r2, [r7, #20]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	b2d2      	uxtb	r2, r2
 8009d06:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	607b      	str	r3, [r7, #4]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1f3      	bne.n	8009cfc <mem_set+0x10>
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	371c      	adds	r7, #28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009d22:	b480      	push	{r7}
 8009d24:	b089      	sub	sp, #36	@ 0x24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	61fb      	str	r3, [r7, #28]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	61fa      	str	r2, [r7, #28]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	4619      	mov	r1, r3
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	61ba      	str	r2, [r7, #24]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	1acb      	subs	r3, r1, r3
 8009d4e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	607b      	str	r3, [r7, #4]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <mem_cmp+0x40>
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0eb      	beq.n	8009d3a <mem_cmp+0x18>

	return r;
 8009d62:	697b      	ldr	r3, [r7, #20]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3724      	adds	r7, #36	@ 0x24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009d7a:	e002      	b.n	8009d82 <chk_chr+0x12>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	607b      	str	r3, [r7, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d005      	beq.n	8009d96 <chk_chr+0x26>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d1f2      	bne.n	8009d7c <chk_chr+0xc>
	return *str;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	781b      	ldrb	r3, [r3, #0]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
	...

08009da8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009db2:	2300      	movs	r3, #0
 8009db4:	60bb      	str	r3, [r7, #8]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	60fb      	str	r3, [r7, #12]
 8009dba:	e029      	b.n	8009e10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009dbc:	4a27      	ldr	r2, [pc, #156]	@ (8009e5c <chk_lock+0xb4>)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	011b      	lsls	r3, r3, #4
 8009dc2:	4413      	add	r3, r2
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d01d      	beq.n	8009e06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009dca:	4a24      	ldr	r2, [pc, #144]	@ (8009e5c <chk_lock+0xb4>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	4413      	add	r3, r2
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d116      	bne.n	8009e0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8009e5c <chk_lock+0xb4>)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	011b      	lsls	r3, r3, #4
 8009de2:	4413      	add	r3, r2
 8009de4:	3304      	adds	r3, #4
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d10c      	bne.n	8009e0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009df0:	4a1a      	ldr	r2, [pc, #104]	@ (8009e5c <chk_lock+0xb4>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	4413      	add	r3, r2
 8009df8:	3308      	adds	r3, #8
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d102      	bne.n	8009e0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e04:	e007      	b.n	8009e16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009e06:	2301      	movs	r3, #1
 8009e08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d9d2      	bls.n	8009dbc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d109      	bne.n	8009e30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d102      	bne.n	8009e28 <chk_lock+0x80>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d101      	bne.n	8009e2c <chk_lock+0x84>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	e010      	b.n	8009e4e <chk_lock+0xa6>
 8009e2c:	2312      	movs	r3, #18
 8009e2e:	e00e      	b.n	8009e4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d108      	bne.n	8009e48 <chk_lock+0xa0>
 8009e36:	4a09      	ldr	r2, [pc, #36]	@ (8009e5c <chk_lock+0xb4>)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	011b      	lsls	r3, r3, #4
 8009e3c:	4413      	add	r3, r2
 8009e3e:	330c      	adds	r3, #12
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e46:	d101      	bne.n	8009e4c <chk_lock+0xa4>
 8009e48:	2310      	movs	r3, #16
 8009e4a:	e000      	b.n	8009e4e <chk_lock+0xa6>
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	20002380 	.word	0x20002380

08009e60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e66:	2300      	movs	r3, #0
 8009e68:	607b      	str	r3, [r7, #4]
 8009e6a:	e002      	b.n	8009e72 <enq_lock+0x12>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	607b      	str	r3, [r7, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d806      	bhi.n	8009e86 <enq_lock+0x26>
 8009e78:	4a09      	ldr	r2, [pc, #36]	@ (8009ea0 <enq_lock+0x40>)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	4413      	add	r3, r2
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1f2      	bne.n	8009e6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	bf14      	ite	ne
 8009e8c:	2301      	movne	r3, #1
 8009e8e:	2300      	moveq	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20002380 	.word	0x20002380

08009ea4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	e01f      	b.n	8009ef4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009eb4:	4a41      	ldr	r2, [pc, #260]	@ (8009fbc <inc_lock+0x118>)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	4413      	add	r3, r2
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d113      	bne.n	8009eee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8009fbc <inc_lock+0x118>)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	011b      	lsls	r3, r3, #4
 8009ecc:	4413      	add	r3, r2
 8009ece:	3304      	adds	r3, #4
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d109      	bne.n	8009eee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009eda:	4a38      	ldr	r2, [pc, #224]	@ (8009fbc <inc_lock+0x118>)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	4413      	add	r3, r2
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d006      	beq.n	8009efc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d9dc      	bls.n	8009eb4 <inc_lock+0x10>
 8009efa:	e000      	b.n	8009efe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009efc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d132      	bne.n	8009f6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	e002      	b.n	8009f10 <inc_lock+0x6c>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d806      	bhi.n	8009f24 <inc_lock+0x80>
 8009f16:	4a29      	ldr	r2, [pc, #164]	@ (8009fbc <inc_lock+0x118>)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	4413      	add	r3, r2
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1f2      	bne.n	8009f0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d101      	bne.n	8009f2e <inc_lock+0x8a>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e040      	b.n	8009fb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	4922      	ldr	r1, [pc, #136]	@ (8009fbc <inc_lock+0x118>)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	440b      	add	r3, r1
 8009f3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	491e      	ldr	r1, [pc, #120]	@ (8009fbc <inc_lock+0x118>)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	440b      	add	r3, r1
 8009f48:	3304      	adds	r3, #4
 8009f4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	695a      	ldr	r2, [r3, #20]
 8009f50:	491a      	ldr	r1, [pc, #104]	@ (8009fbc <inc_lock+0x118>)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	440b      	add	r3, r1
 8009f58:	3308      	adds	r3, #8
 8009f5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009f5c:	4a17      	ldr	r2, [pc, #92]	@ (8009fbc <inc_lock+0x118>)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	4413      	add	r3, r2
 8009f64:	330c      	adds	r3, #12
 8009f66:	2200      	movs	r2, #0
 8009f68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <inc_lock+0xe0>
 8009f70:	4a12      	ldr	r2, [pc, #72]	@ (8009fbc <inc_lock+0x118>)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	011b      	lsls	r3, r3, #4
 8009f76:	4413      	add	r3, r2
 8009f78:	330c      	adds	r3, #12
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <inc_lock+0xe0>
 8009f80:	2300      	movs	r3, #0
 8009f82:	e015      	b.n	8009fb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d108      	bne.n	8009f9c <inc_lock+0xf8>
 8009f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009fbc <inc_lock+0x118>)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	4413      	add	r3, r2
 8009f92:	330c      	adds	r3, #12
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	3301      	adds	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	e001      	b.n	8009fa0 <inc_lock+0xfc>
 8009f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009fa0:	4906      	ldr	r1, [pc, #24]	@ (8009fbc <inc_lock+0x118>)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	011b      	lsls	r3, r3, #4
 8009fa6:	440b      	add	r3, r1
 8009fa8:	330c      	adds	r3, #12
 8009faa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3301      	adds	r3, #1
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	20002380 	.word	0x20002380

08009fc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	607b      	str	r3, [r7, #4]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d825      	bhi.n	800a020 <dec_lock+0x60>
		n = Files[i].ctr;
 8009fd4:	4a17      	ldr	r2, [pc, #92]	@ (800a034 <dec_lock+0x74>)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	011b      	lsls	r3, r3, #4
 8009fda:	4413      	add	r3, r2
 8009fdc:	330c      	adds	r3, #12
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009fe2:	89fb      	ldrh	r3, [r7, #14]
 8009fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fe8:	d101      	bne.n	8009fee <dec_lock+0x2e>
 8009fea:	2300      	movs	r3, #0
 8009fec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009fee:	89fb      	ldrh	r3, [r7, #14]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <dec_lock+0x3a>
 8009ff4:	89fb      	ldrh	r3, [r7, #14]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009ffa:	4a0e      	ldr	r2, [pc, #56]	@ (800a034 <dec_lock+0x74>)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	4413      	add	r3, r2
 800a002:	330c      	adds	r3, #12
 800a004:	89fa      	ldrh	r2, [r7, #14]
 800a006:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a008:	89fb      	ldrh	r3, [r7, #14]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d105      	bne.n	800a01a <dec_lock+0x5a>
 800a00e:	4a09      	ldr	r2, [pc, #36]	@ (800a034 <dec_lock+0x74>)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	4413      	add	r3, r2
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	737b      	strb	r3, [r7, #13]
 800a01e:	e001      	b.n	800a024 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a020:	2302      	movs	r3, #2
 800a022:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a024:	7b7b      	ldrb	r3, [r7, #13]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	20002380 	.word	0x20002380

0800a038 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a040:	2300      	movs	r3, #0
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e010      	b.n	800a068 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a046:	4a0d      	ldr	r2, [pc, #52]	@ (800a07c <clear_lock+0x44>)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	4413      	add	r3, r2
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	429a      	cmp	r2, r3
 800a054:	d105      	bne.n	800a062 <clear_lock+0x2a>
 800a056:	4a09      	ldr	r2, [pc, #36]	@ (800a07c <clear_lock+0x44>)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	4413      	add	r3, r2
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d9eb      	bls.n	800a046 <clear_lock+0xe>
	}
}
 800a06e:	bf00      	nop
 800a070:	bf00      	nop
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20002380 	.word	0x20002380

0800a080 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	78db      	ldrb	r3, [r3, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d034      	beq.n	800a0fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a098:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	7858      	ldrb	r0, [r3, #1]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	f7ff fd3e 	bl	8009b28 <disk_write>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	73fb      	strb	r3, [r7, #15]
 800a0b6:	e022      	b.n	800a0fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	1ad2      	subs	r2, r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d217      	bcs.n	800a0fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	789b      	ldrb	r3, [r3, #2]
 800a0d2:	613b      	str	r3, [r7, #16]
 800a0d4:	e010      	b.n	800a0f8 <sync_window+0x78>
					wsect += fs->fsize;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4413      	add	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	7858      	ldrb	r0, [r3, #1]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	f7ff fd1b 	bl	8009b28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	613b      	str	r3, [r7, #16]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d8eb      	bhi.n	800a0d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d01b      	beq.n	800a158 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff ffad 	bl	800a080 <sync_window>
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d113      	bne.n	800a158 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	7858      	ldrb	r0, [r3, #1]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a13a:	2301      	movs	r3, #1
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	f7ff fcd3 	bl	8009ae8 <disk_read>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d004      	beq.n	800a152 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a148:	f04f 33ff 	mov.w	r3, #4294967295
 800a14c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a14e:	2301      	movs	r3, #1
 800a150:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
	...

0800a164 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff ff87 	bl	800a080 <sync_window>
 800a172:	4603      	mov	r3, r0
 800a174:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d159      	bne.n	800a230 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b03      	cmp	r3, #3
 800a182:	d149      	bne.n	800a218 <sync_fs+0xb4>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	791b      	ldrb	r3, [r3, #4]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d145      	bne.n	800a218 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	899b      	ldrh	r3, [r3, #12]
 800a196:	461a      	mov	r2, r3
 800a198:	2100      	movs	r1, #0
 800a19a:	f7ff fda7 	bl	8009cec <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3338      	adds	r3, #56	@ 0x38
 800a1a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a1a6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff fd36 	bl	8009c1c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3338      	adds	r3, #56	@ 0x38
 800a1b4:	4921      	ldr	r1, [pc, #132]	@ (800a23c <sync_fs+0xd8>)
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff fd4b 	bl	8009c52 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3338      	adds	r3, #56	@ 0x38
 800a1c0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a1c4:	491e      	ldr	r1, [pc, #120]	@ (800a240 <sync_fs+0xdc>)
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fd43 	bl	8009c52 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3338      	adds	r3, #56	@ 0x38
 800a1d0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	f7ff fd39 	bl	8009c52 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	3338      	adds	r3, #56	@ 0x38
 800a1e4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	f7ff fd2f 	bl	8009c52 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	7858      	ldrb	r0, [r3, #1]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a20c:	2301      	movs	r3, #1
 800a20e:	f7ff fc8b 	bl	8009b28 <disk_write>
			fs->fsi_flag = 0;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	2200      	movs	r2, #0
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fca1 	bl	8009b68 <disk_ioctl>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <sync_fs+0xcc>
 800a22c:	2301      	movs	r3, #1
 800a22e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a230:	7bfb      	ldrb	r3, [r7, #15]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	41615252 	.word	0x41615252
 800a240:	61417272 	.word	0x61417272

0800a244 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	3b02      	subs	r3, #2
 800a252:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	3b02      	subs	r3, #2
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d301      	bcc.n	800a264 <clust2sect+0x20>
 800a260:	2300      	movs	r3, #0
 800a262:	e008      	b.n	800a276 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	895b      	ldrh	r3, [r3, #10]
 800a268:	461a      	mov	r2, r3
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	fb03 f202 	mul.w	r2, r3, r2
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a274:	4413      	add	r3, r2
}
 800a276:	4618      	mov	r0, r3
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b086      	sub	sp, #24
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d904      	bls.n	800a2a2 <get_fat+0x20>
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d302      	bcc.n	800a2a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	617b      	str	r3, [r7, #20]
 800a2a6:	e0ba      	b.n	800a41e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	f000 8082 	beq.w	800a3bc <get_fat+0x13a>
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	f300 80a6 	bgt.w	800a40a <get_fat+0x188>
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d002      	beq.n	800a2c8 <get_fat+0x46>
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d055      	beq.n	800a372 <get_fat+0xf0>
 800a2c6:	e0a0      	b.n	800a40a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	085b      	lsrs	r3, r3, #1
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	899b      	ldrh	r3, [r3, #12]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2e6:	4413      	add	r3, r2
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6938      	ldr	r0, [r7, #16]
 800a2ec:	f7ff ff0c 	bl	800a108 <move_window>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f040 808c 	bne.w	800a410 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	60fa      	str	r2, [r7, #12]
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	8992      	ldrh	r2, [r2, #12]
 800a302:	fbb3 f1f2 	udiv	r1, r3, r2
 800a306:	fb01 f202 	mul.w	r2, r1, r2
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	4413      	add	r3, r2
 800a310:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a314:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	899b      	ldrh	r3, [r3, #12]
 800a31e:	4619      	mov	r1, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	fbb3 f3f1 	udiv	r3, r3, r1
 800a326:	4413      	add	r3, r2
 800a328:	4619      	mov	r1, r3
 800a32a:	6938      	ldr	r0, [r7, #16]
 800a32c:	f7ff feec 	bl	800a108 <move_window>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d16e      	bne.n	800a414 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	899b      	ldrh	r3, [r3, #12]
 800a33a:	461a      	mov	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a342:	fb01 f202 	mul.w	r2, r1, r2
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	4413      	add	r3, r2
 800a34c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a350:	021b      	lsls	r3, r3, #8
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	4313      	orrs	r3, r2
 800a356:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <get_fat+0xe6>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	091b      	lsrs	r3, r3, #4
 800a366:	e002      	b.n	800a36e <get_fat+0xec>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a36e:	617b      	str	r3, [r7, #20]
			break;
 800a370:	e055      	b.n	800a41e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	899b      	ldrh	r3, [r3, #12]
 800a37a:	085b      	lsrs	r3, r3, #1
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4619      	mov	r1, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	fbb3 f3f1 	udiv	r3, r3, r1
 800a386:	4413      	add	r3, r2
 800a388:	4619      	mov	r1, r3
 800a38a:	6938      	ldr	r0, [r7, #16]
 800a38c:	f7ff febc 	bl	800a108 <move_window>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d140      	bne.n	800a418 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	8992      	ldrh	r2, [r2, #12]
 800a3a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3a8:	fb00 f202 	mul.w	r2, r0, r2
 800a3ac:	1a9b      	subs	r3, r3, r2
 800a3ae:	440b      	add	r3, r1
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff fbf7 	bl	8009ba4 <ld_word>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	617b      	str	r3, [r7, #20]
			break;
 800a3ba:	e030      	b.n	800a41e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	899b      	ldrh	r3, [r3, #12]
 800a3c4:	089b      	lsrs	r3, r3, #2
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3d0:	4413      	add	r3, r2
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6938      	ldr	r0, [r7, #16]
 800a3d6:	f7ff fe97 	bl	800a108 <move_window>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11d      	bne.n	800a41c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	8992      	ldrh	r2, [r2, #12]
 800a3ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3f2:	fb00 f202 	mul.w	r2, r0, r2
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	440b      	add	r3, r1
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fbeb 	bl	8009bd6 <ld_dword>
 800a400:	4603      	mov	r3, r0
 800a402:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a406:	617b      	str	r3, [r7, #20]
			break;
 800a408:	e009      	b.n	800a41e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a40a:	2301      	movs	r3, #1
 800a40c:	617b      	str	r3, [r7, #20]
 800a40e:	e006      	b.n	800a41e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a410:	bf00      	nop
 800a412:	e004      	b.n	800a41e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a414:	bf00      	nop
 800a416:	e002      	b.n	800a41e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a418:	bf00      	nop
 800a41a:	e000      	b.n	800a41e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a41c:	bf00      	nop
		}
	}

	return val;
 800a41e:	697b      	ldr	r3, [r7, #20]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3718      	adds	r7, #24
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b089      	sub	sp, #36	@ 0x24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a434:	2302      	movs	r3, #2
 800a436:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	f240 8109 	bls.w	800a652 <put_fat+0x22a>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	429a      	cmp	r2, r3
 800a448:	f080 8103 	bcs.w	800a652 <put_fat+0x22a>
		switch (fs->fs_type) {
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b03      	cmp	r3, #3
 800a452:	f000 80b6 	beq.w	800a5c2 <put_fat+0x19a>
 800a456:	2b03      	cmp	r3, #3
 800a458:	f300 80fb 	bgt.w	800a652 <put_fat+0x22a>
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d003      	beq.n	800a468 <put_fat+0x40>
 800a460:	2b02      	cmp	r3, #2
 800a462:	f000 8083 	beq.w	800a56c <put_fat+0x144>
 800a466:	e0f4      	b.n	800a652 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	61bb      	str	r3, [r7, #24]
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	085b      	lsrs	r3, r3, #1
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	4413      	add	r3, r2
 800a474:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	899b      	ldrh	r3, [r3, #12]
 800a47e:	4619      	mov	r1, r3
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	fbb3 f3f1 	udiv	r3, r3, r1
 800a486:	4413      	add	r3, r2
 800a488:	4619      	mov	r1, r3
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff fe3c 	bl	800a108 <move_window>
 800a490:	4603      	mov	r3, r0
 800a492:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a494:	7ffb      	ldrb	r3, [r7, #31]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f040 80d4 	bne.w	800a644 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	61ba      	str	r2, [r7, #24]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	8992      	ldrh	r2, [r2, #12]
 800a4ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4b0:	fb00 f202 	mul.w	r2, r0, r2
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	440b      	add	r3, r1
 800a4b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00d      	beq.n	800a4e0 <put_fat+0xb8>
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b25b      	sxtb	r3, r3
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	b25a      	sxtb	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	b25b      	sxtb	r3, r3
 800a4d4:	011b      	lsls	r3, r3, #4
 800a4d6:	b25b      	sxtb	r3, r3
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	e001      	b.n	800a4e4 <put_fat+0xbc>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	899b      	ldrh	r3, [r3, #12]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4fe:	4413      	add	r3, r2
 800a500:	4619      	mov	r1, r3
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f7ff fe00 	bl	800a108 <move_window>
 800a508:	4603      	mov	r3, r0
 800a50a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a50c:	7ffb      	ldrb	r3, [r7, #31]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 809a 	bne.w	800a648 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	899b      	ldrh	r3, [r3, #12]
 800a51e:	461a      	mov	r2, r3
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	fbb3 f0f2 	udiv	r0, r3, r2
 800a526:	fb00 f202 	mul.w	r2, r0, r2
 800a52a:	1a9b      	subs	r3, r3, r2
 800a52c:	440b      	add	r3, r1
 800a52e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <put_fat+0x11a>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	091b      	lsrs	r3, r3, #4
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	e00e      	b.n	800a560 <put_fat+0x138>
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	b25b      	sxtb	r3, r3
 800a548:	f023 030f 	bic.w	r3, r3, #15
 800a54c:	b25a      	sxtb	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	0a1b      	lsrs	r3, r3, #8
 800a552:	b25b      	sxtb	r3, r3
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	4313      	orrs	r3, r2
 800a55c:	b25b      	sxtb	r3, r3
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	70da      	strb	r2, [r3, #3]
			break;
 800a56a:	e072      	b.n	800a652 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	899b      	ldrh	r3, [r3, #12]
 800a574:	085b      	lsrs	r3, r3, #1
 800a576:	b29b      	uxth	r3, r3
 800a578:	4619      	mov	r1, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a580:	4413      	add	r3, r2
 800a582:	4619      	mov	r1, r3
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f7ff fdbf 	bl	800a108 <move_window>
 800a58a:	4603      	mov	r3, r0
 800a58c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d15b      	bne.n	800a64c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	8992      	ldrh	r2, [r2, #12]
 800a5a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5a6:	fb00 f202 	mul.w	r2, r0, r2
 800a5aa:	1a9b      	subs	r3, r3, r2
 800a5ac:	440b      	add	r3, r1
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	b292      	uxth	r2, r2
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff fb31 	bl	8009c1c <st_word>
			fs->wflag = 1;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	70da      	strb	r2, [r3, #3]
			break;
 800a5c0:	e047      	b.n	800a652 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	899b      	ldrh	r3, [r3, #12]
 800a5ca:	089b      	lsrs	r3, r3, #2
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5d6:	4413      	add	r3, r2
 800a5d8:	4619      	mov	r1, r3
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff fd94 	bl	800a108 <move_window>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5e4:	7ffb      	ldrb	r3, [r7, #31]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d132      	bne.n	800a650 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	8992      	ldrh	r2, [r2, #12]
 800a5fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800a602:	fb00 f202 	mul.w	r2, r0, r2
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	440b      	add	r3, r1
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff fae3 	bl	8009bd6 <ld_dword>
 800a610:	4603      	mov	r3, r0
 800a612:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a616:	4323      	orrs	r3, r4
 800a618:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	8992      	ldrh	r2, [r2, #12]
 800a628:	fbb3 f0f2 	udiv	r0, r3, r2
 800a62c:	fb00 f202 	mul.w	r2, r0, r2
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	440b      	add	r3, r1
 800a634:	6879      	ldr	r1, [r7, #4]
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff fb0b 	bl	8009c52 <st_dword>
			fs->wflag = 1;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2201      	movs	r2, #1
 800a640:	70da      	strb	r2, [r3, #3]
			break;
 800a642:	e006      	b.n	800a652 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a644:	bf00      	nop
 800a646:	e004      	b.n	800a652 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a648:	bf00      	nop
 800a64a:	e002      	b.n	800a652 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a64c:	bf00      	nop
 800a64e:	e000      	b.n	800a652 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a650:	bf00      	nop
		}
	}
	return res;
 800a652:	7ffb      	ldrb	r3, [r7, #31]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3724      	adds	r7, #36	@ 0x24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd90      	pop	{r4, r7, pc}

0800a65c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d904      	bls.n	800a682 <remove_chain+0x26>
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d301      	bcc.n	800a686 <remove_chain+0x2a>
 800a682:	2302      	movs	r3, #2
 800a684:	e04b      	b.n	800a71e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00c      	beq.n	800a6a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a68c:	f04f 32ff 	mov.w	r2, #4294967295
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	69b8      	ldr	r0, [r7, #24]
 800a694:	f7ff fec8 	bl	800a428 <put_fat>
 800a698:	4603      	mov	r3, r0
 800a69a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a69c:	7ffb      	ldrb	r3, [r7, #31]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <remove_chain+0x4a>
 800a6a2:	7ffb      	ldrb	r3, [r7, #31]
 800a6a4:	e03b      	b.n	800a71e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f7ff fdea 	bl	800a282 <get_fat>
 800a6ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d031      	beq.n	800a71a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d101      	bne.n	800a6c0 <remove_chain+0x64>
 800a6bc:	2302      	movs	r3, #2
 800a6be:	e02e      	b.n	800a71e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c6:	d101      	bne.n	800a6cc <remove_chain+0x70>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e028      	b.n	800a71e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	68b9      	ldr	r1, [r7, #8]
 800a6d0:	69b8      	ldr	r0, [r7, #24]
 800a6d2:	f7ff fea9 	bl	800a428 <put_fat>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6da:	7ffb      	ldrb	r3, [r7, #31]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <remove_chain+0x88>
 800a6e0:	7ffb      	ldrb	r3, [r7, #31]
 800a6e2:	e01c      	b.n	800a71e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	699a      	ldr	r2, [r3, #24]
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	3b02      	subs	r3, #2
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d20b      	bcs.n	800a70a <remove_chain+0xae>
			fs->free_clst++;
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	791b      	ldrb	r3, [r3, #4]
 800a700:	f043 0301 	orr.w	r3, r3, #1
 800a704:	b2da      	uxtb	r2, r3
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	429a      	cmp	r2, r3
 800a716:	d3c6      	bcc.n	800a6a6 <remove_chain+0x4a>
 800a718:	e000      	b.n	800a71c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a71a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b088      	sub	sp, #32
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10d      	bne.n	800a758 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d004      	beq.n	800a752 <create_chain+0x2c>
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d31b      	bcc.n	800a78a <create_chain+0x64>
 800a752:	2301      	movs	r3, #1
 800a754:	61bb      	str	r3, [r7, #24]
 800a756:	e018      	b.n	800a78a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff fd91 	bl	800a282 <get_fat>
 800a760:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d801      	bhi.n	800a76c <create_chain+0x46>
 800a768:	2301      	movs	r3, #1
 800a76a:	e070      	b.n	800a84e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a772:	d101      	bne.n	800a778 <create_chain+0x52>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	e06a      	b.n	800a84e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d201      	bcs.n	800a786 <create_chain+0x60>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	e063      	b.n	800a84e <create_chain+0x128>
		scl = clst;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	3301      	adds	r3, #1
 800a792:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	69db      	ldr	r3, [r3, #28]
 800a798:	69fa      	ldr	r2, [r7, #28]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d307      	bcc.n	800a7ae <create_chain+0x88>
				ncl = 2;
 800a79e:	2302      	movs	r3, #2
 800a7a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a7a2:	69fa      	ldr	r2, [r7, #28]
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d901      	bls.n	800a7ae <create_chain+0x88>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e04f      	b.n	800a84e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a7ae:	69f9      	ldr	r1, [r7, #28]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff fd66 	bl	800a282 <get_fat>
 800a7b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00e      	beq.n	800a7dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d003      	beq.n	800a7cc <create_chain+0xa6>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ca:	d101      	bne.n	800a7d0 <create_chain+0xaa>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	e03e      	b.n	800a84e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d1da      	bne.n	800a78e <create_chain+0x68>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	e038      	b.n	800a84e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7de:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e2:	69f9      	ldr	r1, [r7, #28]
 800a7e4:	6938      	ldr	r0, [r7, #16]
 800a7e6:	f7ff fe1f 	bl	800a428 <put_fat>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <create_chain+0xe2>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d006      	beq.n	800a808 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7fa:	69fa      	ldr	r2, [r7, #28]
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6938      	ldr	r0, [r7, #16]
 800a800:	f7ff fe12 	bl	800a428 <put_fat>
 800a804:	4603      	mov	r3, r0
 800a806:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d116      	bne.n	800a83c <create_chain+0x116>
		fs->last_clst = ncl;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	699a      	ldr	r2, [r3, #24]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	3b02      	subs	r3, #2
 800a81e:	429a      	cmp	r2, r3
 800a820:	d804      	bhi.n	800a82c <create_chain+0x106>
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	1e5a      	subs	r2, r3, #1
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	791b      	ldrb	r3, [r3, #4]
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	b2da      	uxtb	r2, r3
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	711a      	strb	r2, [r3, #4]
 800a83a:	e007      	b.n	800a84c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a83c:	7dfb      	ldrb	r3, [r7, #23]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d102      	bne.n	800a848 <create_chain+0x122>
 800a842:	f04f 33ff 	mov.w	r3, #4294967295
 800a846:	e000      	b.n	800a84a <create_chain+0x124>
 800a848:	2301      	movs	r3, #1
 800a84a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a84c:	69fb      	ldr	r3, [r7, #28]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3720      	adds	r7, #32
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a856:	b480      	push	{r7}
 800a858:	b087      	sub	sp, #28
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86a:	3304      	adds	r3, #4
 800a86c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	899b      	ldrh	r3, [r3, #12]
 800a872:	461a      	mov	r2, r3
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	fbb3 f3f2 	udiv	r3, r3, r2
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	8952      	ldrh	r2, [r2, #10]
 800a87e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a882:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	1d1a      	adds	r2, r3, #4
 800a888:	613a      	str	r2, [r7, #16]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <clmt_clust+0x42>
 800a894:	2300      	movs	r3, #0
 800a896:	e010      	b.n	800a8ba <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a898:	697a      	ldr	r2, [r7, #20]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d307      	bcc.n	800a8b0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a8ae:	e7e9      	b.n	800a884 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a8b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	4413      	add	r3, r2
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b086      	sub	sp, #24
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8dc:	d204      	bcs.n	800a8e8 <dir_sdi+0x22>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	f003 031f 	and.w	r3, r3, #31
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e071      	b.n	800a9d0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d106      	bne.n	800a90c <dir_sdi+0x46>
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2b02      	cmp	r3, #2
 800a904:	d902      	bls.n	800a90c <dir_sdi+0x46>
		clst = fs->dirbase;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10c      	bne.n	800a92c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	095b      	lsrs	r3, r3, #5
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	8912      	ldrh	r2, [r2, #8]
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d301      	bcc.n	800a922 <dir_sdi+0x5c>
 800a91e:	2302      	movs	r3, #2
 800a920:	e056      	b.n	800a9d0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	61da      	str	r2, [r3, #28]
 800a92a:	e02d      	b.n	800a988 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	895b      	ldrh	r3, [r3, #10]
 800a930:	461a      	mov	r2, r3
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	899b      	ldrh	r3, [r3, #12]
 800a936:	fb02 f303 	mul.w	r3, r2, r3
 800a93a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a93c:	e019      	b.n	800a972 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6979      	ldr	r1, [r7, #20]
 800a942:	4618      	mov	r0, r3
 800a944:	f7ff fc9d 	bl	800a282 <get_fat>
 800a948:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d101      	bne.n	800a956 <dir_sdi+0x90>
 800a952:	2301      	movs	r3, #1
 800a954:	e03c      	b.n	800a9d0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d904      	bls.n	800a966 <dir_sdi+0xa0>
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	429a      	cmp	r2, r3
 800a964:	d301      	bcc.n	800a96a <dir_sdi+0xa4>
 800a966:	2302      	movs	r3, #2
 800a968:	e032      	b.n	800a9d0 <dir_sdi+0x10a>
			ofs -= csz;
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	429a      	cmp	r2, r3
 800a978:	d2e1      	bcs.n	800a93e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a97a:	6979      	ldr	r1, [r7, #20]
 800a97c:	6938      	ldr	r0, [r7, #16]
 800a97e:	f7ff fc61 	bl	800a244 <clust2sect>
 800a982:	4602      	mov	r2, r0
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <dir_sdi+0xd4>
 800a996:	2302      	movs	r3, #2
 800a998:	e01a      	b.n	800a9d0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	69da      	ldr	r2, [r3, #28]
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	899b      	ldrh	r3, [r3, #12]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9aa:	441a      	add	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	899b      	ldrh	r3, [r3, #12]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9c2:	fb00 f202 	mul.w	r2, r0, r2
 800a9c6:	1a9b      	subs	r3, r3, r2
 800a9c8:	18ca      	adds	r2, r1, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	3320      	adds	r3, #32
 800a9ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d003      	beq.n	800aa00 <dir_next+0x28>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9fe:	d301      	bcc.n	800aa04 <dir_next+0x2c>
 800aa00:	2304      	movs	r3, #4
 800aa02:	e0bb      	b.n	800ab7c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	899b      	ldrh	r3, [r3, #12]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa10:	fb01 f202 	mul.w	r2, r1, r2
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f040 809d 	bne.w	800ab56 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10b      	bne.n	800aa46 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	095b      	lsrs	r3, r3, #5
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	8912      	ldrh	r2, [r2, #8]
 800aa36:	4293      	cmp	r3, r2
 800aa38:	f0c0 808d 	bcc.w	800ab56 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	61da      	str	r2, [r3, #28]
 800aa42:	2304      	movs	r3, #4
 800aa44:	e09a      	b.n	800ab7c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	899b      	ldrh	r3, [r3, #12]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	8952      	ldrh	r2, [r2, #10]
 800aa56:	3a01      	subs	r2, #1
 800aa58:	4013      	ands	r3, r2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d17b      	bne.n	800ab56 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	4619      	mov	r1, r3
 800aa66:	4610      	mov	r0, r2
 800aa68:	f7ff fc0b 	bl	800a282 <get_fat>
 800aa6c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d801      	bhi.n	800aa78 <dir_next+0xa0>
 800aa74:	2302      	movs	r3, #2
 800aa76:	e081      	b.n	800ab7c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7e:	d101      	bne.n	800aa84 <dir_next+0xac>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e07b      	b.n	800ab7c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d359      	bcc.n	800ab42 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d104      	bne.n	800aa9e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	61da      	str	r2, [r3, #28]
 800aa9a:	2304      	movs	r3, #4
 800aa9c:	e06e      	b.n	800ab7c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7ff fe3d 	bl	800a726 <create_chain>
 800aaac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <dir_next+0xe0>
 800aab4:	2307      	movs	r3, #7
 800aab6:	e061      	b.n	800ab7c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <dir_next+0xea>
 800aabe:	2302      	movs	r3, #2
 800aac0:	e05c      	b.n	800ab7c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d101      	bne.n	800aace <dir_next+0xf6>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e056      	b.n	800ab7c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7ff fad6 	bl	800a080 <sync_window>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <dir_next+0x106>
 800aada:	2301      	movs	r3, #1
 800aadc:	e04e      	b.n	800ab7c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	899b      	ldrh	r3, [r3, #12]
 800aae8:	461a      	mov	r2, r3
 800aaea:	2100      	movs	r1, #0
 800aaec:	f7ff f8fe 	bl	8009cec <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	613b      	str	r3, [r7, #16]
 800aaf4:	6979      	ldr	r1, [r7, #20]
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7ff fba4 	bl	800a244 <clust2sect>
 800aafc:	4602      	mov	r2, r0
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab02:	e012      	b.n	800ab2a <dir_next+0x152>
						fs->wflag = 1;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2201      	movs	r2, #1
 800ab08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff fab8 	bl	800a080 <sync_window>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <dir_next+0x142>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e030      	b.n	800ab7c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	613b      	str	r3, [r7, #16]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	895b      	ldrh	r3, [r3, #10]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d3e6      	bcc.n	800ab04 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	1ad2      	subs	r2, r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ab48:	6979      	ldr	r1, [r7, #20]
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f7ff fb7a 	bl	800a244 <clust2sect>
 800ab50:	4602      	mov	r2, r0
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	899b      	ldrh	r3, [r3, #12]
 800ab66:	461a      	mov	r2, r3
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab6e:	fb00 f202 	mul.w	r2, r0, r2
 800ab72:	1a9b      	subs	r3, r3, r2
 800ab74:	18ca      	adds	r2, r1, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab94:	2100      	movs	r1, #0
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7ff fe95 	bl	800a8c6 <dir_sdi>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d12b      	bne.n	800abfe <dir_alloc+0x7a>
		n = 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	4619      	mov	r1, r3
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f7ff faa9 	bl	800a108 <move_window>
 800abb6:	4603      	mov	r3, r0
 800abb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d11d      	bne.n	800abfc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	2be5      	cmp	r3, #229	@ 0xe5
 800abc8:	d004      	beq.n	800abd4 <dir_alloc+0x50>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d107      	bne.n	800abe4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	3301      	adds	r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d102      	bne.n	800abe8 <dir_alloc+0x64>
 800abe2:	e00c      	b.n	800abfe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800abe8:	2101      	movs	r1, #1
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff fef4 	bl	800a9d8 <dir_next>
 800abf0:	4603      	mov	r3, r0
 800abf2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0d7      	beq.n	800abaa <dir_alloc+0x26>
 800abfa:	e000      	b.n	800abfe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800abfc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	2b04      	cmp	r3, #4
 800ac02:	d101      	bne.n	800ac08 <dir_alloc+0x84>
 800ac04:	2307      	movs	r3, #7
 800ac06:	75fb      	strb	r3, [r7, #23]
	return res;
 800ac08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	331a      	adds	r3, #26
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fe ffbf 	bl	8009ba4 <ld_word>
 800ac26:	4603      	mov	r3, r0
 800ac28:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d109      	bne.n	800ac46 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	3314      	adds	r3, #20
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe ffb4 	bl	8009ba4 <ld_word>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	041b      	lsls	r3, r3, #16
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ac46:	68fb      	ldr	r3, [r7, #12]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	331a      	adds	r3, #26
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	b292      	uxth	r2, r2
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe ffd8 	bl	8009c1c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2b03      	cmp	r3, #3
 800ac72:	d109      	bne.n	800ac88 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f103 0214 	add.w	r2, r3, #20
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	0c1b      	lsrs	r3, r3, #16
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f7fe ffca 	bl	8009c1c <st_word>
	}
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ac90:	b590      	push	{r4, r7, lr}
 800ac92:	b087      	sub	sp, #28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	331a      	adds	r3, #26
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe ff80 	bl	8009ba4 <ld_word>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <cmp_lfn+0x1e>
 800acaa:	2300      	movs	r3, #0
 800acac:	e059      	b.n	800ad62 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acb6:	1e5a      	subs	r2, r3, #1
 800acb8:	4613      	mov	r3, r2
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800acc4:	2301      	movs	r3, #1
 800acc6:	81fb      	strh	r3, [r7, #14]
 800acc8:	2300      	movs	r3, #0
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	e033      	b.n	800ad36 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800acce:	4a27      	ldr	r2, [pc, #156]	@ (800ad6c <cmp_lfn+0xdc>)
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	4413      	add	r3, r2
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	4413      	add	r3, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fe ff61 	bl	8009ba4 <ld_word>
 800ace2:	4603      	mov	r3, r0
 800ace4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ace6:	89fb      	ldrh	r3, [r7, #14]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d01a      	beq.n	800ad22 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2bfe      	cmp	r3, #254	@ 0xfe
 800acf0:	d812      	bhi.n	800ad18 <cmp_lfn+0x88>
 800acf2:	89bb      	ldrh	r3, [r7, #12]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f002 f9a9 	bl	800d04c <ff_wtoupper>
 800acfa:	4603      	mov	r3, r0
 800acfc:	461c      	mov	r4, r3
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	617a      	str	r2, [r7, #20]
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	4413      	add	r3, r2
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f002 f99d 	bl	800d04c <ff_wtoupper>
 800ad12:	4603      	mov	r3, r0
 800ad14:	429c      	cmp	r4, r3
 800ad16:	d001      	beq.n	800ad1c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e022      	b.n	800ad62 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ad1c:	89bb      	ldrh	r3, [r7, #12]
 800ad1e:	81fb      	strh	r3, [r7, #14]
 800ad20:	e006      	b.n	800ad30 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ad22:	89bb      	ldrh	r3, [r7, #12]
 800ad24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d001      	beq.n	800ad30 <cmp_lfn+0xa0>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e018      	b.n	800ad62 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	3301      	adds	r3, #1
 800ad34:	613b      	str	r3, [r7, #16]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	2b0c      	cmp	r3, #12
 800ad3a:	d9c8      	bls.n	800acce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00b      	beq.n	800ad60 <cmp_lfn+0xd0>
 800ad48:	89fb      	ldrh	r3, [r7, #14]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d008      	beq.n	800ad60 <cmp_lfn+0xd0>
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	4413      	add	r3, r2
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <cmp_lfn+0xd0>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e000      	b.n	800ad62 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ad60:	2301      	movs	r3, #1
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	371c      	adds	r7, #28
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd90      	pop	{r4, r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	08010710 	.word	0x08010710

0800ad70 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	460b      	mov	r3, r1
 800ad80:	71fb      	strb	r3, [r7, #7]
 800ad82:	4613      	mov	r3, r2
 800ad84:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	330d      	adds	r3, #13
 800ad8a:	79ba      	ldrb	r2, [r7, #6]
 800ad8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	330b      	adds	r3, #11
 800ad92:	220f      	movs	r2, #15
 800ad94:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	330c      	adds	r3, #12
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	331a      	adds	r3, #26
 800ada2:	2100      	movs	r1, #0
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe ff39 	bl	8009c1c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	1e5a      	subs	r2, r3, #1
 800adae:	4613      	mov	r3, r2
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	4413      	add	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	82fb      	strh	r3, [r7, #22]
 800adbe:	2300      	movs	r3, #0
 800adc0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800adc2:	8afb      	ldrh	r3, [r7, #22]
 800adc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800adc8:	4293      	cmp	r3, r2
 800adca:	d007      	beq.n	800addc <put_lfn+0x6c>
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	61fa      	str	r2, [r7, #28]
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	4413      	add	r3, r2
 800add8:	881b      	ldrh	r3, [r3, #0]
 800adda:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800addc:	4a17      	ldr	r2, [pc, #92]	@ (800ae3c <put_lfn+0xcc>)
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	4413      	add	r3, r2
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	461a      	mov	r2, r3
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	4413      	add	r3, r2
 800adea:	8afa      	ldrh	r2, [r7, #22]
 800adec:	4611      	mov	r1, r2
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe ff14 	bl	8009c1c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800adf4:	8afb      	ldrh	r3, [r7, #22]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d102      	bne.n	800ae00 <put_lfn+0x90>
 800adfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adfe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	3301      	adds	r3, #1
 800ae04:	61bb      	str	r3, [r7, #24]
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2b0c      	cmp	r3, #12
 800ae0a:	d9da      	bls.n	800adc2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ae0c:	8afb      	ldrh	r3, [r7, #22]
 800ae0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d006      	beq.n	800ae24 <put_lfn+0xb4>
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d103      	bne.n	800ae2c <put_lfn+0xbc>
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae2a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	79fa      	ldrb	r2, [r7, #7]
 800ae30:	701a      	strb	r2, [r3, #0]
}
 800ae32:	bf00      	nop
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	08010710 	.word	0x08010710

0800ae40 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08c      	sub	sp, #48	@ 0x30
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ae4e:	220b      	movs	r2, #11
 800ae50:	68b9      	ldr	r1, [r7, #8]
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f7fe ff29 	bl	8009caa <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b05      	cmp	r3, #5
 800ae5c:	d92b      	bls.n	800aeb6 <gen_numname+0x76>
		sr = seq;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ae62:	e022      	b.n	800aeaa <gen_numname+0x6a>
			wc = *lfn++;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	1c9a      	adds	r2, r3, #2
 800ae68:	607a      	str	r2, [r7, #4]
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ae6e:	2300      	movs	r3, #0
 800ae70:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae72:	e017      	b.n	800aea4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	005a      	lsls	r2, r3, #1
 800ae78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	4413      	add	r3, r2
 800ae80:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ae82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae84:	085b      	lsrs	r3, r3, #1
 800ae86:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <gen_numname+0x5e>
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ae98:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ae9c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ae9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea0:	3301      	adds	r3, #1
 800aea2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea6:	2b0f      	cmp	r3, #15
 800aea8:	d9e4      	bls.n	800ae74 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1d8      	bne.n	800ae64 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800aeb6:	2307      	movs	r3, #7
 800aeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	f003 030f 	and.w	r3, r3, #15
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	3330      	adds	r3, #48	@ 0x30
 800aec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800aeca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aece:	2b39      	cmp	r3, #57	@ 0x39
 800aed0:	d904      	bls.n	800aedc <gen_numname+0x9c>
 800aed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aed6:	3307      	adds	r3, #7
 800aed8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800aedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aede:	1e5a      	subs	r2, r3, #1
 800aee0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800aee2:	3330      	adds	r3, #48	@ 0x30
 800aee4:	443b      	add	r3, r7
 800aee6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aeea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	091b      	lsrs	r3, r3, #4
 800aef2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1df      	bne.n	800aeba <gen_numname+0x7a>
	ns[i] = '~';
 800aefa:	f107 0214 	add.w	r2, r7, #20
 800aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af00:	4413      	add	r3, r2
 800af02:	227e      	movs	r2, #126	@ 0x7e
 800af04:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800af06:	2300      	movs	r3, #0
 800af08:	627b      	str	r3, [r7, #36]	@ 0x24
 800af0a:	e002      	b.n	800af12 <gen_numname+0xd2>
 800af0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0e:	3301      	adds	r3, #1
 800af10:	627b      	str	r3, [r7, #36]	@ 0x24
 800af12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af16:	429a      	cmp	r2, r3
 800af18:	d205      	bcs.n	800af26 <gen_numname+0xe6>
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1e:	4413      	add	r3, r2
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b20      	cmp	r3, #32
 800af24:	d1f2      	bne.n	800af0c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800af26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af28:	2b07      	cmp	r3, #7
 800af2a:	d807      	bhi.n	800af3c <gen_numname+0xfc>
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	62ba      	str	r2, [r7, #40]	@ 0x28
 800af32:	3330      	adds	r3, #48	@ 0x30
 800af34:	443b      	add	r3, r7
 800af36:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800af3a:	e000      	b.n	800af3e <gen_numname+0xfe>
 800af3c:	2120      	movs	r1, #32
 800af3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af40:	1c5a      	adds	r2, r3, #1
 800af42:	627a      	str	r2, [r7, #36]	@ 0x24
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	4413      	add	r3, r2
 800af48:	460a      	mov	r2, r1
 800af4a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800af4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4e:	2b07      	cmp	r3, #7
 800af50:	d9e9      	bls.n	800af26 <gen_numname+0xe6>
}
 800af52:	bf00      	nop
 800af54:	bf00      	nop
 800af56:	3730      	adds	r7, #48	@ 0x30
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800af68:	230b      	movs	r3, #11
 800af6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	0852      	lsrs	r2, r2, #1
 800af72:	01db      	lsls	r3, r3, #7
 800af74:	4313      	orrs	r3, r2
 800af76:	b2da      	uxtb	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	1c59      	adds	r1, r3, #1
 800af7c:	6079      	str	r1, [r7, #4]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	4413      	add	r3, r2
 800af82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	3b01      	subs	r3, #1
 800af88:	60bb      	str	r3, [r7, #8]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1ed      	bne.n	800af6c <sum_sfn+0x10>
	return sum;
 800af90:	7bfb      	ldrb	r3, [r7, #15]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b086      	sub	sp, #24
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800afac:	2100      	movs	r1, #0
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff fc89 	bl	800a8c6 <dir_sdi>
 800afb4:	4603      	mov	r3, r0
 800afb6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <dir_find+0x24>
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
 800afc0:	e0a9      	b.n	800b116 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afc2:	23ff      	movs	r3, #255	@ 0xff
 800afc4:	753b      	strb	r3, [r7, #20]
 800afc6:	7d3b      	ldrb	r3, [r7, #20]
 800afc8:	757b      	strb	r3, [r7, #21]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f04f 32ff 	mov.w	r2, #4294967295
 800afd0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6938      	ldr	r0, [r7, #16]
 800afda:	f7ff f895 	bl	800a108 <move_window>
 800afde:	4603      	mov	r3, r0
 800afe0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f040 8090 	bne.w	800b10a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aff2:	7dbb      	ldrb	r3, [r7, #22]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d102      	bne.n	800affe <dir_find+0x60>
 800aff8:	2304      	movs	r3, #4
 800affa:	75fb      	strb	r3, [r7, #23]
 800affc:	e08a      	b.n	800b114 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	330b      	adds	r3, #11
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b00a:	73fb      	strb	r3, [r7, #15]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7bfa      	ldrb	r2, [r7, #15]
 800b010:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b012:	7dbb      	ldrb	r3, [r7, #22]
 800b014:	2be5      	cmp	r3, #229	@ 0xe5
 800b016:	d007      	beq.n	800b028 <dir_find+0x8a>
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	f003 0308 	and.w	r3, r3, #8
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d009      	beq.n	800b036 <dir_find+0x98>
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	2b0f      	cmp	r3, #15
 800b026:	d006      	beq.n	800b036 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b028:	23ff      	movs	r3, #255	@ 0xff
 800b02a:	757b      	strb	r3, [r7, #21]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f04f 32ff 	mov.w	r2, #4294967295
 800b032:	631a      	str	r2, [r3, #48]	@ 0x30
 800b034:	e05e      	b.n	800b0f4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	2b0f      	cmp	r3, #15
 800b03a:	d136      	bne.n	800b0aa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d154      	bne.n	800b0f4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b04a:	7dbb      	ldrb	r3, [r7, #22]
 800b04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00d      	beq.n	800b070 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	7b5b      	ldrb	r3, [r3, #13]
 800b05a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b05c:	7dbb      	ldrb	r3, [r7, #22]
 800b05e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b062:	75bb      	strb	r3, [r7, #22]
 800b064:	7dbb      	ldrb	r3, [r7, #22]
 800b066:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	695a      	ldr	r2, [r3, #20]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b070:	7dba      	ldrb	r2, [r7, #22]
 800b072:	7d7b      	ldrb	r3, [r7, #21]
 800b074:	429a      	cmp	r2, r3
 800b076:	d115      	bne.n	800b0a4 <dir_find+0x106>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a1b      	ldr	r3, [r3, #32]
 800b07c:	330d      	adds	r3, #13
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	7d3a      	ldrb	r2, [r7, #20]
 800b082:	429a      	cmp	r2, r3
 800b084:	d10e      	bne.n	800b0a4 <dir_find+0x106>
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	691a      	ldr	r2, [r3, #16]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	4619      	mov	r1, r3
 800b090:	4610      	mov	r0, r2
 800b092:	f7ff fdfd 	bl	800ac90 <cmp_lfn>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d003      	beq.n	800b0a4 <dir_find+0x106>
 800b09c:	7d7b      	ldrb	r3, [r7, #21]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	e000      	b.n	800b0a6 <dir_find+0x108>
 800b0a4:	23ff      	movs	r3, #255	@ 0xff
 800b0a6:	757b      	strb	r3, [r7, #21]
 800b0a8:	e024      	b.n	800b0f4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b0aa:	7d7b      	ldrb	r3, [r7, #21]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d109      	bne.n	800b0c4 <dir_find+0x126>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7ff ff51 	bl	800af5c <sum_sfn>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	461a      	mov	r2, r3
 800b0be:	7d3b      	ldrb	r3, [r7, #20]
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d024      	beq.n	800b10e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10a      	bne.n	800b0e8 <dir_find+0x14a>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a18      	ldr	r0, [r3, #32]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3324      	adds	r3, #36	@ 0x24
 800b0da:	220b      	movs	r2, #11
 800b0dc:	4619      	mov	r1, r3
 800b0de:	f7fe fe20 	bl	8009d22 <mem_cmp>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d014      	beq.n	800b112 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b0e8:	23ff      	movs	r3, #255	@ 0xff
 800b0ea:	757b      	strb	r3, [r7, #21]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff fc6e 	bl	800a9d8 <dir_next>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	2b00      	cmp	r3, #0
 800b104:	f43f af65 	beq.w	800afd2 <dir_find+0x34>
 800b108:	e004      	b.n	800b114 <dir_find+0x176>
		if (res != FR_OK) break;
 800b10a:	bf00      	nop
 800b10c:	e002      	b.n	800b114 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b10e:	bf00      	nop
 800b110:	e000      	b.n	800b114 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b112:	bf00      	nop

	return res;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08c      	sub	sp, #48	@ 0x30
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b134:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <dir_register+0x20>
 800b13c:	2306      	movs	r3, #6
 800b13e:	e0e0      	b.n	800b302 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b140:	2300      	movs	r3, #0
 800b142:	627b      	str	r3, [r7, #36]	@ 0x24
 800b144:	e002      	b.n	800b14c <dir_register+0x2c>
 800b146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b148:	3301      	adds	r3, #1
 800b14a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	4413      	add	r3, r2
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1f4      	bne.n	800b146 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800b162:	f107 030c 	add.w	r3, r7, #12
 800b166:	220c      	movs	r2, #12
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fd9e 	bl	8009caa <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d032      	beq.n	800b1de <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2240      	movs	r2, #64	@ 0x40
 800b17c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800b180:	2301      	movs	r3, #1
 800b182:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b184:	e016      	b.n	800b1b4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	f107 010c 	add.w	r1, r7, #12
 800b194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b196:	f7ff fe53 	bl	800ae40 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7ff feff 	bl	800af9e <dir_find>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800b1a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d106      	bne.n	800b1bc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b6:	2b63      	cmp	r3, #99	@ 0x63
 800b1b8:	d9e5      	bls.n	800b186 <dir_register+0x66>
 800b1ba:	e000      	b.n	800b1be <dir_register+0x9e>
			if (res != FR_OK) break;
 800b1bc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c0:	2b64      	cmp	r3, #100	@ 0x64
 800b1c2:	d101      	bne.n	800b1c8 <dir_register+0xa8>
 800b1c4:	2307      	movs	r3, #7
 800b1c6:	e09c      	b.n	800b302 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	d002      	beq.n	800b1d6 <dir_register+0xb6>
 800b1d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1d4:	e095      	b.n	800b302 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b1d6:	7dfa      	ldrb	r2, [r7, #23]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b1de:	7dfb      	ldrb	r3, [r7, #23]
 800b1e0:	f003 0302 	and.w	r3, r3, #2
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d007      	beq.n	800b1f8 <dir_register+0xd8>
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	330c      	adds	r3, #12
 800b1ec:	4a47      	ldr	r2, [pc, #284]	@ (800b30c <dir_register+0x1ec>)
 800b1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f2:	089b      	lsrs	r3, r3, #2
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	e000      	b.n	800b1fa <dir_register+0xda>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b1fc:	6a39      	ldr	r1, [r7, #32]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff fcc0 	bl	800ab84 <dir_alloc>
 800b204:	4603      	mov	r3, r0
 800b206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b20a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d148      	bne.n	800b2a4 <dir_register+0x184>
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	3b01      	subs	r3, #1
 800b216:	623b      	str	r3, [r7, #32]
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d042      	beq.n	800b2a4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695a      	ldr	r2, [r3, #20]
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	015b      	lsls	r3, r3, #5
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff fb4b 	bl	800a8c6 <dir_sdi>
 800b230:	4603      	mov	r3, r0
 800b232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b236:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d132      	bne.n	800b2a4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3324      	adds	r3, #36	@ 0x24
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff fe8a 	bl	800af5c <sum_sfn>
 800b248:	4603      	mov	r3, r0
 800b24a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	4619      	mov	r1, r3
 800b252:	69f8      	ldr	r0, [r7, #28]
 800b254:	f7fe ff58 	bl	800a108 <move_window>
 800b258:	4603      	mov	r3, r0
 800b25a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b25e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b262:	2b00      	cmp	r3, #0
 800b264:	d11d      	bne.n	800b2a2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	6918      	ldr	r0, [r3, #16]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a19      	ldr	r1, [r3, #32]
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	b2da      	uxtb	r2, r3
 800b272:	7efb      	ldrb	r3, [r7, #27]
 800b274:	f7ff fd7c 	bl	800ad70 <put_lfn>
				fs->wflag = 1;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	2201      	movs	r2, #1
 800b27c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b27e:	2100      	movs	r1, #0
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7ff fba9 	bl	800a9d8 <dir_next>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b28c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b290:	2b00      	cmp	r3, #0
 800b292:	d107      	bne.n	800b2a4 <dir_register+0x184>
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	3b01      	subs	r3, #1
 800b298:	623b      	str	r3, [r7, #32]
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1d5      	bne.n	800b24c <dir_register+0x12c>
 800b2a0:	e000      	b.n	800b2a4 <dir_register+0x184>
				if (res != FR_OK) break;
 800b2a2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d128      	bne.n	800b2fe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	69db      	ldr	r3, [r3, #28]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	69f8      	ldr	r0, [r7, #28]
 800b2b4:	f7fe ff28 	bl	800a108 <move_window>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b2be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d11b      	bne.n	800b2fe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	2220      	movs	r2, #32
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fe fd0c 	bl	8009cec <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a18      	ldr	r0, [r3, #32]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3324      	adds	r3, #36	@ 0x24
 800b2dc:	220b      	movs	r2, #11
 800b2de:	4619      	mov	r1, r3
 800b2e0:	f7fe fce3 	bl	8009caa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	330c      	adds	r3, #12
 800b2f0:	f002 0218 	and.w	r2, r2, #24
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b2fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b302:	4618      	mov	r0, r3
 800b304:	3730      	adds	r7, #48	@ 0x30
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	4ec4ec4f 	.word	0x4ec4ec4f

0800b310 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08a      	sub	sp, #40	@ 0x28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	613b      	str	r3, [r7, #16]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	2300      	movs	r3, #0
 800b32a:	617b      	str	r3, [r7, #20]
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	61ba      	str	r2, [r7, #24]
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	4413      	add	r3, r2
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b33e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b340:	2b1f      	cmp	r3, #31
 800b342:	d940      	bls.n	800b3c6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b344:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b346:	2b2f      	cmp	r3, #47	@ 0x2f
 800b348:	d006      	beq.n	800b358 <create_name+0x48>
 800b34a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b34c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b34e:	d110      	bne.n	800b372 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b350:	e002      	b.n	800b358 <create_name+0x48>
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	3301      	adds	r3, #1
 800b356:	61bb      	str	r3, [r7, #24]
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	4413      	add	r3, r2
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b2f      	cmp	r3, #47	@ 0x2f
 800b362:	d0f6      	beq.n	800b352 <create_name+0x42>
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	4413      	add	r3, r2
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b36e:	d0f0      	beq.n	800b352 <create_name+0x42>
			break;
 800b370:	e02a      	b.n	800b3c8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2bfe      	cmp	r3, #254	@ 0xfe
 800b376:	d901      	bls.n	800b37c <create_name+0x6c>
 800b378:	2306      	movs	r3, #6
 800b37a:	e17d      	b.n	800b678 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b37c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b384:	2101      	movs	r1, #1
 800b386:	4618      	mov	r0, r3
 800b388:	f001 fe24 	bl	800cfd4 <ff_convert>
 800b38c:	4603      	mov	r3, r0
 800b38e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <create_name+0x8a>
 800b396:	2306      	movs	r3, #6
 800b398:	e16e      	b.n	800b678 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b39a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b39c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b39e:	d809      	bhi.n	800b3b4 <create_name+0xa4>
 800b3a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	488d      	ldr	r0, [pc, #564]	@ (800b5dc <create_name+0x2cc>)
 800b3a6:	f7fe fce3 	bl	8009d70 <chk_chr>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <create_name+0xa4>
 800b3b0:	2306      	movs	r3, #6
 800b3b2:	e161      	b.n	800b678 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	617a      	str	r2, [r7, #20]
 800b3ba:	005b      	lsls	r3, r3, #1
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b3c2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b3c4:	e7b4      	b.n	800b330 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b3c6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	441a      	add	r2, r3
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b3d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3d4:	2b1f      	cmp	r3, #31
 800b3d6:	d801      	bhi.n	800b3dc <create_name+0xcc>
 800b3d8:	2304      	movs	r3, #4
 800b3da:	e000      	b.n	800b3de <create_name+0xce>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b3e2:	e011      	b.n	800b408 <create_name+0xf8>
		w = lfn[di - 1];
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	881b      	ldrh	r3, [r3, #0]
 800b3f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b3f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3f8:	2b20      	cmp	r3, #32
 800b3fa:	d002      	beq.n	800b402 <create_name+0xf2>
 800b3fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800b400:	d106      	bne.n	800b410 <create_name+0x100>
		di--;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3b01      	subs	r3, #1
 800b406:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1ea      	bne.n	800b3e4 <create_name+0xd4>
 800b40e:	e000      	b.n	800b412 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b410:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	2200      	movs	r2, #0
 800b41c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <create_name+0x118>
 800b424:	2306      	movs	r3, #6
 800b426:	e127      	b.n	800b678 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3324      	adds	r3, #36	@ 0x24
 800b42c:	220b      	movs	r2, #11
 800b42e:	2120      	movs	r1, #32
 800b430:	4618      	mov	r0, r3
 800b432:	f7fe fc5b 	bl	8009cec <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b436:	2300      	movs	r3, #0
 800b438:	61bb      	str	r3, [r7, #24]
 800b43a:	e002      	b.n	800b442 <create_name+0x132>
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	3301      	adds	r3, #1
 800b440:	61bb      	str	r3, [r7, #24]
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	4413      	add	r3, r2
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	2b20      	cmp	r3, #32
 800b44e:	d0f5      	beq.n	800b43c <create_name+0x12c>
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	4413      	add	r3, r2
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b45c:	d0ee      	beq.n	800b43c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d009      	beq.n	800b478 <create_name+0x168>
 800b464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b468:	f043 0303 	orr.w	r3, r3, #3
 800b46c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b470:	e002      	b.n	800b478 <create_name+0x168>
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	3b01      	subs	r3, #1
 800b476:	617b      	str	r3, [r7, #20]
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d009      	beq.n	800b492 <create_name+0x182>
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b484:	3b01      	subs	r3, #1
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b490:	d1ef      	bne.n	800b472 <create_name+0x162>

	i = b = 0; ni = 8;
 800b492:	2300      	movs	r3, #0
 800b494:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b498:	2300      	movs	r3, #0
 800b49a:	623b      	str	r3, [r7, #32]
 800b49c:	2308      	movs	r3, #8
 800b49e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	1c5a      	adds	r2, r3, #1
 800b4a4:	61ba      	str	r2, [r7, #24]
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b4b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 8090 	beq.w	800b5d8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b4b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4ba:	2b20      	cmp	r3, #32
 800b4bc:	d006      	beq.n	800b4cc <create_name+0x1bc>
 800b4be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4c2:	d10a      	bne.n	800b4da <create_name+0x1ca>
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d006      	beq.n	800b4da <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4d0:	f043 0303 	orr.w	r3, r3, #3
 800b4d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b4d8:	e07d      	b.n	800b5d6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b4da:	6a3a      	ldr	r2, [r7, #32]
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d203      	bcs.n	800b4ea <create_name+0x1da>
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d123      	bne.n	800b532 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	2b0b      	cmp	r3, #11
 800b4ee:	d106      	bne.n	800b4fe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4f4:	f043 0303 	orr.w	r3, r3, #3
 800b4f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b4fc:	e075      	b.n	800b5ea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b4fe:	69ba      	ldr	r2, [r7, #24]
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	429a      	cmp	r2, r3
 800b504:	d005      	beq.n	800b512 <create_name+0x202>
 800b506:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b50a:	f043 0303 	orr.w	r3, r3, #3
 800b50e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	429a      	cmp	r2, r3
 800b518:	d866      	bhi.n	800b5e8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	61bb      	str	r3, [r7, #24]
 800b51e:	2308      	movs	r3, #8
 800b520:	623b      	str	r3, [r7, #32]
 800b522:	230b      	movs	r3, #11
 800b524:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b526:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b530:	e051      	b.n	800b5d6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b534:	2b7f      	cmp	r3, #127	@ 0x7f
 800b536:	d914      	bls.n	800b562 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b538:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f001 fd49 	bl	800cfd4 <ff_convert>
 800b542:	4603      	mov	r3, r0
 800b544:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d004      	beq.n	800b556 <create_name+0x246>
 800b54c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b54e:	3b80      	subs	r3, #128	@ 0x80
 800b550:	4a23      	ldr	r2, [pc, #140]	@ (800b5e0 <create_name+0x2d0>)
 800b552:	5cd3      	ldrb	r3, [r2, r3]
 800b554:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b55a:	f043 0302 	orr.w	r3, r3, #2
 800b55e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b562:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b564:	2b00      	cmp	r3, #0
 800b566:	d007      	beq.n	800b578 <create_name+0x268>
 800b568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b56a:	4619      	mov	r1, r3
 800b56c:	481d      	ldr	r0, [pc, #116]	@ (800b5e4 <create_name+0x2d4>)
 800b56e:	f7fe fbff 	bl	8009d70 <chk_chr>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d008      	beq.n	800b58a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b578:	235f      	movs	r3, #95	@ 0x5f
 800b57a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b57c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b580:	f043 0303 	orr.w	r3, r3, #3
 800b584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b588:	e01b      	b.n	800b5c2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b58a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b58c:	2b40      	cmp	r3, #64	@ 0x40
 800b58e:	d909      	bls.n	800b5a4 <create_name+0x294>
 800b590:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b592:	2b5a      	cmp	r3, #90	@ 0x5a
 800b594:	d806      	bhi.n	800b5a4 <create_name+0x294>
					b |= 2;
 800b596:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b59a:	f043 0302 	orr.w	r3, r3, #2
 800b59e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b5a2:	e00e      	b.n	800b5c2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b5a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5a6:	2b60      	cmp	r3, #96	@ 0x60
 800b5a8:	d90b      	bls.n	800b5c2 <create_name+0x2b2>
 800b5aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5ac:	2b7a      	cmp	r3, #122	@ 0x7a
 800b5ae:	d808      	bhi.n	800b5c2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b5b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5b4:	f043 0301 	orr.w	r3, r3, #1
 800b5b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b5bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5be:	3b20      	subs	r3, #32
 800b5c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	623a      	str	r2, [r7, #32]
 800b5c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b5ca:	b2d1      	uxtb	r1, r2
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	460a      	mov	r2, r1
 800b5d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b5d6:	e763      	b.n	800b4a0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b5d8:	bf00      	nop
 800b5da:	e006      	b.n	800b5ea <create_name+0x2da>
 800b5dc:	08010608 	.word	0x08010608
 800b5e0:	08010690 	.word	0x08010690
 800b5e4:	08010614 	.word	0x08010614
			if (si > di) break;			/* No extension */
 800b5e8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5f0:	2be5      	cmp	r3, #229	@ 0xe5
 800b5f2:	d103      	bne.n	800b5fc <create_name+0x2ec>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2205      	movs	r2, #5
 800b5f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	2b08      	cmp	r3, #8
 800b600:	d104      	bne.n	800b60c <create_name+0x2fc>
 800b602:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b60c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b610:	f003 030c 	and.w	r3, r3, #12
 800b614:	2b0c      	cmp	r3, #12
 800b616:	d005      	beq.n	800b624 <create_name+0x314>
 800b618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b61c:	f003 0303 	and.w	r3, r3, #3
 800b620:	2b03      	cmp	r3, #3
 800b622:	d105      	bne.n	800b630 <create_name+0x320>
 800b624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b628:	f043 0302 	orr.w	r3, r3, #2
 800b62c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b634:	f003 0302 	and.w	r3, r3, #2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d117      	bne.n	800b66c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b63c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b640:	f003 0303 	and.w	r3, r3, #3
 800b644:	2b01      	cmp	r3, #1
 800b646:	d105      	bne.n	800b654 <create_name+0x344>
 800b648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b64c:	f043 0310 	orr.w	r3, r3, #16
 800b650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b654:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b658:	f003 030c 	and.w	r3, r3, #12
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	d105      	bne.n	800b66c <create_name+0x35c>
 800b660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b664:	f043 0308 	orr.w	r3, r3, #8
 800b668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b672:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800b676:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3728      	adds	r7, #40	@ 0x28
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b694:	e002      	b.n	800b69c <follow_path+0x1c>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	3301      	adds	r3, #1
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b6a2:	d0f8      	beq.n	800b696 <follow_path+0x16>
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b6aa:	d0f4      	beq.n	800b696 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	2b1f      	cmp	r3, #31
 800b6b8:	d80a      	bhi.n	800b6d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2280      	movs	r2, #128	@ 0x80
 800b6be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7ff f8fe 	bl	800a8c6 <dir_sdi>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	75fb      	strb	r3, [r7, #23]
 800b6ce:	e048      	b.n	800b762 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b6d0:	463b      	mov	r3, r7
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff fe1b 	bl	800b310 <create_name>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d139      	bne.n	800b758 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff fc5a 	bl	800af9e <dir_find>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b6f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00a      	beq.n	800b712 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	d12c      	bne.n	800b75c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b702:	7afb      	ldrb	r3, [r7, #11]
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d127      	bne.n	800b75c <follow_path+0xdc>
 800b70c:	2305      	movs	r3, #5
 800b70e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b710:	e024      	b.n	800b75c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b712:	7afb      	ldrb	r3, [r7, #11]
 800b714:	f003 0304 	and.w	r3, r3, #4
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d121      	bne.n	800b760 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	799b      	ldrb	r3, [r3, #6]
 800b720:	f003 0310 	and.w	r3, r3, #16
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b728:	2305      	movs	r3, #5
 800b72a:	75fb      	strb	r3, [r7, #23]
 800b72c:	e019      	b.n	800b762 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	695b      	ldr	r3, [r3, #20]
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	8992      	ldrh	r2, [r2, #12]
 800b73c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b740:	fb00 f202 	mul.w	r2, r0, r2
 800b744:	1a9b      	subs	r3, r3, r2
 800b746:	440b      	add	r3, r1
 800b748:	4619      	mov	r1, r3
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f7ff fa61 	bl	800ac12 <ld_clust>
 800b750:	4602      	mov	r2, r0
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b756:	e7bb      	b.n	800b6d0 <follow_path+0x50>
			if (res != FR_OK) break;
 800b758:	bf00      	nop
 800b75a:	e002      	b.n	800b762 <follow_path+0xe2>
				break;
 800b75c:	bf00      	nop
 800b75e:	e000      	b.n	800b762 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b760:	bf00      	nop
			}
		}
	}

	return res;
 800b762:	7dfb      	ldrb	r3, [r7, #23]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b774:	f04f 33ff 	mov.w	r3, #4294967295
 800b778:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d031      	beq.n	800b7e6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	617b      	str	r3, [r7, #20]
 800b788:	e002      	b.n	800b790 <get_ldnumber+0x24>
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	3301      	adds	r3, #1
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b1f      	cmp	r3, #31
 800b796:	d903      	bls.n	800b7a0 <get_ldnumber+0x34>
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b79e:	d1f4      	bne.n	800b78a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b3a      	cmp	r3, #58	@ 0x3a
 800b7a6:	d11c      	bne.n	800b7e2 <get_ldnumber+0x76>
			tp = *path;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	60fa      	str	r2, [r7, #12]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	3b30      	subs	r3, #48	@ 0x30
 800b7b8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2b09      	cmp	r3, #9
 800b7be:	d80e      	bhi.n	800b7de <get_ldnumber+0x72>
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d10a      	bne.n	800b7de <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d107      	bne.n	800b7de <get_ldnumber+0x72>
					vol = (int)i;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	e002      	b.n	800b7e8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b7e6:	693b      	ldr	r3, [r7, #16]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	371c      	adds	r7, #28
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	70da      	strb	r2, [r3, #3]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f04f 32ff 	mov.w	r2, #4294967295
 800b80a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7fe fc7a 	bl	800a108 <move_window>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <check_fs+0x2a>
 800b81a:	2304      	movs	r3, #4
 800b81c:	e038      	b.n	800b890 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	3338      	adds	r3, #56	@ 0x38
 800b822:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b826:	4618      	mov	r0, r3
 800b828:	f7fe f9bc 	bl	8009ba4 <ld_word>
 800b82c:	4603      	mov	r3, r0
 800b82e:	461a      	mov	r2, r3
 800b830:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b834:	429a      	cmp	r2, r3
 800b836:	d001      	beq.n	800b83c <check_fs+0x48>
 800b838:	2303      	movs	r3, #3
 800b83a:	e029      	b.n	800b890 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b842:	2be9      	cmp	r3, #233	@ 0xe9
 800b844:	d009      	beq.n	800b85a <check_fs+0x66>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b84c:	2beb      	cmp	r3, #235	@ 0xeb
 800b84e:	d11e      	bne.n	800b88e <check_fs+0x9a>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b856:	2b90      	cmp	r3, #144	@ 0x90
 800b858:	d119      	bne.n	800b88e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	3338      	adds	r3, #56	@ 0x38
 800b85e:	3336      	adds	r3, #54	@ 0x36
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe f9b8 	bl	8009bd6 <ld_dword>
 800b866:	4603      	mov	r3, r0
 800b868:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b86c:	4a0a      	ldr	r2, [pc, #40]	@ (800b898 <check_fs+0xa4>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d101      	bne.n	800b876 <check_fs+0x82>
 800b872:	2300      	movs	r3, #0
 800b874:	e00c      	b.n	800b890 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	3338      	adds	r3, #56	@ 0x38
 800b87a:	3352      	adds	r3, #82	@ 0x52
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe f9aa 	bl	8009bd6 <ld_dword>
 800b882:	4603      	mov	r3, r0
 800b884:	4a05      	ldr	r2, [pc, #20]	@ (800b89c <check_fs+0xa8>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d101      	bne.n	800b88e <check_fs+0x9a>
 800b88a:	2300      	movs	r3, #0
 800b88c:	e000      	b.n	800b890 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b88e:	2302      	movs	r3, #2
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	00544146 	.word	0x00544146
 800b89c:	33544146 	.word	0x33544146

0800b8a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b096      	sub	sp, #88	@ 0x58
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f7ff ff59 	bl	800b76c <get_ldnumber>
 800b8ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	da01      	bge.n	800b8c6 <find_volume+0x26>
 800b8c2:	230b      	movs	r3, #11
 800b8c4:	e265      	b.n	800bd92 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b8c6:	4a9f      	ldr	r2, [pc, #636]	@ (800bb44 <find_volume+0x2a4>)
 800b8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <find_volume+0x3a>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	e25b      	b.n	800bd92 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	f023 0301 	bic.w	r3, r3, #1
 800b8e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d01a      	beq.n	800b926 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f2:	785b      	ldrb	r3, [r3, #1]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fe f8b7 	bl	8009a68 <disk_status>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b900:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10c      	bne.n	800b926 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d007      	beq.n	800b922 <find_volume+0x82>
 800b912:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b916:	f003 0304 	and.w	r3, r3, #4
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b91e:	230a      	movs	r3, #10
 800b920:	e237      	b.n	800bd92 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b922:	2300      	movs	r3, #0
 800b924:	e235      	b.n	800bd92 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b932:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b936:	785b      	ldrb	r3, [r3, #1]
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fe f8af 	bl	8009a9c <disk_initialize>
 800b93e:	4603      	mov	r3, r0
 800b940:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b944:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b950:	2303      	movs	r3, #3
 800b952:	e21e      	b.n	800bd92 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b954:	79fb      	ldrb	r3, [r7, #7]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d007      	beq.n	800b96a <find_volume+0xca>
 800b95a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b95e:	f003 0304 	and.w	r3, r3, #4
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b966:	230a      	movs	r3, #10
 800b968:	e213      	b.n	800bd92 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96c:	7858      	ldrb	r0, [r3, #1]
 800b96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b970:	330c      	adds	r3, #12
 800b972:	461a      	mov	r2, r3
 800b974:	2102      	movs	r1, #2
 800b976:	f7fe f8f7 	bl	8009b68 <disk_ioctl>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d001      	beq.n	800b984 <find_volume+0xe4>
 800b980:	2301      	movs	r3, #1
 800b982:	e206      	b.n	800bd92 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	899b      	ldrh	r3, [r3, #12]
 800b988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b98c:	d80d      	bhi.n	800b9aa <find_volume+0x10a>
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	899b      	ldrh	r3, [r3, #12]
 800b992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b996:	d308      	bcc.n	800b9aa <find_volume+0x10a>
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	899b      	ldrh	r3, [r3, #12]
 800b99c:	461a      	mov	r2, r3
 800b99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a0:	899b      	ldrh	r3, [r3, #12]
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <find_volume+0x10e>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e1f1      	b.n	800bd92 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b9b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b9b6:	f7ff ff1d 	bl	800b7f4 <check_fs>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b9c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d149      	bne.n	800ba5c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9cc:	e01e      	b.n	800ba0c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b9d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b9dc:	4413      	add	r3, r2
 800b9de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d006      	beq.n	800b9f8 <find_volume+0x158>
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe f8f1 	bl	8009bd6 <ld_dword>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	e000      	b.n	800b9fa <find_volume+0x15a>
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	3358      	adds	r3, #88	@ 0x58
 800ba00:	443b      	add	r3, r7
 800ba02:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba08:	3301      	adds	r3, #1
 800ba0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d9dd      	bls.n	800b9ce <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ba12:	2300      	movs	r3, #0
 800ba14:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ba16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <find_volume+0x182>
 800ba1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ba22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	3358      	adds	r3, #88	@ 0x58
 800ba28:	443b      	add	r3, r7
 800ba2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ba2e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ba30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d005      	beq.n	800ba42 <find_volume+0x1a2>
 800ba36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba3a:	f7ff fedb 	bl	800b7f4 <check_fs>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	e000      	b.n	800ba44 <find_volume+0x1a4>
 800ba42:	2303      	movs	r3, #3
 800ba44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ba48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d905      	bls.n	800ba5c <find_volume+0x1bc>
 800ba50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba52:	3301      	adds	r3, #1
 800ba54:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	d9e2      	bls.n	800ba22 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ba5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	d101      	bne.n	800ba68 <find_volume+0x1c8>
 800ba64:	2301      	movs	r3, #1
 800ba66:	e194      	b.n	800bd92 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ba68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d901      	bls.n	800ba74 <find_volume+0x1d4>
 800ba70:	230d      	movs	r3, #13
 800ba72:	e18e      	b.n	800bd92 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	3338      	adds	r3, #56	@ 0x38
 800ba78:	330b      	adds	r3, #11
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe f892 	bl	8009ba4 <ld_word>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba86:	899b      	ldrh	r3, [r3, #12]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d001      	beq.n	800ba90 <find_volume+0x1f0>
 800ba8c:	230d      	movs	r3, #13
 800ba8e:	e180      	b.n	800bd92 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ba90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba92:	3338      	adds	r3, #56	@ 0x38
 800ba94:	3316      	adds	r3, #22
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe f884 	bl	8009ba4 <ld_word>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800baa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <find_volume+0x214>
 800baa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa8:	3338      	adds	r3, #56	@ 0x38
 800baaa:	3324      	adds	r3, #36	@ 0x24
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe f892 	bl	8009bd6 <ld_dword>
 800bab2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bab8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800baba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800bac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	789b      	ldrb	r3, [r3, #2]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d005      	beq.n	800bad8 <find_volume+0x238>
 800bacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bace:	789b      	ldrb	r3, [r3, #2]
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d001      	beq.n	800bad8 <find_volume+0x238>
 800bad4:	230d      	movs	r3, #13
 800bad6:	e15c      	b.n	800bd92 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bada:	789b      	ldrb	r3, [r3, #2]
 800badc:	461a      	mov	r2, r3
 800bade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bae0:	fb02 f303 	mul.w	r3, r2, r3
 800bae4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800baec:	461a      	mov	r2, r3
 800baee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800baf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf4:	895b      	ldrh	r3, [r3, #10]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d008      	beq.n	800bb0c <find_volume+0x26c>
 800bafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafc:	895b      	ldrh	r3, [r3, #10]
 800bafe:	461a      	mov	r2, r3
 800bb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb02:	895b      	ldrh	r3, [r3, #10]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	4013      	ands	r3, r2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <find_volume+0x270>
 800bb0c:	230d      	movs	r3, #13
 800bb0e:	e140      	b.n	800bd92 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb12:	3338      	adds	r3, #56	@ 0x38
 800bb14:	3311      	adds	r3, #17
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fe f844 	bl	8009ba4 <ld_word>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	461a      	mov	r2, r3
 800bb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb26:	891b      	ldrh	r3, [r3, #8]
 800bb28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb2a:	8992      	ldrh	r2, [r2, #12]
 800bb2c:	0952      	lsrs	r2, r2, #5
 800bb2e:	b292      	uxth	r2, r2
 800bb30:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb34:	fb01 f202 	mul.w	r2, r1, r2
 800bb38:	1a9b      	subs	r3, r3, r2
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <find_volume+0x2a8>
 800bb40:	230d      	movs	r3, #13
 800bb42:	e126      	b.n	800bd92 <find_volume+0x4f2>
 800bb44:	20002378 	.word	0x20002378

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4a:	3338      	adds	r3, #56	@ 0x38
 800bb4c:	3313      	adds	r3, #19
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fe f828 	bl	8009ba4 <ld_word>
 800bb54:	4603      	mov	r3, r0
 800bb56:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bb58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <find_volume+0x2cc>
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb60:	3338      	adds	r3, #56	@ 0x38
 800bb62:	3320      	adds	r3, #32
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe f836 	bl	8009bd6 <ld_dword>
 800bb6a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6e:	3338      	adds	r3, #56	@ 0x38
 800bb70:	330e      	adds	r3, #14
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe f816 	bl	8009ba4 <ld_word>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bb7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <find_volume+0x2e6>
 800bb82:	230d      	movs	r3, #13
 800bb84:	e105      	b.n	800bd92 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bb86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bb88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb8a:	4413      	add	r3, r2
 800bb8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb8e:	8911      	ldrh	r1, [r2, #8]
 800bb90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb92:	8992      	ldrh	r2, [r2, #12]
 800bb94:	0952      	lsrs	r2, r2, #5
 800bb96:	b292      	uxth	r2, r2
 800bb98:	fbb1 f2f2 	udiv	r2, r1, r2
 800bb9c:	b292      	uxth	r2, r2
 800bb9e:	4413      	add	r3, r2
 800bba0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d201      	bcs.n	800bbae <find_volume+0x30e>
 800bbaa:	230d      	movs	r3, #13
 800bbac:	e0f1      	b.n	800bd92 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bbae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbb6:	8952      	ldrh	r2, [r2, #10]
 800bbb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbbc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d101      	bne.n	800bbc8 <find_volume+0x328>
 800bbc4:	230d      	movs	r3, #13
 800bbc6:	e0e4      	b.n	800bd92 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d802      	bhi.n	800bbde <find_volume+0x33e>
 800bbd8:	2302      	movs	r3, #2
 800bbda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d802      	bhi.n	800bbee <find_volume+0x34e>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf0:	1c9a      	adds	r2, r3, #2
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bbfa:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bbfc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bbfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc00:	441a      	add	r2, r3
 800bc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc04:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bc06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0a:	441a      	add	r2, r3
 800bc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800bc10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d11e      	bne.n	800bc56 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1a:	3338      	adds	r3, #56	@ 0x38
 800bc1c:	332a      	adds	r3, #42	@ 0x2a
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd ffc0 	bl	8009ba4 <ld_word>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <find_volume+0x38e>
 800bc2a:	230d      	movs	r3, #13
 800bc2c:	e0b1      	b.n	800bd92 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc30:	891b      	ldrh	r3, [r3, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <find_volume+0x39a>
 800bc36:	230d      	movs	r3, #13
 800bc38:	e0ab      	b.n	800bd92 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc3c:	3338      	adds	r3, #56	@ 0x38
 800bc3e:	332c      	adds	r3, #44	@ 0x2c
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fd ffc8 	bl	8009bd6 <ld_dword>
 800bc46:	4602      	mov	r2, r0
 800bc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4e:	69db      	ldr	r3, [r3, #28]
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc54:	e01f      	b.n	800bc96 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc58:	891b      	ldrh	r3, [r3, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <find_volume+0x3c2>
 800bc5e:	230d      	movs	r3, #13
 800bc60:	e097      	b.n	800bd92 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc68:	441a      	add	r2, r3
 800bc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bc6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d103      	bne.n	800bc7e <find_volume+0x3de>
 800bc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	e00a      	b.n	800bc94 <find_volume+0x3f4>
 800bc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc80:	69da      	ldr	r2, [r3, #28]
 800bc82:	4613      	mov	r3, r2
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	4413      	add	r3, r2
 800bc88:	085a      	lsrs	r2, r3, #1
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bc94:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc98:	6a1a      	ldr	r2, [r3, #32]
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9c:	899b      	ldrh	r3, [r3, #12]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bca2:	440b      	add	r3, r1
 800bca4:	3b01      	subs	r3, #1
 800bca6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bca8:	8989      	ldrh	r1, [r1, #12]
 800bcaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d201      	bcs.n	800bcb6 <find_volume+0x416>
 800bcb2:	230d      	movs	r3, #13
 800bcb4:	e06d      	b.n	800bd92 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbc:	619a      	str	r2, [r3, #24]
 800bcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc0:	699a      	ldr	r2, [r3, #24]
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	2280      	movs	r2, #128	@ 0x80
 800bcca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bccc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d149      	bne.n	800bd68 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd6:	3338      	adds	r3, #56	@ 0x38
 800bcd8:	3330      	adds	r3, #48	@ 0x30
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fd ff62 	bl	8009ba4 <ld_word>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d140      	bne.n	800bd68 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bce8:	3301      	adds	r3, #1
 800bcea:	4619      	mov	r1, r3
 800bcec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bcee:	f7fe fa0b 	bl	800a108 <move_window>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d137      	bne.n	800bd68 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd00:	3338      	adds	r3, #56	@ 0x38
 800bd02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fd ff4c 	bl	8009ba4 <ld_word>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	461a      	mov	r2, r3
 800bd10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d127      	bne.n	800bd68 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	3338      	adds	r3, #56	@ 0x38
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fd ff5a 	bl	8009bd6 <ld_dword>
 800bd22:	4603      	mov	r3, r0
 800bd24:	4a1d      	ldr	r2, [pc, #116]	@ (800bd9c <find_volume+0x4fc>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d11e      	bne.n	800bd68 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2c:	3338      	adds	r3, #56	@ 0x38
 800bd2e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fd ff4f 	bl	8009bd6 <ld_dword>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	4a19      	ldr	r2, [pc, #100]	@ (800bda0 <find_volume+0x500>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d113      	bne.n	800bd68 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd42:	3338      	adds	r3, #56	@ 0x38
 800bd44:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fd ff44 	bl	8009bd6 <ld_dword>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd52:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd56:	3338      	adds	r3, #56	@ 0x38
 800bd58:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fd ff3a 	bl	8009bd6 <ld_dword>
 800bd62:	4602      	mov	r2, r0
 800bd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd66:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bd6e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bd70:	4b0c      	ldr	r3, [pc, #48]	@ (800bda4 <find_volume+0x504>)
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	3301      	adds	r3, #1
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	4b0a      	ldr	r3, [pc, #40]	@ (800bda4 <find_volume+0x504>)
 800bd7a:	801a      	strh	r2, [r3, #0]
 800bd7c:	4b09      	ldr	r3, [pc, #36]	@ (800bda4 <find_volume+0x504>)
 800bd7e:	881a      	ldrh	r2, [r3, #0]
 800bd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd82:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd86:	4a08      	ldr	r2, [pc, #32]	@ (800bda8 <find_volume+0x508>)
 800bd88:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bd8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd8c:	f7fe f954 	bl	800a038 <clear_lock>
#endif
	return FR_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3758      	adds	r7, #88	@ 0x58
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	41615252 	.word	0x41615252
 800bda0:	61417272 	.word	0x61417272
 800bda4:	2000237c 	.word	0x2000237c
 800bda8:	200023a0 	.word	0x200023a0

0800bdac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bdb6:	2309      	movs	r3, #9
 800bdb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d01c      	beq.n	800bdfa <validate+0x4e>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d018      	beq.n	800bdfa <validate+0x4e>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d013      	beq.n	800bdfa <validate+0x4e>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	889a      	ldrh	r2, [r3, #4]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	88db      	ldrh	r3, [r3, #6]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d10c      	bne.n	800bdfa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	785b      	ldrb	r3, [r3, #1]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fd fe3e 	bl	8009a68 <disk_status>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <validate+0x4e>
			res = FR_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <validate+0x5a>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	e000      	b.n	800be08 <validate+0x5c>
 800be06:	2300      	movs	r3, #0
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	6013      	str	r3, [r2, #0]
	return res;
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	4613      	mov	r3, r2
 800be24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800be2a:	f107 0310 	add.w	r3, r7, #16
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff fc9c 	bl	800b76c <get_ldnumber>
 800be34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	da01      	bge.n	800be40 <f_mount+0x28>
 800be3c:	230b      	movs	r3, #11
 800be3e:	e02b      	b.n	800be98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800be40:	4a17      	ldr	r2, [pc, #92]	@ (800bea0 <f_mount+0x88>)
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d005      	beq.n	800be5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800be50:	69b8      	ldr	r0, [r7, #24]
 800be52:	f7fe f8f1 	bl	800a038 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	490d      	ldr	r1, [pc, #52]	@ (800bea0 <f_mount+0x88>)
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <f_mount+0x66>
 800be78:	79fb      	ldrb	r3, [r7, #7]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d001      	beq.n	800be82 <f_mount+0x6a>
 800be7e:	2300      	movs	r3, #0
 800be80:	e00a      	b.n	800be98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be82:	f107 010c 	add.w	r1, r7, #12
 800be86:	f107 0308 	add.w	r3, r7, #8
 800be8a:	2200      	movs	r2, #0
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff fd07 	bl	800b8a0 <find_volume>
 800be92:	4603      	mov	r3, r0
 800be94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800be96:	7dfb      	ldrb	r3, [r7, #23]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3720      	adds	r7, #32
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20002378 	.word	0x20002378

0800bea4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b09a      	sub	sp, #104	@ 0x68
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	4613      	mov	r3, r2
 800beb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <f_open+0x18>
 800beb8:	2309      	movs	r3, #9
 800beba:	e1b7      	b.n	800c22c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bebc:	79fb      	ldrb	r3, [r7, #7]
 800bebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bec2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bec4:	79fa      	ldrb	r2, [r7, #7]
 800bec6:	f107 0114 	add.w	r1, r7, #20
 800beca:	f107 0308 	add.w	r3, r7, #8
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff fce6 	bl	800b8a0 <find_volume>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800beda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f040 819b 	bne.w	800c21a <f_open+0x376>
		dj.obj.fs = fs;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	f107 0318 	add.w	r3, r7, #24
 800beee:	4611      	mov	r1, r2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fbc5 	bl	800b680 <follow_path>
 800bef6:	4603      	mov	r3, r0
 800bef8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800befc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d118      	bne.n	800bf36 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bf04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bf08:	b25b      	sxtb	r3, r3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da03      	bge.n	800bf16 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bf0e:	2306      	movs	r3, #6
 800bf10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bf14:	e00f      	b.n	800bf36 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	bf8c      	ite	hi
 800bf1c:	2301      	movhi	r3, #1
 800bf1e:	2300      	movls	r3, #0
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	461a      	mov	r2, r3
 800bf24:	f107 0318 	add.w	r3, r7, #24
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fd ff3c 	bl	8009da8 <chk_lock>
 800bf30:	4603      	mov	r3, r0
 800bf32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	f003 031c 	and.w	r3, r3, #28
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d07f      	beq.n	800c040 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bf40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d017      	beq.n	800bf78 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf4c:	2b04      	cmp	r3, #4
 800bf4e:	d10e      	bne.n	800bf6e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf50:	f7fd ff86 	bl	8009e60 <enq_lock>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d006      	beq.n	800bf68 <f_open+0xc4>
 800bf5a:	f107 0318 	add.w	r3, r7, #24
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7ff f8de 	bl	800b120 <dir_register>
 800bf64:	4603      	mov	r3, r0
 800bf66:	e000      	b.n	800bf6a <f_open+0xc6>
 800bf68:	2312      	movs	r3, #18
 800bf6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf6e:	79fb      	ldrb	r3, [r7, #7]
 800bf70:	f043 0308 	orr.w	r3, r3, #8
 800bf74:	71fb      	strb	r3, [r7, #7]
 800bf76:	e010      	b.n	800bf9a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf78:	7fbb      	ldrb	r3, [r7, #30]
 800bf7a:	f003 0311 	and.w	r3, r3, #17
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d003      	beq.n	800bf8a <f_open+0xe6>
					res = FR_DENIED;
 800bf82:	2307      	movs	r3, #7
 800bf84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bf88:	e007      	b.n	800bf9a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	f003 0304 	and.w	r3, r3, #4
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <f_open+0xf6>
 800bf94:	2308      	movs	r3, #8
 800bf96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d168      	bne.n	800c074 <f_open+0x1d0>
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	f003 0308 	and.w	r3, r3, #8
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d063      	beq.n	800c074 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bfac:	f7fd fcfe 	bl	80099ac <get_fattime>
 800bfb0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb4:	330e      	adds	r3, #14
 800bfb6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fd fe4a 	bl	8009c52 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc0:	3316      	adds	r3, #22
 800bfc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fd fe44 	bl	8009c52 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	330b      	adds	r3, #11
 800bfce:	2220      	movs	r2, #32
 800bfd0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fe1a 	bl	800ac12 <ld_clust>
 800bfde:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe fe32 	bl	800ac50 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfee:	331c      	adds	r3, #28
 800bff0:	2100      	movs	r1, #0
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fd fe2d 	bl	8009c52 <st_dword>
					fs->wflag = 1;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	2201      	movs	r2, #1
 800bffc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c000:	2b00      	cmp	r3, #0
 800c002:	d037      	beq.n	800c074 <f_open+0x1d0>
						dw = fs->winsect;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c008:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c00a:	f107 0318 	add.w	r3, r7, #24
 800c00e:	2200      	movs	r2, #0
 800c010:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe fb22 	bl	800a65c <remove_chain>
 800c018:	4603      	mov	r3, r0
 800c01a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800c01e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c022:	2b00      	cmp	r3, #0
 800c024:	d126      	bne.n	800c074 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe f86c 	bl	800a108 <move_window>
 800c030:	4603      	mov	r3, r0
 800c032:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c03a:	3a01      	subs	r2, #1
 800c03c:	615a      	str	r2, [r3, #20]
 800c03e:	e019      	b.n	800c074 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c040:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c044:	2b00      	cmp	r3, #0
 800c046:	d115      	bne.n	800c074 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c048:	7fbb      	ldrb	r3, [r7, #30]
 800c04a:	f003 0310 	and.w	r3, r3, #16
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <f_open+0x1b6>
					res = FR_NO_FILE;
 800c052:	2304      	movs	r3, #4
 800c054:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c058:	e00c      	b.n	800c074 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	f003 0302 	and.w	r3, r3, #2
 800c060:	2b00      	cmp	r3, #0
 800c062:	d007      	beq.n	800c074 <f_open+0x1d0>
 800c064:	7fbb      	ldrb	r3, [r7, #30]
 800c066:	f003 0301 	and.w	r3, r3, #1
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d002      	beq.n	800c074 <f_open+0x1d0>
						res = FR_DENIED;
 800c06e:	2307      	movs	r3, #7
 800c070:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c074:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d126      	bne.n	800c0ca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	f003 0308 	and.w	r3, r3, #8
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c08c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c096:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c09c:	79fb      	ldrb	r3, [r7, #7]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	bf8c      	ite	hi
 800c0a2:	2301      	movhi	r3, #1
 800c0a4:	2300      	movls	r3, #0
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	f107 0318 	add.w	r3, r7, #24
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fd fef7 	bl	8009ea4 <inc_lock>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <f_open+0x226>
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c0ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f040 80a3 	bne.w	800c21a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0d8:	4611      	mov	r1, r2
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fe fd99 	bl	800ac12 <ld_clust>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e8:	331c      	adds	r3, #28
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fd fd73 	bl	8009bd6 <ld_dword>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c0fc:	697a      	ldr	r2, [r7, #20]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	88da      	ldrh	r2, [r3, #6]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	79fa      	ldrb	r2, [r7, #7]
 800c10e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	3330      	adds	r3, #48	@ 0x30
 800c126:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c12a:	2100      	movs	r1, #0
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fd fddd 	bl	8009cec <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	f003 0320 	and.w	r3, r3, #32
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d06e      	beq.n	800c21a <f_open+0x376>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d06a      	beq.n	800c21a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	68da      	ldr	r2, [r3, #12]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	895b      	ldrh	r3, [r3, #10]
 800c150:	461a      	mov	r2, r3
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	899b      	ldrh	r3, [r3, #12]
 800c156:	fb02 f303 	mul.w	r3, r2, r3
 800c15a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c168:	e016      	b.n	800c198 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe f887 	bl	800a282 <get_fat>
 800c174:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d802      	bhi.n	800c182 <f_open+0x2de>
 800c17c:	2302      	movs	r3, #2
 800c17e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c188:	d102      	bne.n	800c190 <f_open+0x2ec>
 800c18a:	2301      	movs	r3, #1
 800c18c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c190:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c198:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d103      	bne.n	800c1a8 <f_open+0x304>
 800c1a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c1a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d8e0      	bhi.n	800c16a <f_open+0x2c6>
				}
				fp->clust = clst;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c1ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c1ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d131      	bne.n	800c21a <f_open+0x376>
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	899b      	ldrh	r3, [r3, #12]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1be:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1c2:	fb01 f202 	mul.w	r2, r1, r2
 800c1c6:	1a9b      	subs	r3, r3, r2
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d026      	beq.n	800c21a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe f837 	bl	800a244 <clust2sect>
 800c1d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d103      	bne.n	800c1e6 <f_open+0x342>
						res = FR_INT_ERR;
 800c1de:	2302      	movs	r3, #2
 800c1e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c1e4:	e019      	b.n	800c21a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	899b      	ldrh	r3, [r3, #12]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800c1f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1f4:	441a      	add	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	7858      	ldrb	r0, [r3, #1]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6a1a      	ldr	r2, [r3, #32]
 800c208:	2301      	movs	r3, #1
 800c20a:	f7fd fc6d 	bl	8009ae8 <disk_read>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <f_open+0x376>
 800c214:	2301      	movs	r3, #1
 800c216:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c21a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <f_open+0x384>
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c228:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3768      	adds	r7, #104	@ 0x68
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b08e      	sub	sp, #56	@ 0x38
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f107 0214 	add.w	r2, r7, #20
 800c252:	4611      	mov	r1, r2
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff fda9 	bl	800bdac <validate>
 800c25a:	4603      	mov	r3, r0
 800c25c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c260:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c264:	2b00      	cmp	r3, #0
 800c266:	d107      	bne.n	800c278 <f_read+0x44>
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	7d5b      	ldrb	r3, [r3, #21]
 800c26c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c270:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <f_read+0x4a>
 800c278:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c27c:	e135      	b.n	800c4ea <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	7d1b      	ldrb	r3, [r3, #20]
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d101      	bne.n	800c28e <f_read+0x5a>
 800c28a:	2307      	movs	r3, #7
 800c28c:	e12d      	b.n	800c4ea <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	f240 811e 	bls.w	800c4e0 <f_read+0x2ac>
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c2a8:	e11a      	b.n	800c4e0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	8992      	ldrh	r2, [r2, #12]
 800c2b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2b6:	fb01 f202 	mul.w	r2, r1, r2
 800c2ba:	1a9b      	subs	r3, r3, r2
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f040 80d5 	bne.w	800c46c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	699b      	ldr	r3, [r3, #24]
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	8992      	ldrh	r2, [r2, #12]
 800c2ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	8952      	ldrh	r2, [r2, #10]
 800c2d2:	3a01      	subs	r2, #1
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d12f      	bne.n	800c33e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d103      	bne.n	800c2ee <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2ec:	e013      	b.n	800c316 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d007      	beq.n	800c306 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	699b      	ldr	r3, [r3, #24]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f7fe faaa 	bl	800a856 <clmt_clust>
 800c302:	6338      	str	r0, [r7, #48]	@ 0x30
 800c304:	e007      	b.n	800c316 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	4619      	mov	r1, r3
 800c30e:	4610      	mov	r0, r2
 800c310:	f7fd ffb7 	bl	800a282 <get_fat>
 800c314:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d804      	bhi.n	800c326 <f_read+0xf2>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2202      	movs	r2, #2
 800c320:	755a      	strb	r2, [r3, #21]
 800c322:	2302      	movs	r3, #2
 800c324:	e0e1      	b.n	800c4ea <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32c:	d104      	bne.n	800c338 <f_read+0x104>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	755a      	strb	r2, [r3, #21]
 800c334:	2301      	movs	r3, #1
 800c336:	e0d8      	b.n	800c4ea <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c33c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	4619      	mov	r1, r3
 800c346:	4610      	mov	r0, r2
 800c348:	f7fd ff7c 	bl	800a244 <clust2sect>
 800c34c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d104      	bne.n	800c35e <f_read+0x12a>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2202      	movs	r2, #2
 800c358:	755a      	strb	r2, [r3, #21]
 800c35a:	2302      	movs	r3, #2
 800c35c:	e0c5      	b.n	800c4ea <f_read+0x2b6>
			sect += csect;
 800c35e:	69ba      	ldr	r2, [r7, #24]
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	4413      	add	r3, r2
 800c364:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	899b      	ldrh	r3, [r3, #12]
 800c36a:	461a      	mov	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c372:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c376:	2b00      	cmp	r3, #0
 800c378:	d041      	beq.n	800c3fe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c37a:	69fa      	ldr	r2, [r7, #28]
 800c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37e:	4413      	add	r3, r2
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	8952      	ldrh	r2, [r2, #10]
 800c384:	4293      	cmp	r3, r2
 800c386:	d905      	bls.n	800c394 <f_read+0x160>
					cc = fs->csize - csect;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	895b      	ldrh	r3, [r3, #10]
 800c38c:	461a      	mov	r2, r3
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	7858      	ldrb	r0, [r3, #1]
 800c398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39a:	69ba      	ldr	r2, [r7, #24]
 800c39c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c39e:	f7fd fba3 	bl	8009ae8 <disk_read>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <f_read+0x17e>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	755a      	strb	r2, [r3, #21]
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e09b      	b.n	800c4ea <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	7d1b      	ldrb	r3, [r3, #20]
 800c3b6:	b25b      	sxtb	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	da18      	bge.n	800c3ee <f_read+0x1ba>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6a1a      	ldr	r2, [r3, #32]
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d911      	bls.n	800c3ee <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6a1a      	ldr	r2, [r3, #32]
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	8992      	ldrh	r2, [r2, #12]
 800c3d6:	fb02 f303 	mul.w	r3, r2, r3
 800c3da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3dc:	18d0      	adds	r0, r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	899b      	ldrh	r3, [r3, #12]
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	f7fd fc5e 	bl	8009caa <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	899b      	ldrh	r3, [r3, #12]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f6:	fb02 f303 	mul.w	r3, r2, r3
 800c3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c3fc:	e05c      	b.n	800c4b8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	429a      	cmp	r2, r3
 800c406:	d02e      	beq.n	800c466 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	7d1b      	ldrb	r3, [r3, #20]
 800c40c:	b25b      	sxtb	r3, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	da18      	bge.n	800c444 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	7858      	ldrb	r0, [r3, #1]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6a1a      	ldr	r2, [r3, #32]
 800c420:	2301      	movs	r3, #1
 800c422:	f7fd fb81 	bl	8009b28 <disk_write>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <f_read+0x202>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2201      	movs	r2, #1
 800c430:	755a      	strb	r2, [r3, #21]
 800c432:	2301      	movs	r3, #1
 800c434:	e059      	b.n	800c4ea <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	7d1b      	ldrb	r3, [r3, #20]
 800c43a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	7858      	ldrb	r0, [r3, #1]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c44e:	2301      	movs	r3, #1
 800c450:	69ba      	ldr	r2, [r7, #24]
 800c452:	f7fd fb49 	bl	8009ae8 <disk_read>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d004      	beq.n	800c466 <f_read+0x232>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2201      	movs	r2, #1
 800c460:	755a      	strb	r2, [r3, #21]
 800c462:	2301      	movs	r3, #1
 800c464:	e041      	b.n	800c4ea <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	69ba      	ldr	r2, [r7, #24]
 800c46a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	899b      	ldrh	r3, [r3, #12]
 800c470:	4618      	mov	r0, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	8992      	ldrh	r2, [r2, #12]
 800c47a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c47e:	fb01 f202 	mul.w	r2, r1, r2
 800c482:	1a9b      	subs	r3, r3, r2
 800c484:	1ac3      	subs	r3, r0, r3
 800c486:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d901      	bls.n	800c494 <f_read+0x260>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	8992      	ldrh	r2, [r2, #12]
 800c4a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4a6:	fb00 f202 	mul.w	r2, r0, r2
 800c4aa:	1a9b      	subs	r3, r3, r2
 800c4ac:	440b      	add	r3, r1
 800c4ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4b4:	f7fd fbf9 	bl	8009caa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c4b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4bc:	4413      	add	r3, r2
 800c4be:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	699a      	ldr	r2, [r3, #24]
 800c4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c6:	441a      	add	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	619a      	str	r2, [r3, #24]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d2:	441a      	add	r2, r3
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	601a      	str	r2, [r3, #0]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f47f aee1 	bne.w	800c2aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3738      	adds	r7, #56	@ 0x38
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b08c      	sub	sp, #48	@ 0x30
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
 800c4fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2200      	movs	r2, #0
 800c508:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f107 0210 	add.w	r2, r7, #16
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff fc4a 	bl	800bdac <validate>
 800c518:	4603      	mov	r3, r0
 800c51a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c51e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c522:	2b00      	cmp	r3, #0
 800c524:	d107      	bne.n	800c536 <f_write+0x44>
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	7d5b      	ldrb	r3, [r3, #21]
 800c52a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c52e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c532:	2b00      	cmp	r3, #0
 800c534:	d002      	beq.n	800c53c <f_write+0x4a>
 800c536:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c53a:	e16a      	b.n	800c812 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	7d1b      	ldrb	r3, [r3, #20]
 800c540:	f003 0302 	and.w	r3, r3, #2
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <f_write+0x5a>
 800c548:	2307      	movs	r3, #7
 800c54a:	e162      	b.n	800c812 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	699a      	ldr	r2, [r3, #24]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	441a      	add	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	429a      	cmp	r2, r3
 800c55a:	f080 814c 	bcs.w	800c7f6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	43db      	mvns	r3, r3
 800c564:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c566:	e146      	b.n	800c7f6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	8992      	ldrh	r2, [r2, #12]
 800c570:	fbb3 f1f2 	udiv	r1, r3, r2
 800c574:	fb01 f202 	mul.w	r2, r1, r2
 800c578:	1a9b      	subs	r3, r3, r2
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f040 80f1 	bne.w	800c762 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	8992      	ldrh	r2, [r2, #12]
 800c588:	fbb3 f3f2 	udiv	r3, r3, r2
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	8952      	ldrh	r2, [r2, #10]
 800c590:	3a01      	subs	r2, #1
 800c592:	4013      	ands	r3, r2
 800c594:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d143      	bne.n	800c624 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10c      	bne.n	800c5be <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d11a      	bne.n	800c5e6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe f8b6 	bl	800a726 <create_chain>
 800c5ba:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c5bc:	e013      	b.n	800c5e6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d007      	beq.n	800c5d6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	699b      	ldr	r3, [r3, #24]
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f7fe f942 	bl	800a856 <clmt_clust>
 800c5d2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c5d4:	e007      	b.n	800c5e6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	69db      	ldr	r3, [r3, #28]
 800c5dc:	4619      	mov	r1, r3
 800c5de:	4610      	mov	r0, r2
 800c5e0:	f7fe f8a1 	bl	800a726 <create_chain>
 800c5e4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f000 8109 	beq.w	800c800 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d104      	bne.n	800c5fe <f_write+0x10c>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2202      	movs	r2, #2
 800c5f8:	755a      	strb	r2, [r3, #21]
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	e109      	b.n	800c812 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c604:	d104      	bne.n	800c610 <f_write+0x11e>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2201      	movs	r2, #1
 800c60a:	755a      	strb	r2, [r3, #21]
 800c60c:	2301      	movs	r3, #1
 800c60e:	e100      	b.n	800c812 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c614:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <f_write+0x132>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c622:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	7d1b      	ldrb	r3, [r3, #20]
 800c628:	b25b      	sxtb	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	da18      	bge.n	800c660 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	7858      	ldrb	r0, [r3, #1]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6a1a      	ldr	r2, [r3, #32]
 800c63c:	2301      	movs	r3, #1
 800c63e:	f7fd fa73 	bl	8009b28 <disk_write>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d004      	beq.n	800c652 <f_write+0x160>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2201      	movs	r2, #1
 800c64c:	755a      	strb	r2, [r3, #21]
 800c64e:	2301      	movs	r3, #1
 800c650:	e0df      	b.n	800c812 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	7d1b      	ldrb	r3, [r3, #20]
 800c656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	4619      	mov	r1, r3
 800c668:	4610      	mov	r0, r2
 800c66a:	f7fd fdeb 	bl	800a244 <clust2sect>
 800c66e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d104      	bne.n	800c680 <f_write+0x18e>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2202      	movs	r2, #2
 800c67a:	755a      	strb	r2, [r3, #21]
 800c67c:	2302      	movs	r3, #2
 800c67e:	e0c8      	b.n	800c812 <f_write+0x320>
			sect += csect;
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	4413      	add	r3, r2
 800c686:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	899b      	ldrh	r3, [r3, #12]
 800c68c:	461a      	mov	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	fbb3 f3f2 	udiv	r3, r3, r2
 800c694:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d043      	beq.n	800c724 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c69c:	69ba      	ldr	r2, [r7, #24]
 800c69e:	6a3b      	ldr	r3, [r7, #32]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	8952      	ldrh	r2, [r2, #10]
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d905      	bls.n	800c6b6 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	895b      	ldrh	r3, [r3, #10]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	7858      	ldrb	r0, [r3, #1]
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	697a      	ldr	r2, [r7, #20]
 800c6be:	69f9      	ldr	r1, [r7, #28]
 800c6c0:	f7fd fa32 	bl	8009b28 <disk_write>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d004      	beq.n	800c6d4 <f_write+0x1e2>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	755a      	strb	r2, [r3, #21]
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e09e      	b.n	800c812 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6a1a      	ldr	r2, [r3, #32]
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	6a3a      	ldr	r2, [r7, #32]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d918      	bls.n	800c714 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6a1a      	ldr	r2, [r3, #32]
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	8992      	ldrh	r2, [r2, #12]
 800c6f4:	fb02 f303 	mul.w	r3, r2, r3
 800c6f8:	69fa      	ldr	r2, [r7, #28]
 800c6fa:	18d1      	adds	r1, r2, r3
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	899b      	ldrh	r3, [r3, #12]
 800c700:	461a      	mov	r2, r3
 800c702:	f7fd fad2 	bl	8009caa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	7d1b      	ldrb	r3, [r3, #20]
 800c70a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	899b      	ldrh	r3, [r3, #12]
 800c718:	461a      	mov	r2, r3
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	fb02 f303 	mul.w	r3, r2, r3
 800c720:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c722:	e04b      	b.n	800c7bc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6a1b      	ldr	r3, [r3, #32]
 800c728:	697a      	ldr	r2, [r7, #20]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d016      	beq.n	800c75c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	699a      	ldr	r2, [r3, #24]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c736:	429a      	cmp	r2, r3
 800c738:	d210      	bcs.n	800c75c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	7858      	ldrb	r0, [r3, #1]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c744:	2301      	movs	r3, #1
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	f7fd f9ce 	bl	8009ae8 <disk_read>
 800c74c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d004      	beq.n	800c75c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2201      	movs	r2, #1
 800c756:	755a      	strb	r2, [r3, #21]
 800c758:	2301      	movs	r3, #1
 800c75a:	e05a      	b.n	800c812 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	899b      	ldrh	r3, [r3, #12]
 800c766:	4618      	mov	r0, r3
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	699b      	ldr	r3, [r3, #24]
 800c76c:	693a      	ldr	r2, [r7, #16]
 800c76e:	8992      	ldrh	r2, [r2, #12]
 800c770:	fbb3 f1f2 	udiv	r1, r3, r2
 800c774:	fb01 f202 	mul.w	r2, r1, r2
 800c778:	1a9b      	subs	r3, r3, r2
 800c77a:	1ac3      	subs	r3, r0, r3
 800c77c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c77e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d901      	bls.n	800c78a <f_write+0x298>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	8992      	ldrh	r2, [r2, #12]
 800c798:	fbb3 f0f2 	udiv	r0, r3, r2
 800c79c:	fb00 f202 	mul.w	r2, r0, r2
 800c7a0:	1a9b      	subs	r3, r3, r2
 800c7a2:	440b      	add	r3, r1
 800c7a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7a6:	69f9      	ldr	r1, [r7, #28]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fd fa7e 	bl	8009caa <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	7d1b      	ldrb	r3, [r3, #20]
 800c7b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c7bc:	69fa      	ldr	r2, [r7, #28]
 800c7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c0:	4413      	add	r3, r2
 800c7c2:	61fb      	str	r3, [r7, #28]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	699a      	ldr	r2, [r3, #24]
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ca:	441a      	add	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	619a      	str	r2, [r3, #24]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	68da      	ldr	r2, [r3, #12]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	bf38      	it	cc
 800c7dc:	461a      	movcc	r2, r3
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	60da      	str	r2, [r3, #12]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e8:	441a      	add	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f47f aeb5 	bne.w	800c568 <f_write+0x76>
 800c7fe:	e000      	b.n	800c802 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c800:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	7d1b      	ldrb	r3, [r3, #20]
 800c806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3730      	adds	r7, #48	@ 0x30
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b086      	sub	sp, #24
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f107 0208 	add.w	r2, r7, #8
 800c828:	4611      	mov	r1, r2
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7ff fabe 	bl	800bdac <validate>
 800c830:	4603      	mov	r3, r0
 800c832:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d168      	bne.n	800c90c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	7d1b      	ldrb	r3, [r3, #20]
 800c83e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c842:	2b00      	cmp	r3, #0
 800c844:	d062      	beq.n	800c90c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	7d1b      	ldrb	r3, [r3, #20]
 800c84a:	b25b      	sxtb	r3, r3
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	da15      	bge.n	800c87c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	7858      	ldrb	r0, [r3, #1]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a1a      	ldr	r2, [r3, #32]
 800c85e:	2301      	movs	r3, #1
 800c860:	f7fd f962 	bl	8009b28 <disk_write>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <f_sync+0x54>
 800c86a:	2301      	movs	r3, #1
 800c86c:	e04f      	b.n	800c90e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	7d1b      	ldrb	r3, [r3, #20]
 800c872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c876:	b2da      	uxtb	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c87c:	f7fd f896 	bl	80099ac <get_fattime>
 800c880:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c888:	4619      	mov	r1, r3
 800c88a:	4610      	mov	r0, r2
 800c88c:	f7fd fc3c 	bl	800a108 <move_window>
 800c890:	4603      	mov	r3, r0
 800c892:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c894:	7dfb      	ldrb	r3, [r7, #23]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d138      	bne.n	800c90c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c89e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	330b      	adds	r3, #11
 800c8a4:	781a      	ldrb	r2, [r3, #0]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	330b      	adds	r3, #11
 800c8aa:	f042 0220 	orr.w	r2, r2, #32
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6818      	ldr	r0, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	68f9      	ldr	r1, [r7, #12]
 800c8be:	f7fe f9c7 	bl	800ac50 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f103 021c 	add.w	r2, r3, #28
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	f7fd f9bf 	bl	8009c52 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3316      	adds	r3, #22
 800c8d8:	6939      	ldr	r1, [r7, #16]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fd f9b9 	bl	8009c52 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3312      	adds	r3, #18
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fd f998 	bl	8009c1c <st_word>
					fs->wflag = 1;
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fd fc35 	bl	800a164 <sync_fs>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	7d1b      	ldrb	r3, [r3, #20]
 800c902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c906:	b2da      	uxtb	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7ff ff7b 	bl	800c81a <f_sync>
 800c924:	4603      	mov	r3, r0
 800c926:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c928:	7bfb      	ldrb	r3, [r7, #15]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d118      	bne.n	800c960 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f107 0208 	add.w	r2, r7, #8
 800c934:	4611      	mov	r1, r2
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff fa38 	bl	800bdac <validate>
 800c93c:	4603      	mov	r3, r0
 800c93e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10c      	bne.n	800c960 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fd fb38 	bl	8009fc0 <dec_lock>
 800c950:	4603      	mov	r3, r0
 800c952:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c954:	7bfb      	ldrb	r3, [r7, #15]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d102      	bne.n	800c960 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c960:	7bfb      	ldrb	r3, [r7, #15]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b090      	sub	sp, #64	@ 0x40
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f107 0208 	add.w	r2, r7, #8
 800c97a:	4611      	mov	r1, r2
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7ff fa15 	bl	800bdac <validate>
 800c982:	4603      	mov	r3, r0
 800c984:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c988:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d103      	bne.n	800c998 <f_lseek+0x2e>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	7d5b      	ldrb	r3, [r3, #21]
 800c994:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c998:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d002      	beq.n	800c9a6 <f_lseek+0x3c>
 800c9a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c9a4:	e201      	b.n	800cdaa <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 80d9 	beq.w	800cb62 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b6:	d15a      	bne.n	800ca6e <f_lseek+0x104>
			tbl = fp->cltbl;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9bc:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c0:	1d1a      	adds	r2, r3, #4
 800c9c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	617b      	str	r3, [r7, #20]
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d03a      	beq.n	800ca4e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9da:	613b      	str	r3, [r7, #16]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e2:	3302      	adds	r3, #2
 800c9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800c9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e8:	60fb      	str	r3, [r7, #12]
 800c9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fd fc44 	bl	800a282 <get_fat>
 800c9fa:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d804      	bhi.n	800ca0c <f_lseek+0xa2>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2202      	movs	r2, #2
 800ca06:	755a      	strb	r2, [r3, #21]
 800ca08:	2302      	movs	r3, #2
 800ca0a:	e1ce      	b.n	800cdaa <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca12:	d104      	bne.n	800ca1e <f_lseek+0xb4>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	755a      	strb	r2, [r3, #21]
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e1c5      	b.n	800cdaa <f_lseek+0x440>
					} while (cl == pcl + 1);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3301      	adds	r3, #1
 800ca22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d0de      	beq.n	800c9e6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ca28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d809      	bhi.n	800ca44 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ca30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca32:	1d1a      	adds	r2, r3, #4
 800ca34:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3c:	1d1a      	adds	r2, r3, #4
 800ca3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca40:	693a      	ldr	r2, [r7, #16]
 800ca42:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	69db      	ldr	r3, [r3, #28]
 800ca48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d3c4      	bcc.n	800c9d8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca54:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ca56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d803      	bhi.n	800ca66 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	e19f      	b.n	800cda6 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ca66:	2311      	movs	r3, #17
 800ca68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ca6c:	e19b      	b.n	800cda6 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d902      	bls.n	800ca7e <f_lseek+0x114>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 818d 	beq.w	800cda6 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7fd fedf 	bl	800a856 <clmt_clust>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	4619      	mov	r1, r3
 800caa6:	4610      	mov	r0, r2
 800caa8:	f7fd fbcc 	bl	800a244 <clust2sect>
 800caac:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d104      	bne.n	800cabe <f_lseek+0x154>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	755a      	strb	r2, [r3, #21]
 800caba:	2302      	movs	r3, #2
 800cabc:	e175      	b.n	800cdaa <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	3b01      	subs	r3, #1
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	8992      	ldrh	r2, [r2, #12]
 800cac6:	fbb3 f3f2 	udiv	r3, r3, r2
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	8952      	ldrh	r2, [r2, #10]
 800cace:	3a01      	subs	r2, #1
 800cad0:	4013      	ands	r3, r2
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	4413      	add	r3, r2
 800cad6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	8992      	ldrh	r2, [r2, #12]
 800cae0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cae4:	fb01 f202 	mul.w	r2, r1, r2
 800cae8:	1a9b      	subs	r3, r3, r2
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 815b 	beq.w	800cda6 <f_lseek+0x43c>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	69ba      	ldr	r2, [r7, #24]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	f000 8155 	beq.w	800cda6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7d1b      	ldrb	r3, [r3, #20]
 800cb00:	b25b      	sxtb	r3, r3
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	da18      	bge.n	800cb38 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	7858      	ldrb	r0, [r3, #1]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a1a      	ldr	r2, [r3, #32]
 800cb14:	2301      	movs	r3, #1
 800cb16:	f7fd f807 	bl	8009b28 <disk_write>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d004      	beq.n	800cb2a <f_lseek+0x1c0>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2201      	movs	r2, #1
 800cb24:	755a      	strb	r2, [r3, #21]
 800cb26:	2301      	movs	r3, #1
 800cb28:	e13f      	b.n	800cdaa <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	7d1b      	ldrb	r3, [r3, #20]
 800cb2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	7858      	ldrb	r0, [r3, #1]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb42:	2301      	movs	r3, #1
 800cb44:	69ba      	ldr	r2, [r7, #24]
 800cb46:	f7fc ffcf 	bl	8009ae8 <disk_read>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d004      	beq.n	800cb5a <f_lseek+0x1f0>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	755a      	strb	r2, [r3, #21]
 800cb56:	2301      	movs	r3, #1
 800cb58:	e127      	b.n	800cdaa <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	69ba      	ldr	r2, [r7, #24]
 800cb5e:	621a      	str	r2, [r3, #32]
 800cb60:	e121      	b.n	800cda6 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	683a      	ldr	r2, [r7, #0]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d908      	bls.n	800cb7e <f_lseek+0x214>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	7d1b      	ldrb	r3, [r3, #20]
 800cb70:	f003 0302 	and.w	r3, r3, #2
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d102      	bne.n	800cb7e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb8c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f000 80b5 	beq.w	800cd00 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	895b      	ldrh	r3, [r3, #10]
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	899b      	ldrh	r3, [r3, #12]
 800cba0:	fb02 f303 	mul.w	r3, r2, r3
 800cba4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cba6:	6a3b      	ldr	r3, [r7, #32]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d01b      	beq.n	800cbe4 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	1e5a      	subs	r2, r3, #1
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbb6:	6a3b      	ldr	r3, [r7, #32]
 800cbb8:	1e59      	subs	r1, r3, #1
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d30f      	bcc.n	800cbe4 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
 800cbc6:	1e5a      	subs	r2, r3, #1
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	425b      	negs	r3, r3
 800cbcc:	401a      	ands	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	69db      	ldr	r3, [r3, #28]
 800cbe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbe2:	e022      	b.n	800cc2a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d119      	bne.n	800cc24 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fd fd96 	bl	800a726 <create_chain>
 800cbfa:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d104      	bne.n	800cc0c <f_lseek+0x2a2>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2202      	movs	r2, #2
 800cc06:	755a      	strb	r2, [r3, #21]
 800cc08:	2302      	movs	r3, #2
 800cc0a:	e0ce      	b.n	800cdaa <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc12:	d104      	bne.n	800cc1e <f_lseek+0x2b4>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	755a      	strb	r2, [r3, #21]
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e0c5      	b.n	800cdaa <f_lseek+0x440>
					fp->obj.sclust = clst;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc22:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc28:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d067      	beq.n	800cd00 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800cc30:	e03a      	b.n	800cca8 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	1ad3      	subs	r3, r2, r3
 800cc38:	603b      	str	r3, [r7, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	699a      	ldr	r2, [r3, #24]
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	441a      	add	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	7d1b      	ldrb	r3, [r3, #20]
 800cc4a:	f003 0302 	and.w	r3, r3, #2
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00b      	beq.n	800cc6a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fd fd65 	bl	800a726 <create_chain>
 800cc5c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d108      	bne.n	800cc76 <f_lseek+0x30c>
							ofs = 0; break;
 800cc64:	2300      	movs	r3, #0
 800cc66:	603b      	str	r3, [r7, #0]
 800cc68:	e022      	b.n	800ccb0 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fd fb07 	bl	800a282 <get_fat>
 800cc74:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7c:	d104      	bne.n	800cc88 <f_lseek+0x31e>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	755a      	strb	r2, [r3, #21]
 800cc84:	2301      	movs	r3, #1
 800cc86:	e090      	b.n	800cdaa <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d904      	bls.n	800cc98 <f_lseek+0x32e>
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d304      	bcc.n	800cca2 <f_lseek+0x338>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	755a      	strb	r2, [r3, #21]
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e083      	b.n	800cdaa <f_lseek+0x440>
					fp->clust = clst;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cca6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d8c0      	bhi.n	800cc32 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	699a      	ldr	r2, [r3, #24]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	441a      	add	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	899b      	ldrh	r3, [r3, #12]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccc8:	fb01 f202 	mul.w	r2, r1, r2
 800cccc:	1a9b      	subs	r3, r3, r2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d016      	beq.n	800cd00 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fd fab4 	bl	800a244 <clust2sect>
 800ccdc:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ccde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d104      	bne.n	800ccee <f_lseek+0x384>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2202      	movs	r2, #2
 800cce8:	755a      	strb	r2, [r3, #21]
 800ccea:	2302      	movs	r3, #2
 800ccec:	e05d      	b.n	800cdaa <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	899b      	ldrh	r3, [r3, #12]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccfc:	4413      	add	r3, r2
 800ccfe:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	699a      	ldr	r2, [r3, #24]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d90a      	bls.n	800cd22 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	699a      	ldr	r2, [r3, #24]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	7d1b      	ldrb	r3, [r3, #20]
 800cd18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	8992      	ldrh	r2, [r2, #12]
 800cd2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd2e:	fb01 f202 	mul.w	r2, r1, r2
 800cd32:	1a9b      	subs	r3, r3, r2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d036      	beq.n	800cda6 <f_lseek+0x43c>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a1b      	ldr	r3, [r3, #32]
 800cd3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d031      	beq.n	800cda6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	7d1b      	ldrb	r3, [r3, #20]
 800cd46:	b25b      	sxtb	r3, r3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	da18      	bge.n	800cd7e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	7858      	ldrb	r0, [r3, #1]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a1a      	ldr	r2, [r3, #32]
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	f7fc fee4 	bl	8009b28 <disk_write>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d004      	beq.n	800cd70 <f_lseek+0x406>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	755a      	strb	r2, [r3, #21]
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e01c      	b.n	800cdaa <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7d1b      	ldrb	r3, [r3, #20]
 800cd74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	7858      	ldrb	r0, [r3, #1]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd88:	2301      	movs	r3, #1
 800cd8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd8c:	f7fc feac 	bl	8009ae8 <disk_read>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d004      	beq.n	800cda0 <f_lseek+0x436>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	755a      	strb	r2, [r3, #21]
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e004      	b.n	800cdaa <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cda4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cda6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3740      	adds	r7, #64	@ 0x40
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b092      	sub	sp, #72	@ 0x48
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	60f8      	str	r0, [r7, #12]
 800cdba:	60b9      	str	r1, [r7, #8]
 800cdbc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cdbe:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800cdc2:	f107 030c 	add.w	r3, r7, #12
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fe fd69 	bl	800b8a0 <find_volume>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800cdd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f040 8099 	bne.w	800cf10 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800cdde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800cde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde6:	699a      	ldr	r2, [r3, #24]
 800cde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdea:	69db      	ldr	r3, [r3, #28]
 800cdec:	3b02      	subs	r3, #2
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d804      	bhi.n	800cdfc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	699a      	ldr	r2, [r3, #24]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	601a      	str	r2, [r3, #0]
 800cdfa:	e089      	b.n	800cf10 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ce00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d128      	bne.n	800ce5a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ce08:	2302      	movs	r3, #2
 800ce0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ce10:	f107 0314 	add.w	r3, r7, #20
 800ce14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fd fa33 	bl	800a282 <get_fat>
 800ce1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ce1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce24:	d103      	bne.n	800ce2e <f_getfree+0x7c>
 800ce26:	2301      	movs	r3, #1
 800ce28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ce2c:	e063      	b.n	800cef6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ce2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d103      	bne.n	800ce3c <f_getfree+0x8a>
 800ce34:	2302      	movs	r3, #2
 800ce36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ce3a:	e05c      	b.n	800cef6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ce3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d102      	bne.n	800ce48 <f_getfree+0x96>
 800ce42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce44:	3301      	adds	r3, #1
 800ce46:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ce48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce50:	69db      	ldr	r3, [r3, #28]
 800ce52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d3db      	bcc.n	800ce10 <f_getfree+0x5e>
 800ce58:	e04d      	b.n	800cef6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ce5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5c:	69db      	ldr	r3, [r3, #28]
 800ce5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce64:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800ce6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d113      	bne.n	800ce9c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ce74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce78:	1c5a      	adds	r2, r3, #1
 800ce7a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	f7fd f943 	bl	800a108 <move_window>
 800ce82:	4603      	mov	r3, r0
 800ce84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800ce88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d131      	bne.n	800cef4 <f_getfree+0x142>
							p = fs->win;
 800ce90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce92:	3338      	adds	r3, #56	@ 0x38
 800ce94:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ce96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce98:	899b      	ldrh	r3, [r3, #12]
 800ce9a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ce9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d10f      	bne.n	800cec4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800cea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cea6:	f7fc fe7d 	bl	8009ba4 <ld_word>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d102      	bne.n	800ceb6 <f_getfree+0x104>
 800ceb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb8:	3302      	adds	r3, #2
 800ceba:	633b      	str	r3, [r7, #48]	@ 0x30
 800cebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cebe:	3b02      	subs	r3, #2
 800cec0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec2:	e010      	b.n	800cee6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800cec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cec6:	f7fc fe86 	bl	8009bd6 <ld_dword>
 800ceca:	4603      	mov	r3, r0
 800cecc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <f_getfree+0x128>
 800ced4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ced6:	3301      	adds	r3, #1
 800ced8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ceda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cedc:	3304      	adds	r3, #4
 800cede:	633b      	str	r3, [r7, #48]	@ 0x30
 800cee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee2:	3b04      	subs	r3, #4
 800cee4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800cee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cee8:	3b01      	subs	r3, #1
 800ceea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1bd      	bne.n	800ce6e <f_getfree+0xbc>
 800cef2:	e000      	b.n	800cef6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800cef4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cefa:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800cefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf00:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800cf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf04:	791a      	ldrb	r2, [r3, #4]
 800cf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf08:	f042 0201 	orr.w	r2, r2, #1
 800cf0c:	b2d2      	uxtb	r2, r2
 800cf0e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800cf10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3748      	adds	r7, #72	@ 0x48
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b087      	sub	sp, #28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	4613      	mov	r3, r2
 800cf28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cf32:	4b1f      	ldr	r3, [pc, #124]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf34:	7a5b      	ldrb	r3, [r3, #9]
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d131      	bne.n	800cfa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf3c:	4b1c      	ldr	r3, [pc, #112]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf3e:	7a5b      	ldrb	r3, [r3, #9]
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	461a      	mov	r2, r3
 800cf44:	4b1a      	ldr	r3, [pc, #104]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf46:	2100      	movs	r1, #0
 800cf48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cf4a:	4b19      	ldr	r3, [pc, #100]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf4c:	7a5b      	ldrb	r3, [r3, #9]
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	4a17      	ldr	r2, [pc, #92]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cf5a:	4b15      	ldr	r3, [pc, #84]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf5c:	7a5b      	ldrb	r3, [r3, #9]
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	461a      	mov	r2, r3
 800cf62:	4b13      	ldr	r3, [pc, #76]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf64:	4413      	add	r3, r2
 800cf66:	79fa      	ldrb	r2, [r7, #7]
 800cf68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cf6a:	4b11      	ldr	r3, [pc, #68]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf6c:	7a5b      	ldrb	r3, [r3, #9]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	1c5a      	adds	r2, r3, #1
 800cf72:	b2d1      	uxtb	r1, r2
 800cf74:	4a0e      	ldr	r2, [pc, #56]	@ (800cfb0 <FATFS_LinkDriverEx+0x94>)
 800cf76:	7251      	strb	r1, [r2, #9]
 800cf78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cf7a:	7dbb      	ldrb	r3, [r7, #22]
 800cf7c:	3330      	adds	r3, #48	@ 0x30
 800cf7e:	b2da      	uxtb	r2, r3
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	3301      	adds	r3, #1
 800cf88:	223a      	movs	r2, #58	@ 0x3a
 800cf8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	3302      	adds	r3, #2
 800cf90:	222f      	movs	r2, #47	@ 0x2f
 800cf92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	3303      	adds	r3, #3
 800cf98:	2200      	movs	r2, #0
 800cf9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	371c      	adds	r7, #28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	200025a0 	.word	0x200025a0

0800cfb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	6839      	ldr	r1, [r7, #0]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff ffaa 	bl	800cf1c <FATFS_LinkDriverEx>
 800cfc8:	4603      	mov	r3, r0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
	...

0800cfd4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	4603      	mov	r3, r0
 800cfdc:	6039      	str	r1, [r7, #0]
 800cfde:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cfe0:	88fb      	ldrh	r3, [r7, #6]
 800cfe2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfe4:	d802      	bhi.n	800cfec <ff_convert+0x18>
		c = chr;
 800cfe6:	88fb      	ldrh	r3, [r7, #6]
 800cfe8:	81fb      	strh	r3, [r7, #14]
 800cfea:	e025      	b.n	800d038 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00b      	beq.n	800d00a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cff2:	88fb      	ldrh	r3, [r7, #6]
 800cff4:	2bff      	cmp	r3, #255	@ 0xff
 800cff6:	d805      	bhi.n	800d004 <ff_convert+0x30>
 800cff8:	88fb      	ldrh	r3, [r7, #6]
 800cffa:	3b80      	subs	r3, #128	@ 0x80
 800cffc:	4a12      	ldr	r2, [pc, #72]	@ (800d048 <ff_convert+0x74>)
 800cffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d002:	e000      	b.n	800d006 <ff_convert+0x32>
 800d004:	2300      	movs	r3, #0
 800d006:	81fb      	strh	r3, [r7, #14]
 800d008:	e016      	b.n	800d038 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d00a:	2300      	movs	r3, #0
 800d00c:	81fb      	strh	r3, [r7, #14]
 800d00e:	e009      	b.n	800d024 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d010:	89fb      	ldrh	r3, [r7, #14]
 800d012:	4a0d      	ldr	r2, [pc, #52]	@ (800d048 <ff_convert+0x74>)
 800d014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d018:	88fa      	ldrh	r2, [r7, #6]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d006      	beq.n	800d02c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d01e:	89fb      	ldrh	r3, [r7, #14]
 800d020:	3301      	adds	r3, #1
 800d022:	81fb      	strh	r3, [r7, #14]
 800d024:	89fb      	ldrh	r3, [r7, #14]
 800d026:	2b7f      	cmp	r3, #127	@ 0x7f
 800d028:	d9f2      	bls.n	800d010 <ff_convert+0x3c>
 800d02a:	e000      	b.n	800d02e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d02c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d02e:	89fb      	ldrh	r3, [r7, #14]
 800d030:	3380      	adds	r3, #128	@ 0x80
 800d032:	b29b      	uxth	r3, r3
 800d034:	b2db      	uxtb	r3, r3
 800d036:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d038:	89fb      	ldrh	r3, [r7, #14]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3714      	adds	r7, #20
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	08010720 	.word	0x08010720

0800d04c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b087      	sub	sp, #28
 800d050:	af00      	add	r7, sp, #0
 800d052:	4603      	mov	r3, r0
 800d054:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d056:	88fb      	ldrh	r3, [r7, #6]
 800d058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d05c:	d201      	bcs.n	800d062 <ff_wtoupper+0x16>
 800d05e:	4b3e      	ldr	r3, [pc, #248]	@ (800d158 <ff_wtoupper+0x10c>)
 800d060:	e000      	b.n	800d064 <ff_wtoupper+0x18>
 800d062:	4b3e      	ldr	r3, [pc, #248]	@ (800d15c <ff_wtoupper+0x110>)
 800d064:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	1c9a      	adds	r2, r3, #2
 800d06a:	617a      	str	r2, [r7, #20]
 800d06c:	881b      	ldrh	r3, [r3, #0]
 800d06e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d070:	8a7b      	ldrh	r3, [r7, #18]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d068      	beq.n	800d148 <ff_wtoupper+0xfc>
 800d076:	88fa      	ldrh	r2, [r7, #6]
 800d078:	8a7b      	ldrh	r3, [r7, #18]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d364      	bcc.n	800d148 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	1c9a      	adds	r2, r3, #2
 800d082:	617a      	str	r2, [r7, #20]
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	823b      	strh	r3, [r7, #16]
 800d088:	8a3b      	ldrh	r3, [r7, #16]
 800d08a:	0a1b      	lsrs	r3, r3, #8
 800d08c:	81fb      	strh	r3, [r7, #14]
 800d08e:	8a3b      	ldrh	r3, [r7, #16]
 800d090:	b2db      	uxtb	r3, r3
 800d092:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d094:	88fa      	ldrh	r2, [r7, #6]
 800d096:	8a79      	ldrh	r1, [r7, #18]
 800d098:	8a3b      	ldrh	r3, [r7, #16]
 800d09a:	440b      	add	r3, r1
 800d09c:	429a      	cmp	r2, r3
 800d09e:	da49      	bge.n	800d134 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d0a0:	89fb      	ldrh	r3, [r7, #14]
 800d0a2:	2b08      	cmp	r3, #8
 800d0a4:	d84f      	bhi.n	800d146 <ff_wtoupper+0xfa>
 800d0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ac <ff_wtoupper+0x60>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d0d1 	.word	0x0800d0d1
 800d0b0:	0800d0e3 	.word	0x0800d0e3
 800d0b4:	0800d0f9 	.word	0x0800d0f9
 800d0b8:	0800d101 	.word	0x0800d101
 800d0bc:	0800d109 	.word	0x0800d109
 800d0c0:	0800d111 	.word	0x0800d111
 800d0c4:	0800d119 	.word	0x0800d119
 800d0c8:	0800d121 	.word	0x0800d121
 800d0cc:	0800d129 	.word	0x0800d129
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d0d0:	88fa      	ldrh	r2, [r7, #6]
 800d0d2:	8a7b      	ldrh	r3, [r7, #18]
 800d0d4:	1ad3      	subs	r3, r2, r3
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	697a      	ldr	r2, [r7, #20]
 800d0da:	4413      	add	r3, r2
 800d0dc:	881b      	ldrh	r3, [r3, #0]
 800d0de:	80fb      	strh	r3, [r7, #6]
 800d0e0:	e027      	b.n	800d132 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d0e2:	88fa      	ldrh	r2, [r7, #6]
 800d0e4:	8a7b      	ldrh	r3, [r7, #18]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	88fa      	ldrh	r2, [r7, #6]
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	80fb      	strh	r3, [r7, #6]
 800d0f6:	e01c      	b.n	800d132 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d0f8:	88fb      	ldrh	r3, [r7, #6]
 800d0fa:	3b10      	subs	r3, #16
 800d0fc:	80fb      	strh	r3, [r7, #6]
 800d0fe:	e018      	b.n	800d132 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d100:	88fb      	ldrh	r3, [r7, #6]
 800d102:	3b20      	subs	r3, #32
 800d104:	80fb      	strh	r3, [r7, #6]
 800d106:	e014      	b.n	800d132 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d108:	88fb      	ldrh	r3, [r7, #6]
 800d10a:	3b30      	subs	r3, #48	@ 0x30
 800d10c:	80fb      	strh	r3, [r7, #6]
 800d10e:	e010      	b.n	800d132 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d110:	88fb      	ldrh	r3, [r7, #6]
 800d112:	3b1a      	subs	r3, #26
 800d114:	80fb      	strh	r3, [r7, #6]
 800d116:	e00c      	b.n	800d132 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d118:	88fb      	ldrh	r3, [r7, #6]
 800d11a:	3308      	adds	r3, #8
 800d11c:	80fb      	strh	r3, [r7, #6]
 800d11e:	e008      	b.n	800d132 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d120:	88fb      	ldrh	r3, [r7, #6]
 800d122:	3b50      	subs	r3, #80	@ 0x50
 800d124:	80fb      	strh	r3, [r7, #6]
 800d126:	e004      	b.n	800d132 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d128:	88fb      	ldrh	r3, [r7, #6]
 800d12a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d12e:	80fb      	strh	r3, [r7, #6]
 800d130:	bf00      	nop
			}
			break;
 800d132:	e008      	b.n	800d146 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d134:	89fb      	ldrh	r3, [r7, #14]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d195      	bne.n	800d066 <ff_wtoupper+0x1a>
 800d13a:	8a3b      	ldrh	r3, [r7, #16]
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	4413      	add	r3, r2
 800d142:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d144:	e78f      	b.n	800d066 <ff_wtoupper+0x1a>
			break;
 800d146:	bf00      	nop
	}

	return chr;
 800d148:	88fb      	ldrh	r3, [r7, #6]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	371c      	adds	r7, #28
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	08010820 	.word	0x08010820
 800d15c:	08010a14 	.word	0x08010a14

0800d160 <__cvt>:
 800d160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d164:	ec57 6b10 	vmov	r6, r7, d0
 800d168:	2f00      	cmp	r7, #0
 800d16a:	460c      	mov	r4, r1
 800d16c:	4619      	mov	r1, r3
 800d16e:	463b      	mov	r3, r7
 800d170:	bfbb      	ittet	lt
 800d172:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d176:	461f      	movlt	r7, r3
 800d178:	2300      	movge	r3, #0
 800d17a:	232d      	movlt	r3, #45	@ 0x2d
 800d17c:	700b      	strb	r3, [r1, #0]
 800d17e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d180:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d184:	4691      	mov	r9, r2
 800d186:	f023 0820 	bic.w	r8, r3, #32
 800d18a:	bfbc      	itt	lt
 800d18c:	4632      	movlt	r2, r6
 800d18e:	4616      	movlt	r6, r2
 800d190:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d194:	d005      	beq.n	800d1a2 <__cvt+0x42>
 800d196:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d19a:	d100      	bne.n	800d19e <__cvt+0x3e>
 800d19c:	3401      	adds	r4, #1
 800d19e:	2102      	movs	r1, #2
 800d1a0:	e000      	b.n	800d1a4 <__cvt+0x44>
 800d1a2:	2103      	movs	r1, #3
 800d1a4:	ab03      	add	r3, sp, #12
 800d1a6:	9301      	str	r3, [sp, #4]
 800d1a8:	ab02      	add	r3, sp, #8
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	ec47 6b10 	vmov	d0, r6, r7
 800d1b0:	4653      	mov	r3, sl
 800d1b2:	4622      	mov	r2, r4
 800d1b4:	f000 ffc4 	bl	800e140 <_dtoa_r>
 800d1b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d1bc:	4605      	mov	r5, r0
 800d1be:	d119      	bne.n	800d1f4 <__cvt+0x94>
 800d1c0:	f019 0f01 	tst.w	r9, #1
 800d1c4:	d00e      	beq.n	800d1e4 <__cvt+0x84>
 800d1c6:	eb00 0904 	add.w	r9, r0, r4
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	f7f3 fcb1 	bl	8000b38 <__aeabi_dcmpeq>
 800d1d6:	b108      	cbz	r0, 800d1dc <__cvt+0x7c>
 800d1d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1dc:	2230      	movs	r2, #48	@ 0x30
 800d1de:	9b03      	ldr	r3, [sp, #12]
 800d1e0:	454b      	cmp	r3, r9
 800d1e2:	d31e      	bcc.n	800d222 <__cvt+0xc2>
 800d1e4:	9b03      	ldr	r3, [sp, #12]
 800d1e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1e8:	1b5b      	subs	r3, r3, r5
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	b004      	add	sp, #16
 800d1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d1f8:	eb00 0904 	add.w	r9, r0, r4
 800d1fc:	d1e5      	bne.n	800d1ca <__cvt+0x6a>
 800d1fe:	7803      	ldrb	r3, [r0, #0]
 800d200:	2b30      	cmp	r3, #48	@ 0x30
 800d202:	d10a      	bne.n	800d21a <__cvt+0xba>
 800d204:	2200      	movs	r2, #0
 800d206:	2300      	movs	r3, #0
 800d208:	4630      	mov	r0, r6
 800d20a:	4639      	mov	r1, r7
 800d20c:	f7f3 fc94 	bl	8000b38 <__aeabi_dcmpeq>
 800d210:	b918      	cbnz	r0, 800d21a <__cvt+0xba>
 800d212:	f1c4 0401 	rsb	r4, r4, #1
 800d216:	f8ca 4000 	str.w	r4, [sl]
 800d21a:	f8da 3000 	ldr.w	r3, [sl]
 800d21e:	4499      	add	r9, r3
 800d220:	e7d3      	b.n	800d1ca <__cvt+0x6a>
 800d222:	1c59      	adds	r1, r3, #1
 800d224:	9103      	str	r1, [sp, #12]
 800d226:	701a      	strb	r2, [r3, #0]
 800d228:	e7d9      	b.n	800d1de <__cvt+0x7e>

0800d22a <__exponent>:
 800d22a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d22c:	2900      	cmp	r1, #0
 800d22e:	bfba      	itte	lt
 800d230:	4249      	neglt	r1, r1
 800d232:	232d      	movlt	r3, #45	@ 0x2d
 800d234:	232b      	movge	r3, #43	@ 0x2b
 800d236:	2909      	cmp	r1, #9
 800d238:	7002      	strb	r2, [r0, #0]
 800d23a:	7043      	strb	r3, [r0, #1]
 800d23c:	dd29      	ble.n	800d292 <__exponent+0x68>
 800d23e:	f10d 0307 	add.w	r3, sp, #7
 800d242:	461d      	mov	r5, r3
 800d244:	270a      	movs	r7, #10
 800d246:	461a      	mov	r2, r3
 800d248:	fbb1 f6f7 	udiv	r6, r1, r7
 800d24c:	fb07 1416 	mls	r4, r7, r6, r1
 800d250:	3430      	adds	r4, #48	@ 0x30
 800d252:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d256:	460c      	mov	r4, r1
 800d258:	2c63      	cmp	r4, #99	@ 0x63
 800d25a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d25e:	4631      	mov	r1, r6
 800d260:	dcf1      	bgt.n	800d246 <__exponent+0x1c>
 800d262:	3130      	adds	r1, #48	@ 0x30
 800d264:	1e94      	subs	r4, r2, #2
 800d266:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d26a:	1c41      	adds	r1, r0, #1
 800d26c:	4623      	mov	r3, r4
 800d26e:	42ab      	cmp	r3, r5
 800d270:	d30a      	bcc.n	800d288 <__exponent+0x5e>
 800d272:	f10d 0309 	add.w	r3, sp, #9
 800d276:	1a9b      	subs	r3, r3, r2
 800d278:	42ac      	cmp	r4, r5
 800d27a:	bf88      	it	hi
 800d27c:	2300      	movhi	r3, #0
 800d27e:	3302      	adds	r3, #2
 800d280:	4403      	add	r3, r0
 800d282:	1a18      	subs	r0, r3, r0
 800d284:	b003      	add	sp, #12
 800d286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d288:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d28c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d290:	e7ed      	b.n	800d26e <__exponent+0x44>
 800d292:	2330      	movs	r3, #48	@ 0x30
 800d294:	3130      	adds	r1, #48	@ 0x30
 800d296:	7083      	strb	r3, [r0, #2]
 800d298:	70c1      	strb	r1, [r0, #3]
 800d29a:	1d03      	adds	r3, r0, #4
 800d29c:	e7f1      	b.n	800d282 <__exponent+0x58>
	...

0800d2a0 <_printf_float>:
 800d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	b08d      	sub	sp, #52	@ 0x34
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d2ac:	4616      	mov	r6, r2
 800d2ae:	461f      	mov	r7, r3
 800d2b0:	4605      	mov	r5, r0
 800d2b2:	f000 fe27 	bl	800df04 <_localeconv_r>
 800d2b6:	6803      	ldr	r3, [r0, #0]
 800d2b8:	9304      	str	r3, [sp, #16]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7f3 f810 	bl	80002e0 <strlen>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2c8:	9005      	str	r0, [sp, #20]
 800d2ca:	3307      	adds	r3, #7
 800d2cc:	f023 0307 	bic.w	r3, r3, #7
 800d2d0:	f103 0208 	add.w	r2, r3, #8
 800d2d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d2d8:	f8d4 b000 	ldr.w	fp, [r4]
 800d2dc:	f8c8 2000 	str.w	r2, [r8]
 800d2e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d2e8:	9307      	str	r3, [sp, #28]
 800d2ea:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d2f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2f6:	4b9c      	ldr	r3, [pc, #624]	@ (800d568 <_printf_float+0x2c8>)
 800d2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2fc:	f7f3 fc4e 	bl	8000b9c <__aeabi_dcmpun>
 800d300:	bb70      	cbnz	r0, 800d360 <_printf_float+0xc0>
 800d302:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d306:	4b98      	ldr	r3, [pc, #608]	@ (800d568 <_printf_float+0x2c8>)
 800d308:	f04f 32ff 	mov.w	r2, #4294967295
 800d30c:	f7f3 fc28 	bl	8000b60 <__aeabi_dcmple>
 800d310:	bb30      	cbnz	r0, 800d360 <_printf_float+0xc0>
 800d312:	2200      	movs	r2, #0
 800d314:	2300      	movs	r3, #0
 800d316:	4640      	mov	r0, r8
 800d318:	4649      	mov	r1, r9
 800d31a:	f7f3 fc17 	bl	8000b4c <__aeabi_dcmplt>
 800d31e:	b110      	cbz	r0, 800d326 <_printf_float+0x86>
 800d320:	232d      	movs	r3, #45	@ 0x2d
 800d322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d326:	4a91      	ldr	r2, [pc, #580]	@ (800d56c <_printf_float+0x2cc>)
 800d328:	4b91      	ldr	r3, [pc, #580]	@ (800d570 <_printf_float+0x2d0>)
 800d32a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d32e:	bf8c      	ite	hi
 800d330:	4690      	movhi	r8, r2
 800d332:	4698      	movls	r8, r3
 800d334:	2303      	movs	r3, #3
 800d336:	6123      	str	r3, [r4, #16]
 800d338:	f02b 0304 	bic.w	r3, fp, #4
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	f04f 0900 	mov.w	r9, #0
 800d342:	9700      	str	r7, [sp, #0]
 800d344:	4633      	mov	r3, r6
 800d346:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d348:	4621      	mov	r1, r4
 800d34a:	4628      	mov	r0, r5
 800d34c:	f000 f9d2 	bl	800d6f4 <_printf_common>
 800d350:	3001      	adds	r0, #1
 800d352:	f040 808d 	bne.w	800d470 <_printf_float+0x1d0>
 800d356:	f04f 30ff 	mov.w	r0, #4294967295
 800d35a:	b00d      	add	sp, #52	@ 0x34
 800d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d360:	4642      	mov	r2, r8
 800d362:	464b      	mov	r3, r9
 800d364:	4640      	mov	r0, r8
 800d366:	4649      	mov	r1, r9
 800d368:	f7f3 fc18 	bl	8000b9c <__aeabi_dcmpun>
 800d36c:	b140      	cbz	r0, 800d380 <_printf_float+0xe0>
 800d36e:	464b      	mov	r3, r9
 800d370:	2b00      	cmp	r3, #0
 800d372:	bfbc      	itt	lt
 800d374:	232d      	movlt	r3, #45	@ 0x2d
 800d376:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d37a:	4a7e      	ldr	r2, [pc, #504]	@ (800d574 <_printf_float+0x2d4>)
 800d37c:	4b7e      	ldr	r3, [pc, #504]	@ (800d578 <_printf_float+0x2d8>)
 800d37e:	e7d4      	b.n	800d32a <_printf_float+0x8a>
 800d380:	6863      	ldr	r3, [r4, #4]
 800d382:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d386:	9206      	str	r2, [sp, #24]
 800d388:	1c5a      	adds	r2, r3, #1
 800d38a:	d13b      	bne.n	800d404 <_printf_float+0x164>
 800d38c:	2306      	movs	r3, #6
 800d38e:	6063      	str	r3, [r4, #4]
 800d390:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d394:	2300      	movs	r3, #0
 800d396:	6022      	str	r2, [r4, #0]
 800d398:	9303      	str	r3, [sp, #12]
 800d39a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d39c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d3a0:	ab09      	add	r3, sp, #36	@ 0x24
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	6861      	ldr	r1, [r4, #4]
 800d3a6:	ec49 8b10 	vmov	d0, r8, r9
 800d3aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f7ff fed6 	bl	800d160 <__cvt>
 800d3b4:	9b06      	ldr	r3, [sp, #24]
 800d3b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3b8:	2b47      	cmp	r3, #71	@ 0x47
 800d3ba:	4680      	mov	r8, r0
 800d3bc:	d129      	bne.n	800d412 <_printf_float+0x172>
 800d3be:	1cc8      	adds	r0, r1, #3
 800d3c0:	db02      	blt.n	800d3c8 <_printf_float+0x128>
 800d3c2:	6863      	ldr	r3, [r4, #4]
 800d3c4:	4299      	cmp	r1, r3
 800d3c6:	dd41      	ble.n	800d44c <_printf_float+0x1ac>
 800d3c8:	f1aa 0a02 	sub.w	sl, sl, #2
 800d3cc:	fa5f fa8a 	uxtb.w	sl, sl
 800d3d0:	3901      	subs	r1, #1
 800d3d2:	4652      	mov	r2, sl
 800d3d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d3d8:	9109      	str	r1, [sp, #36]	@ 0x24
 800d3da:	f7ff ff26 	bl	800d22a <__exponent>
 800d3de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3e0:	1813      	adds	r3, r2, r0
 800d3e2:	2a01      	cmp	r2, #1
 800d3e4:	4681      	mov	r9, r0
 800d3e6:	6123      	str	r3, [r4, #16]
 800d3e8:	dc02      	bgt.n	800d3f0 <_printf_float+0x150>
 800d3ea:	6822      	ldr	r2, [r4, #0]
 800d3ec:	07d2      	lsls	r2, r2, #31
 800d3ee:	d501      	bpl.n	800d3f4 <_printf_float+0x154>
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	6123      	str	r3, [r4, #16]
 800d3f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d0a2      	beq.n	800d342 <_printf_float+0xa2>
 800d3fc:	232d      	movs	r3, #45	@ 0x2d
 800d3fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d402:	e79e      	b.n	800d342 <_printf_float+0xa2>
 800d404:	9a06      	ldr	r2, [sp, #24]
 800d406:	2a47      	cmp	r2, #71	@ 0x47
 800d408:	d1c2      	bne.n	800d390 <_printf_float+0xf0>
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1c0      	bne.n	800d390 <_printf_float+0xf0>
 800d40e:	2301      	movs	r3, #1
 800d410:	e7bd      	b.n	800d38e <_printf_float+0xee>
 800d412:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d416:	d9db      	bls.n	800d3d0 <_printf_float+0x130>
 800d418:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d41c:	d118      	bne.n	800d450 <_printf_float+0x1b0>
 800d41e:	2900      	cmp	r1, #0
 800d420:	6863      	ldr	r3, [r4, #4]
 800d422:	dd0b      	ble.n	800d43c <_printf_float+0x19c>
 800d424:	6121      	str	r1, [r4, #16]
 800d426:	b913      	cbnz	r3, 800d42e <_printf_float+0x18e>
 800d428:	6822      	ldr	r2, [r4, #0]
 800d42a:	07d0      	lsls	r0, r2, #31
 800d42c:	d502      	bpl.n	800d434 <_printf_float+0x194>
 800d42e:	3301      	adds	r3, #1
 800d430:	440b      	add	r3, r1
 800d432:	6123      	str	r3, [r4, #16]
 800d434:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d436:	f04f 0900 	mov.w	r9, #0
 800d43a:	e7db      	b.n	800d3f4 <_printf_float+0x154>
 800d43c:	b913      	cbnz	r3, 800d444 <_printf_float+0x1a4>
 800d43e:	6822      	ldr	r2, [r4, #0]
 800d440:	07d2      	lsls	r2, r2, #31
 800d442:	d501      	bpl.n	800d448 <_printf_float+0x1a8>
 800d444:	3302      	adds	r3, #2
 800d446:	e7f4      	b.n	800d432 <_printf_float+0x192>
 800d448:	2301      	movs	r3, #1
 800d44a:	e7f2      	b.n	800d432 <_printf_float+0x192>
 800d44c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d452:	4299      	cmp	r1, r3
 800d454:	db05      	blt.n	800d462 <_printf_float+0x1c2>
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	6121      	str	r1, [r4, #16]
 800d45a:	07d8      	lsls	r0, r3, #31
 800d45c:	d5ea      	bpl.n	800d434 <_printf_float+0x194>
 800d45e:	1c4b      	adds	r3, r1, #1
 800d460:	e7e7      	b.n	800d432 <_printf_float+0x192>
 800d462:	2900      	cmp	r1, #0
 800d464:	bfd4      	ite	le
 800d466:	f1c1 0202 	rsble	r2, r1, #2
 800d46a:	2201      	movgt	r2, #1
 800d46c:	4413      	add	r3, r2
 800d46e:	e7e0      	b.n	800d432 <_printf_float+0x192>
 800d470:	6823      	ldr	r3, [r4, #0]
 800d472:	055a      	lsls	r2, r3, #21
 800d474:	d407      	bmi.n	800d486 <_printf_float+0x1e6>
 800d476:	6923      	ldr	r3, [r4, #16]
 800d478:	4642      	mov	r2, r8
 800d47a:	4631      	mov	r1, r6
 800d47c:	4628      	mov	r0, r5
 800d47e:	47b8      	blx	r7
 800d480:	3001      	adds	r0, #1
 800d482:	d12b      	bne.n	800d4dc <_printf_float+0x23c>
 800d484:	e767      	b.n	800d356 <_printf_float+0xb6>
 800d486:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d48a:	f240 80dd 	bls.w	800d648 <_printf_float+0x3a8>
 800d48e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d492:	2200      	movs	r2, #0
 800d494:	2300      	movs	r3, #0
 800d496:	f7f3 fb4f 	bl	8000b38 <__aeabi_dcmpeq>
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d033      	beq.n	800d506 <_printf_float+0x266>
 800d49e:	4a37      	ldr	r2, [pc, #220]	@ (800d57c <_printf_float+0x2dc>)
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	47b8      	blx	r7
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	f43f af54 	beq.w	800d356 <_printf_float+0xb6>
 800d4ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d4b2:	4543      	cmp	r3, r8
 800d4b4:	db02      	blt.n	800d4bc <_printf_float+0x21c>
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	07d8      	lsls	r0, r3, #31
 800d4ba:	d50f      	bpl.n	800d4dc <_printf_float+0x23c>
 800d4bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4c0:	4631      	mov	r1, r6
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	47b8      	blx	r7
 800d4c6:	3001      	adds	r0, #1
 800d4c8:	f43f af45 	beq.w	800d356 <_printf_float+0xb6>
 800d4cc:	f04f 0900 	mov.w	r9, #0
 800d4d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4d4:	f104 0a1a 	add.w	sl, r4, #26
 800d4d8:	45c8      	cmp	r8, r9
 800d4da:	dc09      	bgt.n	800d4f0 <_printf_float+0x250>
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	079b      	lsls	r3, r3, #30
 800d4e0:	f100 8103 	bmi.w	800d6ea <_printf_float+0x44a>
 800d4e4:	68e0      	ldr	r0, [r4, #12]
 800d4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4e8:	4298      	cmp	r0, r3
 800d4ea:	bfb8      	it	lt
 800d4ec:	4618      	movlt	r0, r3
 800d4ee:	e734      	b.n	800d35a <_printf_float+0xba>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	4652      	mov	r2, sl
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	47b8      	blx	r7
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	f43f af2b 	beq.w	800d356 <_printf_float+0xb6>
 800d500:	f109 0901 	add.w	r9, r9, #1
 800d504:	e7e8      	b.n	800d4d8 <_printf_float+0x238>
 800d506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d508:	2b00      	cmp	r3, #0
 800d50a:	dc39      	bgt.n	800d580 <_printf_float+0x2e0>
 800d50c:	4a1b      	ldr	r2, [pc, #108]	@ (800d57c <_printf_float+0x2dc>)
 800d50e:	2301      	movs	r3, #1
 800d510:	4631      	mov	r1, r6
 800d512:	4628      	mov	r0, r5
 800d514:	47b8      	blx	r7
 800d516:	3001      	adds	r0, #1
 800d518:	f43f af1d 	beq.w	800d356 <_printf_float+0xb6>
 800d51c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d520:	ea59 0303 	orrs.w	r3, r9, r3
 800d524:	d102      	bne.n	800d52c <_printf_float+0x28c>
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	07d9      	lsls	r1, r3, #31
 800d52a:	d5d7      	bpl.n	800d4dc <_printf_float+0x23c>
 800d52c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d530:	4631      	mov	r1, r6
 800d532:	4628      	mov	r0, r5
 800d534:	47b8      	blx	r7
 800d536:	3001      	adds	r0, #1
 800d538:	f43f af0d 	beq.w	800d356 <_printf_float+0xb6>
 800d53c:	f04f 0a00 	mov.w	sl, #0
 800d540:	f104 0b1a 	add.w	fp, r4, #26
 800d544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d546:	425b      	negs	r3, r3
 800d548:	4553      	cmp	r3, sl
 800d54a:	dc01      	bgt.n	800d550 <_printf_float+0x2b0>
 800d54c:	464b      	mov	r3, r9
 800d54e:	e793      	b.n	800d478 <_printf_float+0x1d8>
 800d550:	2301      	movs	r3, #1
 800d552:	465a      	mov	r2, fp
 800d554:	4631      	mov	r1, r6
 800d556:	4628      	mov	r0, r5
 800d558:	47b8      	blx	r7
 800d55a:	3001      	adds	r0, #1
 800d55c:	f43f aefb 	beq.w	800d356 <_printf_float+0xb6>
 800d560:	f10a 0a01 	add.w	sl, sl, #1
 800d564:	e7ee      	b.n	800d544 <_printf_float+0x2a4>
 800d566:	bf00      	nop
 800d568:	7fefffff 	.word	0x7fefffff
 800d56c:	08010ad4 	.word	0x08010ad4
 800d570:	08010ad0 	.word	0x08010ad0
 800d574:	08010adc 	.word	0x08010adc
 800d578:	08010ad8 	.word	0x08010ad8
 800d57c:	08010ae0 	.word	0x08010ae0
 800d580:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d582:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d586:	4553      	cmp	r3, sl
 800d588:	bfa8      	it	ge
 800d58a:	4653      	movge	r3, sl
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	4699      	mov	r9, r3
 800d590:	dc36      	bgt.n	800d600 <_printf_float+0x360>
 800d592:	f04f 0b00 	mov.w	fp, #0
 800d596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d59a:	f104 021a 	add.w	r2, r4, #26
 800d59e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5a0:	9306      	str	r3, [sp, #24]
 800d5a2:	eba3 0309 	sub.w	r3, r3, r9
 800d5a6:	455b      	cmp	r3, fp
 800d5a8:	dc31      	bgt.n	800d60e <_printf_float+0x36e>
 800d5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ac:	459a      	cmp	sl, r3
 800d5ae:	dc3a      	bgt.n	800d626 <_printf_float+0x386>
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	07da      	lsls	r2, r3, #31
 800d5b4:	d437      	bmi.n	800d626 <_printf_float+0x386>
 800d5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5b8:	ebaa 0903 	sub.w	r9, sl, r3
 800d5bc:	9b06      	ldr	r3, [sp, #24]
 800d5be:	ebaa 0303 	sub.w	r3, sl, r3
 800d5c2:	4599      	cmp	r9, r3
 800d5c4:	bfa8      	it	ge
 800d5c6:	4699      	movge	r9, r3
 800d5c8:	f1b9 0f00 	cmp.w	r9, #0
 800d5cc:	dc33      	bgt.n	800d636 <_printf_float+0x396>
 800d5ce:	f04f 0800 	mov.w	r8, #0
 800d5d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5d6:	f104 0b1a 	add.w	fp, r4, #26
 800d5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d5e0:	eba3 0309 	sub.w	r3, r3, r9
 800d5e4:	4543      	cmp	r3, r8
 800d5e6:	f77f af79 	ble.w	800d4dc <_printf_float+0x23c>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	465a      	mov	r2, fp
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	47b8      	blx	r7
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	f43f aeae 	beq.w	800d356 <_printf_float+0xb6>
 800d5fa:	f108 0801 	add.w	r8, r8, #1
 800d5fe:	e7ec      	b.n	800d5da <_printf_float+0x33a>
 800d600:	4642      	mov	r2, r8
 800d602:	4631      	mov	r1, r6
 800d604:	4628      	mov	r0, r5
 800d606:	47b8      	blx	r7
 800d608:	3001      	adds	r0, #1
 800d60a:	d1c2      	bne.n	800d592 <_printf_float+0x2f2>
 800d60c:	e6a3      	b.n	800d356 <_printf_float+0xb6>
 800d60e:	2301      	movs	r3, #1
 800d610:	4631      	mov	r1, r6
 800d612:	4628      	mov	r0, r5
 800d614:	9206      	str	r2, [sp, #24]
 800d616:	47b8      	blx	r7
 800d618:	3001      	adds	r0, #1
 800d61a:	f43f ae9c 	beq.w	800d356 <_printf_float+0xb6>
 800d61e:	9a06      	ldr	r2, [sp, #24]
 800d620:	f10b 0b01 	add.w	fp, fp, #1
 800d624:	e7bb      	b.n	800d59e <_printf_float+0x2fe>
 800d626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d62a:	4631      	mov	r1, r6
 800d62c:	4628      	mov	r0, r5
 800d62e:	47b8      	blx	r7
 800d630:	3001      	adds	r0, #1
 800d632:	d1c0      	bne.n	800d5b6 <_printf_float+0x316>
 800d634:	e68f      	b.n	800d356 <_printf_float+0xb6>
 800d636:	9a06      	ldr	r2, [sp, #24]
 800d638:	464b      	mov	r3, r9
 800d63a:	4442      	add	r2, r8
 800d63c:	4631      	mov	r1, r6
 800d63e:	4628      	mov	r0, r5
 800d640:	47b8      	blx	r7
 800d642:	3001      	adds	r0, #1
 800d644:	d1c3      	bne.n	800d5ce <_printf_float+0x32e>
 800d646:	e686      	b.n	800d356 <_printf_float+0xb6>
 800d648:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d64c:	f1ba 0f01 	cmp.w	sl, #1
 800d650:	dc01      	bgt.n	800d656 <_printf_float+0x3b6>
 800d652:	07db      	lsls	r3, r3, #31
 800d654:	d536      	bpl.n	800d6c4 <_printf_float+0x424>
 800d656:	2301      	movs	r3, #1
 800d658:	4642      	mov	r2, r8
 800d65a:	4631      	mov	r1, r6
 800d65c:	4628      	mov	r0, r5
 800d65e:	47b8      	blx	r7
 800d660:	3001      	adds	r0, #1
 800d662:	f43f ae78 	beq.w	800d356 <_printf_float+0xb6>
 800d666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d66a:	4631      	mov	r1, r6
 800d66c:	4628      	mov	r0, r5
 800d66e:	47b8      	blx	r7
 800d670:	3001      	adds	r0, #1
 800d672:	f43f ae70 	beq.w	800d356 <_printf_float+0xb6>
 800d676:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d67a:	2200      	movs	r2, #0
 800d67c:	2300      	movs	r3, #0
 800d67e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d682:	f7f3 fa59 	bl	8000b38 <__aeabi_dcmpeq>
 800d686:	b9c0      	cbnz	r0, 800d6ba <_printf_float+0x41a>
 800d688:	4653      	mov	r3, sl
 800d68a:	f108 0201 	add.w	r2, r8, #1
 800d68e:	4631      	mov	r1, r6
 800d690:	4628      	mov	r0, r5
 800d692:	47b8      	blx	r7
 800d694:	3001      	adds	r0, #1
 800d696:	d10c      	bne.n	800d6b2 <_printf_float+0x412>
 800d698:	e65d      	b.n	800d356 <_printf_float+0xb6>
 800d69a:	2301      	movs	r3, #1
 800d69c:	465a      	mov	r2, fp
 800d69e:	4631      	mov	r1, r6
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	47b8      	blx	r7
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	f43f ae56 	beq.w	800d356 <_printf_float+0xb6>
 800d6aa:	f108 0801 	add.w	r8, r8, #1
 800d6ae:	45d0      	cmp	r8, sl
 800d6b0:	dbf3      	blt.n	800d69a <_printf_float+0x3fa>
 800d6b2:	464b      	mov	r3, r9
 800d6b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d6b8:	e6df      	b.n	800d47a <_printf_float+0x1da>
 800d6ba:	f04f 0800 	mov.w	r8, #0
 800d6be:	f104 0b1a 	add.w	fp, r4, #26
 800d6c2:	e7f4      	b.n	800d6ae <_printf_float+0x40e>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	4642      	mov	r2, r8
 800d6c8:	e7e1      	b.n	800d68e <_printf_float+0x3ee>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	464a      	mov	r2, r9
 800d6ce:	4631      	mov	r1, r6
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	47b8      	blx	r7
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	f43f ae3e 	beq.w	800d356 <_printf_float+0xb6>
 800d6da:	f108 0801 	add.w	r8, r8, #1
 800d6de:	68e3      	ldr	r3, [r4, #12]
 800d6e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6e2:	1a5b      	subs	r3, r3, r1
 800d6e4:	4543      	cmp	r3, r8
 800d6e6:	dcf0      	bgt.n	800d6ca <_printf_float+0x42a>
 800d6e8:	e6fc      	b.n	800d4e4 <_printf_float+0x244>
 800d6ea:	f04f 0800 	mov.w	r8, #0
 800d6ee:	f104 0919 	add.w	r9, r4, #25
 800d6f2:	e7f4      	b.n	800d6de <_printf_float+0x43e>

0800d6f4 <_printf_common>:
 800d6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f8:	4616      	mov	r6, r2
 800d6fa:	4698      	mov	r8, r3
 800d6fc:	688a      	ldr	r2, [r1, #8]
 800d6fe:	690b      	ldr	r3, [r1, #16]
 800d700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d704:	4293      	cmp	r3, r2
 800d706:	bfb8      	it	lt
 800d708:	4613      	movlt	r3, r2
 800d70a:	6033      	str	r3, [r6, #0]
 800d70c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d710:	4607      	mov	r7, r0
 800d712:	460c      	mov	r4, r1
 800d714:	b10a      	cbz	r2, 800d71a <_printf_common+0x26>
 800d716:	3301      	adds	r3, #1
 800d718:	6033      	str	r3, [r6, #0]
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	0699      	lsls	r1, r3, #26
 800d71e:	bf42      	ittt	mi
 800d720:	6833      	ldrmi	r3, [r6, #0]
 800d722:	3302      	addmi	r3, #2
 800d724:	6033      	strmi	r3, [r6, #0]
 800d726:	6825      	ldr	r5, [r4, #0]
 800d728:	f015 0506 	ands.w	r5, r5, #6
 800d72c:	d106      	bne.n	800d73c <_printf_common+0x48>
 800d72e:	f104 0a19 	add.w	sl, r4, #25
 800d732:	68e3      	ldr	r3, [r4, #12]
 800d734:	6832      	ldr	r2, [r6, #0]
 800d736:	1a9b      	subs	r3, r3, r2
 800d738:	42ab      	cmp	r3, r5
 800d73a:	dc26      	bgt.n	800d78a <_printf_common+0x96>
 800d73c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	3b00      	subs	r3, #0
 800d744:	bf18      	it	ne
 800d746:	2301      	movne	r3, #1
 800d748:	0692      	lsls	r2, r2, #26
 800d74a:	d42b      	bmi.n	800d7a4 <_printf_common+0xb0>
 800d74c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d750:	4641      	mov	r1, r8
 800d752:	4638      	mov	r0, r7
 800d754:	47c8      	blx	r9
 800d756:	3001      	adds	r0, #1
 800d758:	d01e      	beq.n	800d798 <_printf_common+0xa4>
 800d75a:	6823      	ldr	r3, [r4, #0]
 800d75c:	6922      	ldr	r2, [r4, #16]
 800d75e:	f003 0306 	and.w	r3, r3, #6
 800d762:	2b04      	cmp	r3, #4
 800d764:	bf02      	ittt	eq
 800d766:	68e5      	ldreq	r5, [r4, #12]
 800d768:	6833      	ldreq	r3, [r6, #0]
 800d76a:	1aed      	subeq	r5, r5, r3
 800d76c:	68a3      	ldr	r3, [r4, #8]
 800d76e:	bf0c      	ite	eq
 800d770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d774:	2500      	movne	r5, #0
 800d776:	4293      	cmp	r3, r2
 800d778:	bfc4      	itt	gt
 800d77a:	1a9b      	subgt	r3, r3, r2
 800d77c:	18ed      	addgt	r5, r5, r3
 800d77e:	2600      	movs	r6, #0
 800d780:	341a      	adds	r4, #26
 800d782:	42b5      	cmp	r5, r6
 800d784:	d11a      	bne.n	800d7bc <_printf_common+0xc8>
 800d786:	2000      	movs	r0, #0
 800d788:	e008      	b.n	800d79c <_printf_common+0xa8>
 800d78a:	2301      	movs	r3, #1
 800d78c:	4652      	mov	r2, sl
 800d78e:	4641      	mov	r1, r8
 800d790:	4638      	mov	r0, r7
 800d792:	47c8      	blx	r9
 800d794:	3001      	adds	r0, #1
 800d796:	d103      	bne.n	800d7a0 <_printf_common+0xac>
 800d798:	f04f 30ff 	mov.w	r0, #4294967295
 800d79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a0:	3501      	adds	r5, #1
 800d7a2:	e7c6      	b.n	800d732 <_printf_common+0x3e>
 800d7a4:	18e1      	adds	r1, r4, r3
 800d7a6:	1c5a      	adds	r2, r3, #1
 800d7a8:	2030      	movs	r0, #48	@ 0x30
 800d7aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d7ae:	4422      	add	r2, r4
 800d7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7b8:	3302      	adds	r3, #2
 800d7ba:	e7c7      	b.n	800d74c <_printf_common+0x58>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	4622      	mov	r2, r4
 800d7c0:	4641      	mov	r1, r8
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	47c8      	blx	r9
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	d0e6      	beq.n	800d798 <_printf_common+0xa4>
 800d7ca:	3601      	adds	r6, #1
 800d7cc:	e7d9      	b.n	800d782 <_printf_common+0x8e>
	...

0800d7d0 <_printf_i>:
 800d7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d4:	7e0f      	ldrb	r7, [r1, #24]
 800d7d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7d8:	2f78      	cmp	r7, #120	@ 0x78
 800d7da:	4691      	mov	r9, r2
 800d7dc:	4680      	mov	r8, r0
 800d7de:	460c      	mov	r4, r1
 800d7e0:	469a      	mov	sl, r3
 800d7e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d7e6:	d807      	bhi.n	800d7f8 <_printf_i+0x28>
 800d7e8:	2f62      	cmp	r7, #98	@ 0x62
 800d7ea:	d80a      	bhi.n	800d802 <_printf_i+0x32>
 800d7ec:	2f00      	cmp	r7, #0
 800d7ee:	f000 80d1 	beq.w	800d994 <_printf_i+0x1c4>
 800d7f2:	2f58      	cmp	r7, #88	@ 0x58
 800d7f4:	f000 80b8 	beq.w	800d968 <_printf_i+0x198>
 800d7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d800:	e03a      	b.n	800d878 <_printf_i+0xa8>
 800d802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d806:	2b15      	cmp	r3, #21
 800d808:	d8f6      	bhi.n	800d7f8 <_printf_i+0x28>
 800d80a:	a101      	add	r1, pc, #4	@ (adr r1, 800d810 <_printf_i+0x40>)
 800d80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d810:	0800d869 	.word	0x0800d869
 800d814:	0800d87d 	.word	0x0800d87d
 800d818:	0800d7f9 	.word	0x0800d7f9
 800d81c:	0800d7f9 	.word	0x0800d7f9
 800d820:	0800d7f9 	.word	0x0800d7f9
 800d824:	0800d7f9 	.word	0x0800d7f9
 800d828:	0800d87d 	.word	0x0800d87d
 800d82c:	0800d7f9 	.word	0x0800d7f9
 800d830:	0800d7f9 	.word	0x0800d7f9
 800d834:	0800d7f9 	.word	0x0800d7f9
 800d838:	0800d7f9 	.word	0x0800d7f9
 800d83c:	0800d97b 	.word	0x0800d97b
 800d840:	0800d8a7 	.word	0x0800d8a7
 800d844:	0800d935 	.word	0x0800d935
 800d848:	0800d7f9 	.word	0x0800d7f9
 800d84c:	0800d7f9 	.word	0x0800d7f9
 800d850:	0800d99d 	.word	0x0800d99d
 800d854:	0800d7f9 	.word	0x0800d7f9
 800d858:	0800d8a7 	.word	0x0800d8a7
 800d85c:	0800d7f9 	.word	0x0800d7f9
 800d860:	0800d7f9 	.word	0x0800d7f9
 800d864:	0800d93d 	.word	0x0800d93d
 800d868:	6833      	ldr	r3, [r6, #0]
 800d86a:	1d1a      	adds	r2, r3, #4
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	6032      	str	r2, [r6, #0]
 800d870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d878:	2301      	movs	r3, #1
 800d87a:	e09c      	b.n	800d9b6 <_printf_i+0x1e6>
 800d87c:	6833      	ldr	r3, [r6, #0]
 800d87e:	6820      	ldr	r0, [r4, #0]
 800d880:	1d19      	adds	r1, r3, #4
 800d882:	6031      	str	r1, [r6, #0]
 800d884:	0606      	lsls	r6, r0, #24
 800d886:	d501      	bpl.n	800d88c <_printf_i+0xbc>
 800d888:	681d      	ldr	r5, [r3, #0]
 800d88a:	e003      	b.n	800d894 <_printf_i+0xc4>
 800d88c:	0645      	lsls	r5, r0, #25
 800d88e:	d5fb      	bpl.n	800d888 <_printf_i+0xb8>
 800d890:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d894:	2d00      	cmp	r5, #0
 800d896:	da03      	bge.n	800d8a0 <_printf_i+0xd0>
 800d898:	232d      	movs	r3, #45	@ 0x2d
 800d89a:	426d      	negs	r5, r5
 800d89c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8a0:	4858      	ldr	r0, [pc, #352]	@ (800da04 <_printf_i+0x234>)
 800d8a2:	230a      	movs	r3, #10
 800d8a4:	e011      	b.n	800d8ca <_printf_i+0xfa>
 800d8a6:	6821      	ldr	r1, [r4, #0]
 800d8a8:	6833      	ldr	r3, [r6, #0]
 800d8aa:	0608      	lsls	r0, r1, #24
 800d8ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800d8b0:	d402      	bmi.n	800d8b8 <_printf_i+0xe8>
 800d8b2:	0649      	lsls	r1, r1, #25
 800d8b4:	bf48      	it	mi
 800d8b6:	b2ad      	uxthmi	r5, r5
 800d8b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8ba:	4852      	ldr	r0, [pc, #328]	@ (800da04 <_printf_i+0x234>)
 800d8bc:	6033      	str	r3, [r6, #0]
 800d8be:	bf14      	ite	ne
 800d8c0:	230a      	movne	r3, #10
 800d8c2:	2308      	moveq	r3, #8
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d8ca:	6866      	ldr	r6, [r4, #4]
 800d8cc:	60a6      	str	r6, [r4, #8]
 800d8ce:	2e00      	cmp	r6, #0
 800d8d0:	db05      	blt.n	800d8de <_printf_i+0x10e>
 800d8d2:	6821      	ldr	r1, [r4, #0]
 800d8d4:	432e      	orrs	r6, r5
 800d8d6:	f021 0104 	bic.w	r1, r1, #4
 800d8da:	6021      	str	r1, [r4, #0]
 800d8dc:	d04b      	beq.n	800d976 <_printf_i+0x1a6>
 800d8de:	4616      	mov	r6, r2
 800d8e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8e4:	fb03 5711 	mls	r7, r3, r1, r5
 800d8e8:	5dc7      	ldrb	r7, [r0, r7]
 800d8ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8ee:	462f      	mov	r7, r5
 800d8f0:	42bb      	cmp	r3, r7
 800d8f2:	460d      	mov	r5, r1
 800d8f4:	d9f4      	bls.n	800d8e0 <_printf_i+0x110>
 800d8f6:	2b08      	cmp	r3, #8
 800d8f8:	d10b      	bne.n	800d912 <_printf_i+0x142>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	07df      	lsls	r7, r3, #31
 800d8fe:	d508      	bpl.n	800d912 <_printf_i+0x142>
 800d900:	6923      	ldr	r3, [r4, #16]
 800d902:	6861      	ldr	r1, [r4, #4]
 800d904:	4299      	cmp	r1, r3
 800d906:	bfde      	ittt	le
 800d908:	2330      	movle	r3, #48	@ 0x30
 800d90a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d90e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d912:	1b92      	subs	r2, r2, r6
 800d914:	6122      	str	r2, [r4, #16]
 800d916:	f8cd a000 	str.w	sl, [sp]
 800d91a:	464b      	mov	r3, r9
 800d91c:	aa03      	add	r2, sp, #12
 800d91e:	4621      	mov	r1, r4
 800d920:	4640      	mov	r0, r8
 800d922:	f7ff fee7 	bl	800d6f4 <_printf_common>
 800d926:	3001      	adds	r0, #1
 800d928:	d14a      	bne.n	800d9c0 <_printf_i+0x1f0>
 800d92a:	f04f 30ff 	mov.w	r0, #4294967295
 800d92e:	b004      	add	sp, #16
 800d930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d934:	6823      	ldr	r3, [r4, #0]
 800d936:	f043 0320 	orr.w	r3, r3, #32
 800d93a:	6023      	str	r3, [r4, #0]
 800d93c:	4832      	ldr	r0, [pc, #200]	@ (800da08 <_printf_i+0x238>)
 800d93e:	2778      	movs	r7, #120	@ 0x78
 800d940:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d944:	6823      	ldr	r3, [r4, #0]
 800d946:	6831      	ldr	r1, [r6, #0]
 800d948:	061f      	lsls	r7, r3, #24
 800d94a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d94e:	d402      	bmi.n	800d956 <_printf_i+0x186>
 800d950:	065f      	lsls	r7, r3, #25
 800d952:	bf48      	it	mi
 800d954:	b2ad      	uxthmi	r5, r5
 800d956:	6031      	str	r1, [r6, #0]
 800d958:	07d9      	lsls	r1, r3, #31
 800d95a:	bf44      	itt	mi
 800d95c:	f043 0320 	orrmi.w	r3, r3, #32
 800d960:	6023      	strmi	r3, [r4, #0]
 800d962:	b11d      	cbz	r5, 800d96c <_printf_i+0x19c>
 800d964:	2310      	movs	r3, #16
 800d966:	e7ad      	b.n	800d8c4 <_printf_i+0xf4>
 800d968:	4826      	ldr	r0, [pc, #152]	@ (800da04 <_printf_i+0x234>)
 800d96a:	e7e9      	b.n	800d940 <_printf_i+0x170>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	f023 0320 	bic.w	r3, r3, #32
 800d972:	6023      	str	r3, [r4, #0]
 800d974:	e7f6      	b.n	800d964 <_printf_i+0x194>
 800d976:	4616      	mov	r6, r2
 800d978:	e7bd      	b.n	800d8f6 <_printf_i+0x126>
 800d97a:	6833      	ldr	r3, [r6, #0]
 800d97c:	6825      	ldr	r5, [r4, #0]
 800d97e:	6961      	ldr	r1, [r4, #20]
 800d980:	1d18      	adds	r0, r3, #4
 800d982:	6030      	str	r0, [r6, #0]
 800d984:	062e      	lsls	r6, r5, #24
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	d501      	bpl.n	800d98e <_printf_i+0x1be>
 800d98a:	6019      	str	r1, [r3, #0]
 800d98c:	e002      	b.n	800d994 <_printf_i+0x1c4>
 800d98e:	0668      	lsls	r0, r5, #25
 800d990:	d5fb      	bpl.n	800d98a <_printf_i+0x1ba>
 800d992:	8019      	strh	r1, [r3, #0]
 800d994:	2300      	movs	r3, #0
 800d996:	6123      	str	r3, [r4, #16]
 800d998:	4616      	mov	r6, r2
 800d99a:	e7bc      	b.n	800d916 <_printf_i+0x146>
 800d99c:	6833      	ldr	r3, [r6, #0]
 800d99e:	1d1a      	adds	r2, r3, #4
 800d9a0:	6032      	str	r2, [r6, #0]
 800d9a2:	681e      	ldr	r6, [r3, #0]
 800d9a4:	6862      	ldr	r2, [r4, #4]
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7f2 fc49 	bl	8000240 <memchr>
 800d9ae:	b108      	cbz	r0, 800d9b4 <_printf_i+0x1e4>
 800d9b0:	1b80      	subs	r0, r0, r6
 800d9b2:	6060      	str	r0, [r4, #4]
 800d9b4:	6863      	ldr	r3, [r4, #4]
 800d9b6:	6123      	str	r3, [r4, #16]
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9be:	e7aa      	b.n	800d916 <_printf_i+0x146>
 800d9c0:	6923      	ldr	r3, [r4, #16]
 800d9c2:	4632      	mov	r2, r6
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	4640      	mov	r0, r8
 800d9c8:	47d0      	blx	sl
 800d9ca:	3001      	adds	r0, #1
 800d9cc:	d0ad      	beq.n	800d92a <_printf_i+0x15a>
 800d9ce:	6823      	ldr	r3, [r4, #0]
 800d9d0:	079b      	lsls	r3, r3, #30
 800d9d2:	d413      	bmi.n	800d9fc <_printf_i+0x22c>
 800d9d4:	68e0      	ldr	r0, [r4, #12]
 800d9d6:	9b03      	ldr	r3, [sp, #12]
 800d9d8:	4298      	cmp	r0, r3
 800d9da:	bfb8      	it	lt
 800d9dc:	4618      	movlt	r0, r3
 800d9de:	e7a6      	b.n	800d92e <_printf_i+0x15e>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	4632      	mov	r2, r6
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	47d0      	blx	sl
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d09d      	beq.n	800d92a <_printf_i+0x15a>
 800d9ee:	3501      	adds	r5, #1
 800d9f0:	68e3      	ldr	r3, [r4, #12]
 800d9f2:	9903      	ldr	r1, [sp, #12]
 800d9f4:	1a5b      	subs	r3, r3, r1
 800d9f6:	42ab      	cmp	r3, r5
 800d9f8:	dcf2      	bgt.n	800d9e0 <_printf_i+0x210>
 800d9fa:	e7eb      	b.n	800d9d4 <_printf_i+0x204>
 800d9fc:	2500      	movs	r5, #0
 800d9fe:	f104 0619 	add.w	r6, r4, #25
 800da02:	e7f5      	b.n	800d9f0 <_printf_i+0x220>
 800da04:	08010ae2 	.word	0x08010ae2
 800da08:	08010af3 	.word	0x08010af3

0800da0c <std>:
 800da0c:	2300      	movs	r3, #0
 800da0e:	b510      	push	{r4, lr}
 800da10:	4604      	mov	r4, r0
 800da12:	e9c0 3300 	strd	r3, r3, [r0]
 800da16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da1a:	6083      	str	r3, [r0, #8]
 800da1c:	8181      	strh	r1, [r0, #12]
 800da1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800da20:	81c2      	strh	r2, [r0, #14]
 800da22:	6183      	str	r3, [r0, #24]
 800da24:	4619      	mov	r1, r3
 800da26:	2208      	movs	r2, #8
 800da28:	305c      	adds	r0, #92	@ 0x5c
 800da2a:	f000 fa51 	bl	800ded0 <memset>
 800da2e:	4b0d      	ldr	r3, [pc, #52]	@ (800da64 <std+0x58>)
 800da30:	6263      	str	r3, [r4, #36]	@ 0x24
 800da32:	4b0d      	ldr	r3, [pc, #52]	@ (800da68 <std+0x5c>)
 800da34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da36:	4b0d      	ldr	r3, [pc, #52]	@ (800da6c <std+0x60>)
 800da38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da3a:	4b0d      	ldr	r3, [pc, #52]	@ (800da70 <std+0x64>)
 800da3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800da3e:	4b0d      	ldr	r3, [pc, #52]	@ (800da74 <std+0x68>)
 800da40:	6224      	str	r4, [r4, #32]
 800da42:	429c      	cmp	r4, r3
 800da44:	d006      	beq.n	800da54 <std+0x48>
 800da46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da4a:	4294      	cmp	r4, r2
 800da4c:	d002      	beq.n	800da54 <std+0x48>
 800da4e:	33d0      	adds	r3, #208	@ 0xd0
 800da50:	429c      	cmp	r4, r3
 800da52:	d105      	bne.n	800da60 <std+0x54>
 800da54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da5c:	f000 bac6 	b.w	800dfec <__retarget_lock_init_recursive>
 800da60:	bd10      	pop	{r4, pc}
 800da62:	bf00      	nop
 800da64:	0800dd21 	.word	0x0800dd21
 800da68:	0800dd43 	.word	0x0800dd43
 800da6c:	0800dd7b 	.word	0x0800dd7b
 800da70:	0800dd9f 	.word	0x0800dd9f
 800da74:	200025ac 	.word	0x200025ac

0800da78 <stdio_exit_handler>:
 800da78:	4a02      	ldr	r2, [pc, #8]	@ (800da84 <stdio_exit_handler+0xc>)
 800da7a:	4903      	ldr	r1, [pc, #12]	@ (800da88 <stdio_exit_handler+0x10>)
 800da7c:	4803      	ldr	r0, [pc, #12]	@ (800da8c <stdio_exit_handler+0x14>)
 800da7e:	f000 b869 	b.w	800db54 <_fwalk_sglue>
 800da82:	bf00      	nop
 800da84:	2000005c 	.word	0x2000005c
 800da88:	0800fc11 	.word	0x0800fc11
 800da8c:	2000006c 	.word	0x2000006c

0800da90 <cleanup_stdio>:
 800da90:	6841      	ldr	r1, [r0, #4]
 800da92:	4b0c      	ldr	r3, [pc, #48]	@ (800dac4 <cleanup_stdio+0x34>)
 800da94:	4299      	cmp	r1, r3
 800da96:	b510      	push	{r4, lr}
 800da98:	4604      	mov	r4, r0
 800da9a:	d001      	beq.n	800daa0 <cleanup_stdio+0x10>
 800da9c:	f002 f8b8 	bl	800fc10 <_fflush_r>
 800daa0:	68a1      	ldr	r1, [r4, #8]
 800daa2:	4b09      	ldr	r3, [pc, #36]	@ (800dac8 <cleanup_stdio+0x38>)
 800daa4:	4299      	cmp	r1, r3
 800daa6:	d002      	beq.n	800daae <cleanup_stdio+0x1e>
 800daa8:	4620      	mov	r0, r4
 800daaa:	f002 f8b1 	bl	800fc10 <_fflush_r>
 800daae:	68e1      	ldr	r1, [r4, #12]
 800dab0:	4b06      	ldr	r3, [pc, #24]	@ (800dacc <cleanup_stdio+0x3c>)
 800dab2:	4299      	cmp	r1, r3
 800dab4:	d004      	beq.n	800dac0 <cleanup_stdio+0x30>
 800dab6:	4620      	mov	r0, r4
 800dab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dabc:	f002 b8a8 	b.w	800fc10 <_fflush_r>
 800dac0:	bd10      	pop	{r4, pc}
 800dac2:	bf00      	nop
 800dac4:	200025ac 	.word	0x200025ac
 800dac8:	20002614 	.word	0x20002614
 800dacc:	2000267c 	.word	0x2000267c

0800dad0 <global_stdio_init.part.0>:
 800dad0:	b510      	push	{r4, lr}
 800dad2:	4b0b      	ldr	r3, [pc, #44]	@ (800db00 <global_stdio_init.part.0+0x30>)
 800dad4:	4c0b      	ldr	r4, [pc, #44]	@ (800db04 <global_stdio_init.part.0+0x34>)
 800dad6:	4a0c      	ldr	r2, [pc, #48]	@ (800db08 <global_stdio_init.part.0+0x38>)
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	4620      	mov	r0, r4
 800dadc:	2200      	movs	r2, #0
 800dade:	2104      	movs	r1, #4
 800dae0:	f7ff ff94 	bl	800da0c <std>
 800dae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dae8:	2201      	movs	r2, #1
 800daea:	2109      	movs	r1, #9
 800daec:	f7ff ff8e 	bl	800da0c <std>
 800daf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800daf4:	2202      	movs	r2, #2
 800daf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dafa:	2112      	movs	r1, #18
 800dafc:	f7ff bf86 	b.w	800da0c <std>
 800db00:	200026e4 	.word	0x200026e4
 800db04:	200025ac 	.word	0x200025ac
 800db08:	0800da79 	.word	0x0800da79

0800db0c <__sfp_lock_acquire>:
 800db0c:	4801      	ldr	r0, [pc, #4]	@ (800db14 <__sfp_lock_acquire+0x8>)
 800db0e:	f000 ba6e 	b.w	800dfee <__retarget_lock_acquire_recursive>
 800db12:	bf00      	nop
 800db14:	200026ed 	.word	0x200026ed

0800db18 <__sfp_lock_release>:
 800db18:	4801      	ldr	r0, [pc, #4]	@ (800db20 <__sfp_lock_release+0x8>)
 800db1a:	f000 ba69 	b.w	800dff0 <__retarget_lock_release_recursive>
 800db1e:	bf00      	nop
 800db20:	200026ed 	.word	0x200026ed

0800db24 <__sinit>:
 800db24:	b510      	push	{r4, lr}
 800db26:	4604      	mov	r4, r0
 800db28:	f7ff fff0 	bl	800db0c <__sfp_lock_acquire>
 800db2c:	6a23      	ldr	r3, [r4, #32]
 800db2e:	b11b      	cbz	r3, 800db38 <__sinit+0x14>
 800db30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db34:	f7ff bff0 	b.w	800db18 <__sfp_lock_release>
 800db38:	4b04      	ldr	r3, [pc, #16]	@ (800db4c <__sinit+0x28>)
 800db3a:	6223      	str	r3, [r4, #32]
 800db3c:	4b04      	ldr	r3, [pc, #16]	@ (800db50 <__sinit+0x2c>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1f5      	bne.n	800db30 <__sinit+0xc>
 800db44:	f7ff ffc4 	bl	800dad0 <global_stdio_init.part.0>
 800db48:	e7f2      	b.n	800db30 <__sinit+0xc>
 800db4a:	bf00      	nop
 800db4c:	0800da91 	.word	0x0800da91
 800db50:	200026e4 	.word	0x200026e4

0800db54 <_fwalk_sglue>:
 800db54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db58:	4607      	mov	r7, r0
 800db5a:	4688      	mov	r8, r1
 800db5c:	4614      	mov	r4, r2
 800db5e:	2600      	movs	r6, #0
 800db60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db64:	f1b9 0901 	subs.w	r9, r9, #1
 800db68:	d505      	bpl.n	800db76 <_fwalk_sglue+0x22>
 800db6a:	6824      	ldr	r4, [r4, #0]
 800db6c:	2c00      	cmp	r4, #0
 800db6e:	d1f7      	bne.n	800db60 <_fwalk_sglue+0xc>
 800db70:	4630      	mov	r0, r6
 800db72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db76:	89ab      	ldrh	r3, [r5, #12]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d907      	bls.n	800db8c <_fwalk_sglue+0x38>
 800db7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db80:	3301      	adds	r3, #1
 800db82:	d003      	beq.n	800db8c <_fwalk_sglue+0x38>
 800db84:	4629      	mov	r1, r5
 800db86:	4638      	mov	r0, r7
 800db88:	47c0      	blx	r8
 800db8a:	4306      	orrs	r6, r0
 800db8c:	3568      	adds	r5, #104	@ 0x68
 800db8e:	e7e9      	b.n	800db64 <_fwalk_sglue+0x10>

0800db90 <iprintf>:
 800db90:	b40f      	push	{r0, r1, r2, r3}
 800db92:	b507      	push	{r0, r1, r2, lr}
 800db94:	4906      	ldr	r1, [pc, #24]	@ (800dbb0 <iprintf+0x20>)
 800db96:	ab04      	add	r3, sp, #16
 800db98:	6808      	ldr	r0, [r1, #0]
 800db9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db9e:	6881      	ldr	r1, [r0, #8]
 800dba0:	9301      	str	r3, [sp, #4]
 800dba2:	f001 fe99 	bl	800f8d8 <_vfiprintf_r>
 800dba6:	b003      	add	sp, #12
 800dba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbac:	b004      	add	sp, #16
 800dbae:	4770      	bx	lr
 800dbb0:	20000068 	.word	0x20000068

0800dbb4 <_puts_r>:
 800dbb4:	6a03      	ldr	r3, [r0, #32]
 800dbb6:	b570      	push	{r4, r5, r6, lr}
 800dbb8:	6884      	ldr	r4, [r0, #8]
 800dbba:	4605      	mov	r5, r0
 800dbbc:	460e      	mov	r6, r1
 800dbbe:	b90b      	cbnz	r3, 800dbc4 <_puts_r+0x10>
 800dbc0:	f7ff ffb0 	bl	800db24 <__sinit>
 800dbc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbc6:	07db      	lsls	r3, r3, #31
 800dbc8:	d405      	bmi.n	800dbd6 <_puts_r+0x22>
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	0598      	lsls	r0, r3, #22
 800dbce:	d402      	bmi.n	800dbd6 <_puts_r+0x22>
 800dbd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbd2:	f000 fa0c 	bl	800dfee <__retarget_lock_acquire_recursive>
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	0719      	lsls	r1, r3, #28
 800dbda:	d502      	bpl.n	800dbe2 <_puts_r+0x2e>
 800dbdc:	6923      	ldr	r3, [r4, #16]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d135      	bne.n	800dc4e <_puts_r+0x9a>
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f000 f91d 	bl	800de24 <__swsetup_r>
 800dbea:	b380      	cbz	r0, 800dc4e <_puts_r+0x9a>
 800dbec:	f04f 35ff 	mov.w	r5, #4294967295
 800dbf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbf2:	07da      	lsls	r2, r3, #31
 800dbf4:	d405      	bmi.n	800dc02 <_puts_r+0x4e>
 800dbf6:	89a3      	ldrh	r3, [r4, #12]
 800dbf8:	059b      	lsls	r3, r3, #22
 800dbfa:	d402      	bmi.n	800dc02 <_puts_r+0x4e>
 800dbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbfe:	f000 f9f7 	bl	800dff0 <__retarget_lock_release_recursive>
 800dc02:	4628      	mov	r0, r5
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	da04      	bge.n	800dc14 <_puts_r+0x60>
 800dc0a:	69a2      	ldr	r2, [r4, #24]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	dc17      	bgt.n	800dc40 <_puts_r+0x8c>
 800dc10:	290a      	cmp	r1, #10
 800dc12:	d015      	beq.n	800dc40 <_puts_r+0x8c>
 800dc14:	6823      	ldr	r3, [r4, #0]
 800dc16:	1c5a      	adds	r2, r3, #1
 800dc18:	6022      	str	r2, [r4, #0]
 800dc1a:	7019      	strb	r1, [r3, #0]
 800dc1c:	68a3      	ldr	r3, [r4, #8]
 800dc1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc22:	3b01      	subs	r3, #1
 800dc24:	60a3      	str	r3, [r4, #8]
 800dc26:	2900      	cmp	r1, #0
 800dc28:	d1ed      	bne.n	800dc06 <_puts_r+0x52>
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	da11      	bge.n	800dc52 <_puts_r+0x9e>
 800dc2e:	4622      	mov	r2, r4
 800dc30:	210a      	movs	r1, #10
 800dc32:	4628      	mov	r0, r5
 800dc34:	f000 f8b7 	bl	800dda6 <__swbuf_r>
 800dc38:	3001      	adds	r0, #1
 800dc3a:	d0d7      	beq.n	800dbec <_puts_r+0x38>
 800dc3c:	250a      	movs	r5, #10
 800dc3e:	e7d7      	b.n	800dbf0 <_puts_r+0x3c>
 800dc40:	4622      	mov	r2, r4
 800dc42:	4628      	mov	r0, r5
 800dc44:	f000 f8af 	bl	800dda6 <__swbuf_r>
 800dc48:	3001      	adds	r0, #1
 800dc4a:	d1e7      	bne.n	800dc1c <_puts_r+0x68>
 800dc4c:	e7ce      	b.n	800dbec <_puts_r+0x38>
 800dc4e:	3e01      	subs	r6, #1
 800dc50:	e7e4      	b.n	800dc1c <_puts_r+0x68>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	6022      	str	r2, [r4, #0]
 800dc58:	220a      	movs	r2, #10
 800dc5a:	701a      	strb	r2, [r3, #0]
 800dc5c:	e7ee      	b.n	800dc3c <_puts_r+0x88>
	...

0800dc60 <puts>:
 800dc60:	4b02      	ldr	r3, [pc, #8]	@ (800dc6c <puts+0xc>)
 800dc62:	4601      	mov	r1, r0
 800dc64:	6818      	ldr	r0, [r3, #0]
 800dc66:	f7ff bfa5 	b.w	800dbb4 <_puts_r>
 800dc6a:	bf00      	nop
 800dc6c:	20000068 	.word	0x20000068

0800dc70 <sniprintf>:
 800dc70:	b40c      	push	{r2, r3}
 800dc72:	b530      	push	{r4, r5, lr}
 800dc74:	4b18      	ldr	r3, [pc, #96]	@ (800dcd8 <sniprintf+0x68>)
 800dc76:	1e0c      	subs	r4, r1, #0
 800dc78:	681d      	ldr	r5, [r3, #0]
 800dc7a:	b09d      	sub	sp, #116	@ 0x74
 800dc7c:	da08      	bge.n	800dc90 <sniprintf+0x20>
 800dc7e:	238b      	movs	r3, #139	@ 0x8b
 800dc80:	602b      	str	r3, [r5, #0]
 800dc82:	f04f 30ff 	mov.w	r0, #4294967295
 800dc86:	b01d      	add	sp, #116	@ 0x74
 800dc88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc8c:	b002      	add	sp, #8
 800dc8e:	4770      	bx	lr
 800dc90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dc94:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dc98:	f04f 0300 	mov.w	r3, #0
 800dc9c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800dc9e:	bf14      	ite	ne
 800dca0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dca4:	4623      	moveq	r3, r4
 800dca6:	9304      	str	r3, [sp, #16]
 800dca8:	9307      	str	r3, [sp, #28]
 800dcaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dcae:	9002      	str	r0, [sp, #8]
 800dcb0:	9006      	str	r0, [sp, #24]
 800dcb2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dcb6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dcb8:	ab21      	add	r3, sp, #132	@ 0x84
 800dcba:	a902      	add	r1, sp, #8
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	f001 fce4 	bl	800f68c <_svfiprintf_r>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	bfbc      	itt	lt
 800dcc8:	238b      	movlt	r3, #139	@ 0x8b
 800dcca:	602b      	strlt	r3, [r5, #0]
 800dccc:	2c00      	cmp	r4, #0
 800dcce:	d0da      	beq.n	800dc86 <sniprintf+0x16>
 800dcd0:	9b02      	ldr	r3, [sp, #8]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	701a      	strb	r2, [r3, #0]
 800dcd6:	e7d6      	b.n	800dc86 <sniprintf+0x16>
 800dcd8:	20000068 	.word	0x20000068

0800dcdc <siprintf>:
 800dcdc:	b40e      	push	{r1, r2, r3}
 800dcde:	b510      	push	{r4, lr}
 800dce0:	b09d      	sub	sp, #116	@ 0x74
 800dce2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800dce4:	9002      	str	r0, [sp, #8]
 800dce6:	9006      	str	r0, [sp, #24]
 800dce8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dcec:	480a      	ldr	r0, [pc, #40]	@ (800dd18 <siprintf+0x3c>)
 800dcee:	9107      	str	r1, [sp, #28]
 800dcf0:	9104      	str	r1, [sp, #16]
 800dcf2:	490a      	ldr	r1, [pc, #40]	@ (800dd1c <siprintf+0x40>)
 800dcf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcf8:	9105      	str	r1, [sp, #20]
 800dcfa:	2400      	movs	r4, #0
 800dcfc:	a902      	add	r1, sp, #8
 800dcfe:	6800      	ldr	r0, [r0, #0]
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	941b      	str	r4, [sp, #108]	@ 0x6c
 800dd04:	f001 fcc2 	bl	800f68c <_svfiprintf_r>
 800dd08:	9b02      	ldr	r3, [sp, #8]
 800dd0a:	701c      	strb	r4, [r3, #0]
 800dd0c:	b01d      	add	sp, #116	@ 0x74
 800dd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd12:	b003      	add	sp, #12
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20000068 	.word	0x20000068
 800dd1c:	ffff0208 	.word	0xffff0208

0800dd20 <__sread>:
 800dd20:	b510      	push	{r4, lr}
 800dd22:	460c      	mov	r4, r1
 800dd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd28:	f000 f912 	bl	800df50 <_read_r>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	bfab      	itete	ge
 800dd30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dd32:	89a3      	ldrhlt	r3, [r4, #12]
 800dd34:	181b      	addge	r3, r3, r0
 800dd36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dd3a:	bfac      	ite	ge
 800dd3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dd3e:	81a3      	strhlt	r3, [r4, #12]
 800dd40:	bd10      	pop	{r4, pc}

0800dd42 <__swrite>:
 800dd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd46:	461f      	mov	r7, r3
 800dd48:	898b      	ldrh	r3, [r1, #12]
 800dd4a:	05db      	lsls	r3, r3, #23
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	460c      	mov	r4, r1
 800dd50:	4616      	mov	r6, r2
 800dd52:	d505      	bpl.n	800dd60 <__swrite+0x1e>
 800dd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd58:	2302      	movs	r3, #2
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f000 f8e6 	bl	800df2c <_lseek_r>
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	4632      	mov	r2, r6
 800dd6e:	463b      	mov	r3, r7
 800dd70:	4628      	mov	r0, r5
 800dd72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd76:	f000 b8fd 	b.w	800df74 <_write_r>

0800dd7a <__sseek>:
 800dd7a:	b510      	push	{r4, lr}
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd82:	f000 f8d3 	bl	800df2c <_lseek_r>
 800dd86:	1c43      	adds	r3, r0, #1
 800dd88:	89a3      	ldrh	r3, [r4, #12]
 800dd8a:	bf15      	itete	ne
 800dd8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd96:	81a3      	strheq	r3, [r4, #12]
 800dd98:	bf18      	it	ne
 800dd9a:	81a3      	strhne	r3, [r4, #12]
 800dd9c:	bd10      	pop	{r4, pc}

0800dd9e <__sclose>:
 800dd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda2:	f000 b8b3 	b.w	800df0c <_close_r>

0800dda6 <__swbuf_r>:
 800dda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda8:	460e      	mov	r6, r1
 800ddaa:	4614      	mov	r4, r2
 800ddac:	4605      	mov	r5, r0
 800ddae:	b118      	cbz	r0, 800ddb8 <__swbuf_r+0x12>
 800ddb0:	6a03      	ldr	r3, [r0, #32]
 800ddb2:	b90b      	cbnz	r3, 800ddb8 <__swbuf_r+0x12>
 800ddb4:	f7ff feb6 	bl	800db24 <__sinit>
 800ddb8:	69a3      	ldr	r3, [r4, #24]
 800ddba:	60a3      	str	r3, [r4, #8]
 800ddbc:	89a3      	ldrh	r3, [r4, #12]
 800ddbe:	071a      	lsls	r2, r3, #28
 800ddc0:	d501      	bpl.n	800ddc6 <__swbuf_r+0x20>
 800ddc2:	6923      	ldr	r3, [r4, #16]
 800ddc4:	b943      	cbnz	r3, 800ddd8 <__swbuf_r+0x32>
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f000 f82b 	bl	800de24 <__swsetup_r>
 800ddce:	b118      	cbz	r0, 800ddd8 <__swbuf_r+0x32>
 800ddd0:	f04f 37ff 	mov.w	r7, #4294967295
 800ddd4:	4638      	mov	r0, r7
 800ddd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddd8:	6823      	ldr	r3, [r4, #0]
 800ddda:	6922      	ldr	r2, [r4, #16]
 800dddc:	1a98      	subs	r0, r3, r2
 800ddde:	6963      	ldr	r3, [r4, #20]
 800dde0:	b2f6      	uxtb	r6, r6
 800dde2:	4283      	cmp	r3, r0
 800dde4:	4637      	mov	r7, r6
 800dde6:	dc05      	bgt.n	800ddf4 <__swbuf_r+0x4e>
 800dde8:	4621      	mov	r1, r4
 800ddea:	4628      	mov	r0, r5
 800ddec:	f001 ff10 	bl	800fc10 <_fflush_r>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d1ed      	bne.n	800ddd0 <__swbuf_r+0x2a>
 800ddf4:	68a3      	ldr	r3, [r4, #8]
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	60a3      	str	r3, [r4, #8]
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	1c5a      	adds	r2, r3, #1
 800ddfe:	6022      	str	r2, [r4, #0]
 800de00:	701e      	strb	r6, [r3, #0]
 800de02:	6962      	ldr	r2, [r4, #20]
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	429a      	cmp	r2, r3
 800de08:	d004      	beq.n	800de14 <__swbuf_r+0x6e>
 800de0a:	89a3      	ldrh	r3, [r4, #12]
 800de0c:	07db      	lsls	r3, r3, #31
 800de0e:	d5e1      	bpl.n	800ddd4 <__swbuf_r+0x2e>
 800de10:	2e0a      	cmp	r6, #10
 800de12:	d1df      	bne.n	800ddd4 <__swbuf_r+0x2e>
 800de14:	4621      	mov	r1, r4
 800de16:	4628      	mov	r0, r5
 800de18:	f001 fefa 	bl	800fc10 <_fflush_r>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d0d9      	beq.n	800ddd4 <__swbuf_r+0x2e>
 800de20:	e7d6      	b.n	800ddd0 <__swbuf_r+0x2a>
	...

0800de24 <__swsetup_r>:
 800de24:	b538      	push	{r3, r4, r5, lr}
 800de26:	4b29      	ldr	r3, [pc, #164]	@ (800decc <__swsetup_r+0xa8>)
 800de28:	4605      	mov	r5, r0
 800de2a:	6818      	ldr	r0, [r3, #0]
 800de2c:	460c      	mov	r4, r1
 800de2e:	b118      	cbz	r0, 800de38 <__swsetup_r+0x14>
 800de30:	6a03      	ldr	r3, [r0, #32]
 800de32:	b90b      	cbnz	r3, 800de38 <__swsetup_r+0x14>
 800de34:	f7ff fe76 	bl	800db24 <__sinit>
 800de38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de3c:	0719      	lsls	r1, r3, #28
 800de3e:	d422      	bmi.n	800de86 <__swsetup_r+0x62>
 800de40:	06da      	lsls	r2, r3, #27
 800de42:	d407      	bmi.n	800de54 <__swsetup_r+0x30>
 800de44:	2209      	movs	r2, #9
 800de46:	602a      	str	r2, [r5, #0]
 800de48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de4c:	81a3      	strh	r3, [r4, #12]
 800de4e:	f04f 30ff 	mov.w	r0, #4294967295
 800de52:	e033      	b.n	800debc <__swsetup_r+0x98>
 800de54:	0758      	lsls	r0, r3, #29
 800de56:	d512      	bpl.n	800de7e <__swsetup_r+0x5a>
 800de58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de5a:	b141      	cbz	r1, 800de6e <__swsetup_r+0x4a>
 800de5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de60:	4299      	cmp	r1, r3
 800de62:	d002      	beq.n	800de6a <__swsetup_r+0x46>
 800de64:	4628      	mov	r0, r5
 800de66:	f000 ff3b 	bl	800ece0 <_free_r>
 800de6a:	2300      	movs	r3, #0
 800de6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de74:	81a3      	strh	r3, [r4, #12]
 800de76:	2300      	movs	r3, #0
 800de78:	6063      	str	r3, [r4, #4]
 800de7a:	6923      	ldr	r3, [r4, #16]
 800de7c:	6023      	str	r3, [r4, #0]
 800de7e:	89a3      	ldrh	r3, [r4, #12]
 800de80:	f043 0308 	orr.w	r3, r3, #8
 800de84:	81a3      	strh	r3, [r4, #12]
 800de86:	6923      	ldr	r3, [r4, #16]
 800de88:	b94b      	cbnz	r3, 800de9e <__swsetup_r+0x7a>
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800de90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de94:	d003      	beq.n	800de9e <__swsetup_r+0x7a>
 800de96:	4621      	mov	r1, r4
 800de98:	4628      	mov	r0, r5
 800de9a:	f001 ff19 	bl	800fcd0 <__smakebuf_r>
 800de9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dea2:	f013 0201 	ands.w	r2, r3, #1
 800dea6:	d00a      	beq.n	800debe <__swsetup_r+0x9a>
 800dea8:	2200      	movs	r2, #0
 800deaa:	60a2      	str	r2, [r4, #8]
 800deac:	6962      	ldr	r2, [r4, #20]
 800deae:	4252      	negs	r2, r2
 800deb0:	61a2      	str	r2, [r4, #24]
 800deb2:	6922      	ldr	r2, [r4, #16]
 800deb4:	b942      	cbnz	r2, 800dec8 <__swsetup_r+0xa4>
 800deb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800deba:	d1c5      	bne.n	800de48 <__swsetup_r+0x24>
 800debc:	bd38      	pop	{r3, r4, r5, pc}
 800debe:	0799      	lsls	r1, r3, #30
 800dec0:	bf58      	it	pl
 800dec2:	6962      	ldrpl	r2, [r4, #20]
 800dec4:	60a2      	str	r2, [r4, #8]
 800dec6:	e7f4      	b.n	800deb2 <__swsetup_r+0x8e>
 800dec8:	2000      	movs	r0, #0
 800deca:	e7f7      	b.n	800debc <__swsetup_r+0x98>
 800decc:	20000068 	.word	0x20000068

0800ded0 <memset>:
 800ded0:	4402      	add	r2, r0
 800ded2:	4603      	mov	r3, r0
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d100      	bne.n	800deda <memset+0xa>
 800ded8:	4770      	bx	lr
 800deda:	f803 1b01 	strb.w	r1, [r3], #1
 800dede:	e7f9      	b.n	800ded4 <memset+0x4>

0800dee0 <strncmp>:
 800dee0:	b510      	push	{r4, lr}
 800dee2:	b16a      	cbz	r2, 800df00 <strncmp+0x20>
 800dee4:	3901      	subs	r1, #1
 800dee6:	1884      	adds	r4, r0, r2
 800dee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800def0:	429a      	cmp	r2, r3
 800def2:	d103      	bne.n	800defc <strncmp+0x1c>
 800def4:	42a0      	cmp	r0, r4
 800def6:	d001      	beq.n	800defc <strncmp+0x1c>
 800def8:	2a00      	cmp	r2, #0
 800defa:	d1f5      	bne.n	800dee8 <strncmp+0x8>
 800defc:	1ad0      	subs	r0, r2, r3
 800defe:	bd10      	pop	{r4, pc}
 800df00:	4610      	mov	r0, r2
 800df02:	e7fc      	b.n	800defe <strncmp+0x1e>

0800df04 <_localeconv_r>:
 800df04:	4800      	ldr	r0, [pc, #0]	@ (800df08 <_localeconv_r+0x4>)
 800df06:	4770      	bx	lr
 800df08:	200001a8 	.word	0x200001a8

0800df0c <_close_r>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	4d06      	ldr	r5, [pc, #24]	@ (800df28 <_close_r+0x1c>)
 800df10:	2300      	movs	r3, #0
 800df12:	4604      	mov	r4, r0
 800df14:	4608      	mov	r0, r1
 800df16:	602b      	str	r3, [r5, #0]
 800df18:	f7f5 ff86 	bl	8003e28 <_close>
 800df1c:	1c43      	adds	r3, r0, #1
 800df1e:	d102      	bne.n	800df26 <_close_r+0x1a>
 800df20:	682b      	ldr	r3, [r5, #0]
 800df22:	b103      	cbz	r3, 800df26 <_close_r+0x1a>
 800df24:	6023      	str	r3, [r4, #0]
 800df26:	bd38      	pop	{r3, r4, r5, pc}
 800df28:	200026e8 	.word	0x200026e8

0800df2c <_lseek_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	4d07      	ldr	r5, [pc, #28]	@ (800df4c <_lseek_r+0x20>)
 800df30:	4604      	mov	r4, r0
 800df32:	4608      	mov	r0, r1
 800df34:	4611      	mov	r1, r2
 800df36:	2200      	movs	r2, #0
 800df38:	602a      	str	r2, [r5, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	f7f5 ff9b 	bl	8003e76 <_lseek>
 800df40:	1c43      	adds	r3, r0, #1
 800df42:	d102      	bne.n	800df4a <_lseek_r+0x1e>
 800df44:	682b      	ldr	r3, [r5, #0]
 800df46:	b103      	cbz	r3, 800df4a <_lseek_r+0x1e>
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	200026e8 	.word	0x200026e8

0800df50 <_read_r>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	4d07      	ldr	r5, [pc, #28]	@ (800df70 <_read_r+0x20>)
 800df54:	4604      	mov	r4, r0
 800df56:	4608      	mov	r0, r1
 800df58:	4611      	mov	r1, r2
 800df5a:	2200      	movs	r2, #0
 800df5c:	602a      	str	r2, [r5, #0]
 800df5e:	461a      	mov	r2, r3
 800df60:	f7f5 ff29 	bl	8003db6 <_read>
 800df64:	1c43      	adds	r3, r0, #1
 800df66:	d102      	bne.n	800df6e <_read_r+0x1e>
 800df68:	682b      	ldr	r3, [r5, #0]
 800df6a:	b103      	cbz	r3, 800df6e <_read_r+0x1e>
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	bd38      	pop	{r3, r4, r5, pc}
 800df70:	200026e8 	.word	0x200026e8

0800df74 <_write_r>:
 800df74:	b538      	push	{r3, r4, r5, lr}
 800df76:	4d07      	ldr	r5, [pc, #28]	@ (800df94 <_write_r+0x20>)
 800df78:	4604      	mov	r4, r0
 800df7a:	4608      	mov	r0, r1
 800df7c:	4611      	mov	r1, r2
 800df7e:	2200      	movs	r2, #0
 800df80:	602a      	str	r2, [r5, #0]
 800df82:	461a      	mov	r2, r3
 800df84:	f7f5 ff34 	bl	8003df0 <_write>
 800df88:	1c43      	adds	r3, r0, #1
 800df8a:	d102      	bne.n	800df92 <_write_r+0x1e>
 800df8c:	682b      	ldr	r3, [r5, #0]
 800df8e:	b103      	cbz	r3, 800df92 <_write_r+0x1e>
 800df90:	6023      	str	r3, [r4, #0]
 800df92:	bd38      	pop	{r3, r4, r5, pc}
 800df94:	200026e8 	.word	0x200026e8

0800df98 <__errno>:
 800df98:	4b01      	ldr	r3, [pc, #4]	@ (800dfa0 <__errno+0x8>)
 800df9a:	6818      	ldr	r0, [r3, #0]
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	20000068 	.word	0x20000068

0800dfa4 <__libc_init_array>:
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	4d0d      	ldr	r5, [pc, #52]	@ (800dfdc <__libc_init_array+0x38>)
 800dfa8:	4c0d      	ldr	r4, [pc, #52]	@ (800dfe0 <__libc_init_array+0x3c>)
 800dfaa:	1b64      	subs	r4, r4, r5
 800dfac:	10a4      	asrs	r4, r4, #2
 800dfae:	2600      	movs	r6, #0
 800dfb0:	42a6      	cmp	r6, r4
 800dfb2:	d109      	bne.n	800dfc8 <__libc_init_array+0x24>
 800dfb4:	4d0b      	ldr	r5, [pc, #44]	@ (800dfe4 <__libc_init_array+0x40>)
 800dfb6:	4c0c      	ldr	r4, [pc, #48]	@ (800dfe8 <__libc_init_array+0x44>)
 800dfb8:	f001 ffd4 	bl	800ff64 <_init>
 800dfbc:	1b64      	subs	r4, r4, r5
 800dfbe:	10a4      	asrs	r4, r4, #2
 800dfc0:	2600      	movs	r6, #0
 800dfc2:	42a6      	cmp	r6, r4
 800dfc4:	d105      	bne.n	800dfd2 <__libc_init_array+0x2e>
 800dfc6:	bd70      	pop	{r4, r5, r6, pc}
 800dfc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfcc:	4798      	blx	r3
 800dfce:	3601      	adds	r6, #1
 800dfd0:	e7ee      	b.n	800dfb0 <__libc_init_array+0xc>
 800dfd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfd6:	4798      	blx	r3
 800dfd8:	3601      	adds	r6, #1
 800dfda:	e7f2      	b.n	800dfc2 <__libc_init_array+0x1e>
 800dfdc:	08010e4c 	.word	0x08010e4c
 800dfe0:	08010e4c 	.word	0x08010e4c
 800dfe4:	08010e4c 	.word	0x08010e4c
 800dfe8:	08010e50 	.word	0x08010e50

0800dfec <__retarget_lock_init_recursive>:
 800dfec:	4770      	bx	lr

0800dfee <__retarget_lock_acquire_recursive>:
 800dfee:	4770      	bx	lr

0800dff0 <__retarget_lock_release_recursive>:
 800dff0:	4770      	bx	lr
	...

0800dff4 <__assert_func>:
 800dff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dff6:	4614      	mov	r4, r2
 800dff8:	461a      	mov	r2, r3
 800dffa:	4b09      	ldr	r3, [pc, #36]	@ (800e020 <__assert_func+0x2c>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4605      	mov	r5, r0
 800e000:	68d8      	ldr	r0, [r3, #12]
 800e002:	b14c      	cbz	r4, 800e018 <__assert_func+0x24>
 800e004:	4b07      	ldr	r3, [pc, #28]	@ (800e024 <__assert_func+0x30>)
 800e006:	9100      	str	r1, [sp, #0]
 800e008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e00c:	4906      	ldr	r1, [pc, #24]	@ (800e028 <__assert_func+0x34>)
 800e00e:	462b      	mov	r3, r5
 800e010:	f001 fe26 	bl	800fc60 <fiprintf>
 800e014:	f001 fef2 	bl	800fdfc <abort>
 800e018:	4b04      	ldr	r3, [pc, #16]	@ (800e02c <__assert_func+0x38>)
 800e01a:	461c      	mov	r4, r3
 800e01c:	e7f3      	b.n	800e006 <__assert_func+0x12>
 800e01e:	bf00      	nop
 800e020:	20000068 	.word	0x20000068
 800e024:	08010b04 	.word	0x08010b04
 800e028:	08010b11 	.word	0x08010b11
 800e02c:	08010b3f 	.word	0x08010b3f

0800e030 <quorem>:
 800e030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	6903      	ldr	r3, [r0, #16]
 800e036:	690c      	ldr	r4, [r1, #16]
 800e038:	42a3      	cmp	r3, r4
 800e03a:	4607      	mov	r7, r0
 800e03c:	db7e      	blt.n	800e13c <quorem+0x10c>
 800e03e:	3c01      	subs	r4, #1
 800e040:	f101 0814 	add.w	r8, r1, #20
 800e044:	00a3      	lsls	r3, r4, #2
 800e046:	f100 0514 	add.w	r5, r0, #20
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e050:	9301      	str	r3, [sp, #4]
 800e052:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e056:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e05a:	3301      	adds	r3, #1
 800e05c:	429a      	cmp	r2, r3
 800e05e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e062:	fbb2 f6f3 	udiv	r6, r2, r3
 800e066:	d32e      	bcc.n	800e0c6 <quorem+0x96>
 800e068:	f04f 0a00 	mov.w	sl, #0
 800e06c:	46c4      	mov	ip, r8
 800e06e:	46ae      	mov	lr, r5
 800e070:	46d3      	mov	fp, sl
 800e072:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e076:	b298      	uxth	r0, r3
 800e078:	fb06 a000 	mla	r0, r6, r0, sl
 800e07c:	0c02      	lsrs	r2, r0, #16
 800e07e:	0c1b      	lsrs	r3, r3, #16
 800e080:	fb06 2303 	mla	r3, r6, r3, r2
 800e084:	f8de 2000 	ldr.w	r2, [lr]
 800e088:	b280      	uxth	r0, r0
 800e08a:	b292      	uxth	r2, r2
 800e08c:	1a12      	subs	r2, r2, r0
 800e08e:	445a      	add	r2, fp
 800e090:	f8de 0000 	ldr.w	r0, [lr]
 800e094:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e098:	b29b      	uxth	r3, r3
 800e09a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e09e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e0a2:	b292      	uxth	r2, r2
 800e0a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e0a8:	45e1      	cmp	r9, ip
 800e0aa:	f84e 2b04 	str.w	r2, [lr], #4
 800e0ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e0b2:	d2de      	bcs.n	800e072 <quorem+0x42>
 800e0b4:	9b00      	ldr	r3, [sp, #0]
 800e0b6:	58eb      	ldr	r3, [r5, r3]
 800e0b8:	b92b      	cbnz	r3, 800e0c6 <quorem+0x96>
 800e0ba:	9b01      	ldr	r3, [sp, #4]
 800e0bc:	3b04      	subs	r3, #4
 800e0be:	429d      	cmp	r5, r3
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	d32f      	bcc.n	800e124 <quorem+0xf4>
 800e0c4:	613c      	str	r4, [r7, #16]
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	f001 f97c 	bl	800f3c4 <__mcmp>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	db25      	blt.n	800e11c <quorem+0xec>
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0d8:	f8d1 c000 	ldr.w	ip, [r1]
 800e0dc:	fa1f fe82 	uxth.w	lr, r2
 800e0e0:	fa1f f38c 	uxth.w	r3, ip
 800e0e4:	eba3 030e 	sub.w	r3, r3, lr
 800e0e8:	4403      	add	r3, r0
 800e0ea:	0c12      	lsrs	r2, r2, #16
 800e0ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e0f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0fa:	45c1      	cmp	r9, r8
 800e0fc:	f841 3b04 	str.w	r3, [r1], #4
 800e100:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e104:	d2e6      	bcs.n	800e0d4 <quorem+0xa4>
 800e106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e10a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e10e:	b922      	cbnz	r2, 800e11a <quorem+0xea>
 800e110:	3b04      	subs	r3, #4
 800e112:	429d      	cmp	r5, r3
 800e114:	461a      	mov	r2, r3
 800e116:	d30b      	bcc.n	800e130 <quorem+0x100>
 800e118:	613c      	str	r4, [r7, #16]
 800e11a:	3601      	adds	r6, #1
 800e11c:	4630      	mov	r0, r6
 800e11e:	b003      	add	sp, #12
 800e120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e124:	6812      	ldr	r2, [r2, #0]
 800e126:	3b04      	subs	r3, #4
 800e128:	2a00      	cmp	r2, #0
 800e12a:	d1cb      	bne.n	800e0c4 <quorem+0x94>
 800e12c:	3c01      	subs	r4, #1
 800e12e:	e7c6      	b.n	800e0be <quorem+0x8e>
 800e130:	6812      	ldr	r2, [r2, #0]
 800e132:	3b04      	subs	r3, #4
 800e134:	2a00      	cmp	r2, #0
 800e136:	d1ef      	bne.n	800e118 <quorem+0xe8>
 800e138:	3c01      	subs	r4, #1
 800e13a:	e7ea      	b.n	800e112 <quorem+0xe2>
 800e13c:	2000      	movs	r0, #0
 800e13e:	e7ee      	b.n	800e11e <quorem+0xee>

0800e140 <_dtoa_r>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	69c7      	ldr	r7, [r0, #28]
 800e146:	b097      	sub	sp, #92	@ 0x5c
 800e148:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e14c:	ec55 4b10 	vmov	r4, r5, d0
 800e150:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e152:	9107      	str	r1, [sp, #28]
 800e154:	4681      	mov	r9, r0
 800e156:	920c      	str	r2, [sp, #48]	@ 0x30
 800e158:	9311      	str	r3, [sp, #68]	@ 0x44
 800e15a:	b97f      	cbnz	r7, 800e17c <_dtoa_r+0x3c>
 800e15c:	2010      	movs	r0, #16
 800e15e:	f000 fe09 	bl	800ed74 <malloc>
 800e162:	4602      	mov	r2, r0
 800e164:	f8c9 001c 	str.w	r0, [r9, #28]
 800e168:	b920      	cbnz	r0, 800e174 <_dtoa_r+0x34>
 800e16a:	4ba9      	ldr	r3, [pc, #676]	@ (800e410 <_dtoa_r+0x2d0>)
 800e16c:	21ef      	movs	r1, #239	@ 0xef
 800e16e:	48a9      	ldr	r0, [pc, #676]	@ (800e414 <_dtoa_r+0x2d4>)
 800e170:	f7ff ff40 	bl	800dff4 <__assert_func>
 800e174:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e178:	6007      	str	r7, [r0, #0]
 800e17a:	60c7      	str	r7, [r0, #12]
 800e17c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e180:	6819      	ldr	r1, [r3, #0]
 800e182:	b159      	cbz	r1, 800e19c <_dtoa_r+0x5c>
 800e184:	685a      	ldr	r2, [r3, #4]
 800e186:	604a      	str	r2, [r1, #4]
 800e188:	2301      	movs	r3, #1
 800e18a:	4093      	lsls	r3, r2
 800e18c:	608b      	str	r3, [r1, #8]
 800e18e:	4648      	mov	r0, r9
 800e190:	f000 fee6 	bl	800ef60 <_Bfree>
 800e194:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e198:	2200      	movs	r2, #0
 800e19a:	601a      	str	r2, [r3, #0]
 800e19c:	1e2b      	subs	r3, r5, #0
 800e19e:	bfb9      	ittee	lt
 800e1a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e1a4:	9305      	strlt	r3, [sp, #20]
 800e1a6:	2300      	movge	r3, #0
 800e1a8:	6033      	strge	r3, [r6, #0]
 800e1aa:	9f05      	ldr	r7, [sp, #20]
 800e1ac:	4b9a      	ldr	r3, [pc, #616]	@ (800e418 <_dtoa_r+0x2d8>)
 800e1ae:	bfbc      	itt	lt
 800e1b0:	2201      	movlt	r2, #1
 800e1b2:	6032      	strlt	r2, [r6, #0]
 800e1b4:	43bb      	bics	r3, r7
 800e1b6:	d112      	bne.n	800e1de <_dtoa_r+0x9e>
 800e1b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e1ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1c4:	4323      	orrs	r3, r4
 800e1c6:	f000 855a 	beq.w	800ec7e <_dtoa_r+0xb3e>
 800e1ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e1cc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e42c <_dtoa_r+0x2ec>
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f000 855c 	beq.w	800ec8e <_dtoa_r+0xb4e>
 800e1d6:	f10a 0303 	add.w	r3, sl, #3
 800e1da:	f000 bd56 	b.w	800ec8a <_dtoa_r+0xb4a>
 800e1de:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	ec51 0b17 	vmov	r0, r1, d7
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e1ee:	f7f2 fca3 	bl	8000b38 <__aeabi_dcmpeq>
 800e1f2:	4680      	mov	r8, r0
 800e1f4:	b158      	cbz	r0, 800e20e <_dtoa_r+0xce>
 800e1f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	6013      	str	r3, [r2, #0]
 800e1fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e1fe:	b113      	cbz	r3, 800e206 <_dtoa_r+0xc6>
 800e200:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e202:	4b86      	ldr	r3, [pc, #536]	@ (800e41c <_dtoa_r+0x2dc>)
 800e204:	6013      	str	r3, [r2, #0]
 800e206:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e430 <_dtoa_r+0x2f0>
 800e20a:	f000 bd40 	b.w	800ec8e <_dtoa_r+0xb4e>
 800e20e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e212:	aa14      	add	r2, sp, #80	@ 0x50
 800e214:	a915      	add	r1, sp, #84	@ 0x54
 800e216:	4648      	mov	r0, r9
 800e218:	f001 f984 	bl	800f524 <__d2b>
 800e21c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e220:	9002      	str	r0, [sp, #8]
 800e222:	2e00      	cmp	r6, #0
 800e224:	d078      	beq.n	800e318 <_dtoa_r+0x1d8>
 800e226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e228:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e22c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e230:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e234:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e238:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e23c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e240:	4619      	mov	r1, r3
 800e242:	2200      	movs	r2, #0
 800e244:	4b76      	ldr	r3, [pc, #472]	@ (800e420 <_dtoa_r+0x2e0>)
 800e246:	f7f2 f857 	bl	80002f8 <__aeabi_dsub>
 800e24a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e3f8 <_dtoa_r+0x2b8>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	f7f2 fa0a 	bl	8000668 <__aeabi_dmul>
 800e254:	a36a      	add	r3, pc, #424	@ (adr r3, 800e400 <_dtoa_r+0x2c0>)
 800e256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25a:	f7f2 f84f 	bl	80002fc <__adddf3>
 800e25e:	4604      	mov	r4, r0
 800e260:	4630      	mov	r0, r6
 800e262:	460d      	mov	r5, r1
 800e264:	f7f2 f996 	bl	8000594 <__aeabi_i2d>
 800e268:	a367      	add	r3, pc, #412	@ (adr r3, 800e408 <_dtoa_r+0x2c8>)
 800e26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26e:	f7f2 f9fb 	bl	8000668 <__aeabi_dmul>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4620      	mov	r0, r4
 800e278:	4629      	mov	r1, r5
 800e27a:	f7f2 f83f 	bl	80002fc <__adddf3>
 800e27e:	4604      	mov	r4, r0
 800e280:	460d      	mov	r5, r1
 800e282:	f7f2 fca1 	bl	8000bc8 <__aeabi_d2iz>
 800e286:	2200      	movs	r2, #0
 800e288:	4607      	mov	r7, r0
 800e28a:	2300      	movs	r3, #0
 800e28c:	4620      	mov	r0, r4
 800e28e:	4629      	mov	r1, r5
 800e290:	f7f2 fc5c 	bl	8000b4c <__aeabi_dcmplt>
 800e294:	b140      	cbz	r0, 800e2a8 <_dtoa_r+0x168>
 800e296:	4638      	mov	r0, r7
 800e298:	f7f2 f97c 	bl	8000594 <__aeabi_i2d>
 800e29c:	4622      	mov	r2, r4
 800e29e:	462b      	mov	r3, r5
 800e2a0:	f7f2 fc4a 	bl	8000b38 <__aeabi_dcmpeq>
 800e2a4:	b900      	cbnz	r0, 800e2a8 <_dtoa_r+0x168>
 800e2a6:	3f01      	subs	r7, #1
 800e2a8:	2f16      	cmp	r7, #22
 800e2aa:	d852      	bhi.n	800e352 <_dtoa_r+0x212>
 800e2ac:	4b5d      	ldr	r3, [pc, #372]	@ (800e424 <_dtoa_r+0x2e4>)
 800e2ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e2ba:	f7f2 fc47 	bl	8000b4c <__aeabi_dcmplt>
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	d049      	beq.n	800e356 <_dtoa_r+0x216>
 800e2c2:	3f01      	subs	r7, #1
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e2ca:	1b9b      	subs	r3, r3, r6
 800e2cc:	1e5a      	subs	r2, r3, #1
 800e2ce:	bf45      	ittet	mi
 800e2d0:	f1c3 0301 	rsbmi	r3, r3, #1
 800e2d4:	9300      	strmi	r3, [sp, #0]
 800e2d6:	2300      	movpl	r3, #0
 800e2d8:	2300      	movmi	r3, #0
 800e2da:	9206      	str	r2, [sp, #24]
 800e2dc:	bf54      	ite	pl
 800e2de:	9300      	strpl	r3, [sp, #0]
 800e2e0:	9306      	strmi	r3, [sp, #24]
 800e2e2:	2f00      	cmp	r7, #0
 800e2e4:	db39      	blt.n	800e35a <_dtoa_r+0x21a>
 800e2e6:	9b06      	ldr	r3, [sp, #24]
 800e2e8:	970d      	str	r7, [sp, #52]	@ 0x34
 800e2ea:	443b      	add	r3, r7
 800e2ec:	9306      	str	r3, [sp, #24]
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	9308      	str	r3, [sp, #32]
 800e2f2:	9b07      	ldr	r3, [sp, #28]
 800e2f4:	2b09      	cmp	r3, #9
 800e2f6:	d863      	bhi.n	800e3c0 <_dtoa_r+0x280>
 800e2f8:	2b05      	cmp	r3, #5
 800e2fa:	bfc4      	itt	gt
 800e2fc:	3b04      	subgt	r3, #4
 800e2fe:	9307      	strgt	r3, [sp, #28]
 800e300:	9b07      	ldr	r3, [sp, #28]
 800e302:	f1a3 0302 	sub.w	r3, r3, #2
 800e306:	bfcc      	ite	gt
 800e308:	2400      	movgt	r4, #0
 800e30a:	2401      	movle	r4, #1
 800e30c:	2b03      	cmp	r3, #3
 800e30e:	d863      	bhi.n	800e3d8 <_dtoa_r+0x298>
 800e310:	e8df f003 	tbb	[pc, r3]
 800e314:	2b375452 	.word	0x2b375452
 800e318:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e31c:	441e      	add	r6, r3
 800e31e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e322:	2b20      	cmp	r3, #32
 800e324:	bfc1      	itttt	gt
 800e326:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e32a:	409f      	lslgt	r7, r3
 800e32c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e330:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e334:	bfd6      	itet	le
 800e336:	f1c3 0320 	rsble	r3, r3, #32
 800e33a:	ea47 0003 	orrgt.w	r0, r7, r3
 800e33e:	fa04 f003 	lslle.w	r0, r4, r3
 800e342:	f7f2 f917 	bl	8000574 <__aeabi_ui2d>
 800e346:	2201      	movs	r2, #1
 800e348:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e34c:	3e01      	subs	r6, #1
 800e34e:	9212      	str	r2, [sp, #72]	@ 0x48
 800e350:	e776      	b.n	800e240 <_dtoa_r+0x100>
 800e352:	2301      	movs	r3, #1
 800e354:	e7b7      	b.n	800e2c6 <_dtoa_r+0x186>
 800e356:	9010      	str	r0, [sp, #64]	@ 0x40
 800e358:	e7b6      	b.n	800e2c8 <_dtoa_r+0x188>
 800e35a:	9b00      	ldr	r3, [sp, #0]
 800e35c:	1bdb      	subs	r3, r3, r7
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	427b      	negs	r3, r7
 800e362:	9308      	str	r3, [sp, #32]
 800e364:	2300      	movs	r3, #0
 800e366:	930d      	str	r3, [sp, #52]	@ 0x34
 800e368:	e7c3      	b.n	800e2f2 <_dtoa_r+0x1b2>
 800e36a:	2301      	movs	r3, #1
 800e36c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e36e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e370:	eb07 0b03 	add.w	fp, r7, r3
 800e374:	f10b 0301 	add.w	r3, fp, #1
 800e378:	2b01      	cmp	r3, #1
 800e37a:	9303      	str	r3, [sp, #12]
 800e37c:	bfb8      	it	lt
 800e37e:	2301      	movlt	r3, #1
 800e380:	e006      	b.n	800e390 <_dtoa_r+0x250>
 800e382:	2301      	movs	r3, #1
 800e384:	9309      	str	r3, [sp, #36]	@ 0x24
 800e386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e388:	2b00      	cmp	r3, #0
 800e38a:	dd28      	ble.n	800e3de <_dtoa_r+0x29e>
 800e38c:	469b      	mov	fp, r3
 800e38e:	9303      	str	r3, [sp, #12]
 800e390:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e394:	2100      	movs	r1, #0
 800e396:	2204      	movs	r2, #4
 800e398:	f102 0514 	add.w	r5, r2, #20
 800e39c:	429d      	cmp	r5, r3
 800e39e:	d926      	bls.n	800e3ee <_dtoa_r+0x2ae>
 800e3a0:	6041      	str	r1, [r0, #4]
 800e3a2:	4648      	mov	r0, r9
 800e3a4:	f000 fd9c 	bl	800eee0 <_Balloc>
 800e3a8:	4682      	mov	sl, r0
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d142      	bne.n	800e434 <_dtoa_r+0x2f4>
 800e3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800e428 <_dtoa_r+0x2e8>)
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	f240 11af 	movw	r1, #431	@ 0x1af
 800e3b6:	e6da      	b.n	800e16e <_dtoa_r+0x2e>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e7e3      	b.n	800e384 <_dtoa_r+0x244>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	e7d5      	b.n	800e36c <_dtoa_r+0x22c>
 800e3c0:	2401      	movs	r4, #1
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	9307      	str	r3, [sp, #28]
 800e3c6:	9409      	str	r4, [sp, #36]	@ 0x24
 800e3c8:	f04f 3bff 	mov.w	fp, #4294967295
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f8cd b00c 	str.w	fp, [sp, #12]
 800e3d2:	2312      	movs	r3, #18
 800e3d4:	920c      	str	r2, [sp, #48]	@ 0x30
 800e3d6:	e7db      	b.n	800e390 <_dtoa_r+0x250>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3dc:	e7f4      	b.n	800e3c8 <_dtoa_r+0x288>
 800e3de:	f04f 0b01 	mov.w	fp, #1
 800e3e2:	f8cd b00c 	str.w	fp, [sp, #12]
 800e3e6:	465b      	mov	r3, fp
 800e3e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e3ec:	e7d0      	b.n	800e390 <_dtoa_r+0x250>
 800e3ee:	3101      	adds	r1, #1
 800e3f0:	0052      	lsls	r2, r2, #1
 800e3f2:	e7d1      	b.n	800e398 <_dtoa_r+0x258>
 800e3f4:	f3af 8000 	nop.w
 800e3f8:	636f4361 	.word	0x636f4361
 800e3fc:	3fd287a7 	.word	0x3fd287a7
 800e400:	8b60c8b3 	.word	0x8b60c8b3
 800e404:	3fc68a28 	.word	0x3fc68a28
 800e408:	509f79fb 	.word	0x509f79fb
 800e40c:	3fd34413 	.word	0x3fd34413
 800e410:	08010b4d 	.word	0x08010b4d
 800e414:	08010b64 	.word	0x08010b64
 800e418:	7ff00000 	.word	0x7ff00000
 800e41c:	08010ae1 	.word	0x08010ae1
 800e420:	3ff80000 	.word	0x3ff80000
 800e424:	08010c78 	.word	0x08010c78
 800e428:	08010bbc 	.word	0x08010bbc
 800e42c:	08010b49 	.word	0x08010b49
 800e430:	08010ae0 	.word	0x08010ae0
 800e434:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e438:	6018      	str	r0, [r3, #0]
 800e43a:	9b03      	ldr	r3, [sp, #12]
 800e43c:	2b0e      	cmp	r3, #14
 800e43e:	f200 80a1 	bhi.w	800e584 <_dtoa_r+0x444>
 800e442:	2c00      	cmp	r4, #0
 800e444:	f000 809e 	beq.w	800e584 <_dtoa_r+0x444>
 800e448:	2f00      	cmp	r7, #0
 800e44a:	dd33      	ble.n	800e4b4 <_dtoa_r+0x374>
 800e44c:	4b9c      	ldr	r3, [pc, #624]	@ (800e6c0 <_dtoa_r+0x580>)
 800e44e:	f007 020f 	and.w	r2, r7, #15
 800e452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e456:	ed93 7b00 	vldr	d7, [r3]
 800e45a:	05f8      	lsls	r0, r7, #23
 800e45c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e460:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e464:	d516      	bpl.n	800e494 <_dtoa_r+0x354>
 800e466:	4b97      	ldr	r3, [pc, #604]	@ (800e6c4 <_dtoa_r+0x584>)
 800e468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e46c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e470:	f7f2 fa24 	bl	80008bc <__aeabi_ddiv>
 800e474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e478:	f004 040f 	and.w	r4, r4, #15
 800e47c:	2603      	movs	r6, #3
 800e47e:	4d91      	ldr	r5, [pc, #580]	@ (800e6c4 <_dtoa_r+0x584>)
 800e480:	b954      	cbnz	r4, 800e498 <_dtoa_r+0x358>
 800e482:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e48a:	f7f2 fa17 	bl	80008bc <__aeabi_ddiv>
 800e48e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e492:	e028      	b.n	800e4e6 <_dtoa_r+0x3a6>
 800e494:	2602      	movs	r6, #2
 800e496:	e7f2      	b.n	800e47e <_dtoa_r+0x33e>
 800e498:	07e1      	lsls	r1, r4, #31
 800e49a:	d508      	bpl.n	800e4ae <_dtoa_r+0x36e>
 800e49c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e4a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4a4:	f7f2 f8e0 	bl	8000668 <__aeabi_dmul>
 800e4a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e4ac:	3601      	adds	r6, #1
 800e4ae:	1064      	asrs	r4, r4, #1
 800e4b0:	3508      	adds	r5, #8
 800e4b2:	e7e5      	b.n	800e480 <_dtoa_r+0x340>
 800e4b4:	f000 80af 	beq.w	800e616 <_dtoa_r+0x4d6>
 800e4b8:	427c      	negs	r4, r7
 800e4ba:	4b81      	ldr	r3, [pc, #516]	@ (800e6c0 <_dtoa_r+0x580>)
 800e4bc:	4d81      	ldr	r5, [pc, #516]	@ (800e6c4 <_dtoa_r+0x584>)
 800e4be:	f004 020f 	and.w	r2, r4, #15
 800e4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e4ce:	f7f2 f8cb 	bl	8000668 <__aeabi_dmul>
 800e4d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4d6:	1124      	asrs	r4, r4, #4
 800e4d8:	2300      	movs	r3, #0
 800e4da:	2602      	movs	r6, #2
 800e4dc:	2c00      	cmp	r4, #0
 800e4de:	f040 808f 	bne.w	800e600 <_dtoa_r+0x4c0>
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1d3      	bne.n	800e48e <_dtoa_r+0x34e>
 800e4e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e4e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f000 8094 	beq.w	800e61a <_dtoa_r+0x4da>
 800e4f2:	4b75      	ldr	r3, [pc, #468]	@ (800e6c8 <_dtoa_r+0x588>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	f7f2 fb27 	bl	8000b4c <__aeabi_dcmplt>
 800e4fe:	2800      	cmp	r0, #0
 800e500:	f000 808b 	beq.w	800e61a <_dtoa_r+0x4da>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	f000 8087 	beq.w	800e61a <_dtoa_r+0x4da>
 800e50c:	f1bb 0f00 	cmp.w	fp, #0
 800e510:	dd34      	ble.n	800e57c <_dtoa_r+0x43c>
 800e512:	4620      	mov	r0, r4
 800e514:	4b6d      	ldr	r3, [pc, #436]	@ (800e6cc <_dtoa_r+0x58c>)
 800e516:	2200      	movs	r2, #0
 800e518:	4629      	mov	r1, r5
 800e51a:	f7f2 f8a5 	bl	8000668 <__aeabi_dmul>
 800e51e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e522:	f107 38ff 	add.w	r8, r7, #4294967295
 800e526:	3601      	adds	r6, #1
 800e528:	465c      	mov	r4, fp
 800e52a:	4630      	mov	r0, r6
 800e52c:	f7f2 f832 	bl	8000594 <__aeabi_i2d>
 800e530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e534:	f7f2 f898 	bl	8000668 <__aeabi_dmul>
 800e538:	4b65      	ldr	r3, [pc, #404]	@ (800e6d0 <_dtoa_r+0x590>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	f7f1 fede 	bl	80002fc <__adddf3>
 800e540:	4605      	mov	r5, r0
 800e542:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e546:	2c00      	cmp	r4, #0
 800e548:	d16a      	bne.n	800e620 <_dtoa_r+0x4e0>
 800e54a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e54e:	4b61      	ldr	r3, [pc, #388]	@ (800e6d4 <_dtoa_r+0x594>)
 800e550:	2200      	movs	r2, #0
 800e552:	f7f1 fed1 	bl	80002f8 <__aeabi_dsub>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e55e:	462a      	mov	r2, r5
 800e560:	4633      	mov	r3, r6
 800e562:	f7f2 fb11 	bl	8000b88 <__aeabi_dcmpgt>
 800e566:	2800      	cmp	r0, #0
 800e568:	f040 8298 	bne.w	800ea9c <_dtoa_r+0x95c>
 800e56c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e570:	462a      	mov	r2, r5
 800e572:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e576:	f7f2 fae9 	bl	8000b4c <__aeabi_dcmplt>
 800e57a:	bb38      	cbnz	r0, 800e5cc <_dtoa_r+0x48c>
 800e57c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e580:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e584:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e586:	2b00      	cmp	r3, #0
 800e588:	f2c0 8157 	blt.w	800e83a <_dtoa_r+0x6fa>
 800e58c:	2f0e      	cmp	r7, #14
 800e58e:	f300 8154 	bgt.w	800e83a <_dtoa_r+0x6fa>
 800e592:	4b4b      	ldr	r3, [pc, #300]	@ (800e6c0 <_dtoa_r+0x580>)
 800e594:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e598:	ed93 7b00 	vldr	d7, [r3]
 800e59c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	ed8d 7b00 	vstr	d7, [sp]
 800e5a4:	f280 80e5 	bge.w	800e772 <_dtoa_r+0x632>
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f300 80e1 	bgt.w	800e772 <_dtoa_r+0x632>
 800e5b0:	d10c      	bne.n	800e5cc <_dtoa_r+0x48c>
 800e5b2:	4b48      	ldr	r3, [pc, #288]	@ (800e6d4 <_dtoa_r+0x594>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	ec51 0b17 	vmov	r0, r1, d7
 800e5ba:	f7f2 f855 	bl	8000668 <__aeabi_dmul>
 800e5be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5c2:	f7f2 fad7 	bl	8000b74 <__aeabi_dcmpge>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	f000 8266 	beq.w	800ea98 <_dtoa_r+0x958>
 800e5cc:	2400      	movs	r4, #0
 800e5ce:	4625      	mov	r5, r4
 800e5d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5d2:	4656      	mov	r6, sl
 800e5d4:	ea6f 0803 	mvn.w	r8, r3
 800e5d8:	2700      	movs	r7, #0
 800e5da:	4621      	mov	r1, r4
 800e5dc:	4648      	mov	r0, r9
 800e5de:	f000 fcbf 	bl	800ef60 <_Bfree>
 800e5e2:	2d00      	cmp	r5, #0
 800e5e4:	f000 80bd 	beq.w	800e762 <_dtoa_r+0x622>
 800e5e8:	b12f      	cbz	r7, 800e5f6 <_dtoa_r+0x4b6>
 800e5ea:	42af      	cmp	r7, r5
 800e5ec:	d003      	beq.n	800e5f6 <_dtoa_r+0x4b6>
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	4648      	mov	r0, r9
 800e5f2:	f000 fcb5 	bl	800ef60 <_Bfree>
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4648      	mov	r0, r9
 800e5fa:	f000 fcb1 	bl	800ef60 <_Bfree>
 800e5fe:	e0b0      	b.n	800e762 <_dtoa_r+0x622>
 800e600:	07e2      	lsls	r2, r4, #31
 800e602:	d505      	bpl.n	800e610 <_dtoa_r+0x4d0>
 800e604:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e608:	f7f2 f82e 	bl	8000668 <__aeabi_dmul>
 800e60c:	3601      	adds	r6, #1
 800e60e:	2301      	movs	r3, #1
 800e610:	1064      	asrs	r4, r4, #1
 800e612:	3508      	adds	r5, #8
 800e614:	e762      	b.n	800e4dc <_dtoa_r+0x39c>
 800e616:	2602      	movs	r6, #2
 800e618:	e765      	b.n	800e4e6 <_dtoa_r+0x3a6>
 800e61a:	9c03      	ldr	r4, [sp, #12]
 800e61c:	46b8      	mov	r8, r7
 800e61e:	e784      	b.n	800e52a <_dtoa_r+0x3ea>
 800e620:	4b27      	ldr	r3, [pc, #156]	@ (800e6c0 <_dtoa_r+0x580>)
 800e622:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e628:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e62c:	4454      	add	r4, sl
 800e62e:	2900      	cmp	r1, #0
 800e630:	d054      	beq.n	800e6dc <_dtoa_r+0x59c>
 800e632:	4929      	ldr	r1, [pc, #164]	@ (800e6d8 <_dtoa_r+0x598>)
 800e634:	2000      	movs	r0, #0
 800e636:	f7f2 f941 	bl	80008bc <__aeabi_ddiv>
 800e63a:	4633      	mov	r3, r6
 800e63c:	462a      	mov	r2, r5
 800e63e:	f7f1 fe5b 	bl	80002f8 <__aeabi_dsub>
 800e642:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e646:	4656      	mov	r6, sl
 800e648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e64c:	f7f2 fabc 	bl	8000bc8 <__aeabi_d2iz>
 800e650:	4605      	mov	r5, r0
 800e652:	f7f1 ff9f 	bl	8000594 <__aeabi_i2d>
 800e656:	4602      	mov	r2, r0
 800e658:	460b      	mov	r3, r1
 800e65a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e65e:	f7f1 fe4b 	bl	80002f8 <__aeabi_dsub>
 800e662:	3530      	adds	r5, #48	@ 0x30
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e66c:	f806 5b01 	strb.w	r5, [r6], #1
 800e670:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e674:	f7f2 fa6a 	bl	8000b4c <__aeabi_dcmplt>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d172      	bne.n	800e762 <_dtoa_r+0x622>
 800e67c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e680:	4911      	ldr	r1, [pc, #68]	@ (800e6c8 <_dtoa_r+0x588>)
 800e682:	2000      	movs	r0, #0
 800e684:	f7f1 fe38 	bl	80002f8 <__aeabi_dsub>
 800e688:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e68c:	f7f2 fa5e 	bl	8000b4c <__aeabi_dcmplt>
 800e690:	2800      	cmp	r0, #0
 800e692:	f040 80b4 	bne.w	800e7fe <_dtoa_r+0x6be>
 800e696:	42a6      	cmp	r6, r4
 800e698:	f43f af70 	beq.w	800e57c <_dtoa_r+0x43c>
 800e69c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e6cc <_dtoa_r+0x58c>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f7f1 ffe0 	bl	8000668 <__aeabi_dmul>
 800e6a8:	4b08      	ldr	r3, [pc, #32]	@ (800e6cc <_dtoa_r+0x58c>)
 800e6aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6b4:	f7f1 ffd8 	bl	8000668 <__aeabi_dmul>
 800e6b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6bc:	e7c4      	b.n	800e648 <_dtoa_r+0x508>
 800e6be:	bf00      	nop
 800e6c0:	08010c78 	.word	0x08010c78
 800e6c4:	08010c50 	.word	0x08010c50
 800e6c8:	3ff00000 	.word	0x3ff00000
 800e6cc:	40240000 	.word	0x40240000
 800e6d0:	401c0000 	.word	0x401c0000
 800e6d4:	40140000 	.word	0x40140000
 800e6d8:	3fe00000 	.word	0x3fe00000
 800e6dc:	4631      	mov	r1, r6
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f7f1 ffc2 	bl	8000668 <__aeabi_dmul>
 800e6e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e6e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e6ea:	4656      	mov	r6, sl
 800e6ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6f0:	f7f2 fa6a 	bl	8000bc8 <__aeabi_d2iz>
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	f7f1 ff4d 	bl	8000594 <__aeabi_i2d>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e702:	f7f1 fdf9 	bl	80002f8 <__aeabi_dsub>
 800e706:	3530      	adds	r5, #48	@ 0x30
 800e708:	f806 5b01 	strb.w	r5, [r6], #1
 800e70c:	4602      	mov	r2, r0
 800e70e:	460b      	mov	r3, r1
 800e710:	42a6      	cmp	r6, r4
 800e712:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e716:	f04f 0200 	mov.w	r2, #0
 800e71a:	d124      	bne.n	800e766 <_dtoa_r+0x626>
 800e71c:	4baf      	ldr	r3, [pc, #700]	@ (800e9dc <_dtoa_r+0x89c>)
 800e71e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e722:	f7f1 fdeb 	bl	80002fc <__adddf3>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e72e:	f7f2 fa2b 	bl	8000b88 <__aeabi_dcmpgt>
 800e732:	2800      	cmp	r0, #0
 800e734:	d163      	bne.n	800e7fe <_dtoa_r+0x6be>
 800e736:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e73a:	49a8      	ldr	r1, [pc, #672]	@ (800e9dc <_dtoa_r+0x89c>)
 800e73c:	2000      	movs	r0, #0
 800e73e:	f7f1 fddb 	bl	80002f8 <__aeabi_dsub>
 800e742:	4602      	mov	r2, r0
 800e744:	460b      	mov	r3, r1
 800e746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e74a:	f7f2 f9ff 	bl	8000b4c <__aeabi_dcmplt>
 800e74e:	2800      	cmp	r0, #0
 800e750:	f43f af14 	beq.w	800e57c <_dtoa_r+0x43c>
 800e754:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e756:	1e73      	subs	r3, r6, #1
 800e758:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e75a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e75e:	2b30      	cmp	r3, #48	@ 0x30
 800e760:	d0f8      	beq.n	800e754 <_dtoa_r+0x614>
 800e762:	4647      	mov	r7, r8
 800e764:	e03b      	b.n	800e7de <_dtoa_r+0x69e>
 800e766:	4b9e      	ldr	r3, [pc, #632]	@ (800e9e0 <_dtoa_r+0x8a0>)
 800e768:	f7f1 ff7e 	bl	8000668 <__aeabi_dmul>
 800e76c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e770:	e7bc      	b.n	800e6ec <_dtoa_r+0x5ac>
 800e772:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e776:	4656      	mov	r6, sl
 800e778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e77c:	4620      	mov	r0, r4
 800e77e:	4629      	mov	r1, r5
 800e780:	f7f2 f89c 	bl	80008bc <__aeabi_ddiv>
 800e784:	f7f2 fa20 	bl	8000bc8 <__aeabi_d2iz>
 800e788:	4680      	mov	r8, r0
 800e78a:	f7f1 ff03 	bl	8000594 <__aeabi_i2d>
 800e78e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e792:	f7f1 ff69 	bl	8000668 <__aeabi_dmul>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	4620      	mov	r0, r4
 800e79c:	4629      	mov	r1, r5
 800e79e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e7a2:	f7f1 fda9 	bl	80002f8 <__aeabi_dsub>
 800e7a6:	f806 4b01 	strb.w	r4, [r6], #1
 800e7aa:	9d03      	ldr	r5, [sp, #12]
 800e7ac:	eba6 040a 	sub.w	r4, r6, sl
 800e7b0:	42a5      	cmp	r5, r4
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	d133      	bne.n	800e820 <_dtoa_r+0x6e0>
 800e7b8:	f7f1 fda0 	bl	80002fc <__adddf3>
 800e7bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7c0:	4604      	mov	r4, r0
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	f7f2 f9e0 	bl	8000b88 <__aeabi_dcmpgt>
 800e7c8:	b9c0      	cbnz	r0, 800e7fc <_dtoa_r+0x6bc>
 800e7ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	f7f2 f9b1 	bl	8000b38 <__aeabi_dcmpeq>
 800e7d6:	b110      	cbz	r0, 800e7de <_dtoa_r+0x69e>
 800e7d8:	f018 0f01 	tst.w	r8, #1
 800e7dc:	d10e      	bne.n	800e7fc <_dtoa_r+0x6bc>
 800e7de:	9902      	ldr	r1, [sp, #8]
 800e7e0:	4648      	mov	r0, r9
 800e7e2:	f000 fbbd 	bl	800ef60 <_Bfree>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	7033      	strb	r3, [r6, #0]
 800e7ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7ec:	3701      	adds	r7, #1
 800e7ee:	601f      	str	r7, [r3, #0]
 800e7f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f000 824b 	beq.w	800ec8e <_dtoa_r+0xb4e>
 800e7f8:	601e      	str	r6, [r3, #0]
 800e7fa:	e248      	b.n	800ec8e <_dtoa_r+0xb4e>
 800e7fc:	46b8      	mov	r8, r7
 800e7fe:	4633      	mov	r3, r6
 800e800:	461e      	mov	r6, r3
 800e802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e806:	2a39      	cmp	r2, #57	@ 0x39
 800e808:	d106      	bne.n	800e818 <_dtoa_r+0x6d8>
 800e80a:	459a      	cmp	sl, r3
 800e80c:	d1f8      	bne.n	800e800 <_dtoa_r+0x6c0>
 800e80e:	2230      	movs	r2, #48	@ 0x30
 800e810:	f108 0801 	add.w	r8, r8, #1
 800e814:	f88a 2000 	strb.w	r2, [sl]
 800e818:	781a      	ldrb	r2, [r3, #0]
 800e81a:	3201      	adds	r2, #1
 800e81c:	701a      	strb	r2, [r3, #0]
 800e81e:	e7a0      	b.n	800e762 <_dtoa_r+0x622>
 800e820:	4b6f      	ldr	r3, [pc, #444]	@ (800e9e0 <_dtoa_r+0x8a0>)
 800e822:	2200      	movs	r2, #0
 800e824:	f7f1 ff20 	bl	8000668 <__aeabi_dmul>
 800e828:	2200      	movs	r2, #0
 800e82a:	2300      	movs	r3, #0
 800e82c:	4604      	mov	r4, r0
 800e82e:	460d      	mov	r5, r1
 800e830:	f7f2 f982 	bl	8000b38 <__aeabi_dcmpeq>
 800e834:	2800      	cmp	r0, #0
 800e836:	d09f      	beq.n	800e778 <_dtoa_r+0x638>
 800e838:	e7d1      	b.n	800e7de <_dtoa_r+0x69e>
 800e83a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e83c:	2a00      	cmp	r2, #0
 800e83e:	f000 80ea 	beq.w	800ea16 <_dtoa_r+0x8d6>
 800e842:	9a07      	ldr	r2, [sp, #28]
 800e844:	2a01      	cmp	r2, #1
 800e846:	f300 80cd 	bgt.w	800e9e4 <_dtoa_r+0x8a4>
 800e84a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e84c:	2a00      	cmp	r2, #0
 800e84e:	f000 80c1 	beq.w	800e9d4 <_dtoa_r+0x894>
 800e852:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e856:	9c08      	ldr	r4, [sp, #32]
 800e858:	9e00      	ldr	r6, [sp, #0]
 800e85a:	9a00      	ldr	r2, [sp, #0]
 800e85c:	441a      	add	r2, r3
 800e85e:	9200      	str	r2, [sp, #0]
 800e860:	9a06      	ldr	r2, [sp, #24]
 800e862:	2101      	movs	r1, #1
 800e864:	441a      	add	r2, r3
 800e866:	4648      	mov	r0, r9
 800e868:	9206      	str	r2, [sp, #24]
 800e86a:	f000 fc2d 	bl	800f0c8 <__i2b>
 800e86e:	4605      	mov	r5, r0
 800e870:	b166      	cbz	r6, 800e88c <_dtoa_r+0x74c>
 800e872:	9b06      	ldr	r3, [sp, #24]
 800e874:	2b00      	cmp	r3, #0
 800e876:	dd09      	ble.n	800e88c <_dtoa_r+0x74c>
 800e878:	42b3      	cmp	r3, r6
 800e87a:	9a00      	ldr	r2, [sp, #0]
 800e87c:	bfa8      	it	ge
 800e87e:	4633      	movge	r3, r6
 800e880:	1ad2      	subs	r2, r2, r3
 800e882:	9200      	str	r2, [sp, #0]
 800e884:	9a06      	ldr	r2, [sp, #24]
 800e886:	1af6      	subs	r6, r6, r3
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	9306      	str	r3, [sp, #24]
 800e88c:	9b08      	ldr	r3, [sp, #32]
 800e88e:	b30b      	cbz	r3, 800e8d4 <_dtoa_r+0x794>
 800e890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e892:	2b00      	cmp	r3, #0
 800e894:	f000 80c6 	beq.w	800ea24 <_dtoa_r+0x8e4>
 800e898:	2c00      	cmp	r4, #0
 800e89a:	f000 80c0 	beq.w	800ea1e <_dtoa_r+0x8de>
 800e89e:	4629      	mov	r1, r5
 800e8a0:	4622      	mov	r2, r4
 800e8a2:	4648      	mov	r0, r9
 800e8a4:	f000 fcc8 	bl	800f238 <__pow5mult>
 800e8a8:	9a02      	ldr	r2, [sp, #8]
 800e8aa:	4601      	mov	r1, r0
 800e8ac:	4605      	mov	r5, r0
 800e8ae:	4648      	mov	r0, r9
 800e8b0:	f000 fc20 	bl	800f0f4 <__multiply>
 800e8b4:	9902      	ldr	r1, [sp, #8]
 800e8b6:	4680      	mov	r8, r0
 800e8b8:	4648      	mov	r0, r9
 800e8ba:	f000 fb51 	bl	800ef60 <_Bfree>
 800e8be:	9b08      	ldr	r3, [sp, #32]
 800e8c0:	1b1b      	subs	r3, r3, r4
 800e8c2:	9308      	str	r3, [sp, #32]
 800e8c4:	f000 80b1 	beq.w	800ea2a <_dtoa_r+0x8ea>
 800e8c8:	9a08      	ldr	r2, [sp, #32]
 800e8ca:	4641      	mov	r1, r8
 800e8cc:	4648      	mov	r0, r9
 800e8ce:	f000 fcb3 	bl	800f238 <__pow5mult>
 800e8d2:	9002      	str	r0, [sp, #8]
 800e8d4:	2101      	movs	r1, #1
 800e8d6:	4648      	mov	r0, r9
 800e8d8:	f000 fbf6 	bl	800f0c8 <__i2b>
 800e8dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8de:	4604      	mov	r4, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 81d8 	beq.w	800ec96 <_dtoa_r+0xb56>
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	4601      	mov	r1, r0
 800e8ea:	4648      	mov	r0, r9
 800e8ec:	f000 fca4 	bl	800f238 <__pow5mult>
 800e8f0:	9b07      	ldr	r3, [sp, #28]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	f300 809f 	bgt.w	800ea38 <_dtoa_r+0x8f8>
 800e8fa:	9b04      	ldr	r3, [sp, #16]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	f040 8097 	bne.w	800ea30 <_dtoa_r+0x8f0>
 800e902:	9b05      	ldr	r3, [sp, #20]
 800e904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f040 8093 	bne.w	800ea34 <_dtoa_r+0x8f4>
 800e90e:	9b05      	ldr	r3, [sp, #20]
 800e910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e914:	0d1b      	lsrs	r3, r3, #20
 800e916:	051b      	lsls	r3, r3, #20
 800e918:	b133      	cbz	r3, 800e928 <_dtoa_r+0x7e8>
 800e91a:	9b00      	ldr	r3, [sp, #0]
 800e91c:	3301      	adds	r3, #1
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	9b06      	ldr	r3, [sp, #24]
 800e922:	3301      	adds	r3, #1
 800e924:	9306      	str	r3, [sp, #24]
 800e926:	2301      	movs	r3, #1
 800e928:	9308      	str	r3, [sp, #32]
 800e92a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f000 81b8 	beq.w	800eca2 <_dtoa_r+0xb62>
 800e932:	6923      	ldr	r3, [r4, #16]
 800e934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e938:	6918      	ldr	r0, [r3, #16]
 800e93a:	f000 fb79 	bl	800f030 <__hi0bits>
 800e93e:	f1c0 0020 	rsb	r0, r0, #32
 800e942:	9b06      	ldr	r3, [sp, #24]
 800e944:	4418      	add	r0, r3
 800e946:	f010 001f 	ands.w	r0, r0, #31
 800e94a:	f000 8082 	beq.w	800ea52 <_dtoa_r+0x912>
 800e94e:	f1c0 0320 	rsb	r3, r0, #32
 800e952:	2b04      	cmp	r3, #4
 800e954:	dd73      	ble.n	800ea3e <_dtoa_r+0x8fe>
 800e956:	9b00      	ldr	r3, [sp, #0]
 800e958:	f1c0 001c 	rsb	r0, r0, #28
 800e95c:	4403      	add	r3, r0
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	9b06      	ldr	r3, [sp, #24]
 800e962:	4403      	add	r3, r0
 800e964:	4406      	add	r6, r0
 800e966:	9306      	str	r3, [sp, #24]
 800e968:	9b00      	ldr	r3, [sp, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	dd05      	ble.n	800e97a <_dtoa_r+0x83a>
 800e96e:	9902      	ldr	r1, [sp, #8]
 800e970:	461a      	mov	r2, r3
 800e972:	4648      	mov	r0, r9
 800e974:	f000 fcba 	bl	800f2ec <__lshift>
 800e978:	9002      	str	r0, [sp, #8]
 800e97a:	9b06      	ldr	r3, [sp, #24]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	dd05      	ble.n	800e98c <_dtoa_r+0x84c>
 800e980:	4621      	mov	r1, r4
 800e982:	461a      	mov	r2, r3
 800e984:	4648      	mov	r0, r9
 800e986:	f000 fcb1 	bl	800f2ec <__lshift>
 800e98a:	4604      	mov	r4, r0
 800e98c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d061      	beq.n	800ea56 <_dtoa_r+0x916>
 800e992:	9802      	ldr	r0, [sp, #8]
 800e994:	4621      	mov	r1, r4
 800e996:	f000 fd15 	bl	800f3c4 <__mcmp>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	da5b      	bge.n	800ea56 <_dtoa_r+0x916>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	9902      	ldr	r1, [sp, #8]
 800e9a2:	220a      	movs	r2, #10
 800e9a4:	4648      	mov	r0, r9
 800e9a6:	f000 fafd 	bl	800efa4 <__multadd>
 800e9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ac:	9002      	str	r0, [sp, #8]
 800e9ae:	f107 38ff 	add.w	r8, r7, #4294967295
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 8177 	beq.w	800eca6 <_dtoa_r+0xb66>
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	220a      	movs	r2, #10
 800e9be:	4648      	mov	r0, r9
 800e9c0:	f000 faf0 	bl	800efa4 <__multadd>
 800e9c4:	f1bb 0f00 	cmp.w	fp, #0
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	dc6f      	bgt.n	800eaac <_dtoa_r+0x96c>
 800e9cc:	9b07      	ldr	r3, [sp, #28]
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	dc49      	bgt.n	800ea66 <_dtoa_r+0x926>
 800e9d2:	e06b      	b.n	800eaac <_dtoa_r+0x96c>
 800e9d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e9d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e9da:	e73c      	b.n	800e856 <_dtoa_r+0x716>
 800e9dc:	3fe00000 	.word	0x3fe00000
 800e9e0:	40240000 	.word	0x40240000
 800e9e4:	9b03      	ldr	r3, [sp, #12]
 800e9e6:	1e5c      	subs	r4, r3, #1
 800e9e8:	9b08      	ldr	r3, [sp, #32]
 800e9ea:	42a3      	cmp	r3, r4
 800e9ec:	db09      	blt.n	800ea02 <_dtoa_r+0x8c2>
 800e9ee:	1b1c      	subs	r4, r3, r4
 800e9f0:	9b03      	ldr	r3, [sp, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f6bf af30 	bge.w	800e858 <_dtoa_r+0x718>
 800e9f8:	9b00      	ldr	r3, [sp, #0]
 800e9fa:	9a03      	ldr	r2, [sp, #12]
 800e9fc:	1a9e      	subs	r6, r3, r2
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e72b      	b.n	800e85a <_dtoa_r+0x71a>
 800ea02:	9b08      	ldr	r3, [sp, #32]
 800ea04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ea06:	9408      	str	r4, [sp, #32]
 800ea08:	1ae3      	subs	r3, r4, r3
 800ea0a:	441a      	add	r2, r3
 800ea0c:	9e00      	ldr	r6, [sp, #0]
 800ea0e:	9b03      	ldr	r3, [sp, #12]
 800ea10:	920d      	str	r2, [sp, #52]	@ 0x34
 800ea12:	2400      	movs	r4, #0
 800ea14:	e721      	b.n	800e85a <_dtoa_r+0x71a>
 800ea16:	9c08      	ldr	r4, [sp, #32]
 800ea18:	9e00      	ldr	r6, [sp, #0]
 800ea1a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ea1c:	e728      	b.n	800e870 <_dtoa_r+0x730>
 800ea1e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ea22:	e751      	b.n	800e8c8 <_dtoa_r+0x788>
 800ea24:	9a08      	ldr	r2, [sp, #32]
 800ea26:	9902      	ldr	r1, [sp, #8]
 800ea28:	e750      	b.n	800e8cc <_dtoa_r+0x78c>
 800ea2a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ea2e:	e751      	b.n	800e8d4 <_dtoa_r+0x794>
 800ea30:	2300      	movs	r3, #0
 800ea32:	e779      	b.n	800e928 <_dtoa_r+0x7e8>
 800ea34:	9b04      	ldr	r3, [sp, #16]
 800ea36:	e777      	b.n	800e928 <_dtoa_r+0x7e8>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	9308      	str	r3, [sp, #32]
 800ea3c:	e779      	b.n	800e932 <_dtoa_r+0x7f2>
 800ea3e:	d093      	beq.n	800e968 <_dtoa_r+0x828>
 800ea40:	9a00      	ldr	r2, [sp, #0]
 800ea42:	331c      	adds	r3, #28
 800ea44:	441a      	add	r2, r3
 800ea46:	9200      	str	r2, [sp, #0]
 800ea48:	9a06      	ldr	r2, [sp, #24]
 800ea4a:	441a      	add	r2, r3
 800ea4c:	441e      	add	r6, r3
 800ea4e:	9206      	str	r2, [sp, #24]
 800ea50:	e78a      	b.n	800e968 <_dtoa_r+0x828>
 800ea52:	4603      	mov	r3, r0
 800ea54:	e7f4      	b.n	800ea40 <_dtoa_r+0x900>
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	46b8      	mov	r8, r7
 800ea5c:	dc20      	bgt.n	800eaa0 <_dtoa_r+0x960>
 800ea5e:	469b      	mov	fp, r3
 800ea60:	9b07      	ldr	r3, [sp, #28]
 800ea62:	2b02      	cmp	r3, #2
 800ea64:	dd1e      	ble.n	800eaa4 <_dtoa_r+0x964>
 800ea66:	f1bb 0f00 	cmp.w	fp, #0
 800ea6a:	f47f adb1 	bne.w	800e5d0 <_dtoa_r+0x490>
 800ea6e:	4621      	mov	r1, r4
 800ea70:	465b      	mov	r3, fp
 800ea72:	2205      	movs	r2, #5
 800ea74:	4648      	mov	r0, r9
 800ea76:	f000 fa95 	bl	800efa4 <__multadd>
 800ea7a:	4601      	mov	r1, r0
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	9802      	ldr	r0, [sp, #8]
 800ea80:	f000 fca0 	bl	800f3c4 <__mcmp>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	f77f ada3 	ble.w	800e5d0 <_dtoa_r+0x490>
 800ea8a:	4656      	mov	r6, sl
 800ea8c:	2331      	movs	r3, #49	@ 0x31
 800ea8e:	f806 3b01 	strb.w	r3, [r6], #1
 800ea92:	f108 0801 	add.w	r8, r8, #1
 800ea96:	e59f      	b.n	800e5d8 <_dtoa_r+0x498>
 800ea98:	9c03      	ldr	r4, [sp, #12]
 800ea9a:	46b8      	mov	r8, r7
 800ea9c:	4625      	mov	r5, r4
 800ea9e:	e7f4      	b.n	800ea8a <_dtoa_r+0x94a>
 800eaa0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800eaa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	f000 8101 	beq.w	800ecae <_dtoa_r+0xb6e>
 800eaac:	2e00      	cmp	r6, #0
 800eaae:	dd05      	ble.n	800eabc <_dtoa_r+0x97c>
 800eab0:	4629      	mov	r1, r5
 800eab2:	4632      	mov	r2, r6
 800eab4:	4648      	mov	r0, r9
 800eab6:	f000 fc19 	bl	800f2ec <__lshift>
 800eaba:	4605      	mov	r5, r0
 800eabc:	9b08      	ldr	r3, [sp, #32]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d05c      	beq.n	800eb7c <_dtoa_r+0xa3c>
 800eac2:	6869      	ldr	r1, [r5, #4]
 800eac4:	4648      	mov	r0, r9
 800eac6:	f000 fa0b 	bl	800eee0 <_Balloc>
 800eaca:	4606      	mov	r6, r0
 800eacc:	b928      	cbnz	r0, 800eada <_dtoa_r+0x99a>
 800eace:	4b82      	ldr	r3, [pc, #520]	@ (800ecd8 <_dtoa_r+0xb98>)
 800ead0:	4602      	mov	r2, r0
 800ead2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ead6:	f7ff bb4a 	b.w	800e16e <_dtoa_r+0x2e>
 800eada:	692a      	ldr	r2, [r5, #16]
 800eadc:	3202      	adds	r2, #2
 800eade:	0092      	lsls	r2, r2, #2
 800eae0:	f105 010c 	add.w	r1, r5, #12
 800eae4:	300c      	adds	r0, #12
 800eae6:	f001 f97b 	bl	800fde0 <memcpy>
 800eaea:	2201      	movs	r2, #1
 800eaec:	4631      	mov	r1, r6
 800eaee:	4648      	mov	r0, r9
 800eaf0:	f000 fbfc 	bl	800f2ec <__lshift>
 800eaf4:	f10a 0301 	add.w	r3, sl, #1
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	eb0a 030b 	add.w	r3, sl, fp
 800eafe:	9308      	str	r3, [sp, #32]
 800eb00:	9b04      	ldr	r3, [sp, #16]
 800eb02:	f003 0301 	and.w	r3, r3, #1
 800eb06:	462f      	mov	r7, r5
 800eb08:	9306      	str	r3, [sp, #24]
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	9b00      	ldr	r3, [sp, #0]
 800eb0e:	9802      	ldr	r0, [sp, #8]
 800eb10:	4621      	mov	r1, r4
 800eb12:	f103 3bff 	add.w	fp, r3, #4294967295
 800eb16:	f7ff fa8b 	bl	800e030 <quorem>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	3330      	adds	r3, #48	@ 0x30
 800eb1e:	9003      	str	r0, [sp, #12]
 800eb20:	4639      	mov	r1, r7
 800eb22:	9802      	ldr	r0, [sp, #8]
 800eb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb26:	f000 fc4d 	bl	800f3c4 <__mcmp>
 800eb2a:	462a      	mov	r2, r5
 800eb2c:	9004      	str	r0, [sp, #16]
 800eb2e:	4621      	mov	r1, r4
 800eb30:	4648      	mov	r0, r9
 800eb32:	f000 fc63 	bl	800f3fc <__mdiff>
 800eb36:	68c2      	ldr	r2, [r0, #12]
 800eb38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	bb02      	cbnz	r2, 800eb80 <_dtoa_r+0xa40>
 800eb3e:	4601      	mov	r1, r0
 800eb40:	9802      	ldr	r0, [sp, #8]
 800eb42:	f000 fc3f 	bl	800f3c4 <__mcmp>
 800eb46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb48:	4602      	mov	r2, r0
 800eb4a:	4631      	mov	r1, r6
 800eb4c:	4648      	mov	r0, r9
 800eb4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800eb50:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb52:	f000 fa05 	bl	800ef60 <_Bfree>
 800eb56:	9b07      	ldr	r3, [sp, #28]
 800eb58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800eb5a:	9e00      	ldr	r6, [sp, #0]
 800eb5c:	ea42 0103 	orr.w	r1, r2, r3
 800eb60:	9b06      	ldr	r3, [sp, #24]
 800eb62:	4319      	orrs	r1, r3
 800eb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb66:	d10d      	bne.n	800eb84 <_dtoa_r+0xa44>
 800eb68:	2b39      	cmp	r3, #57	@ 0x39
 800eb6a:	d027      	beq.n	800ebbc <_dtoa_r+0xa7c>
 800eb6c:	9a04      	ldr	r2, [sp, #16]
 800eb6e:	2a00      	cmp	r2, #0
 800eb70:	dd01      	ble.n	800eb76 <_dtoa_r+0xa36>
 800eb72:	9b03      	ldr	r3, [sp, #12]
 800eb74:	3331      	adds	r3, #49	@ 0x31
 800eb76:	f88b 3000 	strb.w	r3, [fp]
 800eb7a:	e52e      	b.n	800e5da <_dtoa_r+0x49a>
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	e7b9      	b.n	800eaf4 <_dtoa_r+0x9b4>
 800eb80:	2201      	movs	r2, #1
 800eb82:	e7e2      	b.n	800eb4a <_dtoa_r+0xa0a>
 800eb84:	9904      	ldr	r1, [sp, #16]
 800eb86:	2900      	cmp	r1, #0
 800eb88:	db04      	blt.n	800eb94 <_dtoa_r+0xa54>
 800eb8a:	9807      	ldr	r0, [sp, #28]
 800eb8c:	4301      	orrs	r1, r0
 800eb8e:	9806      	ldr	r0, [sp, #24]
 800eb90:	4301      	orrs	r1, r0
 800eb92:	d120      	bne.n	800ebd6 <_dtoa_r+0xa96>
 800eb94:	2a00      	cmp	r2, #0
 800eb96:	ddee      	ble.n	800eb76 <_dtoa_r+0xa36>
 800eb98:	9902      	ldr	r1, [sp, #8]
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	4648      	mov	r0, r9
 800eba0:	f000 fba4 	bl	800f2ec <__lshift>
 800eba4:	4621      	mov	r1, r4
 800eba6:	9002      	str	r0, [sp, #8]
 800eba8:	f000 fc0c 	bl	800f3c4 <__mcmp>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	9b00      	ldr	r3, [sp, #0]
 800ebb0:	dc02      	bgt.n	800ebb8 <_dtoa_r+0xa78>
 800ebb2:	d1e0      	bne.n	800eb76 <_dtoa_r+0xa36>
 800ebb4:	07da      	lsls	r2, r3, #31
 800ebb6:	d5de      	bpl.n	800eb76 <_dtoa_r+0xa36>
 800ebb8:	2b39      	cmp	r3, #57	@ 0x39
 800ebba:	d1da      	bne.n	800eb72 <_dtoa_r+0xa32>
 800ebbc:	2339      	movs	r3, #57	@ 0x39
 800ebbe:	f88b 3000 	strb.w	r3, [fp]
 800ebc2:	4633      	mov	r3, r6
 800ebc4:	461e      	mov	r6, r3
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ebcc:	2a39      	cmp	r2, #57	@ 0x39
 800ebce:	d04e      	beq.n	800ec6e <_dtoa_r+0xb2e>
 800ebd0:	3201      	adds	r2, #1
 800ebd2:	701a      	strb	r2, [r3, #0]
 800ebd4:	e501      	b.n	800e5da <_dtoa_r+0x49a>
 800ebd6:	2a00      	cmp	r2, #0
 800ebd8:	dd03      	ble.n	800ebe2 <_dtoa_r+0xaa2>
 800ebda:	2b39      	cmp	r3, #57	@ 0x39
 800ebdc:	d0ee      	beq.n	800ebbc <_dtoa_r+0xa7c>
 800ebde:	3301      	adds	r3, #1
 800ebe0:	e7c9      	b.n	800eb76 <_dtoa_r+0xa36>
 800ebe2:	9a00      	ldr	r2, [sp, #0]
 800ebe4:	9908      	ldr	r1, [sp, #32]
 800ebe6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ebea:	428a      	cmp	r2, r1
 800ebec:	d028      	beq.n	800ec40 <_dtoa_r+0xb00>
 800ebee:	9902      	ldr	r1, [sp, #8]
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	220a      	movs	r2, #10
 800ebf4:	4648      	mov	r0, r9
 800ebf6:	f000 f9d5 	bl	800efa4 <__multadd>
 800ebfa:	42af      	cmp	r7, r5
 800ebfc:	9002      	str	r0, [sp, #8]
 800ebfe:	f04f 0300 	mov.w	r3, #0
 800ec02:	f04f 020a 	mov.w	r2, #10
 800ec06:	4639      	mov	r1, r7
 800ec08:	4648      	mov	r0, r9
 800ec0a:	d107      	bne.n	800ec1c <_dtoa_r+0xadc>
 800ec0c:	f000 f9ca 	bl	800efa4 <__multadd>
 800ec10:	4607      	mov	r7, r0
 800ec12:	4605      	mov	r5, r0
 800ec14:	9b00      	ldr	r3, [sp, #0]
 800ec16:	3301      	adds	r3, #1
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	e777      	b.n	800eb0c <_dtoa_r+0x9cc>
 800ec1c:	f000 f9c2 	bl	800efa4 <__multadd>
 800ec20:	4629      	mov	r1, r5
 800ec22:	4607      	mov	r7, r0
 800ec24:	2300      	movs	r3, #0
 800ec26:	220a      	movs	r2, #10
 800ec28:	4648      	mov	r0, r9
 800ec2a:	f000 f9bb 	bl	800efa4 <__multadd>
 800ec2e:	4605      	mov	r5, r0
 800ec30:	e7f0      	b.n	800ec14 <_dtoa_r+0xad4>
 800ec32:	f1bb 0f00 	cmp.w	fp, #0
 800ec36:	bfcc      	ite	gt
 800ec38:	465e      	movgt	r6, fp
 800ec3a:	2601      	movle	r6, #1
 800ec3c:	4456      	add	r6, sl
 800ec3e:	2700      	movs	r7, #0
 800ec40:	9902      	ldr	r1, [sp, #8]
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	2201      	movs	r2, #1
 800ec46:	4648      	mov	r0, r9
 800ec48:	f000 fb50 	bl	800f2ec <__lshift>
 800ec4c:	4621      	mov	r1, r4
 800ec4e:	9002      	str	r0, [sp, #8]
 800ec50:	f000 fbb8 	bl	800f3c4 <__mcmp>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	dcb4      	bgt.n	800ebc2 <_dtoa_r+0xa82>
 800ec58:	d102      	bne.n	800ec60 <_dtoa_r+0xb20>
 800ec5a:	9b00      	ldr	r3, [sp, #0]
 800ec5c:	07db      	lsls	r3, r3, #31
 800ec5e:	d4b0      	bmi.n	800ebc2 <_dtoa_r+0xa82>
 800ec60:	4633      	mov	r3, r6
 800ec62:	461e      	mov	r6, r3
 800ec64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec68:	2a30      	cmp	r2, #48	@ 0x30
 800ec6a:	d0fa      	beq.n	800ec62 <_dtoa_r+0xb22>
 800ec6c:	e4b5      	b.n	800e5da <_dtoa_r+0x49a>
 800ec6e:	459a      	cmp	sl, r3
 800ec70:	d1a8      	bne.n	800ebc4 <_dtoa_r+0xa84>
 800ec72:	2331      	movs	r3, #49	@ 0x31
 800ec74:	f108 0801 	add.w	r8, r8, #1
 800ec78:	f88a 3000 	strb.w	r3, [sl]
 800ec7c:	e4ad      	b.n	800e5da <_dtoa_r+0x49a>
 800ec7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ec80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ecdc <_dtoa_r+0xb9c>
 800ec84:	b11b      	cbz	r3, 800ec8e <_dtoa_r+0xb4e>
 800ec86:	f10a 0308 	add.w	r3, sl, #8
 800ec8a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ec8c:	6013      	str	r3, [r2, #0]
 800ec8e:	4650      	mov	r0, sl
 800ec90:	b017      	add	sp, #92	@ 0x5c
 800ec92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec96:	9b07      	ldr	r3, [sp, #28]
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	f77f ae2e 	ble.w	800e8fa <_dtoa_r+0x7ba>
 800ec9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eca0:	9308      	str	r3, [sp, #32]
 800eca2:	2001      	movs	r0, #1
 800eca4:	e64d      	b.n	800e942 <_dtoa_r+0x802>
 800eca6:	f1bb 0f00 	cmp.w	fp, #0
 800ecaa:	f77f aed9 	ble.w	800ea60 <_dtoa_r+0x920>
 800ecae:	4656      	mov	r6, sl
 800ecb0:	9802      	ldr	r0, [sp, #8]
 800ecb2:	4621      	mov	r1, r4
 800ecb4:	f7ff f9bc 	bl	800e030 <quorem>
 800ecb8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ecbc:	f806 3b01 	strb.w	r3, [r6], #1
 800ecc0:	eba6 020a 	sub.w	r2, r6, sl
 800ecc4:	4593      	cmp	fp, r2
 800ecc6:	ddb4      	ble.n	800ec32 <_dtoa_r+0xaf2>
 800ecc8:	9902      	ldr	r1, [sp, #8]
 800ecca:	2300      	movs	r3, #0
 800eccc:	220a      	movs	r2, #10
 800ecce:	4648      	mov	r0, r9
 800ecd0:	f000 f968 	bl	800efa4 <__multadd>
 800ecd4:	9002      	str	r0, [sp, #8]
 800ecd6:	e7eb      	b.n	800ecb0 <_dtoa_r+0xb70>
 800ecd8:	08010bbc 	.word	0x08010bbc
 800ecdc:	08010b40 	.word	0x08010b40

0800ece0 <_free_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4605      	mov	r5, r0
 800ece4:	2900      	cmp	r1, #0
 800ece6:	d041      	beq.n	800ed6c <_free_r+0x8c>
 800ece8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecec:	1f0c      	subs	r4, r1, #4
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	bfb8      	it	lt
 800ecf2:	18e4      	addlt	r4, r4, r3
 800ecf4:	f000 f8e8 	bl	800eec8 <__malloc_lock>
 800ecf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ed70 <_free_r+0x90>)
 800ecfa:	6813      	ldr	r3, [r2, #0]
 800ecfc:	b933      	cbnz	r3, 800ed0c <_free_r+0x2c>
 800ecfe:	6063      	str	r3, [r4, #4]
 800ed00:	6014      	str	r4, [r2, #0]
 800ed02:	4628      	mov	r0, r5
 800ed04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed08:	f000 b8e4 	b.w	800eed4 <__malloc_unlock>
 800ed0c:	42a3      	cmp	r3, r4
 800ed0e:	d908      	bls.n	800ed22 <_free_r+0x42>
 800ed10:	6820      	ldr	r0, [r4, #0]
 800ed12:	1821      	adds	r1, r4, r0
 800ed14:	428b      	cmp	r3, r1
 800ed16:	bf01      	itttt	eq
 800ed18:	6819      	ldreq	r1, [r3, #0]
 800ed1a:	685b      	ldreq	r3, [r3, #4]
 800ed1c:	1809      	addeq	r1, r1, r0
 800ed1e:	6021      	streq	r1, [r4, #0]
 800ed20:	e7ed      	b.n	800ecfe <_free_r+0x1e>
 800ed22:	461a      	mov	r2, r3
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	b10b      	cbz	r3, 800ed2c <_free_r+0x4c>
 800ed28:	42a3      	cmp	r3, r4
 800ed2a:	d9fa      	bls.n	800ed22 <_free_r+0x42>
 800ed2c:	6811      	ldr	r1, [r2, #0]
 800ed2e:	1850      	adds	r0, r2, r1
 800ed30:	42a0      	cmp	r0, r4
 800ed32:	d10b      	bne.n	800ed4c <_free_r+0x6c>
 800ed34:	6820      	ldr	r0, [r4, #0]
 800ed36:	4401      	add	r1, r0
 800ed38:	1850      	adds	r0, r2, r1
 800ed3a:	4283      	cmp	r3, r0
 800ed3c:	6011      	str	r1, [r2, #0]
 800ed3e:	d1e0      	bne.n	800ed02 <_free_r+0x22>
 800ed40:	6818      	ldr	r0, [r3, #0]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	6053      	str	r3, [r2, #4]
 800ed46:	4408      	add	r0, r1
 800ed48:	6010      	str	r0, [r2, #0]
 800ed4a:	e7da      	b.n	800ed02 <_free_r+0x22>
 800ed4c:	d902      	bls.n	800ed54 <_free_r+0x74>
 800ed4e:	230c      	movs	r3, #12
 800ed50:	602b      	str	r3, [r5, #0]
 800ed52:	e7d6      	b.n	800ed02 <_free_r+0x22>
 800ed54:	6820      	ldr	r0, [r4, #0]
 800ed56:	1821      	adds	r1, r4, r0
 800ed58:	428b      	cmp	r3, r1
 800ed5a:	bf04      	itt	eq
 800ed5c:	6819      	ldreq	r1, [r3, #0]
 800ed5e:	685b      	ldreq	r3, [r3, #4]
 800ed60:	6063      	str	r3, [r4, #4]
 800ed62:	bf04      	itt	eq
 800ed64:	1809      	addeq	r1, r1, r0
 800ed66:	6021      	streq	r1, [r4, #0]
 800ed68:	6054      	str	r4, [r2, #4]
 800ed6a:	e7ca      	b.n	800ed02 <_free_r+0x22>
 800ed6c:	bd38      	pop	{r3, r4, r5, pc}
 800ed6e:	bf00      	nop
 800ed70:	200026f4 	.word	0x200026f4

0800ed74 <malloc>:
 800ed74:	4b02      	ldr	r3, [pc, #8]	@ (800ed80 <malloc+0xc>)
 800ed76:	4601      	mov	r1, r0
 800ed78:	6818      	ldr	r0, [r3, #0]
 800ed7a:	f000 b825 	b.w	800edc8 <_malloc_r>
 800ed7e:	bf00      	nop
 800ed80:	20000068 	.word	0x20000068

0800ed84 <sbrk_aligned>:
 800ed84:	b570      	push	{r4, r5, r6, lr}
 800ed86:	4e0f      	ldr	r6, [pc, #60]	@ (800edc4 <sbrk_aligned+0x40>)
 800ed88:	460c      	mov	r4, r1
 800ed8a:	6831      	ldr	r1, [r6, #0]
 800ed8c:	4605      	mov	r5, r0
 800ed8e:	b911      	cbnz	r1, 800ed96 <sbrk_aligned+0x12>
 800ed90:	f001 f816 	bl	800fdc0 <_sbrk_r>
 800ed94:	6030      	str	r0, [r6, #0]
 800ed96:	4621      	mov	r1, r4
 800ed98:	4628      	mov	r0, r5
 800ed9a:	f001 f811 	bl	800fdc0 <_sbrk_r>
 800ed9e:	1c43      	adds	r3, r0, #1
 800eda0:	d103      	bne.n	800edaa <sbrk_aligned+0x26>
 800eda2:	f04f 34ff 	mov.w	r4, #4294967295
 800eda6:	4620      	mov	r0, r4
 800eda8:	bd70      	pop	{r4, r5, r6, pc}
 800edaa:	1cc4      	adds	r4, r0, #3
 800edac:	f024 0403 	bic.w	r4, r4, #3
 800edb0:	42a0      	cmp	r0, r4
 800edb2:	d0f8      	beq.n	800eda6 <sbrk_aligned+0x22>
 800edb4:	1a21      	subs	r1, r4, r0
 800edb6:	4628      	mov	r0, r5
 800edb8:	f001 f802 	bl	800fdc0 <_sbrk_r>
 800edbc:	3001      	adds	r0, #1
 800edbe:	d1f2      	bne.n	800eda6 <sbrk_aligned+0x22>
 800edc0:	e7ef      	b.n	800eda2 <sbrk_aligned+0x1e>
 800edc2:	bf00      	nop
 800edc4:	200026f0 	.word	0x200026f0

0800edc8 <_malloc_r>:
 800edc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edcc:	1ccd      	adds	r5, r1, #3
 800edce:	f025 0503 	bic.w	r5, r5, #3
 800edd2:	3508      	adds	r5, #8
 800edd4:	2d0c      	cmp	r5, #12
 800edd6:	bf38      	it	cc
 800edd8:	250c      	movcc	r5, #12
 800edda:	2d00      	cmp	r5, #0
 800eddc:	4606      	mov	r6, r0
 800edde:	db01      	blt.n	800ede4 <_malloc_r+0x1c>
 800ede0:	42a9      	cmp	r1, r5
 800ede2:	d904      	bls.n	800edee <_malloc_r+0x26>
 800ede4:	230c      	movs	r3, #12
 800ede6:	6033      	str	r3, [r6, #0]
 800ede8:	2000      	movs	r0, #0
 800edea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eec4 <_malloc_r+0xfc>
 800edf2:	f000 f869 	bl	800eec8 <__malloc_lock>
 800edf6:	f8d8 3000 	ldr.w	r3, [r8]
 800edfa:	461c      	mov	r4, r3
 800edfc:	bb44      	cbnz	r4, 800ee50 <_malloc_r+0x88>
 800edfe:	4629      	mov	r1, r5
 800ee00:	4630      	mov	r0, r6
 800ee02:	f7ff ffbf 	bl	800ed84 <sbrk_aligned>
 800ee06:	1c43      	adds	r3, r0, #1
 800ee08:	4604      	mov	r4, r0
 800ee0a:	d158      	bne.n	800eebe <_malloc_r+0xf6>
 800ee0c:	f8d8 4000 	ldr.w	r4, [r8]
 800ee10:	4627      	mov	r7, r4
 800ee12:	2f00      	cmp	r7, #0
 800ee14:	d143      	bne.n	800ee9e <_malloc_r+0xd6>
 800ee16:	2c00      	cmp	r4, #0
 800ee18:	d04b      	beq.n	800eeb2 <_malloc_r+0xea>
 800ee1a:	6823      	ldr	r3, [r4, #0]
 800ee1c:	4639      	mov	r1, r7
 800ee1e:	4630      	mov	r0, r6
 800ee20:	eb04 0903 	add.w	r9, r4, r3
 800ee24:	f000 ffcc 	bl	800fdc0 <_sbrk_r>
 800ee28:	4581      	cmp	r9, r0
 800ee2a:	d142      	bne.n	800eeb2 <_malloc_r+0xea>
 800ee2c:	6821      	ldr	r1, [r4, #0]
 800ee2e:	1a6d      	subs	r5, r5, r1
 800ee30:	4629      	mov	r1, r5
 800ee32:	4630      	mov	r0, r6
 800ee34:	f7ff ffa6 	bl	800ed84 <sbrk_aligned>
 800ee38:	3001      	adds	r0, #1
 800ee3a:	d03a      	beq.n	800eeb2 <_malloc_r+0xea>
 800ee3c:	6823      	ldr	r3, [r4, #0]
 800ee3e:	442b      	add	r3, r5
 800ee40:	6023      	str	r3, [r4, #0]
 800ee42:	f8d8 3000 	ldr.w	r3, [r8]
 800ee46:	685a      	ldr	r2, [r3, #4]
 800ee48:	bb62      	cbnz	r2, 800eea4 <_malloc_r+0xdc>
 800ee4a:	f8c8 7000 	str.w	r7, [r8]
 800ee4e:	e00f      	b.n	800ee70 <_malloc_r+0xa8>
 800ee50:	6822      	ldr	r2, [r4, #0]
 800ee52:	1b52      	subs	r2, r2, r5
 800ee54:	d420      	bmi.n	800ee98 <_malloc_r+0xd0>
 800ee56:	2a0b      	cmp	r2, #11
 800ee58:	d917      	bls.n	800ee8a <_malloc_r+0xc2>
 800ee5a:	1961      	adds	r1, r4, r5
 800ee5c:	42a3      	cmp	r3, r4
 800ee5e:	6025      	str	r5, [r4, #0]
 800ee60:	bf18      	it	ne
 800ee62:	6059      	strne	r1, [r3, #4]
 800ee64:	6863      	ldr	r3, [r4, #4]
 800ee66:	bf08      	it	eq
 800ee68:	f8c8 1000 	streq.w	r1, [r8]
 800ee6c:	5162      	str	r2, [r4, r5]
 800ee6e:	604b      	str	r3, [r1, #4]
 800ee70:	4630      	mov	r0, r6
 800ee72:	f000 f82f 	bl	800eed4 <__malloc_unlock>
 800ee76:	f104 000b 	add.w	r0, r4, #11
 800ee7a:	1d23      	adds	r3, r4, #4
 800ee7c:	f020 0007 	bic.w	r0, r0, #7
 800ee80:	1ac2      	subs	r2, r0, r3
 800ee82:	bf1c      	itt	ne
 800ee84:	1a1b      	subne	r3, r3, r0
 800ee86:	50a3      	strne	r3, [r4, r2]
 800ee88:	e7af      	b.n	800edea <_malloc_r+0x22>
 800ee8a:	6862      	ldr	r2, [r4, #4]
 800ee8c:	42a3      	cmp	r3, r4
 800ee8e:	bf0c      	ite	eq
 800ee90:	f8c8 2000 	streq.w	r2, [r8]
 800ee94:	605a      	strne	r2, [r3, #4]
 800ee96:	e7eb      	b.n	800ee70 <_malloc_r+0xa8>
 800ee98:	4623      	mov	r3, r4
 800ee9a:	6864      	ldr	r4, [r4, #4]
 800ee9c:	e7ae      	b.n	800edfc <_malloc_r+0x34>
 800ee9e:	463c      	mov	r4, r7
 800eea0:	687f      	ldr	r7, [r7, #4]
 800eea2:	e7b6      	b.n	800ee12 <_malloc_r+0x4a>
 800eea4:	461a      	mov	r2, r3
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	42a3      	cmp	r3, r4
 800eeaa:	d1fb      	bne.n	800eea4 <_malloc_r+0xdc>
 800eeac:	2300      	movs	r3, #0
 800eeae:	6053      	str	r3, [r2, #4]
 800eeb0:	e7de      	b.n	800ee70 <_malloc_r+0xa8>
 800eeb2:	230c      	movs	r3, #12
 800eeb4:	6033      	str	r3, [r6, #0]
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f000 f80c 	bl	800eed4 <__malloc_unlock>
 800eebc:	e794      	b.n	800ede8 <_malloc_r+0x20>
 800eebe:	6005      	str	r5, [r0, #0]
 800eec0:	e7d6      	b.n	800ee70 <_malloc_r+0xa8>
 800eec2:	bf00      	nop
 800eec4:	200026f4 	.word	0x200026f4

0800eec8 <__malloc_lock>:
 800eec8:	4801      	ldr	r0, [pc, #4]	@ (800eed0 <__malloc_lock+0x8>)
 800eeca:	f7ff b890 	b.w	800dfee <__retarget_lock_acquire_recursive>
 800eece:	bf00      	nop
 800eed0:	200026ec 	.word	0x200026ec

0800eed4 <__malloc_unlock>:
 800eed4:	4801      	ldr	r0, [pc, #4]	@ (800eedc <__malloc_unlock+0x8>)
 800eed6:	f7ff b88b 	b.w	800dff0 <__retarget_lock_release_recursive>
 800eeda:	bf00      	nop
 800eedc:	200026ec 	.word	0x200026ec

0800eee0 <_Balloc>:
 800eee0:	b570      	push	{r4, r5, r6, lr}
 800eee2:	69c6      	ldr	r6, [r0, #28]
 800eee4:	4604      	mov	r4, r0
 800eee6:	460d      	mov	r5, r1
 800eee8:	b976      	cbnz	r6, 800ef08 <_Balloc+0x28>
 800eeea:	2010      	movs	r0, #16
 800eeec:	f7ff ff42 	bl	800ed74 <malloc>
 800eef0:	4602      	mov	r2, r0
 800eef2:	61e0      	str	r0, [r4, #28]
 800eef4:	b920      	cbnz	r0, 800ef00 <_Balloc+0x20>
 800eef6:	4b18      	ldr	r3, [pc, #96]	@ (800ef58 <_Balloc+0x78>)
 800eef8:	4818      	ldr	r0, [pc, #96]	@ (800ef5c <_Balloc+0x7c>)
 800eefa:	216b      	movs	r1, #107	@ 0x6b
 800eefc:	f7ff f87a 	bl	800dff4 <__assert_func>
 800ef00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef04:	6006      	str	r6, [r0, #0]
 800ef06:	60c6      	str	r6, [r0, #12]
 800ef08:	69e6      	ldr	r6, [r4, #28]
 800ef0a:	68f3      	ldr	r3, [r6, #12]
 800ef0c:	b183      	cbz	r3, 800ef30 <_Balloc+0x50>
 800ef0e:	69e3      	ldr	r3, [r4, #28]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef16:	b9b8      	cbnz	r0, 800ef48 <_Balloc+0x68>
 800ef18:	2101      	movs	r1, #1
 800ef1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ef1e:	1d72      	adds	r2, r6, #5
 800ef20:	0092      	lsls	r2, r2, #2
 800ef22:	4620      	mov	r0, r4
 800ef24:	f000 ff71 	bl	800fe0a <_calloc_r>
 800ef28:	b160      	cbz	r0, 800ef44 <_Balloc+0x64>
 800ef2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef2e:	e00e      	b.n	800ef4e <_Balloc+0x6e>
 800ef30:	2221      	movs	r2, #33	@ 0x21
 800ef32:	2104      	movs	r1, #4
 800ef34:	4620      	mov	r0, r4
 800ef36:	f000 ff68 	bl	800fe0a <_calloc_r>
 800ef3a:	69e3      	ldr	r3, [r4, #28]
 800ef3c:	60f0      	str	r0, [r6, #12]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1e4      	bne.n	800ef0e <_Balloc+0x2e>
 800ef44:	2000      	movs	r0, #0
 800ef46:	bd70      	pop	{r4, r5, r6, pc}
 800ef48:	6802      	ldr	r2, [r0, #0]
 800ef4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef54:	e7f7      	b.n	800ef46 <_Balloc+0x66>
 800ef56:	bf00      	nop
 800ef58:	08010b4d 	.word	0x08010b4d
 800ef5c:	08010bcd 	.word	0x08010bcd

0800ef60 <_Bfree>:
 800ef60:	b570      	push	{r4, r5, r6, lr}
 800ef62:	69c6      	ldr	r6, [r0, #28]
 800ef64:	4605      	mov	r5, r0
 800ef66:	460c      	mov	r4, r1
 800ef68:	b976      	cbnz	r6, 800ef88 <_Bfree+0x28>
 800ef6a:	2010      	movs	r0, #16
 800ef6c:	f7ff ff02 	bl	800ed74 <malloc>
 800ef70:	4602      	mov	r2, r0
 800ef72:	61e8      	str	r0, [r5, #28]
 800ef74:	b920      	cbnz	r0, 800ef80 <_Bfree+0x20>
 800ef76:	4b09      	ldr	r3, [pc, #36]	@ (800ef9c <_Bfree+0x3c>)
 800ef78:	4809      	ldr	r0, [pc, #36]	@ (800efa0 <_Bfree+0x40>)
 800ef7a:	218f      	movs	r1, #143	@ 0x8f
 800ef7c:	f7ff f83a 	bl	800dff4 <__assert_func>
 800ef80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef84:	6006      	str	r6, [r0, #0]
 800ef86:	60c6      	str	r6, [r0, #12]
 800ef88:	b13c      	cbz	r4, 800ef9a <_Bfree+0x3a>
 800ef8a:	69eb      	ldr	r3, [r5, #28]
 800ef8c:	6862      	ldr	r2, [r4, #4]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef94:	6021      	str	r1, [r4, #0]
 800ef96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef9a:	bd70      	pop	{r4, r5, r6, pc}
 800ef9c:	08010b4d 	.word	0x08010b4d
 800efa0:	08010bcd 	.word	0x08010bcd

0800efa4 <__multadd>:
 800efa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa8:	690d      	ldr	r5, [r1, #16]
 800efaa:	4607      	mov	r7, r0
 800efac:	460c      	mov	r4, r1
 800efae:	461e      	mov	r6, r3
 800efb0:	f101 0c14 	add.w	ip, r1, #20
 800efb4:	2000      	movs	r0, #0
 800efb6:	f8dc 3000 	ldr.w	r3, [ip]
 800efba:	b299      	uxth	r1, r3
 800efbc:	fb02 6101 	mla	r1, r2, r1, r6
 800efc0:	0c1e      	lsrs	r6, r3, #16
 800efc2:	0c0b      	lsrs	r3, r1, #16
 800efc4:	fb02 3306 	mla	r3, r2, r6, r3
 800efc8:	b289      	uxth	r1, r1
 800efca:	3001      	adds	r0, #1
 800efcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800efd0:	4285      	cmp	r5, r0
 800efd2:	f84c 1b04 	str.w	r1, [ip], #4
 800efd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800efda:	dcec      	bgt.n	800efb6 <__multadd+0x12>
 800efdc:	b30e      	cbz	r6, 800f022 <__multadd+0x7e>
 800efde:	68a3      	ldr	r3, [r4, #8]
 800efe0:	42ab      	cmp	r3, r5
 800efe2:	dc19      	bgt.n	800f018 <__multadd+0x74>
 800efe4:	6861      	ldr	r1, [r4, #4]
 800efe6:	4638      	mov	r0, r7
 800efe8:	3101      	adds	r1, #1
 800efea:	f7ff ff79 	bl	800eee0 <_Balloc>
 800efee:	4680      	mov	r8, r0
 800eff0:	b928      	cbnz	r0, 800effe <__multadd+0x5a>
 800eff2:	4602      	mov	r2, r0
 800eff4:	4b0c      	ldr	r3, [pc, #48]	@ (800f028 <__multadd+0x84>)
 800eff6:	480d      	ldr	r0, [pc, #52]	@ (800f02c <__multadd+0x88>)
 800eff8:	21ba      	movs	r1, #186	@ 0xba
 800effa:	f7fe fffb 	bl	800dff4 <__assert_func>
 800effe:	6922      	ldr	r2, [r4, #16]
 800f000:	3202      	adds	r2, #2
 800f002:	f104 010c 	add.w	r1, r4, #12
 800f006:	0092      	lsls	r2, r2, #2
 800f008:	300c      	adds	r0, #12
 800f00a:	f000 fee9 	bl	800fde0 <memcpy>
 800f00e:	4621      	mov	r1, r4
 800f010:	4638      	mov	r0, r7
 800f012:	f7ff ffa5 	bl	800ef60 <_Bfree>
 800f016:	4644      	mov	r4, r8
 800f018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f01c:	3501      	adds	r5, #1
 800f01e:	615e      	str	r6, [r3, #20]
 800f020:	6125      	str	r5, [r4, #16]
 800f022:	4620      	mov	r0, r4
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	08010bbc 	.word	0x08010bbc
 800f02c:	08010bcd 	.word	0x08010bcd

0800f030 <__hi0bits>:
 800f030:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f034:	4603      	mov	r3, r0
 800f036:	bf36      	itet	cc
 800f038:	0403      	lslcc	r3, r0, #16
 800f03a:	2000      	movcs	r0, #0
 800f03c:	2010      	movcc	r0, #16
 800f03e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f042:	bf3c      	itt	cc
 800f044:	021b      	lslcc	r3, r3, #8
 800f046:	3008      	addcc	r0, #8
 800f048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f04c:	bf3c      	itt	cc
 800f04e:	011b      	lslcc	r3, r3, #4
 800f050:	3004      	addcc	r0, #4
 800f052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f056:	bf3c      	itt	cc
 800f058:	009b      	lslcc	r3, r3, #2
 800f05a:	3002      	addcc	r0, #2
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	db05      	blt.n	800f06c <__hi0bits+0x3c>
 800f060:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f064:	f100 0001 	add.w	r0, r0, #1
 800f068:	bf08      	it	eq
 800f06a:	2020      	moveq	r0, #32
 800f06c:	4770      	bx	lr

0800f06e <__lo0bits>:
 800f06e:	6803      	ldr	r3, [r0, #0]
 800f070:	4602      	mov	r2, r0
 800f072:	f013 0007 	ands.w	r0, r3, #7
 800f076:	d00b      	beq.n	800f090 <__lo0bits+0x22>
 800f078:	07d9      	lsls	r1, r3, #31
 800f07a:	d421      	bmi.n	800f0c0 <__lo0bits+0x52>
 800f07c:	0798      	lsls	r0, r3, #30
 800f07e:	bf49      	itett	mi
 800f080:	085b      	lsrmi	r3, r3, #1
 800f082:	089b      	lsrpl	r3, r3, #2
 800f084:	2001      	movmi	r0, #1
 800f086:	6013      	strmi	r3, [r2, #0]
 800f088:	bf5c      	itt	pl
 800f08a:	6013      	strpl	r3, [r2, #0]
 800f08c:	2002      	movpl	r0, #2
 800f08e:	4770      	bx	lr
 800f090:	b299      	uxth	r1, r3
 800f092:	b909      	cbnz	r1, 800f098 <__lo0bits+0x2a>
 800f094:	0c1b      	lsrs	r3, r3, #16
 800f096:	2010      	movs	r0, #16
 800f098:	b2d9      	uxtb	r1, r3
 800f09a:	b909      	cbnz	r1, 800f0a0 <__lo0bits+0x32>
 800f09c:	3008      	adds	r0, #8
 800f09e:	0a1b      	lsrs	r3, r3, #8
 800f0a0:	0719      	lsls	r1, r3, #28
 800f0a2:	bf04      	itt	eq
 800f0a4:	091b      	lsreq	r3, r3, #4
 800f0a6:	3004      	addeq	r0, #4
 800f0a8:	0799      	lsls	r1, r3, #30
 800f0aa:	bf04      	itt	eq
 800f0ac:	089b      	lsreq	r3, r3, #2
 800f0ae:	3002      	addeq	r0, #2
 800f0b0:	07d9      	lsls	r1, r3, #31
 800f0b2:	d403      	bmi.n	800f0bc <__lo0bits+0x4e>
 800f0b4:	085b      	lsrs	r3, r3, #1
 800f0b6:	f100 0001 	add.w	r0, r0, #1
 800f0ba:	d003      	beq.n	800f0c4 <__lo0bits+0x56>
 800f0bc:	6013      	str	r3, [r2, #0]
 800f0be:	4770      	bx	lr
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	4770      	bx	lr
 800f0c4:	2020      	movs	r0, #32
 800f0c6:	4770      	bx	lr

0800f0c8 <__i2b>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	2101      	movs	r1, #1
 800f0ce:	f7ff ff07 	bl	800eee0 <_Balloc>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	b928      	cbnz	r0, 800f0e2 <__i2b+0x1a>
 800f0d6:	4b05      	ldr	r3, [pc, #20]	@ (800f0ec <__i2b+0x24>)
 800f0d8:	4805      	ldr	r0, [pc, #20]	@ (800f0f0 <__i2b+0x28>)
 800f0da:	f240 1145 	movw	r1, #325	@ 0x145
 800f0de:	f7fe ff89 	bl	800dff4 <__assert_func>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	6144      	str	r4, [r0, #20]
 800f0e6:	6103      	str	r3, [r0, #16]
 800f0e8:	bd10      	pop	{r4, pc}
 800f0ea:	bf00      	nop
 800f0ec:	08010bbc 	.word	0x08010bbc
 800f0f0:	08010bcd 	.word	0x08010bcd

0800f0f4 <__multiply>:
 800f0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f8:	4617      	mov	r7, r2
 800f0fa:	690a      	ldr	r2, [r1, #16]
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	bfa8      	it	ge
 800f102:	463b      	movge	r3, r7
 800f104:	4689      	mov	r9, r1
 800f106:	bfa4      	itt	ge
 800f108:	460f      	movge	r7, r1
 800f10a:	4699      	movge	r9, r3
 800f10c:	693d      	ldr	r5, [r7, #16]
 800f10e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	6879      	ldr	r1, [r7, #4]
 800f116:	eb05 060a 	add.w	r6, r5, sl
 800f11a:	42b3      	cmp	r3, r6
 800f11c:	b085      	sub	sp, #20
 800f11e:	bfb8      	it	lt
 800f120:	3101      	addlt	r1, #1
 800f122:	f7ff fedd 	bl	800eee0 <_Balloc>
 800f126:	b930      	cbnz	r0, 800f136 <__multiply+0x42>
 800f128:	4602      	mov	r2, r0
 800f12a:	4b41      	ldr	r3, [pc, #260]	@ (800f230 <__multiply+0x13c>)
 800f12c:	4841      	ldr	r0, [pc, #260]	@ (800f234 <__multiply+0x140>)
 800f12e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f132:	f7fe ff5f 	bl	800dff4 <__assert_func>
 800f136:	f100 0414 	add.w	r4, r0, #20
 800f13a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f13e:	4623      	mov	r3, r4
 800f140:	2200      	movs	r2, #0
 800f142:	4573      	cmp	r3, lr
 800f144:	d320      	bcc.n	800f188 <__multiply+0x94>
 800f146:	f107 0814 	add.w	r8, r7, #20
 800f14a:	f109 0114 	add.w	r1, r9, #20
 800f14e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f152:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f156:	9302      	str	r3, [sp, #8]
 800f158:	1beb      	subs	r3, r5, r7
 800f15a:	3b15      	subs	r3, #21
 800f15c:	f023 0303 	bic.w	r3, r3, #3
 800f160:	3304      	adds	r3, #4
 800f162:	3715      	adds	r7, #21
 800f164:	42bd      	cmp	r5, r7
 800f166:	bf38      	it	cc
 800f168:	2304      	movcc	r3, #4
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	9b02      	ldr	r3, [sp, #8]
 800f16e:	9103      	str	r1, [sp, #12]
 800f170:	428b      	cmp	r3, r1
 800f172:	d80c      	bhi.n	800f18e <__multiply+0x9a>
 800f174:	2e00      	cmp	r6, #0
 800f176:	dd03      	ble.n	800f180 <__multiply+0x8c>
 800f178:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d055      	beq.n	800f22c <__multiply+0x138>
 800f180:	6106      	str	r6, [r0, #16]
 800f182:	b005      	add	sp, #20
 800f184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f188:	f843 2b04 	str.w	r2, [r3], #4
 800f18c:	e7d9      	b.n	800f142 <__multiply+0x4e>
 800f18e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f192:	f1ba 0f00 	cmp.w	sl, #0
 800f196:	d01f      	beq.n	800f1d8 <__multiply+0xe4>
 800f198:	46c4      	mov	ip, r8
 800f19a:	46a1      	mov	r9, r4
 800f19c:	2700      	movs	r7, #0
 800f19e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f1a2:	f8d9 3000 	ldr.w	r3, [r9]
 800f1a6:	fa1f fb82 	uxth.w	fp, r2
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	fb0a 330b 	mla	r3, sl, fp, r3
 800f1b0:	443b      	add	r3, r7
 800f1b2:	f8d9 7000 	ldr.w	r7, [r9]
 800f1b6:	0c12      	lsrs	r2, r2, #16
 800f1b8:	0c3f      	lsrs	r7, r7, #16
 800f1ba:	fb0a 7202 	mla	r2, sl, r2, r7
 800f1be:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1c8:	4565      	cmp	r5, ip
 800f1ca:	f849 3b04 	str.w	r3, [r9], #4
 800f1ce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f1d2:	d8e4      	bhi.n	800f19e <__multiply+0xaa>
 800f1d4:	9b01      	ldr	r3, [sp, #4]
 800f1d6:	50e7      	str	r7, [r4, r3]
 800f1d8:	9b03      	ldr	r3, [sp, #12]
 800f1da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f1de:	3104      	adds	r1, #4
 800f1e0:	f1b9 0f00 	cmp.w	r9, #0
 800f1e4:	d020      	beq.n	800f228 <__multiply+0x134>
 800f1e6:	6823      	ldr	r3, [r4, #0]
 800f1e8:	4647      	mov	r7, r8
 800f1ea:	46a4      	mov	ip, r4
 800f1ec:	f04f 0a00 	mov.w	sl, #0
 800f1f0:	f8b7 b000 	ldrh.w	fp, [r7]
 800f1f4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f1f8:	fb09 220b 	mla	r2, r9, fp, r2
 800f1fc:	4452      	add	r2, sl
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f204:	f84c 3b04 	str.w	r3, [ip], #4
 800f208:	f857 3b04 	ldr.w	r3, [r7], #4
 800f20c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f210:	f8bc 3000 	ldrh.w	r3, [ip]
 800f214:	fb09 330a 	mla	r3, r9, sl, r3
 800f218:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f21c:	42bd      	cmp	r5, r7
 800f21e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f222:	d8e5      	bhi.n	800f1f0 <__multiply+0xfc>
 800f224:	9a01      	ldr	r2, [sp, #4]
 800f226:	50a3      	str	r3, [r4, r2]
 800f228:	3404      	adds	r4, #4
 800f22a:	e79f      	b.n	800f16c <__multiply+0x78>
 800f22c:	3e01      	subs	r6, #1
 800f22e:	e7a1      	b.n	800f174 <__multiply+0x80>
 800f230:	08010bbc 	.word	0x08010bbc
 800f234:	08010bcd 	.word	0x08010bcd

0800f238 <__pow5mult>:
 800f238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f23c:	4615      	mov	r5, r2
 800f23e:	f012 0203 	ands.w	r2, r2, #3
 800f242:	4607      	mov	r7, r0
 800f244:	460e      	mov	r6, r1
 800f246:	d007      	beq.n	800f258 <__pow5mult+0x20>
 800f248:	4c25      	ldr	r4, [pc, #148]	@ (800f2e0 <__pow5mult+0xa8>)
 800f24a:	3a01      	subs	r2, #1
 800f24c:	2300      	movs	r3, #0
 800f24e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f252:	f7ff fea7 	bl	800efa4 <__multadd>
 800f256:	4606      	mov	r6, r0
 800f258:	10ad      	asrs	r5, r5, #2
 800f25a:	d03d      	beq.n	800f2d8 <__pow5mult+0xa0>
 800f25c:	69fc      	ldr	r4, [r7, #28]
 800f25e:	b97c      	cbnz	r4, 800f280 <__pow5mult+0x48>
 800f260:	2010      	movs	r0, #16
 800f262:	f7ff fd87 	bl	800ed74 <malloc>
 800f266:	4602      	mov	r2, r0
 800f268:	61f8      	str	r0, [r7, #28]
 800f26a:	b928      	cbnz	r0, 800f278 <__pow5mult+0x40>
 800f26c:	4b1d      	ldr	r3, [pc, #116]	@ (800f2e4 <__pow5mult+0xac>)
 800f26e:	481e      	ldr	r0, [pc, #120]	@ (800f2e8 <__pow5mult+0xb0>)
 800f270:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f274:	f7fe febe 	bl	800dff4 <__assert_func>
 800f278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f27c:	6004      	str	r4, [r0, #0]
 800f27e:	60c4      	str	r4, [r0, #12]
 800f280:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f288:	b94c      	cbnz	r4, 800f29e <__pow5mult+0x66>
 800f28a:	f240 2171 	movw	r1, #625	@ 0x271
 800f28e:	4638      	mov	r0, r7
 800f290:	f7ff ff1a 	bl	800f0c8 <__i2b>
 800f294:	2300      	movs	r3, #0
 800f296:	f8c8 0008 	str.w	r0, [r8, #8]
 800f29a:	4604      	mov	r4, r0
 800f29c:	6003      	str	r3, [r0, #0]
 800f29e:	f04f 0900 	mov.w	r9, #0
 800f2a2:	07eb      	lsls	r3, r5, #31
 800f2a4:	d50a      	bpl.n	800f2bc <__pow5mult+0x84>
 800f2a6:	4631      	mov	r1, r6
 800f2a8:	4622      	mov	r2, r4
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	f7ff ff22 	bl	800f0f4 <__multiply>
 800f2b0:	4631      	mov	r1, r6
 800f2b2:	4680      	mov	r8, r0
 800f2b4:	4638      	mov	r0, r7
 800f2b6:	f7ff fe53 	bl	800ef60 <_Bfree>
 800f2ba:	4646      	mov	r6, r8
 800f2bc:	106d      	asrs	r5, r5, #1
 800f2be:	d00b      	beq.n	800f2d8 <__pow5mult+0xa0>
 800f2c0:	6820      	ldr	r0, [r4, #0]
 800f2c2:	b938      	cbnz	r0, 800f2d4 <__pow5mult+0x9c>
 800f2c4:	4622      	mov	r2, r4
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	4638      	mov	r0, r7
 800f2ca:	f7ff ff13 	bl	800f0f4 <__multiply>
 800f2ce:	6020      	str	r0, [r4, #0]
 800f2d0:	f8c0 9000 	str.w	r9, [r0]
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	e7e4      	b.n	800f2a2 <__pow5mult+0x6a>
 800f2d8:	4630      	mov	r0, r6
 800f2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2de:	bf00      	nop
 800f2e0:	08010c44 	.word	0x08010c44
 800f2e4:	08010b4d 	.word	0x08010b4d
 800f2e8:	08010bcd 	.word	0x08010bcd

0800f2ec <__lshift>:
 800f2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2f0:	460c      	mov	r4, r1
 800f2f2:	6849      	ldr	r1, [r1, #4]
 800f2f4:	6923      	ldr	r3, [r4, #16]
 800f2f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2fa:	68a3      	ldr	r3, [r4, #8]
 800f2fc:	4607      	mov	r7, r0
 800f2fe:	4691      	mov	r9, r2
 800f300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f304:	f108 0601 	add.w	r6, r8, #1
 800f308:	42b3      	cmp	r3, r6
 800f30a:	db0b      	blt.n	800f324 <__lshift+0x38>
 800f30c:	4638      	mov	r0, r7
 800f30e:	f7ff fde7 	bl	800eee0 <_Balloc>
 800f312:	4605      	mov	r5, r0
 800f314:	b948      	cbnz	r0, 800f32a <__lshift+0x3e>
 800f316:	4602      	mov	r2, r0
 800f318:	4b28      	ldr	r3, [pc, #160]	@ (800f3bc <__lshift+0xd0>)
 800f31a:	4829      	ldr	r0, [pc, #164]	@ (800f3c0 <__lshift+0xd4>)
 800f31c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f320:	f7fe fe68 	bl	800dff4 <__assert_func>
 800f324:	3101      	adds	r1, #1
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	e7ee      	b.n	800f308 <__lshift+0x1c>
 800f32a:	2300      	movs	r3, #0
 800f32c:	f100 0114 	add.w	r1, r0, #20
 800f330:	f100 0210 	add.w	r2, r0, #16
 800f334:	4618      	mov	r0, r3
 800f336:	4553      	cmp	r3, sl
 800f338:	db33      	blt.n	800f3a2 <__lshift+0xb6>
 800f33a:	6920      	ldr	r0, [r4, #16]
 800f33c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f340:	f104 0314 	add.w	r3, r4, #20
 800f344:	f019 091f 	ands.w	r9, r9, #31
 800f348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f34c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f350:	d02b      	beq.n	800f3aa <__lshift+0xbe>
 800f352:	f1c9 0e20 	rsb	lr, r9, #32
 800f356:	468a      	mov	sl, r1
 800f358:	2200      	movs	r2, #0
 800f35a:	6818      	ldr	r0, [r3, #0]
 800f35c:	fa00 f009 	lsl.w	r0, r0, r9
 800f360:	4310      	orrs	r0, r2
 800f362:	f84a 0b04 	str.w	r0, [sl], #4
 800f366:	f853 2b04 	ldr.w	r2, [r3], #4
 800f36a:	459c      	cmp	ip, r3
 800f36c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f370:	d8f3      	bhi.n	800f35a <__lshift+0x6e>
 800f372:	ebac 0304 	sub.w	r3, ip, r4
 800f376:	3b15      	subs	r3, #21
 800f378:	f023 0303 	bic.w	r3, r3, #3
 800f37c:	3304      	adds	r3, #4
 800f37e:	f104 0015 	add.w	r0, r4, #21
 800f382:	4560      	cmp	r0, ip
 800f384:	bf88      	it	hi
 800f386:	2304      	movhi	r3, #4
 800f388:	50ca      	str	r2, [r1, r3]
 800f38a:	b10a      	cbz	r2, 800f390 <__lshift+0xa4>
 800f38c:	f108 0602 	add.w	r6, r8, #2
 800f390:	3e01      	subs	r6, #1
 800f392:	4638      	mov	r0, r7
 800f394:	612e      	str	r6, [r5, #16]
 800f396:	4621      	mov	r1, r4
 800f398:	f7ff fde2 	bl	800ef60 <_Bfree>
 800f39c:	4628      	mov	r0, r5
 800f39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	e7c5      	b.n	800f336 <__lshift+0x4a>
 800f3aa:	3904      	subs	r1, #4
 800f3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3b4:	459c      	cmp	ip, r3
 800f3b6:	d8f9      	bhi.n	800f3ac <__lshift+0xc0>
 800f3b8:	e7ea      	b.n	800f390 <__lshift+0xa4>
 800f3ba:	bf00      	nop
 800f3bc:	08010bbc 	.word	0x08010bbc
 800f3c0:	08010bcd 	.word	0x08010bcd

0800f3c4 <__mcmp>:
 800f3c4:	690a      	ldr	r2, [r1, #16]
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	6900      	ldr	r0, [r0, #16]
 800f3ca:	1a80      	subs	r0, r0, r2
 800f3cc:	b530      	push	{r4, r5, lr}
 800f3ce:	d10e      	bne.n	800f3ee <__mcmp+0x2a>
 800f3d0:	3314      	adds	r3, #20
 800f3d2:	3114      	adds	r1, #20
 800f3d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f3d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f3dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f3e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f3e4:	4295      	cmp	r5, r2
 800f3e6:	d003      	beq.n	800f3f0 <__mcmp+0x2c>
 800f3e8:	d205      	bcs.n	800f3f6 <__mcmp+0x32>
 800f3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ee:	bd30      	pop	{r4, r5, pc}
 800f3f0:	42a3      	cmp	r3, r4
 800f3f2:	d3f3      	bcc.n	800f3dc <__mcmp+0x18>
 800f3f4:	e7fb      	b.n	800f3ee <__mcmp+0x2a>
 800f3f6:	2001      	movs	r0, #1
 800f3f8:	e7f9      	b.n	800f3ee <__mcmp+0x2a>
	...

0800f3fc <__mdiff>:
 800f3fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f400:	4689      	mov	r9, r1
 800f402:	4606      	mov	r6, r0
 800f404:	4611      	mov	r1, r2
 800f406:	4648      	mov	r0, r9
 800f408:	4614      	mov	r4, r2
 800f40a:	f7ff ffdb 	bl	800f3c4 <__mcmp>
 800f40e:	1e05      	subs	r5, r0, #0
 800f410:	d112      	bne.n	800f438 <__mdiff+0x3c>
 800f412:	4629      	mov	r1, r5
 800f414:	4630      	mov	r0, r6
 800f416:	f7ff fd63 	bl	800eee0 <_Balloc>
 800f41a:	4602      	mov	r2, r0
 800f41c:	b928      	cbnz	r0, 800f42a <__mdiff+0x2e>
 800f41e:	4b3f      	ldr	r3, [pc, #252]	@ (800f51c <__mdiff+0x120>)
 800f420:	f240 2137 	movw	r1, #567	@ 0x237
 800f424:	483e      	ldr	r0, [pc, #248]	@ (800f520 <__mdiff+0x124>)
 800f426:	f7fe fde5 	bl	800dff4 <__assert_func>
 800f42a:	2301      	movs	r3, #1
 800f42c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f430:	4610      	mov	r0, r2
 800f432:	b003      	add	sp, #12
 800f434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f438:	bfbc      	itt	lt
 800f43a:	464b      	movlt	r3, r9
 800f43c:	46a1      	movlt	r9, r4
 800f43e:	4630      	mov	r0, r6
 800f440:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f444:	bfba      	itte	lt
 800f446:	461c      	movlt	r4, r3
 800f448:	2501      	movlt	r5, #1
 800f44a:	2500      	movge	r5, #0
 800f44c:	f7ff fd48 	bl	800eee0 <_Balloc>
 800f450:	4602      	mov	r2, r0
 800f452:	b918      	cbnz	r0, 800f45c <__mdiff+0x60>
 800f454:	4b31      	ldr	r3, [pc, #196]	@ (800f51c <__mdiff+0x120>)
 800f456:	f240 2145 	movw	r1, #581	@ 0x245
 800f45a:	e7e3      	b.n	800f424 <__mdiff+0x28>
 800f45c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f460:	6926      	ldr	r6, [r4, #16]
 800f462:	60c5      	str	r5, [r0, #12]
 800f464:	f109 0310 	add.w	r3, r9, #16
 800f468:	f109 0514 	add.w	r5, r9, #20
 800f46c:	f104 0e14 	add.w	lr, r4, #20
 800f470:	f100 0b14 	add.w	fp, r0, #20
 800f474:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f478:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	46d9      	mov	r9, fp
 800f480:	f04f 0c00 	mov.w	ip, #0
 800f484:	9b01      	ldr	r3, [sp, #4]
 800f486:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f48a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f48e:	9301      	str	r3, [sp, #4]
 800f490:	fa1f f38a 	uxth.w	r3, sl
 800f494:	4619      	mov	r1, r3
 800f496:	b283      	uxth	r3, r0
 800f498:	1acb      	subs	r3, r1, r3
 800f49a:	0c00      	lsrs	r0, r0, #16
 800f49c:	4463      	add	r3, ip
 800f49e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f4a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f4ac:	4576      	cmp	r6, lr
 800f4ae:	f849 3b04 	str.w	r3, [r9], #4
 800f4b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f4b6:	d8e5      	bhi.n	800f484 <__mdiff+0x88>
 800f4b8:	1b33      	subs	r3, r6, r4
 800f4ba:	3b15      	subs	r3, #21
 800f4bc:	f023 0303 	bic.w	r3, r3, #3
 800f4c0:	3415      	adds	r4, #21
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	42a6      	cmp	r6, r4
 800f4c6:	bf38      	it	cc
 800f4c8:	2304      	movcc	r3, #4
 800f4ca:	441d      	add	r5, r3
 800f4cc:	445b      	add	r3, fp
 800f4ce:	461e      	mov	r6, r3
 800f4d0:	462c      	mov	r4, r5
 800f4d2:	4544      	cmp	r4, r8
 800f4d4:	d30e      	bcc.n	800f4f4 <__mdiff+0xf8>
 800f4d6:	f108 0103 	add.w	r1, r8, #3
 800f4da:	1b49      	subs	r1, r1, r5
 800f4dc:	f021 0103 	bic.w	r1, r1, #3
 800f4e0:	3d03      	subs	r5, #3
 800f4e2:	45a8      	cmp	r8, r5
 800f4e4:	bf38      	it	cc
 800f4e6:	2100      	movcc	r1, #0
 800f4e8:	440b      	add	r3, r1
 800f4ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4ee:	b191      	cbz	r1, 800f516 <__mdiff+0x11a>
 800f4f0:	6117      	str	r7, [r2, #16]
 800f4f2:	e79d      	b.n	800f430 <__mdiff+0x34>
 800f4f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800f4f8:	46e6      	mov	lr, ip
 800f4fa:	0c08      	lsrs	r0, r1, #16
 800f4fc:	fa1c fc81 	uxtah	ip, ip, r1
 800f500:	4471      	add	r1, lr
 800f502:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f506:	b289      	uxth	r1, r1
 800f508:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f50c:	f846 1b04 	str.w	r1, [r6], #4
 800f510:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f514:	e7dd      	b.n	800f4d2 <__mdiff+0xd6>
 800f516:	3f01      	subs	r7, #1
 800f518:	e7e7      	b.n	800f4ea <__mdiff+0xee>
 800f51a:	bf00      	nop
 800f51c:	08010bbc 	.word	0x08010bbc
 800f520:	08010bcd 	.word	0x08010bcd

0800f524 <__d2b>:
 800f524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f528:	460f      	mov	r7, r1
 800f52a:	2101      	movs	r1, #1
 800f52c:	ec59 8b10 	vmov	r8, r9, d0
 800f530:	4616      	mov	r6, r2
 800f532:	f7ff fcd5 	bl	800eee0 <_Balloc>
 800f536:	4604      	mov	r4, r0
 800f538:	b930      	cbnz	r0, 800f548 <__d2b+0x24>
 800f53a:	4602      	mov	r2, r0
 800f53c:	4b23      	ldr	r3, [pc, #140]	@ (800f5cc <__d2b+0xa8>)
 800f53e:	4824      	ldr	r0, [pc, #144]	@ (800f5d0 <__d2b+0xac>)
 800f540:	f240 310f 	movw	r1, #783	@ 0x30f
 800f544:	f7fe fd56 	bl	800dff4 <__assert_func>
 800f548:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f54c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f550:	b10d      	cbz	r5, 800f556 <__d2b+0x32>
 800f552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f556:	9301      	str	r3, [sp, #4]
 800f558:	f1b8 0300 	subs.w	r3, r8, #0
 800f55c:	d023      	beq.n	800f5a6 <__d2b+0x82>
 800f55e:	4668      	mov	r0, sp
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	f7ff fd84 	bl	800f06e <__lo0bits>
 800f566:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f56a:	b1d0      	cbz	r0, 800f5a2 <__d2b+0x7e>
 800f56c:	f1c0 0320 	rsb	r3, r0, #32
 800f570:	fa02 f303 	lsl.w	r3, r2, r3
 800f574:	430b      	orrs	r3, r1
 800f576:	40c2      	lsrs	r2, r0
 800f578:	6163      	str	r3, [r4, #20]
 800f57a:	9201      	str	r2, [sp, #4]
 800f57c:	9b01      	ldr	r3, [sp, #4]
 800f57e:	61a3      	str	r3, [r4, #24]
 800f580:	2b00      	cmp	r3, #0
 800f582:	bf0c      	ite	eq
 800f584:	2201      	moveq	r2, #1
 800f586:	2202      	movne	r2, #2
 800f588:	6122      	str	r2, [r4, #16]
 800f58a:	b1a5      	cbz	r5, 800f5b6 <__d2b+0x92>
 800f58c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f590:	4405      	add	r5, r0
 800f592:	603d      	str	r5, [r7, #0]
 800f594:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f598:	6030      	str	r0, [r6, #0]
 800f59a:	4620      	mov	r0, r4
 800f59c:	b003      	add	sp, #12
 800f59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5a2:	6161      	str	r1, [r4, #20]
 800f5a4:	e7ea      	b.n	800f57c <__d2b+0x58>
 800f5a6:	a801      	add	r0, sp, #4
 800f5a8:	f7ff fd61 	bl	800f06e <__lo0bits>
 800f5ac:	9b01      	ldr	r3, [sp, #4]
 800f5ae:	6163      	str	r3, [r4, #20]
 800f5b0:	3020      	adds	r0, #32
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	e7e8      	b.n	800f588 <__d2b+0x64>
 800f5b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f5be:	6038      	str	r0, [r7, #0]
 800f5c0:	6918      	ldr	r0, [r3, #16]
 800f5c2:	f7ff fd35 	bl	800f030 <__hi0bits>
 800f5c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5ca:	e7e5      	b.n	800f598 <__d2b+0x74>
 800f5cc:	08010bbc 	.word	0x08010bbc
 800f5d0:	08010bcd 	.word	0x08010bcd

0800f5d4 <__ssputs_r>:
 800f5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5d8:	688e      	ldr	r6, [r1, #8]
 800f5da:	461f      	mov	r7, r3
 800f5dc:	42be      	cmp	r6, r7
 800f5de:	680b      	ldr	r3, [r1, #0]
 800f5e0:	4682      	mov	sl, r0
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	4690      	mov	r8, r2
 800f5e6:	d82d      	bhi.n	800f644 <__ssputs_r+0x70>
 800f5e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f5f0:	d026      	beq.n	800f640 <__ssputs_r+0x6c>
 800f5f2:	6965      	ldr	r5, [r4, #20]
 800f5f4:	6909      	ldr	r1, [r1, #16]
 800f5f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5fa:	eba3 0901 	sub.w	r9, r3, r1
 800f5fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f602:	1c7b      	adds	r3, r7, #1
 800f604:	444b      	add	r3, r9
 800f606:	106d      	asrs	r5, r5, #1
 800f608:	429d      	cmp	r5, r3
 800f60a:	bf38      	it	cc
 800f60c:	461d      	movcc	r5, r3
 800f60e:	0553      	lsls	r3, r2, #21
 800f610:	d527      	bpl.n	800f662 <__ssputs_r+0x8e>
 800f612:	4629      	mov	r1, r5
 800f614:	f7ff fbd8 	bl	800edc8 <_malloc_r>
 800f618:	4606      	mov	r6, r0
 800f61a:	b360      	cbz	r0, 800f676 <__ssputs_r+0xa2>
 800f61c:	6921      	ldr	r1, [r4, #16]
 800f61e:	464a      	mov	r2, r9
 800f620:	f000 fbde 	bl	800fde0 <memcpy>
 800f624:	89a3      	ldrh	r3, [r4, #12]
 800f626:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	6126      	str	r6, [r4, #16]
 800f632:	6165      	str	r5, [r4, #20]
 800f634:	444e      	add	r6, r9
 800f636:	eba5 0509 	sub.w	r5, r5, r9
 800f63a:	6026      	str	r6, [r4, #0]
 800f63c:	60a5      	str	r5, [r4, #8]
 800f63e:	463e      	mov	r6, r7
 800f640:	42be      	cmp	r6, r7
 800f642:	d900      	bls.n	800f646 <__ssputs_r+0x72>
 800f644:	463e      	mov	r6, r7
 800f646:	6820      	ldr	r0, [r4, #0]
 800f648:	4632      	mov	r2, r6
 800f64a:	4641      	mov	r1, r8
 800f64c:	f000 fb7c 	bl	800fd48 <memmove>
 800f650:	68a3      	ldr	r3, [r4, #8]
 800f652:	1b9b      	subs	r3, r3, r6
 800f654:	60a3      	str	r3, [r4, #8]
 800f656:	6823      	ldr	r3, [r4, #0]
 800f658:	4433      	add	r3, r6
 800f65a:	6023      	str	r3, [r4, #0]
 800f65c:	2000      	movs	r0, #0
 800f65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f662:	462a      	mov	r2, r5
 800f664:	f000 fbf7 	bl	800fe56 <_realloc_r>
 800f668:	4606      	mov	r6, r0
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d1e0      	bne.n	800f630 <__ssputs_r+0x5c>
 800f66e:	6921      	ldr	r1, [r4, #16]
 800f670:	4650      	mov	r0, sl
 800f672:	f7ff fb35 	bl	800ece0 <_free_r>
 800f676:	230c      	movs	r3, #12
 800f678:	f8ca 3000 	str.w	r3, [sl]
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	f04f 30ff 	mov.w	r0, #4294967295
 800f688:	e7e9      	b.n	800f65e <__ssputs_r+0x8a>
	...

0800f68c <_svfiprintf_r>:
 800f68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	4698      	mov	r8, r3
 800f692:	898b      	ldrh	r3, [r1, #12]
 800f694:	061b      	lsls	r3, r3, #24
 800f696:	b09d      	sub	sp, #116	@ 0x74
 800f698:	4607      	mov	r7, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	4614      	mov	r4, r2
 800f69e:	d510      	bpl.n	800f6c2 <_svfiprintf_r+0x36>
 800f6a0:	690b      	ldr	r3, [r1, #16]
 800f6a2:	b973      	cbnz	r3, 800f6c2 <_svfiprintf_r+0x36>
 800f6a4:	2140      	movs	r1, #64	@ 0x40
 800f6a6:	f7ff fb8f 	bl	800edc8 <_malloc_r>
 800f6aa:	6028      	str	r0, [r5, #0]
 800f6ac:	6128      	str	r0, [r5, #16]
 800f6ae:	b930      	cbnz	r0, 800f6be <_svfiprintf_r+0x32>
 800f6b0:	230c      	movs	r3, #12
 800f6b2:	603b      	str	r3, [r7, #0]
 800f6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b8:	b01d      	add	sp, #116	@ 0x74
 800f6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6be:	2340      	movs	r3, #64	@ 0x40
 800f6c0:	616b      	str	r3, [r5, #20]
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6c6:	2320      	movs	r3, #32
 800f6c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6d0:	2330      	movs	r3, #48	@ 0x30
 800f6d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f870 <_svfiprintf_r+0x1e4>
 800f6d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6da:	f04f 0901 	mov.w	r9, #1
 800f6de:	4623      	mov	r3, r4
 800f6e0:	469a      	mov	sl, r3
 800f6e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6e6:	b10a      	cbz	r2, 800f6ec <_svfiprintf_r+0x60>
 800f6e8:	2a25      	cmp	r2, #37	@ 0x25
 800f6ea:	d1f9      	bne.n	800f6e0 <_svfiprintf_r+0x54>
 800f6ec:	ebba 0b04 	subs.w	fp, sl, r4
 800f6f0:	d00b      	beq.n	800f70a <_svfiprintf_r+0x7e>
 800f6f2:	465b      	mov	r3, fp
 800f6f4:	4622      	mov	r2, r4
 800f6f6:	4629      	mov	r1, r5
 800f6f8:	4638      	mov	r0, r7
 800f6fa:	f7ff ff6b 	bl	800f5d4 <__ssputs_r>
 800f6fe:	3001      	adds	r0, #1
 800f700:	f000 80a7 	beq.w	800f852 <_svfiprintf_r+0x1c6>
 800f704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f706:	445a      	add	r2, fp
 800f708:	9209      	str	r2, [sp, #36]	@ 0x24
 800f70a:	f89a 3000 	ldrb.w	r3, [sl]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f000 809f 	beq.w	800f852 <_svfiprintf_r+0x1c6>
 800f714:	2300      	movs	r3, #0
 800f716:	f04f 32ff 	mov.w	r2, #4294967295
 800f71a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f71e:	f10a 0a01 	add.w	sl, sl, #1
 800f722:	9304      	str	r3, [sp, #16]
 800f724:	9307      	str	r3, [sp, #28]
 800f726:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f72a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f72c:	4654      	mov	r4, sl
 800f72e:	2205      	movs	r2, #5
 800f730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f734:	484e      	ldr	r0, [pc, #312]	@ (800f870 <_svfiprintf_r+0x1e4>)
 800f736:	f7f0 fd83 	bl	8000240 <memchr>
 800f73a:	9a04      	ldr	r2, [sp, #16]
 800f73c:	b9d8      	cbnz	r0, 800f776 <_svfiprintf_r+0xea>
 800f73e:	06d0      	lsls	r0, r2, #27
 800f740:	bf44      	itt	mi
 800f742:	2320      	movmi	r3, #32
 800f744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f748:	0711      	lsls	r1, r2, #28
 800f74a:	bf44      	itt	mi
 800f74c:	232b      	movmi	r3, #43	@ 0x2b
 800f74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f752:	f89a 3000 	ldrb.w	r3, [sl]
 800f756:	2b2a      	cmp	r3, #42	@ 0x2a
 800f758:	d015      	beq.n	800f786 <_svfiprintf_r+0xfa>
 800f75a:	9a07      	ldr	r2, [sp, #28]
 800f75c:	4654      	mov	r4, sl
 800f75e:	2000      	movs	r0, #0
 800f760:	f04f 0c0a 	mov.w	ip, #10
 800f764:	4621      	mov	r1, r4
 800f766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f76a:	3b30      	subs	r3, #48	@ 0x30
 800f76c:	2b09      	cmp	r3, #9
 800f76e:	d94b      	bls.n	800f808 <_svfiprintf_r+0x17c>
 800f770:	b1b0      	cbz	r0, 800f7a0 <_svfiprintf_r+0x114>
 800f772:	9207      	str	r2, [sp, #28]
 800f774:	e014      	b.n	800f7a0 <_svfiprintf_r+0x114>
 800f776:	eba0 0308 	sub.w	r3, r0, r8
 800f77a:	fa09 f303 	lsl.w	r3, r9, r3
 800f77e:	4313      	orrs	r3, r2
 800f780:	9304      	str	r3, [sp, #16]
 800f782:	46a2      	mov	sl, r4
 800f784:	e7d2      	b.n	800f72c <_svfiprintf_r+0xa0>
 800f786:	9b03      	ldr	r3, [sp, #12]
 800f788:	1d19      	adds	r1, r3, #4
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	9103      	str	r1, [sp, #12]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	bfbb      	ittet	lt
 800f792:	425b      	neglt	r3, r3
 800f794:	f042 0202 	orrlt.w	r2, r2, #2
 800f798:	9307      	strge	r3, [sp, #28]
 800f79a:	9307      	strlt	r3, [sp, #28]
 800f79c:	bfb8      	it	lt
 800f79e:	9204      	strlt	r2, [sp, #16]
 800f7a0:	7823      	ldrb	r3, [r4, #0]
 800f7a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7a4:	d10a      	bne.n	800f7bc <_svfiprintf_r+0x130>
 800f7a6:	7863      	ldrb	r3, [r4, #1]
 800f7a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7aa:	d132      	bne.n	800f812 <_svfiprintf_r+0x186>
 800f7ac:	9b03      	ldr	r3, [sp, #12]
 800f7ae:	1d1a      	adds	r2, r3, #4
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	9203      	str	r2, [sp, #12]
 800f7b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f7b8:	3402      	adds	r4, #2
 800f7ba:	9305      	str	r3, [sp, #20]
 800f7bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f880 <_svfiprintf_r+0x1f4>
 800f7c0:	7821      	ldrb	r1, [r4, #0]
 800f7c2:	2203      	movs	r2, #3
 800f7c4:	4650      	mov	r0, sl
 800f7c6:	f7f0 fd3b 	bl	8000240 <memchr>
 800f7ca:	b138      	cbz	r0, 800f7dc <_svfiprintf_r+0x150>
 800f7cc:	9b04      	ldr	r3, [sp, #16]
 800f7ce:	eba0 000a 	sub.w	r0, r0, sl
 800f7d2:	2240      	movs	r2, #64	@ 0x40
 800f7d4:	4082      	lsls	r2, r0
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	3401      	adds	r4, #1
 800f7da:	9304      	str	r3, [sp, #16]
 800f7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7e0:	4824      	ldr	r0, [pc, #144]	@ (800f874 <_svfiprintf_r+0x1e8>)
 800f7e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7e6:	2206      	movs	r2, #6
 800f7e8:	f7f0 fd2a 	bl	8000240 <memchr>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d036      	beq.n	800f85e <_svfiprintf_r+0x1d2>
 800f7f0:	4b21      	ldr	r3, [pc, #132]	@ (800f878 <_svfiprintf_r+0x1ec>)
 800f7f2:	bb1b      	cbnz	r3, 800f83c <_svfiprintf_r+0x1b0>
 800f7f4:	9b03      	ldr	r3, [sp, #12]
 800f7f6:	3307      	adds	r3, #7
 800f7f8:	f023 0307 	bic.w	r3, r3, #7
 800f7fc:	3308      	adds	r3, #8
 800f7fe:	9303      	str	r3, [sp, #12]
 800f800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f802:	4433      	add	r3, r6
 800f804:	9309      	str	r3, [sp, #36]	@ 0x24
 800f806:	e76a      	b.n	800f6de <_svfiprintf_r+0x52>
 800f808:	fb0c 3202 	mla	r2, ip, r2, r3
 800f80c:	460c      	mov	r4, r1
 800f80e:	2001      	movs	r0, #1
 800f810:	e7a8      	b.n	800f764 <_svfiprintf_r+0xd8>
 800f812:	2300      	movs	r3, #0
 800f814:	3401      	adds	r4, #1
 800f816:	9305      	str	r3, [sp, #20]
 800f818:	4619      	mov	r1, r3
 800f81a:	f04f 0c0a 	mov.w	ip, #10
 800f81e:	4620      	mov	r0, r4
 800f820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f824:	3a30      	subs	r2, #48	@ 0x30
 800f826:	2a09      	cmp	r2, #9
 800f828:	d903      	bls.n	800f832 <_svfiprintf_r+0x1a6>
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d0c6      	beq.n	800f7bc <_svfiprintf_r+0x130>
 800f82e:	9105      	str	r1, [sp, #20]
 800f830:	e7c4      	b.n	800f7bc <_svfiprintf_r+0x130>
 800f832:	fb0c 2101 	mla	r1, ip, r1, r2
 800f836:	4604      	mov	r4, r0
 800f838:	2301      	movs	r3, #1
 800f83a:	e7f0      	b.n	800f81e <_svfiprintf_r+0x192>
 800f83c:	ab03      	add	r3, sp, #12
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	462a      	mov	r2, r5
 800f842:	4b0e      	ldr	r3, [pc, #56]	@ (800f87c <_svfiprintf_r+0x1f0>)
 800f844:	a904      	add	r1, sp, #16
 800f846:	4638      	mov	r0, r7
 800f848:	f7fd fd2a 	bl	800d2a0 <_printf_float>
 800f84c:	1c42      	adds	r2, r0, #1
 800f84e:	4606      	mov	r6, r0
 800f850:	d1d6      	bne.n	800f800 <_svfiprintf_r+0x174>
 800f852:	89ab      	ldrh	r3, [r5, #12]
 800f854:	065b      	lsls	r3, r3, #25
 800f856:	f53f af2d 	bmi.w	800f6b4 <_svfiprintf_r+0x28>
 800f85a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f85c:	e72c      	b.n	800f6b8 <_svfiprintf_r+0x2c>
 800f85e:	ab03      	add	r3, sp, #12
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	462a      	mov	r2, r5
 800f864:	4b05      	ldr	r3, [pc, #20]	@ (800f87c <_svfiprintf_r+0x1f0>)
 800f866:	a904      	add	r1, sp, #16
 800f868:	4638      	mov	r0, r7
 800f86a:	f7fd ffb1 	bl	800d7d0 <_printf_i>
 800f86e:	e7ed      	b.n	800f84c <_svfiprintf_r+0x1c0>
 800f870:	08010c26 	.word	0x08010c26
 800f874:	08010c30 	.word	0x08010c30
 800f878:	0800d2a1 	.word	0x0800d2a1
 800f87c:	0800f5d5 	.word	0x0800f5d5
 800f880:	08010c2c 	.word	0x08010c2c

0800f884 <__sfputc_r>:
 800f884:	6893      	ldr	r3, [r2, #8]
 800f886:	3b01      	subs	r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	b410      	push	{r4}
 800f88c:	6093      	str	r3, [r2, #8]
 800f88e:	da08      	bge.n	800f8a2 <__sfputc_r+0x1e>
 800f890:	6994      	ldr	r4, [r2, #24]
 800f892:	42a3      	cmp	r3, r4
 800f894:	db01      	blt.n	800f89a <__sfputc_r+0x16>
 800f896:	290a      	cmp	r1, #10
 800f898:	d103      	bne.n	800f8a2 <__sfputc_r+0x1e>
 800f89a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f89e:	f7fe ba82 	b.w	800dda6 <__swbuf_r>
 800f8a2:	6813      	ldr	r3, [r2, #0]
 800f8a4:	1c58      	adds	r0, r3, #1
 800f8a6:	6010      	str	r0, [r2, #0]
 800f8a8:	7019      	strb	r1, [r3, #0]
 800f8aa:	4608      	mov	r0, r1
 800f8ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8b0:	4770      	bx	lr

0800f8b2 <__sfputs_r>:
 800f8b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b4:	4606      	mov	r6, r0
 800f8b6:	460f      	mov	r7, r1
 800f8b8:	4614      	mov	r4, r2
 800f8ba:	18d5      	adds	r5, r2, r3
 800f8bc:	42ac      	cmp	r4, r5
 800f8be:	d101      	bne.n	800f8c4 <__sfputs_r+0x12>
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	e007      	b.n	800f8d4 <__sfputs_r+0x22>
 800f8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c8:	463a      	mov	r2, r7
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f7ff ffda 	bl	800f884 <__sfputc_r>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d1f3      	bne.n	800f8bc <__sfputs_r+0xa>
 800f8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8d8 <_vfiprintf_r>:
 800f8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8dc:	460d      	mov	r5, r1
 800f8de:	b09d      	sub	sp, #116	@ 0x74
 800f8e0:	4614      	mov	r4, r2
 800f8e2:	4698      	mov	r8, r3
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	b118      	cbz	r0, 800f8f0 <_vfiprintf_r+0x18>
 800f8e8:	6a03      	ldr	r3, [r0, #32]
 800f8ea:	b90b      	cbnz	r3, 800f8f0 <_vfiprintf_r+0x18>
 800f8ec:	f7fe f91a 	bl	800db24 <__sinit>
 800f8f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8f2:	07d9      	lsls	r1, r3, #31
 800f8f4:	d405      	bmi.n	800f902 <_vfiprintf_r+0x2a>
 800f8f6:	89ab      	ldrh	r3, [r5, #12]
 800f8f8:	059a      	lsls	r2, r3, #22
 800f8fa:	d402      	bmi.n	800f902 <_vfiprintf_r+0x2a>
 800f8fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8fe:	f7fe fb76 	bl	800dfee <__retarget_lock_acquire_recursive>
 800f902:	89ab      	ldrh	r3, [r5, #12]
 800f904:	071b      	lsls	r3, r3, #28
 800f906:	d501      	bpl.n	800f90c <_vfiprintf_r+0x34>
 800f908:	692b      	ldr	r3, [r5, #16]
 800f90a:	b99b      	cbnz	r3, 800f934 <_vfiprintf_r+0x5c>
 800f90c:	4629      	mov	r1, r5
 800f90e:	4630      	mov	r0, r6
 800f910:	f7fe fa88 	bl	800de24 <__swsetup_r>
 800f914:	b170      	cbz	r0, 800f934 <_vfiprintf_r+0x5c>
 800f916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f918:	07dc      	lsls	r4, r3, #31
 800f91a:	d504      	bpl.n	800f926 <_vfiprintf_r+0x4e>
 800f91c:	f04f 30ff 	mov.w	r0, #4294967295
 800f920:	b01d      	add	sp, #116	@ 0x74
 800f922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f926:	89ab      	ldrh	r3, [r5, #12]
 800f928:	0598      	lsls	r0, r3, #22
 800f92a:	d4f7      	bmi.n	800f91c <_vfiprintf_r+0x44>
 800f92c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f92e:	f7fe fb5f 	bl	800dff0 <__retarget_lock_release_recursive>
 800f932:	e7f3      	b.n	800f91c <_vfiprintf_r+0x44>
 800f934:	2300      	movs	r3, #0
 800f936:	9309      	str	r3, [sp, #36]	@ 0x24
 800f938:	2320      	movs	r3, #32
 800f93a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f93e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f942:	2330      	movs	r3, #48	@ 0x30
 800f944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800faf4 <_vfiprintf_r+0x21c>
 800f948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f94c:	f04f 0901 	mov.w	r9, #1
 800f950:	4623      	mov	r3, r4
 800f952:	469a      	mov	sl, r3
 800f954:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f958:	b10a      	cbz	r2, 800f95e <_vfiprintf_r+0x86>
 800f95a:	2a25      	cmp	r2, #37	@ 0x25
 800f95c:	d1f9      	bne.n	800f952 <_vfiprintf_r+0x7a>
 800f95e:	ebba 0b04 	subs.w	fp, sl, r4
 800f962:	d00b      	beq.n	800f97c <_vfiprintf_r+0xa4>
 800f964:	465b      	mov	r3, fp
 800f966:	4622      	mov	r2, r4
 800f968:	4629      	mov	r1, r5
 800f96a:	4630      	mov	r0, r6
 800f96c:	f7ff ffa1 	bl	800f8b2 <__sfputs_r>
 800f970:	3001      	adds	r0, #1
 800f972:	f000 80a7 	beq.w	800fac4 <_vfiprintf_r+0x1ec>
 800f976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f978:	445a      	add	r2, fp
 800f97a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f97c:	f89a 3000 	ldrb.w	r3, [sl]
 800f980:	2b00      	cmp	r3, #0
 800f982:	f000 809f 	beq.w	800fac4 <_vfiprintf_r+0x1ec>
 800f986:	2300      	movs	r3, #0
 800f988:	f04f 32ff 	mov.w	r2, #4294967295
 800f98c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f990:	f10a 0a01 	add.w	sl, sl, #1
 800f994:	9304      	str	r3, [sp, #16]
 800f996:	9307      	str	r3, [sp, #28]
 800f998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f99c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f99e:	4654      	mov	r4, sl
 800f9a0:	2205      	movs	r2, #5
 800f9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9a6:	4853      	ldr	r0, [pc, #332]	@ (800faf4 <_vfiprintf_r+0x21c>)
 800f9a8:	f7f0 fc4a 	bl	8000240 <memchr>
 800f9ac:	9a04      	ldr	r2, [sp, #16]
 800f9ae:	b9d8      	cbnz	r0, 800f9e8 <_vfiprintf_r+0x110>
 800f9b0:	06d1      	lsls	r1, r2, #27
 800f9b2:	bf44      	itt	mi
 800f9b4:	2320      	movmi	r3, #32
 800f9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9ba:	0713      	lsls	r3, r2, #28
 800f9bc:	bf44      	itt	mi
 800f9be:	232b      	movmi	r3, #43	@ 0x2b
 800f9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f9c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9ca:	d015      	beq.n	800f9f8 <_vfiprintf_r+0x120>
 800f9cc:	9a07      	ldr	r2, [sp, #28]
 800f9ce:	4654      	mov	r4, sl
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	f04f 0c0a 	mov.w	ip, #10
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9dc:	3b30      	subs	r3, #48	@ 0x30
 800f9de:	2b09      	cmp	r3, #9
 800f9e0:	d94b      	bls.n	800fa7a <_vfiprintf_r+0x1a2>
 800f9e2:	b1b0      	cbz	r0, 800fa12 <_vfiprintf_r+0x13a>
 800f9e4:	9207      	str	r2, [sp, #28]
 800f9e6:	e014      	b.n	800fa12 <_vfiprintf_r+0x13a>
 800f9e8:	eba0 0308 	sub.w	r3, r0, r8
 800f9ec:	fa09 f303 	lsl.w	r3, r9, r3
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	9304      	str	r3, [sp, #16]
 800f9f4:	46a2      	mov	sl, r4
 800f9f6:	e7d2      	b.n	800f99e <_vfiprintf_r+0xc6>
 800f9f8:	9b03      	ldr	r3, [sp, #12]
 800f9fa:	1d19      	adds	r1, r3, #4
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	9103      	str	r1, [sp, #12]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	bfbb      	ittet	lt
 800fa04:	425b      	neglt	r3, r3
 800fa06:	f042 0202 	orrlt.w	r2, r2, #2
 800fa0a:	9307      	strge	r3, [sp, #28]
 800fa0c:	9307      	strlt	r3, [sp, #28]
 800fa0e:	bfb8      	it	lt
 800fa10:	9204      	strlt	r2, [sp, #16]
 800fa12:	7823      	ldrb	r3, [r4, #0]
 800fa14:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa16:	d10a      	bne.n	800fa2e <_vfiprintf_r+0x156>
 800fa18:	7863      	ldrb	r3, [r4, #1]
 800fa1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa1c:	d132      	bne.n	800fa84 <_vfiprintf_r+0x1ac>
 800fa1e:	9b03      	ldr	r3, [sp, #12]
 800fa20:	1d1a      	adds	r2, r3, #4
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	9203      	str	r2, [sp, #12]
 800fa26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa2a:	3402      	adds	r4, #2
 800fa2c:	9305      	str	r3, [sp, #20]
 800fa2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fb04 <_vfiprintf_r+0x22c>
 800fa32:	7821      	ldrb	r1, [r4, #0]
 800fa34:	2203      	movs	r2, #3
 800fa36:	4650      	mov	r0, sl
 800fa38:	f7f0 fc02 	bl	8000240 <memchr>
 800fa3c:	b138      	cbz	r0, 800fa4e <_vfiprintf_r+0x176>
 800fa3e:	9b04      	ldr	r3, [sp, #16]
 800fa40:	eba0 000a 	sub.w	r0, r0, sl
 800fa44:	2240      	movs	r2, #64	@ 0x40
 800fa46:	4082      	lsls	r2, r0
 800fa48:	4313      	orrs	r3, r2
 800fa4a:	3401      	adds	r4, #1
 800fa4c:	9304      	str	r3, [sp, #16]
 800fa4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa52:	4829      	ldr	r0, [pc, #164]	@ (800faf8 <_vfiprintf_r+0x220>)
 800fa54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa58:	2206      	movs	r2, #6
 800fa5a:	f7f0 fbf1 	bl	8000240 <memchr>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d03f      	beq.n	800fae2 <_vfiprintf_r+0x20a>
 800fa62:	4b26      	ldr	r3, [pc, #152]	@ (800fafc <_vfiprintf_r+0x224>)
 800fa64:	bb1b      	cbnz	r3, 800faae <_vfiprintf_r+0x1d6>
 800fa66:	9b03      	ldr	r3, [sp, #12]
 800fa68:	3307      	adds	r3, #7
 800fa6a:	f023 0307 	bic.w	r3, r3, #7
 800fa6e:	3308      	adds	r3, #8
 800fa70:	9303      	str	r3, [sp, #12]
 800fa72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa74:	443b      	add	r3, r7
 800fa76:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa78:	e76a      	b.n	800f950 <_vfiprintf_r+0x78>
 800fa7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa7e:	460c      	mov	r4, r1
 800fa80:	2001      	movs	r0, #1
 800fa82:	e7a8      	b.n	800f9d6 <_vfiprintf_r+0xfe>
 800fa84:	2300      	movs	r3, #0
 800fa86:	3401      	adds	r4, #1
 800fa88:	9305      	str	r3, [sp, #20]
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	f04f 0c0a 	mov.w	ip, #10
 800fa90:	4620      	mov	r0, r4
 800fa92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa96:	3a30      	subs	r2, #48	@ 0x30
 800fa98:	2a09      	cmp	r2, #9
 800fa9a:	d903      	bls.n	800faa4 <_vfiprintf_r+0x1cc>
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d0c6      	beq.n	800fa2e <_vfiprintf_r+0x156>
 800faa0:	9105      	str	r1, [sp, #20]
 800faa2:	e7c4      	b.n	800fa2e <_vfiprintf_r+0x156>
 800faa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800faa8:	4604      	mov	r4, r0
 800faaa:	2301      	movs	r3, #1
 800faac:	e7f0      	b.n	800fa90 <_vfiprintf_r+0x1b8>
 800faae:	ab03      	add	r3, sp, #12
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	462a      	mov	r2, r5
 800fab4:	4b12      	ldr	r3, [pc, #72]	@ (800fb00 <_vfiprintf_r+0x228>)
 800fab6:	a904      	add	r1, sp, #16
 800fab8:	4630      	mov	r0, r6
 800faba:	f7fd fbf1 	bl	800d2a0 <_printf_float>
 800fabe:	4607      	mov	r7, r0
 800fac0:	1c78      	adds	r0, r7, #1
 800fac2:	d1d6      	bne.n	800fa72 <_vfiprintf_r+0x19a>
 800fac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fac6:	07d9      	lsls	r1, r3, #31
 800fac8:	d405      	bmi.n	800fad6 <_vfiprintf_r+0x1fe>
 800faca:	89ab      	ldrh	r3, [r5, #12]
 800facc:	059a      	lsls	r2, r3, #22
 800face:	d402      	bmi.n	800fad6 <_vfiprintf_r+0x1fe>
 800fad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fad2:	f7fe fa8d 	bl	800dff0 <__retarget_lock_release_recursive>
 800fad6:	89ab      	ldrh	r3, [r5, #12]
 800fad8:	065b      	lsls	r3, r3, #25
 800fada:	f53f af1f 	bmi.w	800f91c <_vfiprintf_r+0x44>
 800fade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fae0:	e71e      	b.n	800f920 <_vfiprintf_r+0x48>
 800fae2:	ab03      	add	r3, sp, #12
 800fae4:	9300      	str	r3, [sp, #0]
 800fae6:	462a      	mov	r2, r5
 800fae8:	4b05      	ldr	r3, [pc, #20]	@ (800fb00 <_vfiprintf_r+0x228>)
 800faea:	a904      	add	r1, sp, #16
 800faec:	4630      	mov	r0, r6
 800faee:	f7fd fe6f 	bl	800d7d0 <_printf_i>
 800faf2:	e7e4      	b.n	800fabe <_vfiprintf_r+0x1e6>
 800faf4:	08010c26 	.word	0x08010c26
 800faf8:	08010c30 	.word	0x08010c30
 800fafc:	0800d2a1 	.word	0x0800d2a1
 800fb00:	0800f8b3 	.word	0x0800f8b3
 800fb04:	08010c2c 	.word	0x08010c2c

0800fb08 <__sflush_r>:
 800fb08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb10:	0716      	lsls	r6, r2, #28
 800fb12:	4605      	mov	r5, r0
 800fb14:	460c      	mov	r4, r1
 800fb16:	d454      	bmi.n	800fbc2 <__sflush_r+0xba>
 800fb18:	684b      	ldr	r3, [r1, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	dc02      	bgt.n	800fb24 <__sflush_r+0x1c>
 800fb1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	dd48      	ble.n	800fbb6 <__sflush_r+0xae>
 800fb24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb26:	2e00      	cmp	r6, #0
 800fb28:	d045      	beq.n	800fbb6 <__sflush_r+0xae>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb30:	682f      	ldr	r7, [r5, #0]
 800fb32:	6a21      	ldr	r1, [r4, #32]
 800fb34:	602b      	str	r3, [r5, #0]
 800fb36:	d030      	beq.n	800fb9a <__sflush_r+0x92>
 800fb38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb3a:	89a3      	ldrh	r3, [r4, #12]
 800fb3c:	0759      	lsls	r1, r3, #29
 800fb3e:	d505      	bpl.n	800fb4c <__sflush_r+0x44>
 800fb40:	6863      	ldr	r3, [r4, #4]
 800fb42:	1ad2      	subs	r2, r2, r3
 800fb44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb46:	b10b      	cbz	r3, 800fb4c <__sflush_r+0x44>
 800fb48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb4a:	1ad2      	subs	r2, r2, r3
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb50:	6a21      	ldr	r1, [r4, #32]
 800fb52:	4628      	mov	r0, r5
 800fb54:	47b0      	blx	r6
 800fb56:	1c43      	adds	r3, r0, #1
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	d106      	bne.n	800fb6a <__sflush_r+0x62>
 800fb5c:	6829      	ldr	r1, [r5, #0]
 800fb5e:	291d      	cmp	r1, #29
 800fb60:	d82b      	bhi.n	800fbba <__sflush_r+0xb2>
 800fb62:	4a2a      	ldr	r2, [pc, #168]	@ (800fc0c <__sflush_r+0x104>)
 800fb64:	40ca      	lsrs	r2, r1
 800fb66:	07d6      	lsls	r6, r2, #31
 800fb68:	d527      	bpl.n	800fbba <__sflush_r+0xb2>
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	6062      	str	r2, [r4, #4]
 800fb6e:	04d9      	lsls	r1, r3, #19
 800fb70:	6922      	ldr	r2, [r4, #16]
 800fb72:	6022      	str	r2, [r4, #0]
 800fb74:	d504      	bpl.n	800fb80 <__sflush_r+0x78>
 800fb76:	1c42      	adds	r2, r0, #1
 800fb78:	d101      	bne.n	800fb7e <__sflush_r+0x76>
 800fb7a:	682b      	ldr	r3, [r5, #0]
 800fb7c:	b903      	cbnz	r3, 800fb80 <__sflush_r+0x78>
 800fb7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb82:	602f      	str	r7, [r5, #0]
 800fb84:	b1b9      	cbz	r1, 800fbb6 <__sflush_r+0xae>
 800fb86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb8a:	4299      	cmp	r1, r3
 800fb8c:	d002      	beq.n	800fb94 <__sflush_r+0x8c>
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f7ff f8a6 	bl	800ece0 <_free_r>
 800fb94:	2300      	movs	r3, #0
 800fb96:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb98:	e00d      	b.n	800fbb6 <__sflush_r+0xae>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	47b0      	blx	r6
 800fba0:	4602      	mov	r2, r0
 800fba2:	1c50      	adds	r0, r2, #1
 800fba4:	d1c9      	bne.n	800fb3a <__sflush_r+0x32>
 800fba6:	682b      	ldr	r3, [r5, #0]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d0c6      	beq.n	800fb3a <__sflush_r+0x32>
 800fbac:	2b1d      	cmp	r3, #29
 800fbae:	d001      	beq.n	800fbb4 <__sflush_r+0xac>
 800fbb0:	2b16      	cmp	r3, #22
 800fbb2:	d11e      	bne.n	800fbf2 <__sflush_r+0xea>
 800fbb4:	602f      	str	r7, [r5, #0]
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	e022      	b.n	800fc00 <__sflush_r+0xf8>
 800fbba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbbe:	b21b      	sxth	r3, r3
 800fbc0:	e01b      	b.n	800fbfa <__sflush_r+0xf2>
 800fbc2:	690f      	ldr	r7, [r1, #16]
 800fbc4:	2f00      	cmp	r7, #0
 800fbc6:	d0f6      	beq.n	800fbb6 <__sflush_r+0xae>
 800fbc8:	0793      	lsls	r3, r2, #30
 800fbca:	680e      	ldr	r6, [r1, #0]
 800fbcc:	bf08      	it	eq
 800fbce:	694b      	ldreq	r3, [r1, #20]
 800fbd0:	600f      	str	r7, [r1, #0]
 800fbd2:	bf18      	it	ne
 800fbd4:	2300      	movne	r3, #0
 800fbd6:	eba6 0807 	sub.w	r8, r6, r7
 800fbda:	608b      	str	r3, [r1, #8]
 800fbdc:	f1b8 0f00 	cmp.w	r8, #0
 800fbe0:	dde9      	ble.n	800fbb6 <__sflush_r+0xae>
 800fbe2:	6a21      	ldr	r1, [r4, #32]
 800fbe4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fbe6:	4643      	mov	r3, r8
 800fbe8:	463a      	mov	r2, r7
 800fbea:	4628      	mov	r0, r5
 800fbec:	47b0      	blx	r6
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	dc08      	bgt.n	800fc04 <__sflush_r+0xfc>
 800fbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbfa:	81a3      	strh	r3, [r4, #12]
 800fbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc04:	4407      	add	r7, r0
 800fc06:	eba8 0800 	sub.w	r8, r8, r0
 800fc0a:	e7e7      	b.n	800fbdc <__sflush_r+0xd4>
 800fc0c:	20400001 	.word	0x20400001

0800fc10 <_fflush_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	690b      	ldr	r3, [r1, #16]
 800fc14:	4605      	mov	r5, r0
 800fc16:	460c      	mov	r4, r1
 800fc18:	b913      	cbnz	r3, 800fc20 <_fflush_r+0x10>
 800fc1a:	2500      	movs	r5, #0
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	bd38      	pop	{r3, r4, r5, pc}
 800fc20:	b118      	cbz	r0, 800fc2a <_fflush_r+0x1a>
 800fc22:	6a03      	ldr	r3, [r0, #32]
 800fc24:	b90b      	cbnz	r3, 800fc2a <_fflush_r+0x1a>
 800fc26:	f7fd ff7d 	bl	800db24 <__sinit>
 800fc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d0f3      	beq.n	800fc1a <_fflush_r+0xa>
 800fc32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc34:	07d0      	lsls	r0, r2, #31
 800fc36:	d404      	bmi.n	800fc42 <_fflush_r+0x32>
 800fc38:	0599      	lsls	r1, r3, #22
 800fc3a:	d402      	bmi.n	800fc42 <_fflush_r+0x32>
 800fc3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc3e:	f7fe f9d6 	bl	800dfee <__retarget_lock_acquire_recursive>
 800fc42:	4628      	mov	r0, r5
 800fc44:	4621      	mov	r1, r4
 800fc46:	f7ff ff5f 	bl	800fb08 <__sflush_r>
 800fc4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc4c:	07da      	lsls	r2, r3, #31
 800fc4e:	4605      	mov	r5, r0
 800fc50:	d4e4      	bmi.n	800fc1c <_fflush_r+0xc>
 800fc52:	89a3      	ldrh	r3, [r4, #12]
 800fc54:	059b      	lsls	r3, r3, #22
 800fc56:	d4e1      	bmi.n	800fc1c <_fflush_r+0xc>
 800fc58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc5a:	f7fe f9c9 	bl	800dff0 <__retarget_lock_release_recursive>
 800fc5e:	e7dd      	b.n	800fc1c <_fflush_r+0xc>

0800fc60 <fiprintf>:
 800fc60:	b40e      	push	{r1, r2, r3}
 800fc62:	b503      	push	{r0, r1, lr}
 800fc64:	4601      	mov	r1, r0
 800fc66:	ab03      	add	r3, sp, #12
 800fc68:	4805      	ldr	r0, [pc, #20]	@ (800fc80 <fiprintf+0x20>)
 800fc6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc6e:	6800      	ldr	r0, [r0, #0]
 800fc70:	9301      	str	r3, [sp, #4]
 800fc72:	f7ff fe31 	bl	800f8d8 <_vfiprintf_r>
 800fc76:	b002      	add	sp, #8
 800fc78:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc7c:	b003      	add	sp, #12
 800fc7e:	4770      	bx	lr
 800fc80:	20000068 	.word	0x20000068

0800fc84 <__swhatbuf_r>:
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	460c      	mov	r4, r1
 800fc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc8c:	2900      	cmp	r1, #0
 800fc8e:	b096      	sub	sp, #88	@ 0x58
 800fc90:	4615      	mov	r5, r2
 800fc92:	461e      	mov	r6, r3
 800fc94:	da0d      	bge.n	800fcb2 <__swhatbuf_r+0x2e>
 800fc96:	89a3      	ldrh	r3, [r4, #12]
 800fc98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc9c:	f04f 0100 	mov.w	r1, #0
 800fca0:	bf14      	ite	ne
 800fca2:	2340      	movne	r3, #64	@ 0x40
 800fca4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fca8:	2000      	movs	r0, #0
 800fcaa:	6031      	str	r1, [r6, #0]
 800fcac:	602b      	str	r3, [r5, #0]
 800fcae:	b016      	add	sp, #88	@ 0x58
 800fcb0:	bd70      	pop	{r4, r5, r6, pc}
 800fcb2:	466a      	mov	r2, sp
 800fcb4:	f000 f862 	bl	800fd7c <_fstat_r>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	dbec      	blt.n	800fc96 <__swhatbuf_r+0x12>
 800fcbc:	9901      	ldr	r1, [sp, #4]
 800fcbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fcc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fcc6:	4259      	negs	r1, r3
 800fcc8:	4159      	adcs	r1, r3
 800fcca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcce:	e7eb      	b.n	800fca8 <__swhatbuf_r+0x24>

0800fcd0 <__smakebuf_r>:
 800fcd0:	898b      	ldrh	r3, [r1, #12]
 800fcd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcd4:	079d      	lsls	r5, r3, #30
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	460c      	mov	r4, r1
 800fcda:	d507      	bpl.n	800fcec <__smakebuf_r+0x1c>
 800fcdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fce0:	6023      	str	r3, [r4, #0]
 800fce2:	6123      	str	r3, [r4, #16]
 800fce4:	2301      	movs	r3, #1
 800fce6:	6163      	str	r3, [r4, #20]
 800fce8:	b003      	add	sp, #12
 800fcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcec:	ab01      	add	r3, sp, #4
 800fcee:	466a      	mov	r2, sp
 800fcf0:	f7ff ffc8 	bl	800fc84 <__swhatbuf_r>
 800fcf4:	9f00      	ldr	r7, [sp, #0]
 800fcf6:	4605      	mov	r5, r0
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	f7ff f864 	bl	800edc8 <_malloc_r>
 800fd00:	b948      	cbnz	r0, 800fd16 <__smakebuf_r+0x46>
 800fd02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd06:	059a      	lsls	r2, r3, #22
 800fd08:	d4ee      	bmi.n	800fce8 <__smakebuf_r+0x18>
 800fd0a:	f023 0303 	bic.w	r3, r3, #3
 800fd0e:	f043 0302 	orr.w	r3, r3, #2
 800fd12:	81a3      	strh	r3, [r4, #12]
 800fd14:	e7e2      	b.n	800fcdc <__smakebuf_r+0xc>
 800fd16:	89a3      	ldrh	r3, [r4, #12]
 800fd18:	6020      	str	r0, [r4, #0]
 800fd1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd1e:	81a3      	strh	r3, [r4, #12]
 800fd20:	9b01      	ldr	r3, [sp, #4]
 800fd22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd26:	b15b      	cbz	r3, 800fd40 <__smakebuf_r+0x70>
 800fd28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	f000 f837 	bl	800fda0 <_isatty_r>
 800fd32:	b128      	cbz	r0, 800fd40 <__smakebuf_r+0x70>
 800fd34:	89a3      	ldrh	r3, [r4, #12]
 800fd36:	f023 0303 	bic.w	r3, r3, #3
 800fd3a:	f043 0301 	orr.w	r3, r3, #1
 800fd3e:	81a3      	strh	r3, [r4, #12]
 800fd40:	89a3      	ldrh	r3, [r4, #12]
 800fd42:	431d      	orrs	r5, r3
 800fd44:	81a5      	strh	r5, [r4, #12]
 800fd46:	e7cf      	b.n	800fce8 <__smakebuf_r+0x18>

0800fd48 <memmove>:
 800fd48:	4288      	cmp	r0, r1
 800fd4a:	b510      	push	{r4, lr}
 800fd4c:	eb01 0402 	add.w	r4, r1, r2
 800fd50:	d902      	bls.n	800fd58 <memmove+0x10>
 800fd52:	4284      	cmp	r4, r0
 800fd54:	4623      	mov	r3, r4
 800fd56:	d807      	bhi.n	800fd68 <memmove+0x20>
 800fd58:	1e43      	subs	r3, r0, #1
 800fd5a:	42a1      	cmp	r1, r4
 800fd5c:	d008      	beq.n	800fd70 <memmove+0x28>
 800fd5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd66:	e7f8      	b.n	800fd5a <memmove+0x12>
 800fd68:	4402      	add	r2, r0
 800fd6a:	4601      	mov	r1, r0
 800fd6c:	428a      	cmp	r2, r1
 800fd6e:	d100      	bne.n	800fd72 <memmove+0x2a>
 800fd70:	bd10      	pop	{r4, pc}
 800fd72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd7a:	e7f7      	b.n	800fd6c <memmove+0x24>

0800fd7c <_fstat_r>:
 800fd7c:	b538      	push	{r3, r4, r5, lr}
 800fd7e:	4d07      	ldr	r5, [pc, #28]	@ (800fd9c <_fstat_r+0x20>)
 800fd80:	2300      	movs	r3, #0
 800fd82:	4604      	mov	r4, r0
 800fd84:	4608      	mov	r0, r1
 800fd86:	4611      	mov	r1, r2
 800fd88:	602b      	str	r3, [r5, #0]
 800fd8a:	f7f4 f859 	bl	8003e40 <_fstat>
 800fd8e:	1c43      	adds	r3, r0, #1
 800fd90:	d102      	bne.n	800fd98 <_fstat_r+0x1c>
 800fd92:	682b      	ldr	r3, [r5, #0]
 800fd94:	b103      	cbz	r3, 800fd98 <_fstat_r+0x1c>
 800fd96:	6023      	str	r3, [r4, #0]
 800fd98:	bd38      	pop	{r3, r4, r5, pc}
 800fd9a:	bf00      	nop
 800fd9c:	200026e8 	.word	0x200026e8

0800fda0 <_isatty_r>:
 800fda0:	b538      	push	{r3, r4, r5, lr}
 800fda2:	4d06      	ldr	r5, [pc, #24]	@ (800fdbc <_isatty_r+0x1c>)
 800fda4:	2300      	movs	r3, #0
 800fda6:	4604      	mov	r4, r0
 800fda8:	4608      	mov	r0, r1
 800fdaa:	602b      	str	r3, [r5, #0]
 800fdac:	f7f4 f858 	bl	8003e60 <_isatty>
 800fdb0:	1c43      	adds	r3, r0, #1
 800fdb2:	d102      	bne.n	800fdba <_isatty_r+0x1a>
 800fdb4:	682b      	ldr	r3, [r5, #0]
 800fdb6:	b103      	cbz	r3, 800fdba <_isatty_r+0x1a>
 800fdb8:	6023      	str	r3, [r4, #0]
 800fdba:	bd38      	pop	{r3, r4, r5, pc}
 800fdbc:	200026e8 	.word	0x200026e8

0800fdc0 <_sbrk_r>:
 800fdc0:	b538      	push	{r3, r4, r5, lr}
 800fdc2:	4d06      	ldr	r5, [pc, #24]	@ (800fddc <_sbrk_r+0x1c>)
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	4608      	mov	r0, r1
 800fdca:	602b      	str	r3, [r5, #0]
 800fdcc:	f7f4 f860 	bl	8003e90 <_sbrk>
 800fdd0:	1c43      	adds	r3, r0, #1
 800fdd2:	d102      	bne.n	800fdda <_sbrk_r+0x1a>
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	b103      	cbz	r3, 800fdda <_sbrk_r+0x1a>
 800fdd8:	6023      	str	r3, [r4, #0]
 800fdda:	bd38      	pop	{r3, r4, r5, pc}
 800fddc:	200026e8 	.word	0x200026e8

0800fde0 <memcpy>:
 800fde0:	440a      	add	r2, r1
 800fde2:	4291      	cmp	r1, r2
 800fde4:	f100 33ff 	add.w	r3, r0, #4294967295
 800fde8:	d100      	bne.n	800fdec <memcpy+0xc>
 800fdea:	4770      	bx	lr
 800fdec:	b510      	push	{r4, lr}
 800fdee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fdf6:	4291      	cmp	r1, r2
 800fdf8:	d1f9      	bne.n	800fdee <memcpy+0xe>
 800fdfa:	bd10      	pop	{r4, pc}

0800fdfc <abort>:
 800fdfc:	b508      	push	{r3, lr}
 800fdfe:	2006      	movs	r0, #6
 800fe00:	f000 f88c 	bl	800ff1c <raise>
 800fe04:	2001      	movs	r0, #1
 800fe06:	f7f3 ffcb 	bl	8003da0 <_exit>

0800fe0a <_calloc_r>:
 800fe0a:	b570      	push	{r4, r5, r6, lr}
 800fe0c:	fba1 5402 	umull	r5, r4, r1, r2
 800fe10:	b934      	cbnz	r4, 800fe20 <_calloc_r+0x16>
 800fe12:	4629      	mov	r1, r5
 800fe14:	f7fe ffd8 	bl	800edc8 <_malloc_r>
 800fe18:	4606      	mov	r6, r0
 800fe1a:	b928      	cbnz	r0, 800fe28 <_calloc_r+0x1e>
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	bd70      	pop	{r4, r5, r6, pc}
 800fe20:	220c      	movs	r2, #12
 800fe22:	6002      	str	r2, [r0, #0]
 800fe24:	2600      	movs	r6, #0
 800fe26:	e7f9      	b.n	800fe1c <_calloc_r+0x12>
 800fe28:	462a      	mov	r2, r5
 800fe2a:	4621      	mov	r1, r4
 800fe2c:	f7fe f850 	bl	800ded0 <memset>
 800fe30:	e7f4      	b.n	800fe1c <_calloc_r+0x12>

0800fe32 <__ascii_mbtowc>:
 800fe32:	b082      	sub	sp, #8
 800fe34:	b901      	cbnz	r1, 800fe38 <__ascii_mbtowc+0x6>
 800fe36:	a901      	add	r1, sp, #4
 800fe38:	b142      	cbz	r2, 800fe4c <__ascii_mbtowc+0x1a>
 800fe3a:	b14b      	cbz	r3, 800fe50 <__ascii_mbtowc+0x1e>
 800fe3c:	7813      	ldrb	r3, [r2, #0]
 800fe3e:	600b      	str	r3, [r1, #0]
 800fe40:	7812      	ldrb	r2, [r2, #0]
 800fe42:	1e10      	subs	r0, r2, #0
 800fe44:	bf18      	it	ne
 800fe46:	2001      	movne	r0, #1
 800fe48:	b002      	add	sp, #8
 800fe4a:	4770      	bx	lr
 800fe4c:	4610      	mov	r0, r2
 800fe4e:	e7fb      	b.n	800fe48 <__ascii_mbtowc+0x16>
 800fe50:	f06f 0001 	mvn.w	r0, #1
 800fe54:	e7f8      	b.n	800fe48 <__ascii_mbtowc+0x16>

0800fe56 <_realloc_r>:
 800fe56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe5a:	4607      	mov	r7, r0
 800fe5c:	4614      	mov	r4, r2
 800fe5e:	460d      	mov	r5, r1
 800fe60:	b921      	cbnz	r1, 800fe6c <_realloc_r+0x16>
 800fe62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe66:	4611      	mov	r1, r2
 800fe68:	f7fe bfae 	b.w	800edc8 <_malloc_r>
 800fe6c:	b92a      	cbnz	r2, 800fe7a <_realloc_r+0x24>
 800fe6e:	f7fe ff37 	bl	800ece0 <_free_r>
 800fe72:	4625      	mov	r5, r4
 800fe74:	4628      	mov	r0, r5
 800fe76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe7a:	f000 f86b 	bl	800ff54 <_malloc_usable_size_r>
 800fe7e:	4284      	cmp	r4, r0
 800fe80:	4606      	mov	r6, r0
 800fe82:	d802      	bhi.n	800fe8a <_realloc_r+0x34>
 800fe84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe88:	d8f4      	bhi.n	800fe74 <_realloc_r+0x1e>
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	4638      	mov	r0, r7
 800fe8e:	f7fe ff9b 	bl	800edc8 <_malloc_r>
 800fe92:	4680      	mov	r8, r0
 800fe94:	b908      	cbnz	r0, 800fe9a <_realloc_r+0x44>
 800fe96:	4645      	mov	r5, r8
 800fe98:	e7ec      	b.n	800fe74 <_realloc_r+0x1e>
 800fe9a:	42b4      	cmp	r4, r6
 800fe9c:	4622      	mov	r2, r4
 800fe9e:	4629      	mov	r1, r5
 800fea0:	bf28      	it	cs
 800fea2:	4632      	movcs	r2, r6
 800fea4:	f7ff ff9c 	bl	800fde0 <memcpy>
 800fea8:	4629      	mov	r1, r5
 800feaa:	4638      	mov	r0, r7
 800feac:	f7fe ff18 	bl	800ece0 <_free_r>
 800feb0:	e7f1      	b.n	800fe96 <_realloc_r+0x40>

0800feb2 <__ascii_wctomb>:
 800feb2:	4603      	mov	r3, r0
 800feb4:	4608      	mov	r0, r1
 800feb6:	b141      	cbz	r1, 800feca <__ascii_wctomb+0x18>
 800feb8:	2aff      	cmp	r2, #255	@ 0xff
 800feba:	d904      	bls.n	800fec6 <__ascii_wctomb+0x14>
 800febc:	228a      	movs	r2, #138	@ 0x8a
 800febe:	601a      	str	r2, [r3, #0]
 800fec0:	f04f 30ff 	mov.w	r0, #4294967295
 800fec4:	4770      	bx	lr
 800fec6:	700a      	strb	r2, [r1, #0]
 800fec8:	2001      	movs	r0, #1
 800feca:	4770      	bx	lr

0800fecc <_raise_r>:
 800fecc:	291f      	cmp	r1, #31
 800fece:	b538      	push	{r3, r4, r5, lr}
 800fed0:	4605      	mov	r5, r0
 800fed2:	460c      	mov	r4, r1
 800fed4:	d904      	bls.n	800fee0 <_raise_r+0x14>
 800fed6:	2316      	movs	r3, #22
 800fed8:	6003      	str	r3, [r0, #0]
 800feda:	f04f 30ff 	mov.w	r0, #4294967295
 800fede:	bd38      	pop	{r3, r4, r5, pc}
 800fee0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fee2:	b112      	cbz	r2, 800feea <_raise_r+0x1e>
 800fee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fee8:	b94b      	cbnz	r3, 800fefe <_raise_r+0x32>
 800feea:	4628      	mov	r0, r5
 800feec:	f000 f830 	bl	800ff50 <_getpid_r>
 800fef0:	4622      	mov	r2, r4
 800fef2:	4601      	mov	r1, r0
 800fef4:	4628      	mov	r0, r5
 800fef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fefa:	f000 b817 	b.w	800ff2c <_kill_r>
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d00a      	beq.n	800ff18 <_raise_r+0x4c>
 800ff02:	1c59      	adds	r1, r3, #1
 800ff04:	d103      	bne.n	800ff0e <_raise_r+0x42>
 800ff06:	2316      	movs	r3, #22
 800ff08:	6003      	str	r3, [r0, #0]
 800ff0a:	2001      	movs	r0, #1
 800ff0c:	e7e7      	b.n	800fede <_raise_r+0x12>
 800ff0e:	2100      	movs	r1, #0
 800ff10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff14:	4620      	mov	r0, r4
 800ff16:	4798      	blx	r3
 800ff18:	2000      	movs	r0, #0
 800ff1a:	e7e0      	b.n	800fede <_raise_r+0x12>

0800ff1c <raise>:
 800ff1c:	4b02      	ldr	r3, [pc, #8]	@ (800ff28 <raise+0xc>)
 800ff1e:	4601      	mov	r1, r0
 800ff20:	6818      	ldr	r0, [r3, #0]
 800ff22:	f7ff bfd3 	b.w	800fecc <_raise_r>
 800ff26:	bf00      	nop
 800ff28:	20000068 	.word	0x20000068

0800ff2c <_kill_r>:
 800ff2c:	b538      	push	{r3, r4, r5, lr}
 800ff2e:	4d07      	ldr	r5, [pc, #28]	@ (800ff4c <_kill_r+0x20>)
 800ff30:	2300      	movs	r3, #0
 800ff32:	4604      	mov	r4, r0
 800ff34:	4608      	mov	r0, r1
 800ff36:	4611      	mov	r1, r2
 800ff38:	602b      	str	r3, [r5, #0]
 800ff3a:	f7f3 ff21 	bl	8003d80 <_kill>
 800ff3e:	1c43      	adds	r3, r0, #1
 800ff40:	d102      	bne.n	800ff48 <_kill_r+0x1c>
 800ff42:	682b      	ldr	r3, [r5, #0]
 800ff44:	b103      	cbz	r3, 800ff48 <_kill_r+0x1c>
 800ff46:	6023      	str	r3, [r4, #0]
 800ff48:	bd38      	pop	{r3, r4, r5, pc}
 800ff4a:	bf00      	nop
 800ff4c:	200026e8 	.word	0x200026e8

0800ff50 <_getpid_r>:
 800ff50:	f7f3 bf0e 	b.w	8003d70 <_getpid>

0800ff54 <_malloc_usable_size_r>:
 800ff54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff58:	1f18      	subs	r0, r3, #4
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	bfbc      	itt	lt
 800ff5e:	580b      	ldrlt	r3, [r1, r0]
 800ff60:	18c0      	addlt	r0, r0, r3
 800ff62:	4770      	bx	lr

0800ff64 <_init>:
 800ff64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff66:	bf00      	nop
 800ff68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff6a:	bc08      	pop	{r3}
 800ff6c:	469e      	mov	lr, r3
 800ff6e:	4770      	bx	lr

0800ff70 <_fini>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	bf00      	nop
 800ff74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff76:	bc08      	pop	{r3}
 800ff78:	469e      	mov	lr, r3
 800ff7a:	4770      	bx	lr
