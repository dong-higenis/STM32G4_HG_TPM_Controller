
EX_SD_MOUNT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08009140  08009140  0000a140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009534  08009534  0000b1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009534  08009534  0000a534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800953c  0800953c  0000b1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800953c  0800953c  0000a53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009540  08009540  0000a540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08009544  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a8  200001ec  08009730  0000b1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001794  08009730  0000b794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001471a  00000000  00000000  0000b21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003358  00000000  00000000  0001f936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00022c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d00  00000000  00000000  00023d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206d4  00000000  00000000  00024a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018839  00000000  00000000  0004516c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bca2f  00000000  00000000  0005d9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a3d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005424  00000000  00000000  0011a418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011f83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009128 	.word	0x08009128

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	08009128 	.word	0x08009128

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <MX_DMA_Init+0x60>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	4a15      	ldr	r2, [pc, #84]	@ (8000f84 <MX_DMA_Init+0x60>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <MX_DMA_Init+0x60>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <MX_DMA_Init+0x60>)
 8000f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f46:	4a0f      	ldr	r2, [pc, #60]	@ (8000f84 <MX_DMA_Init+0x60>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <MX_DMA_Init+0x60>)
 8000f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	200b      	movs	r0, #11
 8000f60:	f001 fa0f 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f64:	200b      	movs	r0, #11
 8000f66:	f001 fa26 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	200c      	movs	r0, #12
 8000f70:	f001 fa07 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f74:	200c      	movs	r0, #12
 8000f76:	f001 fa1e 	bl	80023b6 <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <SELECT>:
 * SPI 함수들 ( SPI 신호 동작관련 )
 **************************************/

/* 슬레이브 선택! */
static void SELECT(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);  // CS를 LOW로
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2110      	movs	r1, #16
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f94:	f001 fe32 	bl	8002bfc <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f001 f8f5 	bl	8002188 <HAL_Delay>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <DESELECT>:

/* 슬레이브 선택 해제! */
static void DESELECT(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);    // CS를 HIGH로
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2110      	movs	r1, #16
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fae:	f001 fe25 	bl	8002bfc <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f001 f8e8 	bl	8002188 <HAL_Delay>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <SPI_TxByte>:

/* SPI 데이터 송신! */
static void SPI_TxByte(uint8_t data)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE)); // TX 버퍼 비울 때까지 대기
 8000fc6:	bf00      	nop
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <SPI_TxByte+0x30>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d1f8      	bne.n	8000fc8 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT); // 1바이트 전송
 8000fd6:	1df9      	adds	r1, r7, #7
 8000fd8:	2364      	movs	r3, #100	@ 0x64
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <SPI_TxByte+0x30>)
 8000fde:	f002 fea2 	bl	8003d26 <HAL_SPI_Transmit>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000124c 	.word	0x2000124c

08000ff0 <SPI_TxBuffer>:

/* SPI 전송 버퍼! */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ffc:	bf00      	nop
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <SPI_TxBuffer+0x30>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b02      	cmp	r3, #2
 800100a:	d1f8      	bne.n	8000ffe <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800100c:	887a      	ldrh	r2, [r7, #2]
 800100e:	2364      	movs	r3, #100	@ 0x64
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4803      	ldr	r0, [pc, #12]	@ (8001020 <SPI_TxBuffer+0x30>)
 8001014:	f002 fe87 	bl	8003d26 <HAL_SPI_Transmit>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000124c 	.word	0x2000124c

08001024 <SPI_RxByte>:

/* SPI 데이터 수신! */
static uint8_t SPI_RxByte(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF; // SD카드는 0xFF를 보내야 응답함
 800102a:	23ff      	movs	r3, #255	@ 0xff
 800102c:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800102e:	bf00      	nop
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <SPI_RxByte+0x34>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b02      	cmp	r3, #2
 800103c:	d1f8      	bne.n	8001030 <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800103e:	1dba      	adds	r2, r7, #6
 8001040:	1df9      	adds	r1, r7, #7
 8001042:	2364      	movs	r3, #100	@ 0x64
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <SPI_RxByte+0x34>)
 800104a:	f002 ffe2 	bl	8004012 <HAL_SPI_TransmitReceive>

    return data;
 800104e:	79bb      	ldrb	r3, [r7, #6]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000124c 	.word	0x2000124c

0800105c <SPI_RxBytePtr>:

/* 포인터를 통한 SPI 수신 데이터  */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8001064:	f7ff ffde 	bl	8001024 <SPI_RxByte>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	701a      	strb	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <SD_ReadyWait>:
 * SD 함수
 **************************************/

/*  SD카드 준비 상태 확인 */
static uint8_t SD_ReadyWait(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms 타임아웃 설정 */
    Timer2 = 500;
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <SD_ReadyWait+0x30>)
 8001080:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001084:	801a      	strh	r2, [r3, #0]
		0x00: 바쁨 (busy)
		기타값: 에러 또는 처리중
     */

    do {
        res = SPI_RxByte();
 8001086:	f7ff ffcd 	bl	8001024 <SPI_RxByte>
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2bff      	cmp	r3, #255	@ 0xff
 8001092:	d004      	beq.n	800109e <SD_ReadyWait+0x26>
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <SD_ReadyWait+0x30>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f3      	bne.n	8001086 <SD_ReadyWait+0xe>

    return res;
 800109e:	79fb      	ldrb	r3, [r7, #7]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000020a 	.word	0x2000020a

080010ac <SD_PowerOn>:

/* 전원 제어 */
static void SD_PowerOn(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF; // 약 8000번 시도
 80010b2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010b6:	60fb      	str	r3, [r7, #12]

    /* 1단계: 웨이크업 시퀀스 */
    DESELECT(); // 슬레이브 선택 해제!
 80010b8:	f7ff ff73 	bl	8000fa2 <DESELECT>
    for(int i = 0; i < 10; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	e005      	b.n	80010ce <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF); // 80클럭 펄스 생성 (10바이트 × 8비트)
 80010c2:	20ff      	movs	r0, #255	@ 0xff
 80010c4:	f7ff ff7a 	bl	8000fbc <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	3301      	adds	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b09      	cmp	r3, #9
 80010d2:	ddf6      	ble.n	80010c2 <SD_PowerOn+0x16>
    }

    /* 슬레이브 선택! */
    SELECT();
 80010d4:	f7ff ff58 	bl	8000f88 <SELECT>

    /* 2단계: 카드 선택 및 IDLE 명령 */
    args[0] = CMD0;     // 명령어: GO_IDLE_STATE
 80010d8:	2340      	movs	r3, #64	@ 0x40
 80010da:	703b      	strb	r3, [r7, #0]
    args[1] = 0;        // 인수 [31:24] = 0
 80010dc:	2300      	movs	r3, #0
 80010de:	707b      	strb	r3, [r7, #1]
    args[2] = 0;        // 인수 [23:16] = 0
 80010e0:	2300      	movs	r3, #0
 80010e2:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;        // 인수 [15:8] = 0
 80010e4:	2300      	movs	r3, #0
 80010e6:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;        // 인수 [7:0] = 0
 80010e8:	2300      	movs	r3, #0
 80010ea:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     // CRC (CMD0용 고정값)
 80010ec:	2395      	movs	r3, #149	@ 0x95
 80010ee:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args)); // 6바이트 전송
 80010f0:	463b      	mov	r3, r7
 80010f2:	2106      	movs	r1, #6
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff7b 	bl	8000ff0 <SPI_TxBuffer>

    /* 3단계: 응답 대기 (R1 응답 = 0x01 기대) */
    while ((SPI_RxByte() != 0x01) && cnt)
 80010fa:	e002      	b.n	8001102 <SD_PowerOn+0x56>
    {
        cnt--; // 타임아웃 카운터
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3b01      	subs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 8001102:	f7ff ff8f 	bl	8001024 <SPI_RxByte>
 8001106:	4603      	mov	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	d002      	beq.n	8001112 <SD_PowerOn+0x66>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f4      	bne.n	80010fc <SD_PowerOn+0x50>
    }

    DESELECT(); // 명령 완료 후 비활성화
 8001112:	f7ff ff46 	bl	8000fa2 <DESELECT>
    SPI_TxByte(0XFF); // 추가 클럭 제공
 8001116:	20ff      	movs	r0, #255	@ 0xff
 8001118:	f7ff ff50 	bl	8000fbc <SPI_TxByte>

    PowerFlag = 1; // 전원 상태 플래그 설정
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <SD_PowerOn+0x80>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000020d 	.word	0x2000020d

08001130 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <SD_PowerOff+0x14>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	2000020d 	.word	0x2000020d

08001148 <SD_CheckPower>:

/* Power Flag 체크용 함수! */
static uint8_t SD_CheckPower(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
    return PowerFlag;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <SD_CheckPower+0x14>)
 800114e:	781b      	ldrb	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000020d 	.word	0x2000020d

08001160 <SD_RxDataBlock>:

/* 데이터 블록 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* 200ms 타임아웃 */
    Timer1 = 200;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <SD_RxDataBlock+0x5c>)
 800116c:	22c8      	movs	r2, #200	@ 0xc8
 800116e:	801a      	strh	r2, [r3, #0]

    /* 응답을 받을때 까지 or 타임아웃 시간까지 루프를 돕니다. */
    // 1단계: 데이터 토큰 대기
    do {
        token = SPI_RxByte();
 8001170:	f7ff ff58 	bl	8001024 <SPI_RxByte>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2bff      	cmp	r3, #255	@ 0xff
 800117c:	d104      	bne.n	8001188 <SD_RxDataBlock+0x28>
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <SD_RxDataBlock+0x5c>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f3      	bne.n	8001170 <SD_RxDataBlock+0x10>

    // 2단계: 토큰 검증
    if(token != 0xFE) return FALSE;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2bfe      	cmp	r3, #254	@ 0xfe
 800118c:	d007      	beq.n	800119e <SD_RxDataBlock+0x3e>
 800118e:	2300      	movs	r3, #0
 8001190:	e00f      	b.n	80011b2 <SD_RxDataBlock+0x52>

    // 3단계: 실제 데이터 수신
    while(len--) {
        SPI_RxBytePtr(buff++);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5f 	bl	800105c <SPI_RxBytePtr>
    while(len--) {
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	603a      	str	r2, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f4      	bne.n	8001192 <SD_RxDataBlock+0x32>
    }

    // 4단계: CRC 무시 (사용 안 함)
    SPI_RxByte();
 80011a8:	f7ff ff3c 	bl	8001024 <SPI_RxByte>
    SPI_RxByte();
 80011ac:	f7ff ff3a 	bl	8001024 <SPI_RxByte>

    return TRUE;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000208 	.word	0x20000208

080011c0 <SD_TxDataBlock>:


/* 데이터 블록 전송 */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 80011cc:	23ff      	movs	r3, #255	@ 0xff
 80011ce:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73bb      	strb	r3, [r7, #14]

    // 1단계: 카드 준비 상태 확인
    if (SD_ReadyWait() != 0xFF) return FALSE;
 80011d4:	f7ff ff50 	bl	8001078 <SD_ReadyWait>
 80011d8:	4603      	mov	r3, r0
 80011da:	2bff      	cmp	r3, #255	@ 0xff
 80011dc:	d001      	beq.n	80011e2 <SD_TxDataBlock+0x22>
 80011de:	2300      	movs	r3, #0
 80011e0:	e037      	b.n	8001252 <SD_TxDataBlock+0x92>

    // 2단계: 토큰 전송
    SPI_TxByte(token); // 0xFE(단일블록) 또는 0xFC(다중블록)
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fee9 	bl	8000fbc <SPI_TxByte>

    // 3단계: 데이터 전송 (STOP 토큰이 아닌 경우만)
    if (token != 0xFD) // 0xFD = STOP_TRANSMISSION 토큰
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80011ee:	d028      	beq.n	8001242 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);  // 512바이트 데이터
 80011f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fefb 	bl	8000ff0 <SPI_TxBuffer>

        SPI_RxByte();  // 더미 CRC 상위
 80011fa:	f7ff ff13 	bl	8001024 <SPI_RxByte>
        SPI_RxByte();  // 더미 CRC 하위
 80011fe:	f7ff ff11 	bl	8001024 <SPI_RxByte>

        // 4단계: 데이터 응답 토큰 수신
        while (i <= 64)
 8001202:	e00b      	b.n	800121c <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 8001204:	f7ff ff0e 	bl	8001024 <SPI_RxByte>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]

            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	2b05      	cmp	r3, #5
 8001214:	d006      	beq.n	8001224 <SD_TxDataBlock+0x64>
            i++;
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	3301      	adds	r3, #1
 800121a:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	2b40      	cmp	r3, #64	@ 0x40
 8001220:	d9f0      	bls.n	8001204 <SD_TxDataBlock+0x44>
 8001222:	e000      	b.n	8001226 <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 8001224:	bf00      	nop
        }

        // 5단계: 바쁨 상태 대기
        Timer1 = 200; // 200ms 타임아웃
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <SD_TxDataBlock+0x9c>)
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 800122c:	bf00      	nop
 800122e:	f7ff fef9 	bl	8001024 <SPI_RxByte>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d104      	bne.n	8001242 <SD_TxDataBlock+0x82>
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <SD_TxDataBlock+0x9c>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f5      	bne.n	800122e <SD_TxDataBlock+0x6e>
    }
    if ((resp & 0x1F) == 0x05) return TRUE;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	2b05      	cmp	r3, #5
 800124a:	d101      	bne.n	8001250 <SD_TxDataBlock+0x90>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <SD_TxDataBlock+0x92>

    return FALSE;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000208 	.word	0x20000208

08001260 <SD_SendCmd>:
#endif /* _USE_WRITE */


/* 명령어 전송 함수!*/
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    // 1단계: 카드 준비 대기
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 800126c:	f7ff ff04 	bl	8001078 <SD_ReadyWait>
 8001270:	4603      	mov	r3, r0
 8001272:	2bff      	cmp	r3, #255	@ 0xff
 8001274:	d001      	beq.n	800127a <SD_SendCmd+0x1a>
 8001276:	23ff      	movs	r3, #255	@ 0xff
 8001278:	e042      	b.n	8001300 <SD_SendCmd+0xa0>

    // 2단계: 명령어 패킷 전송 (6바이트)
    SPI_TxByte(cmd);                    // 명령어 바이트
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe9d 	bl	8000fbc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   // 인수 [31:24]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	0e1b      	lsrs	r3, r3, #24
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fe97 	bl	8000fbc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   // 인수 [23:16]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	0c1b      	lsrs	r3, r3, #16
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe91 	bl	8000fbc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    // 인수 [15:8]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe8b 	bl	8000fbc <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           // 인수 [7:0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe86 	bl	8000fbc <SPI_TxByte>

    // 3단계: CRC 계산 및 전송
    if(cmd == CMD0) crc = 0x95;         // CMD0은 항상 0x95
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b40      	cmp	r3, #64	@ 0x40
 80012b4:	d102      	bne.n	80012bc <SD_SendCmd+0x5c>
 80012b6:	2395      	movs	r3, #149	@ 0x95
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e007      	b.n	80012cc <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    // CMD8(0x1AA)는 0x87
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b48      	cmp	r3, #72	@ 0x48
 80012c0:	d102      	bne.n	80012c8 <SD_SendCmd+0x68>
 80012c2:	2387      	movs	r3, #135	@ 0x87
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e001      	b.n	80012cc <SD_SendCmd+0x6c>
    else crc = 1;                       // 나머지는 더미 CRC
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]

    SPI_TxByte(crc);
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe74 	bl	8000fbc <SPI_TxByte>

    // 4단계: CMD12 특수 처리
    if (cmd == CMD12) SPI_RxByte();     // STOP_TRANSMISSION 후 더미바이트
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b4c      	cmp	r3, #76	@ 0x4c
 80012d8:	d101      	bne.n	80012de <SD_SendCmd+0x7e>
 80012da:	f7ff fea3 	bl	8001024 <SPI_RxByte>

    // 5단계: R1 응답 수신 (최대 10번 시도)
    uint8_t n = 10;
 80012de:	230a      	movs	r3, #10
 80012e0:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 80012e2:	f7ff fe9f 	bl	8001024 <SPI_RxByte>
 80012e6:	4603      	mov	r3, r0
 80012e8:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);      // MSB가 0이 될 때까지
 80012ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da05      	bge.n	80012fe <SD_SendCmd+0x9e>
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	73bb      	strb	r3, [r7, #14]
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f1      	bne.n	80012e2 <SD_SendCmd+0x82>

    return res;
 80012fe:	7b7b      	ldrb	r3, [r7, #13]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <SD_disk_initialize>:
 * 사용자 정의 diskio.c 함수!
 **************************************/

/* SD 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    // 1단계: 드라이브 번호 확인 (0만 지원)
    if(drv) return STA_NOINIT;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SD_disk_initialize+0x14>
 8001318:	2301      	movs	r3, #1
 800131a:	e0d6      	b.n	80014ca <SD_disk_initialize+0x1c2>

    // 2단계: 물리적 디스크 존재 확인
    if(Stat & STA_NODISK) return Stat;
 800131c:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <SD_disk_initialize+0x2a>
 800132a:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	e0cb      	b.n	80014ca <SD_disk_initialize+0x1c2>

    // 3단계: 전원 켜기
    SD_PowerOn();
 8001332:	f7ff febb 	bl	80010ac <SD_PowerOn>

    // 4단계: 카드 선택
    SELECT();
 8001336:	f7ff fe27 	bl	8000f88 <SELECT>

    type = 0;  // 카드 타입 초기화
 800133a:	2300      	movs	r3, #0
 800133c:	73bb      	strb	r3, [r7, #14]

    // 5단계: IDLE 상태 확인
    if (SD_SendCmd(CMD0, 0) == 1)  // R1 = 0x01 (IDLE 상태) 기대
 800133e:	2100      	movs	r1, #0
 8001340:	2040      	movs	r0, #64	@ 0x40
 8001342:	f7ff ff8d 	bl	8001260 <SD_SendCmd>
 8001346:	4603      	mov	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	f040 80a6 	bne.w	800149a <SD_disk_initialize+0x192>
    {
        Timer1 = 1000;  // 1초 타임아웃
 800134e:	4b62      	ldr	r3, [pc, #392]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 8001350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001354:	801a      	strh	r2, [r3, #0]

        // 6단계: SD v2+ 확인 (CMD8 지원 여부)
        if (SD_SendCmd(CMD8, 0x1AA) == 1)  // 0x1AA = 2.7-3.6V, 0xAA 체크패턴
 8001356:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800135a:	2048      	movs	r0, #72	@ 0x48
 800135c:	f7ff ff80 	bl	8001260 <SD_SendCmd>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d158      	bne.n	8001418 <SD_disk_initialize+0x110>
        {
            // OCR(Operation Conditions Register) 수신
            for (n = 0; n < 4; n++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e00c      	b.n	8001386 <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 800136c:	7bfc      	ldrb	r4, [r7, #15]
 800136e:	f7ff fe59 	bl	8001024 <SPI_RxByte>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	f104 0310 	add.w	r3, r4, #16
 800137a:	443b      	add	r3, r7
 800137c:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3301      	adds	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d9ef      	bls.n	800136c <SD_disk_initialize+0x64>
            }

            // 전압 범위 및 체크 패턴 확인
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)  // 지원 전압 + 체크패턴
 800138c:	7abb      	ldrb	r3, [r7, #10]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 8083 	bne.w	800149a <SD_disk_initialize+0x192>
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	2baa      	cmp	r3, #170	@ 0xaa
 8001398:	d17f      	bne.n	800149a <SD_disk_initialize+0x192>
            {
                // ACMD41로 초기화 (HCS 비트 설정)
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 800139a:	2100      	movs	r1, #0
 800139c:	2077      	movs	r0, #119	@ 0x77
 800139e:	f7ff ff5f 	bl	8001260 <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d807      	bhi.n	80013b8 <SD_disk_initialize+0xb0>
                        SD_SendCmd(CMD41, 1UL << 30) == 0) // HCS=1 (고용량 지원)
 80013a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013ac:	2069      	movs	r0, #105	@ 0x69
 80013ae:	f7ff ff57 	bl	8001260 <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <SD_disk_initialize+0xbc>
                        break;
                } while (Timer1);
 80013b8:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1eb      	bne.n	800139a <SD_disk_initialize+0x92>
 80013c2:	e000      	b.n	80013c6 <SD_disk_initialize+0xbe>
                        break;
 80013c4:	bf00      	nop

                // 초기화 완료 후 OCR 읽기
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013c6:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d064      	beq.n	800149a <SD_disk_initialize+0x192>
 80013d0:	2100      	movs	r1, #0
 80013d2:	207a      	movs	r0, #122	@ 0x7a
 80013d4:	f7ff ff44 	bl	8001260 <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d15d      	bne.n	800149a <SD_disk_initialize+0x192>
                {
                    for (n = 0; n < 4; n++)
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e00c      	b.n	80013fe <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 80013e4:	7bfc      	ldrb	r4, [r7, #15]
 80013e6:	f7ff fe1d 	bl	8001024 <SPI_RxByte>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	f104 0310 	add.w	r3, r4, #16
 80013f2:	443b      	add	r3, r7
 80013f4:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d9ef      	bls.n	80013e4 <SD_disk_initialize+0xdc>
                    }

                    // CCS 비트 확인 (카드 용량 구조)
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001404:	7a3b      	ldrb	r3, [r7, #8]
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SD_disk_initialize+0x10a>
 800140e:	230c      	movs	r3, #12
 8001410:	e000      	b.n	8001414 <SD_disk_initialize+0x10c>
 8001412:	2304      	movs	r3, #4
 8001414:	73bb      	strb	r3, [r7, #14]
 8001416:	e040      	b.n	800149a <SD_disk_initialize+0x192>
            }
        }
        else
        {
            // SD v1 또는 MMC 카드
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1)
 8001418:	2100      	movs	r1, #0
 800141a:	2077      	movs	r0, #119	@ 0x77
 800141c:	f7ff ff20 	bl	8001260 <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d808      	bhi.n	8001438 <SD_disk_initialize+0x130>
 8001426:	2100      	movs	r1, #0
 8001428:	2069      	movs	r0, #105	@ 0x69
 800142a:	f7ff ff19 	bl	8001260 <SD_SendCmd>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d801      	bhi.n	8001438 <SD_disk_initialize+0x130>
 8001434:	2302      	movs	r3, #2
 8001436:	e000      	b.n	800143a <SD_disk_initialize+0x132>
 8001438:	2301      	movs	r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]
                   ? CT_SD1 : CT_MMC;

            do
            {
                if (type == CT_SD1)
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d10e      	bne.n	8001460 <SD_disk_initialize+0x158>
                {
                    // SD v1: ACMD41
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001442:	2100      	movs	r1, #0
 8001444:	2077      	movs	r0, #119	@ 0x77
 8001446:	f7ff ff0b 	bl	8001260 <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d80e      	bhi.n	800146e <SD_disk_initialize+0x166>
 8001450:	2100      	movs	r1, #0
 8001452:	2069      	movs	r0, #105	@ 0x69
 8001454:	f7ff ff04 	bl	8001260 <SD_SendCmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d107      	bne.n	800146e <SD_disk_initialize+0x166>
                        break;
 800145e:	e00d      	b.n	800147c <SD_disk_initialize+0x174>
                }
                else
                {
                    // MMC: CMD1
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 8001460:	2100      	movs	r1, #0
 8001462:	2041      	movs	r0, #65	@ 0x41
 8001464:	f7ff fefc 	bl	8001260 <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <SD_disk_initialize+0x172>
                }
            } while (Timer1);
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e1      	bne.n	800143c <SD_disk_initialize+0x134>
 8001478:	e000      	b.n	800147c <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 800147a:	bf00      	nop

            // 블록 크기 설정 (512바이트)
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <SD_disk_initialize+0x18e>
 8001486:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148a:	2050      	movs	r0, #80	@ 0x50
 800148c:	f7ff fee8 	bl	8001260 <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SD_disk_initialize+0x192>
                type = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;  // 감지된 카드 타입 저장
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <SD_disk_initialize+0x1d4>)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	7013      	strb	r3, [r2, #0]

    DESELECT();      // 카드 비활성화
 80014a0:	f7ff fd7f 	bl	8000fa2 <DESELECT>
    SPI_RxByte();    // 추가 클럭
 80014a4:	f7ff fdbe 	bl	8001024 <SPI_RxByte>

    // 상태 업데이트
    if (type)
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;  // 초기화 완료 플래그 제거
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e001      	b.n	80014c4 <SD_disk_initialize+0x1bc>
    }
    else
    {
        SD_PowerOff();        // 초기화 실패 시 전원 끄기
 80014c0:	f7ff fe36 	bl	8001130 <SD_PowerOff>
    }

    return Stat;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000208 	.word	0x20000208
 80014dc:	2000020c 	.word	0x2000020c

080014e0 <SD_disk_status>:

/* SD 상태 리턴함수! */
DSTATUS SD_disk_status(BYTE drv)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SD_disk_status+0x14>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e002      	b.n	80014fa <SD_disk_status+0x1a>
    return Stat;
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SD_disk_status+0x28>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000000 	.word	0x20000000

0800150c <SD_disk_read>:

/* 섹터 읽기 함수! */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <SD_disk_read+0x1c>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <SD_disk_read+0x20>
 8001528:	2304      	movs	r3, #4
 800152a:	e051      	b.n	80015d0 <SD_disk_read+0xc4>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <SD_disk_read+0xcc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SD_disk_read+0x32>
 800153a:	2303      	movs	r3, #3
 800153c:	e048      	b.n	80015d0 <SD_disk_read+0xc4>

    // 3단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <SD_disk_read+0xd0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <SD_disk_read+0x44>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	607b      	str	r3, [r7, #4]

    SELECT();
 8001550:	f7ff fd1a 	bl	8000f88 <SELECT>

    if (count == 1)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d111      	bne.n	800157e <SD_disk_read+0x72>
    {
        // 단일 블록 읽기
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	2051      	movs	r0, #81	@ 0x51
 800155e:	f7ff fe7f 	bl	8001260 <SD_SendCmd>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d129      	bne.n	80015bc <SD_disk_read+0xb0>
 8001568:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f7ff fdf7 	bl	8001160 <SD_RxDataBlock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d021      	beq.n	80015bc <SD_disk_read+0xb0>
            count = 0;  // 성공 시 count를 0으로
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	e01e      	b.n	80015bc <SD_disk_read+0xb0>
    }
    else
    {
        // 다중 블록 읽기
        if (SD_SendCmd(CMD18, sector) == 0)
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	2052      	movs	r0, #82	@ 0x52
 8001582:	f7ff fe6d 	bl	8001260 <SD_SendCmd>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d117      	bne.n	80015bc <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 800158c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff fde5 	bl	8001160 <SD_RxDataBlock>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <SD_disk_read+0xa6>
                buff += 512;  // 다음 블록 버퍼 위치
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a2:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ed      	bne.n	800158c <SD_disk_read+0x80>
 80015b0:	e000      	b.n	80015b4 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 80015b2:	bf00      	nop

            SD_SendCmd(CMD12, 0);  // 전송 중지 명령
 80015b4:	2100      	movs	r1, #0
 80015b6:	204c      	movs	r0, #76	@ 0x4c
 80015b8:	f7ff fe52 	bl	8001260 <SD_SendCmd>
        }
    }

    DESELECT();
 80015bc:	f7ff fcf1 	bl	8000fa2 <DESELECT>
    SPI_RxByte();
 80015c0:	f7ff fd30 	bl	8001024 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	2000020c 	.word	0x2000020c

080015e0 <SD_disk_write>:
/* 섹터 쓰기 함수! */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <SD_disk_write+0x1c>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <SD_disk_write+0x20>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e06b      	b.n	80016d8 <SD_disk_write+0xf8>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001600:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <SD_disk_write+0x100>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SD_disk_write+0x32>
 800160e:	2303      	movs	r3, #3
 8001610:	e062      	b.n	80016d8 <SD_disk_write+0xf8>

    // 3단계: 쓰기 보호 확인
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <SD_disk_write+0x100>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SD_disk_write+0x44>
 8001620:	2302      	movs	r3, #2
 8001622:	e059      	b.n	80016d8 <SD_disk_write+0xf8>

    // 4단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8001624:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <SD_disk_write+0x104>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <SD_disk_write+0x56>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	607b      	str	r3, [r7, #4]

    SELECT();
 8001636:	f7ff fca7 	bl	8000f88 <SELECT>

    if (count == 1)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d110      	bne.n	8001662 <SD_disk_write+0x82>
    {
        // 단일 블록 쓰기
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	2058      	movs	r0, #88	@ 0x58
 8001644:	f7ff fe0c 	bl	8001260 <SD_SendCmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13a      	bne.n	80016c4 <SD_disk_write+0xe4>
 800164e:	21fe      	movs	r1, #254	@ 0xfe
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f7ff fdb5 	bl	80011c0 <SD_TxDataBlock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d033      	beq.n	80016c4 <SD_disk_write+0xe4>
            count = 0;  // 성공 시 count를 0으로
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e030      	b.n	80016c4 <SD_disk_write+0xe4>
    }
    else
    {
        // 다중 블록 쓰기
        if (CardType & CT_SD1)
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <SD_disk_write+0x104>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 800166e:	2100      	movs	r1, #0
 8001670:	2077      	movs	r0, #119	@ 0x77
 8001672:	f7ff fdf5 	bl	8001260 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	2057      	movs	r0, #87	@ 0x57
 800167a:	f7ff fdf1 	bl	8001260 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2059      	movs	r0, #89	@ 0x59
 8001682:	f7ff fded 	bl	8001260 <SD_SendCmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d11b      	bne.n	80016c4 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 800168c:	21fc      	movs	r1, #252	@ 0xfc
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f7ff fd96 	bl	80011c0 <SD_TxDataBlock>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <SD_disk_write+0xd0>
                buff += 512;  // 다음 블록 버퍼 위치
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016a0:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <SD_disk_write+0xac>
 80016ae:	e000      	b.n	80016b2 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016b0:	bf00      	nop

            /* STOP_TRAN 토큰 */
            if(!SD_TxDataBlock(0, 0xFD))
 80016b2:	21fd      	movs	r1, #253	@ 0xfd
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fd83 	bl	80011c0 <SD_TxDataBlock>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <SD_disk_write+0xe4>
            {
                count = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	603b      	str	r3, [r7, #0]
            }
        }
    }

    DESELECT();
 80016c4:	f7ff fc6d 	bl	8000fa2 <DESELECT>
    SPI_RxByte();
 80016c8:	f7ff fcac 	bl	8001024 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	2000020c 	.word	0x2000020c

080016e8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08b      	sub	sp, #44	@ 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	460b      	mov	r3, r1
 80016f6:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	623b      	str	r3, [r7, #32]

    if (drv) return RES_PARERR;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SD_disk_ioctl+0x1e>
 8001702:	2304      	movs	r3, #4
 8001704:	e0ad      	b.n	8001862 <SD_disk_ioctl+0x17a>
    res = RES_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)  // 전원 제어
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d124      	bne.n	800175c <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d012      	beq.n	8001740 <SD_disk_ioctl+0x58>
 800171a:	2b02      	cmp	r3, #2
 800171c:	dc1a      	bgt.n	8001754 <SD_disk_ioctl+0x6c>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <SD_disk_ioctl+0x40>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d006      	beq.n	8001734 <SD_disk_ioctl+0x4c>
 8001726:	e015      	b.n	8001754 <SD_disk_ioctl+0x6c>
        {
        case 0: SD_PowerOff(); res = RES_OK; break;      // 전원 끄기
 8001728:	f7ff fd02 	bl	8001130 <SD_PowerOff>
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001732:	e094      	b.n	800185e <SD_disk_ioctl+0x176>
        case 1: SD_PowerOn(); res = RES_OK; break;       // 전원 켜기
 8001734:	f7ff fcba 	bl	80010ac <SD_PowerOn>
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800173e:	e08e      	b.n	800185e <SD_disk_ioctl+0x176>
        case 2: *(ptr + 1) = SD_CheckPower(); res = RES_OK; break; // 전원 상태 확인
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	1c5c      	adds	r4, r3, #1
 8001744:	f7ff fd00 	bl	8001148 <SD_CheckPower>
 8001748:	4603      	mov	r3, r0
 800174a:	7023      	strb	r3, [r4, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001752:	e084      	b.n	800185e <SD_disk_ioctl+0x176>
        default: res = RES_PARERR;
 8001754:	2304      	movs	r3, #4
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800175a:	e080      	b.n	800185e <SD_disk_ioctl+0x176>
        }
    }
    else
    {
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 800175c:	4b43      	ldr	r3, [pc, #268]	@ (800186c <SD_disk_ioctl+0x184>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SD_disk_ioctl+0x86>
 800176a:	2303      	movs	r3, #3
 800176c:	e079      	b.n	8001862 <SD_disk_ioctl+0x17a>

        SELECT();
 800176e:	f7ff fc0b 	bl	8000f88 <SELECT>

        switch (ctrl)
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d05a      	beq.n	800182e <SD_disk_ioctl+0x146>
 8001778:	2b02      	cmp	r3, #2
 800177a:	dc6c      	bgt.n	8001856 <SD_disk_ioctl+0x16e>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d05e      	beq.n	800183e <SD_disk_ioctl+0x156>
 8001780:	2b01      	cmp	r3, #1
 8001782:	d168      	bne.n	8001856 <SD_disk_ioctl+0x16e>
        {
        case GET_SECTOR_COUNT:  // 총 섹터 수 얻기
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001784:	2100      	movs	r1, #0
 8001786:	2049      	movs	r0, #73	@ 0x49
 8001788:	f7ff fd6a 	bl	8001260 <SD_SendCmd>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d15e      	bne.n	8001850 <SD_disk_ioctl+0x168>
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2110      	movs	r1, #16
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fce1 	bl	8001160 <SD_RxDataBlock>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d055      	beq.n	8001850 <SD_disk_ioctl+0x168>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 80017a4:	7a3b      	ldrb	r3, [r7, #8]
 80017a6:	099b      	lsrs	r3, r3, #6
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d10f      	bne.n	80017ce <SD_disk_ioctl+0xe6>
                {
                    // FIX 5: SDv2 CSD 파싱 수정
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80017b6:	7c3b      	ldrb	r3, [r7, #16]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	4313      	orrs	r3, r2
 80017bc:	7c7a      	ldrb	r2, [r7, #17]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;  // (C_SIZE+1) * 1024
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	3301      	adds	r3, #1
 80017c6:	029a      	lsls	r2, r3, #10
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e02b      	b.n	8001826 <SD_disk_ioctl+0x13e>
                }
                else /* MMC or SDC V1 */
                {
                    // 복잡한 CSD v1 계산
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	7cbb      	ldrb	r3, [r7, #18]
 80017d8:	09db      	lsrs	r3, r3, #7
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4413      	add	r3, r2
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	7c7b      	ldrb	r3, [r7, #17]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f003 0306 	and.w	r3, r3, #6
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	3302      	adds	r3, #2
 80017f2:	77fb      	strb	r3, [r7, #31]
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017f4:	7c3b      	ldrb	r3, [r7, #16]
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b29a      	uxth	r2, r3
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	b29b      	uxth	r3, r3
 800180c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001810:	b29b      	uxth	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	3301      	adds	r3, #1
 8001818:	83bb      	strh	r3, [r7, #28]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 800181a:	8bba      	ldrh	r2, [r7, #28]
 800181c:	7ffb      	ldrb	r3, [r7, #31]
 800181e:	3b09      	subs	r3, #9
 8001820:	409a      	lsls	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800182c:	e010      	b.n	8001850 <SD_disk_ioctl+0x168>

        case GET_SECTOR_SIZE:   // 섹터 크기 (항상 512)
            *(WORD*) buff = 512;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001834:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800183c:	e00b      	b.n	8001856 <SD_disk_ioctl+0x16e>

        case CTRL_SYNC:         // 동기화 (쓰기 완료 대기)
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800183e:	f7ff fc1b 	bl	8001078 <SD_ReadyWait>
 8001842:	4603      	mov	r3, r0
 8001844:	2bff      	cmp	r3, #255	@ 0xff
 8001846:	d105      	bne.n	8001854 <SD_disk_ioctl+0x16c>
 8001848:	2300      	movs	r3, #0
 800184a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800184e:	e001      	b.n	8001854 <SD_disk_ioctl+0x16c>
            break;
 8001850:	bf00      	nop
 8001852:	e000      	b.n	8001856 <SD_disk_ioctl+0x16e>
            break;
 8001854:	bf00      	nop

        // 추가 정보들...
        }

        DESELECT();
 8001856:	f7ff fba4 	bl	8000fa2 <DESELECT>
        SPI_RxByte();
 800185a:	f7ff fbe3 	bl	8001024 <SPI_RxByte>
    }

    return res;
 800185e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001862:	4618      	mov	r0, r3
 8001864:	372c      	adds	r7, #44	@ 0x2c
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000

08001870 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <MX_GPIO_Init+0xb8>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a27      	ldr	r2, [pc, #156]	@ (8001928 <MX_GPIO_Init+0xb8>)
 800188c:	f043 0320 	orr.w	r3, r3, #32
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <MX_GPIO_Init+0xb8>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <MX_GPIO_Init+0xb8>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <MX_GPIO_Init+0xb8>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <MX_GPIO_Init+0xb8>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <MX_GPIO_Init+0xb8>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001928 <MX_GPIO_Init+0xb8>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <MX_GPIO_Init+0xb8>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2110      	movs	r1, #16
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d6:	f001 f991 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CD_GPIO_Port, SD_CD_Pin, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	2110      	movs	r1, #16
 80018de:	4813      	ldr	r0, [pc, #76]	@ (800192c <MX_GPIO_Init+0xbc>)
 80018e0:	f001 f98c 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80018e4:	2310      	movs	r3, #16
 80018e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fe:	f000 fffb 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001902:	2310      	movs	r3, #16
 8001904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800190e:	2301      	movs	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4619      	mov	r1, r3
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_GPIO_Init+0xbc>)
 800191a:	f000 ffed 	bl	80028f8 <HAL_GPIO_Init>

}
 800191e:	bf00      	nop
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	48000400 	.word	0x48000400

08001930 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8001938:	1d39      	adds	r1, r7, #4
 800193a:	2364      	movs	r3, #100	@ 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	4804      	ldr	r0, [pc, #16]	@ (8001950 <__io_putchar+0x20>)
 8001940:	f002 ff3a 	bl	80047b8 <HAL_UART_Transmit>
	return ch;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20001374 	.word	0x20001374

08001954 <SDMount>:

void SDMount(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	fres = f_mount(&fs, "",0);
 8001958:	2200      	movs	r2, #0
 800195a:	490c      	ldr	r1, [pc, #48]	@ (800198c <SDMount+0x38>)
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <SDMount+0x3c>)
 800195e:	f004 fe63 	bl	8006628 <f_mount>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <SDMount+0x40>)
 8001968:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK)
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <SDMount+0x40>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <SDMount+0x26>
	{
		printf("SD Card mounted successfully!\r\n");
 8001972:	4809      	ldr	r0, [pc, #36]	@ (8001998 <SDMount+0x44>)
 8001974:	f005 fc66 	bl	8007244 <puts>
	}
	else if(fres != FR_OK)
	{
		printf("SD Card mount error!!\r\n");
	}
}
 8001978:	e006      	b.n	8001988 <SDMount+0x34>
	else if(fres != FR_OK)
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <SDMount+0x40>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <SDMount+0x34>
		printf("SD Card mount error!!\r\n");
 8001982:	4806      	ldr	r0, [pc, #24]	@ (800199c <SDMount+0x48>)
 8001984:	f005 fc5e 	bl	8007244 <puts>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	08009140 	.word	0x08009140
 8001990:	20000210 	.word	0x20000210
 8001994:	20001248 	.word	0x20001248
 8001998:	08009144 	.word	0x08009144
 800199c:	08009164 	.word	0x08009164

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a4:	f000 fb7f 	bl	80020a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a8:	f000 f81a 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ac:	f7ff ff60 	bl	8001870 <MX_GPIO_Init>
  MX_DMA_Init();
 80019b0:	f7ff fab8 	bl	8000f24 <MX_DMA_Init>
  MX_SPI1_Init();
 80019b4:	f000 f864 	bl	8001a80 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80019b8:	f000 faa0 	bl	8001efc <MX_USART1_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80019bc:	f004 f936 	bl	8005c2c <MX_FATFS_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <main+0x2a>
    Error_Handler();
 80019c6:	f000 f854 	bl	8001a72 <Error_Handler>
  }
  /* USER CODE BEGIN 2 */

  /* Wait for SD module reset */
  	HAL_Delay(500);
 80019ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019ce:	f000 fbdb 	bl	8002188 <HAL_Delay>
  	SDMount();
 80019d2:	f7ff ffbf 	bl	8001954 <SDMount>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		 HAL_Delay(1000);
 80019d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019da:	f000 fbd5 	bl	8002188 <HAL_Delay>
 80019de:	e7fa      	b.n	80019d6 <main+0x36>

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	@ 0x50
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	2238      	movs	r2, #56	@ 0x38
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f005 fd08 	bl	8007404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f001 f912 	bl	8002c2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a10:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a12:	2302      	movs	r3, #2
 8001a14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a16:	2303      	movs	r3, #3
 8001a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001a1e:	2328      	movs	r3, #40	@ 0x28
 8001a20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a26:	2302      	movs	r3, #2
 8001a28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2e:	f107 0318 	add.w	r3, r7, #24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 f9ae 	bl	8002d94 <HAL_RCC_OscConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a3e:	f000 f818 	bl	8001a72 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a42:	230f      	movs	r3, #15
 8001a44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a46:	2303      	movs	r3, #3
 8001a48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fcac 	bl	80033b8 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a66:	f000 f804 	bl	8001a72 <Error_Handler>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3750      	adds	r7, #80	@ 0x50
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a76:	b672      	cpsid	i
}
 8001a78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a7a:	bf00      	nop
 8001a7c:	e7fd      	b.n	8001a7a <Error_Handler+0x8>
	...

08001a80 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001a86:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <MX_SPI1_Init+0x78>)
 8001a88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001a8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001a9a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001ace:	2207      	movs	r2, #7
 8001ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001ada:	2208      	movs	r2, #8
 8001adc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_SPI1_Init+0x74>)
 8001ae0:	f002 f876 	bl	8003bd0 <HAL_SPI_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aea:	f7ff ffc2 	bl	8001a72 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000124c 	.word	0x2000124c
 8001af8:	40013000 	.word	0x40013000

08001afc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a40      	ldr	r2, [pc, #256]	@ (8001c1c <HAL_SPI_MspInit+0x120>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d17a      	bne.n	8001c14 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b1e:	4b40      	ldr	r3, [pc, #256]	@ (8001c20 <HAL_SPI_MspInit+0x124>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b22:	4a3f      	ldr	r2, [pc, #252]	@ (8001c20 <HAL_SPI_MspInit+0x124>)
 8001b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_SPI_MspInit+0x124>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <HAL_SPI_MspInit+0x124>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	4a39      	ldr	r2, [pc, #228]	@ (8001c20 <HAL_SPI_MspInit+0x124>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <HAL_SPI_MspInit+0x124>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_CLK_Pin|SPI1_MISO_SD_DAT0_Pin|SPI1_MOSI_SD_CMD_Pin;
 8001b4e:	23e0      	movs	r3, #224	@ 0xe0
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6c:	f000 fec4 	bl	80028f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8001b70:	4b2c      	ldr	r3, [pc, #176]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001b72:	4a2d      	ldr	r2, [pc, #180]	@ (8001c28 <HAL_SPI_MspInit+0x12c>)
 8001b74:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001b76:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001b78:	220a      	movs	r2, #10
 8001b7a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7c:	4b29      	ldr	r3, [pc, #164]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b82:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b88:	4b26      	ldr	r3, [pc, #152]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001b8a:	2280      	movs	r2, #128	@ 0x80
 8001b8c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8e:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b94:	4b23      	ldr	r3, [pc, #140]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001b9a:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba0:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001ba6:	481f      	ldr	r0, [pc, #124]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001ba8:	f000 fc2c 	bl	8002404 <HAL_DMA_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8001bb2:	f7ff ff5e 	bl	8001a72 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001bba:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_SPI_MspInit+0x128>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_SPI_MspInit+0x134>)
 8001bc6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001bca:	220b      	movs	r2, #11
 8001bcc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bce:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001bee:	2220      	movs	r2, #32
 8001bf0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bf8:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001bfa:	f000 fc03 	bl	8002404 <HAL_DMA_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8001c04:	f7ff ff35 	bl	8001a72 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a08      	ldr	r2, [pc, #32]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c0e:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <HAL_SPI_MspInit+0x130>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	@ 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40013000 	.word	0x40013000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	200012b0 	.word	0x200012b0
 8001c28:	40020008 	.word	0x40020008
 8001c2c:	20001310 	.word	0x20001310
 8001c30:	4002001c 	.word	0x4002001c

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c6a:	f001 f883 	bl	8002d74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <NMI_Handler+0x4>

08001c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <MemManage_Handler+0x4>

08001c94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <SysTick_Handler+0x38>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <SysTick_Handler+0x18>
		Timer1--;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <SysTick_Handler+0x38>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <SysTick_Handler+0x38>)
 8001ce6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <SysTick_Handler+0x3c>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <SysTick_Handler+0x2c>
		Timer2--;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <SysTick_Handler+0x3c>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <SysTick_Handler+0x3c>)
 8001cfa:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfc:	f000 fa26 	bl	800214c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001d00:	f000 fb73 	bl	80023ea <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000208 	.word	0x20000208
 8001d0c:	2000020a 	.word	0x2000020a

08001d10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <DMA1_Channel1_IRQHandler+0x10>)
 8001d16:	f000 fcdd 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200012b0 	.word	0x200012b0

08001d24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA1_Channel2_IRQHandler+0x10>)
 8001d2a:	f000 fcd3 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20001310 	.word	0x20001310

08001d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <USART1_IRQHandler+0x10>)
 8001d3e:	f002 fdc9 	bl	80048d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20001374 	.word	0x20001374

08001d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_kill>:

int _kill(int pid, int sig)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d66:	f005 fb9f 	bl	80074a8 <__errno>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2216      	movs	r2, #22
 8001d6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_exit>:

void _exit (int status)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffe7 	bl	8001d5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d8e:	bf00      	nop
 8001d90:	e7fd      	b.n	8001d8e <_exit+0x12>

08001d92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e00a      	b.n	8001dba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da4:	f3af 8000 	nop.w
 8001da8:	4601      	mov	r1, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	60ba      	str	r2, [r7, #8]
 8001db0:	b2ca      	uxtb	r2, r1
 8001db2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbf0      	blt.n	8001da4 <_read+0x12>
  }

  return len;
 8001dc2:	687b      	ldr	r3, [r7, #4]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e009      	b.n	8001df2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	60ba      	str	r2, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fda2 	bl	8001930 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbf1      	blt.n	8001dde <_write+0x12>
  }
  return len;
 8001dfa:	687b      	ldr	r3, [r7, #4]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_close>:

int _close(int file)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_isatty>:

int _isatty(int file)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f005 fb04 	bl	80074a8 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20008000 	.word	0x20008000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	20001370 	.word	0x20001370
 8001ed4:	20001798 	.word	0x20001798

08001ed8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f00:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f02:	4a23      	ldr	r2, [pc, #140]	@ (8001f90 <MX_USART1_UART_Init+0x94>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f06:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f44:	4811      	ldr	r0, [pc, #68]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f46:	f002 fbe7 	bl	8004718 <HAL_UART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f50:	f7ff fd8f 	bl	8001a72 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f54:	2100      	movs	r1, #0
 8001f56:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f58:	f003 fd9d 	bl	8005a96 <HAL_UARTEx_SetTxFifoThreshold>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f62:	f7ff fd86 	bl	8001a72 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f66:	2100      	movs	r1, #0
 8001f68:	4808      	ldr	r0, [pc, #32]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f6a:	f003 fdd2 	bl	8005b12 <HAL_UARTEx_SetRxFifoThreshold>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f74:	f7ff fd7d 	bl	8001a72 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f7a:	f003 fd53 	bl	8005a24 <HAL_UARTEx_DisableFifoMode>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f84:	f7ff fd75 	bl	8001a72 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20001374 	.word	0x20001374
 8001f90:	40013800 	.word	0x40013800

08001f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b09a      	sub	sp, #104	@ 0x68
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	2244      	movs	r2, #68	@ 0x44
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f005 fa25 	bl	8007404 <memset>
  if(uartHandle->Instance==USART1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <HAL_UART_MspInit+0xb4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d13d      	bne.n	8002040 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 fc0d 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fdc:	f7ff fd49 	bl	8001a72 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <HAL_UART_MspInit+0xb8>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_UART_MspInit+0xb8>)
 8001fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_UART_MspInit+0xb8>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <HAL_UART_MspInit+0xb8>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffc:	4a13      	ldr	r2, [pc, #76]	@ (800204c <HAL_UART_MspInit+0xb8>)
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_UART_MspInit+0xb8>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002010:	23c0      	movs	r3, #192	@ 0xc0
 8002012:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002020:	2307      	movs	r3, #7
 8002022:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002028:	4619      	mov	r1, r3
 800202a:	4809      	ldr	r0, [pc, #36]	@ (8002050 <HAL_UART_MspInit+0xbc>)
 800202c:	f000 fc64 	bl	80028f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	2025      	movs	r0, #37	@ 0x25
 8002036:	f000 f9a4 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800203a:	2025      	movs	r0, #37	@ 0x25
 800203c:	f000 f9bb 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002040:	bf00      	nop
 8002042:	3768      	adds	r7, #104	@ 0x68
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40013800 	.word	0x40013800
 800204c:	40021000 	.word	0x40021000
 8002050:	48000400 	.word	0x48000400

08002054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002054:	480d      	ldr	r0, [pc, #52]	@ (800208c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002056:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002058:	f7ff ff3e 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800205c:	480c      	ldr	r0, [pc, #48]	@ (8002090 <LoopForever+0x6>)
  ldr r1, =_edata
 800205e:	490d      	ldr	r1, [pc, #52]	@ (8002094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <LoopForever+0xe>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002064:	e002      	b.n	800206c <LoopCopyDataInit>

08002066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206a:	3304      	adds	r3, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002070:	d3f9      	bcc.n	8002066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002074:	4c0a      	ldr	r4, [pc, #40]	@ (80020a0 <LoopForever+0x16>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002078:	e001      	b.n	800207e <LoopFillZerobss>

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800207c:	3204      	adds	r2, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002082:	f005 fa17 	bl	80074b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002086:	f7ff fc8b 	bl	80019a0 <main>

0800208a <LoopForever>:

LoopForever:
    b LoopForever
 800208a:	e7fe      	b.n	800208a <LoopForever>
  ldr   r0, =_estack
 800208c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002098:	08009544 	.word	0x08009544
  ldr r2, =_sbss
 800209c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80020a0:	20001794 	.word	0x20001794

080020a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC1_2_IRQHandler>

080020a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 f95b 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b6:	200f      	movs	r0, #15
 80020b8:	f000 f80e 	bl	80020d8 <HAL_InitTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	71fb      	strb	r3, [r7, #7]
 80020c6:	e001      	b.n	80020cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020c8:	f7ff fdb4 	bl	8001c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020cc:	79fb      	ldrb	r3, [r7, #7]

}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020e4:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <HAL_InitTick+0x68>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d022      	beq.n	8002132 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_InitTick+0x6c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_InitTick+0x68>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f966 	bl	80023d2 <HAL_SYSTICK_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10f      	bne.n	800212c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	d809      	bhi.n	8002126 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002112:	2200      	movs	r2, #0
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	f04f 30ff 	mov.w	r0, #4294967295
 800211a:	f000 f932 	bl	8002382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <HAL_InitTick+0x70>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e007      	b.n	8002136 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e004      	b.n	8002136 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e001      	b.n	8002136 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000000c 	.word	0x2000000c
 8002144:	20000004 	.word	0x20000004
 8002148:	20000008 	.word	0x20000008

0800214c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_IncTick+0x1c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_IncTick+0x20>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4413      	add	r3, r2
 800215a:	4a03      	ldr	r2, [pc, #12]	@ (8002168 <HAL_IncTick+0x1c>)
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20001408 	.word	0x20001408
 800216c:	2000000c 	.word	0x2000000c

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20001408 	.word	0x20001408

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d004      	beq.n	80021ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a2:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <HAL_Delay+0x40>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4413      	add	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ac:	bf00      	nop
 80021ae:	f7ff ffdf 	bl	8002170 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d8f7      	bhi.n	80021ae <HAL_Delay+0x26>
  {
  }
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000000c 	.word	0x2000000c

080021cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fe:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	60d3      	str	r3, [r2, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002218:	4b04      	ldr	r3, [pc, #16]	@ (800222c <__NVIC_GetPriorityGrouping+0x18>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 0307 	and.w	r3, r3, #7
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	@ (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	@ (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff29 	bl	80021cc <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff40 	bl	8002214 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff90 	bl	80022c0 <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5f 	bl	800226c <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff33 	bl	8002230 <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa4 	bl	8002328 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80023ee:	f000 f802 	bl	80023f6 <HAL_SYSTICK_Callback>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e08d      	b.n	8002532 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_DMA_Init+0x138>)
 800241e:	429a      	cmp	r2, r3
 8002420:	d80f      	bhi.n	8002442 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	4b45      	ldr	r3, [pc, #276]	@ (8002540 <HAL_DMA_Init+0x13c>)
 800242a:	4413      	add	r3, r2
 800242c:	4a45      	ldr	r2, [pc, #276]	@ (8002544 <HAL_DMA_Init+0x140>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	009a      	lsls	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a42      	ldr	r2, [pc, #264]	@ (8002548 <HAL_DMA_Init+0x144>)
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002440:	e00e      	b.n	8002460 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4b40      	ldr	r3, [pc, #256]	@ (800254c <HAL_DMA_Init+0x148>)
 800244a:	4413      	add	r3, r2
 800244c:	4a3d      	ldr	r2, [pc, #244]	@ (8002544 <HAL_DMA_Init+0x140>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	009a      	lsls	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a3c      	ldr	r2, [pc, #240]	@ (8002550 <HAL_DMA_Init+0x14c>)
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800247a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f9be 	bl	8002834 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024c0:	d102      	bne.n	80024c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_DMA_Init+0x104>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d80c      	bhi.n	8002508 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f9de 	bl	80028b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	e008      	b.n	800251a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40020407 	.word	0x40020407
 8002540:	bffdfff8 	.word	0xbffdfff8
 8002544:	cccccccd 	.word	0xcccccccd
 8002548:	40020000 	.word	0x40020000
 800254c:	bffdfbf8 	.word	0xbffdfbf8
 8002550:	40020400 	.word	0x40020400

08002554 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d005      	beq.n	8002578 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2204      	movs	r2, #4
 8002570:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e037      	b.n	80025e8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 020e 	bic.w	r2, r2, #14
 8002586:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002592:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002596:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025c4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025dc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025e6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d00d      	beq.n	800263a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2204      	movs	r2, #4
 8002622:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e047      	b.n	80026ca <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 020e 	bic.w	r2, r2, #14
 8002648:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002686:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00c      	beq.n	80026aa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800269e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
    }
  }
  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2204      	movs	r2, #4
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d026      	beq.n	800274e <HAL_DMA_IRQHandler+0x7a>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d021      	beq.n	800274e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	2104      	movs	r1, #4
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	2b00      	cmp	r3, #0
 8002742:	d071      	beq.n	8002828 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800274c:	e06c      	b.n	8002828 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2202      	movs	r2, #2
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d02e      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d029      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10b      	bne.n	8002792 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 020a 	bic.w	r2, r2, #10
 8002788:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	f003 021f 	and.w	r2, r3, #31
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	2102      	movs	r1, #2
 80027a0:	fa01 f202 	lsl.w	r2, r1, r2
 80027a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d038      	beq.n	8002828 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80027be:	e033      	b.n	8002828 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2208      	movs	r2, #8
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02a      	beq.n	800282a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d025      	beq.n	800282a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 020e 	bic.w	r2, r2, #14
 80027ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f003 021f 	and.w	r2, r3, #31
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281c:	2b00      	cmp	r3, #0
 800281e:	d004      	beq.n	800282a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002828:	bf00      	nop
 800282a:	bf00      	nop
}
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	4b16      	ldr	r3, [pc, #88]	@ (800289c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002844:	429a      	cmp	r2, r3
 8002846:	d802      	bhi.n	800284e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002848:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	e001      	b.n	8002852 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800284e:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002850:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3b08      	subs	r3, #8
 800285e:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	009a      	lsls	r2, r3, #2
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	461a      	mov	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a0b      	ldr	r2, [pc, #44]	@ (80028ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800287e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2201      	movs	r2, #1
 8002888:	409a      	lsls	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40020407 	.word	0x40020407
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020820 	.word	0x40020820
 80028a8:	cccccccd 	.word	0xcccccccd
 80028ac:	40020880 	.word	0x40020880

080028b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	461a      	mov	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a08      	ldr	r2, [pc, #32]	@ (80028f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80028d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2201      	movs	r2, #1
 80028de:	409a      	lsls	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	1000823f 	.word	0x1000823f
 80028f4:	40020940 	.word	0x40020940

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002906:	e15a      	b.n	8002bbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 814c 	beq.w	8002bb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d005      	beq.n	8002938 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002934:	2b02      	cmp	r3, #2
 8002936:	d130      	bne.n	800299a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800296e:	2201      	movs	r2, #1
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0201 	and.w	r2, r3, #1
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d017      	beq.n	80029d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d123      	bne.n	8002a2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	08da      	lsrs	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	220f      	movs	r2, #15
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	08da      	lsrs	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3208      	adds	r2, #8
 8002a24:	6939      	ldr	r1, [r7, #16]
 8002a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	2203      	movs	r2, #3
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0203 	and.w	r2, r3, #3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80a6 	beq.w	8002bb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bdc <HAL_GPIO_Init+0x2e4>)
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a70:	4a5a      	ldr	r2, [pc, #360]	@ (8002bdc <HAL_GPIO_Init+0x2e4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a78:	4b58      	ldr	r3, [pc, #352]	@ (8002bdc <HAL_GPIO_Init+0x2e4>)
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a84:	4a56      	ldr	r2, [pc, #344]	@ (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002aae:	d01f      	beq.n	8002af0 <HAL_GPIO_Init+0x1f8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a4c      	ldr	r2, [pc, #304]	@ (8002be4 <HAL_GPIO_Init+0x2ec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d019      	beq.n	8002aec <HAL_GPIO_Init+0x1f4>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a4b      	ldr	r2, [pc, #300]	@ (8002be8 <HAL_GPIO_Init+0x2f0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d013      	beq.n	8002ae8 <HAL_GPIO_Init+0x1f0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8002bec <HAL_GPIO_Init+0x2f4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_GPIO_Init+0x1ec>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a49      	ldr	r2, [pc, #292]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <HAL_GPIO_Init+0x1e8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a48      	ldr	r2, [pc, #288]	@ (8002bf4 <HAL_GPIO_Init+0x2fc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <HAL_GPIO_Init+0x1e4>
 8002ad8:	2305      	movs	r3, #5
 8002ada:	e00a      	b.n	8002af2 <HAL_GPIO_Init+0x1fa>
 8002adc:	2306      	movs	r3, #6
 8002ade:	e008      	b.n	8002af2 <HAL_GPIO_Init+0x1fa>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	e006      	b.n	8002af2 <HAL_GPIO_Init+0x1fa>
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e004      	b.n	8002af2 <HAL_GPIO_Init+0x1fa>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e002      	b.n	8002af2 <HAL_GPIO_Init+0x1fa>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_GPIO_Init+0x1fa>
 8002af0:	2300      	movs	r3, #0
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	f002 0203 	and.w	r2, r2, #3
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	4093      	lsls	r3, r2
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b02:	4937      	ldr	r1, [pc, #220]	@ (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b10:	4b39      	ldr	r3, [pc, #228]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b34:	4a30      	ldr	r2, [pc, #192]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b5e:	4a26      	ldr	r2, [pc, #152]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b64:	4b24      	ldr	r3, [pc, #144]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b88:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bb2:	4a11      	ldr	r2, [pc, #68]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f ae9d 	bne.w	8002908 <HAL_GPIO_Init+0x10>
  }
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40010000 	.word	0x40010000
 8002be4:	48000400 	.word	0x48000400
 8002be8:	48000800 	.word	0x48000800
 8002bec:	48000c00 	.word	0x48000c00
 8002bf0:	48001000 	.word	0x48001000
 8002bf4:	48001400 	.word	0x48001400
 8002bf8:	40010400 	.word	0x40010400

08002bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c0c:	787b      	ldrb	r3, [r7, #1]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d141      	bne.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c46:	d131      	bne.n	8002cac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c48:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c4e:	4a46      	ldr	r2, [pc, #280]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c58:	4b43      	ldr	r3, [pc, #268]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c60:	4a41      	ldr	r2, [pc, #260]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c68:	4b40      	ldr	r3, [pc, #256]	@ (8002d6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2232      	movs	r2, #50	@ 0x32
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	4a3f      	ldr	r2, [pc, #252]	@ (8002d70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	0c9b      	lsrs	r3, r3, #18
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7e:	e002      	b.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c86:	4b38      	ldr	r3, [pc, #224]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c92:	d102      	bne.n	8002c9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f2      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c9a:	4b33      	ldr	r3, [pc, #204]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca6:	d158      	bne.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e057      	b.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cac:	4b2e      	ldr	r3, [pc, #184]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cbc:	e04d      	b.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cc4:	d141      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc6:	4b28      	ldr	r3, [pc, #160]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd2:	d131      	bne.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd4:	4b24      	ldr	r3, [pc, #144]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cda:	4a23      	ldr	r2, [pc, #140]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce4:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cec:	4a1e      	ldr	r2, [pc, #120]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2232      	movs	r2, #50	@ 0x32
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0c9b      	lsrs	r3, r3, #18
 8002d06:	3301      	adds	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0a:	e002      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d12:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1e:	d102      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f2      	bne.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d32:	d112      	bne.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e011      	b.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d48:	e007      	b.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d4a:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d52:	4a05      	ldr	r2, [pc, #20]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	20000004 	.word	0x20000004
 8002d70:	431bde83 	.word	0x431bde83

08002d74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d82:	6093      	str	r3, [r2, #8]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40007000 	.word	0x40007000

08002d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e2fe      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d075      	beq.n	8002e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4b97      	ldr	r3, [pc, #604]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4b94      	ldr	r3, [pc, #592]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	d102      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3e>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x44>
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d10b      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d05b      	beq.n	8002e9c <HAL_RCC_OscConfig+0x108>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d157      	bne.n	8002e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e2d9      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df8:	d106      	bne.n	8002e08 <HAL_RCC_OscConfig+0x74>
 8002dfa:	4b85      	ldr	r3, [pc, #532]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a84      	ldr	r2, [pc, #528]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e01d      	b.n	8002e44 <HAL_RCC_OscConfig+0xb0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x98>
 8002e12:	4b7f      	ldr	r3, [pc, #508]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a7e      	ldr	r2, [pc, #504]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7b      	ldr	r2, [pc, #492]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	4b78      	ldr	r3, [pc, #480]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a77      	ldr	r2, [pc, #476]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b75      	ldr	r3, [pc, #468]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a74      	ldr	r2, [pc, #464]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f990 	bl	8002170 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e54:	f7ff f98c 	bl	8002170 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	@ 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e29e      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e66:	4b6a      	ldr	r3, [pc, #424]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0xc0>
 8002e72:	e014      	b.n	8002e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff f97c 	bl	8002170 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7ff f978 	bl	8002170 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	@ 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e28a      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8e:	4b60      	ldr	r3, [pc, #384]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0xe8>
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d075      	beq.n	8002f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eaa:	4b59      	ldr	r3, [pc, #356]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb4:	4b56      	ldr	r3, [pc, #344]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d102      	bne.n	8002eca <HAL_RCC_OscConfig+0x136>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d002      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x13c>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d11f      	bne.n	8002f10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x154>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e25d      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	4b49      	ldr	r3, [pc, #292]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	4946      	ldr	r1, [pc, #280]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002efc:	4b45      	ldr	r3, [pc, #276]	@ (8003014 <HAL_RCC_OscConfig+0x280>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff f8e9 	bl	80020d8 <HAL_InitTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d043      	beq.n	8002f94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e249      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d023      	beq.n	8002f60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f18:	4b3d      	ldr	r3, [pc, #244]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7ff f924 	bl	8002170 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7ff f920 	bl	8002170 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e232      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3e:	4b34      	ldr	r3, [pc, #208]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	492d      	ldr	r1, [pc, #180]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
 8002f5e:	e01a      	b.n	8002f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f60:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2a      	ldr	r2, [pc, #168]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7ff f900 	bl	8002170 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f74:	f7ff f8fc 	bl	8002170 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e20e      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f86:	4b22      	ldr	r3, [pc, #136]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x1e0>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d041      	beq.n	8003026 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002faa:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fb0:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7ff f8d9 	bl	8002170 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7ff f8d5 	bl	8002170 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1e7      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ef      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x22e>
 8002fe2:	e020      	b.n	8003026 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fea:	4a09      	ldr	r2, [pc, #36]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7ff f8bc 	bl	8002170 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ffa:	e00d      	b.n	8003018 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffc:	f7ff f8b8 	bl	8002170 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d906      	bls.n	8003018 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1ca      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003018:	4b8c      	ldr	r3, [pc, #560]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ea      	bne.n	8002ffc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80a6 	beq.w	8003180 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003034:	2300      	movs	r3, #0
 8003036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003038:	4b84      	ldr	r3, [pc, #528]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x2b4>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x2b6>
 8003048:	2300      	movs	r3, #0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	4b7f      	ldr	r3, [pc, #508]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	4a7e      	ldr	r2, [pc, #504]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003058:	6593      	str	r3, [r2, #88]	@ 0x58
 800305a:	4b7c      	ldr	r3, [pc, #496]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003066:	2301      	movs	r3, #1
 8003068:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800306a:	4b79      	ldr	r3, [pc, #484]	@ (8003250 <HAL_RCC_OscConfig+0x4bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d118      	bne.n	80030a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003076:	4b76      	ldr	r3, [pc, #472]	@ (8003250 <HAL_RCC_OscConfig+0x4bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a75      	ldr	r2, [pc, #468]	@ (8003250 <HAL_RCC_OscConfig+0x4bc>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003082:	f7ff f875 	bl	8002170 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308a:	f7ff f871 	bl	8002170 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e183      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309c:	4b6c      	ldr	r3, [pc, #432]	@ (8003250 <HAL_RCC_OscConfig+0x4bc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d108      	bne.n	80030c2 <HAL_RCC_OscConfig+0x32e>
 80030b0:	4b66      	ldr	r3, [pc, #408]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b6:	4a65      	ldr	r2, [pc, #404]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030c0:	e024      	b.n	800310c <HAL_RCC_OscConfig+0x378>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d110      	bne.n	80030ec <HAL_RCC_OscConfig+0x358>
 80030ca:	4b60      	ldr	r3, [pc, #384]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d0:	4a5e      	ldr	r2, [pc, #376]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030da:	4b5c      	ldr	r3, [pc, #368]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	4a5a      	ldr	r2, [pc, #360]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030ea:	e00f      	b.n	800310c <HAL_RCC_OscConfig+0x378>
 80030ec:	4b57      	ldr	r3, [pc, #348]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f2:	4a56      	ldr	r2, [pc, #344]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030fc:	4b53      	ldr	r3, [pc, #332]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	4a52      	ldr	r2, [pc, #328]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d016      	beq.n	8003142 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7ff f82c 	bl	8002170 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7ff f828 	bl	8002170 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e138      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003132:	4b46      	ldr	r3, [pc, #280]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ed      	beq.n	800311c <HAL_RCC_OscConfig+0x388>
 8003140:	e015      	b.n	800316e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7ff f815 	bl	8002170 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7ff f811 	bl	8002170 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e121      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003160:	4b3a      	ldr	r3, [pc, #232]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1ed      	bne.n	800314a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800316e:	7ffb      	ldrb	r3, [r7, #31]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b35      	ldr	r3, [pc, #212]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003178:	4a34      	ldr	r2, [pc, #208]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 800317a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800317e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d03c      	beq.n	8003206 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01c      	beq.n	80031ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003194:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800319a:	4a2c      	ldr	r2, [pc, #176]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe ffe4 	bl	8002170 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ac:	f7fe ffe0 	bl	8002170 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e0f2      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031be:	4b23      	ldr	r3, [pc, #140]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ef      	beq.n	80031ac <HAL_RCC_OscConfig+0x418>
 80031cc:	e01b      	b.n	8003206 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031ce:	4b1f      	ldr	r3, [pc, #124]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80031d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d4:	4a1d      	ldr	r2, [pc, #116]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7fe ffc7 	bl	8002170 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e6:	f7fe ffc3 	bl	8002170 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0d5      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031f8:	4b14      	ldr	r3, [pc, #80]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ef      	bne.n	80031e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80c9 	beq.w	80033a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003210:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b0c      	cmp	r3, #12
 800321a:	f000 8083 	beq.w	8003324 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d15e      	bne.n	80032e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a08      	ldr	r2, [pc, #32]	@ (800324c <HAL_RCC_OscConfig+0x4b8>)
 800322c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe ff9d 	bl	8002170 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003238:	e00c      	b.n	8003254 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe ff99 	bl	8002170 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d905      	bls.n	8003254 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0ab      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003254:	4b55      	ldr	r3, [pc, #340]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ec      	bne.n	800323a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003260:	4b52      	ldr	r3, [pc, #328]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4b52      	ldr	r3, [pc, #328]	@ (80033b0 <HAL_RCC_OscConfig+0x61c>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6a11      	ldr	r1, [r2, #32]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003270:	3a01      	subs	r2, #1
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800327a:	0212      	lsls	r2, r2, #8
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003282:	0852      	lsrs	r2, r2, #1
 8003284:	3a01      	subs	r2, #1
 8003286:	0552      	lsls	r2, r2, #21
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800328e:	0852      	lsrs	r2, r2, #1
 8003290:	3a01      	subs	r2, #1
 8003292:	0652      	lsls	r2, r2, #25
 8003294:	4311      	orrs	r1, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800329a:	06d2      	lsls	r2, r2, #27
 800329c:	430a      	orrs	r2, r1
 800329e:	4943      	ldr	r1, [pc, #268]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a4:	4b41      	ldr	r3, [pc, #260]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a40      	ldr	r2, [pc, #256]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b0:	4b3e      	ldr	r3, [pc, #248]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a3d      	ldr	r2, [pc, #244]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe ff58 	bl	8002170 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe ff54 	bl	8002170 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e066      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	4b35      	ldr	r3, [pc, #212]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x530>
 80032e2:	e05e      	b.n	80033a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e4:	4b31      	ldr	r3, [pc, #196]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a30      	ldr	r2, [pc, #192]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 80032ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe ff3e 	bl	8002170 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe ff3a 	bl	8002170 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e04c      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330a:	4b28      	ldr	r3, [pc, #160]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003316:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4924      	ldr	r1, [pc, #144]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 800331c:	4b25      	ldr	r3, [pc, #148]	@ (80033b4 <HAL_RCC_OscConfig+0x620>)
 800331e:	4013      	ands	r3, r2
 8003320:	60cb      	str	r3, [r1, #12]
 8003322:	e03e      	b.n	80033a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e039      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003330:	4b1e      	ldr	r3, [pc, #120]	@ (80033ac <HAL_RCC_OscConfig+0x618>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0203 	and.w	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	429a      	cmp	r2, r3
 8003342:	d12c      	bne.n	800339e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	3b01      	subs	r3, #1
 8003350:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d123      	bne.n	800339e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d11b      	bne.n	800339e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d113      	bne.n	800339e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d109      	bne.n	800339e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	3b01      	subs	r3, #1
 8003398:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000
 80033b0:	019f800c 	.word	0x019f800c
 80033b4:	feeefffc 	.word	0xfeeefffc

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e11e      	b.n	800360e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b91      	ldr	r3, [pc, #580]	@ (8003618 <HAL_RCC_ClockConfig+0x260>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b8e      	ldr	r3, [pc, #568]	@ (8003618 <HAL_RCC_ClockConfig+0x260>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	498c      	ldr	r1, [pc, #560]	@ (8003618 <HAL_RCC_ClockConfig+0x260>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003618 <HAL_RCC_ClockConfig+0x260>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e106      	b.n	800360e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d073      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d129      	bne.n	8003468 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003414:	4b81      	ldr	r3, [pc, #516]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0f4      	b.n	800360e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003424:	f000 f99e 	bl	8003764 <RCC_GetSysClockFreqFromPLLSource>
 8003428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4a7c      	ldr	r2, [pc, #496]	@ (8003620 <HAL_RCC_ClockConfig+0x268>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d93f      	bls.n	80034b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003432:	4b7a      	ldr	r3, [pc, #488]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003446:	2b00      	cmp	r3, #0
 8003448:	d033      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	d12f      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003452:	4b72      	ldr	r3, [pc, #456]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800345a:	4a70      	ldr	r2, [pc, #448]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 800345c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	e024      	b.n	80034b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d107      	bne.n	8003480 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003470:	4b6a      	ldr	r3, [pc, #424]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0c6      	b.n	800360e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003480:	4b66      	ldr	r3, [pc, #408]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0be      	b.n	800360e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003490:	f000 f8ce 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8003494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4a61      	ldr	r2, [pc, #388]	@ (8003620 <HAL_RCC_ClockConfig+0x268>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d909      	bls.n	80034b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800349e:	4b5f      	ldr	r3, [pc, #380]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034a6:	4a5d      	ldr	r2, [pc, #372]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80034a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034ae:	2380      	movs	r3, #128	@ 0x80
 80034b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b5a      	ldr	r3, [pc, #360]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4957      	ldr	r1, [pc, #348]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c4:	f7fe fe54 	bl	8002170 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fe fe50 	bl	8002170 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e095      	b.n	800360e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b4e      	ldr	r3, [pc, #312]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d023      	beq.n	8003548 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b43      	ldr	r3, [pc, #268]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a42      	ldr	r2, [pc, #264]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003516:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003524:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800352c:	4a3b      	ldr	r2, [pc, #236]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 800352e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003534:	4b39      	ldr	r3, [pc, #228]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4936      	ldr	r1, [pc, #216]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
 8003546:	e008      	b.n	800355a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2b80      	cmp	r3, #128	@ 0x80
 800354c:	d105      	bne.n	800355a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800354e:	4b33      	ldr	r3, [pc, #204]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	4a32      	ldr	r2, [pc, #200]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 8003554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003558:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800355a:	4b2f      	ldr	r3, [pc, #188]	@ (8003618 <HAL_RCC_ClockConfig+0x260>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d21d      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003568:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <HAL_RCC_ClockConfig+0x260>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 020f 	bic.w	r2, r3, #15
 8003570:	4929      	ldr	r1, [pc, #164]	@ (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003578:	f7fe fdfa 	bl	8002170 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe fdf6 	bl	8002170 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e03b      	b.n	800360e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1ed      	bne.n	8003580 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4917      	ldr	r1, [pc, #92]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ce:	4b13      	ldr	r3, [pc, #76]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490f      	ldr	r1, [pc, #60]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e2:	f000 f825 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <HAL_RCC_ClockConfig+0x264>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490c      	ldr	r1, [pc, #48]	@ (8003624 <HAL_RCC_ClockConfig+0x26c>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	fa22 f303 	lsr.w	r3, r2, r3
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <HAL_RCC_ClockConfig+0x270>)
 8003600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003602:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <HAL_RCC_ClockConfig+0x274>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fd66 	bl	80020d8 <HAL_InitTick>
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40022000 	.word	0x40022000
 800361c:	40021000 	.word	0x40021000
 8003620:	04c4b400 	.word	0x04c4b400
 8003624:	0800917c 	.word	0x0800917c
 8003628:	20000004 	.word	0x20000004
 800362c:	20000008 	.word	0x20000008

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003636:	4b2c      	ldr	r3, [pc, #176]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b04      	cmp	r3, #4
 8003640:	d102      	bne.n	8003648 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003642:	4b2a      	ldr	r3, [pc, #168]	@ (80036ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	e047      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003648:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	d102      	bne.n	800365a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003654:	4b26      	ldr	r3, [pc, #152]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	e03e      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800365a:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d136      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003666:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	3301      	adds	r3, #1
 800367c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d10c      	bne.n	800369e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003684:	4a1a      	ldr	r2, [pc, #104]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	4a16      	ldr	r2, [pc, #88]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800368e:	68d2      	ldr	r2, [r2, #12]
 8003690:	0a12      	lsrs	r2, r2, #8
 8003692:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	617b      	str	r3, [r7, #20]
      break;
 800369c:	e00c      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800369e:	4a13      	ldr	r2, [pc, #76]	@ (80036ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	4a10      	ldr	r2, [pc, #64]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a8:	68d2      	ldr	r2, [r2, #12]
 80036aa:	0a12      	lsrs	r2, r2, #8
 80036ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
      break;
 80036b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	0e5b      	lsrs	r3, r3, #25
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	3301      	adds	r3, #1
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	e001      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036d8:	693b      	ldr	r3, [r7, #16]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	00f42400 	.word	0x00f42400
 80036f0:	007a1200 	.word	0x007a1200

080036f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f8:	4b03      	ldr	r3, [pc, #12]	@ (8003708 <HAL_RCC_GetHCLKFreq+0x14>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000004 	.word	0x20000004

0800370c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003710:	f7ff fff0 	bl	80036f4 <HAL_RCC_GetHCLKFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4904      	ldr	r1, [pc, #16]	@ (8003734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40021000 	.word	0x40021000
 8003734:	0800918c 	.word	0x0800918c

08003738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800373c:	f7ff ffda 	bl	80036f4 <HAL_RCC_GetHCLKFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	0adb      	lsrs	r3, r3, #11
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4904      	ldr	r1, [pc, #16]	@ (8003760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	0800918c 	.word	0x0800918c

08003764 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800376a:	4b1e      	ldr	r3, [pc, #120]	@ (80037e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003774:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d10c      	bne.n	80037a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003788:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	4a14      	ldr	r2, [pc, #80]	@ (80037e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003792:	68d2      	ldr	r2, [r2, #12]
 8003794:	0a12      	lsrs	r2, r2, #8
 8003796:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	617b      	str	r3, [r7, #20]
    break;
 80037a0:	e00c      	b.n	80037bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037a2:	4a12      	ldr	r2, [pc, #72]	@ (80037ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	4a0e      	ldr	r2, [pc, #56]	@ (80037e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ac:	68d2      	ldr	r2, [r2, #12]
 80037ae:	0a12      	lsrs	r2, r2, #8
 80037b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]
    break;
 80037ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037bc:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0e5b      	lsrs	r3, r3, #25
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	3301      	adds	r3, #1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037d6:	687b      	ldr	r3, [r7, #4]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40021000 	.word	0x40021000
 80037e8:	007a1200 	.word	0x007a1200
 80037ec:	00f42400 	.word	0x00f42400

080037f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037f8:	2300      	movs	r3, #0
 80037fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037fc:	2300      	movs	r3, #0
 80037fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8098 	beq.w	800393e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b43      	ldr	r3, [pc, #268]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4b40      	ldr	r3, [pc, #256]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003822:	4a3f      	ldr	r2, [pc, #252]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003828:	6593      	str	r3, [r2, #88]	@ 0x58
 800382a:	4b3d      	ldr	r3, [pc, #244]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003836:	2301      	movs	r3, #1
 8003838:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800383a:	4b3a      	ldr	r3, [pc, #232]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a39      	ldr	r2, [pc, #228]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003844:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003846:	f7fe fc93 	bl	8002170 <HAL_GetTick>
 800384a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384c:	e009      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe fc8f 	bl	8002170 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d902      	bls.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	74fb      	strb	r3, [r7, #19]
        break;
 8003860:	e005      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003862:	4b30      	ldr	r3, [pc, #192]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ef      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d159      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003874:	4b2a      	ldr	r3, [pc, #168]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01e      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	d019      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003890:	4b23      	ldr	r3, [pc, #140]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800389a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800389c:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038bc:	4a18      	ldr	r2, [pc, #96]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe fc4f 	bl	8002170 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d4:	e00b      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fe fc4b 	bl	8002170 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d902      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	74fb      	strb	r3, [r7, #19]
            break;
 80038ec:	e006      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ec      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003902:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003908:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	4903      	ldr	r1, [pc, #12]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003918:	e008      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	74bb      	strb	r3, [r7, #18]
 800391e:	e005      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003920:	40021000 	.word	0x40021000
 8003924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392c:	7c7b      	ldrb	r3, [r7, #17]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4ba6      	ldr	r3, [pc, #664]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003936:	4aa5      	ldr	r2, [pc, #660]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800394a:	4ba0      	ldr	r3, [pc, #640]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003950:	f023 0203 	bic.w	r2, r3, #3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	499c      	ldr	r1, [pc, #624]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800396c:	4b97      	ldr	r3, [pc, #604]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003972:	f023 020c 	bic.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4994      	ldr	r1, [pc, #592]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800398e:	4b8f      	ldr	r3, [pc, #572]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003994:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	498b      	ldr	r1, [pc, #556]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039b0:	4b86      	ldr	r3, [pc, #536]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	4983      	ldr	r1, [pc, #524]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039d2:	4b7e      	ldr	r3, [pc, #504]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	497a      	ldr	r1, [pc, #488]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f4:	4b75      	ldr	r3, [pc, #468]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	4972      	ldr	r1, [pc, #456]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a16:	4b6d      	ldr	r3, [pc, #436]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	4969      	ldr	r1, [pc, #420]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a38:	4b64      	ldr	r3, [pc, #400]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4961      	ldr	r1, [pc, #388]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	4958      	ldr	r1, [pc, #352]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a7c:	4b53      	ldr	r3, [pc, #332]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	4950      	ldr	r1, [pc, #320]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aa6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ab4:	4b45      	ldr	r3, [pc, #276]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	4942      	ldr	r1, [pc, #264]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ade:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aec:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	4934      	ldr	r1, [pc, #208]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a2e      	ldr	r2, [pc, #184]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b24:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b32:	4926      	ldr	r1, [pc, #152]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b44:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a20      	ldr	r2, [pc, #128]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6a:	4918      	ldr	r1, [pc, #96]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b7c:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b94:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	490a      	ldr	r1, [pc, #40]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bb4:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a04      	ldr	r2, [pc, #16]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e09d      	b.n	8003d1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bf2:	d009      	beq.n	8003c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	61da      	str	r2, [r3, #28]
 8003bfa:	e005      	b.n	8003c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd ff6a 	bl	8001afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c48:	d902      	bls.n	8003c50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e002      	b.n	8003c56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c5e:	d007      	beq.n	8003c70 <HAL_SPI_Init+0xa0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	ea42 0103 	orr.w	r1, r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 0204 	and.w	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cec:	ea42 0103 	orr.w	r1, r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b088      	sub	sp, #32
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d36:	f7fe fa1b 	bl	8002170 <HAL_GetTick>
 8003d3a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e15c      	b.n	800400a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0x36>
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e154      	b.n	800400a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_SPI_Transmit+0x48>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e14d      	b.n	800400a <HAL_SPI_Transmit+0x2e4>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc0:	d10f      	bne.n	8003de2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dec:	2b40      	cmp	r3, #64	@ 0x40
 8003dee:	d007      	beq.n	8003e00 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e08:	d952      	bls.n	8003eb0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Transmit+0xf2>
 8003e12:	8b7b      	ldrh	r3, [r7, #26]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d145      	bne.n	8003ea4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e3c:	e032      	b.n	8003ea4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d112      	bne.n	8003e72 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5c:	1c9a      	adds	r2, r3, #2
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e70:	e018      	b.n	8003ea4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e72:	f7fe f97d 	bl	8002170 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d803      	bhi.n	8003e8a <HAL_SPI_Transmit+0x164>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d102      	bne.n	8003e90 <HAL_SPI_Transmit+0x16a>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0b2      	b.n	800400a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1c7      	bne.n	8003e3e <HAL_SPI_Transmit+0x118>
 8003eae:	e083      	b.n	8003fb8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_SPI_Transmit+0x198>
 8003eb8:	8b7b      	ldrh	r3, [r7, #26]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d177      	bne.n	8003fae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d912      	bls.n	8003eee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	1c9a      	adds	r2, r3, #2
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b02      	subs	r3, #2
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eec:	e05f      	b.n	8003fae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	7812      	ldrb	r2, [r2, #0]
 8003efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f14:	e04b      	b.n	8003fae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d12b      	bne.n	8003f7c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d912      	bls.n	8003f54 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b02      	subs	r3, #2
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f52:	e02c      	b.n	8003fae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f7a:	e018      	b.n	8003fae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7c:	f7fe f8f8 	bl	8002170 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d803      	bhi.n	8003f94 <HAL_SPI_Transmit+0x26e>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_Transmit+0x274>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e02d      	b.n	800400a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ae      	bne.n	8003f16 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	6839      	ldr	r1, [r7, #0]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fb65 	bl	800468c <SPI_EndRxTxTransaction>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004008:	2300      	movs	r3, #0
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b08a      	sub	sp, #40	@ 0x28
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004020:	2301      	movs	r3, #1
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004024:	f7fe f8a4 	bl	8002170 <HAL_GetTick>
 8004028:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004030:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800403c:	887b      	ldrh	r3, [r7, #2]
 800403e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d00c      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x4e>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800404c:	d106      	bne.n	800405c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d102      	bne.n	800405c <HAL_SPI_TransmitReceive+0x4a>
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d001      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
 800405e:	e1f3      	b.n	8004448 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x60>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x60>
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e1e8      	b.n	8004448 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x72>
 8004080:	2302      	movs	r3, #2
 8004082:	e1e1      	b.n	8004448 <HAL_SPI_TransmitReceive+0x436>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b04      	cmp	r3, #4
 8004096:	d003      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2205      	movs	r2, #5
 800409c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	887a      	ldrh	r2, [r7, #2]
 80040c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040e2:	d802      	bhi.n	80040ea <HAL_SPI_TransmitReceive+0xd8>
 80040e4:	8abb      	ldrh	r3, [r7, #20]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d908      	bls.n	80040fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	e007      	b.n	800410c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d007      	beq.n	800412a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004132:	f240 8083 	bls.w	800423c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x132>
 800413e:	8afb      	ldrh	r3, [r7, #22]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d16f      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	881a      	ldrh	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	1c9a      	adds	r2, r3, #2
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004168:	e05c      	b.n	8004224 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d11b      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x19e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d016      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x19e>
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	2b01      	cmp	r3, #1
 8004186:	d113      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d11c      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x1e6>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	b292      	uxth	r2, r2
 80041d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	1c9a      	adds	r2, r3, #2
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041f4:	2301      	movs	r3, #1
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041f8:	f7fd ffba 	bl	8002170 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004204:	429a      	cmp	r2, r3
 8004206:	d80d      	bhi.n	8004224 <HAL_SPI_TransmitReceive+0x212>
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d009      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e111      	b.n	8004448 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d19d      	bne.n	800416a <HAL_SPI_TransmitReceive+0x158>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d197      	bne.n	800416a <HAL_SPI_TransmitReceive+0x158>
 800423a:	e0e5      	b.n	8004408 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_SPI_TransmitReceive+0x23a>
 8004244:	8afb      	ldrh	r3, [r7, #22]
 8004246:	2b01      	cmp	r3, #1
 8004248:	f040 80d1 	bne.w	80043ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d912      	bls.n	800427c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b02      	subs	r3, #2
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800427a:	e0b8      	b.n	80043ee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	7812      	ldrb	r2, [r2, #0]
 8004288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a2:	e0a4      	b.n	80043ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d134      	bne.n	800431c <HAL_SPI_TransmitReceive+0x30a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02f      	beq.n	800431c <HAL_SPI_TransmitReceive+0x30a>
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d12c      	bne.n	800431c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d912      	bls.n	80042f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	881a      	ldrh	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	1c9a      	adds	r2, r3, #2
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b02      	subs	r3, #2
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042f0:	e012      	b.n	8004318 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d148      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x3aa>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d042      	beq.n	80043bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d923      	bls.n	800438a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	b292      	uxth	r2, r2
 800434e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b02      	subs	r3, #2
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d81f      	bhi.n	80043b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	e016      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f103 020c 	add.w	r2, r3, #12
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043b8:	2301      	movs	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043bc:	f7fd fed8 	bl	8002170 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d803      	bhi.n	80043d4 <HAL_SPI_TransmitReceive+0x3c2>
 80043cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d102      	bne.n	80043da <HAL_SPI_TransmitReceive+0x3c8>
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e02c      	b.n	8004448 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f af55 	bne.w	80042a4 <HAL_SPI_TransmitReceive+0x292>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	f47f af4e 	bne.w	80042a4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f93d 	bl	800468c <SPI_EndRxTxTransaction>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e00e      	b.n	8004448 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004446:	2300      	movs	r3, #0
  }
}
 8004448:	4618      	mov	r0, r3
 800444a:	3728      	adds	r7, #40	@ 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004460:	f7fd fe86 	bl	8002170 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	4413      	add	r3, r2
 800446e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004470:	f7fd fe7e 	bl	8002170 <HAL_GetTick>
 8004474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004476:	4b39      	ldr	r3, [pc, #228]	@ (800455c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	015b      	lsls	r3, r3, #5
 800447c:	0d1b      	lsrs	r3, r3, #20
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004486:	e054      	b.n	8004532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d050      	beq.n	8004532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004490:	f7fd fe6e 	bl	8002170 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	429a      	cmp	r2, r3
 800449e:	d902      	bls.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d13d      	bne.n	8004522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044be:	d111      	bne.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c8:	d004      	beq.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d2:	d107      	bne.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ec:	d10f      	bne.n	800450e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800450c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e017      	b.n	8004552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3b01      	subs	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4013      	ands	r3, r2
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	429a      	cmp	r2, r3
 800454e:	d19b      	bne.n	8004488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000004 	.word	0x20000004

08004560 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	@ 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004572:	f7fd fdfd 	bl	8002170 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	4413      	add	r3, r2
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004582:	f7fd fdf5 	bl	8002170 <HAL_GetTick>
 8004586:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004590:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	00da      	lsls	r2, r3, #3
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	0d1b      	lsrs	r3, r3, #20
 80045a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045a8:	e060      	b.n	800466c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045b0:	d107      	bne.n	80045c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d050      	beq.n	800466c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045ca:	f7fd fdd1 	bl	8002170 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d902      	bls.n	80045e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d13d      	bne.n	800465c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f8:	d111      	bne.n	800461e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004602:	d004      	beq.n	800460e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460c:	d107      	bne.n	800461e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800461c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004626:	d10f      	bne.n	8004648 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004646:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e010      	b.n	800467e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3b01      	subs	r3, #1
 800466a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d196      	bne.n	80045aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3728      	adds	r7, #40	@ 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000004 	.word	0x20000004

0800468c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff ff5b 	bl	8004560 <SPI_WaitFifoStateUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e027      	b.n	8004710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	2180      	movs	r1, #128	@ 0x80
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fec0 	bl	8004450 <SPI_WaitFlagStateUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e014      	b.n	8004710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff ff34 	bl	8004560 <SPI_WaitFifoStateUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e000      	b.n	8004710 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e042      	b.n	80047b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fd fc29 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2224      	movs	r2, #36	@ 0x24
 8004746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fee4 	bl	8005530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fc15 	bl	8004f98 <UART_SetConfig>
 800476e:	4603      	mov	r3, r0
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e01b      	b.n	80047b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 ff63 	bl	8005674 <UART_CheckIdleState>
 80047ae:	4603      	mov	r3, r0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	@ 0x28
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d17b      	bne.n	80048ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_UART_Transmit+0x26>
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e074      	b.n	80048cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2221      	movs	r2, #33	@ 0x21
 80047ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f2:	f7fd fcbd 	bl	8002170 <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004810:	d108      	bne.n	8004824 <HAL_UART_Transmit+0x6c>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e003      	b.n	800482c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800482c:	e030      	b.n	8004890 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	2180      	movs	r1, #128	@ 0x80
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 ffc5 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e03d      	b.n	80048cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004864:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	3302      	adds	r3, #2
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	e007      	b.n	800487e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	781a      	ldrb	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	3301      	adds	r3, #1
 800487c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1c8      	bne.n	800482e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2200      	movs	r2, #0
 80048a4:	2140      	movs	r1, #64	@ 0x40
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 ff8e 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e006      	b.n	80048cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b0ba      	sub	sp, #232	@ 0xe8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80048fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004902:	4013      	ands	r3, r2
 8004904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11b      	bne.n	8004948 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800491c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800492c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8300 	beq.w	8004f3e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
      }
      return;
 8004946:	e2fa      	b.n	8004f3e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8123 	beq.w	8004b98 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004952:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004956:	4b8d      	ldr	r3, [pc, #564]	@ (8004b8c <HAL_UART_IRQHandler+0x2b8>)
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800495e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004962:	4b8b      	ldr	r3, [pc, #556]	@ (8004b90 <HAL_UART_IRQHandler+0x2bc>)
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8116 	beq.w	8004b98 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800496c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d011      	beq.n	800499c <HAL_UART_IRQHandler+0xc8>
 8004978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800499c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d011      	beq.n	80049cc <HAL_UART_IRQHandler+0xf8>
 80049a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2202      	movs	r2, #2
 80049ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	f043 0204 	orr.w	r2, r3, #4
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d011      	beq.n	80049fc <HAL_UART_IRQHandler+0x128>
 80049d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00b      	beq.n	80049fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2204      	movs	r2, #4
 80049ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	f043 0202 	orr.w	r2, r3, #2
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d017      	beq.n	8004a38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004a18:	4b5c      	ldr	r3, [pc, #368]	@ (8004b8c <HAL_UART_IRQHandler+0x2b8>)
 8004a1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2208      	movs	r2, #8
 8004a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	f043 0208 	orr.w	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d012      	beq.n	8004a6a <HAL_UART_IRQHandler+0x196>
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8266 	beq.w	8004f42 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d013      	beq.n	8004aaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d105      	bne.n	8004a9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abe:	2b40      	cmp	r3, #64	@ 0x40
 8004ac0:	d005      	beq.n	8004ace <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ac6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d054      	beq.n	8004b78 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fee7 	bl	80058a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ade:	2b40      	cmp	r3, #64	@ 0x40
 8004ae0:	d146      	bne.n	8004b70 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1d9      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b3e:	4a15      	ldr	r2, [pc, #84]	@ (8004b94 <HAL_UART_IRQHandler+0x2c0>)
 8004b40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fd fd5c 	bl	8002606 <HAL_DMA_Abort_IT>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d019      	beq.n	8004b88 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004b62:	4610      	mov	r0, r2
 8004b64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b66:	e00f      	b.n	8004b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f9ff 	bl	8004f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6e:	e00b      	b.n	8004b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9fb 	bl	8004f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b76:	e007      	b.n	8004b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f9f7 	bl	8004f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004b86:	e1dc      	b.n	8004f42 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	bf00      	nop
    return;
 8004b8a:	e1da      	b.n	8004f42 <HAL_UART_IRQHandler+0x66e>
 8004b8c:	10000001 	.word	0x10000001
 8004b90:	04000120 	.word	0x04000120
 8004b94:	0800596f 	.word	0x0800596f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	f040 8170 	bne.w	8004e82 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8169 	beq.w	8004e82 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8162 	beq.w	8004e82 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	f040 80d8 	bne.w	8004d86 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80af 	beq.w	8004d4c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004bf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	f080 80a7 	bcs.w	8004d4c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 8087 	bne.w	8004d2a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1da      	bne.n	8004c1c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e1      	bne.n	8004c66 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ccc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e3      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf8:	f023 0310 	bic.w	r3, r3, #16
 8004cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e4      	bne.n	8004ce8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd fc15 	bl	8002554 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f91b 	bl	8004f80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d4a:	e0fc      	b.n	8004f46 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d56:	429a      	cmp	r2, r3
 8004d58:	f040 80f5 	bne.w	8004f46 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	f040 80eb 	bne.w	8004f46 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8fe 	bl	8004f80 <HAL_UARTEx_RxEventCallback>
      return;
 8004d84:	e0df      	b.n	8004f46 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80d1 	beq.w	8004f4a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80cc 	beq.w	8004f4a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e4      	bne.n	8004db2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	623b      	str	r3, [r7, #32]
   return(result);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e10:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e1      	bne.n	8004de8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f023 0310 	bic.w	r3, r3, #16
 8004e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	617b      	str	r3, [r7, #20]
   return(result);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e4      	bne.n	8004e38 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f880 	bl	8004f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e80:	e063      	b.n	8004f4a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00e      	beq.n	8004eac <HAL_UART_IRQHandler+0x5d8>
 8004e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fd9f 	bl	80059e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eaa:	e051      	b.n	8004f50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d014      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d03a      	beq.n	8004f4e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
    }
    return;
 8004ee0:	e035      	b.n	8004f4e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_UART_IRQHandler+0x62e>
 8004eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fd49 	bl	8005992 <UART_EndTransmit_IT>
    return;
 8004f00:	e026      	b.n	8004f50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_UART_IRQHandler+0x64e>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fd78 	bl	8005a10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f20:	e016      	b.n	8004f50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d010      	beq.n	8004f50 <HAL_UART_IRQHandler+0x67c>
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	da0c      	bge.n	8004f50 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fd60 	bl	80059fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f3c:	e008      	b.n	8004f50 <HAL_UART_IRQHandler+0x67c>
      return;
 8004f3e:	bf00      	nop
 8004f40:	e006      	b.n	8004f50 <HAL_UART_IRQHandler+0x67c>
    return;
 8004f42:	bf00      	nop
 8004f44:	e004      	b.n	8004f50 <HAL_UART_IRQHandler+0x67c>
      return;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_UART_IRQHandler+0x67c>
      return;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_UART_IRQHandler+0x67c>
    return;
 8004f4e:	bf00      	nop
  }
}
 8004f50:	37e8      	adds	r7, #232	@ 0xe8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop

08004f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f9c:	b08c      	sub	sp, #48	@ 0x30
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4bab      	ldr	r3, [pc, #684]	@ (8005274 <UART_SetConfig+0x2dc>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4aa0      	ldr	r2, [pc, #640]	@ (8005278 <UART_SetConfig+0x2e0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005000:	4313      	orrs	r3, r2
 8005002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800500e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005018:	430b      	orrs	r3, r1
 800501a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005022:	f023 010f 	bic.w	r1, r3, #15
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a91      	ldr	r2, [pc, #580]	@ (800527c <UART_SetConfig+0x2e4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d125      	bne.n	8005088 <UART_SetConfig+0xf0>
 800503c:	4b90      	ldr	r3, [pc, #576]	@ (8005280 <UART_SetConfig+0x2e8>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b03      	cmp	r3, #3
 8005048:	d81a      	bhi.n	8005080 <UART_SetConfig+0xe8>
 800504a:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <UART_SetConfig+0xb8>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005061 	.word	0x08005061
 8005054:	08005071 	.word	0x08005071
 8005058:	08005069 	.word	0x08005069
 800505c:	08005079 	.word	0x08005079
 8005060:	2301      	movs	r3, #1
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005066:	e0d6      	b.n	8005216 <UART_SetConfig+0x27e>
 8005068:	2302      	movs	r3, #2
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506e:	e0d2      	b.n	8005216 <UART_SetConfig+0x27e>
 8005070:	2304      	movs	r3, #4
 8005072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005076:	e0ce      	b.n	8005216 <UART_SetConfig+0x27e>
 8005078:	2308      	movs	r3, #8
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800507e:	e0ca      	b.n	8005216 <UART_SetConfig+0x27e>
 8005080:	2310      	movs	r3, #16
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005086:	e0c6      	b.n	8005216 <UART_SetConfig+0x27e>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a7d      	ldr	r2, [pc, #500]	@ (8005284 <UART_SetConfig+0x2ec>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d138      	bne.n	8005104 <UART_SetConfig+0x16c>
 8005092:	4b7b      	ldr	r3, [pc, #492]	@ (8005280 <UART_SetConfig+0x2e8>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005098:	f003 030c 	and.w	r3, r3, #12
 800509c:	2b0c      	cmp	r3, #12
 800509e:	d82d      	bhi.n	80050fc <UART_SetConfig+0x164>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <UART_SetConfig+0x110>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050dd 	.word	0x080050dd
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	080050fd 	.word	0x080050fd
 80050b4:	080050fd 	.word	0x080050fd
 80050b8:	080050ed 	.word	0x080050ed
 80050bc:	080050fd 	.word	0x080050fd
 80050c0:	080050fd 	.word	0x080050fd
 80050c4:	080050fd 	.word	0x080050fd
 80050c8:	080050e5 	.word	0x080050e5
 80050cc:	080050fd 	.word	0x080050fd
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	080050fd 	.word	0x080050fd
 80050d8:	080050f5 	.word	0x080050f5
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e2:	e098      	b.n	8005216 <UART_SetConfig+0x27e>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e094      	b.n	8005216 <UART_SetConfig+0x27e>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f2:	e090      	b.n	8005216 <UART_SetConfig+0x27e>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fa:	e08c      	b.n	8005216 <UART_SetConfig+0x27e>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005102:	e088      	b.n	8005216 <UART_SetConfig+0x27e>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5f      	ldr	r2, [pc, #380]	@ (8005288 <UART_SetConfig+0x2f0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d125      	bne.n	800515a <UART_SetConfig+0x1c2>
 800510e:	4b5c      	ldr	r3, [pc, #368]	@ (8005280 <UART_SetConfig+0x2e8>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005114:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005118:	2b30      	cmp	r3, #48	@ 0x30
 800511a:	d016      	beq.n	800514a <UART_SetConfig+0x1b2>
 800511c:	2b30      	cmp	r3, #48	@ 0x30
 800511e:	d818      	bhi.n	8005152 <UART_SetConfig+0x1ba>
 8005120:	2b20      	cmp	r3, #32
 8005122:	d00a      	beq.n	800513a <UART_SetConfig+0x1a2>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d814      	bhi.n	8005152 <UART_SetConfig+0x1ba>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <UART_SetConfig+0x19a>
 800512c:	2b10      	cmp	r3, #16
 800512e:	d008      	beq.n	8005142 <UART_SetConfig+0x1aa>
 8005130:	e00f      	b.n	8005152 <UART_SetConfig+0x1ba>
 8005132:	2300      	movs	r3, #0
 8005134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005138:	e06d      	b.n	8005216 <UART_SetConfig+0x27e>
 800513a:	2302      	movs	r3, #2
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005140:	e069      	b.n	8005216 <UART_SetConfig+0x27e>
 8005142:	2304      	movs	r3, #4
 8005144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005148:	e065      	b.n	8005216 <UART_SetConfig+0x27e>
 800514a:	2308      	movs	r3, #8
 800514c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005150:	e061      	b.n	8005216 <UART_SetConfig+0x27e>
 8005152:	2310      	movs	r3, #16
 8005154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005158:	e05d      	b.n	8005216 <UART_SetConfig+0x27e>
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a4b      	ldr	r2, [pc, #300]	@ (800528c <UART_SetConfig+0x2f4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d125      	bne.n	80051b0 <UART_SetConfig+0x218>
 8005164:	4b46      	ldr	r3, [pc, #280]	@ (8005280 <UART_SetConfig+0x2e8>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800516e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005170:	d016      	beq.n	80051a0 <UART_SetConfig+0x208>
 8005172:	2bc0      	cmp	r3, #192	@ 0xc0
 8005174:	d818      	bhi.n	80051a8 <UART_SetConfig+0x210>
 8005176:	2b80      	cmp	r3, #128	@ 0x80
 8005178:	d00a      	beq.n	8005190 <UART_SetConfig+0x1f8>
 800517a:	2b80      	cmp	r3, #128	@ 0x80
 800517c:	d814      	bhi.n	80051a8 <UART_SetConfig+0x210>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <UART_SetConfig+0x1f0>
 8005182:	2b40      	cmp	r3, #64	@ 0x40
 8005184:	d008      	beq.n	8005198 <UART_SetConfig+0x200>
 8005186:	e00f      	b.n	80051a8 <UART_SetConfig+0x210>
 8005188:	2300      	movs	r3, #0
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518e:	e042      	b.n	8005216 <UART_SetConfig+0x27e>
 8005190:	2302      	movs	r3, #2
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005196:	e03e      	b.n	8005216 <UART_SetConfig+0x27e>
 8005198:	2304      	movs	r3, #4
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800519e:	e03a      	b.n	8005216 <UART_SetConfig+0x27e>
 80051a0:	2308      	movs	r3, #8
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051a6:	e036      	b.n	8005216 <UART_SetConfig+0x27e>
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ae:	e032      	b.n	8005216 <UART_SetConfig+0x27e>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a30      	ldr	r2, [pc, #192]	@ (8005278 <UART_SetConfig+0x2e0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d12a      	bne.n	8005210 <UART_SetConfig+0x278>
 80051ba:	4b31      	ldr	r3, [pc, #196]	@ (8005280 <UART_SetConfig+0x2e8>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051c8:	d01a      	beq.n	8005200 <UART_SetConfig+0x268>
 80051ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051ce:	d81b      	bhi.n	8005208 <UART_SetConfig+0x270>
 80051d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d4:	d00c      	beq.n	80051f0 <UART_SetConfig+0x258>
 80051d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051da:	d815      	bhi.n	8005208 <UART_SetConfig+0x270>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <UART_SetConfig+0x250>
 80051e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e4:	d008      	beq.n	80051f8 <UART_SetConfig+0x260>
 80051e6:	e00f      	b.n	8005208 <UART_SetConfig+0x270>
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ee:	e012      	b.n	8005216 <UART_SetConfig+0x27e>
 80051f0:	2302      	movs	r3, #2
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f6:	e00e      	b.n	8005216 <UART_SetConfig+0x27e>
 80051f8:	2304      	movs	r3, #4
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fe:	e00a      	b.n	8005216 <UART_SetConfig+0x27e>
 8005200:	2308      	movs	r3, #8
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005206:	e006      	b.n	8005216 <UART_SetConfig+0x27e>
 8005208:	2310      	movs	r3, #16
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800520e:	e002      	b.n	8005216 <UART_SetConfig+0x27e>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a17      	ldr	r2, [pc, #92]	@ (8005278 <UART_SetConfig+0x2e0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	f040 80a8 	bne.w	8005372 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005222:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005226:	2b08      	cmp	r3, #8
 8005228:	d834      	bhi.n	8005294 <UART_SetConfig+0x2fc>
 800522a:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <UART_SetConfig+0x298>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005255 	.word	0x08005255
 8005234:	08005295 	.word	0x08005295
 8005238:	0800525d 	.word	0x0800525d
 800523c:	08005295 	.word	0x08005295
 8005240:	08005263 	.word	0x08005263
 8005244:	08005295 	.word	0x08005295
 8005248:	08005295 	.word	0x08005295
 800524c:	08005295 	.word	0x08005295
 8005250:	0800526b 	.word	0x0800526b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005254:	f7fe fa5a 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8005258:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800525a:	e021      	b.n	80052a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800525c:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <UART_SetConfig+0x2f8>)
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005260:	e01e      	b.n	80052a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005262:	f7fe f9e5 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8005266:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005268:	e01a      	b.n	80052a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005270:	e016      	b.n	80052a0 <UART_SetConfig+0x308>
 8005272:	bf00      	nop
 8005274:	cfff69f3 	.word	0xcfff69f3
 8005278:	40008000 	.word	0x40008000
 800527c:	40013800 	.word	0x40013800
 8005280:	40021000 	.word	0x40021000
 8005284:	40004400 	.word	0x40004400
 8005288:	40004800 	.word	0x40004800
 800528c:	40004c00 	.word	0x40004c00
 8005290:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800529e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 812a 	beq.w	80054fc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	4a9e      	ldr	r2, [pc, #632]	@ (8005528 <UART_SetConfig+0x590>)
 80052ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	4413      	add	r3, r2
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d305      	bcc.n	80052d8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d903      	bls.n	80052e0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052de:	e10d      	b.n	80054fc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	2200      	movs	r2, #0
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	60fa      	str	r2, [r7, #12]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	4a8e      	ldr	r2, [pc, #568]	@ (8005528 <UART_SetConfig+0x590>)
 80052ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2200      	movs	r2, #0
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005302:	f7fb fc79 	bl	8000bf8 <__aeabi_uldivmod>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	020b      	lsls	r3, r1, #8
 8005318:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800531c:	0202      	lsls	r2, r0, #8
 800531e:	6979      	ldr	r1, [r7, #20]
 8005320:	6849      	ldr	r1, [r1, #4]
 8005322:	0849      	lsrs	r1, r1, #1
 8005324:	2000      	movs	r0, #0
 8005326:	460c      	mov	r4, r1
 8005328:	4605      	mov	r5, r0
 800532a:	eb12 0804 	adds.w	r8, r2, r4
 800532e:	eb43 0905 	adc.w	r9, r3, r5
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	469a      	mov	sl, r3
 800533a:	4693      	mov	fp, r2
 800533c:	4652      	mov	r2, sl
 800533e:	465b      	mov	r3, fp
 8005340:	4640      	mov	r0, r8
 8005342:	4649      	mov	r1, r9
 8005344:	f7fb fc58 	bl	8000bf8 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4613      	mov	r3, r2
 800534e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005356:	d308      	bcc.n	800536a <UART_SetConfig+0x3d2>
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800535e:	d204      	bcs.n	800536a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	60da      	str	r2, [r3, #12]
 8005368:	e0c8      	b.n	80054fc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005370:	e0c4      	b.n	80054fc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800537a:	d167      	bne.n	800544c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800537c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005380:	2b08      	cmp	r3, #8
 8005382:	d828      	bhi.n	80053d6 <UART_SetConfig+0x43e>
 8005384:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <UART_SetConfig+0x3f4>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	080053d7 	.word	0x080053d7
 800539c:	080053c7 	.word	0x080053c7
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	080053d7 	.word	0x080053d7
 80053a8:	080053d7 	.word	0x080053d7
 80053ac:	080053cf 	.word	0x080053cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b0:	f7fe f9ac 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 80053b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053b6:	e014      	b.n	80053e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7fe f9be 	bl	8003738 <HAL_RCC_GetPCLK2Freq>
 80053bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053be:	e010      	b.n	80053e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b5a      	ldr	r3, [pc, #360]	@ (800552c <UART_SetConfig+0x594>)
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053c4:	e00d      	b.n	80053e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fe f933 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80053ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053cc:	e009      	b.n	80053e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053d4:	e005      	b.n	80053e2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8089 	beq.w	80054fc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	4a4e      	ldr	r2, [pc, #312]	@ (8005528 <UART_SetConfig+0x590>)
 80053f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80053fc:	005a      	lsls	r2, r3, #1
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	441a      	add	r2, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d916      	bls.n	8005444 <UART_SetConfig+0x4ac>
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800541c:	d212      	bcs.n	8005444 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f023 030f 	bic.w	r3, r3, #15
 8005426:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	b29b      	uxth	r3, r3
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	b29a      	uxth	r2, r3
 8005434:	8bfb      	ldrh	r3, [r7, #30]
 8005436:	4313      	orrs	r3, r2
 8005438:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	8bfa      	ldrh	r2, [r7, #30]
 8005440:	60da      	str	r2, [r3, #12]
 8005442:	e05b      	b.n	80054fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800544a:	e057      	b.n	80054fc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800544c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005450:	2b08      	cmp	r3, #8
 8005452:	d828      	bhi.n	80054a6 <UART_SetConfig+0x50e>
 8005454:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <UART_SetConfig+0x4c4>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	08005481 	.word	0x08005481
 8005460:	08005489 	.word	0x08005489
 8005464:	08005491 	.word	0x08005491
 8005468:	080054a7 	.word	0x080054a7
 800546c:	08005497 	.word	0x08005497
 8005470:	080054a7 	.word	0x080054a7
 8005474:	080054a7 	.word	0x080054a7
 8005478:	080054a7 	.word	0x080054a7
 800547c:	0800549f 	.word	0x0800549f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe f944 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8005484:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005486:	e014      	b.n	80054b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005488:	f7fe f956 	bl	8003738 <HAL_RCC_GetPCLK2Freq>
 800548c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800548e:	e010      	b.n	80054b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005490:	4b26      	ldr	r3, [pc, #152]	@ (800552c <UART_SetConfig+0x594>)
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005494:	e00d      	b.n	80054b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005496:	f7fe f8cb 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 800549a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800549c:	e009      	b.n	80054b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054a4:	e005      	b.n	80054b2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054b0:	bf00      	nop
    }

    if (pclk != 0U)
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d021      	beq.n	80054fc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005528 <UART_SetConfig+0x590>)
 80054be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c2:	461a      	mov	r2, r3
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	441a      	add	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	2b0f      	cmp	r3, #15
 80054e0:	d909      	bls.n	80054f6 <UART_SetConfig+0x55e>
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e8:	d205      	bcs.n	80054f6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60da      	str	r2, [r3, #12]
 80054f4:	e002      	b.n	80054fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2201      	movs	r2, #1
 8005500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2201      	movs	r2, #1
 8005508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2200      	movs	r2, #0
 8005510:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2200      	movs	r2, #0
 8005516:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005518:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800551c:	4618      	mov	r0, r3
 800551e:	3730      	adds	r7, #48	@ 0x30
 8005520:	46bd      	mov	sp, r7
 8005522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005526:	bf00      	nop
 8005528:	08009194 	.word	0x08009194
 800552c:	00f42400 	.word	0x00f42400

08005530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800562e:	d10a      	bne.n	8005646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b098      	sub	sp, #96	@ 0x60
 8005678:	af02      	add	r7, sp, #8
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005684:	f7fc fd74 	bl	8002170 <HAL_GetTick>
 8005688:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b08      	cmp	r3, #8
 8005696:	d12f      	bne.n	80056f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f88e 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d022      	beq.n	80056f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e063      	b.n	80057c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d149      	bne.n	800579a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005706:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800570e:	2200      	movs	r2, #0
 8005710:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f857 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d03c      	beq.n	800579a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	623b      	str	r3, [r7, #32]
   return(result);
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800573e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005740:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e6      	bne.n	8005720 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	60fb      	str	r3, [r7, #12]
   return(result);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005772:	61fa      	str	r2, [r7, #28]
 8005774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	69b9      	ldr	r1, [r7, #24]
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	617b      	str	r3, [r7, #20]
   return(result);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e012      	b.n	80057c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3758      	adds	r7, #88	@ 0x58
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d8:	e04f      	b.n	800587a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d04b      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fc fcc5 	bl	8002170 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e04e      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d037      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0xb2>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b80      	cmp	r3, #128	@ 0x80
 800580e:	d034      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b40      	cmp	r3, #64	@ 0x40
 8005814:	d031      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b08      	cmp	r3, #8
 8005822:	d110      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2208      	movs	r2, #8
 800582a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f838 	bl	80058a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2208      	movs	r2, #8
 8005836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e029      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005854:	d111      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800585e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f81e 	bl	80058a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e00f      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4013      	ands	r3, r2
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	bf0c      	ite	eq
 800588a:	2301      	moveq	r3, #1
 800588c:	2300      	movne	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	429a      	cmp	r2, r3
 8005896:	d0a0      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b095      	sub	sp, #84	@ 0x54
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e3      	bne.n	80058dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d118      	bne.n	800594e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	60bb      	str	r3, [r7, #8]
   return(result);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f023 0310 	bic.w	r3, r3, #16
 8005930:	647b      	str	r3, [r7, #68]	@ 0x44
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6979      	ldr	r1, [r7, #20]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	613b      	str	r3, [r7, #16]
   return(result);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e6      	bne.n	800591c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005962:	bf00      	nop
 8005964:	3754      	adds	r7, #84	@ 0x54
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff faf1 	bl	8004f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b088      	sub	sp, #32
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6979      	ldr	r1, [r7, #20]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	613b      	str	r3, [r7, #16]
   return(result);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e6      	bne.n	800599a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fabc 	bl	8004f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e0:	bf00      	nop
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e027      	b.n	8005a8a <HAL_UARTEx_DisableFifoMode+0x66>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2224      	movs	r2, #36	@ 0x24
 8005a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e02d      	b.n	8005b0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2224      	movs	r2, #36	@ 0x24
 8005aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f850 	bl	8005b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e02d      	b.n	8005b86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2224      	movs	r2, #36	@ 0x24
 8005b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f812 	bl	8005b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d108      	bne.n	8005bb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bb0:	e031      	b.n	8005c16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	0e5b      	lsrs	r3, r3, #25
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	0f5b      	lsrs	r3, r3, #29
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	7b3a      	ldrb	r2, [r7, #12]
 8005bde:	4911      	ldr	r1, [pc, #68]	@ (8005c24 <UARTEx_SetNbDataToProcess+0x94>)
 8005be0:	5c8a      	ldrb	r2, [r1, r2]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005be6:	7b3a      	ldrb	r2, [r7, #12]
 8005be8:	490f      	ldr	r1, [pc, #60]	@ (8005c28 <UARTEx_SetNbDataToProcess+0x98>)
 8005bea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	7b7a      	ldrb	r2, [r7, #13]
 8005bfc:	4909      	ldr	r1, [pc, #36]	@ (8005c24 <UARTEx_SetNbDataToProcess+0x94>)
 8005bfe:	5c8a      	ldrb	r2, [r1, r2]
 8005c00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c04:	7b7a      	ldrb	r2, [r7, #13]
 8005c06:	4908      	ldr	r1, [pc, #32]	@ (8005c28 <UARTEx_SetNbDataToProcess+0x98>)
 8005c08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	080091ac 	.word	0x080091ac
 8005c28:	080091b4 	.word	0x080091b4

08005c2c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8005c30:	4907      	ldr	r1, [pc, #28]	@ (8005c50 <MX_FATFS_Init+0x24>)
 8005c32:	4808      	ldr	r0, [pc, #32]	@ (8005c54 <MX_FATFS_Init+0x28>)
 8005c34:	f000 fd8a 	bl	800674c <FATFS_LinkDriver>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8005c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c42:	e003      	b.n	8005c4c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8005c44:	4b04      	ldr	r3, [pc, #16]	@ (8005c58 <MX_FATFS_Init+0x2c>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8005c4a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	2000140c 	.word	0x2000140c
 8005c54:	20000010 	.word	0x20000010
 8005c58:	20001410 	.word	0x20001410

08005c5c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fb fb4d 	bl	8001308 <SD_disk_initialize>
 8005c6e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fb fc2b 	bl	80014e0 <SD_disk_status>
 8005c8a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005ca4:	7bf8      	ldrb	r0, [r7, #15]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	f7fb fc2e 	bl	800150c <SD_disk_read>
 8005cb0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005cca:	7bf8      	ldrb	r0, [r7, #15]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	f7fb fc85 	bl	80015e0 <SD_disk_write>
 8005cd6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	603a      	str	r2, [r7, #0]
 8005cea:	71fb      	strb	r3, [r7, #7]
 8005cec:	460b      	mov	r3, r1
 8005cee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005cf0:	79b9      	ldrb	r1, [r7, #6]
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fb fcf6 	bl	80016e8 <SD_disk_ioctl>
 8005cfc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	4a08      	ldr	r2, [pc, #32]	@ (8005d38 <disk_status+0x30>)
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	79fa      	ldrb	r2, [r7, #7]
 8005d20:	4905      	ldr	r1, [pc, #20]	@ (8005d38 <disk_status+0x30>)
 8005d22:	440a      	add	r2, r1
 8005d24:	7a12      	ldrb	r2, [r2, #8]
 8005d26:	4610      	mov	r0, r2
 8005d28:	4798      	blx	r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	2000163c 	.word	0x2000163c

08005d3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d84 <disk_initialize+0x48>)
 8005d4e:	5cd3      	ldrb	r3, [r2, r3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d111      	bne.n	8005d78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	4a0b      	ldr	r2, [pc, #44]	@ (8005d84 <disk_initialize+0x48>)
 8005d58:	2101      	movs	r1, #1
 8005d5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	4a09      	ldr	r2, [pc, #36]	@ (8005d84 <disk_initialize+0x48>)
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	79fa      	ldrb	r2, [r7, #7]
 8005d6a:	4906      	ldr	r1, [pc, #24]	@ (8005d84 <disk_initialize+0x48>)
 8005d6c:	440a      	add	r2, r1
 8005d6e:	7a12      	ldrb	r2, [r2, #8]
 8005d70:	4610      	mov	r0, r2
 8005d72:	4798      	blx	r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	2000163c 	.word	0x2000163c

08005d88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d88:	b590      	push	{r4, r7, lr}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc4 <disk_read+0x3c>)
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	689c      	ldr	r4, [r3, #8]
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	4a07      	ldr	r2, [pc, #28]	@ (8005dc4 <disk_read+0x3c>)
 8005da8:	4413      	add	r3, r2
 8005daa:	7a18      	ldrb	r0, [r3, #8]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	47a0      	blx	r4
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd90      	pop	{r4, r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	2000163c 	.word	0x2000163c

08005dc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	4a0a      	ldr	r2, [pc, #40]	@ (8005e04 <disk_write+0x3c>)
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68dc      	ldr	r4, [r3, #12]
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	4a07      	ldr	r2, [pc, #28]	@ (8005e04 <disk_write+0x3c>)
 8005de8:	4413      	add	r3, r2
 8005dea:	7a18      	ldrb	r0, [r3, #8]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	47a0      	blx	r4
 8005df4:	4603      	mov	r3, r0
 8005df6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}
 8005e02:	bf00      	nop
 8005e04:	2000163c 	.word	0x2000163c

08005e08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	603a      	str	r2, [r7, #0]
 8005e12:	71fb      	strb	r3, [r7, #7]
 8005e14:	460b      	mov	r3, r1
 8005e16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	4a09      	ldr	r2, [pc, #36]	@ (8005e40 <disk_ioctl+0x38>)
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	79fa      	ldrb	r2, [r7, #7]
 8005e26:	4906      	ldr	r1, [pc, #24]	@ (8005e40 <disk_ioctl+0x38>)
 8005e28:	440a      	add	r2, r1
 8005e2a:	7a10      	ldrb	r0, [r2, #8]
 8005e2c:	79b9      	ldrb	r1, [r7, #6]
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	4798      	blx	r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	73fb      	strb	r3, [r7, #15]
  return res;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	2000163c 	.word	0x2000163c

08005e44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	b21a      	sxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e68:	89fb      	ldrh	r3, [r7, #14]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3303      	adds	r3, #3
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	3202      	adds	r2, #2
 8005e8e:	7812      	ldrb	r2, [r2, #0]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	3201      	adds	r2, #1
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
	return rv;
 8005eae:	68fb      	ldr	r3, [r7, #12]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e010      	b.n	8005eec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005eca:	4a0d      	ldr	r2, [pc, #52]	@ (8005f00 <clear_lock+0x44>)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	4413      	add	r3, r2
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d105      	bne.n	8005ee6 <clear_lock+0x2a>
 8005eda:	4a09      	ldr	r2, [pc, #36]	@ (8005f00 <clear_lock+0x44>)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	4413      	add	r3, r2
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d9eb      	bls.n	8005eca <clear_lock+0xe>
	}
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	2000141c 	.word	0x2000141c

08005f04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	78db      	ldrb	r3, [r3, #3]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d034      	beq.n	8005f82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7858      	ldrb	r0, [r3, #1]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f28:	2301      	movs	r3, #1
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	f7ff ff4c 	bl	8005dc8 <disk_write>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
 8005f3a:	e022      	b.n	8005f82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	1ad2      	subs	r2, r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d217      	bcs.n	8005f82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	789b      	ldrb	r3, [r3, #2]
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	e010      	b.n	8005f7c <sync_window+0x78>
					wsect += fs->fsize;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4413      	add	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7858      	ldrb	r0, [r3, #1]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f6e:	2301      	movs	r3, #1
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	f7ff ff29 	bl	8005dc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d8eb      	bhi.n	8005f5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d01b      	beq.n	8005fdc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff ffad 	bl	8005f04 <sync_window>
 8005faa:	4603      	mov	r3, r0
 8005fac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d113      	bne.n	8005fdc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	7858      	ldrb	r0, [r3, #1]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	f7ff fee1 	bl	8005d88 <disk_read>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b087      	sub	sp, #28
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d031      	beq.n	8006060 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e002      	b.n	800600a <get_ldnumber+0x24>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	3301      	adds	r3, #1
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b1f      	cmp	r3, #31
 8006010:	d903      	bls.n	800601a <get_ldnumber+0x34>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b3a      	cmp	r3, #58	@ 0x3a
 8006018:	d1f4      	bne.n	8006004 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006020:	d11c      	bne.n	800605c <get_ldnumber+0x76>
			tp = *path;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	60fa      	str	r2, [r7, #12]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	3b30      	subs	r3, #48	@ 0x30
 8006032:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b09      	cmp	r3, #9
 8006038:	d80e      	bhi.n	8006058 <get_ldnumber+0x72>
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	429a      	cmp	r2, r3
 8006040:	d10a      	bne.n	8006058 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d107      	bne.n	8006058 <get_ldnumber+0x72>
					vol = (int)i;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3301      	adds	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	e002      	b.n	8006062 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006060:	693b      	ldr	r3, [r7, #16]
}
 8006062:	4618      	mov	r0, r3
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	70da      	strb	r2, [r3, #3]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f04f 32ff 	mov.w	r2, #4294967295
 8006086:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff ff7e 	bl	8005f8c <move_window>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <check_fs+0x2a>
 8006096:	2304      	movs	r3, #4
 8006098:	e038      	b.n	800610c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3338      	adds	r3, #56	@ 0x38
 800609e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff fece 	bl	8005e44 <ld_word>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d001      	beq.n	80060b8 <check_fs+0x48>
 80060b4:	2303      	movs	r3, #3
 80060b6:	e029      	b.n	800610c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060be:	2be9      	cmp	r3, #233	@ 0xe9
 80060c0:	d009      	beq.n	80060d6 <check_fs+0x66>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060c8:	2beb      	cmp	r3, #235	@ 0xeb
 80060ca:	d11e      	bne.n	800610a <check_fs+0x9a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80060d2:	2b90      	cmp	r3, #144	@ 0x90
 80060d4:	d119      	bne.n	800610a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3338      	adds	r3, #56	@ 0x38
 80060da:	3336      	adds	r3, #54	@ 0x36
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff feca 	bl	8005e76 <ld_dword>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006114 <check_fs+0xa4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d101      	bne.n	80060f2 <check_fs+0x82>
 80060ee:	2300      	movs	r3, #0
 80060f0:	e00c      	b.n	800610c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3338      	adds	r3, #56	@ 0x38
 80060f6:	3352      	adds	r3, #82	@ 0x52
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff febc 	bl	8005e76 <ld_dword>
 80060fe:	4603      	mov	r3, r0
 8006100:	4a05      	ldr	r2, [pc, #20]	@ (8006118 <check_fs+0xa8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d101      	bne.n	800610a <check_fs+0x9a>
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800610a:	2302      	movs	r3, #2
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	00544146 	.word	0x00544146
 8006118:	33544146 	.word	0x33544146

0800611c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b096      	sub	sp, #88	@ 0x58
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff ff58 	bl	8005fe6 <get_ldnumber>
 8006136:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800613a:	2b00      	cmp	r3, #0
 800613c:	da01      	bge.n	8006142 <find_volume+0x26>
 800613e:	230b      	movs	r3, #11
 8006140:	e265      	b.n	800660e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006142:	4a9f      	ldr	r2, [pc, #636]	@ (80063c0 <find_volume+0x2a4>)
 8006144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <find_volume+0x3a>
 8006152:	230c      	movs	r3, #12
 8006154:	e25b      	b.n	800660e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800615a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	f023 0301 	bic.w	r3, r3, #1
 8006162:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01a      	beq.n	80061a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fdc9 	bl	8005d08 <disk_status>
 8006176:	4603      	mov	r3, r0
 8006178:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800617c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10c      	bne.n	80061a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <find_volume+0x82>
 800618e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800619a:	230a      	movs	r3, #10
 800619c:	e237      	b.n	800660e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800619e:	2300      	movs	r3, #0
 80061a0:	e235      	b.n	800660e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80061a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80061a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80061b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fdc1 	bl	8005d3c <disk_initialize>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80061c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80061cc:	2303      	movs	r3, #3
 80061ce:	e21e      	b.n	800660e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <find_volume+0xca>
 80061d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80061e2:	230a      	movs	r3, #10
 80061e4:	e213      	b.n	800660e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	7858      	ldrb	r0, [r3, #1]
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	330c      	adds	r3, #12
 80061ee:	461a      	mov	r2, r3
 80061f0:	2102      	movs	r1, #2
 80061f2:	f7ff fe09 	bl	8005e08 <disk_ioctl>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <find_volume+0xe4>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e206      	b.n	800660e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006202:	899b      	ldrh	r3, [r3, #12]
 8006204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006208:	d80d      	bhi.n	8006226 <find_volume+0x10a>
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	899b      	ldrh	r3, [r3, #12]
 800620e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006212:	d308      	bcc.n	8006226 <find_volume+0x10a>
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	899b      	ldrh	r3, [r3, #12]
 8006218:	461a      	mov	r2, r3
 800621a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621c:	899b      	ldrh	r3, [r3, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <find_volume+0x10e>
 8006226:	2301      	movs	r3, #1
 8006228:	e1f1      	b.n	800660e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800622e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006230:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006232:	f7ff ff1d 	bl	8006070 <check_fs>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800623c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006240:	2b02      	cmp	r3, #2
 8006242:	d149      	bne.n	80062d8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006244:	2300      	movs	r3, #0
 8006246:	643b      	str	r3, [r7, #64]	@ 0x40
 8006248:	e01e      	b.n	8006288 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006258:	4413      	add	r3, r2
 800625a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	3304      	adds	r3, #4
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d006      	beq.n	8006274 <find_volume+0x158>
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	3308      	adds	r3, #8
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fe03 	bl	8005e76 <ld_dword>
 8006270:	4602      	mov	r2, r0
 8006272:	e000      	b.n	8006276 <find_volume+0x15a>
 8006274:	2200      	movs	r2, #0
 8006276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	3358      	adds	r3, #88	@ 0x58
 800627c:	443b      	add	r3, r7
 800627e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006284:	3301      	adds	r3, #1
 8006286:	643b      	str	r3, [r7, #64]	@ 0x40
 8006288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800628a:	2b03      	cmp	r3, #3
 800628c:	d9dd      	bls.n	800624a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800628e:	2300      	movs	r3, #0
 8006290:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <find_volume+0x182>
 8006298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800629a:	3b01      	subs	r3, #1
 800629c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800629e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	3358      	adds	r3, #88	@ 0x58
 80062a4:	443b      	add	r3, r7
 80062a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80062aa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <find_volume+0x1a2>
 80062b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062b6:	f7ff fedb 	bl	8006070 <check_fs>
 80062ba:	4603      	mov	r3, r0
 80062bc:	e000      	b.n	80062c0 <find_volume+0x1a4>
 80062be:	2303      	movs	r3, #3
 80062c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d905      	bls.n	80062d8 <find_volume+0x1bc>
 80062cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ce:	3301      	adds	r3, #1
 80062d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d9e2      	bls.n	800629e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d101      	bne.n	80062e4 <find_volume+0x1c8>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e194      	b.n	800660e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80062e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d901      	bls.n	80062f0 <find_volume+0x1d4>
 80062ec:	230d      	movs	r3, #13
 80062ee:	e18e      	b.n	800660e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80062f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f2:	3338      	adds	r3, #56	@ 0x38
 80062f4:	330b      	adds	r3, #11
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fda4 	bl	8005e44 <ld_word>
 80062fc:	4603      	mov	r3, r0
 80062fe:	461a      	mov	r2, r3
 8006300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006302:	899b      	ldrh	r3, [r3, #12]
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <find_volume+0x1f0>
 8006308:	230d      	movs	r3, #13
 800630a:	e180      	b.n	800660e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800630c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630e:	3338      	adds	r3, #56	@ 0x38
 8006310:	3316      	adds	r3, #22
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fd96 	bl	8005e44 <ld_word>
 8006318:	4603      	mov	r3, r0
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800631c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <find_volume+0x214>
 8006322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006324:	3338      	adds	r3, #56	@ 0x38
 8006326:	3324      	adds	r3, #36	@ 0x24
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff fda4 	bl	8005e76 <ld_dword>
 800632e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006332:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006334:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	789b      	ldrb	r3, [r3, #2]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d005      	beq.n	8006354 <find_volume+0x238>
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	789b      	ldrb	r3, [r3, #2]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d001      	beq.n	8006354 <find_volume+0x238>
 8006350:	230d      	movs	r3, #13
 8006352:	e15c      	b.n	800660e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006356:	789b      	ldrb	r3, [r3, #2]
 8006358:	461a      	mov	r2, r3
 800635a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635c:	fb02 f303 	mul.w	r3, r2, r3
 8006360:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006368:	461a      	mov	r2, r3
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006370:	895b      	ldrh	r3, [r3, #10]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <find_volume+0x26c>
 8006376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006378:	895b      	ldrh	r3, [r3, #10]
 800637a:	461a      	mov	r2, r3
 800637c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637e:	895b      	ldrh	r3, [r3, #10]
 8006380:	3b01      	subs	r3, #1
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <find_volume+0x270>
 8006388:	230d      	movs	r3, #13
 800638a:	e140      	b.n	800660e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	3338      	adds	r3, #56	@ 0x38
 8006390:	3311      	adds	r3, #17
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fd56 	bl	8005e44 <ld_word>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	891b      	ldrh	r3, [r3, #8]
 80063a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063a6:	8992      	ldrh	r2, [r2, #12]
 80063a8:	0952      	lsrs	r2, r2, #5
 80063aa:	b292      	uxth	r2, r2
 80063ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80063b0:	fb01 f202 	mul.w	r2, r1, r2
 80063b4:	1a9b      	subs	r3, r3, r2
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <find_volume+0x2a8>
 80063bc:	230d      	movs	r3, #13
 80063be:	e126      	b.n	800660e <find_volume+0x4f2>
 80063c0:	20001414 	.word	0x20001414

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80063c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c6:	3338      	adds	r3, #56	@ 0x38
 80063c8:	3313      	adds	r3, #19
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fd3a 	bl	8005e44 <ld_word>
 80063d0:	4603      	mov	r3, r0
 80063d2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80063d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <find_volume+0x2cc>
 80063da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063dc:	3338      	adds	r3, #56	@ 0x38
 80063de:	3320      	adds	r3, #32
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fd48 	bl	8005e76 <ld_dword>
 80063e6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80063e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ea:	3338      	adds	r3, #56	@ 0x38
 80063ec:	330e      	adds	r3, #14
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fd28 	bl	8005e44 <ld_word>
 80063f4:	4603      	mov	r3, r0
 80063f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80063f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <find_volume+0x2e6>
 80063fe:	230d      	movs	r3, #13
 8006400:	e105      	b.n	800660e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006402:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006406:	4413      	add	r3, r2
 8006408:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800640a:	8911      	ldrh	r1, [r2, #8]
 800640c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800640e:	8992      	ldrh	r2, [r2, #12]
 8006410:	0952      	lsrs	r2, r2, #5
 8006412:	b292      	uxth	r2, r2
 8006414:	fbb1 f2f2 	udiv	r2, r1, r2
 8006418:	b292      	uxth	r2, r2
 800641a:	4413      	add	r3, r2
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800641e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	429a      	cmp	r2, r3
 8006424:	d201      	bcs.n	800642a <find_volume+0x30e>
 8006426:	230d      	movs	r3, #13
 8006428:	e0f1      	b.n	800660e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800642a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006432:	8952      	ldrh	r2, [r2, #10]
 8006434:	fbb3 f3f2 	udiv	r3, r3, r2
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <find_volume+0x328>
 8006440:	230d      	movs	r3, #13
 8006442:	e0e4      	b.n	800660e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006444:	2303      	movs	r3, #3
 8006446:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006450:	4293      	cmp	r3, r2
 8006452:	d802      	bhi.n	800645a <find_volume+0x33e>
 8006454:	2302      	movs	r3, #2
 8006456:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006460:	4293      	cmp	r3, r2
 8006462:	d802      	bhi.n	800646a <find_volume+0x34e>
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	1c9a      	adds	r2, r3, #2
 800646e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006470:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006476:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006478:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800647a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800647c:	441a      	add	r2, r3
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006482:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	441a      	add	r2, r3
 8006488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800648c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006490:	2b03      	cmp	r3, #3
 8006492:	d11e      	bne.n	80064d2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	3338      	adds	r3, #56	@ 0x38
 8006498:	332a      	adds	r3, #42	@ 0x2a
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fcd2 	bl	8005e44 <ld_word>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <find_volume+0x38e>
 80064a6:	230d      	movs	r3, #13
 80064a8:	e0b1      	b.n	800660e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ac:	891b      	ldrh	r3, [r3, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <find_volume+0x39a>
 80064b2:	230d      	movs	r3, #13
 80064b4:	e0ab      	b.n	800660e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80064b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b8:	3338      	adds	r3, #56	@ 0x38
 80064ba:	332c      	adds	r3, #44	@ 0x2c
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fcda 	bl	8005e76 <ld_dword>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d0:	e01f      	b.n	8006512 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	891b      	ldrh	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <find_volume+0x3c2>
 80064da:	230d      	movs	r3, #13
 80064dc:	e097      	b.n	800660e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80064de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e4:	441a      	add	r2, r3
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80064ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d103      	bne.n	80064fa <find_volume+0x3de>
 80064f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	e00a      	b.n	8006510 <find_volume+0x3f4>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	085a      	lsrs	r2, r3, #1
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006510:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006518:	899b      	ldrh	r3, [r3, #12]
 800651a:	4619      	mov	r1, r3
 800651c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651e:	440b      	add	r3, r1
 8006520:	3b01      	subs	r3, #1
 8006522:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006524:	8989      	ldrh	r1, [r1, #12]
 8006526:	fbb3 f3f1 	udiv	r3, r3, r1
 800652a:	429a      	cmp	r2, r3
 800652c:	d201      	bcs.n	8006532 <find_volume+0x416>
 800652e:	230d      	movs	r3, #13
 8006530:	e06d      	b.n	800660e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	f04f 32ff 	mov.w	r2, #4294967295
 8006538:	619a      	str	r2, [r3, #24]
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006544:	2280      	movs	r2, #128	@ 0x80
 8006546:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006548:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800654c:	2b03      	cmp	r3, #3
 800654e:	d149      	bne.n	80065e4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	3338      	adds	r3, #56	@ 0x38
 8006554:	3330      	adds	r3, #48	@ 0x30
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fc74 	bl	8005e44 <ld_word>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d140      	bne.n	80065e4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006564:	3301      	adds	r3, #1
 8006566:	4619      	mov	r1, r3
 8006568:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800656a:	f7ff fd0f 	bl	8005f8c <move_window>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d137      	bne.n	80065e4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	2200      	movs	r2, #0
 8006578:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657c:	3338      	adds	r3, #56	@ 0x38
 800657e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fc5e 	bl	8005e44 <ld_word>
 8006588:	4603      	mov	r3, r0
 800658a:	461a      	mov	r2, r3
 800658c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006590:	429a      	cmp	r2, r3
 8006592:	d127      	bne.n	80065e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	3338      	adds	r3, #56	@ 0x38
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fc6c 	bl	8005e76 <ld_dword>
 800659e:	4603      	mov	r3, r0
 80065a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006618 <find_volume+0x4fc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d11e      	bne.n	80065e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80065a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a8:	3338      	adds	r3, #56	@ 0x38
 80065aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fc61 	bl	8005e76 <ld_dword>
 80065b4:	4603      	mov	r3, r0
 80065b6:	4a19      	ldr	r2, [pc, #100]	@ (800661c <find_volume+0x500>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d113      	bne.n	80065e4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80065bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065be:	3338      	adds	r3, #56	@ 0x38
 80065c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fc56 	bl	8005e76 <ld_dword>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80065d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d2:	3338      	adds	r3, #56	@ 0x38
 80065d4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fc4c 	bl	8005e76 <ld_dword>
 80065de:	4602      	mov	r2, r0
 80065e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80065e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80065ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80065ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <find_volume+0x504>)
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006620 <find_volume+0x504>)
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	4b09      	ldr	r3, [pc, #36]	@ (8006620 <find_volume+0x504>)
 80065fa:	881a      	ldrh	r2, [r3, #0]
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006602:	4a08      	ldr	r2, [pc, #32]	@ (8006624 <find_volume+0x508>)
 8006604:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006606:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006608:	f7ff fc58 	bl	8005ebc <clear_lock>
#endif
	return FR_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3758      	adds	r7, #88	@ 0x58
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	41615252 	.word	0x41615252
 800661c:	61417272 	.word	0x61417272
 8006620:	20001418 	.word	0x20001418
 8006624:	2000143c 	.word	0x2000143c

08006628 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800663a:	f107 0310 	add.w	r3, r7, #16
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fcd1 	bl	8005fe6 <get_ldnumber>
 8006644:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	2b00      	cmp	r3, #0
 800664a:	da01      	bge.n	8006650 <f_mount+0x28>
 800664c:	230b      	movs	r3, #11
 800664e:	e02b      	b.n	80066a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006650:	4a17      	ldr	r2, [pc, #92]	@ (80066b0 <f_mount+0x88>)
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006658:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006660:	69b8      	ldr	r0, [r7, #24]
 8006662:	f7ff fc2b 	bl	8005ebc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	490d      	ldr	r1, [pc, #52]	@ (80066b0 <f_mount+0x88>)
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <f_mount+0x66>
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d001      	beq.n	8006692 <f_mount+0x6a>
 800668e:	2300      	movs	r3, #0
 8006690:	e00a      	b.n	80066a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006692:	f107 010c 	add.w	r1, r7, #12
 8006696:	f107 0308 	add.w	r3, r7, #8
 800669a:	2200      	movs	r2, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fd3d 	bl	800611c <find_volume>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20001414 	.word	0x20001414

080066b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80066c2:	2301      	movs	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80066ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 80066cc:	7a5b      	ldrb	r3, [r3, #9]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d131      	bne.n	8006738 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80066d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 80066d6:	7a5b      	ldrb	r3, [r3, #9]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 80066de:	2100      	movs	r1, #0
 80066e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80066e2:	4b19      	ldr	r3, [pc, #100]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 80066e4:	7a5b      	ldrb	r3, [r3, #9]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	4a17      	ldr	r2, [pc, #92]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80066f2:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 80066f4:	7a5b      	ldrb	r3, [r3, #9]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b13      	ldr	r3, [pc, #76]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 80066fc:	4413      	add	r3, r2
 80066fe:	79fa      	ldrb	r2, [r7, #7]
 8006700:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006702:	4b11      	ldr	r3, [pc, #68]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 8006704:	7a5b      	ldrb	r3, [r3, #9]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	b2d1      	uxtb	r1, r2
 800670c:	4a0e      	ldr	r2, [pc, #56]	@ (8006748 <FATFS_LinkDriverEx+0x94>)
 800670e:	7251      	strb	r1, [r2, #9]
 8006710:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006712:	7dbb      	ldrb	r3, [r7, #22]
 8006714:	3330      	adds	r3, #48	@ 0x30
 8006716:	b2da      	uxtb	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3301      	adds	r3, #1
 8006720:	223a      	movs	r2, #58	@ 0x3a
 8006722:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	3302      	adds	r3, #2
 8006728:	222f      	movs	r2, #47	@ 0x2f
 800672a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	3303      	adds	r3, #3
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
}
 800673a:	4618      	mov	r0, r3
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	2000163c 	.word	0x2000163c

0800674c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006756:	2200      	movs	r2, #0
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ffaa 	bl	80066b4 <FATFS_LinkDriverEx>
 8006760:	4603      	mov	r3, r0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <__cvt>:
 800676a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800676e:	ec57 6b10 	vmov	r6, r7, d0
 8006772:	2f00      	cmp	r7, #0
 8006774:	460c      	mov	r4, r1
 8006776:	4619      	mov	r1, r3
 8006778:	463b      	mov	r3, r7
 800677a:	bfbb      	ittet	lt
 800677c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006780:	461f      	movlt	r7, r3
 8006782:	2300      	movge	r3, #0
 8006784:	232d      	movlt	r3, #45	@ 0x2d
 8006786:	700b      	strb	r3, [r1, #0]
 8006788:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800678a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800678e:	4691      	mov	r9, r2
 8006790:	f023 0820 	bic.w	r8, r3, #32
 8006794:	bfbc      	itt	lt
 8006796:	4632      	movlt	r2, r6
 8006798:	4616      	movlt	r6, r2
 800679a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800679e:	d005      	beq.n	80067ac <__cvt+0x42>
 80067a0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067a4:	d100      	bne.n	80067a8 <__cvt+0x3e>
 80067a6:	3401      	adds	r4, #1
 80067a8:	2102      	movs	r1, #2
 80067aa:	e000      	b.n	80067ae <__cvt+0x44>
 80067ac:	2103      	movs	r1, #3
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	ab02      	add	r3, sp, #8
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	ec47 6b10 	vmov	d0, r6, r7
 80067ba:	4653      	mov	r3, sl
 80067bc:	4622      	mov	r2, r4
 80067be:	f000 ff2b 	bl	8007618 <_dtoa_r>
 80067c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80067c6:	4605      	mov	r5, r0
 80067c8:	d119      	bne.n	80067fe <__cvt+0x94>
 80067ca:	f019 0f01 	tst.w	r9, #1
 80067ce:	d00e      	beq.n	80067ee <__cvt+0x84>
 80067d0:	eb00 0904 	add.w	r9, r0, r4
 80067d4:	2200      	movs	r2, #0
 80067d6:	2300      	movs	r3, #0
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7fa f99c 	bl	8000b18 <__aeabi_dcmpeq>
 80067e0:	b108      	cbz	r0, 80067e6 <__cvt+0x7c>
 80067e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80067e6:	2230      	movs	r2, #48	@ 0x30
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	454b      	cmp	r3, r9
 80067ec:	d31e      	bcc.n	800682c <__cvt+0xc2>
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067f2:	1b5b      	subs	r3, r3, r5
 80067f4:	4628      	mov	r0, r5
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	b004      	add	sp, #16
 80067fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006802:	eb00 0904 	add.w	r9, r0, r4
 8006806:	d1e5      	bne.n	80067d4 <__cvt+0x6a>
 8006808:	7803      	ldrb	r3, [r0, #0]
 800680a:	2b30      	cmp	r3, #48	@ 0x30
 800680c:	d10a      	bne.n	8006824 <__cvt+0xba>
 800680e:	2200      	movs	r2, #0
 8006810:	2300      	movs	r3, #0
 8006812:	4630      	mov	r0, r6
 8006814:	4639      	mov	r1, r7
 8006816:	f7fa f97f 	bl	8000b18 <__aeabi_dcmpeq>
 800681a:	b918      	cbnz	r0, 8006824 <__cvt+0xba>
 800681c:	f1c4 0401 	rsb	r4, r4, #1
 8006820:	f8ca 4000 	str.w	r4, [sl]
 8006824:	f8da 3000 	ldr.w	r3, [sl]
 8006828:	4499      	add	r9, r3
 800682a:	e7d3      	b.n	80067d4 <__cvt+0x6a>
 800682c:	1c59      	adds	r1, r3, #1
 800682e:	9103      	str	r1, [sp, #12]
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	e7d9      	b.n	80067e8 <__cvt+0x7e>

08006834 <__exponent>:
 8006834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006836:	2900      	cmp	r1, #0
 8006838:	bfba      	itte	lt
 800683a:	4249      	neglt	r1, r1
 800683c:	232d      	movlt	r3, #45	@ 0x2d
 800683e:	232b      	movge	r3, #43	@ 0x2b
 8006840:	2909      	cmp	r1, #9
 8006842:	7002      	strb	r2, [r0, #0]
 8006844:	7043      	strb	r3, [r0, #1]
 8006846:	dd29      	ble.n	800689c <__exponent+0x68>
 8006848:	f10d 0307 	add.w	r3, sp, #7
 800684c:	461d      	mov	r5, r3
 800684e:	270a      	movs	r7, #10
 8006850:	461a      	mov	r2, r3
 8006852:	fbb1 f6f7 	udiv	r6, r1, r7
 8006856:	fb07 1416 	mls	r4, r7, r6, r1
 800685a:	3430      	adds	r4, #48	@ 0x30
 800685c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006860:	460c      	mov	r4, r1
 8006862:	2c63      	cmp	r4, #99	@ 0x63
 8006864:	f103 33ff 	add.w	r3, r3, #4294967295
 8006868:	4631      	mov	r1, r6
 800686a:	dcf1      	bgt.n	8006850 <__exponent+0x1c>
 800686c:	3130      	adds	r1, #48	@ 0x30
 800686e:	1e94      	subs	r4, r2, #2
 8006870:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006874:	1c41      	adds	r1, r0, #1
 8006876:	4623      	mov	r3, r4
 8006878:	42ab      	cmp	r3, r5
 800687a:	d30a      	bcc.n	8006892 <__exponent+0x5e>
 800687c:	f10d 0309 	add.w	r3, sp, #9
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	42ac      	cmp	r4, r5
 8006884:	bf88      	it	hi
 8006886:	2300      	movhi	r3, #0
 8006888:	3302      	adds	r3, #2
 800688a:	4403      	add	r3, r0
 800688c:	1a18      	subs	r0, r3, r0
 800688e:	b003      	add	sp, #12
 8006890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006892:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006896:	f801 6f01 	strb.w	r6, [r1, #1]!
 800689a:	e7ed      	b.n	8006878 <__exponent+0x44>
 800689c:	2330      	movs	r3, #48	@ 0x30
 800689e:	3130      	adds	r1, #48	@ 0x30
 80068a0:	7083      	strb	r3, [r0, #2]
 80068a2:	70c1      	strb	r1, [r0, #3]
 80068a4:	1d03      	adds	r3, r0, #4
 80068a6:	e7f1      	b.n	800688c <__exponent+0x58>

080068a8 <_printf_float>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	b08d      	sub	sp, #52	@ 0x34
 80068ae:	460c      	mov	r4, r1
 80068b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80068b4:	4616      	mov	r6, r2
 80068b6:	461f      	mov	r7, r3
 80068b8:	4605      	mov	r5, r0
 80068ba:	f000 fdab 	bl	8007414 <_localeconv_r>
 80068be:	6803      	ldr	r3, [r0, #0]
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7f9 fcfc 	bl	80002c0 <strlen>
 80068c8:	2300      	movs	r3, #0
 80068ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80068cc:	f8d8 3000 	ldr.w	r3, [r8]
 80068d0:	9005      	str	r0, [sp, #20]
 80068d2:	3307      	adds	r3, #7
 80068d4:	f023 0307 	bic.w	r3, r3, #7
 80068d8:	f103 0208 	add.w	r2, r3, #8
 80068dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068e0:	f8d4 b000 	ldr.w	fp, [r4]
 80068e4:	f8c8 2000 	str.w	r2, [r8]
 80068e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068f0:	9307      	str	r3, [sp, #28]
 80068f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80068f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006b70 <_printf_float+0x2c8>)
 8006900:	f04f 32ff 	mov.w	r2, #4294967295
 8006904:	f7fa f93a 	bl	8000b7c <__aeabi_dcmpun>
 8006908:	bb70      	cbnz	r0, 8006968 <_printf_float+0xc0>
 800690a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800690e:	4b98      	ldr	r3, [pc, #608]	@ (8006b70 <_printf_float+0x2c8>)
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	f7fa f914 	bl	8000b40 <__aeabi_dcmple>
 8006918:	bb30      	cbnz	r0, 8006968 <_printf_float+0xc0>
 800691a:	2200      	movs	r2, #0
 800691c:	2300      	movs	r3, #0
 800691e:	4640      	mov	r0, r8
 8006920:	4649      	mov	r1, r9
 8006922:	f7fa f903 	bl	8000b2c <__aeabi_dcmplt>
 8006926:	b110      	cbz	r0, 800692e <_printf_float+0x86>
 8006928:	232d      	movs	r3, #45	@ 0x2d
 800692a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800692e:	4a91      	ldr	r2, [pc, #580]	@ (8006b74 <_printf_float+0x2cc>)
 8006930:	4b91      	ldr	r3, [pc, #580]	@ (8006b78 <_printf_float+0x2d0>)
 8006932:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006936:	bf8c      	ite	hi
 8006938:	4690      	movhi	r8, r2
 800693a:	4698      	movls	r8, r3
 800693c:	2303      	movs	r3, #3
 800693e:	6123      	str	r3, [r4, #16]
 8006940:	f02b 0304 	bic.w	r3, fp, #4
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	f04f 0900 	mov.w	r9, #0
 800694a:	9700      	str	r7, [sp, #0]
 800694c:	4633      	mov	r3, r6
 800694e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f9d2 	bl	8006cfc <_printf_common>
 8006958:	3001      	adds	r0, #1
 800695a:	f040 808d 	bne.w	8006a78 <_printf_float+0x1d0>
 800695e:	f04f 30ff 	mov.w	r0, #4294967295
 8006962:	b00d      	add	sp, #52	@ 0x34
 8006964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	f7fa f904 	bl	8000b7c <__aeabi_dcmpun>
 8006974:	b140      	cbz	r0, 8006988 <_printf_float+0xe0>
 8006976:	464b      	mov	r3, r9
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfbc      	itt	lt
 800697c:	232d      	movlt	r3, #45	@ 0x2d
 800697e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006982:	4a7e      	ldr	r2, [pc, #504]	@ (8006b7c <_printf_float+0x2d4>)
 8006984:	4b7e      	ldr	r3, [pc, #504]	@ (8006b80 <_printf_float+0x2d8>)
 8006986:	e7d4      	b.n	8006932 <_printf_float+0x8a>
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800698e:	9206      	str	r2, [sp, #24]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	d13b      	bne.n	8006a0c <_printf_float+0x164>
 8006994:	2306      	movs	r3, #6
 8006996:	6063      	str	r3, [r4, #4]
 8006998:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800699c:	2300      	movs	r3, #0
 800699e:	6022      	str	r2, [r4, #0]
 80069a0:	9303      	str	r3, [sp, #12]
 80069a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80069a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069a8:	ab09      	add	r3, sp, #36	@ 0x24
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	6861      	ldr	r1, [r4, #4]
 80069ae:	ec49 8b10 	vmov	d0, r8, r9
 80069b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80069b6:	4628      	mov	r0, r5
 80069b8:	f7ff fed7 	bl	800676a <__cvt>
 80069bc:	9b06      	ldr	r3, [sp, #24]
 80069be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069c0:	2b47      	cmp	r3, #71	@ 0x47
 80069c2:	4680      	mov	r8, r0
 80069c4:	d129      	bne.n	8006a1a <_printf_float+0x172>
 80069c6:	1cc8      	adds	r0, r1, #3
 80069c8:	db02      	blt.n	80069d0 <_printf_float+0x128>
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	4299      	cmp	r1, r3
 80069ce:	dd41      	ble.n	8006a54 <_printf_float+0x1ac>
 80069d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80069d4:	fa5f fa8a 	uxtb.w	sl, sl
 80069d8:	3901      	subs	r1, #1
 80069da:	4652      	mov	r2, sl
 80069dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80069e2:	f7ff ff27 	bl	8006834 <__exponent>
 80069e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069e8:	1813      	adds	r3, r2, r0
 80069ea:	2a01      	cmp	r2, #1
 80069ec:	4681      	mov	r9, r0
 80069ee:	6123      	str	r3, [r4, #16]
 80069f0:	dc02      	bgt.n	80069f8 <_printf_float+0x150>
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	07d2      	lsls	r2, r2, #31
 80069f6:	d501      	bpl.n	80069fc <_printf_float+0x154>
 80069f8:	3301      	adds	r3, #1
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0a2      	beq.n	800694a <_printf_float+0xa2>
 8006a04:	232d      	movs	r3, #45	@ 0x2d
 8006a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a0a:	e79e      	b.n	800694a <_printf_float+0xa2>
 8006a0c:	9a06      	ldr	r2, [sp, #24]
 8006a0e:	2a47      	cmp	r2, #71	@ 0x47
 8006a10:	d1c2      	bne.n	8006998 <_printf_float+0xf0>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1c0      	bne.n	8006998 <_printf_float+0xf0>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e7bd      	b.n	8006996 <_printf_float+0xee>
 8006a1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a1e:	d9db      	bls.n	80069d8 <_printf_float+0x130>
 8006a20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a24:	d118      	bne.n	8006a58 <_printf_float+0x1b0>
 8006a26:	2900      	cmp	r1, #0
 8006a28:	6863      	ldr	r3, [r4, #4]
 8006a2a:	dd0b      	ble.n	8006a44 <_printf_float+0x19c>
 8006a2c:	6121      	str	r1, [r4, #16]
 8006a2e:	b913      	cbnz	r3, 8006a36 <_printf_float+0x18e>
 8006a30:	6822      	ldr	r2, [r4, #0]
 8006a32:	07d0      	lsls	r0, r2, #31
 8006a34:	d502      	bpl.n	8006a3c <_printf_float+0x194>
 8006a36:	3301      	adds	r3, #1
 8006a38:	440b      	add	r3, r1
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a3e:	f04f 0900 	mov.w	r9, #0
 8006a42:	e7db      	b.n	80069fc <_printf_float+0x154>
 8006a44:	b913      	cbnz	r3, 8006a4c <_printf_float+0x1a4>
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	07d2      	lsls	r2, r2, #31
 8006a4a:	d501      	bpl.n	8006a50 <_printf_float+0x1a8>
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	e7f4      	b.n	8006a3a <_printf_float+0x192>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e7f2      	b.n	8006a3a <_printf_float+0x192>
 8006a54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	db05      	blt.n	8006a6a <_printf_float+0x1c2>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	6121      	str	r1, [r4, #16]
 8006a62:	07d8      	lsls	r0, r3, #31
 8006a64:	d5ea      	bpl.n	8006a3c <_printf_float+0x194>
 8006a66:	1c4b      	adds	r3, r1, #1
 8006a68:	e7e7      	b.n	8006a3a <_printf_float+0x192>
 8006a6a:	2900      	cmp	r1, #0
 8006a6c:	bfd4      	ite	le
 8006a6e:	f1c1 0202 	rsble	r2, r1, #2
 8006a72:	2201      	movgt	r2, #1
 8006a74:	4413      	add	r3, r2
 8006a76:	e7e0      	b.n	8006a3a <_printf_float+0x192>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	055a      	lsls	r2, r3, #21
 8006a7c:	d407      	bmi.n	8006a8e <_printf_float+0x1e6>
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	4642      	mov	r2, r8
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d12b      	bne.n	8006ae4 <_printf_float+0x23c>
 8006a8c:	e767      	b.n	800695e <_printf_float+0xb6>
 8006a8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a92:	f240 80dd 	bls.w	8006c50 <_printf_float+0x3a8>
 8006a96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f7fa f83b 	bl	8000b18 <__aeabi_dcmpeq>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d033      	beq.n	8006b0e <_printf_float+0x266>
 8006aa6:	4a37      	ldr	r2, [pc, #220]	@ (8006b84 <_printf_float+0x2dc>)
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f af54 	beq.w	800695e <_printf_float+0xb6>
 8006ab6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006aba:	4543      	cmp	r3, r8
 8006abc:	db02      	blt.n	8006ac4 <_printf_float+0x21c>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	07d8      	lsls	r0, r3, #31
 8006ac2:	d50f      	bpl.n	8006ae4 <_printf_float+0x23c>
 8006ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f af45 	beq.w	800695e <_printf_float+0xb6>
 8006ad4:	f04f 0900 	mov.w	r9, #0
 8006ad8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006adc:	f104 0a1a 	add.w	sl, r4, #26
 8006ae0:	45c8      	cmp	r8, r9
 8006ae2:	dc09      	bgt.n	8006af8 <_printf_float+0x250>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	079b      	lsls	r3, r3, #30
 8006ae8:	f100 8103 	bmi.w	8006cf2 <_printf_float+0x44a>
 8006aec:	68e0      	ldr	r0, [r4, #12]
 8006aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006af0:	4298      	cmp	r0, r3
 8006af2:	bfb8      	it	lt
 8006af4:	4618      	movlt	r0, r3
 8006af6:	e734      	b.n	8006962 <_printf_float+0xba>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4652      	mov	r2, sl
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f af2b 	beq.w	800695e <_printf_float+0xb6>
 8006b08:	f109 0901 	add.w	r9, r9, #1
 8006b0c:	e7e8      	b.n	8006ae0 <_printf_float+0x238>
 8006b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dc39      	bgt.n	8006b88 <_printf_float+0x2e0>
 8006b14:	4a1b      	ldr	r2, [pc, #108]	@ (8006b84 <_printf_float+0x2dc>)
 8006b16:	2301      	movs	r3, #1
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f43f af1d 	beq.w	800695e <_printf_float+0xb6>
 8006b24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b28:	ea59 0303 	orrs.w	r3, r9, r3
 8006b2c:	d102      	bne.n	8006b34 <_printf_float+0x28c>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	07d9      	lsls	r1, r3, #31
 8006b32:	d5d7      	bpl.n	8006ae4 <_printf_float+0x23c>
 8006b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b38:	4631      	mov	r1, r6
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f43f af0d 	beq.w	800695e <_printf_float+0xb6>
 8006b44:	f04f 0a00 	mov.w	sl, #0
 8006b48:	f104 0b1a 	add.w	fp, r4, #26
 8006b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4e:	425b      	negs	r3, r3
 8006b50:	4553      	cmp	r3, sl
 8006b52:	dc01      	bgt.n	8006b58 <_printf_float+0x2b0>
 8006b54:	464b      	mov	r3, r9
 8006b56:	e793      	b.n	8006a80 <_printf_float+0x1d8>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	465a      	mov	r2, fp
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	47b8      	blx	r7
 8006b62:	3001      	adds	r0, #1
 8006b64:	f43f aefb 	beq.w	800695e <_printf_float+0xb6>
 8006b68:	f10a 0a01 	add.w	sl, sl, #1
 8006b6c:	e7ee      	b.n	8006b4c <_printf_float+0x2a4>
 8006b6e:	bf00      	nop
 8006b70:	7fefffff 	.word	0x7fefffff
 8006b74:	080091c0 	.word	0x080091c0
 8006b78:	080091bc 	.word	0x080091bc
 8006b7c:	080091c8 	.word	0x080091c8
 8006b80:	080091c4 	.word	0x080091c4
 8006b84:	080091cc 	.word	0x080091cc
 8006b88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b8e:	4553      	cmp	r3, sl
 8006b90:	bfa8      	it	ge
 8006b92:	4653      	movge	r3, sl
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	4699      	mov	r9, r3
 8006b98:	dc36      	bgt.n	8006c08 <_printf_float+0x360>
 8006b9a:	f04f 0b00 	mov.w	fp, #0
 8006b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba2:	f104 021a 	add.w	r2, r4, #26
 8006ba6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ba8:	9306      	str	r3, [sp, #24]
 8006baa:	eba3 0309 	sub.w	r3, r3, r9
 8006bae:	455b      	cmp	r3, fp
 8006bb0:	dc31      	bgt.n	8006c16 <_printf_float+0x36e>
 8006bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb4:	459a      	cmp	sl, r3
 8006bb6:	dc3a      	bgt.n	8006c2e <_printf_float+0x386>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	07da      	lsls	r2, r3, #31
 8006bbc:	d437      	bmi.n	8006c2e <_printf_float+0x386>
 8006bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc0:	ebaa 0903 	sub.w	r9, sl, r3
 8006bc4:	9b06      	ldr	r3, [sp, #24]
 8006bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8006bca:	4599      	cmp	r9, r3
 8006bcc:	bfa8      	it	ge
 8006bce:	4699      	movge	r9, r3
 8006bd0:	f1b9 0f00 	cmp.w	r9, #0
 8006bd4:	dc33      	bgt.n	8006c3e <_printf_float+0x396>
 8006bd6:	f04f 0800 	mov.w	r8, #0
 8006bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bde:	f104 0b1a 	add.w	fp, r4, #26
 8006be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be4:	ebaa 0303 	sub.w	r3, sl, r3
 8006be8:	eba3 0309 	sub.w	r3, r3, r9
 8006bec:	4543      	cmp	r3, r8
 8006bee:	f77f af79 	ble.w	8006ae4 <_printf_float+0x23c>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	465a      	mov	r2, fp
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f aeae 	beq.w	800695e <_printf_float+0xb6>
 8006c02:	f108 0801 	add.w	r8, r8, #1
 8006c06:	e7ec      	b.n	8006be2 <_printf_float+0x33a>
 8006c08:	4642      	mov	r2, r8
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b8      	blx	r7
 8006c10:	3001      	adds	r0, #1
 8006c12:	d1c2      	bne.n	8006b9a <_printf_float+0x2f2>
 8006c14:	e6a3      	b.n	800695e <_printf_float+0xb6>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	9206      	str	r2, [sp, #24]
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	f43f ae9c 	beq.w	800695e <_printf_float+0xb6>
 8006c26:	9a06      	ldr	r2, [sp, #24]
 8006c28:	f10b 0b01 	add.w	fp, fp, #1
 8006c2c:	e7bb      	b.n	8006ba6 <_printf_float+0x2fe>
 8006c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d1c0      	bne.n	8006bbe <_printf_float+0x316>
 8006c3c:	e68f      	b.n	800695e <_printf_float+0xb6>
 8006c3e:	9a06      	ldr	r2, [sp, #24]
 8006c40:	464b      	mov	r3, r9
 8006c42:	4442      	add	r2, r8
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d1c3      	bne.n	8006bd6 <_printf_float+0x32e>
 8006c4e:	e686      	b.n	800695e <_printf_float+0xb6>
 8006c50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c54:	f1ba 0f01 	cmp.w	sl, #1
 8006c58:	dc01      	bgt.n	8006c5e <_printf_float+0x3b6>
 8006c5a:	07db      	lsls	r3, r3, #31
 8006c5c:	d536      	bpl.n	8006ccc <_printf_float+0x424>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4642      	mov	r2, r8
 8006c62:	4631      	mov	r1, r6
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f43f ae78 	beq.w	800695e <_printf_float+0xb6>
 8006c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c72:	4631      	mov	r1, r6
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	f43f ae70 	beq.w	800695e <_printf_float+0xb6>
 8006c7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c82:	2200      	movs	r2, #0
 8006c84:	2300      	movs	r3, #0
 8006c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c8a:	f7f9 ff45 	bl	8000b18 <__aeabi_dcmpeq>
 8006c8e:	b9c0      	cbnz	r0, 8006cc2 <_printf_float+0x41a>
 8006c90:	4653      	mov	r3, sl
 8006c92:	f108 0201 	add.w	r2, r8, #1
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d10c      	bne.n	8006cba <_printf_float+0x412>
 8006ca0:	e65d      	b.n	800695e <_printf_float+0xb6>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	465a      	mov	r2, fp
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	f43f ae56 	beq.w	800695e <_printf_float+0xb6>
 8006cb2:	f108 0801 	add.w	r8, r8, #1
 8006cb6:	45d0      	cmp	r8, sl
 8006cb8:	dbf3      	blt.n	8006ca2 <_printf_float+0x3fa>
 8006cba:	464b      	mov	r3, r9
 8006cbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006cc0:	e6df      	b.n	8006a82 <_printf_float+0x1da>
 8006cc2:	f04f 0800 	mov.w	r8, #0
 8006cc6:	f104 0b1a 	add.w	fp, r4, #26
 8006cca:	e7f4      	b.n	8006cb6 <_printf_float+0x40e>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4642      	mov	r2, r8
 8006cd0:	e7e1      	b.n	8006c96 <_printf_float+0x3ee>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	464a      	mov	r2, r9
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae3e 	beq.w	800695e <_printf_float+0xb6>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cea:	1a5b      	subs	r3, r3, r1
 8006cec:	4543      	cmp	r3, r8
 8006cee:	dcf0      	bgt.n	8006cd2 <_printf_float+0x42a>
 8006cf0:	e6fc      	b.n	8006aec <_printf_float+0x244>
 8006cf2:	f04f 0800 	mov.w	r8, #0
 8006cf6:	f104 0919 	add.w	r9, r4, #25
 8006cfa:	e7f4      	b.n	8006ce6 <_printf_float+0x43e>

08006cfc <_printf_common>:
 8006cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d00:	4616      	mov	r6, r2
 8006d02:	4698      	mov	r8, r3
 8006d04:	688a      	ldr	r2, [r1, #8]
 8006d06:	690b      	ldr	r3, [r1, #16]
 8006d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	bfb8      	it	lt
 8006d10:	4613      	movlt	r3, r2
 8006d12:	6033      	str	r3, [r6, #0]
 8006d14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d18:	4607      	mov	r7, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	b10a      	cbz	r2, 8006d22 <_printf_common+0x26>
 8006d1e:	3301      	adds	r3, #1
 8006d20:	6033      	str	r3, [r6, #0]
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	0699      	lsls	r1, r3, #26
 8006d26:	bf42      	ittt	mi
 8006d28:	6833      	ldrmi	r3, [r6, #0]
 8006d2a:	3302      	addmi	r3, #2
 8006d2c:	6033      	strmi	r3, [r6, #0]
 8006d2e:	6825      	ldr	r5, [r4, #0]
 8006d30:	f015 0506 	ands.w	r5, r5, #6
 8006d34:	d106      	bne.n	8006d44 <_printf_common+0x48>
 8006d36:	f104 0a19 	add.w	sl, r4, #25
 8006d3a:	68e3      	ldr	r3, [r4, #12]
 8006d3c:	6832      	ldr	r2, [r6, #0]
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	42ab      	cmp	r3, r5
 8006d42:	dc26      	bgt.n	8006d92 <_printf_common+0x96>
 8006d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	3b00      	subs	r3, #0
 8006d4c:	bf18      	it	ne
 8006d4e:	2301      	movne	r3, #1
 8006d50:	0692      	lsls	r2, r2, #26
 8006d52:	d42b      	bmi.n	8006dac <_printf_common+0xb0>
 8006d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d58:	4641      	mov	r1, r8
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	47c8      	blx	r9
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d01e      	beq.n	8006da0 <_printf_common+0xa4>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	6922      	ldr	r2, [r4, #16]
 8006d66:	f003 0306 	and.w	r3, r3, #6
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	bf02      	ittt	eq
 8006d6e:	68e5      	ldreq	r5, [r4, #12]
 8006d70:	6833      	ldreq	r3, [r6, #0]
 8006d72:	1aed      	subeq	r5, r5, r3
 8006d74:	68a3      	ldr	r3, [r4, #8]
 8006d76:	bf0c      	ite	eq
 8006d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d7c:	2500      	movne	r5, #0
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	bfc4      	itt	gt
 8006d82:	1a9b      	subgt	r3, r3, r2
 8006d84:	18ed      	addgt	r5, r5, r3
 8006d86:	2600      	movs	r6, #0
 8006d88:	341a      	adds	r4, #26
 8006d8a:	42b5      	cmp	r5, r6
 8006d8c:	d11a      	bne.n	8006dc4 <_printf_common+0xc8>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e008      	b.n	8006da4 <_printf_common+0xa8>
 8006d92:	2301      	movs	r3, #1
 8006d94:	4652      	mov	r2, sl
 8006d96:	4641      	mov	r1, r8
 8006d98:	4638      	mov	r0, r7
 8006d9a:	47c8      	blx	r9
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d103      	bne.n	8006da8 <_printf_common+0xac>
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da8:	3501      	adds	r5, #1
 8006daa:	e7c6      	b.n	8006d3a <_printf_common+0x3e>
 8006dac:	18e1      	adds	r1, r4, r3
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	2030      	movs	r0, #48	@ 0x30
 8006db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006db6:	4422      	add	r2, r4
 8006db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	e7c7      	b.n	8006d54 <_printf_common+0x58>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	4641      	mov	r1, r8
 8006dca:	4638      	mov	r0, r7
 8006dcc:	47c8      	blx	r9
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d0e6      	beq.n	8006da0 <_printf_common+0xa4>
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7d9      	b.n	8006d8a <_printf_common+0x8e>
	...

08006dd8 <_printf_i>:
 8006dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	7e0f      	ldrb	r7, [r1, #24]
 8006dde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006de0:	2f78      	cmp	r7, #120	@ 0x78
 8006de2:	4691      	mov	r9, r2
 8006de4:	4680      	mov	r8, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	469a      	mov	sl, r3
 8006dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dee:	d807      	bhi.n	8006e00 <_printf_i+0x28>
 8006df0:	2f62      	cmp	r7, #98	@ 0x62
 8006df2:	d80a      	bhi.n	8006e0a <_printf_i+0x32>
 8006df4:	2f00      	cmp	r7, #0
 8006df6:	f000 80d1 	beq.w	8006f9c <_printf_i+0x1c4>
 8006dfa:	2f58      	cmp	r7, #88	@ 0x58
 8006dfc:	f000 80b8 	beq.w	8006f70 <_printf_i+0x198>
 8006e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e08:	e03a      	b.n	8006e80 <_printf_i+0xa8>
 8006e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e0e:	2b15      	cmp	r3, #21
 8006e10:	d8f6      	bhi.n	8006e00 <_printf_i+0x28>
 8006e12:	a101      	add	r1, pc, #4	@ (adr r1, 8006e18 <_printf_i+0x40>)
 8006e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e18:	08006e71 	.word	0x08006e71
 8006e1c:	08006e85 	.word	0x08006e85
 8006e20:	08006e01 	.word	0x08006e01
 8006e24:	08006e01 	.word	0x08006e01
 8006e28:	08006e01 	.word	0x08006e01
 8006e2c:	08006e01 	.word	0x08006e01
 8006e30:	08006e85 	.word	0x08006e85
 8006e34:	08006e01 	.word	0x08006e01
 8006e38:	08006e01 	.word	0x08006e01
 8006e3c:	08006e01 	.word	0x08006e01
 8006e40:	08006e01 	.word	0x08006e01
 8006e44:	08006f83 	.word	0x08006f83
 8006e48:	08006eaf 	.word	0x08006eaf
 8006e4c:	08006f3d 	.word	0x08006f3d
 8006e50:	08006e01 	.word	0x08006e01
 8006e54:	08006e01 	.word	0x08006e01
 8006e58:	08006fa5 	.word	0x08006fa5
 8006e5c:	08006e01 	.word	0x08006e01
 8006e60:	08006eaf 	.word	0x08006eaf
 8006e64:	08006e01 	.word	0x08006e01
 8006e68:	08006e01 	.word	0x08006e01
 8006e6c:	08006f45 	.word	0x08006f45
 8006e70:	6833      	ldr	r3, [r6, #0]
 8006e72:	1d1a      	adds	r2, r3, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6032      	str	r2, [r6, #0]
 8006e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e80:	2301      	movs	r3, #1
 8006e82:	e09c      	b.n	8006fbe <_printf_i+0x1e6>
 8006e84:	6833      	ldr	r3, [r6, #0]
 8006e86:	6820      	ldr	r0, [r4, #0]
 8006e88:	1d19      	adds	r1, r3, #4
 8006e8a:	6031      	str	r1, [r6, #0]
 8006e8c:	0606      	lsls	r6, r0, #24
 8006e8e:	d501      	bpl.n	8006e94 <_printf_i+0xbc>
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	e003      	b.n	8006e9c <_printf_i+0xc4>
 8006e94:	0645      	lsls	r5, r0, #25
 8006e96:	d5fb      	bpl.n	8006e90 <_printf_i+0xb8>
 8006e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	da03      	bge.n	8006ea8 <_printf_i+0xd0>
 8006ea0:	232d      	movs	r3, #45	@ 0x2d
 8006ea2:	426d      	negs	r5, r5
 8006ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ea8:	4858      	ldr	r0, [pc, #352]	@ (800700c <_printf_i+0x234>)
 8006eaa:	230a      	movs	r3, #10
 8006eac:	e011      	b.n	8006ed2 <_printf_i+0xfa>
 8006eae:	6821      	ldr	r1, [r4, #0]
 8006eb0:	6833      	ldr	r3, [r6, #0]
 8006eb2:	0608      	lsls	r0, r1, #24
 8006eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006eb8:	d402      	bmi.n	8006ec0 <_printf_i+0xe8>
 8006eba:	0649      	lsls	r1, r1, #25
 8006ebc:	bf48      	it	mi
 8006ebe:	b2ad      	uxthmi	r5, r5
 8006ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ec2:	4852      	ldr	r0, [pc, #328]	@ (800700c <_printf_i+0x234>)
 8006ec4:	6033      	str	r3, [r6, #0]
 8006ec6:	bf14      	ite	ne
 8006ec8:	230a      	movne	r3, #10
 8006eca:	2308      	moveq	r3, #8
 8006ecc:	2100      	movs	r1, #0
 8006ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ed2:	6866      	ldr	r6, [r4, #4]
 8006ed4:	60a6      	str	r6, [r4, #8]
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	db05      	blt.n	8006ee6 <_printf_i+0x10e>
 8006eda:	6821      	ldr	r1, [r4, #0]
 8006edc:	432e      	orrs	r6, r5
 8006ede:	f021 0104 	bic.w	r1, r1, #4
 8006ee2:	6021      	str	r1, [r4, #0]
 8006ee4:	d04b      	beq.n	8006f7e <_printf_i+0x1a6>
 8006ee6:	4616      	mov	r6, r2
 8006ee8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eec:	fb03 5711 	mls	r7, r3, r1, r5
 8006ef0:	5dc7      	ldrb	r7, [r0, r7]
 8006ef2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ef6:	462f      	mov	r7, r5
 8006ef8:	42bb      	cmp	r3, r7
 8006efa:	460d      	mov	r5, r1
 8006efc:	d9f4      	bls.n	8006ee8 <_printf_i+0x110>
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	d10b      	bne.n	8006f1a <_printf_i+0x142>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	07df      	lsls	r7, r3, #31
 8006f06:	d508      	bpl.n	8006f1a <_printf_i+0x142>
 8006f08:	6923      	ldr	r3, [r4, #16]
 8006f0a:	6861      	ldr	r1, [r4, #4]
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	bfde      	ittt	le
 8006f10:	2330      	movle	r3, #48	@ 0x30
 8006f12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f1a:	1b92      	subs	r2, r2, r6
 8006f1c:	6122      	str	r2, [r4, #16]
 8006f1e:	f8cd a000 	str.w	sl, [sp]
 8006f22:	464b      	mov	r3, r9
 8006f24:	aa03      	add	r2, sp, #12
 8006f26:	4621      	mov	r1, r4
 8006f28:	4640      	mov	r0, r8
 8006f2a:	f7ff fee7 	bl	8006cfc <_printf_common>
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d14a      	bne.n	8006fc8 <_printf_i+0x1f0>
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295
 8006f36:	b004      	add	sp, #16
 8006f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	f043 0320 	orr.w	r3, r3, #32
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	4832      	ldr	r0, [pc, #200]	@ (8007010 <_printf_i+0x238>)
 8006f46:	2778      	movs	r7, #120	@ 0x78
 8006f48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	6831      	ldr	r1, [r6, #0]
 8006f50:	061f      	lsls	r7, r3, #24
 8006f52:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f56:	d402      	bmi.n	8006f5e <_printf_i+0x186>
 8006f58:	065f      	lsls	r7, r3, #25
 8006f5a:	bf48      	it	mi
 8006f5c:	b2ad      	uxthmi	r5, r5
 8006f5e:	6031      	str	r1, [r6, #0]
 8006f60:	07d9      	lsls	r1, r3, #31
 8006f62:	bf44      	itt	mi
 8006f64:	f043 0320 	orrmi.w	r3, r3, #32
 8006f68:	6023      	strmi	r3, [r4, #0]
 8006f6a:	b11d      	cbz	r5, 8006f74 <_printf_i+0x19c>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	e7ad      	b.n	8006ecc <_printf_i+0xf4>
 8006f70:	4826      	ldr	r0, [pc, #152]	@ (800700c <_printf_i+0x234>)
 8006f72:	e7e9      	b.n	8006f48 <_printf_i+0x170>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	f023 0320 	bic.w	r3, r3, #32
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	e7f6      	b.n	8006f6c <_printf_i+0x194>
 8006f7e:	4616      	mov	r6, r2
 8006f80:	e7bd      	b.n	8006efe <_printf_i+0x126>
 8006f82:	6833      	ldr	r3, [r6, #0]
 8006f84:	6825      	ldr	r5, [r4, #0]
 8006f86:	6961      	ldr	r1, [r4, #20]
 8006f88:	1d18      	adds	r0, r3, #4
 8006f8a:	6030      	str	r0, [r6, #0]
 8006f8c:	062e      	lsls	r6, r5, #24
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	d501      	bpl.n	8006f96 <_printf_i+0x1be>
 8006f92:	6019      	str	r1, [r3, #0]
 8006f94:	e002      	b.n	8006f9c <_printf_i+0x1c4>
 8006f96:	0668      	lsls	r0, r5, #25
 8006f98:	d5fb      	bpl.n	8006f92 <_printf_i+0x1ba>
 8006f9a:	8019      	strh	r1, [r3, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6123      	str	r3, [r4, #16]
 8006fa0:	4616      	mov	r6, r2
 8006fa2:	e7bc      	b.n	8006f1e <_printf_i+0x146>
 8006fa4:	6833      	ldr	r3, [r6, #0]
 8006fa6:	1d1a      	adds	r2, r3, #4
 8006fa8:	6032      	str	r2, [r6, #0]
 8006faa:	681e      	ldr	r6, [r3, #0]
 8006fac:	6862      	ldr	r2, [r4, #4]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7f9 f935 	bl	8000220 <memchr>
 8006fb6:	b108      	cbz	r0, 8006fbc <_printf_i+0x1e4>
 8006fb8:	1b80      	subs	r0, r0, r6
 8006fba:	6060      	str	r0, [r4, #4]
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc6:	e7aa      	b.n	8006f1e <_printf_i+0x146>
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	4632      	mov	r2, r6
 8006fcc:	4649      	mov	r1, r9
 8006fce:	4640      	mov	r0, r8
 8006fd0:	47d0      	blx	sl
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d0ad      	beq.n	8006f32 <_printf_i+0x15a>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	079b      	lsls	r3, r3, #30
 8006fda:	d413      	bmi.n	8007004 <_printf_i+0x22c>
 8006fdc:	68e0      	ldr	r0, [r4, #12]
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	4298      	cmp	r0, r3
 8006fe2:	bfb8      	it	lt
 8006fe4:	4618      	movlt	r0, r3
 8006fe6:	e7a6      	b.n	8006f36 <_printf_i+0x15e>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4632      	mov	r2, r6
 8006fec:	4649      	mov	r1, r9
 8006fee:	4640      	mov	r0, r8
 8006ff0:	47d0      	blx	sl
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d09d      	beq.n	8006f32 <_printf_i+0x15a>
 8006ff6:	3501      	adds	r5, #1
 8006ff8:	68e3      	ldr	r3, [r4, #12]
 8006ffa:	9903      	ldr	r1, [sp, #12]
 8006ffc:	1a5b      	subs	r3, r3, r1
 8006ffe:	42ab      	cmp	r3, r5
 8007000:	dcf2      	bgt.n	8006fe8 <_printf_i+0x210>
 8007002:	e7eb      	b.n	8006fdc <_printf_i+0x204>
 8007004:	2500      	movs	r5, #0
 8007006:	f104 0619 	add.w	r6, r4, #25
 800700a:	e7f5      	b.n	8006ff8 <_printf_i+0x220>
 800700c:	080091ce 	.word	0x080091ce
 8007010:	080091df 	.word	0x080091df

08007014 <std>:
 8007014:	2300      	movs	r3, #0
 8007016:	b510      	push	{r4, lr}
 8007018:	4604      	mov	r4, r0
 800701a:	e9c0 3300 	strd	r3, r3, [r0]
 800701e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007022:	6083      	str	r3, [r0, #8]
 8007024:	8181      	strh	r1, [r0, #12]
 8007026:	6643      	str	r3, [r0, #100]	@ 0x64
 8007028:	81c2      	strh	r2, [r0, #14]
 800702a:	6183      	str	r3, [r0, #24]
 800702c:	4619      	mov	r1, r3
 800702e:	2208      	movs	r2, #8
 8007030:	305c      	adds	r0, #92	@ 0x5c
 8007032:	f000 f9e7 	bl	8007404 <memset>
 8007036:	4b0d      	ldr	r3, [pc, #52]	@ (800706c <std+0x58>)
 8007038:	6263      	str	r3, [r4, #36]	@ 0x24
 800703a:	4b0d      	ldr	r3, [pc, #52]	@ (8007070 <std+0x5c>)
 800703c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800703e:	4b0d      	ldr	r3, [pc, #52]	@ (8007074 <std+0x60>)
 8007040:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007042:	4b0d      	ldr	r3, [pc, #52]	@ (8007078 <std+0x64>)
 8007044:	6323      	str	r3, [r4, #48]	@ 0x30
 8007046:	4b0d      	ldr	r3, [pc, #52]	@ (800707c <std+0x68>)
 8007048:	6224      	str	r4, [r4, #32]
 800704a:	429c      	cmp	r4, r3
 800704c:	d006      	beq.n	800705c <std+0x48>
 800704e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007052:	4294      	cmp	r4, r2
 8007054:	d002      	beq.n	800705c <std+0x48>
 8007056:	33d0      	adds	r3, #208	@ 0xd0
 8007058:	429c      	cmp	r4, r3
 800705a:	d105      	bne.n	8007068 <std+0x54>
 800705c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007064:	f000 ba4a 	b.w	80074fc <__retarget_lock_init_recursive>
 8007068:	bd10      	pop	{r4, pc}
 800706a:	bf00      	nop
 800706c:	08007255 	.word	0x08007255
 8007070:	08007277 	.word	0x08007277
 8007074:	080072af 	.word	0x080072af
 8007078:	080072d3 	.word	0x080072d3
 800707c:	20001648 	.word	0x20001648

08007080 <stdio_exit_handler>:
 8007080:	4a02      	ldr	r2, [pc, #8]	@ (800708c <stdio_exit_handler+0xc>)
 8007082:	4903      	ldr	r1, [pc, #12]	@ (8007090 <stdio_exit_handler+0x10>)
 8007084:	4803      	ldr	r0, [pc, #12]	@ (8007094 <stdio_exit_handler+0x14>)
 8007086:	f000 b869 	b.w	800715c <_fwalk_sglue>
 800708a:	bf00      	nop
 800708c:	20000024 	.word	0x20000024
 8007090:	08008bb5 	.word	0x08008bb5
 8007094:	20000034 	.word	0x20000034

08007098 <cleanup_stdio>:
 8007098:	6841      	ldr	r1, [r0, #4]
 800709a:	4b0c      	ldr	r3, [pc, #48]	@ (80070cc <cleanup_stdio+0x34>)
 800709c:	4299      	cmp	r1, r3
 800709e:	b510      	push	{r4, lr}
 80070a0:	4604      	mov	r4, r0
 80070a2:	d001      	beq.n	80070a8 <cleanup_stdio+0x10>
 80070a4:	f001 fd86 	bl	8008bb4 <_fflush_r>
 80070a8:	68a1      	ldr	r1, [r4, #8]
 80070aa:	4b09      	ldr	r3, [pc, #36]	@ (80070d0 <cleanup_stdio+0x38>)
 80070ac:	4299      	cmp	r1, r3
 80070ae:	d002      	beq.n	80070b6 <cleanup_stdio+0x1e>
 80070b0:	4620      	mov	r0, r4
 80070b2:	f001 fd7f 	bl	8008bb4 <_fflush_r>
 80070b6:	68e1      	ldr	r1, [r4, #12]
 80070b8:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <cleanup_stdio+0x3c>)
 80070ba:	4299      	cmp	r1, r3
 80070bc:	d004      	beq.n	80070c8 <cleanup_stdio+0x30>
 80070be:	4620      	mov	r0, r4
 80070c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c4:	f001 bd76 	b.w	8008bb4 <_fflush_r>
 80070c8:	bd10      	pop	{r4, pc}
 80070ca:	bf00      	nop
 80070cc:	20001648 	.word	0x20001648
 80070d0:	200016b0 	.word	0x200016b0
 80070d4:	20001718 	.word	0x20001718

080070d8 <global_stdio_init.part.0>:
 80070d8:	b510      	push	{r4, lr}
 80070da:	4b0b      	ldr	r3, [pc, #44]	@ (8007108 <global_stdio_init.part.0+0x30>)
 80070dc:	4c0b      	ldr	r4, [pc, #44]	@ (800710c <global_stdio_init.part.0+0x34>)
 80070de:	4a0c      	ldr	r2, [pc, #48]	@ (8007110 <global_stdio_init.part.0+0x38>)
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	4620      	mov	r0, r4
 80070e4:	2200      	movs	r2, #0
 80070e6:	2104      	movs	r1, #4
 80070e8:	f7ff ff94 	bl	8007014 <std>
 80070ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070f0:	2201      	movs	r2, #1
 80070f2:	2109      	movs	r1, #9
 80070f4:	f7ff ff8e 	bl	8007014 <std>
 80070f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070fc:	2202      	movs	r2, #2
 80070fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007102:	2112      	movs	r1, #18
 8007104:	f7ff bf86 	b.w	8007014 <std>
 8007108:	20001780 	.word	0x20001780
 800710c:	20001648 	.word	0x20001648
 8007110:	08007081 	.word	0x08007081

08007114 <__sfp_lock_acquire>:
 8007114:	4801      	ldr	r0, [pc, #4]	@ (800711c <__sfp_lock_acquire+0x8>)
 8007116:	f000 b9f2 	b.w	80074fe <__retarget_lock_acquire_recursive>
 800711a:	bf00      	nop
 800711c:	20001789 	.word	0x20001789

08007120 <__sfp_lock_release>:
 8007120:	4801      	ldr	r0, [pc, #4]	@ (8007128 <__sfp_lock_release+0x8>)
 8007122:	f000 b9ed 	b.w	8007500 <__retarget_lock_release_recursive>
 8007126:	bf00      	nop
 8007128:	20001789 	.word	0x20001789

0800712c <__sinit>:
 800712c:	b510      	push	{r4, lr}
 800712e:	4604      	mov	r4, r0
 8007130:	f7ff fff0 	bl	8007114 <__sfp_lock_acquire>
 8007134:	6a23      	ldr	r3, [r4, #32]
 8007136:	b11b      	cbz	r3, 8007140 <__sinit+0x14>
 8007138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800713c:	f7ff bff0 	b.w	8007120 <__sfp_lock_release>
 8007140:	4b04      	ldr	r3, [pc, #16]	@ (8007154 <__sinit+0x28>)
 8007142:	6223      	str	r3, [r4, #32]
 8007144:	4b04      	ldr	r3, [pc, #16]	@ (8007158 <__sinit+0x2c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f5      	bne.n	8007138 <__sinit+0xc>
 800714c:	f7ff ffc4 	bl	80070d8 <global_stdio_init.part.0>
 8007150:	e7f2      	b.n	8007138 <__sinit+0xc>
 8007152:	bf00      	nop
 8007154:	08007099 	.word	0x08007099
 8007158:	20001780 	.word	0x20001780

0800715c <_fwalk_sglue>:
 800715c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007160:	4607      	mov	r7, r0
 8007162:	4688      	mov	r8, r1
 8007164:	4614      	mov	r4, r2
 8007166:	2600      	movs	r6, #0
 8007168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800716c:	f1b9 0901 	subs.w	r9, r9, #1
 8007170:	d505      	bpl.n	800717e <_fwalk_sglue+0x22>
 8007172:	6824      	ldr	r4, [r4, #0]
 8007174:	2c00      	cmp	r4, #0
 8007176:	d1f7      	bne.n	8007168 <_fwalk_sglue+0xc>
 8007178:	4630      	mov	r0, r6
 800717a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800717e:	89ab      	ldrh	r3, [r5, #12]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d907      	bls.n	8007194 <_fwalk_sglue+0x38>
 8007184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007188:	3301      	adds	r3, #1
 800718a:	d003      	beq.n	8007194 <_fwalk_sglue+0x38>
 800718c:	4629      	mov	r1, r5
 800718e:	4638      	mov	r0, r7
 8007190:	47c0      	blx	r8
 8007192:	4306      	orrs	r6, r0
 8007194:	3568      	adds	r5, #104	@ 0x68
 8007196:	e7e9      	b.n	800716c <_fwalk_sglue+0x10>

08007198 <_puts_r>:
 8007198:	6a03      	ldr	r3, [r0, #32]
 800719a:	b570      	push	{r4, r5, r6, lr}
 800719c:	6884      	ldr	r4, [r0, #8]
 800719e:	4605      	mov	r5, r0
 80071a0:	460e      	mov	r6, r1
 80071a2:	b90b      	cbnz	r3, 80071a8 <_puts_r+0x10>
 80071a4:	f7ff ffc2 	bl	800712c <__sinit>
 80071a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071aa:	07db      	lsls	r3, r3, #31
 80071ac:	d405      	bmi.n	80071ba <_puts_r+0x22>
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	0598      	lsls	r0, r3, #22
 80071b2:	d402      	bmi.n	80071ba <_puts_r+0x22>
 80071b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071b6:	f000 f9a2 	bl	80074fe <__retarget_lock_acquire_recursive>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	0719      	lsls	r1, r3, #28
 80071be:	d502      	bpl.n	80071c6 <_puts_r+0x2e>
 80071c0:	6923      	ldr	r3, [r4, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d135      	bne.n	8007232 <_puts_r+0x9a>
 80071c6:	4621      	mov	r1, r4
 80071c8:	4628      	mov	r0, r5
 80071ca:	f000 f8c5 	bl	8007358 <__swsetup_r>
 80071ce:	b380      	cbz	r0, 8007232 <_puts_r+0x9a>
 80071d0:	f04f 35ff 	mov.w	r5, #4294967295
 80071d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071d6:	07da      	lsls	r2, r3, #31
 80071d8:	d405      	bmi.n	80071e6 <_puts_r+0x4e>
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	059b      	lsls	r3, r3, #22
 80071de:	d402      	bmi.n	80071e6 <_puts_r+0x4e>
 80071e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071e2:	f000 f98d 	bl	8007500 <__retarget_lock_release_recursive>
 80071e6:	4628      	mov	r0, r5
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	da04      	bge.n	80071f8 <_puts_r+0x60>
 80071ee:	69a2      	ldr	r2, [r4, #24]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	dc17      	bgt.n	8007224 <_puts_r+0x8c>
 80071f4:	290a      	cmp	r1, #10
 80071f6:	d015      	beq.n	8007224 <_puts_r+0x8c>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	6022      	str	r2, [r4, #0]
 80071fe:	7019      	strb	r1, [r3, #0]
 8007200:	68a3      	ldr	r3, [r4, #8]
 8007202:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007206:	3b01      	subs	r3, #1
 8007208:	60a3      	str	r3, [r4, #8]
 800720a:	2900      	cmp	r1, #0
 800720c:	d1ed      	bne.n	80071ea <_puts_r+0x52>
 800720e:	2b00      	cmp	r3, #0
 8007210:	da11      	bge.n	8007236 <_puts_r+0x9e>
 8007212:	4622      	mov	r2, r4
 8007214:	210a      	movs	r1, #10
 8007216:	4628      	mov	r0, r5
 8007218:	f000 f85f 	bl	80072da <__swbuf_r>
 800721c:	3001      	adds	r0, #1
 800721e:	d0d7      	beq.n	80071d0 <_puts_r+0x38>
 8007220:	250a      	movs	r5, #10
 8007222:	e7d7      	b.n	80071d4 <_puts_r+0x3c>
 8007224:	4622      	mov	r2, r4
 8007226:	4628      	mov	r0, r5
 8007228:	f000 f857 	bl	80072da <__swbuf_r>
 800722c:	3001      	adds	r0, #1
 800722e:	d1e7      	bne.n	8007200 <_puts_r+0x68>
 8007230:	e7ce      	b.n	80071d0 <_puts_r+0x38>
 8007232:	3e01      	subs	r6, #1
 8007234:	e7e4      	b.n	8007200 <_puts_r+0x68>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	6022      	str	r2, [r4, #0]
 800723c:	220a      	movs	r2, #10
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e7ee      	b.n	8007220 <_puts_r+0x88>
	...

08007244 <puts>:
 8007244:	4b02      	ldr	r3, [pc, #8]	@ (8007250 <puts+0xc>)
 8007246:	4601      	mov	r1, r0
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	f7ff bfa5 	b.w	8007198 <_puts_r>
 800724e:	bf00      	nop
 8007250:	20000030 	.word	0x20000030

08007254 <__sread>:
 8007254:	b510      	push	{r4, lr}
 8007256:	460c      	mov	r4, r1
 8007258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725c:	f000 f900 	bl	8007460 <_read_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	bfab      	itete	ge
 8007264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007266:	89a3      	ldrhlt	r3, [r4, #12]
 8007268:	181b      	addge	r3, r3, r0
 800726a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800726e:	bfac      	ite	ge
 8007270:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007272:	81a3      	strhlt	r3, [r4, #12]
 8007274:	bd10      	pop	{r4, pc}

08007276 <__swrite>:
 8007276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727a:	461f      	mov	r7, r3
 800727c:	898b      	ldrh	r3, [r1, #12]
 800727e:	05db      	lsls	r3, r3, #23
 8007280:	4605      	mov	r5, r0
 8007282:	460c      	mov	r4, r1
 8007284:	4616      	mov	r6, r2
 8007286:	d505      	bpl.n	8007294 <__swrite+0x1e>
 8007288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728c:	2302      	movs	r3, #2
 800728e:	2200      	movs	r2, #0
 8007290:	f000 f8d4 	bl	800743c <_lseek_r>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800729a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	4632      	mov	r2, r6
 80072a2:	463b      	mov	r3, r7
 80072a4:	4628      	mov	r0, r5
 80072a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072aa:	f000 b8eb 	b.w	8007484 <_write_r>

080072ae <__sseek>:
 80072ae:	b510      	push	{r4, lr}
 80072b0:	460c      	mov	r4, r1
 80072b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b6:	f000 f8c1 	bl	800743c <_lseek_r>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	bf15      	itete	ne
 80072c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072ca:	81a3      	strheq	r3, [r4, #12]
 80072cc:	bf18      	it	ne
 80072ce:	81a3      	strhne	r3, [r4, #12]
 80072d0:	bd10      	pop	{r4, pc}

080072d2 <__sclose>:
 80072d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d6:	f000 b8a1 	b.w	800741c <_close_r>

080072da <__swbuf_r>:
 80072da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072dc:	460e      	mov	r6, r1
 80072de:	4614      	mov	r4, r2
 80072e0:	4605      	mov	r5, r0
 80072e2:	b118      	cbz	r0, 80072ec <__swbuf_r+0x12>
 80072e4:	6a03      	ldr	r3, [r0, #32]
 80072e6:	b90b      	cbnz	r3, 80072ec <__swbuf_r+0x12>
 80072e8:	f7ff ff20 	bl	800712c <__sinit>
 80072ec:	69a3      	ldr	r3, [r4, #24]
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	071a      	lsls	r2, r3, #28
 80072f4:	d501      	bpl.n	80072fa <__swbuf_r+0x20>
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	b943      	cbnz	r3, 800730c <__swbuf_r+0x32>
 80072fa:	4621      	mov	r1, r4
 80072fc:	4628      	mov	r0, r5
 80072fe:	f000 f82b 	bl	8007358 <__swsetup_r>
 8007302:	b118      	cbz	r0, 800730c <__swbuf_r+0x32>
 8007304:	f04f 37ff 	mov.w	r7, #4294967295
 8007308:	4638      	mov	r0, r7
 800730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	6922      	ldr	r2, [r4, #16]
 8007310:	1a98      	subs	r0, r3, r2
 8007312:	6963      	ldr	r3, [r4, #20]
 8007314:	b2f6      	uxtb	r6, r6
 8007316:	4283      	cmp	r3, r0
 8007318:	4637      	mov	r7, r6
 800731a:	dc05      	bgt.n	8007328 <__swbuf_r+0x4e>
 800731c:	4621      	mov	r1, r4
 800731e:	4628      	mov	r0, r5
 8007320:	f001 fc48 	bl	8008bb4 <_fflush_r>
 8007324:	2800      	cmp	r0, #0
 8007326:	d1ed      	bne.n	8007304 <__swbuf_r+0x2a>
 8007328:	68a3      	ldr	r3, [r4, #8]
 800732a:	3b01      	subs	r3, #1
 800732c:	60a3      	str	r3, [r4, #8]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	6022      	str	r2, [r4, #0]
 8007334:	701e      	strb	r6, [r3, #0]
 8007336:	6962      	ldr	r2, [r4, #20]
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	429a      	cmp	r2, r3
 800733c:	d004      	beq.n	8007348 <__swbuf_r+0x6e>
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	07db      	lsls	r3, r3, #31
 8007342:	d5e1      	bpl.n	8007308 <__swbuf_r+0x2e>
 8007344:	2e0a      	cmp	r6, #10
 8007346:	d1df      	bne.n	8007308 <__swbuf_r+0x2e>
 8007348:	4621      	mov	r1, r4
 800734a:	4628      	mov	r0, r5
 800734c:	f001 fc32 	bl	8008bb4 <_fflush_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	d0d9      	beq.n	8007308 <__swbuf_r+0x2e>
 8007354:	e7d6      	b.n	8007304 <__swbuf_r+0x2a>
	...

08007358 <__swsetup_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4b29      	ldr	r3, [pc, #164]	@ (8007400 <__swsetup_r+0xa8>)
 800735c:	4605      	mov	r5, r0
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	460c      	mov	r4, r1
 8007362:	b118      	cbz	r0, 800736c <__swsetup_r+0x14>
 8007364:	6a03      	ldr	r3, [r0, #32]
 8007366:	b90b      	cbnz	r3, 800736c <__swsetup_r+0x14>
 8007368:	f7ff fee0 	bl	800712c <__sinit>
 800736c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007370:	0719      	lsls	r1, r3, #28
 8007372:	d422      	bmi.n	80073ba <__swsetup_r+0x62>
 8007374:	06da      	lsls	r2, r3, #27
 8007376:	d407      	bmi.n	8007388 <__swsetup_r+0x30>
 8007378:	2209      	movs	r2, #9
 800737a:	602a      	str	r2, [r5, #0]
 800737c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	f04f 30ff 	mov.w	r0, #4294967295
 8007386:	e033      	b.n	80073f0 <__swsetup_r+0x98>
 8007388:	0758      	lsls	r0, r3, #29
 800738a:	d512      	bpl.n	80073b2 <__swsetup_r+0x5a>
 800738c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800738e:	b141      	cbz	r1, 80073a2 <__swsetup_r+0x4a>
 8007390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007394:	4299      	cmp	r1, r3
 8007396:	d002      	beq.n	800739e <__swsetup_r+0x46>
 8007398:	4628      	mov	r0, r5
 800739a:	f000 ff0d 	bl	80081b8 <_free_r>
 800739e:	2300      	movs	r3, #0
 80073a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6063      	str	r3, [r4, #4]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f043 0308 	orr.w	r3, r3, #8
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	b94b      	cbnz	r3, 80073d2 <__swsetup_r+0x7a>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80073c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073c8:	d003      	beq.n	80073d2 <__swsetup_r+0x7a>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4628      	mov	r0, r5
 80073ce:	f001 fc3f 	bl	8008c50 <__smakebuf_r>
 80073d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d6:	f013 0201 	ands.w	r2, r3, #1
 80073da:	d00a      	beq.n	80073f2 <__swsetup_r+0x9a>
 80073dc:	2200      	movs	r2, #0
 80073de:	60a2      	str	r2, [r4, #8]
 80073e0:	6962      	ldr	r2, [r4, #20]
 80073e2:	4252      	negs	r2, r2
 80073e4:	61a2      	str	r2, [r4, #24]
 80073e6:	6922      	ldr	r2, [r4, #16]
 80073e8:	b942      	cbnz	r2, 80073fc <__swsetup_r+0xa4>
 80073ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073ee:	d1c5      	bne.n	800737c <__swsetup_r+0x24>
 80073f0:	bd38      	pop	{r3, r4, r5, pc}
 80073f2:	0799      	lsls	r1, r3, #30
 80073f4:	bf58      	it	pl
 80073f6:	6962      	ldrpl	r2, [r4, #20]
 80073f8:	60a2      	str	r2, [r4, #8]
 80073fa:	e7f4      	b.n	80073e6 <__swsetup_r+0x8e>
 80073fc:	2000      	movs	r0, #0
 80073fe:	e7f7      	b.n	80073f0 <__swsetup_r+0x98>
 8007400:	20000030 	.word	0x20000030

08007404 <memset>:
 8007404:	4402      	add	r2, r0
 8007406:	4603      	mov	r3, r0
 8007408:	4293      	cmp	r3, r2
 800740a:	d100      	bne.n	800740e <memset+0xa>
 800740c:	4770      	bx	lr
 800740e:	f803 1b01 	strb.w	r1, [r3], #1
 8007412:	e7f9      	b.n	8007408 <memset+0x4>

08007414 <_localeconv_r>:
 8007414:	4800      	ldr	r0, [pc, #0]	@ (8007418 <_localeconv_r+0x4>)
 8007416:	4770      	bx	lr
 8007418:	20000170 	.word	0x20000170

0800741c <_close_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	4d06      	ldr	r5, [pc, #24]	@ (8007438 <_close_r+0x1c>)
 8007420:	2300      	movs	r3, #0
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	f7fa fcec 	bl	8001e04 <_close>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_close_r+0x1a>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_close_r+0x1a>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20001784 	.word	0x20001784

0800743c <_lseek_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d07      	ldr	r5, [pc, #28]	@ (800745c <_lseek_r+0x20>)
 8007440:	4604      	mov	r4, r0
 8007442:	4608      	mov	r0, r1
 8007444:	4611      	mov	r1, r2
 8007446:	2200      	movs	r2, #0
 8007448:	602a      	str	r2, [r5, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	f7fa fd01 	bl	8001e52 <_lseek>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d102      	bne.n	800745a <_lseek_r+0x1e>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	b103      	cbz	r3, 800745a <_lseek_r+0x1e>
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	20001784 	.word	0x20001784

08007460 <_read_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4d07      	ldr	r5, [pc, #28]	@ (8007480 <_read_r+0x20>)
 8007464:	4604      	mov	r4, r0
 8007466:	4608      	mov	r0, r1
 8007468:	4611      	mov	r1, r2
 800746a:	2200      	movs	r2, #0
 800746c:	602a      	str	r2, [r5, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	f7fa fc8f 	bl	8001d92 <_read>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_read_r+0x1e>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b103      	cbz	r3, 800747e <_read_r+0x1e>
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	20001784 	.word	0x20001784

08007484 <_write_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d07      	ldr	r5, [pc, #28]	@ (80074a4 <_write_r+0x20>)
 8007488:	4604      	mov	r4, r0
 800748a:	4608      	mov	r0, r1
 800748c:	4611      	mov	r1, r2
 800748e:	2200      	movs	r2, #0
 8007490:	602a      	str	r2, [r5, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f7fa fc9a 	bl	8001dcc <_write>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_write_r+0x1e>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_write_r+0x1e>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	20001784 	.word	0x20001784

080074a8 <__errno>:
 80074a8:	4b01      	ldr	r3, [pc, #4]	@ (80074b0 <__errno+0x8>)
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	20000030 	.word	0x20000030

080074b4 <__libc_init_array>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	4d0d      	ldr	r5, [pc, #52]	@ (80074ec <__libc_init_array+0x38>)
 80074b8:	4c0d      	ldr	r4, [pc, #52]	@ (80074f0 <__libc_init_array+0x3c>)
 80074ba:	1b64      	subs	r4, r4, r5
 80074bc:	10a4      	asrs	r4, r4, #2
 80074be:	2600      	movs	r6, #0
 80074c0:	42a6      	cmp	r6, r4
 80074c2:	d109      	bne.n	80074d8 <__libc_init_array+0x24>
 80074c4:	4d0b      	ldr	r5, [pc, #44]	@ (80074f4 <__libc_init_array+0x40>)
 80074c6:	4c0c      	ldr	r4, [pc, #48]	@ (80074f8 <__libc_init_array+0x44>)
 80074c8:	f001 fe2e 	bl	8009128 <_init>
 80074cc:	1b64      	subs	r4, r4, r5
 80074ce:	10a4      	asrs	r4, r4, #2
 80074d0:	2600      	movs	r6, #0
 80074d2:	42a6      	cmp	r6, r4
 80074d4:	d105      	bne.n	80074e2 <__libc_init_array+0x2e>
 80074d6:	bd70      	pop	{r4, r5, r6, pc}
 80074d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074dc:	4798      	blx	r3
 80074de:	3601      	adds	r6, #1
 80074e0:	e7ee      	b.n	80074c0 <__libc_init_array+0xc>
 80074e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e6:	4798      	blx	r3
 80074e8:	3601      	adds	r6, #1
 80074ea:	e7f2      	b.n	80074d2 <__libc_init_array+0x1e>
 80074ec:	0800953c 	.word	0x0800953c
 80074f0:	0800953c 	.word	0x0800953c
 80074f4:	0800953c 	.word	0x0800953c
 80074f8:	08009540 	.word	0x08009540

080074fc <__retarget_lock_init_recursive>:
 80074fc:	4770      	bx	lr

080074fe <__retarget_lock_acquire_recursive>:
 80074fe:	4770      	bx	lr

08007500 <__retarget_lock_release_recursive>:
 8007500:	4770      	bx	lr

08007502 <quorem>:
 8007502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007506:	6903      	ldr	r3, [r0, #16]
 8007508:	690c      	ldr	r4, [r1, #16]
 800750a:	42a3      	cmp	r3, r4
 800750c:	4607      	mov	r7, r0
 800750e:	db7e      	blt.n	800760e <quorem+0x10c>
 8007510:	3c01      	subs	r4, #1
 8007512:	f101 0814 	add.w	r8, r1, #20
 8007516:	00a3      	lsls	r3, r4, #2
 8007518:	f100 0514 	add.w	r5, r0, #20
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800752c:	3301      	adds	r3, #1
 800752e:	429a      	cmp	r2, r3
 8007530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007534:	fbb2 f6f3 	udiv	r6, r2, r3
 8007538:	d32e      	bcc.n	8007598 <quorem+0x96>
 800753a:	f04f 0a00 	mov.w	sl, #0
 800753e:	46c4      	mov	ip, r8
 8007540:	46ae      	mov	lr, r5
 8007542:	46d3      	mov	fp, sl
 8007544:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007548:	b298      	uxth	r0, r3
 800754a:	fb06 a000 	mla	r0, r6, r0, sl
 800754e:	0c02      	lsrs	r2, r0, #16
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	fb06 2303 	mla	r3, r6, r3, r2
 8007556:	f8de 2000 	ldr.w	r2, [lr]
 800755a:	b280      	uxth	r0, r0
 800755c:	b292      	uxth	r2, r2
 800755e:	1a12      	subs	r2, r2, r0
 8007560:	445a      	add	r2, fp
 8007562:	f8de 0000 	ldr.w	r0, [lr]
 8007566:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800756a:	b29b      	uxth	r3, r3
 800756c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007570:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007574:	b292      	uxth	r2, r2
 8007576:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800757a:	45e1      	cmp	r9, ip
 800757c:	f84e 2b04 	str.w	r2, [lr], #4
 8007580:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007584:	d2de      	bcs.n	8007544 <quorem+0x42>
 8007586:	9b00      	ldr	r3, [sp, #0]
 8007588:	58eb      	ldr	r3, [r5, r3]
 800758a:	b92b      	cbnz	r3, 8007598 <quorem+0x96>
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	3b04      	subs	r3, #4
 8007590:	429d      	cmp	r5, r3
 8007592:	461a      	mov	r2, r3
 8007594:	d32f      	bcc.n	80075f6 <quorem+0xf4>
 8007596:	613c      	str	r4, [r7, #16]
 8007598:	4638      	mov	r0, r7
 800759a:	f001 f97f 	bl	800889c <__mcmp>
 800759e:	2800      	cmp	r0, #0
 80075a0:	db25      	blt.n	80075ee <quorem+0xec>
 80075a2:	4629      	mov	r1, r5
 80075a4:	2000      	movs	r0, #0
 80075a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80075aa:	f8d1 c000 	ldr.w	ip, [r1]
 80075ae:	fa1f fe82 	uxth.w	lr, r2
 80075b2:	fa1f f38c 	uxth.w	r3, ip
 80075b6:	eba3 030e 	sub.w	r3, r3, lr
 80075ba:	4403      	add	r3, r0
 80075bc:	0c12      	lsrs	r2, r2, #16
 80075be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80075c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075cc:	45c1      	cmp	r9, r8
 80075ce:	f841 3b04 	str.w	r3, [r1], #4
 80075d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075d6:	d2e6      	bcs.n	80075a6 <quorem+0xa4>
 80075d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075e0:	b922      	cbnz	r2, 80075ec <quorem+0xea>
 80075e2:	3b04      	subs	r3, #4
 80075e4:	429d      	cmp	r5, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	d30b      	bcc.n	8007602 <quorem+0x100>
 80075ea:	613c      	str	r4, [r7, #16]
 80075ec:	3601      	adds	r6, #1
 80075ee:	4630      	mov	r0, r6
 80075f0:	b003      	add	sp, #12
 80075f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	3b04      	subs	r3, #4
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d1cb      	bne.n	8007596 <quorem+0x94>
 80075fe:	3c01      	subs	r4, #1
 8007600:	e7c6      	b.n	8007590 <quorem+0x8e>
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	3b04      	subs	r3, #4
 8007606:	2a00      	cmp	r2, #0
 8007608:	d1ef      	bne.n	80075ea <quorem+0xe8>
 800760a:	3c01      	subs	r4, #1
 800760c:	e7ea      	b.n	80075e4 <quorem+0xe2>
 800760e:	2000      	movs	r0, #0
 8007610:	e7ee      	b.n	80075f0 <quorem+0xee>
 8007612:	0000      	movs	r0, r0
 8007614:	0000      	movs	r0, r0
	...

08007618 <_dtoa_r>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	69c7      	ldr	r7, [r0, #28]
 800761e:	b097      	sub	sp, #92	@ 0x5c
 8007620:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007624:	ec55 4b10 	vmov	r4, r5, d0
 8007628:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800762a:	9107      	str	r1, [sp, #28]
 800762c:	4681      	mov	r9, r0
 800762e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007630:	9311      	str	r3, [sp, #68]	@ 0x44
 8007632:	b97f      	cbnz	r7, 8007654 <_dtoa_r+0x3c>
 8007634:	2010      	movs	r0, #16
 8007636:	f000 fe09 	bl	800824c <malloc>
 800763a:	4602      	mov	r2, r0
 800763c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007640:	b920      	cbnz	r0, 800764c <_dtoa_r+0x34>
 8007642:	4ba9      	ldr	r3, [pc, #676]	@ (80078e8 <_dtoa_r+0x2d0>)
 8007644:	21ef      	movs	r1, #239	@ 0xef
 8007646:	48a9      	ldr	r0, [pc, #676]	@ (80078ec <_dtoa_r+0x2d4>)
 8007648:	f001 fb7e 	bl	8008d48 <__assert_func>
 800764c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007650:	6007      	str	r7, [r0, #0]
 8007652:	60c7      	str	r7, [r0, #12]
 8007654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	b159      	cbz	r1, 8007674 <_dtoa_r+0x5c>
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	604a      	str	r2, [r1, #4]
 8007660:	2301      	movs	r3, #1
 8007662:	4093      	lsls	r3, r2
 8007664:	608b      	str	r3, [r1, #8]
 8007666:	4648      	mov	r0, r9
 8007668:	f000 fee6 	bl	8008438 <_Bfree>
 800766c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	1e2b      	subs	r3, r5, #0
 8007676:	bfb9      	ittee	lt
 8007678:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800767c:	9305      	strlt	r3, [sp, #20]
 800767e:	2300      	movge	r3, #0
 8007680:	6033      	strge	r3, [r6, #0]
 8007682:	9f05      	ldr	r7, [sp, #20]
 8007684:	4b9a      	ldr	r3, [pc, #616]	@ (80078f0 <_dtoa_r+0x2d8>)
 8007686:	bfbc      	itt	lt
 8007688:	2201      	movlt	r2, #1
 800768a:	6032      	strlt	r2, [r6, #0]
 800768c:	43bb      	bics	r3, r7
 800768e:	d112      	bne.n	80076b6 <_dtoa_r+0x9e>
 8007690:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007692:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800769c:	4323      	orrs	r3, r4
 800769e:	f000 855a 	beq.w	8008156 <_dtoa_r+0xb3e>
 80076a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007904 <_dtoa_r+0x2ec>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 855c 	beq.w	8008166 <_dtoa_r+0xb4e>
 80076ae:	f10a 0303 	add.w	r3, sl, #3
 80076b2:	f000 bd56 	b.w	8008162 <_dtoa_r+0xb4a>
 80076b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80076ba:	2200      	movs	r2, #0
 80076bc:	ec51 0b17 	vmov	r0, r1, d7
 80076c0:	2300      	movs	r3, #0
 80076c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80076c6:	f7f9 fa27 	bl	8000b18 <__aeabi_dcmpeq>
 80076ca:	4680      	mov	r8, r0
 80076cc:	b158      	cbz	r0, 80076e6 <_dtoa_r+0xce>
 80076ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80076d0:	2301      	movs	r3, #1
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076d6:	b113      	cbz	r3, 80076de <_dtoa_r+0xc6>
 80076d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80076da:	4b86      	ldr	r3, [pc, #536]	@ (80078f4 <_dtoa_r+0x2dc>)
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007908 <_dtoa_r+0x2f0>
 80076e2:	f000 bd40 	b.w	8008166 <_dtoa_r+0xb4e>
 80076e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80076ea:	aa14      	add	r2, sp, #80	@ 0x50
 80076ec:	a915      	add	r1, sp, #84	@ 0x54
 80076ee:	4648      	mov	r0, r9
 80076f0:	f001 f984 	bl	80089fc <__d2b>
 80076f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80076f8:	9002      	str	r0, [sp, #8]
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	d078      	beq.n	80077f0 <_dtoa_r+0x1d8>
 80076fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007700:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007708:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800770c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007710:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007714:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007718:	4619      	mov	r1, r3
 800771a:	2200      	movs	r2, #0
 800771c:	4b76      	ldr	r3, [pc, #472]	@ (80078f8 <_dtoa_r+0x2e0>)
 800771e:	f7f8 fddb 	bl	80002d8 <__aeabi_dsub>
 8007722:	a36b      	add	r3, pc, #428	@ (adr r3, 80078d0 <_dtoa_r+0x2b8>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f8 ff8e 	bl	8000648 <__aeabi_dmul>
 800772c:	a36a      	add	r3, pc, #424	@ (adr r3, 80078d8 <_dtoa_r+0x2c0>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fdd3 	bl	80002dc <__adddf3>
 8007736:	4604      	mov	r4, r0
 8007738:	4630      	mov	r0, r6
 800773a:	460d      	mov	r5, r1
 800773c:	f7f8 ff1a 	bl	8000574 <__aeabi_i2d>
 8007740:	a367      	add	r3, pc, #412	@ (adr r3, 80078e0 <_dtoa_r+0x2c8>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f7f8 ff7f 	bl	8000648 <__aeabi_dmul>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f8 fdc3 	bl	80002dc <__adddf3>
 8007756:	4604      	mov	r4, r0
 8007758:	460d      	mov	r5, r1
 800775a:	f7f9 fa25 	bl	8000ba8 <__aeabi_d2iz>
 800775e:	2200      	movs	r2, #0
 8007760:	4607      	mov	r7, r0
 8007762:	2300      	movs	r3, #0
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f9 f9e0 	bl	8000b2c <__aeabi_dcmplt>
 800776c:	b140      	cbz	r0, 8007780 <_dtoa_r+0x168>
 800776e:	4638      	mov	r0, r7
 8007770:	f7f8 ff00 	bl	8000574 <__aeabi_i2d>
 8007774:	4622      	mov	r2, r4
 8007776:	462b      	mov	r3, r5
 8007778:	f7f9 f9ce 	bl	8000b18 <__aeabi_dcmpeq>
 800777c:	b900      	cbnz	r0, 8007780 <_dtoa_r+0x168>
 800777e:	3f01      	subs	r7, #1
 8007780:	2f16      	cmp	r7, #22
 8007782:	d852      	bhi.n	800782a <_dtoa_r+0x212>
 8007784:	4b5d      	ldr	r3, [pc, #372]	@ (80078fc <_dtoa_r+0x2e4>)
 8007786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007792:	f7f9 f9cb 	bl	8000b2c <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	d049      	beq.n	800782e <_dtoa_r+0x216>
 800779a:	3f01      	subs	r7, #1
 800779c:	2300      	movs	r3, #0
 800779e:	9310      	str	r3, [sp, #64]	@ 0x40
 80077a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077a2:	1b9b      	subs	r3, r3, r6
 80077a4:	1e5a      	subs	r2, r3, #1
 80077a6:	bf45      	ittet	mi
 80077a8:	f1c3 0301 	rsbmi	r3, r3, #1
 80077ac:	9300      	strmi	r3, [sp, #0]
 80077ae:	2300      	movpl	r3, #0
 80077b0:	2300      	movmi	r3, #0
 80077b2:	9206      	str	r2, [sp, #24]
 80077b4:	bf54      	ite	pl
 80077b6:	9300      	strpl	r3, [sp, #0]
 80077b8:	9306      	strmi	r3, [sp, #24]
 80077ba:	2f00      	cmp	r7, #0
 80077bc:	db39      	blt.n	8007832 <_dtoa_r+0x21a>
 80077be:	9b06      	ldr	r3, [sp, #24]
 80077c0:	970d      	str	r7, [sp, #52]	@ 0x34
 80077c2:	443b      	add	r3, r7
 80077c4:	9306      	str	r3, [sp, #24]
 80077c6:	2300      	movs	r3, #0
 80077c8:	9308      	str	r3, [sp, #32]
 80077ca:	9b07      	ldr	r3, [sp, #28]
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d863      	bhi.n	8007898 <_dtoa_r+0x280>
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	bfc4      	itt	gt
 80077d4:	3b04      	subgt	r3, #4
 80077d6:	9307      	strgt	r3, [sp, #28]
 80077d8:	9b07      	ldr	r3, [sp, #28]
 80077da:	f1a3 0302 	sub.w	r3, r3, #2
 80077de:	bfcc      	ite	gt
 80077e0:	2400      	movgt	r4, #0
 80077e2:	2401      	movle	r4, #1
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d863      	bhi.n	80078b0 <_dtoa_r+0x298>
 80077e8:	e8df f003 	tbb	[pc, r3]
 80077ec:	2b375452 	.word	0x2b375452
 80077f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80077f4:	441e      	add	r6, r3
 80077f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	bfc1      	itttt	gt
 80077fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007802:	409f      	lslgt	r7, r3
 8007804:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007808:	fa24 f303 	lsrgt.w	r3, r4, r3
 800780c:	bfd6      	itet	le
 800780e:	f1c3 0320 	rsble	r3, r3, #32
 8007812:	ea47 0003 	orrgt.w	r0, r7, r3
 8007816:	fa04 f003 	lslle.w	r0, r4, r3
 800781a:	f7f8 fe9b 	bl	8000554 <__aeabi_ui2d>
 800781e:	2201      	movs	r2, #1
 8007820:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007824:	3e01      	subs	r6, #1
 8007826:	9212      	str	r2, [sp, #72]	@ 0x48
 8007828:	e776      	b.n	8007718 <_dtoa_r+0x100>
 800782a:	2301      	movs	r3, #1
 800782c:	e7b7      	b.n	800779e <_dtoa_r+0x186>
 800782e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007830:	e7b6      	b.n	80077a0 <_dtoa_r+0x188>
 8007832:	9b00      	ldr	r3, [sp, #0]
 8007834:	1bdb      	subs	r3, r3, r7
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	427b      	negs	r3, r7
 800783a:	9308      	str	r3, [sp, #32]
 800783c:	2300      	movs	r3, #0
 800783e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007840:	e7c3      	b.n	80077ca <_dtoa_r+0x1b2>
 8007842:	2301      	movs	r3, #1
 8007844:	9309      	str	r3, [sp, #36]	@ 0x24
 8007846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007848:	eb07 0b03 	add.w	fp, r7, r3
 800784c:	f10b 0301 	add.w	r3, fp, #1
 8007850:	2b01      	cmp	r3, #1
 8007852:	9303      	str	r3, [sp, #12]
 8007854:	bfb8      	it	lt
 8007856:	2301      	movlt	r3, #1
 8007858:	e006      	b.n	8007868 <_dtoa_r+0x250>
 800785a:	2301      	movs	r3, #1
 800785c:	9309      	str	r3, [sp, #36]	@ 0x24
 800785e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007860:	2b00      	cmp	r3, #0
 8007862:	dd28      	ble.n	80078b6 <_dtoa_r+0x29e>
 8007864:	469b      	mov	fp, r3
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800786c:	2100      	movs	r1, #0
 800786e:	2204      	movs	r2, #4
 8007870:	f102 0514 	add.w	r5, r2, #20
 8007874:	429d      	cmp	r5, r3
 8007876:	d926      	bls.n	80078c6 <_dtoa_r+0x2ae>
 8007878:	6041      	str	r1, [r0, #4]
 800787a:	4648      	mov	r0, r9
 800787c:	f000 fd9c 	bl	80083b8 <_Balloc>
 8007880:	4682      	mov	sl, r0
 8007882:	2800      	cmp	r0, #0
 8007884:	d142      	bne.n	800790c <_dtoa_r+0x2f4>
 8007886:	4b1e      	ldr	r3, [pc, #120]	@ (8007900 <_dtoa_r+0x2e8>)
 8007888:	4602      	mov	r2, r0
 800788a:	f240 11af 	movw	r1, #431	@ 0x1af
 800788e:	e6da      	b.n	8007646 <_dtoa_r+0x2e>
 8007890:	2300      	movs	r3, #0
 8007892:	e7e3      	b.n	800785c <_dtoa_r+0x244>
 8007894:	2300      	movs	r3, #0
 8007896:	e7d5      	b.n	8007844 <_dtoa_r+0x22c>
 8007898:	2401      	movs	r4, #1
 800789a:	2300      	movs	r3, #0
 800789c:	9307      	str	r3, [sp, #28]
 800789e:	9409      	str	r4, [sp, #36]	@ 0x24
 80078a0:	f04f 3bff 	mov.w	fp, #4294967295
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80078aa:	2312      	movs	r3, #18
 80078ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80078ae:	e7db      	b.n	8007868 <_dtoa_r+0x250>
 80078b0:	2301      	movs	r3, #1
 80078b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b4:	e7f4      	b.n	80078a0 <_dtoa_r+0x288>
 80078b6:	f04f 0b01 	mov.w	fp, #1
 80078ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80078be:	465b      	mov	r3, fp
 80078c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80078c4:	e7d0      	b.n	8007868 <_dtoa_r+0x250>
 80078c6:	3101      	adds	r1, #1
 80078c8:	0052      	lsls	r2, r2, #1
 80078ca:	e7d1      	b.n	8007870 <_dtoa_r+0x258>
 80078cc:	f3af 8000 	nop.w
 80078d0:	636f4361 	.word	0x636f4361
 80078d4:	3fd287a7 	.word	0x3fd287a7
 80078d8:	8b60c8b3 	.word	0x8b60c8b3
 80078dc:	3fc68a28 	.word	0x3fc68a28
 80078e0:	509f79fb 	.word	0x509f79fb
 80078e4:	3fd34413 	.word	0x3fd34413
 80078e8:	080091fd 	.word	0x080091fd
 80078ec:	08009214 	.word	0x08009214
 80078f0:	7ff00000 	.word	0x7ff00000
 80078f4:	080091cd 	.word	0x080091cd
 80078f8:	3ff80000 	.word	0x3ff80000
 80078fc:	08009368 	.word	0x08009368
 8007900:	0800926c 	.word	0x0800926c
 8007904:	080091f9 	.word	0x080091f9
 8007908:	080091cc 	.word	0x080091cc
 800790c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007910:	6018      	str	r0, [r3, #0]
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	2b0e      	cmp	r3, #14
 8007916:	f200 80a1 	bhi.w	8007a5c <_dtoa_r+0x444>
 800791a:	2c00      	cmp	r4, #0
 800791c:	f000 809e 	beq.w	8007a5c <_dtoa_r+0x444>
 8007920:	2f00      	cmp	r7, #0
 8007922:	dd33      	ble.n	800798c <_dtoa_r+0x374>
 8007924:	4b9c      	ldr	r3, [pc, #624]	@ (8007b98 <_dtoa_r+0x580>)
 8007926:	f007 020f 	and.w	r2, r7, #15
 800792a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800792e:	ed93 7b00 	vldr	d7, [r3]
 8007932:	05f8      	lsls	r0, r7, #23
 8007934:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007938:	ea4f 1427 	mov.w	r4, r7, asr #4
 800793c:	d516      	bpl.n	800796c <_dtoa_r+0x354>
 800793e:	4b97      	ldr	r3, [pc, #604]	@ (8007b9c <_dtoa_r+0x584>)
 8007940:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007944:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007948:	f7f8 ffa8 	bl	800089c <__aeabi_ddiv>
 800794c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007950:	f004 040f 	and.w	r4, r4, #15
 8007954:	2603      	movs	r6, #3
 8007956:	4d91      	ldr	r5, [pc, #580]	@ (8007b9c <_dtoa_r+0x584>)
 8007958:	b954      	cbnz	r4, 8007970 <_dtoa_r+0x358>
 800795a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800795e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007962:	f7f8 ff9b 	bl	800089c <__aeabi_ddiv>
 8007966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800796a:	e028      	b.n	80079be <_dtoa_r+0x3a6>
 800796c:	2602      	movs	r6, #2
 800796e:	e7f2      	b.n	8007956 <_dtoa_r+0x33e>
 8007970:	07e1      	lsls	r1, r4, #31
 8007972:	d508      	bpl.n	8007986 <_dtoa_r+0x36e>
 8007974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800797c:	f7f8 fe64 	bl	8000648 <__aeabi_dmul>
 8007980:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007984:	3601      	adds	r6, #1
 8007986:	1064      	asrs	r4, r4, #1
 8007988:	3508      	adds	r5, #8
 800798a:	e7e5      	b.n	8007958 <_dtoa_r+0x340>
 800798c:	f000 80af 	beq.w	8007aee <_dtoa_r+0x4d6>
 8007990:	427c      	negs	r4, r7
 8007992:	4b81      	ldr	r3, [pc, #516]	@ (8007b98 <_dtoa_r+0x580>)
 8007994:	4d81      	ldr	r5, [pc, #516]	@ (8007b9c <_dtoa_r+0x584>)
 8007996:	f004 020f 	and.w	r2, r4, #15
 800799a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80079a6:	f7f8 fe4f 	bl	8000648 <__aeabi_dmul>
 80079aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079ae:	1124      	asrs	r4, r4, #4
 80079b0:	2300      	movs	r3, #0
 80079b2:	2602      	movs	r6, #2
 80079b4:	2c00      	cmp	r4, #0
 80079b6:	f040 808f 	bne.w	8007ad8 <_dtoa_r+0x4c0>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1d3      	bne.n	8007966 <_dtoa_r+0x34e>
 80079be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8094 	beq.w	8007af2 <_dtoa_r+0x4da>
 80079ca:	4b75      	ldr	r3, [pc, #468]	@ (8007ba0 <_dtoa_r+0x588>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f9 f8ab 	bl	8000b2c <__aeabi_dcmplt>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f000 808b 	beq.w	8007af2 <_dtoa_r+0x4da>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 8087 	beq.w	8007af2 <_dtoa_r+0x4da>
 80079e4:	f1bb 0f00 	cmp.w	fp, #0
 80079e8:	dd34      	ble.n	8007a54 <_dtoa_r+0x43c>
 80079ea:	4620      	mov	r0, r4
 80079ec:	4b6d      	ldr	r3, [pc, #436]	@ (8007ba4 <_dtoa_r+0x58c>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f8 fe29 	bl	8000648 <__aeabi_dmul>
 80079f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079fa:	f107 38ff 	add.w	r8, r7, #4294967295
 80079fe:	3601      	adds	r6, #1
 8007a00:	465c      	mov	r4, fp
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7f8 fdb6 	bl	8000574 <__aeabi_i2d>
 8007a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a0c:	f7f8 fe1c 	bl	8000648 <__aeabi_dmul>
 8007a10:	4b65      	ldr	r3, [pc, #404]	@ (8007ba8 <_dtoa_r+0x590>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	f7f8 fc62 	bl	80002dc <__adddf3>
 8007a18:	4605      	mov	r5, r0
 8007a1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a1e:	2c00      	cmp	r4, #0
 8007a20:	d16a      	bne.n	8007af8 <_dtoa_r+0x4e0>
 8007a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a26:	4b61      	ldr	r3, [pc, #388]	@ (8007bac <_dtoa_r+0x594>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f7f8 fc55 	bl	80002d8 <__aeabi_dsub>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a36:	462a      	mov	r2, r5
 8007a38:	4633      	mov	r3, r6
 8007a3a:	f7f9 f895 	bl	8000b68 <__aeabi_dcmpgt>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f040 8298 	bne.w	8007f74 <_dtoa_r+0x95c>
 8007a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a4e:	f7f9 f86d 	bl	8000b2c <__aeabi_dcmplt>
 8007a52:	bb38      	cbnz	r0, 8007aa4 <_dtoa_r+0x48c>
 8007a54:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007a58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f2c0 8157 	blt.w	8007d12 <_dtoa_r+0x6fa>
 8007a64:	2f0e      	cmp	r7, #14
 8007a66:	f300 8154 	bgt.w	8007d12 <_dtoa_r+0x6fa>
 8007a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b98 <_dtoa_r+0x580>)
 8007a6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a70:	ed93 7b00 	vldr	d7, [r3]
 8007a74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	ed8d 7b00 	vstr	d7, [sp]
 8007a7c:	f280 80e5 	bge.w	8007c4a <_dtoa_r+0x632>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f300 80e1 	bgt.w	8007c4a <_dtoa_r+0x632>
 8007a88:	d10c      	bne.n	8007aa4 <_dtoa_r+0x48c>
 8007a8a:	4b48      	ldr	r3, [pc, #288]	@ (8007bac <_dtoa_r+0x594>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	ec51 0b17 	vmov	r0, r1, d7
 8007a92:	f7f8 fdd9 	bl	8000648 <__aeabi_dmul>
 8007a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a9a:	f7f9 f85b 	bl	8000b54 <__aeabi_dcmpge>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f000 8266 	beq.w	8007f70 <_dtoa_r+0x958>
 8007aa4:	2400      	movs	r4, #0
 8007aa6:	4625      	mov	r5, r4
 8007aa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007aaa:	4656      	mov	r6, sl
 8007aac:	ea6f 0803 	mvn.w	r8, r3
 8007ab0:	2700      	movs	r7, #0
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	4648      	mov	r0, r9
 8007ab6:	f000 fcbf 	bl	8008438 <_Bfree>
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	f000 80bd 	beq.w	8007c3a <_dtoa_r+0x622>
 8007ac0:	b12f      	cbz	r7, 8007ace <_dtoa_r+0x4b6>
 8007ac2:	42af      	cmp	r7, r5
 8007ac4:	d003      	beq.n	8007ace <_dtoa_r+0x4b6>
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	4648      	mov	r0, r9
 8007aca:	f000 fcb5 	bl	8008438 <_Bfree>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f000 fcb1 	bl	8008438 <_Bfree>
 8007ad6:	e0b0      	b.n	8007c3a <_dtoa_r+0x622>
 8007ad8:	07e2      	lsls	r2, r4, #31
 8007ada:	d505      	bpl.n	8007ae8 <_dtoa_r+0x4d0>
 8007adc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ae0:	f7f8 fdb2 	bl	8000648 <__aeabi_dmul>
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	1064      	asrs	r4, r4, #1
 8007aea:	3508      	adds	r5, #8
 8007aec:	e762      	b.n	80079b4 <_dtoa_r+0x39c>
 8007aee:	2602      	movs	r6, #2
 8007af0:	e765      	b.n	80079be <_dtoa_r+0x3a6>
 8007af2:	9c03      	ldr	r4, [sp, #12]
 8007af4:	46b8      	mov	r8, r7
 8007af6:	e784      	b.n	8007a02 <_dtoa_r+0x3ea>
 8007af8:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <_dtoa_r+0x580>)
 8007afa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007afc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b04:	4454      	add	r4, sl
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d054      	beq.n	8007bb4 <_dtoa_r+0x59c>
 8007b0a:	4929      	ldr	r1, [pc, #164]	@ (8007bb0 <_dtoa_r+0x598>)
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	f7f8 fec5 	bl	800089c <__aeabi_ddiv>
 8007b12:	4633      	mov	r3, r6
 8007b14:	462a      	mov	r2, r5
 8007b16:	f7f8 fbdf 	bl	80002d8 <__aeabi_dsub>
 8007b1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b1e:	4656      	mov	r6, sl
 8007b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b24:	f7f9 f840 	bl	8000ba8 <__aeabi_d2iz>
 8007b28:	4605      	mov	r5, r0
 8007b2a:	f7f8 fd23 	bl	8000574 <__aeabi_i2d>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b36:	f7f8 fbcf 	bl	80002d8 <__aeabi_dsub>
 8007b3a:	3530      	adds	r5, #48	@ 0x30
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b44:	f806 5b01 	strb.w	r5, [r6], #1
 8007b48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b4c:	f7f8 ffee 	bl	8000b2c <__aeabi_dcmplt>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d172      	bne.n	8007c3a <_dtoa_r+0x622>
 8007b54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b58:	4911      	ldr	r1, [pc, #68]	@ (8007ba0 <_dtoa_r+0x588>)
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f7f8 fbbc 	bl	80002d8 <__aeabi_dsub>
 8007b60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b64:	f7f8 ffe2 	bl	8000b2c <__aeabi_dcmplt>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	f040 80b4 	bne.w	8007cd6 <_dtoa_r+0x6be>
 8007b6e:	42a6      	cmp	r6, r4
 8007b70:	f43f af70 	beq.w	8007a54 <_dtoa_r+0x43c>
 8007b74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007b78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba4 <_dtoa_r+0x58c>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f7f8 fd64 	bl	8000648 <__aeabi_dmul>
 8007b80:	4b08      	ldr	r3, [pc, #32]	@ (8007ba4 <_dtoa_r+0x58c>)
 8007b82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b86:	2200      	movs	r2, #0
 8007b88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b8c:	f7f8 fd5c 	bl	8000648 <__aeabi_dmul>
 8007b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b94:	e7c4      	b.n	8007b20 <_dtoa_r+0x508>
 8007b96:	bf00      	nop
 8007b98:	08009368 	.word	0x08009368
 8007b9c:	08009340 	.word	0x08009340
 8007ba0:	3ff00000 	.word	0x3ff00000
 8007ba4:	40240000 	.word	0x40240000
 8007ba8:	401c0000 	.word	0x401c0000
 8007bac:	40140000 	.word	0x40140000
 8007bb0:	3fe00000 	.word	0x3fe00000
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f7f8 fd46 	bl	8000648 <__aeabi_dmul>
 8007bbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007bc0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007bc2:	4656      	mov	r6, sl
 8007bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc8:	f7f8 ffee 	bl	8000ba8 <__aeabi_d2iz>
 8007bcc:	4605      	mov	r5, r0
 8007bce:	f7f8 fcd1 	bl	8000574 <__aeabi_i2d>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bda:	f7f8 fb7d 	bl	80002d8 <__aeabi_dsub>
 8007bde:	3530      	adds	r5, #48	@ 0x30
 8007be0:	f806 5b01 	strb.w	r5, [r6], #1
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	d124      	bne.n	8007c3e <_dtoa_r+0x626>
 8007bf4:	4baf      	ldr	r3, [pc, #700]	@ (8007eb4 <_dtoa_r+0x89c>)
 8007bf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007bfa:	f7f8 fb6f 	bl	80002dc <__adddf3>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c06:	f7f8 ffaf 	bl	8000b68 <__aeabi_dcmpgt>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d163      	bne.n	8007cd6 <_dtoa_r+0x6be>
 8007c0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c12:	49a8      	ldr	r1, [pc, #672]	@ (8007eb4 <_dtoa_r+0x89c>)
 8007c14:	2000      	movs	r0, #0
 8007c16:	f7f8 fb5f 	bl	80002d8 <__aeabi_dsub>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c22:	f7f8 ff83 	bl	8000b2c <__aeabi_dcmplt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f af14 	beq.w	8007a54 <_dtoa_r+0x43c>
 8007c2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007c2e:	1e73      	subs	r3, r6, #1
 8007c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c36:	2b30      	cmp	r3, #48	@ 0x30
 8007c38:	d0f8      	beq.n	8007c2c <_dtoa_r+0x614>
 8007c3a:	4647      	mov	r7, r8
 8007c3c:	e03b      	b.n	8007cb6 <_dtoa_r+0x69e>
 8007c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8007eb8 <_dtoa_r+0x8a0>)
 8007c40:	f7f8 fd02 	bl	8000648 <__aeabi_dmul>
 8007c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c48:	e7bc      	b.n	8007bc4 <_dtoa_r+0x5ac>
 8007c4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007c4e:	4656      	mov	r6, sl
 8007c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c54:	4620      	mov	r0, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	f7f8 fe20 	bl	800089c <__aeabi_ddiv>
 8007c5c:	f7f8 ffa4 	bl	8000ba8 <__aeabi_d2iz>
 8007c60:	4680      	mov	r8, r0
 8007c62:	f7f8 fc87 	bl	8000574 <__aeabi_i2d>
 8007c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c6a:	f7f8 fced 	bl	8000648 <__aeabi_dmul>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c7a:	f7f8 fb2d 	bl	80002d8 <__aeabi_dsub>
 8007c7e:	f806 4b01 	strb.w	r4, [r6], #1
 8007c82:	9d03      	ldr	r5, [sp, #12]
 8007c84:	eba6 040a 	sub.w	r4, r6, sl
 8007c88:	42a5      	cmp	r5, r4
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	d133      	bne.n	8007cf8 <_dtoa_r+0x6e0>
 8007c90:	f7f8 fb24 	bl	80002dc <__adddf3>
 8007c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c98:	4604      	mov	r4, r0
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	f7f8 ff64 	bl	8000b68 <__aeabi_dcmpgt>
 8007ca0:	b9c0      	cbnz	r0, 8007cd4 <_dtoa_r+0x6bc>
 8007ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 ff35 	bl	8000b18 <__aeabi_dcmpeq>
 8007cae:	b110      	cbz	r0, 8007cb6 <_dtoa_r+0x69e>
 8007cb0:	f018 0f01 	tst.w	r8, #1
 8007cb4:	d10e      	bne.n	8007cd4 <_dtoa_r+0x6bc>
 8007cb6:	9902      	ldr	r1, [sp, #8]
 8007cb8:	4648      	mov	r0, r9
 8007cba:	f000 fbbd 	bl	8008438 <_Bfree>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	7033      	strb	r3, [r6, #0]
 8007cc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007cc4:	3701      	adds	r7, #1
 8007cc6:	601f      	str	r7, [r3, #0]
 8007cc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 824b 	beq.w	8008166 <_dtoa_r+0xb4e>
 8007cd0:	601e      	str	r6, [r3, #0]
 8007cd2:	e248      	b.n	8008166 <_dtoa_r+0xb4e>
 8007cd4:	46b8      	mov	r8, r7
 8007cd6:	4633      	mov	r3, r6
 8007cd8:	461e      	mov	r6, r3
 8007cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cde:	2a39      	cmp	r2, #57	@ 0x39
 8007ce0:	d106      	bne.n	8007cf0 <_dtoa_r+0x6d8>
 8007ce2:	459a      	cmp	sl, r3
 8007ce4:	d1f8      	bne.n	8007cd8 <_dtoa_r+0x6c0>
 8007ce6:	2230      	movs	r2, #48	@ 0x30
 8007ce8:	f108 0801 	add.w	r8, r8, #1
 8007cec:	f88a 2000 	strb.w	r2, [sl]
 8007cf0:	781a      	ldrb	r2, [r3, #0]
 8007cf2:	3201      	adds	r2, #1
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e7a0      	b.n	8007c3a <_dtoa_r+0x622>
 8007cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8007eb8 <_dtoa_r+0x8a0>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f7f8 fca4 	bl	8000648 <__aeabi_dmul>
 8007d00:	2200      	movs	r2, #0
 8007d02:	2300      	movs	r3, #0
 8007d04:	4604      	mov	r4, r0
 8007d06:	460d      	mov	r5, r1
 8007d08:	f7f8 ff06 	bl	8000b18 <__aeabi_dcmpeq>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d09f      	beq.n	8007c50 <_dtoa_r+0x638>
 8007d10:	e7d1      	b.n	8007cb6 <_dtoa_r+0x69e>
 8007d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d14:	2a00      	cmp	r2, #0
 8007d16:	f000 80ea 	beq.w	8007eee <_dtoa_r+0x8d6>
 8007d1a:	9a07      	ldr	r2, [sp, #28]
 8007d1c:	2a01      	cmp	r2, #1
 8007d1e:	f300 80cd 	bgt.w	8007ebc <_dtoa_r+0x8a4>
 8007d22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	f000 80c1 	beq.w	8007eac <_dtoa_r+0x894>
 8007d2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007d2e:	9c08      	ldr	r4, [sp, #32]
 8007d30:	9e00      	ldr	r6, [sp, #0]
 8007d32:	9a00      	ldr	r2, [sp, #0]
 8007d34:	441a      	add	r2, r3
 8007d36:	9200      	str	r2, [sp, #0]
 8007d38:	9a06      	ldr	r2, [sp, #24]
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	441a      	add	r2, r3
 8007d3e:	4648      	mov	r0, r9
 8007d40:	9206      	str	r2, [sp, #24]
 8007d42:	f000 fc2d 	bl	80085a0 <__i2b>
 8007d46:	4605      	mov	r5, r0
 8007d48:	b166      	cbz	r6, 8007d64 <_dtoa_r+0x74c>
 8007d4a:	9b06      	ldr	r3, [sp, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dd09      	ble.n	8007d64 <_dtoa_r+0x74c>
 8007d50:	42b3      	cmp	r3, r6
 8007d52:	9a00      	ldr	r2, [sp, #0]
 8007d54:	bfa8      	it	ge
 8007d56:	4633      	movge	r3, r6
 8007d58:	1ad2      	subs	r2, r2, r3
 8007d5a:	9200      	str	r2, [sp, #0]
 8007d5c:	9a06      	ldr	r2, [sp, #24]
 8007d5e:	1af6      	subs	r6, r6, r3
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	9306      	str	r3, [sp, #24]
 8007d64:	9b08      	ldr	r3, [sp, #32]
 8007d66:	b30b      	cbz	r3, 8007dac <_dtoa_r+0x794>
 8007d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 80c6 	beq.w	8007efc <_dtoa_r+0x8e4>
 8007d70:	2c00      	cmp	r4, #0
 8007d72:	f000 80c0 	beq.w	8007ef6 <_dtoa_r+0x8de>
 8007d76:	4629      	mov	r1, r5
 8007d78:	4622      	mov	r2, r4
 8007d7a:	4648      	mov	r0, r9
 8007d7c:	f000 fcc8 	bl	8008710 <__pow5mult>
 8007d80:	9a02      	ldr	r2, [sp, #8]
 8007d82:	4601      	mov	r1, r0
 8007d84:	4605      	mov	r5, r0
 8007d86:	4648      	mov	r0, r9
 8007d88:	f000 fc20 	bl	80085cc <__multiply>
 8007d8c:	9902      	ldr	r1, [sp, #8]
 8007d8e:	4680      	mov	r8, r0
 8007d90:	4648      	mov	r0, r9
 8007d92:	f000 fb51 	bl	8008438 <_Bfree>
 8007d96:	9b08      	ldr	r3, [sp, #32]
 8007d98:	1b1b      	subs	r3, r3, r4
 8007d9a:	9308      	str	r3, [sp, #32]
 8007d9c:	f000 80b1 	beq.w	8007f02 <_dtoa_r+0x8ea>
 8007da0:	9a08      	ldr	r2, [sp, #32]
 8007da2:	4641      	mov	r1, r8
 8007da4:	4648      	mov	r0, r9
 8007da6:	f000 fcb3 	bl	8008710 <__pow5mult>
 8007daa:	9002      	str	r0, [sp, #8]
 8007dac:	2101      	movs	r1, #1
 8007dae:	4648      	mov	r0, r9
 8007db0:	f000 fbf6 	bl	80085a0 <__i2b>
 8007db4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007db6:	4604      	mov	r4, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 81d8 	beq.w	800816e <_dtoa_r+0xb56>
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	4648      	mov	r0, r9
 8007dc4:	f000 fca4 	bl	8008710 <__pow5mult>
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	4604      	mov	r4, r0
 8007dce:	f300 809f 	bgt.w	8007f10 <_dtoa_r+0x8f8>
 8007dd2:	9b04      	ldr	r3, [sp, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f040 8097 	bne.w	8007f08 <_dtoa_r+0x8f0>
 8007dda:	9b05      	ldr	r3, [sp, #20]
 8007ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 8093 	bne.w	8007f0c <_dtoa_r+0x8f4>
 8007de6:	9b05      	ldr	r3, [sp, #20]
 8007de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007dec:	0d1b      	lsrs	r3, r3, #20
 8007dee:	051b      	lsls	r3, r3, #20
 8007df0:	b133      	cbz	r3, 8007e00 <_dtoa_r+0x7e8>
 8007df2:	9b00      	ldr	r3, [sp, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	9b06      	ldr	r3, [sp, #24]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	9306      	str	r3, [sp, #24]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	9308      	str	r3, [sp, #32]
 8007e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 81b8 	beq.w	800817a <_dtoa_r+0xb62>
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e10:	6918      	ldr	r0, [r3, #16]
 8007e12:	f000 fb79 	bl	8008508 <__hi0bits>
 8007e16:	f1c0 0020 	rsb	r0, r0, #32
 8007e1a:	9b06      	ldr	r3, [sp, #24]
 8007e1c:	4418      	add	r0, r3
 8007e1e:	f010 001f 	ands.w	r0, r0, #31
 8007e22:	f000 8082 	beq.w	8007f2a <_dtoa_r+0x912>
 8007e26:	f1c0 0320 	rsb	r3, r0, #32
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	dd73      	ble.n	8007f16 <_dtoa_r+0x8fe>
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	f1c0 001c 	rsb	r0, r0, #28
 8007e34:	4403      	add	r3, r0
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	9b06      	ldr	r3, [sp, #24]
 8007e3a:	4403      	add	r3, r0
 8007e3c:	4406      	add	r6, r0
 8007e3e:	9306      	str	r3, [sp, #24]
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	dd05      	ble.n	8007e52 <_dtoa_r+0x83a>
 8007e46:	9902      	ldr	r1, [sp, #8]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4648      	mov	r0, r9
 8007e4c:	f000 fcba 	bl	80087c4 <__lshift>
 8007e50:	9002      	str	r0, [sp, #8]
 8007e52:	9b06      	ldr	r3, [sp, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dd05      	ble.n	8007e64 <_dtoa_r+0x84c>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4648      	mov	r0, r9
 8007e5e:	f000 fcb1 	bl	80087c4 <__lshift>
 8007e62:	4604      	mov	r4, r0
 8007e64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d061      	beq.n	8007f2e <_dtoa_r+0x916>
 8007e6a:	9802      	ldr	r0, [sp, #8]
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	f000 fd15 	bl	800889c <__mcmp>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	da5b      	bge.n	8007f2e <_dtoa_r+0x916>
 8007e76:	2300      	movs	r3, #0
 8007e78:	9902      	ldr	r1, [sp, #8]
 8007e7a:	220a      	movs	r2, #10
 8007e7c:	4648      	mov	r0, r9
 8007e7e:	f000 fafd 	bl	800847c <__multadd>
 8007e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e84:	9002      	str	r0, [sp, #8]
 8007e86:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 8177 	beq.w	800817e <_dtoa_r+0xb66>
 8007e90:	4629      	mov	r1, r5
 8007e92:	2300      	movs	r3, #0
 8007e94:	220a      	movs	r2, #10
 8007e96:	4648      	mov	r0, r9
 8007e98:	f000 faf0 	bl	800847c <__multadd>
 8007e9c:	f1bb 0f00 	cmp.w	fp, #0
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	dc6f      	bgt.n	8007f84 <_dtoa_r+0x96c>
 8007ea4:	9b07      	ldr	r3, [sp, #28]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	dc49      	bgt.n	8007f3e <_dtoa_r+0x926>
 8007eaa:	e06b      	b.n	8007f84 <_dtoa_r+0x96c>
 8007eac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007eae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007eb2:	e73c      	b.n	8007d2e <_dtoa_r+0x716>
 8007eb4:	3fe00000 	.word	0x3fe00000
 8007eb8:	40240000 	.word	0x40240000
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	1e5c      	subs	r4, r3, #1
 8007ec0:	9b08      	ldr	r3, [sp, #32]
 8007ec2:	42a3      	cmp	r3, r4
 8007ec4:	db09      	blt.n	8007eda <_dtoa_r+0x8c2>
 8007ec6:	1b1c      	subs	r4, r3, r4
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f6bf af30 	bge.w	8007d30 <_dtoa_r+0x718>
 8007ed0:	9b00      	ldr	r3, [sp, #0]
 8007ed2:	9a03      	ldr	r2, [sp, #12]
 8007ed4:	1a9e      	subs	r6, r3, r2
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e72b      	b.n	8007d32 <_dtoa_r+0x71a>
 8007eda:	9b08      	ldr	r3, [sp, #32]
 8007edc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ede:	9408      	str	r4, [sp, #32]
 8007ee0:	1ae3      	subs	r3, r4, r3
 8007ee2:	441a      	add	r2, r3
 8007ee4:	9e00      	ldr	r6, [sp, #0]
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	920d      	str	r2, [sp, #52]	@ 0x34
 8007eea:	2400      	movs	r4, #0
 8007eec:	e721      	b.n	8007d32 <_dtoa_r+0x71a>
 8007eee:	9c08      	ldr	r4, [sp, #32]
 8007ef0:	9e00      	ldr	r6, [sp, #0]
 8007ef2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007ef4:	e728      	b.n	8007d48 <_dtoa_r+0x730>
 8007ef6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007efa:	e751      	b.n	8007da0 <_dtoa_r+0x788>
 8007efc:	9a08      	ldr	r2, [sp, #32]
 8007efe:	9902      	ldr	r1, [sp, #8]
 8007f00:	e750      	b.n	8007da4 <_dtoa_r+0x78c>
 8007f02:	f8cd 8008 	str.w	r8, [sp, #8]
 8007f06:	e751      	b.n	8007dac <_dtoa_r+0x794>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e779      	b.n	8007e00 <_dtoa_r+0x7e8>
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	e777      	b.n	8007e00 <_dtoa_r+0x7e8>
 8007f10:	2300      	movs	r3, #0
 8007f12:	9308      	str	r3, [sp, #32]
 8007f14:	e779      	b.n	8007e0a <_dtoa_r+0x7f2>
 8007f16:	d093      	beq.n	8007e40 <_dtoa_r+0x828>
 8007f18:	9a00      	ldr	r2, [sp, #0]
 8007f1a:	331c      	adds	r3, #28
 8007f1c:	441a      	add	r2, r3
 8007f1e:	9200      	str	r2, [sp, #0]
 8007f20:	9a06      	ldr	r2, [sp, #24]
 8007f22:	441a      	add	r2, r3
 8007f24:	441e      	add	r6, r3
 8007f26:	9206      	str	r2, [sp, #24]
 8007f28:	e78a      	b.n	8007e40 <_dtoa_r+0x828>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	e7f4      	b.n	8007f18 <_dtoa_r+0x900>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	46b8      	mov	r8, r7
 8007f34:	dc20      	bgt.n	8007f78 <_dtoa_r+0x960>
 8007f36:	469b      	mov	fp, r3
 8007f38:	9b07      	ldr	r3, [sp, #28]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	dd1e      	ble.n	8007f7c <_dtoa_r+0x964>
 8007f3e:	f1bb 0f00 	cmp.w	fp, #0
 8007f42:	f47f adb1 	bne.w	8007aa8 <_dtoa_r+0x490>
 8007f46:	4621      	mov	r1, r4
 8007f48:	465b      	mov	r3, fp
 8007f4a:	2205      	movs	r2, #5
 8007f4c:	4648      	mov	r0, r9
 8007f4e:	f000 fa95 	bl	800847c <__multadd>
 8007f52:	4601      	mov	r1, r0
 8007f54:	4604      	mov	r4, r0
 8007f56:	9802      	ldr	r0, [sp, #8]
 8007f58:	f000 fca0 	bl	800889c <__mcmp>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	f77f ada3 	ble.w	8007aa8 <_dtoa_r+0x490>
 8007f62:	4656      	mov	r6, sl
 8007f64:	2331      	movs	r3, #49	@ 0x31
 8007f66:	f806 3b01 	strb.w	r3, [r6], #1
 8007f6a:	f108 0801 	add.w	r8, r8, #1
 8007f6e:	e59f      	b.n	8007ab0 <_dtoa_r+0x498>
 8007f70:	9c03      	ldr	r4, [sp, #12]
 8007f72:	46b8      	mov	r8, r7
 8007f74:	4625      	mov	r5, r4
 8007f76:	e7f4      	b.n	8007f62 <_dtoa_r+0x94a>
 8007f78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8101 	beq.w	8008186 <_dtoa_r+0xb6e>
 8007f84:	2e00      	cmp	r6, #0
 8007f86:	dd05      	ble.n	8007f94 <_dtoa_r+0x97c>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4632      	mov	r2, r6
 8007f8c:	4648      	mov	r0, r9
 8007f8e:	f000 fc19 	bl	80087c4 <__lshift>
 8007f92:	4605      	mov	r5, r0
 8007f94:	9b08      	ldr	r3, [sp, #32]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d05c      	beq.n	8008054 <_dtoa_r+0xa3c>
 8007f9a:	6869      	ldr	r1, [r5, #4]
 8007f9c:	4648      	mov	r0, r9
 8007f9e:	f000 fa0b 	bl	80083b8 <_Balloc>
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	b928      	cbnz	r0, 8007fb2 <_dtoa_r+0x99a>
 8007fa6:	4b82      	ldr	r3, [pc, #520]	@ (80081b0 <_dtoa_r+0xb98>)
 8007fa8:	4602      	mov	r2, r0
 8007faa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007fae:	f7ff bb4a 	b.w	8007646 <_dtoa_r+0x2e>
 8007fb2:	692a      	ldr	r2, [r5, #16]
 8007fb4:	3202      	adds	r2, #2
 8007fb6:	0092      	lsls	r2, r2, #2
 8007fb8:	f105 010c 	add.w	r1, r5, #12
 8007fbc:	300c      	adds	r0, #12
 8007fbe:	f000 feb5 	bl	8008d2c <memcpy>
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4648      	mov	r0, r9
 8007fc8:	f000 fbfc 	bl	80087c4 <__lshift>
 8007fcc:	f10a 0301 	add.w	r3, sl, #1
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	eb0a 030b 	add.w	r3, sl, fp
 8007fd6:	9308      	str	r3, [sp, #32]
 8007fd8:	9b04      	ldr	r3, [sp, #16]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	462f      	mov	r7, r5
 8007fe0:	9306      	str	r3, [sp, #24]
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	9802      	ldr	r0, [sp, #8]
 8007fe8:	4621      	mov	r1, r4
 8007fea:	f103 3bff 	add.w	fp, r3, #4294967295
 8007fee:	f7ff fa88 	bl	8007502 <quorem>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	3330      	adds	r3, #48	@ 0x30
 8007ff6:	9003      	str	r0, [sp, #12]
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	9802      	ldr	r0, [sp, #8]
 8007ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ffe:	f000 fc4d 	bl	800889c <__mcmp>
 8008002:	462a      	mov	r2, r5
 8008004:	9004      	str	r0, [sp, #16]
 8008006:	4621      	mov	r1, r4
 8008008:	4648      	mov	r0, r9
 800800a:	f000 fc63 	bl	80088d4 <__mdiff>
 800800e:	68c2      	ldr	r2, [r0, #12]
 8008010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008012:	4606      	mov	r6, r0
 8008014:	bb02      	cbnz	r2, 8008058 <_dtoa_r+0xa40>
 8008016:	4601      	mov	r1, r0
 8008018:	9802      	ldr	r0, [sp, #8]
 800801a:	f000 fc3f 	bl	800889c <__mcmp>
 800801e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008020:	4602      	mov	r2, r0
 8008022:	4631      	mov	r1, r6
 8008024:	4648      	mov	r0, r9
 8008026:	920c      	str	r2, [sp, #48]	@ 0x30
 8008028:	9309      	str	r3, [sp, #36]	@ 0x24
 800802a:	f000 fa05 	bl	8008438 <_Bfree>
 800802e:	9b07      	ldr	r3, [sp, #28]
 8008030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008032:	9e00      	ldr	r6, [sp, #0]
 8008034:	ea42 0103 	orr.w	r1, r2, r3
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	4319      	orrs	r1, r3
 800803c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803e:	d10d      	bne.n	800805c <_dtoa_r+0xa44>
 8008040:	2b39      	cmp	r3, #57	@ 0x39
 8008042:	d027      	beq.n	8008094 <_dtoa_r+0xa7c>
 8008044:	9a04      	ldr	r2, [sp, #16]
 8008046:	2a00      	cmp	r2, #0
 8008048:	dd01      	ble.n	800804e <_dtoa_r+0xa36>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	3331      	adds	r3, #49	@ 0x31
 800804e:	f88b 3000 	strb.w	r3, [fp]
 8008052:	e52e      	b.n	8007ab2 <_dtoa_r+0x49a>
 8008054:	4628      	mov	r0, r5
 8008056:	e7b9      	b.n	8007fcc <_dtoa_r+0x9b4>
 8008058:	2201      	movs	r2, #1
 800805a:	e7e2      	b.n	8008022 <_dtoa_r+0xa0a>
 800805c:	9904      	ldr	r1, [sp, #16]
 800805e:	2900      	cmp	r1, #0
 8008060:	db04      	blt.n	800806c <_dtoa_r+0xa54>
 8008062:	9807      	ldr	r0, [sp, #28]
 8008064:	4301      	orrs	r1, r0
 8008066:	9806      	ldr	r0, [sp, #24]
 8008068:	4301      	orrs	r1, r0
 800806a:	d120      	bne.n	80080ae <_dtoa_r+0xa96>
 800806c:	2a00      	cmp	r2, #0
 800806e:	ddee      	ble.n	800804e <_dtoa_r+0xa36>
 8008070:	9902      	ldr	r1, [sp, #8]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	2201      	movs	r2, #1
 8008076:	4648      	mov	r0, r9
 8008078:	f000 fba4 	bl	80087c4 <__lshift>
 800807c:	4621      	mov	r1, r4
 800807e:	9002      	str	r0, [sp, #8]
 8008080:	f000 fc0c 	bl	800889c <__mcmp>
 8008084:	2800      	cmp	r0, #0
 8008086:	9b00      	ldr	r3, [sp, #0]
 8008088:	dc02      	bgt.n	8008090 <_dtoa_r+0xa78>
 800808a:	d1e0      	bne.n	800804e <_dtoa_r+0xa36>
 800808c:	07da      	lsls	r2, r3, #31
 800808e:	d5de      	bpl.n	800804e <_dtoa_r+0xa36>
 8008090:	2b39      	cmp	r3, #57	@ 0x39
 8008092:	d1da      	bne.n	800804a <_dtoa_r+0xa32>
 8008094:	2339      	movs	r3, #57	@ 0x39
 8008096:	f88b 3000 	strb.w	r3, [fp]
 800809a:	4633      	mov	r3, r6
 800809c:	461e      	mov	r6, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80080a4:	2a39      	cmp	r2, #57	@ 0x39
 80080a6:	d04e      	beq.n	8008146 <_dtoa_r+0xb2e>
 80080a8:	3201      	adds	r2, #1
 80080aa:	701a      	strb	r2, [r3, #0]
 80080ac:	e501      	b.n	8007ab2 <_dtoa_r+0x49a>
 80080ae:	2a00      	cmp	r2, #0
 80080b0:	dd03      	ble.n	80080ba <_dtoa_r+0xaa2>
 80080b2:	2b39      	cmp	r3, #57	@ 0x39
 80080b4:	d0ee      	beq.n	8008094 <_dtoa_r+0xa7c>
 80080b6:	3301      	adds	r3, #1
 80080b8:	e7c9      	b.n	800804e <_dtoa_r+0xa36>
 80080ba:	9a00      	ldr	r2, [sp, #0]
 80080bc:	9908      	ldr	r1, [sp, #32]
 80080be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80080c2:	428a      	cmp	r2, r1
 80080c4:	d028      	beq.n	8008118 <_dtoa_r+0xb00>
 80080c6:	9902      	ldr	r1, [sp, #8]
 80080c8:	2300      	movs	r3, #0
 80080ca:	220a      	movs	r2, #10
 80080cc:	4648      	mov	r0, r9
 80080ce:	f000 f9d5 	bl	800847c <__multadd>
 80080d2:	42af      	cmp	r7, r5
 80080d4:	9002      	str	r0, [sp, #8]
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	f04f 020a 	mov.w	r2, #10
 80080de:	4639      	mov	r1, r7
 80080e0:	4648      	mov	r0, r9
 80080e2:	d107      	bne.n	80080f4 <_dtoa_r+0xadc>
 80080e4:	f000 f9ca 	bl	800847c <__multadd>
 80080e8:	4607      	mov	r7, r0
 80080ea:	4605      	mov	r5, r0
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	3301      	adds	r3, #1
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	e777      	b.n	8007fe4 <_dtoa_r+0x9cc>
 80080f4:	f000 f9c2 	bl	800847c <__multadd>
 80080f8:	4629      	mov	r1, r5
 80080fa:	4607      	mov	r7, r0
 80080fc:	2300      	movs	r3, #0
 80080fe:	220a      	movs	r2, #10
 8008100:	4648      	mov	r0, r9
 8008102:	f000 f9bb 	bl	800847c <__multadd>
 8008106:	4605      	mov	r5, r0
 8008108:	e7f0      	b.n	80080ec <_dtoa_r+0xad4>
 800810a:	f1bb 0f00 	cmp.w	fp, #0
 800810e:	bfcc      	ite	gt
 8008110:	465e      	movgt	r6, fp
 8008112:	2601      	movle	r6, #1
 8008114:	4456      	add	r6, sl
 8008116:	2700      	movs	r7, #0
 8008118:	9902      	ldr	r1, [sp, #8]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2201      	movs	r2, #1
 800811e:	4648      	mov	r0, r9
 8008120:	f000 fb50 	bl	80087c4 <__lshift>
 8008124:	4621      	mov	r1, r4
 8008126:	9002      	str	r0, [sp, #8]
 8008128:	f000 fbb8 	bl	800889c <__mcmp>
 800812c:	2800      	cmp	r0, #0
 800812e:	dcb4      	bgt.n	800809a <_dtoa_r+0xa82>
 8008130:	d102      	bne.n	8008138 <_dtoa_r+0xb20>
 8008132:	9b00      	ldr	r3, [sp, #0]
 8008134:	07db      	lsls	r3, r3, #31
 8008136:	d4b0      	bmi.n	800809a <_dtoa_r+0xa82>
 8008138:	4633      	mov	r3, r6
 800813a:	461e      	mov	r6, r3
 800813c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008140:	2a30      	cmp	r2, #48	@ 0x30
 8008142:	d0fa      	beq.n	800813a <_dtoa_r+0xb22>
 8008144:	e4b5      	b.n	8007ab2 <_dtoa_r+0x49a>
 8008146:	459a      	cmp	sl, r3
 8008148:	d1a8      	bne.n	800809c <_dtoa_r+0xa84>
 800814a:	2331      	movs	r3, #49	@ 0x31
 800814c:	f108 0801 	add.w	r8, r8, #1
 8008150:	f88a 3000 	strb.w	r3, [sl]
 8008154:	e4ad      	b.n	8007ab2 <_dtoa_r+0x49a>
 8008156:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008158:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80081b4 <_dtoa_r+0xb9c>
 800815c:	b11b      	cbz	r3, 8008166 <_dtoa_r+0xb4e>
 800815e:	f10a 0308 	add.w	r3, sl, #8
 8008162:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	4650      	mov	r0, sl
 8008168:	b017      	add	sp, #92	@ 0x5c
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	9b07      	ldr	r3, [sp, #28]
 8008170:	2b01      	cmp	r3, #1
 8008172:	f77f ae2e 	ble.w	8007dd2 <_dtoa_r+0x7ba>
 8008176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008178:	9308      	str	r3, [sp, #32]
 800817a:	2001      	movs	r0, #1
 800817c:	e64d      	b.n	8007e1a <_dtoa_r+0x802>
 800817e:	f1bb 0f00 	cmp.w	fp, #0
 8008182:	f77f aed9 	ble.w	8007f38 <_dtoa_r+0x920>
 8008186:	4656      	mov	r6, sl
 8008188:	9802      	ldr	r0, [sp, #8]
 800818a:	4621      	mov	r1, r4
 800818c:	f7ff f9b9 	bl	8007502 <quorem>
 8008190:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008194:	f806 3b01 	strb.w	r3, [r6], #1
 8008198:	eba6 020a 	sub.w	r2, r6, sl
 800819c:	4593      	cmp	fp, r2
 800819e:	ddb4      	ble.n	800810a <_dtoa_r+0xaf2>
 80081a0:	9902      	ldr	r1, [sp, #8]
 80081a2:	2300      	movs	r3, #0
 80081a4:	220a      	movs	r2, #10
 80081a6:	4648      	mov	r0, r9
 80081a8:	f000 f968 	bl	800847c <__multadd>
 80081ac:	9002      	str	r0, [sp, #8]
 80081ae:	e7eb      	b.n	8008188 <_dtoa_r+0xb70>
 80081b0:	0800926c 	.word	0x0800926c
 80081b4:	080091f0 	.word	0x080091f0

080081b8 <_free_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4605      	mov	r5, r0
 80081bc:	2900      	cmp	r1, #0
 80081be:	d041      	beq.n	8008244 <_free_r+0x8c>
 80081c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c4:	1f0c      	subs	r4, r1, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	18e4      	addlt	r4, r4, r3
 80081cc:	f000 f8e8 	bl	80083a0 <__malloc_lock>
 80081d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008248 <_free_r+0x90>)
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	b933      	cbnz	r3, 80081e4 <_free_r+0x2c>
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	6014      	str	r4, [r2, #0]
 80081da:	4628      	mov	r0, r5
 80081dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e0:	f000 b8e4 	b.w	80083ac <__malloc_unlock>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d908      	bls.n	80081fa <_free_r+0x42>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	1821      	adds	r1, r4, r0
 80081ec:	428b      	cmp	r3, r1
 80081ee:	bf01      	itttt	eq
 80081f0:	6819      	ldreq	r1, [r3, #0]
 80081f2:	685b      	ldreq	r3, [r3, #4]
 80081f4:	1809      	addeq	r1, r1, r0
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	e7ed      	b.n	80081d6 <_free_r+0x1e>
 80081fa:	461a      	mov	r2, r3
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b10b      	cbz	r3, 8008204 <_free_r+0x4c>
 8008200:	42a3      	cmp	r3, r4
 8008202:	d9fa      	bls.n	80081fa <_free_r+0x42>
 8008204:	6811      	ldr	r1, [r2, #0]
 8008206:	1850      	adds	r0, r2, r1
 8008208:	42a0      	cmp	r0, r4
 800820a:	d10b      	bne.n	8008224 <_free_r+0x6c>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	4401      	add	r1, r0
 8008210:	1850      	adds	r0, r2, r1
 8008212:	4283      	cmp	r3, r0
 8008214:	6011      	str	r1, [r2, #0]
 8008216:	d1e0      	bne.n	80081da <_free_r+0x22>
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	6053      	str	r3, [r2, #4]
 800821e:	4408      	add	r0, r1
 8008220:	6010      	str	r0, [r2, #0]
 8008222:	e7da      	b.n	80081da <_free_r+0x22>
 8008224:	d902      	bls.n	800822c <_free_r+0x74>
 8008226:	230c      	movs	r3, #12
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	e7d6      	b.n	80081da <_free_r+0x22>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	1821      	adds	r1, r4, r0
 8008230:	428b      	cmp	r3, r1
 8008232:	bf04      	itt	eq
 8008234:	6819      	ldreq	r1, [r3, #0]
 8008236:	685b      	ldreq	r3, [r3, #4]
 8008238:	6063      	str	r3, [r4, #4]
 800823a:	bf04      	itt	eq
 800823c:	1809      	addeq	r1, r1, r0
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	6054      	str	r4, [r2, #4]
 8008242:	e7ca      	b.n	80081da <_free_r+0x22>
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	bf00      	nop
 8008248:	20001790 	.word	0x20001790

0800824c <malloc>:
 800824c:	4b02      	ldr	r3, [pc, #8]	@ (8008258 <malloc+0xc>)
 800824e:	4601      	mov	r1, r0
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	f000 b825 	b.w	80082a0 <_malloc_r>
 8008256:	bf00      	nop
 8008258:	20000030 	.word	0x20000030

0800825c <sbrk_aligned>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	4e0f      	ldr	r6, [pc, #60]	@ (800829c <sbrk_aligned+0x40>)
 8008260:	460c      	mov	r4, r1
 8008262:	6831      	ldr	r1, [r6, #0]
 8008264:	4605      	mov	r5, r0
 8008266:	b911      	cbnz	r1, 800826e <sbrk_aligned+0x12>
 8008268:	f000 fd50 	bl	8008d0c <_sbrk_r>
 800826c:	6030      	str	r0, [r6, #0]
 800826e:	4621      	mov	r1, r4
 8008270:	4628      	mov	r0, r5
 8008272:	f000 fd4b 	bl	8008d0c <_sbrk_r>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d103      	bne.n	8008282 <sbrk_aligned+0x26>
 800827a:	f04f 34ff 	mov.w	r4, #4294967295
 800827e:	4620      	mov	r0, r4
 8008280:	bd70      	pop	{r4, r5, r6, pc}
 8008282:	1cc4      	adds	r4, r0, #3
 8008284:	f024 0403 	bic.w	r4, r4, #3
 8008288:	42a0      	cmp	r0, r4
 800828a:	d0f8      	beq.n	800827e <sbrk_aligned+0x22>
 800828c:	1a21      	subs	r1, r4, r0
 800828e:	4628      	mov	r0, r5
 8008290:	f000 fd3c 	bl	8008d0c <_sbrk_r>
 8008294:	3001      	adds	r0, #1
 8008296:	d1f2      	bne.n	800827e <sbrk_aligned+0x22>
 8008298:	e7ef      	b.n	800827a <sbrk_aligned+0x1e>
 800829a:	bf00      	nop
 800829c:	2000178c 	.word	0x2000178c

080082a0 <_malloc_r>:
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	1ccd      	adds	r5, r1, #3
 80082a6:	f025 0503 	bic.w	r5, r5, #3
 80082aa:	3508      	adds	r5, #8
 80082ac:	2d0c      	cmp	r5, #12
 80082ae:	bf38      	it	cc
 80082b0:	250c      	movcc	r5, #12
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	4606      	mov	r6, r0
 80082b6:	db01      	blt.n	80082bc <_malloc_r+0x1c>
 80082b8:	42a9      	cmp	r1, r5
 80082ba:	d904      	bls.n	80082c6 <_malloc_r+0x26>
 80082bc:	230c      	movs	r3, #12
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	2000      	movs	r0, #0
 80082c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800839c <_malloc_r+0xfc>
 80082ca:	f000 f869 	bl	80083a0 <__malloc_lock>
 80082ce:	f8d8 3000 	ldr.w	r3, [r8]
 80082d2:	461c      	mov	r4, r3
 80082d4:	bb44      	cbnz	r4, 8008328 <_malloc_r+0x88>
 80082d6:	4629      	mov	r1, r5
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff ffbf 	bl	800825c <sbrk_aligned>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	4604      	mov	r4, r0
 80082e2:	d158      	bne.n	8008396 <_malloc_r+0xf6>
 80082e4:	f8d8 4000 	ldr.w	r4, [r8]
 80082e8:	4627      	mov	r7, r4
 80082ea:	2f00      	cmp	r7, #0
 80082ec:	d143      	bne.n	8008376 <_malloc_r+0xd6>
 80082ee:	2c00      	cmp	r4, #0
 80082f0:	d04b      	beq.n	800838a <_malloc_r+0xea>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	4639      	mov	r1, r7
 80082f6:	4630      	mov	r0, r6
 80082f8:	eb04 0903 	add.w	r9, r4, r3
 80082fc:	f000 fd06 	bl	8008d0c <_sbrk_r>
 8008300:	4581      	cmp	r9, r0
 8008302:	d142      	bne.n	800838a <_malloc_r+0xea>
 8008304:	6821      	ldr	r1, [r4, #0]
 8008306:	1a6d      	subs	r5, r5, r1
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ffa6 	bl	800825c <sbrk_aligned>
 8008310:	3001      	adds	r0, #1
 8008312:	d03a      	beq.n	800838a <_malloc_r+0xea>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	442b      	add	r3, r5
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	f8d8 3000 	ldr.w	r3, [r8]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	bb62      	cbnz	r2, 800837c <_malloc_r+0xdc>
 8008322:	f8c8 7000 	str.w	r7, [r8]
 8008326:	e00f      	b.n	8008348 <_malloc_r+0xa8>
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	1b52      	subs	r2, r2, r5
 800832c:	d420      	bmi.n	8008370 <_malloc_r+0xd0>
 800832e:	2a0b      	cmp	r2, #11
 8008330:	d917      	bls.n	8008362 <_malloc_r+0xc2>
 8008332:	1961      	adds	r1, r4, r5
 8008334:	42a3      	cmp	r3, r4
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	bf18      	it	ne
 800833a:	6059      	strne	r1, [r3, #4]
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	bf08      	it	eq
 8008340:	f8c8 1000 	streq.w	r1, [r8]
 8008344:	5162      	str	r2, [r4, r5]
 8008346:	604b      	str	r3, [r1, #4]
 8008348:	4630      	mov	r0, r6
 800834a:	f000 f82f 	bl	80083ac <__malloc_unlock>
 800834e:	f104 000b 	add.w	r0, r4, #11
 8008352:	1d23      	adds	r3, r4, #4
 8008354:	f020 0007 	bic.w	r0, r0, #7
 8008358:	1ac2      	subs	r2, r0, r3
 800835a:	bf1c      	itt	ne
 800835c:	1a1b      	subne	r3, r3, r0
 800835e:	50a3      	strne	r3, [r4, r2]
 8008360:	e7af      	b.n	80082c2 <_malloc_r+0x22>
 8008362:	6862      	ldr	r2, [r4, #4]
 8008364:	42a3      	cmp	r3, r4
 8008366:	bf0c      	ite	eq
 8008368:	f8c8 2000 	streq.w	r2, [r8]
 800836c:	605a      	strne	r2, [r3, #4]
 800836e:	e7eb      	b.n	8008348 <_malloc_r+0xa8>
 8008370:	4623      	mov	r3, r4
 8008372:	6864      	ldr	r4, [r4, #4]
 8008374:	e7ae      	b.n	80082d4 <_malloc_r+0x34>
 8008376:	463c      	mov	r4, r7
 8008378:	687f      	ldr	r7, [r7, #4]
 800837a:	e7b6      	b.n	80082ea <_malloc_r+0x4a>
 800837c:	461a      	mov	r2, r3
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	42a3      	cmp	r3, r4
 8008382:	d1fb      	bne.n	800837c <_malloc_r+0xdc>
 8008384:	2300      	movs	r3, #0
 8008386:	6053      	str	r3, [r2, #4]
 8008388:	e7de      	b.n	8008348 <_malloc_r+0xa8>
 800838a:	230c      	movs	r3, #12
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f80c 	bl	80083ac <__malloc_unlock>
 8008394:	e794      	b.n	80082c0 <_malloc_r+0x20>
 8008396:	6005      	str	r5, [r0, #0]
 8008398:	e7d6      	b.n	8008348 <_malloc_r+0xa8>
 800839a:	bf00      	nop
 800839c:	20001790 	.word	0x20001790

080083a0 <__malloc_lock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	@ (80083a8 <__malloc_lock+0x8>)
 80083a2:	f7ff b8ac 	b.w	80074fe <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	20001788 	.word	0x20001788

080083ac <__malloc_unlock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	@ (80083b4 <__malloc_unlock+0x8>)
 80083ae:	f7ff b8a7 	b.w	8007500 <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	20001788 	.word	0x20001788

080083b8 <_Balloc>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	69c6      	ldr	r6, [r0, #28]
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	b976      	cbnz	r6, 80083e0 <_Balloc+0x28>
 80083c2:	2010      	movs	r0, #16
 80083c4:	f7ff ff42 	bl	800824c <malloc>
 80083c8:	4602      	mov	r2, r0
 80083ca:	61e0      	str	r0, [r4, #28]
 80083cc:	b920      	cbnz	r0, 80083d8 <_Balloc+0x20>
 80083ce:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <_Balloc+0x78>)
 80083d0:	4818      	ldr	r0, [pc, #96]	@ (8008434 <_Balloc+0x7c>)
 80083d2:	216b      	movs	r1, #107	@ 0x6b
 80083d4:	f000 fcb8 	bl	8008d48 <__assert_func>
 80083d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083dc:	6006      	str	r6, [r0, #0]
 80083de:	60c6      	str	r6, [r0, #12]
 80083e0:	69e6      	ldr	r6, [r4, #28]
 80083e2:	68f3      	ldr	r3, [r6, #12]
 80083e4:	b183      	cbz	r3, 8008408 <_Balloc+0x50>
 80083e6:	69e3      	ldr	r3, [r4, #28]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ee:	b9b8      	cbnz	r0, 8008420 <_Balloc+0x68>
 80083f0:	2101      	movs	r1, #1
 80083f2:	fa01 f605 	lsl.w	r6, r1, r5
 80083f6:	1d72      	adds	r2, r6, #5
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fcc2 	bl	8008d84 <_calloc_r>
 8008400:	b160      	cbz	r0, 800841c <_Balloc+0x64>
 8008402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008406:	e00e      	b.n	8008426 <_Balloc+0x6e>
 8008408:	2221      	movs	r2, #33	@ 0x21
 800840a:	2104      	movs	r1, #4
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fcb9 	bl	8008d84 <_calloc_r>
 8008412:	69e3      	ldr	r3, [r4, #28]
 8008414:	60f0      	str	r0, [r6, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e4      	bne.n	80083e6 <_Balloc+0x2e>
 800841c:	2000      	movs	r0, #0
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	6802      	ldr	r2, [r0, #0]
 8008422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008426:	2300      	movs	r3, #0
 8008428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800842c:	e7f7      	b.n	800841e <_Balloc+0x66>
 800842e:	bf00      	nop
 8008430:	080091fd 	.word	0x080091fd
 8008434:	0800927d 	.word	0x0800927d

08008438 <_Bfree>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	69c6      	ldr	r6, [r0, #28]
 800843c:	4605      	mov	r5, r0
 800843e:	460c      	mov	r4, r1
 8008440:	b976      	cbnz	r6, 8008460 <_Bfree+0x28>
 8008442:	2010      	movs	r0, #16
 8008444:	f7ff ff02 	bl	800824c <malloc>
 8008448:	4602      	mov	r2, r0
 800844a:	61e8      	str	r0, [r5, #28]
 800844c:	b920      	cbnz	r0, 8008458 <_Bfree+0x20>
 800844e:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <_Bfree+0x3c>)
 8008450:	4809      	ldr	r0, [pc, #36]	@ (8008478 <_Bfree+0x40>)
 8008452:	218f      	movs	r1, #143	@ 0x8f
 8008454:	f000 fc78 	bl	8008d48 <__assert_func>
 8008458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800845c:	6006      	str	r6, [r0, #0]
 800845e:	60c6      	str	r6, [r0, #12]
 8008460:	b13c      	cbz	r4, 8008472 <_Bfree+0x3a>
 8008462:	69eb      	ldr	r3, [r5, #28]
 8008464:	6862      	ldr	r2, [r4, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800846c:	6021      	str	r1, [r4, #0]
 800846e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	080091fd 	.word	0x080091fd
 8008478:	0800927d 	.word	0x0800927d

0800847c <__multadd>:
 800847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008480:	690d      	ldr	r5, [r1, #16]
 8008482:	4607      	mov	r7, r0
 8008484:	460c      	mov	r4, r1
 8008486:	461e      	mov	r6, r3
 8008488:	f101 0c14 	add.w	ip, r1, #20
 800848c:	2000      	movs	r0, #0
 800848e:	f8dc 3000 	ldr.w	r3, [ip]
 8008492:	b299      	uxth	r1, r3
 8008494:	fb02 6101 	mla	r1, r2, r1, r6
 8008498:	0c1e      	lsrs	r6, r3, #16
 800849a:	0c0b      	lsrs	r3, r1, #16
 800849c:	fb02 3306 	mla	r3, r2, r6, r3
 80084a0:	b289      	uxth	r1, r1
 80084a2:	3001      	adds	r0, #1
 80084a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084a8:	4285      	cmp	r5, r0
 80084aa:	f84c 1b04 	str.w	r1, [ip], #4
 80084ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084b2:	dcec      	bgt.n	800848e <__multadd+0x12>
 80084b4:	b30e      	cbz	r6, 80084fa <__multadd+0x7e>
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dc19      	bgt.n	80084f0 <__multadd+0x74>
 80084bc:	6861      	ldr	r1, [r4, #4]
 80084be:	4638      	mov	r0, r7
 80084c0:	3101      	adds	r1, #1
 80084c2:	f7ff ff79 	bl	80083b8 <_Balloc>
 80084c6:	4680      	mov	r8, r0
 80084c8:	b928      	cbnz	r0, 80084d6 <__multadd+0x5a>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <__multadd+0x84>)
 80084ce:	480d      	ldr	r0, [pc, #52]	@ (8008504 <__multadd+0x88>)
 80084d0:	21ba      	movs	r1, #186	@ 0xba
 80084d2:	f000 fc39 	bl	8008d48 <__assert_func>
 80084d6:	6922      	ldr	r2, [r4, #16]
 80084d8:	3202      	adds	r2, #2
 80084da:	f104 010c 	add.w	r1, r4, #12
 80084de:	0092      	lsls	r2, r2, #2
 80084e0:	300c      	adds	r0, #12
 80084e2:	f000 fc23 	bl	8008d2c <memcpy>
 80084e6:	4621      	mov	r1, r4
 80084e8:	4638      	mov	r0, r7
 80084ea:	f7ff ffa5 	bl	8008438 <_Bfree>
 80084ee:	4644      	mov	r4, r8
 80084f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084f4:	3501      	adds	r5, #1
 80084f6:	615e      	str	r6, [r3, #20]
 80084f8:	6125      	str	r5, [r4, #16]
 80084fa:	4620      	mov	r0, r4
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	0800926c 	.word	0x0800926c
 8008504:	0800927d 	.word	0x0800927d

08008508 <__hi0bits>:
 8008508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800850c:	4603      	mov	r3, r0
 800850e:	bf36      	itet	cc
 8008510:	0403      	lslcc	r3, r0, #16
 8008512:	2000      	movcs	r0, #0
 8008514:	2010      	movcc	r0, #16
 8008516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800851a:	bf3c      	itt	cc
 800851c:	021b      	lslcc	r3, r3, #8
 800851e:	3008      	addcc	r0, #8
 8008520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008524:	bf3c      	itt	cc
 8008526:	011b      	lslcc	r3, r3, #4
 8008528:	3004      	addcc	r0, #4
 800852a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800852e:	bf3c      	itt	cc
 8008530:	009b      	lslcc	r3, r3, #2
 8008532:	3002      	addcc	r0, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	db05      	blt.n	8008544 <__hi0bits+0x3c>
 8008538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800853c:	f100 0001 	add.w	r0, r0, #1
 8008540:	bf08      	it	eq
 8008542:	2020      	moveq	r0, #32
 8008544:	4770      	bx	lr

08008546 <__lo0bits>:
 8008546:	6803      	ldr	r3, [r0, #0]
 8008548:	4602      	mov	r2, r0
 800854a:	f013 0007 	ands.w	r0, r3, #7
 800854e:	d00b      	beq.n	8008568 <__lo0bits+0x22>
 8008550:	07d9      	lsls	r1, r3, #31
 8008552:	d421      	bmi.n	8008598 <__lo0bits+0x52>
 8008554:	0798      	lsls	r0, r3, #30
 8008556:	bf49      	itett	mi
 8008558:	085b      	lsrmi	r3, r3, #1
 800855a:	089b      	lsrpl	r3, r3, #2
 800855c:	2001      	movmi	r0, #1
 800855e:	6013      	strmi	r3, [r2, #0]
 8008560:	bf5c      	itt	pl
 8008562:	6013      	strpl	r3, [r2, #0]
 8008564:	2002      	movpl	r0, #2
 8008566:	4770      	bx	lr
 8008568:	b299      	uxth	r1, r3
 800856a:	b909      	cbnz	r1, 8008570 <__lo0bits+0x2a>
 800856c:	0c1b      	lsrs	r3, r3, #16
 800856e:	2010      	movs	r0, #16
 8008570:	b2d9      	uxtb	r1, r3
 8008572:	b909      	cbnz	r1, 8008578 <__lo0bits+0x32>
 8008574:	3008      	adds	r0, #8
 8008576:	0a1b      	lsrs	r3, r3, #8
 8008578:	0719      	lsls	r1, r3, #28
 800857a:	bf04      	itt	eq
 800857c:	091b      	lsreq	r3, r3, #4
 800857e:	3004      	addeq	r0, #4
 8008580:	0799      	lsls	r1, r3, #30
 8008582:	bf04      	itt	eq
 8008584:	089b      	lsreq	r3, r3, #2
 8008586:	3002      	addeq	r0, #2
 8008588:	07d9      	lsls	r1, r3, #31
 800858a:	d403      	bmi.n	8008594 <__lo0bits+0x4e>
 800858c:	085b      	lsrs	r3, r3, #1
 800858e:	f100 0001 	add.w	r0, r0, #1
 8008592:	d003      	beq.n	800859c <__lo0bits+0x56>
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	4770      	bx	lr
 8008598:	2000      	movs	r0, #0
 800859a:	4770      	bx	lr
 800859c:	2020      	movs	r0, #32
 800859e:	4770      	bx	lr

080085a0 <__i2b>:
 80085a0:	b510      	push	{r4, lr}
 80085a2:	460c      	mov	r4, r1
 80085a4:	2101      	movs	r1, #1
 80085a6:	f7ff ff07 	bl	80083b8 <_Balloc>
 80085aa:	4602      	mov	r2, r0
 80085ac:	b928      	cbnz	r0, 80085ba <__i2b+0x1a>
 80085ae:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <__i2b+0x24>)
 80085b0:	4805      	ldr	r0, [pc, #20]	@ (80085c8 <__i2b+0x28>)
 80085b2:	f240 1145 	movw	r1, #325	@ 0x145
 80085b6:	f000 fbc7 	bl	8008d48 <__assert_func>
 80085ba:	2301      	movs	r3, #1
 80085bc:	6144      	str	r4, [r0, #20]
 80085be:	6103      	str	r3, [r0, #16]
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	bf00      	nop
 80085c4:	0800926c 	.word	0x0800926c
 80085c8:	0800927d 	.word	0x0800927d

080085cc <__multiply>:
 80085cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	4617      	mov	r7, r2
 80085d2:	690a      	ldr	r2, [r1, #16]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	bfa8      	it	ge
 80085da:	463b      	movge	r3, r7
 80085dc:	4689      	mov	r9, r1
 80085de:	bfa4      	itt	ge
 80085e0:	460f      	movge	r7, r1
 80085e2:	4699      	movge	r9, r3
 80085e4:	693d      	ldr	r5, [r7, #16]
 80085e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	eb05 060a 	add.w	r6, r5, sl
 80085f2:	42b3      	cmp	r3, r6
 80085f4:	b085      	sub	sp, #20
 80085f6:	bfb8      	it	lt
 80085f8:	3101      	addlt	r1, #1
 80085fa:	f7ff fedd 	bl	80083b8 <_Balloc>
 80085fe:	b930      	cbnz	r0, 800860e <__multiply+0x42>
 8008600:	4602      	mov	r2, r0
 8008602:	4b41      	ldr	r3, [pc, #260]	@ (8008708 <__multiply+0x13c>)
 8008604:	4841      	ldr	r0, [pc, #260]	@ (800870c <__multiply+0x140>)
 8008606:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800860a:	f000 fb9d 	bl	8008d48 <__assert_func>
 800860e:	f100 0414 	add.w	r4, r0, #20
 8008612:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008616:	4623      	mov	r3, r4
 8008618:	2200      	movs	r2, #0
 800861a:	4573      	cmp	r3, lr
 800861c:	d320      	bcc.n	8008660 <__multiply+0x94>
 800861e:	f107 0814 	add.w	r8, r7, #20
 8008622:	f109 0114 	add.w	r1, r9, #20
 8008626:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800862a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	1beb      	subs	r3, r5, r7
 8008632:	3b15      	subs	r3, #21
 8008634:	f023 0303 	bic.w	r3, r3, #3
 8008638:	3304      	adds	r3, #4
 800863a:	3715      	adds	r7, #21
 800863c:	42bd      	cmp	r5, r7
 800863e:	bf38      	it	cc
 8008640:	2304      	movcc	r3, #4
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	9103      	str	r1, [sp, #12]
 8008648:	428b      	cmp	r3, r1
 800864a:	d80c      	bhi.n	8008666 <__multiply+0x9a>
 800864c:	2e00      	cmp	r6, #0
 800864e:	dd03      	ble.n	8008658 <__multiply+0x8c>
 8008650:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008654:	2b00      	cmp	r3, #0
 8008656:	d055      	beq.n	8008704 <__multiply+0x138>
 8008658:	6106      	str	r6, [r0, #16]
 800865a:	b005      	add	sp, #20
 800865c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008660:	f843 2b04 	str.w	r2, [r3], #4
 8008664:	e7d9      	b.n	800861a <__multiply+0x4e>
 8008666:	f8b1 a000 	ldrh.w	sl, [r1]
 800866a:	f1ba 0f00 	cmp.w	sl, #0
 800866e:	d01f      	beq.n	80086b0 <__multiply+0xe4>
 8008670:	46c4      	mov	ip, r8
 8008672:	46a1      	mov	r9, r4
 8008674:	2700      	movs	r7, #0
 8008676:	f85c 2b04 	ldr.w	r2, [ip], #4
 800867a:	f8d9 3000 	ldr.w	r3, [r9]
 800867e:	fa1f fb82 	uxth.w	fp, r2
 8008682:	b29b      	uxth	r3, r3
 8008684:	fb0a 330b 	mla	r3, sl, fp, r3
 8008688:	443b      	add	r3, r7
 800868a:	f8d9 7000 	ldr.w	r7, [r9]
 800868e:	0c12      	lsrs	r2, r2, #16
 8008690:	0c3f      	lsrs	r7, r7, #16
 8008692:	fb0a 7202 	mla	r2, sl, r2, r7
 8008696:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800869a:	b29b      	uxth	r3, r3
 800869c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086a0:	4565      	cmp	r5, ip
 80086a2:	f849 3b04 	str.w	r3, [r9], #4
 80086a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80086aa:	d8e4      	bhi.n	8008676 <__multiply+0xaa>
 80086ac:	9b01      	ldr	r3, [sp, #4]
 80086ae:	50e7      	str	r7, [r4, r3]
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80086b6:	3104      	adds	r1, #4
 80086b8:	f1b9 0f00 	cmp.w	r9, #0
 80086bc:	d020      	beq.n	8008700 <__multiply+0x134>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	4647      	mov	r7, r8
 80086c2:	46a4      	mov	ip, r4
 80086c4:	f04f 0a00 	mov.w	sl, #0
 80086c8:	f8b7 b000 	ldrh.w	fp, [r7]
 80086cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80086d0:	fb09 220b 	mla	r2, r9, fp, r2
 80086d4:	4452      	add	r2, sl
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086dc:	f84c 3b04 	str.w	r3, [ip], #4
 80086e0:	f857 3b04 	ldr.w	r3, [r7], #4
 80086e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086e8:	f8bc 3000 	ldrh.w	r3, [ip]
 80086ec:	fb09 330a 	mla	r3, r9, sl, r3
 80086f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80086f4:	42bd      	cmp	r5, r7
 80086f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086fa:	d8e5      	bhi.n	80086c8 <__multiply+0xfc>
 80086fc:	9a01      	ldr	r2, [sp, #4]
 80086fe:	50a3      	str	r3, [r4, r2]
 8008700:	3404      	adds	r4, #4
 8008702:	e79f      	b.n	8008644 <__multiply+0x78>
 8008704:	3e01      	subs	r6, #1
 8008706:	e7a1      	b.n	800864c <__multiply+0x80>
 8008708:	0800926c 	.word	0x0800926c
 800870c:	0800927d 	.word	0x0800927d

08008710 <__pow5mult>:
 8008710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008714:	4615      	mov	r5, r2
 8008716:	f012 0203 	ands.w	r2, r2, #3
 800871a:	4607      	mov	r7, r0
 800871c:	460e      	mov	r6, r1
 800871e:	d007      	beq.n	8008730 <__pow5mult+0x20>
 8008720:	4c25      	ldr	r4, [pc, #148]	@ (80087b8 <__pow5mult+0xa8>)
 8008722:	3a01      	subs	r2, #1
 8008724:	2300      	movs	r3, #0
 8008726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800872a:	f7ff fea7 	bl	800847c <__multadd>
 800872e:	4606      	mov	r6, r0
 8008730:	10ad      	asrs	r5, r5, #2
 8008732:	d03d      	beq.n	80087b0 <__pow5mult+0xa0>
 8008734:	69fc      	ldr	r4, [r7, #28]
 8008736:	b97c      	cbnz	r4, 8008758 <__pow5mult+0x48>
 8008738:	2010      	movs	r0, #16
 800873a:	f7ff fd87 	bl	800824c <malloc>
 800873e:	4602      	mov	r2, r0
 8008740:	61f8      	str	r0, [r7, #28]
 8008742:	b928      	cbnz	r0, 8008750 <__pow5mult+0x40>
 8008744:	4b1d      	ldr	r3, [pc, #116]	@ (80087bc <__pow5mult+0xac>)
 8008746:	481e      	ldr	r0, [pc, #120]	@ (80087c0 <__pow5mult+0xb0>)
 8008748:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800874c:	f000 fafc 	bl	8008d48 <__assert_func>
 8008750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008754:	6004      	str	r4, [r0, #0]
 8008756:	60c4      	str	r4, [r0, #12]
 8008758:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800875c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008760:	b94c      	cbnz	r4, 8008776 <__pow5mult+0x66>
 8008762:	f240 2171 	movw	r1, #625	@ 0x271
 8008766:	4638      	mov	r0, r7
 8008768:	f7ff ff1a 	bl	80085a0 <__i2b>
 800876c:	2300      	movs	r3, #0
 800876e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008772:	4604      	mov	r4, r0
 8008774:	6003      	str	r3, [r0, #0]
 8008776:	f04f 0900 	mov.w	r9, #0
 800877a:	07eb      	lsls	r3, r5, #31
 800877c:	d50a      	bpl.n	8008794 <__pow5mult+0x84>
 800877e:	4631      	mov	r1, r6
 8008780:	4622      	mov	r2, r4
 8008782:	4638      	mov	r0, r7
 8008784:	f7ff ff22 	bl	80085cc <__multiply>
 8008788:	4631      	mov	r1, r6
 800878a:	4680      	mov	r8, r0
 800878c:	4638      	mov	r0, r7
 800878e:	f7ff fe53 	bl	8008438 <_Bfree>
 8008792:	4646      	mov	r6, r8
 8008794:	106d      	asrs	r5, r5, #1
 8008796:	d00b      	beq.n	80087b0 <__pow5mult+0xa0>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	b938      	cbnz	r0, 80087ac <__pow5mult+0x9c>
 800879c:	4622      	mov	r2, r4
 800879e:	4621      	mov	r1, r4
 80087a0:	4638      	mov	r0, r7
 80087a2:	f7ff ff13 	bl	80085cc <__multiply>
 80087a6:	6020      	str	r0, [r4, #0]
 80087a8:	f8c0 9000 	str.w	r9, [r0]
 80087ac:	4604      	mov	r4, r0
 80087ae:	e7e4      	b.n	800877a <__pow5mult+0x6a>
 80087b0:	4630      	mov	r0, r6
 80087b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b6:	bf00      	nop
 80087b8:	08009330 	.word	0x08009330
 80087bc:	080091fd 	.word	0x080091fd
 80087c0:	0800927d 	.word	0x0800927d

080087c4 <__lshift>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	460c      	mov	r4, r1
 80087ca:	6849      	ldr	r1, [r1, #4]
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087d2:	68a3      	ldr	r3, [r4, #8]
 80087d4:	4607      	mov	r7, r0
 80087d6:	4691      	mov	r9, r2
 80087d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087dc:	f108 0601 	add.w	r6, r8, #1
 80087e0:	42b3      	cmp	r3, r6
 80087e2:	db0b      	blt.n	80087fc <__lshift+0x38>
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff fde7 	bl	80083b8 <_Balloc>
 80087ea:	4605      	mov	r5, r0
 80087ec:	b948      	cbnz	r0, 8008802 <__lshift+0x3e>
 80087ee:	4602      	mov	r2, r0
 80087f0:	4b28      	ldr	r3, [pc, #160]	@ (8008894 <__lshift+0xd0>)
 80087f2:	4829      	ldr	r0, [pc, #164]	@ (8008898 <__lshift+0xd4>)
 80087f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80087f8:	f000 faa6 	bl	8008d48 <__assert_func>
 80087fc:	3101      	adds	r1, #1
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	e7ee      	b.n	80087e0 <__lshift+0x1c>
 8008802:	2300      	movs	r3, #0
 8008804:	f100 0114 	add.w	r1, r0, #20
 8008808:	f100 0210 	add.w	r2, r0, #16
 800880c:	4618      	mov	r0, r3
 800880e:	4553      	cmp	r3, sl
 8008810:	db33      	blt.n	800887a <__lshift+0xb6>
 8008812:	6920      	ldr	r0, [r4, #16]
 8008814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008818:	f104 0314 	add.w	r3, r4, #20
 800881c:	f019 091f 	ands.w	r9, r9, #31
 8008820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008828:	d02b      	beq.n	8008882 <__lshift+0xbe>
 800882a:	f1c9 0e20 	rsb	lr, r9, #32
 800882e:	468a      	mov	sl, r1
 8008830:	2200      	movs	r2, #0
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	fa00 f009 	lsl.w	r0, r0, r9
 8008838:	4310      	orrs	r0, r2
 800883a:	f84a 0b04 	str.w	r0, [sl], #4
 800883e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008842:	459c      	cmp	ip, r3
 8008844:	fa22 f20e 	lsr.w	r2, r2, lr
 8008848:	d8f3      	bhi.n	8008832 <__lshift+0x6e>
 800884a:	ebac 0304 	sub.w	r3, ip, r4
 800884e:	3b15      	subs	r3, #21
 8008850:	f023 0303 	bic.w	r3, r3, #3
 8008854:	3304      	adds	r3, #4
 8008856:	f104 0015 	add.w	r0, r4, #21
 800885a:	4560      	cmp	r0, ip
 800885c:	bf88      	it	hi
 800885e:	2304      	movhi	r3, #4
 8008860:	50ca      	str	r2, [r1, r3]
 8008862:	b10a      	cbz	r2, 8008868 <__lshift+0xa4>
 8008864:	f108 0602 	add.w	r6, r8, #2
 8008868:	3e01      	subs	r6, #1
 800886a:	4638      	mov	r0, r7
 800886c:	612e      	str	r6, [r5, #16]
 800886e:	4621      	mov	r1, r4
 8008870:	f7ff fde2 	bl	8008438 <_Bfree>
 8008874:	4628      	mov	r0, r5
 8008876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887a:	f842 0f04 	str.w	r0, [r2, #4]!
 800887e:	3301      	adds	r3, #1
 8008880:	e7c5      	b.n	800880e <__lshift+0x4a>
 8008882:	3904      	subs	r1, #4
 8008884:	f853 2b04 	ldr.w	r2, [r3], #4
 8008888:	f841 2f04 	str.w	r2, [r1, #4]!
 800888c:	459c      	cmp	ip, r3
 800888e:	d8f9      	bhi.n	8008884 <__lshift+0xc0>
 8008890:	e7ea      	b.n	8008868 <__lshift+0xa4>
 8008892:	bf00      	nop
 8008894:	0800926c 	.word	0x0800926c
 8008898:	0800927d 	.word	0x0800927d

0800889c <__mcmp>:
 800889c:	690a      	ldr	r2, [r1, #16]
 800889e:	4603      	mov	r3, r0
 80088a0:	6900      	ldr	r0, [r0, #16]
 80088a2:	1a80      	subs	r0, r0, r2
 80088a4:	b530      	push	{r4, r5, lr}
 80088a6:	d10e      	bne.n	80088c6 <__mcmp+0x2a>
 80088a8:	3314      	adds	r3, #20
 80088aa:	3114      	adds	r1, #20
 80088ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088bc:	4295      	cmp	r5, r2
 80088be:	d003      	beq.n	80088c8 <__mcmp+0x2c>
 80088c0:	d205      	bcs.n	80088ce <__mcmp+0x32>
 80088c2:	f04f 30ff 	mov.w	r0, #4294967295
 80088c6:	bd30      	pop	{r4, r5, pc}
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d3f3      	bcc.n	80088b4 <__mcmp+0x18>
 80088cc:	e7fb      	b.n	80088c6 <__mcmp+0x2a>
 80088ce:	2001      	movs	r0, #1
 80088d0:	e7f9      	b.n	80088c6 <__mcmp+0x2a>
	...

080088d4 <__mdiff>:
 80088d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	4689      	mov	r9, r1
 80088da:	4606      	mov	r6, r0
 80088dc:	4611      	mov	r1, r2
 80088de:	4648      	mov	r0, r9
 80088e0:	4614      	mov	r4, r2
 80088e2:	f7ff ffdb 	bl	800889c <__mcmp>
 80088e6:	1e05      	subs	r5, r0, #0
 80088e8:	d112      	bne.n	8008910 <__mdiff+0x3c>
 80088ea:	4629      	mov	r1, r5
 80088ec:	4630      	mov	r0, r6
 80088ee:	f7ff fd63 	bl	80083b8 <_Balloc>
 80088f2:	4602      	mov	r2, r0
 80088f4:	b928      	cbnz	r0, 8008902 <__mdiff+0x2e>
 80088f6:	4b3f      	ldr	r3, [pc, #252]	@ (80089f4 <__mdiff+0x120>)
 80088f8:	f240 2137 	movw	r1, #567	@ 0x237
 80088fc:	483e      	ldr	r0, [pc, #248]	@ (80089f8 <__mdiff+0x124>)
 80088fe:	f000 fa23 	bl	8008d48 <__assert_func>
 8008902:	2301      	movs	r3, #1
 8008904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008908:	4610      	mov	r0, r2
 800890a:	b003      	add	sp, #12
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008910:	bfbc      	itt	lt
 8008912:	464b      	movlt	r3, r9
 8008914:	46a1      	movlt	r9, r4
 8008916:	4630      	mov	r0, r6
 8008918:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800891c:	bfba      	itte	lt
 800891e:	461c      	movlt	r4, r3
 8008920:	2501      	movlt	r5, #1
 8008922:	2500      	movge	r5, #0
 8008924:	f7ff fd48 	bl	80083b8 <_Balloc>
 8008928:	4602      	mov	r2, r0
 800892a:	b918      	cbnz	r0, 8008934 <__mdiff+0x60>
 800892c:	4b31      	ldr	r3, [pc, #196]	@ (80089f4 <__mdiff+0x120>)
 800892e:	f240 2145 	movw	r1, #581	@ 0x245
 8008932:	e7e3      	b.n	80088fc <__mdiff+0x28>
 8008934:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008938:	6926      	ldr	r6, [r4, #16]
 800893a:	60c5      	str	r5, [r0, #12]
 800893c:	f109 0310 	add.w	r3, r9, #16
 8008940:	f109 0514 	add.w	r5, r9, #20
 8008944:	f104 0e14 	add.w	lr, r4, #20
 8008948:	f100 0b14 	add.w	fp, r0, #20
 800894c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008950:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	46d9      	mov	r9, fp
 8008958:	f04f 0c00 	mov.w	ip, #0
 800895c:	9b01      	ldr	r3, [sp, #4]
 800895e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008962:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	fa1f f38a 	uxth.w	r3, sl
 800896c:	4619      	mov	r1, r3
 800896e:	b283      	uxth	r3, r0
 8008970:	1acb      	subs	r3, r1, r3
 8008972:	0c00      	lsrs	r0, r0, #16
 8008974:	4463      	add	r3, ip
 8008976:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800897a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800897e:	b29b      	uxth	r3, r3
 8008980:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008984:	4576      	cmp	r6, lr
 8008986:	f849 3b04 	str.w	r3, [r9], #4
 800898a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800898e:	d8e5      	bhi.n	800895c <__mdiff+0x88>
 8008990:	1b33      	subs	r3, r6, r4
 8008992:	3b15      	subs	r3, #21
 8008994:	f023 0303 	bic.w	r3, r3, #3
 8008998:	3415      	adds	r4, #21
 800899a:	3304      	adds	r3, #4
 800899c:	42a6      	cmp	r6, r4
 800899e:	bf38      	it	cc
 80089a0:	2304      	movcc	r3, #4
 80089a2:	441d      	add	r5, r3
 80089a4:	445b      	add	r3, fp
 80089a6:	461e      	mov	r6, r3
 80089a8:	462c      	mov	r4, r5
 80089aa:	4544      	cmp	r4, r8
 80089ac:	d30e      	bcc.n	80089cc <__mdiff+0xf8>
 80089ae:	f108 0103 	add.w	r1, r8, #3
 80089b2:	1b49      	subs	r1, r1, r5
 80089b4:	f021 0103 	bic.w	r1, r1, #3
 80089b8:	3d03      	subs	r5, #3
 80089ba:	45a8      	cmp	r8, r5
 80089bc:	bf38      	it	cc
 80089be:	2100      	movcc	r1, #0
 80089c0:	440b      	add	r3, r1
 80089c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089c6:	b191      	cbz	r1, 80089ee <__mdiff+0x11a>
 80089c8:	6117      	str	r7, [r2, #16]
 80089ca:	e79d      	b.n	8008908 <__mdiff+0x34>
 80089cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80089d0:	46e6      	mov	lr, ip
 80089d2:	0c08      	lsrs	r0, r1, #16
 80089d4:	fa1c fc81 	uxtah	ip, ip, r1
 80089d8:	4471      	add	r1, lr
 80089da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089de:	b289      	uxth	r1, r1
 80089e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089e4:	f846 1b04 	str.w	r1, [r6], #4
 80089e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089ec:	e7dd      	b.n	80089aa <__mdiff+0xd6>
 80089ee:	3f01      	subs	r7, #1
 80089f0:	e7e7      	b.n	80089c2 <__mdiff+0xee>
 80089f2:	bf00      	nop
 80089f4:	0800926c 	.word	0x0800926c
 80089f8:	0800927d 	.word	0x0800927d

080089fc <__d2b>:
 80089fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a00:	460f      	mov	r7, r1
 8008a02:	2101      	movs	r1, #1
 8008a04:	ec59 8b10 	vmov	r8, r9, d0
 8008a08:	4616      	mov	r6, r2
 8008a0a:	f7ff fcd5 	bl	80083b8 <_Balloc>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	b930      	cbnz	r0, 8008a20 <__d2b+0x24>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b23      	ldr	r3, [pc, #140]	@ (8008aa4 <__d2b+0xa8>)
 8008a16:	4824      	ldr	r0, [pc, #144]	@ (8008aa8 <__d2b+0xac>)
 8008a18:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a1c:	f000 f994 	bl	8008d48 <__assert_func>
 8008a20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a28:	b10d      	cbz	r5, 8008a2e <__d2b+0x32>
 8008a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	f1b8 0300 	subs.w	r3, r8, #0
 8008a34:	d023      	beq.n	8008a7e <__d2b+0x82>
 8008a36:	4668      	mov	r0, sp
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	f7ff fd84 	bl	8008546 <__lo0bits>
 8008a3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a42:	b1d0      	cbz	r0, 8008a7a <__d2b+0x7e>
 8008a44:	f1c0 0320 	rsb	r3, r0, #32
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	430b      	orrs	r3, r1
 8008a4e:	40c2      	lsrs	r2, r0
 8008a50:	6163      	str	r3, [r4, #20]
 8008a52:	9201      	str	r2, [sp, #4]
 8008a54:	9b01      	ldr	r3, [sp, #4]
 8008a56:	61a3      	str	r3, [r4, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bf0c      	ite	eq
 8008a5c:	2201      	moveq	r2, #1
 8008a5e:	2202      	movne	r2, #2
 8008a60:	6122      	str	r2, [r4, #16]
 8008a62:	b1a5      	cbz	r5, 8008a8e <__d2b+0x92>
 8008a64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a68:	4405      	add	r5, r0
 8008a6a:	603d      	str	r5, [r7, #0]
 8008a6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a70:	6030      	str	r0, [r6, #0]
 8008a72:	4620      	mov	r0, r4
 8008a74:	b003      	add	sp, #12
 8008a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a7a:	6161      	str	r1, [r4, #20]
 8008a7c:	e7ea      	b.n	8008a54 <__d2b+0x58>
 8008a7e:	a801      	add	r0, sp, #4
 8008a80:	f7ff fd61 	bl	8008546 <__lo0bits>
 8008a84:	9b01      	ldr	r3, [sp, #4]
 8008a86:	6163      	str	r3, [r4, #20]
 8008a88:	3020      	adds	r0, #32
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	e7e8      	b.n	8008a60 <__d2b+0x64>
 8008a8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a96:	6038      	str	r0, [r7, #0]
 8008a98:	6918      	ldr	r0, [r3, #16]
 8008a9a:	f7ff fd35 	bl	8008508 <__hi0bits>
 8008a9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008aa2:	e7e5      	b.n	8008a70 <__d2b+0x74>
 8008aa4:	0800926c 	.word	0x0800926c
 8008aa8:	0800927d 	.word	0x0800927d

08008aac <__sflush_r>:
 8008aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	0716      	lsls	r6, r2, #28
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	d454      	bmi.n	8008b66 <__sflush_r+0xba>
 8008abc:	684b      	ldr	r3, [r1, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dc02      	bgt.n	8008ac8 <__sflush_r+0x1c>
 8008ac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	dd48      	ble.n	8008b5a <__sflush_r+0xae>
 8008ac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	d045      	beq.n	8008b5a <__sflush_r+0xae>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ad4:	682f      	ldr	r7, [r5, #0]
 8008ad6:	6a21      	ldr	r1, [r4, #32]
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	d030      	beq.n	8008b3e <__sflush_r+0x92>
 8008adc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	0759      	lsls	r1, r3, #29
 8008ae2:	d505      	bpl.n	8008af0 <__sflush_r+0x44>
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aea:	b10b      	cbz	r3, 8008af0 <__sflush_r+0x44>
 8008aec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	2300      	movs	r3, #0
 8008af2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008af4:	6a21      	ldr	r1, [r4, #32]
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b0      	blx	r6
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	d106      	bne.n	8008b0e <__sflush_r+0x62>
 8008b00:	6829      	ldr	r1, [r5, #0]
 8008b02:	291d      	cmp	r1, #29
 8008b04:	d82b      	bhi.n	8008b5e <__sflush_r+0xb2>
 8008b06:	4a2a      	ldr	r2, [pc, #168]	@ (8008bb0 <__sflush_r+0x104>)
 8008b08:	40ca      	lsrs	r2, r1
 8008b0a:	07d6      	lsls	r6, r2, #31
 8008b0c:	d527      	bpl.n	8008b5e <__sflush_r+0xb2>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	6062      	str	r2, [r4, #4]
 8008b12:	04d9      	lsls	r1, r3, #19
 8008b14:	6922      	ldr	r2, [r4, #16]
 8008b16:	6022      	str	r2, [r4, #0]
 8008b18:	d504      	bpl.n	8008b24 <__sflush_r+0x78>
 8008b1a:	1c42      	adds	r2, r0, #1
 8008b1c:	d101      	bne.n	8008b22 <__sflush_r+0x76>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b903      	cbnz	r3, 8008b24 <__sflush_r+0x78>
 8008b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b26:	602f      	str	r7, [r5, #0]
 8008b28:	b1b9      	cbz	r1, 8008b5a <__sflush_r+0xae>
 8008b2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	d002      	beq.n	8008b38 <__sflush_r+0x8c>
 8008b32:	4628      	mov	r0, r5
 8008b34:	f7ff fb40 	bl	80081b8 <_free_r>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b3c:	e00d      	b.n	8008b5a <__sflush_r+0xae>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b0      	blx	r6
 8008b44:	4602      	mov	r2, r0
 8008b46:	1c50      	adds	r0, r2, #1
 8008b48:	d1c9      	bne.n	8008ade <__sflush_r+0x32>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0c6      	beq.n	8008ade <__sflush_r+0x32>
 8008b50:	2b1d      	cmp	r3, #29
 8008b52:	d001      	beq.n	8008b58 <__sflush_r+0xac>
 8008b54:	2b16      	cmp	r3, #22
 8008b56:	d11e      	bne.n	8008b96 <__sflush_r+0xea>
 8008b58:	602f      	str	r7, [r5, #0]
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e022      	b.n	8008ba4 <__sflush_r+0xf8>
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b62:	b21b      	sxth	r3, r3
 8008b64:	e01b      	b.n	8008b9e <__sflush_r+0xf2>
 8008b66:	690f      	ldr	r7, [r1, #16]
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	d0f6      	beq.n	8008b5a <__sflush_r+0xae>
 8008b6c:	0793      	lsls	r3, r2, #30
 8008b6e:	680e      	ldr	r6, [r1, #0]
 8008b70:	bf08      	it	eq
 8008b72:	694b      	ldreq	r3, [r1, #20]
 8008b74:	600f      	str	r7, [r1, #0]
 8008b76:	bf18      	it	ne
 8008b78:	2300      	movne	r3, #0
 8008b7a:	eba6 0807 	sub.w	r8, r6, r7
 8008b7e:	608b      	str	r3, [r1, #8]
 8008b80:	f1b8 0f00 	cmp.w	r8, #0
 8008b84:	dde9      	ble.n	8008b5a <__sflush_r+0xae>
 8008b86:	6a21      	ldr	r1, [r4, #32]
 8008b88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b8a:	4643      	mov	r3, r8
 8008b8c:	463a      	mov	r2, r7
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b0      	blx	r6
 8008b92:	2800      	cmp	r0, #0
 8008b94:	dc08      	bgt.n	8008ba8 <__sflush_r+0xfc>
 8008b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba8:	4407      	add	r7, r0
 8008baa:	eba8 0800 	sub.w	r8, r8, r0
 8008bae:	e7e7      	b.n	8008b80 <__sflush_r+0xd4>
 8008bb0:	20400001 	.word	0x20400001

08008bb4 <_fflush_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	690b      	ldr	r3, [r1, #16]
 8008bb8:	4605      	mov	r5, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	b913      	cbnz	r3, 8008bc4 <_fflush_r+0x10>
 8008bbe:	2500      	movs	r5, #0
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	b118      	cbz	r0, 8008bce <_fflush_r+0x1a>
 8008bc6:	6a03      	ldr	r3, [r0, #32]
 8008bc8:	b90b      	cbnz	r3, 8008bce <_fflush_r+0x1a>
 8008bca:	f7fe faaf 	bl	800712c <__sinit>
 8008bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0f3      	beq.n	8008bbe <_fflush_r+0xa>
 8008bd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bd8:	07d0      	lsls	r0, r2, #31
 8008bda:	d404      	bmi.n	8008be6 <_fflush_r+0x32>
 8008bdc:	0599      	lsls	r1, r3, #22
 8008bde:	d402      	bmi.n	8008be6 <_fflush_r+0x32>
 8008be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008be2:	f7fe fc8c 	bl	80074fe <__retarget_lock_acquire_recursive>
 8008be6:	4628      	mov	r0, r5
 8008be8:	4621      	mov	r1, r4
 8008bea:	f7ff ff5f 	bl	8008aac <__sflush_r>
 8008bee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bf0:	07da      	lsls	r2, r3, #31
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	d4e4      	bmi.n	8008bc0 <_fflush_r+0xc>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	059b      	lsls	r3, r3, #22
 8008bfa:	d4e1      	bmi.n	8008bc0 <_fflush_r+0xc>
 8008bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bfe:	f7fe fc7f 	bl	8007500 <__retarget_lock_release_recursive>
 8008c02:	e7dd      	b.n	8008bc0 <_fflush_r+0xc>

08008c04 <__swhatbuf_r>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	460c      	mov	r4, r1
 8008c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	b096      	sub	sp, #88	@ 0x58
 8008c10:	4615      	mov	r5, r2
 8008c12:	461e      	mov	r6, r3
 8008c14:	da0d      	bge.n	8008c32 <__swhatbuf_r+0x2e>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c1c:	f04f 0100 	mov.w	r1, #0
 8008c20:	bf14      	ite	ne
 8008c22:	2340      	movne	r3, #64	@ 0x40
 8008c24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c28:	2000      	movs	r0, #0
 8008c2a:	6031      	str	r1, [r6, #0]
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	b016      	add	sp, #88	@ 0x58
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	466a      	mov	r2, sp
 8008c34:	f000 f848 	bl	8008cc8 <_fstat_r>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	dbec      	blt.n	8008c16 <__swhatbuf_r+0x12>
 8008c3c:	9901      	ldr	r1, [sp, #4]
 8008c3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c46:	4259      	negs	r1, r3
 8008c48:	4159      	adcs	r1, r3
 8008c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c4e:	e7eb      	b.n	8008c28 <__swhatbuf_r+0x24>

08008c50 <__smakebuf_r>:
 8008c50:	898b      	ldrh	r3, [r1, #12]
 8008c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c54:	079d      	lsls	r5, r3, #30
 8008c56:	4606      	mov	r6, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	d507      	bpl.n	8008c6c <__smakebuf_r+0x1c>
 8008c5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	2301      	movs	r3, #1
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	b003      	add	sp, #12
 8008c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6c:	ab01      	add	r3, sp, #4
 8008c6e:	466a      	mov	r2, sp
 8008c70:	f7ff ffc8 	bl	8008c04 <__swhatbuf_r>
 8008c74:	9f00      	ldr	r7, [sp, #0]
 8008c76:	4605      	mov	r5, r0
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7ff fb10 	bl	80082a0 <_malloc_r>
 8008c80:	b948      	cbnz	r0, 8008c96 <__smakebuf_r+0x46>
 8008c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c86:	059a      	lsls	r2, r3, #22
 8008c88:	d4ee      	bmi.n	8008c68 <__smakebuf_r+0x18>
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	f043 0302 	orr.w	r3, r3, #2
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	e7e2      	b.n	8008c5c <__smakebuf_r+0xc>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	6020      	str	r0, [r4, #0]
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ca6:	b15b      	cbz	r3, 8008cc0 <__smakebuf_r+0x70>
 8008ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cac:	4630      	mov	r0, r6
 8008cae:	f000 f81d 	bl	8008cec <_isatty_r>
 8008cb2:	b128      	cbz	r0, 8008cc0 <__smakebuf_r+0x70>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	f043 0301 	orr.w	r3, r3, #1
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	431d      	orrs	r5, r3
 8008cc4:	81a5      	strh	r5, [r4, #12]
 8008cc6:	e7cf      	b.n	8008c68 <__smakebuf_r+0x18>

08008cc8 <_fstat_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	@ (8008ce8 <_fstat_r+0x20>)
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	f7f9 f8a1 	bl	8001e1c <_fstat>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d102      	bne.n	8008ce4 <_fstat_r+0x1c>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	b103      	cbz	r3, 8008ce4 <_fstat_r+0x1c>
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	bd38      	pop	{r3, r4, r5, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20001784 	.word	0x20001784

08008cec <_isatty_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	@ (8008d08 <_isatty_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7f9 f8a0 	bl	8001e3c <_isatty>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_isatty_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_isatty_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20001784 	.word	0x20001784

08008d0c <_sbrk_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d06      	ldr	r5, [pc, #24]	@ (8008d28 <_sbrk_r+0x1c>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	f7f9 f8a8 	bl	8001e6c <_sbrk>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_sbrk_r+0x1a>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_sbrk_r+0x1a>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	20001784 	.word	0x20001784

08008d2c <memcpy>:
 8008d2c:	440a      	add	r2, r1
 8008d2e:	4291      	cmp	r1, r2
 8008d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d34:	d100      	bne.n	8008d38 <memcpy+0xc>
 8008d36:	4770      	bx	lr
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d42:	4291      	cmp	r1, r2
 8008d44:	d1f9      	bne.n	8008d3a <memcpy+0xe>
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <__assert_func>:
 8008d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <__assert_func+0x2c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4605      	mov	r5, r0
 8008d54:	68d8      	ldr	r0, [r3, #12]
 8008d56:	b14c      	cbz	r4, 8008d6c <__assert_func+0x24>
 8008d58:	4b07      	ldr	r3, [pc, #28]	@ (8008d78 <__assert_func+0x30>)
 8008d5a:	9100      	str	r1, [sp, #0]
 8008d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d60:	4906      	ldr	r1, [pc, #24]	@ (8008d7c <__assert_func+0x34>)
 8008d62:	462b      	mov	r3, r5
 8008d64:	f000 f842 	bl	8008dec <fiprintf>
 8008d68:	f000 f852 	bl	8008e10 <abort>
 8008d6c:	4b04      	ldr	r3, [pc, #16]	@ (8008d80 <__assert_func+0x38>)
 8008d6e:	461c      	mov	r4, r3
 8008d70:	e7f3      	b.n	8008d5a <__assert_func+0x12>
 8008d72:	bf00      	nop
 8008d74:	20000030 	.word	0x20000030
 8008d78:	080092e0 	.word	0x080092e0
 8008d7c:	080092ed 	.word	0x080092ed
 8008d80:	0800931b 	.word	0x0800931b

08008d84 <_calloc_r>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	fba1 5402 	umull	r5, r4, r1, r2
 8008d8a:	b934      	cbnz	r4, 8008d9a <_calloc_r+0x16>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7ff fa87 	bl	80082a0 <_malloc_r>
 8008d92:	4606      	mov	r6, r0
 8008d94:	b928      	cbnz	r0, 8008da2 <_calloc_r+0x1e>
 8008d96:	4630      	mov	r0, r6
 8008d98:	bd70      	pop	{r4, r5, r6, pc}
 8008d9a:	220c      	movs	r2, #12
 8008d9c:	6002      	str	r2, [r0, #0]
 8008d9e:	2600      	movs	r6, #0
 8008da0:	e7f9      	b.n	8008d96 <_calloc_r+0x12>
 8008da2:	462a      	mov	r2, r5
 8008da4:	4621      	mov	r1, r4
 8008da6:	f7fe fb2d 	bl	8007404 <memset>
 8008daa:	e7f4      	b.n	8008d96 <_calloc_r+0x12>

08008dac <__ascii_mbtowc>:
 8008dac:	b082      	sub	sp, #8
 8008dae:	b901      	cbnz	r1, 8008db2 <__ascii_mbtowc+0x6>
 8008db0:	a901      	add	r1, sp, #4
 8008db2:	b142      	cbz	r2, 8008dc6 <__ascii_mbtowc+0x1a>
 8008db4:	b14b      	cbz	r3, 8008dca <__ascii_mbtowc+0x1e>
 8008db6:	7813      	ldrb	r3, [r2, #0]
 8008db8:	600b      	str	r3, [r1, #0]
 8008dba:	7812      	ldrb	r2, [r2, #0]
 8008dbc:	1e10      	subs	r0, r2, #0
 8008dbe:	bf18      	it	ne
 8008dc0:	2001      	movne	r0, #1
 8008dc2:	b002      	add	sp, #8
 8008dc4:	4770      	bx	lr
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	e7fb      	b.n	8008dc2 <__ascii_mbtowc+0x16>
 8008dca:	f06f 0001 	mvn.w	r0, #1
 8008dce:	e7f8      	b.n	8008dc2 <__ascii_mbtowc+0x16>

08008dd0 <__ascii_wctomb>:
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	b141      	cbz	r1, 8008de8 <__ascii_wctomb+0x18>
 8008dd6:	2aff      	cmp	r2, #255	@ 0xff
 8008dd8:	d904      	bls.n	8008de4 <__ascii_wctomb+0x14>
 8008dda:	228a      	movs	r2, #138	@ 0x8a
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	f04f 30ff 	mov.w	r0, #4294967295
 8008de2:	4770      	bx	lr
 8008de4:	700a      	strb	r2, [r1, #0]
 8008de6:	2001      	movs	r0, #1
 8008de8:	4770      	bx	lr
	...

08008dec <fiprintf>:
 8008dec:	b40e      	push	{r1, r2, r3}
 8008dee:	b503      	push	{r0, r1, lr}
 8008df0:	4601      	mov	r1, r0
 8008df2:	ab03      	add	r3, sp, #12
 8008df4:	4805      	ldr	r0, [pc, #20]	@ (8008e0c <fiprintf+0x20>)
 8008df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfa:	6800      	ldr	r0, [r0, #0]
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	f000 f837 	bl	8008e70 <_vfiprintf_r>
 8008e02:	b002      	add	sp, #8
 8008e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e08:	b003      	add	sp, #12
 8008e0a:	4770      	bx	lr
 8008e0c:	20000030 	.word	0x20000030

08008e10 <abort>:
 8008e10:	b508      	push	{r3, lr}
 8008e12:	2006      	movs	r0, #6
 8008e14:	f000 f96c 	bl	80090f0 <raise>
 8008e18:	2001      	movs	r0, #1
 8008e1a:	f7f8 ffaf 	bl	8001d7c <_exit>

08008e1e <__sfputc_r>:
 8008e1e:	6893      	ldr	r3, [r2, #8]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	b410      	push	{r4}
 8008e26:	6093      	str	r3, [r2, #8]
 8008e28:	da08      	bge.n	8008e3c <__sfputc_r+0x1e>
 8008e2a:	6994      	ldr	r4, [r2, #24]
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	db01      	blt.n	8008e34 <__sfputc_r+0x16>
 8008e30:	290a      	cmp	r1, #10
 8008e32:	d103      	bne.n	8008e3c <__sfputc_r+0x1e>
 8008e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e38:	f7fe ba4f 	b.w	80072da <__swbuf_r>
 8008e3c:	6813      	ldr	r3, [r2, #0]
 8008e3e:	1c58      	adds	r0, r3, #1
 8008e40:	6010      	str	r0, [r2, #0]
 8008e42:	7019      	strb	r1, [r3, #0]
 8008e44:	4608      	mov	r0, r1
 8008e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <__sfputs_r>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	4614      	mov	r4, r2
 8008e54:	18d5      	adds	r5, r2, r3
 8008e56:	42ac      	cmp	r4, r5
 8008e58:	d101      	bne.n	8008e5e <__sfputs_r+0x12>
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	e007      	b.n	8008e6e <__sfputs_r+0x22>
 8008e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e62:	463a      	mov	r2, r7
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff ffda 	bl	8008e1e <__sfputc_r>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d1f3      	bne.n	8008e56 <__sfputs_r+0xa>
 8008e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e70 <_vfiprintf_r>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	460d      	mov	r5, r1
 8008e76:	b09d      	sub	sp, #116	@ 0x74
 8008e78:	4614      	mov	r4, r2
 8008e7a:	4698      	mov	r8, r3
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	b118      	cbz	r0, 8008e88 <_vfiprintf_r+0x18>
 8008e80:	6a03      	ldr	r3, [r0, #32]
 8008e82:	b90b      	cbnz	r3, 8008e88 <_vfiprintf_r+0x18>
 8008e84:	f7fe f952 	bl	800712c <__sinit>
 8008e88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e8a:	07d9      	lsls	r1, r3, #31
 8008e8c:	d405      	bmi.n	8008e9a <_vfiprintf_r+0x2a>
 8008e8e:	89ab      	ldrh	r3, [r5, #12]
 8008e90:	059a      	lsls	r2, r3, #22
 8008e92:	d402      	bmi.n	8008e9a <_vfiprintf_r+0x2a>
 8008e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e96:	f7fe fb32 	bl	80074fe <__retarget_lock_acquire_recursive>
 8008e9a:	89ab      	ldrh	r3, [r5, #12]
 8008e9c:	071b      	lsls	r3, r3, #28
 8008e9e:	d501      	bpl.n	8008ea4 <_vfiprintf_r+0x34>
 8008ea0:	692b      	ldr	r3, [r5, #16]
 8008ea2:	b99b      	cbnz	r3, 8008ecc <_vfiprintf_r+0x5c>
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7fe fa56 	bl	8007358 <__swsetup_r>
 8008eac:	b170      	cbz	r0, 8008ecc <_vfiprintf_r+0x5c>
 8008eae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eb0:	07dc      	lsls	r4, r3, #31
 8008eb2:	d504      	bpl.n	8008ebe <_vfiprintf_r+0x4e>
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	b01d      	add	sp, #116	@ 0x74
 8008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebe:	89ab      	ldrh	r3, [r5, #12]
 8008ec0:	0598      	lsls	r0, r3, #22
 8008ec2:	d4f7      	bmi.n	8008eb4 <_vfiprintf_r+0x44>
 8008ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ec6:	f7fe fb1b 	bl	8007500 <__retarget_lock_release_recursive>
 8008eca:	e7f3      	b.n	8008eb4 <_vfiprintf_r+0x44>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ed0:	2320      	movs	r3, #32
 8008ed2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eda:	2330      	movs	r3, #48	@ 0x30
 8008edc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800908c <_vfiprintf_r+0x21c>
 8008ee0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ee4:	f04f 0901 	mov.w	r9, #1
 8008ee8:	4623      	mov	r3, r4
 8008eea:	469a      	mov	sl, r3
 8008eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef0:	b10a      	cbz	r2, 8008ef6 <_vfiprintf_r+0x86>
 8008ef2:	2a25      	cmp	r2, #37	@ 0x25
 8008ef4:	d1f9      	bne.n	8008eea <_vfiprintf_r+0x7a>
 8008ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8008efa:	d00b      	beq.n	8008f14 <_vfiprintf_r+0xa4>
 8008efc:	465b      	mov	r3, fp
 8008efe:	4622      	mov	r2, r4
 8008f00:	4629      	mov	r1, r5
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7ff ffa2 	bl	8008e4c <__sfputs_r>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f000 80a7 	beq.w	800905c <_vfiprintf_r+0x1ec>
 8008f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f10:	445a      	add	r2, fp
 8008f12:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f14:	f89a 3000 	ldrb.w	r3, [sl]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 809f 	beq.w	800905c <_vfiprintf_r+0x1ec>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f04f 32ff 	mov.w	r2, #4294967295
 8008f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f28:	f10a 0a01 	add.w	sl, sl, #1
 8008f2c:	9304      	str	r3, [sp, #16]
 8008f2e:	9307      	str	r3, [sp, #28]
 8008f30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f34:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f36:	4654      	mov	r4, sl
 8008f38:	2205      	movs	r2, #5
 8008f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3e:	4853      	ldr	r0, [pc, #332]	@ (800908c <_vfiprintf_r+0x21c>)
 8008f40:	f7f7 f96e 	bl	8000220 <memchr>
 8008f44:	9a04      	ldr	r2, [sp, #16]
 8008f46:	b9d8      	cbnz	r0, 8008f80 <_vfiprintf_r+0x110>
 8008f48:	06d1      	lsls	r1, r2, #27
 8008f4a:	bf44      	itt	mi
 8008f4c:	2320      	movmi	r3, #32
 8008f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f52:	0713      	lsls	r3, r2, #28
 8008f54:	bf44      	itt	mi
 8008f56:	232b      	movmi	r3, #43	@ 0x2b
 8008f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f62:	d015      	beq.n	8008f90 <_vfiprintf_r+0x120>
 8008f64:	9a07      	ldr	r2, [sp, #28]
 8008f66:	4654      	mov	r4, sl
 8008f68:	2000      	movs	r0, #0
 8008f6a:	f04f 0c0a 	mov.w	ip, #10
 8008f6e:	4621      	mov	r1, r4
 8008f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f74:	3b30      	subs	r3, #48	@ 0x30
 8008f76:	2b09      	cmp	r3, #9
 8008f78:	d94b      	bls.n	8009012 <_vfiprintf_r+0x1a2>
 8008f7a:	b1b0      	cbz	r0, 8008faa <_vfiprintf_r+0x13a>
 8008f7c:	9207      	str	r2, [sp, #28]
 8008f7e:	e014      	b.n	8008faa <_vfiprintf_r+0x13a>
 8008f80:	eba0 0308 	sub.w	r3, r0, r8
 8008f84:	fa09 f303 	lsl.w	r3, r9, r3
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	9304      	str	r3, [sp, #16]
 8008f8c:	46a2      	mov	sl, r4
 8008f8e:	e7d2      	b.n	8008f36 <_vfiprintf_r+0xc6>
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	1d19      	adds	r1, r3, #4
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	9103      	str	r1, [sp, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bfbb      	ittet	lt
 8008f9c:	425b      	neglt	r3, r3
 8008f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8008fa2:	9307      	strge	r3, [sp, #28]
 8008fa4:	9307      	strlt	r3, [sp, #28]
 8008fa6:	bfb8      	it	lt
 8008fa8:	9204      	strlt	r2, [sp, #16]
 8008faa:	7823      	ldrb	r3, [r4, #0]
 8008fac:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fae:	d10a      	bne.n	8008fc6 <_vfiprintf_r+0x156>
 8008fb0:	7863      	ldrb	r3, [r4, #1]
 8008fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fb4:	d132      	bne.n	800901c <_vfiprintf_r+0x1ac>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	1d1a      	adds	r2, r3, #4
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	9203      	str	r2, [sp, #12]
 8008fbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fc2:	3402      	adds	r4, #2
 8008fc4:	9305      	str	r3, [sp, #20]
 8008fc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800909c <_vfiprintf_r+0x22c>
 8008fca:	7821      	ldrb	r1, [r4, #0]
 8008fcc:	2203      	movs	r2, #3
 8008fce:	4650      	mov	r0, sl
 8008fd0:	f7f7 f926 	bl	8000220 <memchr>
 8008fd4:	b138      	cbz	r0, 8008fe6 <_vfiprintf_r+0x176>
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	eba0 000a 	sub.w	r0, r0, sl
 8008fdc:	2240      	movs	r2, #64	@ 0x40
 8008fde:	4082      	lsls	r2, r0
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	3401      	adds	r4, #1
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fea:	4829      	ldr	r0, [pc, #164]	@ (8009090 <_vfiprintf_r+0x220>)
 8008fec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ff0:	2206      	movs	r2, #6
 8008ff2:	f7f7 f915 	bl	8000220 <memchr>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d03f      	beq.n	800907a <_vfiprintf_r+0x20a>
 8008ffa:	4b26      	ldr	r3, [pc, #152]	@ (8009094 <_vfiprintf_r+0x224>)
 8008ffc:	bb1b      	cbnz	r3, 8009046 <_vfiprintf_r+0x1d6>
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	3307      	adds	r3, #7
 8009002:	f023 0307 	bic.w	r3, r3, #7
 8009006:	3308      	adds	r3, #8
 8009008:	9303      	str	r3, [sp, #12]
 800900a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800900c:	443b      	add	r3, r7
 800900e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009010:	e76a      	b.n	8008ee8 <_vfiprintf_r+0x78>
 8009012:	fb0c 3202 	mla	r2, ip, r2, r3
 8009016:	460c      	mov	r4, r1
 8009018:	2001      	movs	r0, #1
 800901a:	e7a8      	b.n	8008f6e <_vfiprintf_r+0xfe>
 800901c:	2300      	movs	r3, #0
 800901e:	3401      	adds	r4, #1
 8009020:	9305      	str	r3, [sp, #20]
 8009022:	4619      	mov	r1, r3
 8009024:	f04f 0c0a 	mov.w	ip, #10
 8009028:	4620      	mov	r0, r4
 800902a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800902e:	3a30      	subs	r2, #48	@ 0x30
 8009030:	2a09      	cmp	r2, #9
 8009032:	d903      	bls.n	800903c <_vfiprintf_r+0x1cc>
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0c6      	beq.n	8008fc6 <_vfiprintf_r+0x156>
 8009038:	9105      	str	r1, [sp, #20]
 800903a:	e7c4      	b.n	8008fc6 <_vfiprintf_r+0x156>
 800903c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009040:	4604      	mov	r4, r0
 8009042:	2301      	movs	r3, #1
 8009044:	e7f0      	b.n	8009028 <_vfiprintf_r+0x1b8>
 8009046:	ab03      	add	r3, sp, #12
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	462a      	mov	r2, r5
 800904c:	4b12      	ldr	r3, [pc, #72]	@ (8009098 <_vfiprintf_r+0x228>)
 800904e:	a904      	add	r1, sp, #16
 8009050:	4630      	mov	r0, r6
 8009052:	f7fd fc29 	bl	80068a8 <_printf_float>
 8009056:	4607      	mov	r7, r0
 8009058:	1c78      	adds	r0, r7, #1
 800905a:	d1d6      	bne.n	800900a <_vfiprintf_r+0x19a>
 800905c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800905e:	07d9      	lsls	r1, r3, #31
 8009060:	d405      	bmi.n	800906e <_vfiprintf_r+0x1fe>
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	059a      	lsls	r2, r3, #22
 8009066:	d402      	bmi.n	800906e <_vfiprintf_r+0x1fe>
 8009068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800906a:	f7fe fa49 	bl	8007500 <__retarget_lock_release_recursive>
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	065b      	lsls	r3, r3, #25
 8009072:	f53f af1f 	bmi.w	8008eb4 <_vfiprintf_r+0x44>
 8009076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009078:	e71e      	b.n	8008eb8 <_vfiprintf_r+0x48>
 800907a:	ab03      	add	r3, sp, #12
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	462a      	mov	r2, r5
 8009080:	4b05      	ldr	r3, [pc, #20]	@ (8009098 <_vfiprintf_r+0x228>)
 8009082:	a904      	add	r1, sp, #16
 8009084:	4630      	mov	r0, r6
 8009086:	f7fd fea7 	bl	8006dd8 <_printf_i>
 800908a:	e7e4      	b.n	8009056 <_vfiprintf_r+0x1e6>
 800908c:	0800931c 	.word	0x0800931c
 8009090:	08009326 	.word	0x08009326
 8009094:	080068a9 	.word	0x080068a9
 8009098:	08008e4d 	.word	0x08008e4d
 800909c:	08009322 	.word	0x08009322

080090a0 <_raise_r>:
 80090a0:	291f      	cmp	r1, #31
 80090a2:	b538      	push	{r3, r4, r5, lr}
 80090a4:	4605      	mov	r5, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	d904      	bls.n	80090b4 <_raise_r+0x14>
 80090aa:	2316      	movs	r3, #22
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	f04f 30ff 	mov.w	r0, #4294967295
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090b6:	b112      	cbz	r2, 80090be <_raise_r+0x1e>
 80090b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090bc:	b94b      	cbnz	r3, 80090d2 <_raise_r+0x32>
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 f830 	bl	8009124 <_getpid_r>
 80090c4:	4622      	mov	r2, r4
 80090c6:	4601      	mov	r1, r0
 80090c8:	4628      	mov	r0, r5
 80090ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ce:	f000 b817 	b.w	8009100 <_kill_r>
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d00a      	beq.n	80090ec <_raise_r+0x4c>
 80090d6:	1c59      	adds	r1, r3, #1
 80090d8:	d103      	bne.n	80090e2 <_raise_r+0x42>
 80090da:	2316      	movs	r3, #22
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	2001      	movs	r0, #1
 80090e0:	e7e7      	b.n	80090b2 <_raise_r+0x12>
 80090e2:	2100      	movs	r1, #0
 80090e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090e8:	4620      	mov	r0, r4
 80090ea:	4798      	blx	r3
 80090ec:	2000      	movs	r0, #0
 80090ee:	e7e0      	b.n	80090b2 <_raise_r+0x12>

080090f0 <raise>:
 80090f0:	4b02      	ldr	r3, [pc, #8]	@ (80090fc <raise+0xc>)
 80090f2:	4601      	mov	r1, r0
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	f7ff bfd3 	b.w	80090a0 <_raise_r>
 80090fa:	bf00      	nop
 80090fc:	20000030 	.word	0x20000030

08009100 <_kill_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	@ (8009120 <_kill_r+0x20>)
 8009104:	2300      	movs	r3, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	f7f8 fe25 	bl	8001d5c <_kill>
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d102      	bne.n	800911c <_kill_r+0x1c>
 8009116:	682b      	ldr	r3, [r5, #0]
 8009118:	b103      	cbz	r3, 800911c <_kill_r+0x1c>
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	bd38      	pop	{r3, r4, r5, pc}
 800911e:	bf00      	nop
 8009120:	20001784 	.word	0x20001784

08009124 <_getpid_r>:
 8009124:	f7f8 be12 	b.w	8001d4c <_getpid>

08009128 <_init>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	bf00      	nop
 800912c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912e:	bc08      	pop	{r3}
 8009130:	469e      	mov	lr, r3
 8009132:	4770      	bx	lr

08009134 <_fini>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	bf00      	nop
 8009138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913a:	bc08      	pop	{r3}
 800913c:	469e      	mov	lr, r3
 800913e:	4770      	bx	lr
