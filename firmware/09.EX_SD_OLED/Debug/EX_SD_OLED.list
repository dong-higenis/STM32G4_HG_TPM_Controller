
EX_SD_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e168  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000176c  0800e348  0800e348  0000f348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fab4  0800fab4  000111ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fab4  0800fab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fabc  0800fabc  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fabc  0800fabc  00010abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fac0  0800fac0  00010ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800fac4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006784  200001ec  0800fcb0  000111ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006970  0800fcb0  00011970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016540  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396e  00000000  00000000  0002775c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0002b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e02  00000000  00000000  0002c318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ed1  00000000  00000000  0002d11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa4b  00000000  00000000  0004dfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd389  00000000  00000000  00068a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125dbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  00125e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e330 	.word	0x0800e330

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800e330 	.word	0x0800e330

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b988 	b.w	8000f40 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	468e      	mov	lr, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	4688      	mov	r8, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d962      	bls.n	8000d24 <__udivmoddi4+0xdc>
 8000c5e:	fab2 f682 	clz	r6, r2
 8000c62:	b14e      	cbz	r6, 8000c78 <__udivmoddi4+0x30>
 8000c64:	f1c6 0320 	rsb	r3, r6, #32
 8000c68:	fa01 f806 	lsl.w	r8, r1, r6
 8000c6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	ea43 0808 	orr.w	r8, r3, r8
 8000c76:	40b4      	lsls	r4, r6
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c84:	0c23      	lsrs	r3, r4, #16
 8000c86:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c9c:	f080 80ea 	bcs.w	8000e74 <__udivmoddi4+0x22c>
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f240 80e7 	bls.w	8000e74 <__udivmoddi4+0x22c>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	1a9a      	subs	r2, r3, r2
 8000cac:	b2a3      	uxth	r3, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cba:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cbe:	459c      	cmp	ip, r3
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x8e>
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc8:	f080 80d6 	bcs.w	8000e78 <__udivmoddi4+0x230>
 8000ccc:	459c      	cmp	ip, r3
 8000cce:	f240 80d3 	bls.w	8000e78 <__udivmoddi4+0x230>
 8000cd2:	443b      	add	r3, r7
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cda:	eba3 030c 	sub.w	r3, r3, ip
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11d      	cbz	r5, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40f3      	lsrs	r3, r6
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d905      	bls.n	8000cfe <__udivmoddi4+0xb6>
 8000cf2:	b10d      	cbz	r5, 8000cf8 <__udivmoddi4+0xb0>
 8000cf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e7f5      	b.n	8000cea <__udivmoddi4+0xa2>
 8000cfe:	fab3 f183 	clz	r1, r3
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d146      	bne.n	8000d94 <__udivmoddi4+0x14c>
 8000d06:	4573      	cmp	r3, lr
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xc8>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 8105 	bhi.w	8000f1a <__udivmoddi4+0x2d2>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	4690      	mov	r8, r2
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e5      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d1e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d22:	e7e2      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f000 8090 	beq.w	8000e4a <__udivmoddi4+0x202>
 8000d2a:	fab2 f682 	clz	r6, r2
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f040 80a4 	bne.w	8000e7c <__udivmoddi4+0x234>
 8000d34:	1a8a      	subs	r2, r1, r2
 8000d36:	0c03      	lsrs	r3, r0, #16
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	b280      	uxth	r0, r0
 8000d3e:	b2bc      	uxth	r4, r7
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d46:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x11e>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x11c>
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f200 80e0 	bhi.w	8000f24 <__udivmoddi4+0x2dc>
 8000d64:	46c4      	mov	ip, r8
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d6c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d70:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d74:	fb02 f404 	mul.w	r4, r2, r4
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x144>
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x142>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f200 80ca 	bhi.w	8000f1e <__udivmoddi4+0x2d6>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000d94:	f1c1 0620 	rsb	r6, r1, #32
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	431f      	orrs	r7, r3
 8000da0:	fa0e f401 	lsl.w	r4, lr, r1
 8000da4:	fa20 f306 	lsr.w	r3, r0, r6
 8000da8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db0:	4323      	orrs	r3, r4
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	fa1f fc87 	uxth.w	ip, r7
 8000dba:	fbbe f0f9 	udiv	r0, lr, r9
 8000dbe:	0c1c      	lsrs	r4, r3, #16
 8000dc0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dc4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dc8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x1a0>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dda:	f080 809c 	bcs.w	8000f16 <__udivmoddi4+0x2ce>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f240 8099 	bls.w	8000f16 <__udivmoddi4+0x2ce>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	fa1f fe83 	uxth.w	lr, r3
 8000df0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df4:	fb09 4413 	mls	r4, r9, r3, r4
 8000df8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dfc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1ce>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e0a:	f080 8082 	bcs.w	8000f12 <__udivmoddi4+0x2ca>
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d97f      	bls.n	8000f12 <__udivmoddi4+0x2ca>
 8000e12:	3b02      	subs	r3, #2
 8000e14:	443c      	add	r4, r7
 8000e16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e22:	4564      	cmp	r4, ip
 8000e24:	4673      	mov	r3, lr
 8000e26:	46e1      	mov	r9, ip
 8000e28:	d362      	bcc.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e2a:	d05f      	beq.n	8000eec <__udivmoddi4+0x2a4>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x1fe>
 8000e2e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e32:	eb64 0409 	sbc.w	r4, r4, r9
 8000e36:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e3e:	431e      	orrs	r6, r3
 8000e40:	40cc      	lsrs	r4, r1
 8000e42:	e9c5 6400 	strd	r6, r4, [r5]
 8000e46:	2100      	movs	r1, #0
 8000e48:	e74f      	b.n	8000cea <__udivmoddi4+0xa2>
 8000e4a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e4e:	0c01      	lsrs	r1, r0, #16
 8000e50:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e54:	b280      	uxth	r0, r0
 8000e56:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	463c      	mov	r4, r7
 8000e60:	46b8      	mov	r8, r7
 8000e62:	46be      	mov	lr, r7
 8000e64:	2620      	movs	r6, #32
 8000e66:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e6a:	eba2 0208 	sub.w	r2, r2, r8
 8000e6e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e72:	e766      	b.n	8000d42 <__udivmoddi4+0xfa>
 8000e74:	4601      	mov	r1, r0
 8000e76:	e718      	b.n	8000caa <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e72c      	b.n	8000cd6 <__udivmoddi4+0x8e>
 8000e7c:	f1c6 0220 	rsb	r2, r6, #32
 8000e80:	fa2e f302 	lsr.w	r3, lr, r2
 8000e84:	40b7      	lsls	r7, r6
 8000e86:	40b1      	lsls	r1, r6
 8000e88:	fa20 f202 	lsr.w	r2, r0, r2
 8000e8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e90:	430a      	orrs	r2, r1
 8000e92:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e96:	b2bc      	uxth	r4, r7
 8000e98:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb08 f904 	mul.w	r9, r8, r4
 8000ea6:	40b0      	lsls	r0, r6
 8000ea8:	4589      	cmp	r9, r1
 8000eaa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eae:	b280      	uxth	r0, r0
 8000eb0:	d93e      	bls.n	8000f30 <__udivmoddi4+0x2e8>
 8000eb2:	1879      	adds	r1, r7, r1
 8000eb4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000eb8:	d201      	bcs.n	8000ebe <__udivmoddi4+0x276>
 8000eba:	4589      	cmp	r9, r1
 8000ebc:	d81f      	bhi.n	8000efe <__udivmoddi4+0x2b6>
 8000ebe:	eba1 0109 	sub.w	r1, r1, r9
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fb09 f804 	mul.w	r8, r9, r4
 8000eca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d229      	bcs.n	8000f2c <__udivmoddi4+0x2e4>
 8000ed8:	18ba      	adds	r2, r7, r2
 8000eda:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ede:	d2c4      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee0:	4542      	cmp	r2, r8
 8000ee2:	d2c2      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ee8:	443a      	add	r2, r7
 8000eea:	e7be      	b.n	8000e6a <__udivmoddi4+0x222>
 8000eec:	45f0      	cmp	r8, lr
 8000eee:	d29d      	bcs.n	8000e2c <__udivmoddi4+0x1e4>
 8000ef0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ef4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ef8:	3801      	subs	r0, #1
 8000efa:	46e1      	mov	r9, ip
 8000efc:	e796      	b.n	8000e2c <__udivmoddi4+0x1e4>
 8000efe:	eba7 0909 	sub.w	r9, r7, r9
 8000f02:	4449      	add	r1, r9
 8000f04:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f08:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0c:	fb09 f804 	mul.w	r8, r9, r4
 8000f10:	e7db      	b.n	8000eca <__udivmoddi4+0x282>
 8000f12:	4673      	mov	r3, lr
 8000f14:	e77f      	b.n	8000e16 <__udivmoddi4+0x1ce>
 8000f16:	4650      	mov	r0, sl
 8000f18:	e766      	b.n	8000de8 <__udivmoddi4+0x1a0>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e6fd      	b.n	8000d1a <__udivmoddi4+0xd2>
 8000f1e:	443b      	add	r3, r7
 8000f20:	3a02      	subs	r2, #2
 8000f22:	e733      	b.n	8000d8c <__udivmoddi4+0x144>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	443b      	add	r3, r7
 8000f2a:	e71c      	b.n	8000d66 <__udivmoddi4+0x11e>
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	e79c      	b.n	8000e6a <__udivmoddi4+0x222>
 8000f30:	eba1 0109 	sub.w	r1, r1, r9
 8000f34:	46c4      	mov	ip, r8
 8000f36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3a:	fb09 f804 	mul.w	r8, r9, r4
 8000f3e:	e7c4      	b.n	8000eca <__udivmoddi4+0x282>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4e:	4a15      	ldr	r2, [pc, #84]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	200b      	movs	r0, #11
 8000f80:	f002 fbfd 	bl	800377e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f84:	200b      	movs	r0, #11
 8000f86:	f002 fc14 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	200c      	movs	r0, #12
 8000f90:	f002 fbf5 	bl	800377e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f94:	200c      	movs	r0, #12
 8000f96:	f002 fc0c 	bl	80037b2 <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <SELECT>:
 * SPI 함수들 ( SPI 신호 동작관련 )
 **************************************/

/* 슬레이브 선택! */
static void SELECT(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);  // CS를 LOW로
 8000fac:	2200      	movs	r2, #0
 8000fae:	2110      	movs	r1, #16
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb4:	f003 f838 	bl	8004028 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f002 fae3 	bl	8003584 <HAL_Delay>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <DESELECT>:

/* 슬레이브 선택 해제! */
static void DESELECT(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);    // CS를 HIGH로
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2110      	movs	r1, #16
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f003 f82b 	bl	8004028 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f002 fad6 	bl	8003584 <HAL_Delay>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SPI_TxByte>:

/* SPI 데이터 송신! */
static void SPI_TxByte(uint8_t data)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE)); // TX 버퍼 비울 때까지 대기
 8000fe6:	bf00      	nop
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <SPI_TxByte+0x30>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d1f8      	bne.n	8000fe8 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT); // 1바이트 전송
 8000ff6:	1df9      	adds	r1, r7, #7
 8000ff8:	2364      	movs	r3, #100	@ 0x64
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4803      	ldr	r0, [pc, #12]	@ (800100c <SPI_TxByte+0x30>)
 8000ffe:	f004 f8a8 	bl	8005152 <HAL_SPI_Transmit>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20004748 	.word	0x20004748

08001010 <SPI_TxBuffer>:

/* SPI 전송 버퍼! */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800101c:	bf00      	nop
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <SPI_TxBuffer+0x30>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b02      	cmp	r3, #2
 800102a:	d1f8      	bne.n	800101e <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	2364      	movs	r3, #100	@ 0x64
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <SPI_TxBuffer+0x30>)
 8001034:	f004 f88d 	bl	8005152 <HAL_SPI_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20004748 	.word	0x20004748

08001044 <SPI_RxByte>:

/* SPI 데이터 수신! */
static uint8_t SPI_RxByte(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF; // SD카드는 0xFF를 보내야 응답함
 800104a:	23ff      	movs	r3, #255	@ 0xff
 800104c:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800104e:	bf00      	nop
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <SPI_RxByte+0x34>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b02      	cmp	r3, #2
 800105c:	d1f8      	bne.n	8001050 <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800105e:	1dba      	adds	r2, r7, #6
 8001060:	1df9      	adds	r1, r7, #7
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <SPI_RxByte+0x34>)
 800106a:	f004 f9e8 	bl	800543e <HAL_SPI_TransmitReceive>

    return data;
 800106e:	79bb      	ldrb	r3, [r7, #6]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20004748 	.word	0x20004748

0800107c <SPI_RxBytePtr>:

/* 포인터를 통한 SPI 수신 데이터  */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8001084:	f7ff ffde 	bl	8001044 <SPI_RxByte>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <SD_ReadyWait>:
 * SD 함수
 **************************************/

/*  SD카드 준비 상태 확인 */
static uint8_t SD_ReadyWait(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms 타임아웃 설정 */
    Timer2 = 500;
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <SD_ReadyWait+0x30>)
 80010a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010a4:	801a      	strh	r2, [r3, #0]
		0x00: 바쁨 (busy)
		기타값: 에러 또는 처리중
     */

    do {
        res = SPI_RxByte();
 80010a6:	f7ff ffcd 	bl	8001044 <SPI_RxByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2bff      	cmp	r3, #255	@ 0xff
 80010b2:	d004      	beq.n	80010be <SD_ReadyWait+0x26>
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SD_ReadyWait+0x30>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f3      	bne.n	80010a6 <SD_ReadyWait+0xe>

    return res;
 80010be:	79fb      	ldrb	r3, [r7, #7]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20002662 	.word	0x20002662

080010cc <SD_PowerOn>:

/* 전원 제어 */
static void SD_PowerOn(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF; // 약 8000번 시도
 80010d2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010d6:	60fb      	str	r3, [r7, #12]

    /* 1단계: 웨이크업 시퀀스 */
    DESELECT(); // 슬레이브 선택 해제!
 80010d8:	f7ff ff73 	bl	8000fc2 <DESELECT>
    for(int i = 0; i < 10; i++)
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	e005      	b.n	80010ee <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF); // 80클럭 펄스 생성 (10바이트 × 8비트)
 80010e2:	20ff      	movs	r0, #255	@ 0xff
 80010e4:	f7ff ff7a 	bl	8000fdc <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	ddf6      	ble.n	80010e2 <SD_PowerOn+0x16>
    }

    /* 슬레이브 선택! */
    SELECT();
 80010f4:	f7ff ff58 	bl	8000fa8 <SELECT>

    /* 2단계: 카드 선택 및 IDLE 명령 */
    args[0] = CMD0;     // 명령어: GO_IDLE_STATE
 80010f8:	2340      	movs	r3, #64	@ 0x40
 80010fa:	703b      	strb	r3, [r7, #0]
    args[1] = 0;        // 인수 [31:24] = 0
 80010fc:	2300      	movs	r3, #0
 80010fe:	707b      	strb	r3, [r7, #1]
    args[2] = 0;        // 인수 [23:16] = 0
 8001100:	2300      	movs	r3, #0
 8001102:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;        // 인수 [15:8] = 0
 8001104:	2300      	movs	r3, #0
 8001106:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;        // 인수 [7:0] = 0
 8001108:	2300      	movs	r3, #0
 800110a:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     // CRC (CMD0용 고정값)
 800110c:	2395      	movs	r3, #149	@ 0x95
 800110e:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args)); // 6바이트 전송
 8001110:	463b      	mov	r3, r7
 8001112:	2106      	movs	r1, #6
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff7b 	bl	8001010 <SPI_TxBuffer>

    /* 3단계: 응답 대기 (R1 응답 = 0x01 기대) */
    while ((SPI_RxByte() != 0x01) && cnt)
 800111a:	e002      	b.n	8001122 <SD_PowerOn+0x56>
    {
        cnt--; // 타임아웃 카운터
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3b01      	subs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 8001122:	f7ff ff8f 	bl	8001044 <SPI_RxByte>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d002      	beq.n	8001132 <SD_PowerOn+0x66>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f4      	bne.n	800111c <SD_PowerOn+0x50>
    }

    DESELECT(); // 명령 완료 후 비활성화
 8001132:	f7ff ff46 	bl	8000fc2 <DESELECT>
    SPI_TxByte(0XFF); // 추가 클럭 제공
 8001136:	20ff      	movs	r0, #255	@ 0xff
 8001138:	f7ff ff50 	bl	8000fdc <SPI_TxByte>

    PowerFlag = 1; // 전원 상태 플래그 설정
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <SD_PowerOn+0x80>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000209 	.word	0x20000209

08001150 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <SD_PowerOff+0x14>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	20000209 	.word	0x20000209

08001168 <SD_CheckPower>:

/* Power Flag 체크용 함수! */
static uint8_t SD_CheckPower(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
    return PowerFlag;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <SD_CheckPower+0x14>)
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000209 	.word	0x20000209

08001180 <SD_RxDataBlock>:

/* 데이터 블록 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* 200ms 타임아웃 */
    Timer1 = 200;
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <SD_RxDataBlock+0x5c>)
 800118c:	22c8      	movs	r2, #200	@ 0xc8
 800118e:	801a      	strh	r2, [r3, #0]

    /* 응답을 받을때 까지 or 타임아웃 시간까지 루프를 돕니다. */
    // 1단계: 데이터 토큰 대기
    do {
        token = SPI_RxByte();
 8001190:	f7ff ff58 	bl	8001044 <SPI_RxByte>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2bff      	cmp	r3, #255	@ 0xff
 800119c:	d104      	bne.n	80011a8 <SD_RxDataBlock+0x28>
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <SD_RxDataBlock+0x5c>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f3      	bne.n	8001190 <SD_RxDataBlock+0x10>

    // 2단계: 토큰 검증
    if(token != 0xFE) return FALSE;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80011ac:	d007      	beq.n	80011be <SD_RxDataBlock+0x3e>
 80011ae:	2300      	movs	r3, #0
 80011b0:	e00f      	b.n	80011d2 <SD_RxDataBlock+0x52>

    // 3단계: 실제 데이터 수신
    while(len--) {
        SPI_RxBytePtr(buff++);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5f 	bl	800107c <SPI_RxBytePtr>
    while(len--) {
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	603a      	str	r2, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f4      	bne.n	80011b2 <SD_RxDataBlock+0x32>
    }

    // 4단계: CRC 무시 (사용 안 함)
    SPI_RxByte();
 80011c8:	f7ff ff3c 	bl	8001044 <SPI_RxByte>
    SPI_RxByte();
 80011cc:	f7ff ff3a 	bl	8001044 <SPI_RxByte>

    return TRUE;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20002664 	.word	0x20002664

080011e0 <SD_TxDataBlock>:


/* 데이터 블록 전송 */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 80011ec:	23ff      	movs	r3, #255	@ 0xff
 80011ee:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73bb      	strb	r3, [r7, #14]

    // 1단계: 카드 준비 상태 확인
    if (SD_ReadyWait() != 0xFF) return FALSE;
 80011f4:	f7ff ff50 	bl	8001098 <SD_ReadyWait>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2bff      	cmp	r3, #255	@ 0xff
 80011fc:	d001      	beq.n	8001202 <SD_TxDataBlock+0x22>
 80011fe:	2300      	movs	r3, #0
 8001200:	e037      	b.n	8001272 <SD_TxDataBlock+0x92>

    // 2단계: 토큰 전송
    SPI_TxByte(token); // 0xFE(단일블록) 또는 0xFC(다중블록)
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fee9 	bl	8000fdc <SPI_TxByte>

    // 3단계: 데이터 전송 (STOP 토큰이 아닌 경우만)
    if (token != 0xFD) // 0xFD = STOP_TRANSMISSION 토큰
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	2bfd      	cmp	r3, #253	@ 0xfd
 800120e:	d028      	beq.n	8001262 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);  // 512바이트 데이터
 8001210:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fefb 	bl	8001010 <SPI_TxBuffer>

        SPI_RxByte();  // 더미 CRC 상위
 800121a:	f7ff ff13 	bl	8001044 <SPI_RxByte>
        SPI_RxByte();  // 더미 CRC 하위
 800121e:	f7ff ff11 	bl	8001044 <SPI_RxByte>

        // 4단계: 데이터 응답 토큰 수신
        while (i <= 64)
 8001222:	e00b      	b.n	800123c <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 8001224:	f7ff ff0e 	bl	8001044 <SPI_RxByte>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]

            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2b05      	cmp	r3, #5
 8001234:	d006      	beq.n	8001244 <SD_TxDataBlock+0x64>
            i++;
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	3301      	adds	r3, #1
 800123a:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	2b40      	cmp	r3, #64	@ 0x40
 8001240:	d9f0      	bls.n	8001224 <SD_TxDataBlock+0x44>
 8001242:	e000      	b.n	8001246 <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 8001244:	bf00      	nop
        }

        // 5단계: 바쁨 상태 대기
        Timer1 = 200; // 200ms 타임아웃
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <SD_TxDataBlock+0x9c>)
 8001248:	22c8      	movs	r2, #200	@ 0xc8
 800124a:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 800124c:	bf00      	nop
 800124e:	f7ff fef9 	bl	8001044 <SPI_RxByte>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d104      	bne.n	8001262 <SD_TxDataBlock+0x82>
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <SD_TxDataBlock+0x9c>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f5      	bne.n	800124e <SD_TxDataBlock+0x6e>
    }
    if ((resp & 0x1F) == 0x05) return TRUE;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	2b05      	cmp	r3, #5
 800126a:	d101      	bne.n	8001270 <SD_TxDataBlock+0x90>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <SD_TxDataBlock+0x92>

    return FALSE;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20002664 	.word	0x20002664

08001280 <SD_SendCmd>:
#endif /* _USE_WRITE */


/* 명령어 전송 함수!*/
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    // 1단계: 카드 준비 대기
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 800128c:	f7ff ff04 	bl	8001098 <SD_ReadyWait>
 8001290:	4603      	mov	r3, r0
 8001292:	2bff      	cmp	r3, #255	@ 0xff
 8001294:	d001      	beq.n	800129a <SD_SendCmd+0x1a>
 8001296:	23ff      	movs	r3, #255	@ 0xff
 8001298:	e042      	b.n	8001320 <SD_SendCmd+0xa0>

    // 2단계: 명령어 패킷 전송 (6바이트)
    SPI_TxByte(cmd);                    // 명령어 바이트
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe9d 	bl	8000fdc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   // 인수 [31:24]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	0e1b      	lsrs	r3, r3, #24
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe97 	bl	8000fdc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   // 인수 [23:16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe91 	bl	8000fdc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    // 인수 [15:8]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe8b 	bl	8000fdc <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           // 인수 [7:0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe86 	bl	8000fdc <SPI_TxByte>

    // 3단계: CRC 계산 및 전송
    if(cmd == CMD0) crc = 0x95;         // CMD0은 항상 0x95
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b40      	cmp	r3, #64	@ 0x40
 80012d4:	d102      	bne.n	80012dc <SD_SendCmd+0x5c>
 80012d6:	2395      	movs	r3, #149	@ 0x95
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e007      	b.n	80012ec <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    // CMD8(0x1AA)는 0x87
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b48      	cmp	r3, #72	@ 0x48
 80012e0:	d102      	bne.n	80012e8 <SD_SendCmd+0x68>
 80012e2:	2387      	movs	r3, #135	@ 0x87
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e001      	b.n	80012ec <SD_SendCmd+0x6c>
    else crc = 1;                       // 나머지는 더미 CRC
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]

    SPI_TxByte(crc);
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe74 	bl	8000fdc <SPI_TxByte>

    // 4단계: CMD12 특수 처리
    if (cmd == CMD12) SPI_RxByte();     // STOP_TRANSMISSION 후 더미바이트
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b4c      	cmp	r3, #76	@ 0x4c
 80012f8:	d101      	bne.n	80012fe <SD_SendCmd+0x7e>
 80012fa:	f7ff fea3 	bl	8001044 <SPI_RxByte>

    // 5단계: R1 응답 수신 (최대 10번 시도)
    uint8_t n = 10;
 80012fe:	230a      	movs	r3, #10
 8001300:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 8001302:	f7ff fe9f 	bl	8001044 <SPI_RxByte>
 8001306:	4603      	mov	r3, r0
 8001308:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);      // MSB가 0이 될 때까지
 800130a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800130e:	2b00      	cmp	r3, #0
 8001310:	da05      	bge.n	800131e <SD_SendCmd+0x9e>
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	3b01      	subs	r3, #1
 8001316:	73bb      	strb	r3, [r7, #14]
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f1      	bne.n	8001302 <SD_SendCmd+0x82>

    return res;
 800131e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SD_disk_initialize>:
 * 사용자 정의 diskio.c 함수!
 **************************************/

/* SD 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    // 1단계: 드라이브 번호 확인 (0만 지원)
    if(drv) return STA_NOINIT;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SD_disk_initialize+0x14>
 8001338:	2301      	movs	r3, #1
 800133a:	e0d6      	b.n	80014ea <SD_disk_initialize+0x1c2>

    // 2단계: 물리적 디스크 존재 확인
    if(Stat & STA_NODISK) return Stat;
 800133c:	4b6d      	ldr	r3, [pc, #436]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <SD_disk_initialize+0x2a>
 800134a:	4b6a      	ldr	r3, [pc, #424]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	e0cb      	b.n	80014ea <SD_disk_initialize+0x1c2>

    // 3단계: 전원 켜기
    SD_PowerOn();
 8001352:	f7ff febb 	bl	80010cc <SD_PowerOn>

    // 4단계: 카드 선택
    SELECT();
 8001356:	f7ff fe27 	bl	8000fa8 <SELECT>

    type = 0;  // 카드 타입 초기화
 800135a:	2300      	movs	r3, #0
 800135c:	73bb      	strb	r3, [r7, #14]

    // 5단계: IDLE 상태 확인
    if (SD_SendCmd(CMD0, 0) == 1)  // R1 = 0x01 (IDLE 상태) 기대
 800135e:	2100      	movs	r1, #0
 8001360:	2040      	movs	r0, #64	@ 0x40
 8001362:	f7ff ff8d 	bl	8001280 <SD_SendCmd>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80a6 	bne.w	80014ba <SD_disk_initialize+0x192>
    {
        Timer1 = 1000;  // 1초 타임아웃
 800136e:	4b62      	ldr	r3, [pc, #392]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 8001370:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001374:	801a      	strh	r2, [r3, #0]

        // 6단계: SD v2+ 확인 (CMD8 지원 여부)
        if (SD_SendCmd(CMD8, 0x1AA) == 1)  // 0x1AA = 2.7-3.6V, 0xAA 체크패턴
 8001376:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800137a:	2048      	movs	r0, #72	@ 0x48
 800137c:	f7ff ff80 	bl	8001280 <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d158      	bne.n	8001438 <SD_disk_initialize+0x110>
        {
            // OCR(Operation Conditions Register) 수신
            for (n = 0; n < 4; n++)
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e00c      	b.n	80013a6 <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 800138c:	7bfc      	ldrb	r4, [r7, #15]
 800138e:	f7ff fe59 	bl	8001044 <SPI_RxByte>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	f104 0310 	add.w	r3, r4, #16
 800139a:	443b      	add	r3, r7
 800139c:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d9ef      	bls.n	800138c <SD_disk_initialize+0x64>
            }

            // 전압 범위 및 체크 패턴 확인
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)  // 지원 전압 + 체크패턴
 80013ac:	7abb      	ldrb	r3, [r7, #10]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	f040 8083 	bne.w	80014ba <SD_disk_initialize+0x192>
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	2baa      	cmp	r3, #170	@ 0xaa
 80013b8:	d17f      	bne.n	80014ba <SD_disk_initialize+0x192>
            {
                // ACMD41로 초기화 (HCS 비트 설정)
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 80013ba:	2100      	movs	r1, #0
 80013bc:	2077      	movs	r0, #119	@ 0x77
 80013be:	f7ff ff5f 	bl	8001280 <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d807      	bhi.n	80013d8 <SD_disk_initialize+0xb0>
                        SD_SendCmd(CMD41, 1UL << 30) == 0) // HCS=1 (고용량 지원)
 80013c8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013cc:	2069      	movs	r0, #105	@ 0x69
 80013ce:	f7ff ff57 	bl	8001280 <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <SD_disk_initialize+0xbc>
                        break;
                } while (Timer1);
 80013d8:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1eb      	bne.n	80013ba <SD_disk_initialize+0x92>
 80013e2:	e000      	b.n	80013e6 <SD_disk_initialize+0xbe>
                        break;
 80013e4:	bf00      	nop

                // 초기화 완료 후 OCR 읽기
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013e6:	4b44      	ldr	r3, [pc, #272]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d064      	beq.n	80014ba <SD_disk_initialize+0x192>
 80013f0:	2100      	movs	r1, #0
 80013f2:	207a      	movs	r0, #122	@ 0x7a
 80013f4:	f7ff ff44 	bl	8001280 <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d15d      	bne.n	80014ba <SD_disk_initialize+0x192>
                {
                    for (n = 0; n < 4; n++)
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e00c      	b.n	800141e <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 8001404:	7bfc      	ldrb	r4, [r7, #15]
 8001406:	f7ff fe1d 	bl	8001044 <SPI_RxByte>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	f104 0310 	add.w	r3, r4, #16
 8001412:	443b      	add	r3, r7
 8001414:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d9ef      	bls.n	8001404 <SD_disk_initialize+0xdc>
                    }

                    // CCS 비트 확인 (카드 용량 구조)
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001424:	7a3b      	ldrb	r3, [r7, #8]
 8001426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SD_disk_initialize+0x10a>
 800142e:	230c      	movs	r3, #12
 8001430:	e000      	b.n	8001434 <SD_disk_initialize+0x10c>
 8001432:	2304      	movs	r3, #4
 8001434:	73bb      	strb	r3, [r7, #14]
 8001436:	e040      	b.n	80014ba <SD_disk_initialize+0x192>
            }
        }
        else
        {
            // SD v1 또는 MMC 카드
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1)
 8001438:	2100      	movs	r1, #0
 800143a:	2077      	movs	r0, #119	@ 0x77
 800143c:	f7ff ff20 	bl	8001280 <SD_SendCmd>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	d808      	bhi.n	8001458 <SD_disk_initialize+0x130>
 8001446:	2100      	movs	r1, #0
 8001448:	2069      	movs	r0, #105	@ 0x69
 800144a:	f7ff ff19 	bl	8001280 <SD_SendCmd>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d801      	bhi.n	8001458 <SD_disk_initialize+0x130>
 8001454:	2302      	movs	r3, #2
 8001456:	e000      	b.n	800145a <SD_disk_initialize+0x132>
 8001458:	2301      	movs	r3, #1
 800145a:	73bb      	strb	r3, [r7, #14]
                   ? CT_SD1 : CT_MMC;

            do
            {
                if (type == CT_SD1)
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d10e      	bne.n	8001480 <SD_disk_initialize+0x158>
                {
                    // SD v1: ACMD41
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001462:	2100      	movs	r1, #0
 8001464:	2077      	movs	r0, #119	@ 0x77
 8001466:	f7ff ff0b 	bl	8001280 <SD_SendCmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d80e      	bhi.n	800148e <SD_disk_initialize+0x166>
 8001470:	2100      	movs	r1, #0
 8001472:	2069      	movs	r0, #105	@ 0x69
 8001474:	f7ff ff04 	bl	8001280 <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <SD_disk_initialize+0x166>
                        break;
 800147e:	e00d      	b.n	800149c <SD_disk_initialize+0x174>
                }
                else
                {
                    // MMC: CMD1
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 8001480:	2100      	movs	r1, #0
 8001482:	2041      	movs	r0, #65	@ 0x41
 8001484:	f7ff fefc 	bl	8001280 <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <SD_disk_initialize+0x172>
                }
            } while (Timer1);
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e1      	bne.n	800145c <SD_disk_initialize+0x134>
 8001498:	e000      	b.n	800149c <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 800149a:	bf00      	nop

            // 블록 크기 설정 (512바이트)
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <SD_disk_initialize+0x18e>
 80014a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014aa:	2050      	movs	r0, #80	@ 0x50
 80014ac:	f7ff fee8 	bl	8001280 <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SD_disk_initialize+0x192>
                type = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;  // 감지된 카드 타입 저장
 80014ba:	4a10      	ldr	r2, [pc, #64]	@ (80014fc <SD_disk_initialize+0x1d4>)
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	7013      	strb	r3, [r2, #0]

    DESELECT();      // 카드 비활성화
 80014c0:	f7ff fd7f 	bl	8000fc2 <DESELECT>
    SPI_RxByte();    // 추가 클럭
 80014c4:	f7ff fdbe 	bl	8001044 <SPI_RxByte>

    // 상태 업데이트
    if (type)
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;  // 초기화 완료 플래그 제거
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e001      	b.n	80014e4 <SD_disk_initialize+0x1bc>
    }
    else
    {
        SD_PowerOff();        // 초기화 실패 시 전원 끄기
 80014e0:	f7ff fe36 	bl	8001150 <SD_PowerOff>
    }

    return Stat;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20002664 	.word	0x20002664
 80014fc:	20000208 	.word	0x20000208

08001500 <SD_disk_status>:

/* SD 상태 리턴함수! */
DSTATUS SD_disk_status(BYTE drv)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SD_disk_status+0x14>
 8001510:	2301      	movs	r3, #1
 8001512:	e002      	b.n	800151a <SD_disk_status+0x1a>
    return Stat;
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SD_disk_status+0x28>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000000 	.word	0x20000000

0800152c <SD_disk_read>:

/* 섹터 읽기 함수! */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <SD_disk_read+0x1c>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <SD_disk_read+0x20>
 8001548:	2304      	movs	r3, #4
 800154a:	e051      	b.n	80015f0 <SD_disk_read+0xc4>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <SD_disk_read+0xcc>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SD_disk_read+0x32>
 800155a:	2303      	movs	r3, #3
 800155c:	e048      	b.n	80015f0 <SD_disk_read+0xc4>

    // 3단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800155e:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <SD_disk_read+0xd0>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <SD_disk_read+0x44>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	025b      	lsls	r3, r3, #9
 800156e:	607b      	str	r3, [r7, #4]

    SELECT();
 8001570:	f7ff fd1a 	bl	8000fa8 <SELECT>

    if (count == 1)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d111      	bne.n	800159e <SD_disk_read+0x72>
    {
        // 단일 블록 읽기
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	2051      	movs	r0, #81	@ 0x51
 800157e:	f7ff fe7f 	bl	8001280 <SD_SendCmd>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d129      	bne.n	80015dc <SD_disk_read+0xb0>
 8001588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800158c:	68b8      	ldr	r0, [r7, #8]
 800158e:	f7ff fdf7 	bl	8001180 <SD_RxDataBlock>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d021      	beq.n	80015dc <SD_disk_read+0xb0>
            count = 0;  // 성공 시 count를 0으로
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	e01e      	b.n	80015dc <SD_disk_read+0xb0>
    }
    else
    {
        // 다중 블록 읽기
        if (SD_SendCmd(CMD18, sector) == 0)
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	2052      	movs	r0, #82	@ 0x52
 80015a2:	f7ff fe6d 	bl	8001280 <SD_SendCmd>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d117      	bne.n	80015dc <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 80015ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f7ff fde5 	bl	8001180 <SD_RxDataBlock>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00a      	beq.n	80015d2 <SD_disk_read+0xa6>
                buff += 512;  // 다음 블록 버퍼 위치
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015c2:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ed      	bne.n	80015ac <SD_disk_read+0x80>
 80015d0:	e000      	b.n	80015d4 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 80015d2:	bf00      	nop

            SD_SendCmd(CMD12, 0);  // 전송 중지 명령
 80015d4:	2100      	movs	r1, #0
 80015d6:	204c      	movs	r0, #76	@ 0x4c
 80015d8:	f7ff fe52 	bl	8001280 <SD_SendCmd>
        }
    }

    DESELECT();
 80015dc:	f7ff fcf1 	bl	8000fc2 <DESELECT>
    SPI_RxByte();
 80015e0:	f7ff fd30 	bl	8001044 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000208 	.word	0x20000208

08001600 <SD_disk_write>:
/* 섹터 쓰기 함수! */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <SD_disk_write+0x1c>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <SD_disk_write+0x20>
 800161c:	2304      	movs	r3, #4
 800161e:	e06b      	b.n	80016f8 <SD_disk_write+0xf8>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001620:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <SD_disk_write+0x100>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SD_disk_write+0x32>
 800162e:	2303      	movs	r3, #3
 8001630:	e062      	b.n	80016f8 <SD_disk_write+0xf8>

    // 3단계: 쓰기 보호 확인
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <SD_disk_write+0x100>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SD_disk_write+0x44>
 8001640:	2302      	movs	r3, #2
 8001642:	e059      	b.n	80016f8 <SD_disk_write+0xf8>

    // 4단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8001644:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <SD_disk_write+0x104>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <SD_disk_write+0x56>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	025b      	lsls	r3, r3, #9
 8001654:	607b      	str	r3, [r7, #4]

    SELECT();
 8001656:	f7ff fca7 	bl	8000fa8 <SELECT>

    if (count == 1)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d110      	bne.n	8001682 <SD_disk_write+0x82>
    {
        // 단일 블록 쓰기
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	2058      	movs	r0, #88	@ 0x58
 8001664:	f7ff fe0c 	bl	8001280 <SD_SendCmd>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d13a      	bne.n	80016e4 <SD_disk_write+0xe4>
 800166e:	21fe      	movs	r1, #254	@ 0xfe
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f7ff fdb5 	bl	80011e0 <SD_TxDataBlock>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d033      	beq.n	80016e4 <SD_disk_write+0xe4>
            count = 0;  // 성공 시 count를 0으로
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	e030      	b.n	80016e4 <SD_disk_write+0xe4>
    }
    else
    {
        // 다중 블록 쓰기
        if (CardType & CT_SD1)
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <SD_disk_write+0x104>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 800168e:	2100      	movs	r1, #0
 8001690:	2077      	movs	r0, #119	@ 0x77
 8001692:	f7ff fdf5 	bl	8001280 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	2057      	movs	r0, #87	@ 0x57
 800169a:	f7ff fdf1 	bl	8001280 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	2059      	movs	r0, #89	@ 0x59
 80016a2:	f7ff fded 	bl	8001280 <SD_SendCmd>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d11b      	bne.n	80016e4 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016ac:	21fc      	movs	r1, #252	@ 0xfc
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7ff fd96 	bl	80011e0 <SD_TxDataBlock>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <SD_disk_write+0xd0>
                buff += 512;  // 다음 블록 버퍼 위치
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016c0:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <SD_disk_write+0xac>
 80016ce:	e000      	b.n	80016d2 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016d0:	bf00      	nop

            /* STOP_TRAN 토큰 */
            if(!SD_TxDataBlock(0, 0xFD))
 80016d2:	21fd      	movs	r1, #253	@ 0xfd
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fd83 	bl	80011e0 <SD_TxDataBlock>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <SD_disk_write+0xe4>
            {
                count = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	603b      	str	r3, [r7, #0]
            }
        }
    }

    DESELECT();
 80016e4:	f7ff fc6d 	bl	8000fc2 <DESELECT>
    SPI_RxByte();
 80016e8:	f7ff fcac 	bl	8001044 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	20000208 	.word	0x20000208

08001708 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08b      	sub	sp, #44	@ 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	603a      	str	r2, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	460b      	mov	r3, r1
 8001716:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	623b      	str	r3, [r7, #32]

    if (drv) return RES_PARERR;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SD_disk_ioctl+0x1e>
 8001722:	2304      	movs	r3, #4
 8001724:	e0ad      	b.n	8001882 <SD_disk_ioctl+0x17a>
    res = RES_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)  // 전원 제어
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d124      	bne.n	800177c <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d012      	beq.n	8001760 <SD_disk_ioctl+0x58>
 800173a:	2b02      	cmp	r3, #2
 800173c:	dc1a      	bgt.n	8001774 <SD_disk_ioctl+0x6c>
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <SD_disk_ioctl+0x40>
 8001742:	2b01      	cmp	r3, #1
 8001744:	d006      	beq.n	8001754 <SD_disk_ioctl+0x4c>
 8001746:	e015      	b.n	8001774 <SD_disk_ioctl+0x6c>
        {
        case 0: SD_PowerOff(); res = RES_OK; break;      // 전원 끄기
 8001748:	f7ff fd02 	bl	8001150 <SD_PowerOff>
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001752:	e094      	b.n	800187e <SD_disk_ioctl+0x176>
        case 1: SD_PowerOn(); res = RES_OK; break;       // 전원 켜기
 8001754:	f7ff fcba 	bl	80010cc <SD_PowerOn>
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800175e:	e08e      	b.n	800187e <SD_disk_ioctl+0x176>
        case 2: *(ptr + 1) = SD_CheckPower(); res = RES_OK; break; // 전원 상태 확인
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	1c5c      	adds	r4, r3, #1
 8001764:	f7ff fd00 	bl	8001168 <SD_CheckPower>
 8001768:	4603      	mov	r3, r0
 800176a:	7023      	strb	r3, [r4, #0]
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001772:	e084      	b.n	800187e <SD_disk_ioctl+0x176>
        default: res = RES_PARERR;
 8001774:	2304      	movs	r3, #4
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800177a:	e080      	b.n	800187e <SD_disk_ioctl+0x176>
        }
    }
    else
    {
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 800177c:	4b43      	ldr	r3, [pc, #268]	@ (800188c <SD_disk_ioctl+0x184>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SD_disk_ioctl+0x86>
 800178a:	2303      	movs	r3, #3
 800178c:	e079      	b.n	8001882 <SD_disk_ioctl+0x17a>

        SELECT();
 800178e:	f7ff fc0b 	bl	8000fa8 <SELECT>

        switch (ctrl)
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d05a      	beq.n	800184e <SD_disk_ioctl+0x146>
 8001798:	2b02      	cmp	r3, #2
 800179a:	dc6c      	bgt.n	8001876 <SD_disk_ioctl+0x16e>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d05e      	beq.n	800185e <SD_disk_ioctl+0x156>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d168      	bne.n	8001876 <SD_disk_ioctl+0x16e>
        {
        case GET_SECTOR_COUNT:  // 총 섹터 수 얻기
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017a4:	2100      	movs	r1, #0
 80017a6:	2049      	movs	r0, #73	@ 0x49
 80017a8:	f7ff fd6a 	bl	8001280 <SD_SendCmd>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d15e      	bne.n	8001870 <SD_disk_ioctl+0x168>
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2110      	movs	r1, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fce1 	bl	8001180 <SD_RxDataBlock>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d055      	beq.n	8001870 <SD_disk_ioctl+0x168>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 80017c4:	7a3b      	ldrb	r3, [r7, #8]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10f      	bne.n	80017ee <SD_disk_ioctl+0xe6>
                {
                    // FIX 5: SDv2 CSD 파싱 수정
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80017d6:	7c3b      	ldrb	r3, [r7, #16]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	4313      	orrs	r3, r2
 80017dc:	7c7a      	ldrb	r2, [r7, #17]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;  // (C_SIZE+1) * 1024
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	3301      	adds	r3, #1
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e02b      	b.n	8001846 <SD_disk_ioctl+0x13e>
                }
                else /* MMC or SDC V1 */
                {
                    // 복잡한 CSD v1 계산
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017ee:	7b7b      	ldrb	r3, [r7, #13]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	7cbb      	ldrb	r3, [r7, #18]
 80017f8:	09db      	lsrs	r3, r3, #7
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	7c7b      	ldrb	r3, [r7, #17]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 0306 	and.w	r3, r3, #6
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4413      	add	r3, r2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3302      	adds	r3, #2
 8001812:	77fb      	strb	r3, [r7, #31]
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001814:	7c3b      	ldrb	r3, [r7, #16]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	b29b      	uxth	r3, r3
 8001822:	4413      	add	r3, r2
 8001824:	b29a      	uxth	r2, r3
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	b29b      	uxth	r3, r3
 800182c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001830:	b29b      	uxth	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	3301      	adds	r3, #1
 8001838:	83bb      	strh	r3, [r7, #28]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 800183a:	8bba      	ldrh	r2, [r7, #28]
 800183c:	7ffb      	ldrb	r3, [r7, #31]
 800183e:	3b09      	subs	r3, #9
 8001840:	409a      	lsls	r2, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800184c:	e010      	b.n	8001870 <SD_disk_ioctl+0x168>

        case GET_SECTOR_SIZE:   // 섹터 크기 (항상 512)
            *(WORD*) buff = 512;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001854:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800185c:	e00b      	b.n	8001876 <SD_disk_ioctl+0x16e>

        case CTRL_SYNC:         // 동기화 (쓰기 완료 대기)
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800185e:	f7ff fc1b 	bl	8001098 <SD_ReadyWait>
 8001862:	4603      	mov	r3, r0
 8001864:	2bff      	cmp	r3, #255	@ 0xff
 8001866:	d105      	bne.n	8001874 <SD_disk_ioctl+0x16c>
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800186e:	e001      	b.n	8001874 <SD_disk_ioctl+0x16c>
            break;
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <SD_disk_ioctl+0x16e>
            break;
 8001874:	bf00      	nop

        // 추가 정보들...
        }

        DESELECT();
 8001876:	f7ff fba4 	bl	8000fc2 <DESELECT>
        SPI_RxByte();
 800187a:	f7ff fbe3 	bl	8001044 <SPI_RxByte>
    }

    return res;
 800187e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001882:	4618      	mov	r0, r3
 8001884:	372c      	adds	r7, #44	@ 0x2c
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000

08001890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a6:	4b3e      	ldr	r3, [pc, #248]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a3d      	ldr	r2, [pc, #244]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b3b      	ldr	r3, [pc, #236]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b38      	ldr	r3, [pc, #224]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	4a37      	ldr	r2, [pc, #220]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ca:	4b35      	ldr	r3, [pc, #212]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b32      	ldr	r3, [pc, #200]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <MX_GPIO_Init+0x110>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2110      	movs	r1, #16
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f002 fb97 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001900:	4828      	ldr	r0, [pc, #160]	@ (80019a4 <MX_GPIO_Init+0x114>)
 8001902:	f002 fb91 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 800190c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001910:	f002 fb8a 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CD_GPIO_Port, SD_CD_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2110      	movs	r1, #16
 8001918:	4822      	ldr	r0, [pc, #136]	@ (80019a4 <MX_GPIO_Init+0x114>)
 800191a:	f002 fb85 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800191e:	2310      	movs	r3, #16
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800192a:	2301      	movs	r3, #1
 800192c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001938:	f002 f9dc 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800193c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4619      	mov	r1, r3
 8001954:	4813      	ldr	r0, [pc, #76]	@ (80019a4 <MX_GPIO_Init+0x114>)
 8001956:	f002 f9cd 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 800195a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001976:	f002 f9bd 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 800197a:	2310      	movs	r3, #16
 800197c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001986:	2301      	movs	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <MX_GPIO_Init+0x114>)
 8001992:	f002 f9af 	bl	8003cf4 <HAL_GPIO_Init>

}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000400 	.word	0x48000400

080019a8 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* printf() → USART1 리다이렉트 */
int __io_putchar(int ch)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 80019b0:	1d39      	adds	r1, r7, #4
 80019b2:	2364      	movs	r3, #100	@ 0x64
 80019b4:	2201      	movs	r2, #1
 80019b6:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <__io_putchar+0x20>)
 80019b8:	f004 f914 	bl	8005be4 <HAL_UART_Transmit>
  return ch;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000486c 	.word	0x2000486c

080019cc <SD_IsCardDetected>:

/* SD 카드 감지 (CD 핀 LOW = 삽입) */
uint8_t SD_IsCardDetected(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(SD_CD_GPIO_Port, SD_CD_Pin) == GPIO_PIN_RESET);
 80019d0:	2110      	movs	r1, #16
 80019d2:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <SD_IsCardDetected+0x1c>)
 80019d4:	f002 fb10 	bl	8003ff8 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf0c      	ite	eq
 80019de:	2301      	moveq	r3, #1
 80019e0:	2300      	movne	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	48000400 	.word	0x48000400

080019ec <SDMount>:

/* SD 카드 마운트 */
void SDMount(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af02      	add	r7, sp, #8
  fres = f_mount(&fs, "", 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	4914      	ldr	r1, [pc, #80]	@ (8001a48 <SDMount+0x5c>)
 80019f6:	4815      	ldr	r0, [pc, #84]	@ (8001a4c <SDMount+0x60>)
 80019f8:	f008 fc0c 	bl	800a214 <f_mount>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <SDMount+0x64>)
 8001a02:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <SDMount+0x64>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d113      	bne.n	8001a34 <SDMount+0x48>
  {
    printf("SD Card mounted successfully.\r\n");
 8001a0c:	4811      	ldr	r0, [pc, #68]	@ (8001a54 <SDMount+0x68>)
 8001a0e:	f00a fbe3 	bl	800c1d8 <puts>
    oled_drawString(30, 0, "                  ", &font_07x10, 15);
 8001a12:	230f      	movs	r3, #15
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <SDMount+0x6c>)
 8001a18:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <SDMount+0x70>)
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	201e      	movs	r0, #30
 8001a1e:	f000 fed9 	bl	80027d4 <oled_drawString>
    oled_drawString(30, 0, "SD Card Mounted",   &font_07x10, 15);
 8001a22:	230f      	movs	r3, #15
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <SDMount+0x6c>)
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <SDMount+0x74>)
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	201e      	movs	r0, #30
 8001a2e:	f000 fed1 	bl	80027d4 <oled_drawString>
  }
  else
  {
    printf("SD Card mount error! (FRESULT=%d)\r\n", fres);
  }
}
 8001a32:	e005      	b.n	8001a40 <SDMount+0x54>
    printf("SD Card mount error! (FRESULT=%d)\r\n", fres);
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <SDMount+0x64>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480a      	ldr	r0, [pc, #40]	@ (8001a64 <SDMount+0x78>)
 8001a3c:	f00a fb64 	bl	800c108 <iprintf>
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0800e348 	.word	0x0800e348
 8001a4c:	2000266c 	.word	0x2000266c
 8001a50:	200036b0 	.word	0x200036b0
 8001a54:	0800e34c 	.word	0x0800e34c
 8001a58:	0800f2b4 	.word	0x0800f2b4
 8001a5c:	0800e36c 	.word	0x0800e36c
 8001a60:	0800e380 	.word	0x0800e380
 8001a64:	0800e390 	.word	0x0800e390

08001a68 <SDUnmount>:

/* SD 카드 언마운트 */
void SDUnmount(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af02      	add	r7, sp, #8
  /* 열린 파일이 있으면 먼저 닫기(안전) */
  if (closeFlag == 0) CloseFile();
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <SDUnmount+0x68>)
 8001a70:	f993 3000 	ldrsb.w	r3, [r3]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <SDUnmount+0x14>
 8001a78:	f000 f8a6 	bl	8001bc8 <CloseFile>

  fres = f_mount(NULL, "", 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4915      	ldr	r1, [pc, #84]	@ (8001ad4 <SDUnmount+0x6c>)
 8001a80:	2000      	movs	r0, #0
 8001a82:	f008 fbc7 	bl	800a214 <f_mount>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <SDUnmount+0x70>)
 8001a8c:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <SDUnmount+0x70>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d113      	bne.n	8001abe <SDUnmount+0x56>
  {
    printf("SD Card unmounted successfully.\r\n");
 8001a96:	4811      	ldr	r0, [pc, #68]	@ (8001adc <SDUnmount+0x74>)
 8001a98:	f00a fb9e 	bl	800c1d8 <puts>
    oled_drawString(30, 0, "                  ", &font_07x10, 15);
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <SDUnmount+0x78>)
 8001aa2:	4a10      	ldr	r2, [pc, #64]	@ (8001ae4 <SDUnmount+0x7c>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	201e      	movs	r0, #30
 8001aa8:	f000 fe94 	bl	80027d4 <oled_drawString>
    oled_drawString(30, 0, "SD Card Un-Mounted", &font_07x10, 15);
 8001aac:	230f      	movs	r3, #15
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <SDUnmount+0x78>)
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <SDUnmount+0x80>)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	201e      	movs	r0, #30
 8001ab8:	f000 fe8c 	bl	80027d4 <oled_drawString>
  }
  else
  {
    printf("SD Card unmount error! (FRESULT=%d)\r\n", fres);
  }
}
 8001abc:	e005      	b.n	8001aca <SDUnmount+0x62>
    printf("SD Card unmount error! (FRESULT=%d)\r\n", fres);
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <SDUnmount+0x70>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	@ (8001aec <SDUnmount+0x84>)
 8001ac6:	f00a fb1f 	bl	800c108 <iprintf>
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000001 	.word	0x20000001
 8001ad4:	0800e348 	.word	0x0800e348
 8001ad8:	200036b0 	.word	0x200036b0
 8001adc:	0800e3b4 	.word	0x0800e3b4
 8001ae0:	0800f2b4 	.word	0x0800f2b4
 8001ae4:	0800e36c 	.word	0x0800e36c
 8001ae8:	0800e3d8 	.word	0x0800e3d8
 8001aec:	0800e3ec 	.word	0x0800e3ec

08001af0 <OpenFile>:

/* 파일 열기(없으면 생성). 항상 append 위치로 이동 */
void OpenFile(char* fileName)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	6078      	str	r0, [r7, #4]
  if (closeFlag == 0)
 8001af8:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <OpenFile+0xb0>)
 8001afa:	f993 3000 	ldrsb.w	r3, [r3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <OpenFile+0x1a>
  {
    printf("A file is already open. Close it first.\r\n");
 8001b02:	4828      	ldr	r0, [pc, #160]	@ (8001ba4 <OpenFile+0xb4>)
 8001b04:	f00a fb68 	bl	800c1d8 <puts>
    return;
 8001b08:	e046      	b.n	8001b98 <OpenFile+0xa8>
  }

  fres = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001b0a:	2213      	movs	r2, #19
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4826      	ldr	r0, [pc, #152]	@ (8001ba8 <OpenFile+0xb8>)
 8001b10:	f008 fbc6 	bl	800a2a0 <f_open>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <OpenFile+0xbc>)
 8001b1a:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <OpenFile+0xbc>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <OpenFile+0x44>
  {
    printf("Failed to open/create '%s' (FRESULT=%d)\r\n", fileName, fres);
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <OpenFile+0xbc>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4820      	ldr	r0, [pc, #128]	@ (8001bb0 <OpenFile+0xc0>)
 8001b2e:	f00a faeb 	bl	800c108 <iprintf>
    return;
 8001b32:	e031      	b.n	8001b98 <OpenFile+0xa8>
  }

  fres = f_lseek(&fil, f_size(&fil)); /* append 보장 */
 8001b34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <OpenFile+0xb8>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481b      	ldr	r0, [pc, #108]	@ (8001ba8 <OpenFile+0xb8>)
 8001b3c:	f009 f913 	bl	800ad66 <f_lseek>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <OpenFile+0xbc>)
 8001b46:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8001b48:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <OpenFile+0xbc>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d009      	beq.n	8001b64 <OpenFile+0x74>
  {
    printf("Seek end failed. (FRESULT=%d)\r\n", fres);
 8001b50:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <OpenFile+0xbc>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4817      	ldr	r0, [pc, #92]	@ (8001bb4 <OpenFile+0xc4>)
 8001b58:	f00a fad6 	bl	800c108 <iprintf>
    f_close(&fil);
 8001b5c:	4812      	ldr	r0, [pc, #72]	@ (8001ba8 <OpenFile+0xb8>)
 8001b5e:	f009 f8d8 	bl	800ad12 <f_close>
    return;
 8001b62:	e019      	b.n	8001b98 <OpenFile+0xa8>
  }

  printf("File '%s' ready. size=%lu bytes\r\n", fileName, (unsigned long)f_size(&fil));
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <OpenFile+0xb8>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4812      	ldr	r0, [pc, #72]	@ (8001bb8 <OpenFile+0xc8>)
 8001b6e:	f00a facb 	bl	800c108 <iprintf>
  oled_drawString(30, 20, "                           ", &font_07x10, 15);
 8001b72:	230f      	movs	r3, #15
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <OpenFile+0xcc>)
 8001b78:	4a11      	ldr	r2, [pc, #68]	@ (8001bc0 <OpenFile+0xd0>)
 8001b7a:	2114      	movs	r1, #20
 8001b7c:	201e      	movs	r0, #30
 8001b7e:	f000 fe29 	bl	80027d4 <oled_drawString>
  oled_drawString(30, 20, "File Ready!!",               &font_07x10, 15);
 8001b82:	230f      	movs	r3, #15
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <OpenFile+0xcc>)
 8001b88:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <OpenFile+0xd4>)
 8001b8a:	2114      	movs	r1, #20
 8001b8c:	201e      	movs	r0, #30
 8001b8e:	f000 fe21 	bl	80027d4 <oled_drawString>
  closeFlag = 0;
 8001b92:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <OpenFile+0xb0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
}
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000001 	.word	0x20000001
 8001ba4:	0800e414 	.word	0x0800e414
 8001ba8:	200036b4 	.word	0x200036b4
 8001bac:	200036b0 	.word	0x200036b0
 8001bb0:	0800e440 	.word	0x0800e440
 8001bb4:	0800e46c 	.word	0x0800e46c
 8001bb8:	0800e48c 	.word	0x0800e48c
 8001bbc:	0800f2b4 	.word	0x0800f2b4
 8001bc0:	0800e4b0 	.word	0x0800e4b0
 8001bc4:	0800e4cc 	.word	0x0800e4cc

08001bc8 <CloseFile>:

/* 열린 파일 닫기 */
void CloseFile(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af02      	add	r7, sp, #8
  fres = f_close(&fil);
 8001bce:	4815      	ldr	r0, [pc, #84]	@ (8001c24 <CloseFile+0x5c>)
 8001bd0:	f009 f89f 	bl	800ad12 <f_close>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <CloseFile+0x60>)
 8001bda:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <CloseFile+0x60>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d113      	bne.n	8001c0c <CloseFile+0x44>
  {
    printf("File closed.\r\n");
 8001be4:	4811      	ldr	r0, [pc, #68]	@ (8001c2c <CloseFile+0x64>)
 8001be6:	f00a faf7 	bl	800c1d8 <puts>
    oled_drawString(30, 20, "                           ", &font_07x10, 15);
 8001bea:	230f      	movs	r3, #15
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <CloseFile+0x68>)
 8001bf0:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <CloseFile+0x6c>)
 8001bf2:	2114      	movs	r1, #20
 8001bf4:	201e      	movs	r0, #30
 8001bf6:	f000 fded 	bl	80027d4 <oled_drawString>
    oled_drawString(30, 20, "File Closed!!",             &font_07x10, 15);
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <CloseFile+0x68>)
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <CloseFile+0x70>)
 8001c02:	2114      	movs	r1, #20
 8001c04:	201e      	movs	r0, #30
 8001c06:	f000 fde5 	bl	80027d4 <oled_drawString>
 8001c0a:	e005      	b.n	8001c18 <CloseFile+0x50>
  }
  else
  {
    printf("File close failed. (FRESULT=%d)\r\n", fres);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <CloseFile+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	480a      	ldr	r0, [pc, #40]	@ (8001c3c <CloseFile+0x74>)
 8001c14:	f00a fa78 	bl	800c108 <iprintf>
  }
  closeFlag = 1;
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <CloseFile+0x78>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200036b4 	.word	0x200036b4
 8001c28:	200036b0 	.word	0x200036b0
 8001c2c:	0800e4dc 	.word	0x0800e4dc
 8001c30:	0800f2b4 	.word	0x0800f2b4
 8001c34:	0800e4b0 	.word	0x0800e4b0
 8001c38:	0800e4ec 	.word	0x0800e4ec
 8001c3c:	0800e4fc 	.word	0x0800e4fc
 8001c40:	20000001 	.word	0x20000001

08001c44 <CheckSize>:

/* SD 용량 확인 (KB 단위) */
void CheckSize(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  fres = f_getfree("", &fre_clust, &pfs);
 8001c4a:	4a24      	ldr	r2, [pc, #144]	@ (8001cdc <CheckSize+0x98>)
 8001c4c:	4924      	ldr	r1, [pc, #144]	@ (8001ce0 <CheckSize+0x9c>)
 8001c4e:	4825      	ldr	r0, [pc, #148]	@ (8001ce4 <CheckSize+0xa0>)
 8001c50:	f009 faad 	bl	800b1ae <f_getfree>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <CheckSize+0xa4>)
 8001c5a:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8001c5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <CheckSize+0xa4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d130      	bne.n	8001cc6 <CheckSize+0x82>
  {
    /* 섹터는 512바이트 → KB 환산은 *0.5 (512/1024) */
    uint32_t freeKB  = (uint32_t)(fre_clust * pfs->csize * 0.5f);
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <CheckSize+0x98>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	895b      	ldrh	r3, [r3, #10]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <CheckSize+0x9c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	607b      	str	r3, [r7, #4]
    uint32_t totalKB = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5f);
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <CheckSize+0x98>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	3b02      	subs	r3, #2
 8001c96:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <CheckSize+0x98>)
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	8952      	ldrh	r2, [r2, #10]
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb4:	ee17 3a90 	vmov	r3, s15
 8001cb8:	603b      	str	r3, [r7, #0]
    printf("Free: %lu KB / Total: %lu KB\r\n",
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	480b      	ldr	r0, [pc, #44]	@ (8001cec <CheckSize+0xa8>)
 8001cc0:	f00a fa22 	bl	800c108 <iprintf>
  }
  else
  {
    printf("Failed to get free space. (FRESULT=%d)\r\n", fres);
  }
}
 8001cc4:	e005      	b.n	8001cd2 <CheckSize+0x8e>
    printf("Failed to get free space. (FRESULT=%d)\r\n", fres);
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <CheckSize+0xa4>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4808      	ldr	r0, [pc, #32]	@ (8001cf0 <CheckSize+0xac>)
 8001cce:	f00a fa1b 	bl	800c108 <iprintf>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200036ac 	.word	0x200036ac
 8001ce0:	20002668 	.word	0x20002668
 8001ce4:	0800e348 	.word	0x0800e348
 8001ce8:	200036b0 	.word	0x200036b0
 8001cec:	0800e520 	.word	0x0800e520
 8001cf0:	0800e540 	.word	0x0800e540

08001cf4 <WriteFile>:


/* 현재 열린 파일 끝에 한 줄을 append */
void WriteFile(char* text)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if (closeFlag)
 8001cfc:	4b27      	ldr	r3, [pc, #156]	@ (8001d9c <WriteFile+0xa8>)
 8001cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <WriteFile+0x1a>
  {
    printf("No file is open. Use: open <filename>\r\n");
 8001d06:	4826      	ldr	r0, [pc, #152]	@ (8001da0 <WriteFile+0xac>)
 8001d08:	f00a fa66 	bl	800c1d8 <puts>
    return;
 8001d0c:	e043      	b.n	8001d96 <WriteFile+0xa2>
  }

  /* 항상 끝으로 이동(append 보장) */
  fres = f_lseek(&fil, f_size(&fil));
 8001d0e:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <WriteFile+0xb0>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4823      	ldr	r0, [pc, #140]	@ (8001da4 <WriteFile+0xb0>)
 8001d16:	f009 f826 	bl	800ad66 <f_lseek>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <WriteFile+0xb4>)
 8001d20:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8001d22:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <WriteFile+0xb4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <WriteFile+0x44>
    printf("Seek end failed. (FRESULT=%d)\r\n", fres);
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <WriteFile+0xb4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	481e      	ldr	r0, [pc, #120]	@ (8001dac <WriteFile+0xb8>)
 8001d32:	f00a f9e9 	bl	800c108 <iprintf>
    return;
 8001d36:	e02e      	b.n	8001d96 <WriteFile+0xa2>
  }

  /* 안전하게 개행을 붙여 한 줄로 기록 */
  int len = snprintf(buffer, sizeof(buffer), "%s\r\n", text);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001db0 <WriteFile+0xbc>)
 8001d3c:	2164      	movs	r1, #100	@ 0x64
 8001d3e:	481d      	ldr	r0, [pc, #116]	@ (8001db4 <WriteFile+0xc0>)
 8001d40:	f00a fa52 	bl	800c1e8 <sniprintf>
 8001d44:	60f8      	str	r0, [r7, #12]
  if (len < 0)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da03      	bge.n	8001d54 <WriteFile+0x60>
  {
    printf("Format error.\r\n");
 8001d4c:	481a      	ldr	r0, [pc, #104]	@ (8001db8 <WriteFile+0xc4>)
 8001d4e:	f00a fa43 	bl	800c1d8 <puts>
    return;
 8001d52:	e020      	b.n	8001d96 <WriteFile+0xa2>
  }

  fres = f_write(&fil, buffer, (UINT)strlen(buffer), &bw);
 8001d54:	4817      	ldr	r0, [pc, #92]	@ (8001db4 <WriteFile+0xc0>)
 8001d56:	f7fe fac3 	bl	80002e0 <strlen>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <WriteFile+0xc8>)
 8001d5e:	4915      	ldr	r1, [pc, #84]	@ (8001db4 <WriteFile+0xc0>)
 8001d60:	4810      	ldr	r0, [pc, #64]	@ (8001da4 <WriteFile+0xb0>)
 8001d62:	f008 fdc4 	bl	800a8ee <f_write>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <WriteFile+0xb4>)
 8001d6c:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <WriteFile+0xb4>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <WriteFile+0x96>
  {
    f_sync(&fil); /* 즉시 저장(전원 차단 대비) */
 8001d76:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <WriteFile+0xb0>)
 8001d78:	f008 ff4d 	bl	800ac16 <f_sync>
    printf("Write OK: %u bytes\r\n", (unsigned)bw);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <WriteFile+0xc8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	480f      	ldr	r0, [pc, #60]	@ (8001dc0 <WriteFile+0xcc>)
 8001d84:	f00a f9c0 	bl	800c108 <iprintf>
 8001d88:	e005      	b.n	8001d96 <WriteFile+0xa2>
  }
  else
  {
    printf("Write failed. (FRESULT=%d)\r\n", fres);
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <WriteFile+0xb4>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <WriteFile+0xd0>)
 8001d92:	f00a f9b9 	bl	800c108 <iprintf>
  }
}
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000001 	.word	0x20000001
 8001da0:	0800e56c 	.word	0x0800e56c
 8001da4:	200036b4 	.word	0x200036b4
 8001da8:	200036b0 	.word	0x200036b0
 8001dac:	0800e46c 	.word	0x0800e46c
 8001db0:	0800e594 	.word	0x0800e594
 8001db4:	2000020c 	.word	0x2000020c
 8001db8:	0800e59c 	.word	0x0800e59c
 8001dbc:	200036a8 	.word	0x200036a8
 8001dc0:	0800e5ac 	.word	0x0800e5ac
 8001dc4:	0800e5c4 	.word	0x0800e5c4

08001dc8 <ReadFile>:

/* 파일 읽기(주의: 데모용으로 최대 buffer 크기까지만 표시) */
void ReadFile(char* fileName)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* 다른 파일이 열려 있으면 닫고 읽기 전용으로 연다 */
  if (closeFlag == 0)
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e8c <ReadFile+0xc4>)
 8001dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <ReadFile+0x16>
  {
	  CloseFile();
 8001dda:	f7ff fef5 	bl	8001bc8 <CloseFile>
  }

  fres = f_open(&fil, fileName, FA_READ);
 8001dde:	2201      	movs	r2, #1
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	482b      	ldr	r0, [pc, #172]	@ (8001e90 <ReadFile+0xc8>)
 8001de4:	f008 fa5c 	bl	800a2a0 <f_open>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <ReadFile+0xcc>)
 8001dee:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8001df0:	4b28      	ldr	r3, [pc, #160]	@ (8001e94 <ReadFile+0xcc>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <ReadFile+0x40>
  {
    printf("Failed to open '%s' for reading. (FRESULT=%d)\r\n", fileName, fres);
 8001df8:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <ReadFile+0xcc>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4825      	ldr	r0, [pc, #148]	@ (8001e98 <ReadFile+0xd0>)
 8001e02:	f00a f981 	bl	800c108 <iprintf>
    return;
 8001e06:	e03e      	b.n	8001e86 <ReadFile+0xbe>
  }

  memset(buffer, 0, sizeof(buffer));
 8001e08:	2264      	movs	r2, #100	@ 0x64
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4823      	ldr	r0, [pc, #140]	@ (8001e9c <ReadFile+0xd4>)
 8001e0e:	f00a faf9 	bl	800c404 <memset>
  fres = f_read(&fil, buffer, sizeof(buffer) - 1, &br);
 8001e12:	4b23      	ldr	r3, [pc, #140]	@ (8001ea0 <ReadFile+0xd8>)
 8001e14:	2263      	movs	r2, #99	@ 0x63
 8001e16:	4921      	ldr	r1, [pc, #132]	@ (8001e9c <ReadFile+0xd4>)
 8001e18:	481d      	ldr	r0, [pc, #116]	@ (8001e90 <ReadFile+0xc8>)
 8001e1a:	f008 fc09 	bl	800a630 <f_read>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <ReadFile+0xcc>)
 8001e24:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8001e26:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <ReadFile+0xcc>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d122      	bne.n	8001e74 <ReadFile+0xac>
  {
    printf("----- FILE: %s -----\r\n", fileName);
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	481c      	ldr	r0, [pc, #112]	@ (8001ea4 <ReadFile+0xdc>)
 8001e32:	f00a f969 	bl	800c108 <iprintf>
    if (br > 0)
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <ReadFile+0xd8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d016      	beq.n	8001e6c <ReadFile+0xa4>
    {
      printf("%s", buffer);
 8001e3e:	4917      	ldr	r1, [pc, #92]	@ (8001e9c <ReadFile+0xd4>)
 8001e40:	4819      	ldr	r0, [pc, #100]	@ (8001ea8 <ReadFile+0xe0>)
 8001e42:	f00a f961 	bl	800c108 <iprintf>
      if (buffer[strlen(buffer) - 1] != '\n')
 8001e46:	4815      	ldr	r0, [pc, #84]	@ (8001e9c <ReadFile+0xd4>)
 8001e48:	f7fe fa4a 	bl	80002e0 <strlen>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <ReadFile+0xd4>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	2b0a      	cmp	r3, #10
 8001e56:	d002      	beq.n	8001e5e <ReadFile+0x96>
    	{
    	  printf("\r\n");
 8001e58:	4814      	ldr	r0, [pc, #80]	@ (8001eac <ReadFile+0xe4>)
 8001e5a:	f00a f9bd 	bl	800c1d8 <puts>
    	}
      printf("----- %u bytes shown (truncated if large) -----\r\n", (unsigned)br);
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <ReadFile+0xd8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4619      	mov	r1, r3
 8001e64:	4812      	ldr	r0, [pc, #72]	@ (8001eb0 <ReadFile+0xe8>)
 8001e66:	f00a f94f 	bl	800c108 <iprintf>
 8001e6a:	e009      	b.n	8001e80 <ReadFile+0xb8>
    }
    else
    {
      printf("(empty)\r\n");
 8001e6c:	4811      	ldr	r0, [pc, #68]	@ (8001eb4 <ReadFile+0xec>)
 8001e6e:	f00a f9b3 	bl	800c1d8 <puts>
 8001e72:	e005      	b.n	8001e80 <ReadFile+0xb8>
    }
  }
  else
  {
    printf("Read failed. (FRESULT=%d)\r\n", fres);
 8001e74:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <ReadFile+0xcc>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480f      	ldr	r0, [pc, #60]	@ (8001eb8 <ReadFile+0xf0>)
 8001e7c:	f00a f944 	bl	800c108 <iprintf>
  }

  f_close(&fil);
 8001e80:	4803      	ldr	r0, [pc, #12]	@ (8001e90 <ReadFile+0xc8>)
 8001e82:	f008 ff46 	bl	800ad12 <f_close>
}
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000001 	.word	0x20000001
 8001e90:	200036b4 	.word	0x200036b4
 8001e94:	200036b0 	.word	0x200036b0
 8001e98:	0800e5e4 	.word	0x0800e5e4
 8001e9c:	2000020c 	.word	0x2000020c
 8001ea0:	200036a4 	.word	0x200036a4
 8001ea4:	0800e614 	.word	0x0800e614
 8001ea8:	0800e62c 	.word	0x0800e62c
 8001eac:	0800e630 	.word	0x0800e630
 8001eb0:	0800e634 	.word	0x0800e634
 8001eb4:	0800e668 	.word	0x0800e668
 8001eb8:	0800e674 	.word	0x0800e674

08001ebc <ProcessCommand>:

/* 한 줄 명령 해석 및 실행 */
void ProcessCommand(char *command)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  printf("Command received: %s\r\n", command);
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	483f      	ldr	r0, [pc, #252]	@ (8001fc4 <ProcessCommand+0x108>)
 8001ec8:	f00a f91e 	bl	800c108 <iprintf>

  if (strcmp(command, "help") == 0)
 8001ecc:	493e      	ldr	r1, [pc, #248]	@ (8001fc8 <ProcessCommand+0x10c>)
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe f9a6 	bl	8000220 <strcmp>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <ProcessCommand+0x24>
  {
    ShowHelp();
 8001eda:	f000 f88b 	bl	8001ff4 <ShowHelp>
    OLED_setCameraMode();
  }
  else {
    printf("Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
  }
}
 8001ede:	e06d      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strcmp(command, "mount") == 0)
 8001ee0:	493a      	ldr	r1, [pc, #232]	@ (8001fcc <ProcessCommand+0x110>)
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe f99c 	bl	8000220 <strcmp>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <ProcessCommand+0x38>
    SDMount();
 8001eee:	f7ff fd7d 	bl	80019ec <SDMount>
}
 8001ef2:	e063      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strcmp(command, "unmount") == 0)
 8001ef4:	4936      	ldr	r1, [pc, #216]	@ (8001fd0 <ProcessCommand+0x114>)
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe f992 	bl	8000220 <strcmp>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <ProcessCommand+0x4c>
    SDUnmount();
 8001f02:	f7ff fdb1 	bl	8001a68 <SDUnmount>
}
 8001f06:	e059      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strncmp(command, "open ", 5) == 0)
 8001f08:	2205      	movs	r2, #5
 8001f0a:	4932      	ldr	r1, [pc, #200]	@ (8001fd4 <ProcessCommand+0x118>)
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f00a fa81 	bl	800c414 <strncmp>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <ProcessCommand+0x68>
    OpenFile(command + 5);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3305      	adds	r3, #5
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fde7 	bl	8001af0 <OpenFile>
}
 8001f22:	e04b      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strcmp(command, "close") == 0)
 8001f24:	492c      	ldr	r1, [pc, #176]	@ (8001fd8 <ProcessCommand+0x11c>)
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe f97a 	bl	8000220 <strcmp>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <ProcessCommand+0x7c>
    CloseFile();
 8001f32:	f7ff fe49 	bl	8001bc8 <CloseFile>
}
 8001f36:	e041      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strncmp(command, "write ", 6) == 0)
 8001f38:	2206      	movs	r2, #6
 8001f3a:	4928      	ldr	r1, [pc, #160]	@ (8001fdc <ProcessCommand+0x120>)
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f00a fa69 	bl	800c414 <strncmp>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <ProcessCommand+0x98>
    WriteFile(command + 6);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3306      	adds	r3, #6
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fed1 	bl	8001cf4 <WriteFile>
}
 8001f52:	e033      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strncmp(command, "read ", 5) == 0)
 8001f54:	2205      	movs	r2, #5
 8001f56:	4922      	ldr	r1, [pc, #136]	@ (8001fe0 <ProcessCommand+0x124>)
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f00a fa5b 	bl	800c414 <strncmp>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <ProcessCommand+0xb4>
    ReadFile(command + 5);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3305      	adds	r3, #5
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff2d 	bl	8001dc8 <ReadFile>
}
 8001f6e:	e025      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strncmp(command, "image ", 6) == 0)
 8001f70:	2206      	movs	r2, #6
 8001f72:	491c      	ldr	r1, [pc, #112]	@ (8001fe4 <ProcessCommand+0x128>)
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f00a fa4d 	bl	800c414 <strncmp>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <ProcessCommand+0xd0>
    DisplayImageFromSD_Enhanced(command + 6);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3306      	adds	r3, #6
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fcd3 	bl	8002930 <DisplayImageFromSD_Enhanced>
}
 8001f8a:	e017      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strcmp(command, "size") == 0)
 8001f8c:	4916      	ldr	r1, [pc, #88]	@ (8001fe8 <ProcessCommand+0x12c>)
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7fe f946 	bl	8000220 <strcmp>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <ProcessCommand+0xe4>
    CheckSize();
 8001f9a:	f7ff fe53 	bl	8001c44 <CheckSize>
}
 8001f9e:	e00d      	b.n	8001fbc <ProcessCommand+0x100>
  else if (strcmp(command, "camera") == 0)
 8001fa0:	4912      	ldr	r1, [pc, #72]	@ (8001fec <ProcessCommand+0x130>)
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe f93c 	bl	8000220 <strcmp>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <ProcessCommand+0xf8>
    OLED_setCameraMode();
 8001fae:	f000 fec9 	bl	8002d44 <OLED_setCameraMode>
}
 8001fb2:	e003      	b.n	8001fbc <ProcessCommand+0x100>
    printf("Unknown command: %s\r\nType 'help' for available commands.\r\n", command);
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	480e      	ldr	r0, [pc, #56]	@ (8001ff0 <ProcessCommand+0x134>)
 8001fb8:	f00a f8a6 	bl	800c108 <iprintf>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	0800e690 	.word	0x0800e690
 8001fc8:	0800e6a8 	.word	0x0800e6a8
 8001fcc:	0800e6b0 	.word	0x0800e6b0
 8001fd0:	0800e6b8 	.word	0x0800e6b8
 8001fd4:	0800e6c0 	.word	0x0800e6c0
 8001fd8:	0800e6c8 	.word	0x0800e6c8
 8001fdc:	0800e6d0 	.word	0x0800e6d0
 8001fe0:	0800e6d8 	.word	0x0800e6d8
 8001fe4:	0800e6e0 	.word	0x0800e6e0
 8001fe8:	0800e6e8 	.word	0x0800e6e8
 8001fec:	0800e6f0 	.word	0x0800e6f0
 8001ff0:	0800e6f8 	.word	0x0800e6f8

08001ff4 <ShowHelp>:

/* 명령 도움말 */
void ShowHelp(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  printf("\r\n=== Available Commands ===\r\n");
 8001ff8:	4812      	ldr	r0, [pc, #72]	@ (8002044 <ShowHelp+0x50>)
 8001ffa:	f00a f8ed 	bl	800c1d8 <puts>
  printf("help               - Show this help\r\n");
 8001ffe:	4812      	ldr	r0, [pc, #72]	@ (8002048 <ShowHelp+0x54>)
 8002000:	f00a f8ea 	bl	800c1d8 <puts>
  printf("mount              - Mount SD card\r\n");
 8002004:	4811      	ldr	r0, [pc, #68]	@ (800204c <ShowHelp+0x58>)
 8002006:	f00a f8e7 	bl	800c1d8 <puts>
  printf("unmount            - Unmount SD card\r\n");
 800200a:	4811      	ldr	r0, [pc, #68]	@ (8002050 <ShowHelp+0x5c>)
 800200c:	f00a f8e4 	bl	800c1d8 <puts>
  printf("open <filename>    - Open (create if not exist) & append mode\r\n");
 8002010:	4810      	ldr	r0, [pc, #64]	@ (8002054 <ShowHelp+0x60>)
 8002012:	f00a f8e1 	bl	800c1d8 <puts>
  printf("close              - Close current file\r\n");
 8002016:	4810      	ldr	r0, [pc, #64]	@ (8002058 <ShowHelp+0x64>)
 8002018:	f00a f8de 	bl	800c1d8 <puts>
  printf("write <text>       - Append one line to current file\r\n");
 800201c:	480f      	ldr	r0, [pc, #60]	@ (800205c <ShowHelp+0x68>)
 800201e:	f00a f8db 	bl	800c1d8 <puts>
  printf("read <filename>    - Read file content (up to buffer size)\r\n");
 8002022:	480f      	ldr	r0, [pc, #60]	@ (8002060 <ShowHelp+0x6c>)
 8002024:	f00a f8d8 	bl	800c1d8 <puts>
  printf("image <filename>   - Display 32bpp BMP on OLED\r\n");
 8002028:	480e      	ldr	r0, [pc, #56]	@ (8002064 <ShowHelp+0x70>)
 800202a:	f00a f8d5 	bl	800c1d8 <puts>
  printf("size               - Show SD free/total space (KB)\r\n");
 800202e:	480e      	ldr	r0, [pc, #56]	@ (8002068 <ShowHelp+0x74>)
 8002030:	f00a f8d2 	bl	800c1d8 <puts>
  printf("camera             - OLED camera mode (if available)\r\n");
 8002034:	480d      	ldr	r0, [pc, #52]	@ (800206c <ShowHelp+0x78>)
 8002036:	f00a f8cf 	bl	800c1d8 <puts>
  printf("==========================\r\n");
 800203a:	480d      	ldr	r0, [pc, #52]	@ (8002070 <ShowHelp+0x7c>)
 800203c:	f00a f8cc 	bl	800c1d8 <puts>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	0800e734 	.word	0x0800e734
 8002048:	0800e754 	.word	0x0800e754
 800204c:	0800e77c 	.word	0x0800e77c
 8002050:	0800e7a0 	.word	0x0800e7a0
 8002054:	0800e7c8 	.word	0x0800e7c8
 8002058:	0800e808 	.word	0x0800e808
 800205c:	0800e834 	.word	0x0800e834
 8002060:	0800e86c 	.word	0x0800e86c
 8002064:	0800e8a8 	.word	0x0800e8a8
 8002068:	0800e8d8 	.word	0x0800e8d8
 800206c:	0800e90c 	.word	0x0800e90c
 8002070:	0800e944 	.word	0x0800e944

08002074 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800207a:	f001 fa12 	bl	80034a2 <HAL_Init>
  SystemClock_Config();
 800207e:	f000 f863 	bl	8002148 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002082:	f7ff fc05 	bl	8001890 <MX_GPIO_Init>
  MX_DMA_Init();
 8002086:	f7fe ff5d 	bl	8000f44 <MX_DMA_Init>
  MX_SPI1_Init();
 800208a:	f000 fe87 	bl	8002d9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800208e:	f001 f933 	bl	80032f8 <MX_USART1_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002092:	f005 fe71 	bl	8007d78 <MX_FATFS_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <main+0x2c>
    Error_Handler();
 800209c:	f000 f8e8 	bl	8002270 <Error_Handler>
  }
  MX_SPI3_Init();
 80020a0:	f000 feba 	bl	8002e18 <MX_SPI3_Init>

  /* USER CODE BEGIN 2 */
  /* OLED 초기화(라이브러리 제공 가정) */
  OLED_init();
 80020a4:	f000 f968 	bl	8002378 <OLED_init>
  OLED_fill(0); /* 화면 클리어 */
 80020a8:	2000      	movs	r0, #0
 80020aa:	f000 fa3f 	bl	800252c <OLED_fill>

  /* UART 1바이트 인터럽트 수신 시작 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&g_rx, 1);
 80020ae:	2201      	movs	r2, #1
 80020b0:	491d      	ldr	r1, [pc, #116]	@ (8002128 <main+0xb4>)
 80020b2:	481e      	ldr	r0, [pc, #120]	@ (800212c <main+0xb8>)
 80020b4:	f003 fe24 	bl	8005d00 <HAL_UART_Receive_IT>

  /* 시작 메시지 */
  printf("\r\n=== SD Card Control System ===\r\n");
 80020b8:	481d      	ldr	r0, [pc, #116]	@ (8002130 <main+0xbc>)
 80020ba:	f00a f88d 	bl	800c1d8 <puts>
  printf("Type 'help' for available commands.\r\n");
 80020be:	481d      	ldr	r0, [pc, #116]	@ (8002134 <main+0xc0>)
 80020c0:	f00a f88a 	bl	800c1d8 <puts>
  printf("Ready> ");
 80020c4:	481c      	ldr	r0, [pc, #112]	@ (8002138 <main+0xc4>)
 80020c6:	f00a f81f 	bl	800c108 <iprintf>

  /* Infinite loop */
  while (1) {

    /* SD 카드 삽입/제거 감지(엣지) */
    uint8_t currentCardState = SD_IsCardDetected();
 80020ca:	f7ff fc7f 	bl	80019cc <SD_IsCardDetected>
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
    if (currentCardState && !previousCardState)
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d009      	beq.n	80020ec <main+0x78>
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <main+0xc8>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <main+0x78>
    {
      HAL_Delay(200); /* 간단한 디바운싱 */
 80020e0:	20c8      	movs	r0, #200	@ 0xc8
 80020e2:	f001 fa4f 	bl	8003584 <HAL_Delay>
      SDMount();
 80020e6:	f7ff fc81 	bl	80019ec <SDMount>
 80020ea:	e008      	b.n	80020fe <main+0x8a>
    }
    else if (!currentCardState && previousCardState)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <main+0x8a>
 80020f2:	4b12      	ldr	r3, [pc, #72]	@ (800213c <main+0xc8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <main+0x8a>
    {
      SDUnmount();
 80020fa:	f7ff fcb5 	bl	8001a68 <SDUnmount>
    }
    previousCardState = currentCardState;
 80020fe:	4a0f      	ldr	r2, [pc, #60]	@ (800213c <main+0xc8>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	7013      	strb	r3, [r2, #0]

    /* 한 줄 명령 처리 */
    if (commandReady)
 8002104:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <main+0xcc>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <main+0xaa>
    {
      ProcessCommand(rxBuffer);
 800210c:	480d      	ldr	r0, [pc, #52]	@ (8002144 <main+0xd0>)
 800210e:	f7ff fed5 	bl	8001ebc <ProcessCommand>
      commandReady = 0;
 8002112:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <main+0xcc>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
      printf("Ready> ");
 8002118:	4807      	ldr	r0, [pc, #28]	@ (8002138 <main+0xc4>)
 800211a:	f009 fff5 	bl	800c108 <iprintf>
    }

    HAL_Delay(10);
 800211e:	200a      	movs	r0, #10
 8002120:	f001 fa30 	bl	8003584 <HAL_Delay>
  while (1) {
 8002124:	e7d1      	b.n	80020ca <main+0x56>
 8002126:	bf00      	nop
 8002128:	200002da 	.word	0x200002da
 800212c:	2000486c 	.word	0x2000486c
 8002130:	0800e960 	.word	0x0800e960
 8002134:	0800e984 	.word	0x0800e984
 8002138:	0800e9ac 	.word	0x0800e9ac
 800213c:	20000270 	.word	0x20000270
 8002140:	200002d9 	.word	0x200002d9
 8002144:	20000274 	.word	0x20000274

08002148 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	@ 0x50
 800214c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	2238      	movs	r2, #56	@ 0x38
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f00a f954 	bl	800c404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800216a:	2000      	movs	r0, #0
 800216c:	f001 ff74 	bl	8004058 <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8002174:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002178:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800217a:	2302      	movs	r3, #2
 800217c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 800217e:	2303      	movs	r3, #3
 8002180:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM       = RCC_PLLM_DIV1;
 8002182:	2301      	movs	r3, #1
 8002184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN       = 40;
 8002186:	2328      	movs	r3, #40	@ 0x28
 8002188:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 800218a:	2302      	movs	r3, #2
 800218c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ       = RCC_PLLQ_DIV2;
 800218e:	2302      	movs	r3, #2
 8002190:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR       = RCC_PLLR_DIV2;
 8002192:	2302      	movs	r3, #2
 8002194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002196:	f107 0318 	add.w	r3, r7, #24
 800219a:	4618      	mov	r0, r3
 800219c:	f002 f810 	bl	80041c0 <HAL_RCC_OscConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <SystemClock_Config+0x62>
    Error_Handler();
 80021a6:	f000 f863 	bl	8002270 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021aa:	230f      	movs	r3, #15
 80021ac:	607b      	str	r3, [r7, #4]
                                   | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80021ae:	2303      	movs	r3, #3
 80021b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2104      	movs	r1, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fb0e 	bl	80047e4 <HAL_RCC_ClockConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <SystemClock_Config+0x8a>
    Error_Handler();
 80021ce:	f000 f84f 	bl	8002270 <Error_Handler>
  }
}
 80021d2:	bf00      	nop
 80021d4:	3750      	adds	r7, #80	@ 0x50
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_UART_RxCpltCallback>:
 * @brief UART 수신 인터럽트 콜백
 *        - 1바이트씩 수신하고 엔터('\r' 또는 '\n')가 오면 한 줄 명령으로 처리
 *        - 에코백 추가(터미널 가독성↑)
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002254 <HAL_UART_RxCpltCallback+0x78>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d12e      	bne.n	800224c <HAL_UART_RxCpltCallback+0x70>
  {
    if (g_rx == '\r' || g_rx == '\n')
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_UART_RxCpltCallback+0x7c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b0d      	cmp	r3, #13
 80021f6:	d004      	beq.n	8002202 <HAL_UART_RxCpltCallback+0x26>
 80021f8:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <HAL_UART_RxCpltCallback+0x7c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b0a      	cmp	r3, #10
 8002200:	d10f      	bne.n	8002222 <HAL_UART_RxCpltCallback+0x46>
    {
      rxBuffer[rxIndex] = '\0';
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <HAL_UART_RxCpltCallback+0x80>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_UART_RxCpltCallback+0x84>)
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]
      commandReady = 1;
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_UART_RxCpltCallback+0x88>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
      rxIndex = 0;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <HAL_UART_RxCpltCallback+0x80>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
      printf("\r\n");
 800221a:	4813      	ldr	r0, [pc, #76]	@ (8002268 <HAL_UART_RxCpltCallback+0x8c>)
 800221c:	f009 ffdc 	bl	800c1d8 <puts>
 8002220:	e00f      	b.n	8002242 <HAL_UART_RxCpltCallback+0x66>
    }
    else if (rxIndex < sizeof(rxBuffer) - 1)
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <HAL_UART_RxCpltCallback+0x80>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b62      	cmp	r3, #98	@ 0x62
 8002228:	d80b      	bhi.n	8002242 <HAL_UART_RxCpltCallback+0x66>
    {
      rxBuffer[rxIndex++] = g_rx;
 800222a:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <HAL_UART_RxCpltCallback+0x80>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	b2d1      	uxtb	r1, r2
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <HAL_UART_RxCpltCallback+0x80>)
 8002234:	7011      	strb	r1, [r2, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <HAL_UART_RxCpltCallback+0x7c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b2d9      	uxtb	r1, r3
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <HAL_UART_RxCpltCallback+0x84>)
 8002240:	5499      	strb	r1, [r3, r2]
      // HAL_UART_Transmit(&huart1, (uint8_t*)&g_rx, 1, 10); // 이 줄 제거 또는 주석
    }
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&g_rx, 1);
 8002242:	2201      	movs	r2, #1
 8002244:	4904      	ldr	r1, [pc, #16]	@ (8002258 <HAL_UART_RxCpltCallback+0x7c>)
 8002246:	4809      	ldr	r0, [pc, #36]	@ (800226c <HAL_UART_RxCpltCallback+0x90>)
 8002248:	f003 fd5a 	bl	8005d00 <HAL_UART_Receive_IT>
  }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40013800 	.word	0x40013800
 8002258:	200002da 	.word	0x200002da
 800225c:	200002d8 	.word	0x200002d8
 8002260:	20000274 	.word	0x20000274
 8002264:	200002d9 	.word	0x200002d9
 8002268:	0800e630 	.word	0x0800e630
 800226c:	2000486c 	.word	0x2000486c

08002270 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  __disable_irq();
  while (1) {
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <Error_Handler+0x8>

0800227c <OLED_write_cmd>:



// OLED 명령어 모드!
static void OLED_write_cmd(uint8_t cmd)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  DC_CMD();     // DC핀을 LOW로 설정 (명령어 모드)
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800228c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002290:	f001 feca 	bl	8004028 <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 8002294:	2200      	movs	r2, #0
 8002296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800229a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229e:	f001 fec3 	bl	8004028 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);  // SPI로 명령어 전송
 80022a2:	1df9      	adds	r1, r7, #7
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
 80022a8:	2201      	movs	r2, #1
 80022aa:	4807      	ldr	r0, [pc, #28]	@ (80022c8 <OLED_write_cmd+0x4c>)
 80022ac:	f002 ff51 	bl	8005152 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 80022b0:	2201      	movs	r2, #1
 80022b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ba:	f001 feb5 	bl	8004028 <HAL_GPIO_WritePin>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200046e4 	.word	0x200046e4

080022cc <OLED_write_data>:

// OLED 데이터 모드!
static void OLED_write_data(const uint8_t* p, uint16_t len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
  DC_DATA();    // DC핀을 HIGH로 설정 (데이터 모드)
 80022d8:	2201      	movs	r2, #1
 80022da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e2:	f001 fea1 	bl	8004028 <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f0:	f001 fe9a 	bl	8004028 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)p, len, HAL_MAX_DELAY);  // SPI로 데이터 전송
 80022f4:	887a      	ldrh	r2, [r7, #2]
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4806      	ldr	r0, [pc, #24]	@ (8002318 <OLED_write_data+0x4c>)
 80022fe:	f002 ff28 	bl	8005152 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800230c:	f001 fe8c 	bl	8004028 <HAL_GPIO_WritePin>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200046e4 	.word	0x200046e4

0800231c <OLED_set_window>:

// 화면의 특정 영역을 선택하는 함수 (그리기 영역 설정)
static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4604      	mov	r4, r0
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4623      	mov	r3, r4
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	4603      	mov	r3, r0
 8002330:	71bb      	strb	r3, [r7, #6]
 8002332:	460b      	mov	r3, r1
 8002334:	717b      	strb	r3, [r7, #5]
 8002336:	4613      	mov	r3, r2
 8002338:	713b      	strb	r3, [r7, #4]
  // 열(가로) 범위 설정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 800233a:	2015      	movs	r0, #21
 800233c:	f7ff ff9e 	bl	800227c <OLED_write_cmd>
  uint8_t col[2] = { col_start, col_end };
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	733b      	strb	r3, [r7, #12]
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2102      	movs	r1, #2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ffbc 	bl	80022cc <OLED_write_data>

  // 행(세로) 범위 설정
  OLED_write_cmd(OLED_SETROWADDR);
 8002354:	2075      	movs	r0, #117	@ 0x75
 8002356:	f7ff ff91 	bl	800227c <OLED_write_cmd>
  uint8_t row[2] = { row_start, row_end };
 800235a:	797b      	ldrb	r3, [r7, #5]
 800235c:	723b      	strb	r3, [r7, #8]
 800235e:	793b      	ldrb	r3, [r7, #4]
 8002360:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	2102      	movs	r1, #2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ffaf 	bl	80022cc <OLED_write_data>
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bd90      	pop	{r4, r7, pc}
	...

08002378 <OLED_init>:


/* OLED 디스플레이를 초기화하는 함수 */
/* OLED 디스플레이를 초기화하는 함수 (플리커 방지 버전) */
void OLED_init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
  RST_L();
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002384:	4867      	ldr	r0, [pc, #412]	@ (8002524 <OLED_init+0x1ac>)
 8002386:	f001 fe4f 	bl	8004028 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800238a:	200a      	movs	r0, #10
 800238c:	f001 f8fa 	bl	8003584 <HAL_Delay>
  RST_H();
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002396:	4863      	ldr	r0, [pc, #396]	@ (8002524 <OLED_init+0x1ac>)
 8002398:	f001 fe46 	bl	8004028 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800239c:	200a      	movs	r0, #10
 800239e:	f001 f8f1 	bl	8003584 <HAL_Delay>

  OLED_write_cmd(OLED_DISPLAYOFF);
 80023a2:	20ae      	movs	r0, #174	@ 0xae
 80023a4:	f7ff ff6a 	bl	800227c <OLED_write_cmd>

  // 명령어 락 설정 - 더 안정적인 값
  OLED_write_cmd(OLED_SETCOMMANDLOCK);
 80023a8:	20fd      	movs	r0, #253	@ 0xfd
 80023aa:	f7ff ff67 	bl	800227c <OLED_write_cmd>
  d = 0x12;  // 0x80 대신 0x12 사용 (표준값)
 80023ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002528 <OLED_init+0x1b0>)
 80023b0:	2212      	movs	r2, #18
 80023b2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80023b4:	2101      	movs	r1, #1
 80023b6:	485c      	ldr	r0, [pc, #368]	@ (8002528 <OLED_init+0x1b0>)
 80023b8:	f7ff ff88 	bl	80022cc <OLED_write_data>

  // 클록 디바이더 - 플리커 방지를 위한 핵심 설정
  OLED_write_cmd(OLED_SETCLOCKDIVIDER);
 80023bc:	20b3      	movs	r0, #179	@ 0xb3
 80023be:	f7ff ff5d 	bl	800227c <OLED_write_cmd>
  d = 0x80;  // 0x91 대신 0x80 사용 (더 느린 클록으로 플리커 감소)
 80023c2:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <OLED_init+0x1b0>)
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80023c8:	2101      	movs	r1, #1
 80023ca:	4857      	ldr	r0, [pc, #348]	@ (8002528 <OLED_init+0x1b0>)
 80023cc:	f7ff ff7e 	bl	80022cc <OLED_write_data>

  OLED_write_cmd(OLED_SETMUXRATIO);
 80023d0:	20ca      	movs	r0, #202	@ 0xca
 80023d2:	f7ff ff53 	bl	800227c <OLED_write_cmd>
  d = 0x3F;
 80023d6:	4b54      	ldr	r3, [pc, #336]	@ (8002528 <OLED_init+0x1b0>)
 80023d8:	223f      	movs	r2, #63	@ 0x3f
 80023da:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80023dc:	2101      	movs	r1, #1
 80023de:	4852      	ldr	r0, [pc, #328]	@ (8002528 <OLED_init+0x1b0>)
 80023e0:	f7ff ff74 	bl	80022cc <OLED_write_data>

  OLED_write_cmd(OLED_SETDISPLAYOFFSET);
 80023e4:	20a2      	movs	r0, #162	@ 0xa2
 80023e6:	f7ff ff49 	bl	800227c <OLED_write_cmd>
  d = 0x00;
 80023ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002528 <OLED_init+0x1b0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80023f0:	2101      	movs	r1, #1
 80023f2:	484d      	ldr	r0, [pc, #308]	@ (8002528 <OLED_init+0x1b0>)
 80023f4:	f7ff ff6a 	bl	80022cc <OLED_write_data>

  OLED_write_cmd(OLED_SETSTARTLINE);
 80023f8:	20a1      	movs	r0, #161	@ 0xa1
 80023fa:	f7ff ff3f 	bl	800227c <OLED_write_cmd>
  d = 0x00;
 80023fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002528 <OLED_init+0x1b0>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002404:	2101      	movs	r1, #1
 8002406:	4848      	ldr	r0, [pc, #288]	@ (8002528 <OLED_init+0x1b0>)
 8002408:	f7ff ff60 	bl	80022cc <OLED_write_data>

  OLED_write_cmd(OLED_SETREMAP);
 800240c:	20a0      	movs	r0, #160	@ 0xa0
 800240e:	f7ff ff35 	bl	800227c <OLED_write_cmd>
  {
    uint8_t remap[2] = {0x06, 0x11};
 8002412:	f241 1306 	movw	r3, #4358	@ 0x1106
 8002416:	81bb      	strh	r3, [r7, #12]
    OLED_write_data(remap, 2);
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff54 	bl	80022cc <OLED_write_data>
  }

  OLED_write_cmd(OLED_SETGPIO);
 8002424:	20b5      	movs	r0, #181	@ 0xb5
 8002426:	f7ff ff29 	bl	800227c <OLED_write_cmd>
  d = 0x00;
 800242a:	4b3f      	ldr	r3, [pc, #252]	@ (8002528 <OLED_init+0x1b0>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002430:	2101      	movs	r1, #1
 8002432:	483d      	ldr	r0, [pc, #244]	@ (8002528 <OLED_init+0x1b0>)
 8002434:	f7ff ff4a 	bl	80022cc <OLED_write_data>

  OLED_write_cmd(OLED_FUNCTIONSELECT);
 8002438:	20ab      	movs	r0, #171	@ 0xab
 800243a:	f7ff ff1f 	bl	800227c <OLED_write_cmd>
  d = 0x01;
 800243e:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <OLED_init+0x1b0>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002444:	2101      	movs	r1, #1
 8002446:	4838      	ldr	r0, [pc, #224]	@ (8002528 <OLED_init+0x1b0>)
 8002448:	f7ff ff40 	bl	80022cc <OLED_write_data>

  // 디스플레이 인핸스 A - 플리커 방지 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 800244c:	20b4      	movs	r0, #180	@ 0xb4
 800244e:	f7ff ff15 	bl	800227c <OLED_write_cmd>
  {
    uint8_t enhA[2] = {0xA0, 0xFD};  // 0xB5 대신 0xFD 사용 (더 안정적)
 8002452:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 8002456:	813b      	strh	r3, [r7, #8]
    OLED_write_data(enhA, 2);
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff34 	bl	80022cc <OLED_write_data>
  }

  // 대비 설정 - 조금 낮춤
  OLED_write_cmd(OLED_SETCONTRAST);
 8002464:	20c1      	movs	r0, #193	@ 0xc1
 8002466:	f7ff ff09 	bl	800227c <OLED_write_cmd>
  d = 0xFF;  // 0xFF 대신 0xDF 사용 (과도한 밝기로 인한 플리커 방지)
 800246a:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <OLED_init+0x1b0>)
 800246c:	22ff      	movs	r2, #255	@ 0xff
 800246e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002470:	2101      	movs	r1, #1
 8002472:	482d      	ldr	r0, [pc, #180]	@ (8002528 <OLED_init+0x1b0>)
 8002474:	f7ff ff2a 	bl	80022cc <OLED_write_data>

  // 마스터 전류 - 조금 낮춤
  OLED_write_cmd(OLED_MASTERCURRENT);
 8002478:	20c7      	movs	r0, #199	@ 0xc7
 800247a:	f7ff feff 	bl	800227c <OLED_write_cmd>
  d = 0x0F;  // 0x0F 대신 0x0C 사용 (전류 감소로 플리커 방지)
 800247e:	4b2a      	ldr	r3, [pc, #168]	@ (8002528 <OLED_init+0x1b0>)
 8002480:	220f      	movs	r2, #15
 8002482:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002484:	2101      	movs	r1, #1
 8002486:	4828      	ldr	r0, [pc, #160]	@ (8002528 <OLED_init+0x1b0>)
 8002488:	f7ff ff20 	bl	80022cc <OLED_write_data>

  OLED_write_cmd(OLED_DEFAULTGRAYSCALE);
 800248c:	20b9      	movs	r0, #185	@ 0xb9
 800248e:	f7ff fef5 	bl	800227c <OLED_write_cmd>

  // 위상 길이 - 플리커 방지를 위한 핵심 설정
  OLED_write_cmd(OLED_SETPHASELENGTH);
 8002492:	20b1      	movs	r0, #177	@ 0xb1
 8002494:	f7ff fef2 	bl	800227c <OLED_write_cmd>
  d = 0xC8;  // 0xE2 대신 0xC8 사용 (더 짧은 위상으로 플리커 감소)
 8002498:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <OLED_init+0x1b0>)
 800249a:	22c8      	movs	r2, #200	@ 0xc8
 800249c:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800249e:	2101      	movs	r1, #1
 80024a0:	4821      	ldr	r0, [pc, #132]	@ (8002528 <OLED_init+0x1b0>)
 80024a2:	f7ff ff13 	bl	80022cc <OLED_write_data>

  // 디스플레이 인핸스 B - 플리커 방지 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_B);
 80024a6:	20d1      	movs	r0, #209	@ 0xd1
 80024a8:	f7ff fee8 	bl	800227c <OLED_write_cmd>
  {
    uint8_t enhB[2] = {0x20, 0x00};  // {0x82, 0x20} 대신 더 보수적인 값
 80024ac:	2320      	movs	r3, #32
 80024ae:	80bb      	strh	r3, [r7, #4]
    OLED_write_data(enhB, 2);
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff09 	bl	80022cc <OLED_write_data>
  }

  // 프리차지 전압 - 낮춤
  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE);
 80024ba:	20bb      	movs	r0, #187	@ 0xbb
 80024bc:	f7ff fede 	bl	800227c <OLED_write_cmd>
  d = 0x17;  // 0x1F 대신 0x17 사용
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <OLED_init+0x1b0>)
 80024c2:	2217      	movs	r2, #23
 80024c4:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80024c6:	2101      	movs	r1, #1
 80024c8:	4817      	ldr	r0, [pc, #92]	@ (8002528 <OLED_init+0x1b0>)
 80024ca:	f7ff feff 	bl	80022cc <OLED_write_data>

  // 세컨드 프리차지 - 길게 설정
  OLED_write_cmd(OLED_SETSECONDPRECHARGE);
 80024ce:	20b6      	movs	r0, #182	@ 0xb6
 80024d0:	f7ff fed4 	bl	800227c <OLED_write_cmd>
  d = 0x0F;  // 0x08 대신 0x0F 사용 (더 긴 프리차지)
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <OLED_init+0x1b0>)
 80024d6:	220f      	movs	r2, #15
 80024d8:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80024da:	2101      	movs	r1, #1
 80024dc:	4812      	ldr	r0, [pc, #72]	@ (8002528 <OLED_init+0x1b0>)
 80024de:	f7ff fef5 	bl	80022cc <OLED_write_data>

  // VCOMH 설정 - 조정
  OLED_write_cmd(OLED_SETVCOMH);
 80024e2:	20be      	movs	r0, #190	@ 0xbe
 80024e4:	f7ff feca 	bl	800227c <OLED_write_cmd>
  d = 0x05;  // 0x07 대신 0x05 사용
 80024e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <OLED_init+0x1b0>)
 80024ea:	2205      	movs	r2, #5
 80024ec:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	480d      	ldr	r0, [pc, #52]	@ (8002528 <OLED_init+0x1b0>)
 80024f2:	f7ff feeb 	bl	80022cc <OLED_write_data>

  OLED_write_cmd(OLED_NORMALDISPLAY);
 80024f6:	20a6      	movs	r0, #166	@ 0xa6
 80024f8:	f7ff fec0 	bl	800227c <OLED_write_cmd>
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);
 80024fc:	20a9      	movs	r0, #169	@ 0xa9
 80024fe:	f7ff febd 	bl	800227c <OLED_write_cmd>

  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8002502:	233f      	movs	r3, #63	@ 0x3f
 8002504:	2200      	movs	r2, #0
 8002506:	215b      	movs	r1, #91	@ 0x5b
 8002508:	201c      	movs	r0, #28
 800250a:	f7ff ff07 	bl	800231c <OLED_set_window>

  OLED_write_cmd(OLED_DISPLAYON);
 800250e:	20af      	movs	r0, #175	@ 0xaf
 8002510:	f7ff feb4 	bl	800227c <OLED_write_cmd>
  HAL_Delay(100);  // 50ms 대신 100ms로 더 긴 안정화 시간
 8002514:	2064      	movs	r0, #100	@ 0x64
 8002516:	f001 f835 	bl	8003584 <HAL_Delay>
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	48000400 	.word	0x48000400
 8002528:	200002db 	.word	0x200002db

0800252c <OLED_fill>:


/* 화면 전체를 하나의 색으로 채우는 함수 */
void OLED_fill(uint8_t gray)  // gray: 0(검정)~15(흰색)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0a4      	sub	sp, #144	@ 0x90
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]

  uint8_t b = (gray << 4) | (gray & 0x0F);
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	b25a      	sxtb	r2, r3
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	b25b      	sxtb	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	b25b      	sxtb	r3, r3
 800254c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t line[OLED_W/2];
  memset(line, b, sizeof(line));
 8002550:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	4618      	mov	r0, r3
 800255c:	f009 ff52 	bl	800c404 <memset>

  // 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8002560:	233f      	movs	r3, #63	@ 0x3f
 8002562:	2200      	movs	r2, #0
 8002564:	215b      	movs	r1, #91	@ 0x5b
 8002566:	201c      	movs	r0, #28
 8002568:	f7ff fed8 	bl	800231c <OLED_set_window>
  OLED_write_cmd(OLED_WRITERAM);
 800256c:	205c      	movs	r0, #92	@ 0x5c
 800256e:	f7ff fe85 	bl	800227c <OLED_write_cmd>

  // 64줄을 반복해서 같은 데이터 전송
  for (int y = 0; y < OLED_H; y++) {
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002578:	e00a      	b.n	8002590 <OLED_fill+0x64>
    OLED_write_data(line, sizeof(line));
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	2180      	movs	r1, #128	@ 0x80
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fea3 	bl	80022cc <OLED_write_data>
  for (int y = 0; y < OLED_H; y++) {
 8002586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800258a:	3301      	adds	r3, #1
 800258c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002594:	2b3f      	cmp	r3, #63	@ 0x3f
 8002596:	ddf0      	ble.n	800257a <OLED_fill+0x4e>
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3790      	adds	r7, #144	@ 0x90
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <colbyte_from_x>:

/* ======== 좌표 변환 함수들 ======== */

/* 픽셀의 x좌표를 OLED의 column 바이트 주소로 변환 */
static uint8_t colbyte_from_x(int x)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]

  return OLED_COL_START + (x >> 1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	105b      	asrs	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	331c      	adds	r3, #28
 80025b2:	b2db      	uxtb	r3, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <rowaddr_from_y>:

/* 픽셀의 y좌표를 OLED의 row 주소로 변환 */
static uint8_t rowaddr_from_y(int y)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	b2db      	uxtb	r3, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <oled_drawChar>:

/* ======== 문자 그리기 함수들 ======== */

/* 하나의 문자를 화면에 그리는 함수 */
void oled_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0ae      	sub	sp, #184	@ 0xb8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]

  if (ch < 32 || ch > 126)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	f240 80ea 	bls.w	80027c4 <oled_drawChar+0x1ec>
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80025f4:	f200 80e6 	bhi.w	80027c4 <oled_drawChar+0x1ec>
	  {
	  	  return;
	  }

  if (gray > 15)
 80025f8:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 80025fc:	2b0f      	cmp	r3, #15
 80025fe:	d902      	bls.n	8002606 <oled_drawChar+0x2e>
	  {
	  	  gray = 15;
 8002600:	230f      	movs	r3, #15
 8002602:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
	  }


  if (x < 0 || (x + font->width) > OLED_W)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f2c0 80dd 	blt.w	80027c8 <oled_drawChar+0x1f0>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800261c:	f300 80d4 	bgt.w	80027c8 <oled_drawChar+0x1f0>
	  {
	  	  return;
	  }

  if (y < 0 || (y + font->height) > OLED_H)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f2c0 80d2 	blt.w	80027cc <oled_drawChar+0x1f4>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4413      	add	r3, r2
 8002632:	2b40      	cmp	r3, #64	@ 0x40
 8002634:	f300 80ca 	bgt.w	80027cc <oled_drawChar+0x1f4>
	  {
	  	  return;
	  }


  const int stride = font->height;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start  = (ch - 32) * stride;
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f1a3 0220 	sub.w	r2, r3, #32
 8002646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	0fda      	lsrs	r2, r3, #31
 800265a:	4413      	add	r3, r2
 800265c:	105b      	asrs	r3, r3, #1
 800265e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W/2];

  for (int row = 0; row < font->height; row++)
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002668:	e0a3      	b.n	80027b2 <oled_drawChar+0x1da>
  {

    uint16_t mask = font->data[start + row];
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002676:	440b      	add	r3, r1
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    memset(linebuf, 0x00, bytes_per_row);
 8002682:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f009 feb9 	bl	800c404 <memset>

    for (int col = 0; col < font->width; col++)
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002698:	e04f      	b.n	800273a <oled_drawChar+0x162>
    {
      int byte_idx = (col >> 1);
 800269a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800269e:	105b      	asrs	r3, r3, #1
 80026a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0);
 80026a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      if (mask & (0x8000 >> col))
 80026ba:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 80026be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026c6:	fa41 f303 	asr.w	r3, r1, r3
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02f      	beq.n	8002730 <oled_drawChar+0x158>
      {
        if (left_nibble)
 80026d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d015      	beq.n	8002704 <oled_drawChar+0x12c>
          linebuf[byte_idx] |= (gray << 4);
 80026d8:	f107 0214 	add.w	r2, r7, #20
 80026dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b25a      	sxtb	r2, r3
 80026e6:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b25b      	sxtb	r3, r3
 80026f2:	b2d9      	uxtb	r1, r3
 80026f4:	f107 0214 	add.w	r2, r7, #20
 80026f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026fc:	4413      	add	r3, r2
 80026fe:	460a      	mov	r2, r1
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e015      	b.n	8002730 <oled_drawChar+0x158>
        else{
        		linebuf[byte_idx] |= (gray & 0x0F);
 8002704:	f107 0214 	add.w	r2, r7, #20
 8002708:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800270c:	4413      	add	r3, r2
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b25a      	sxtb	r2, r3
 8002712:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	b25b      	sxtb	r3, r3
 800271c:	4313      	orrs	r3, r2
 800271e:	b25b      	sxtb	r3, r3
 8002720:	b2d9      	uxtb	r1, r3
 8002722:	f107 0214 	add.w	r2, r7, #20
 8002726:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800272a:	4413      	add	r3, r2
 800272c:	460a      	mov	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8002730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002734:	3301      	adds	r3, #1
 8002736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002744:	4293      	cmp	r3, r2
 8002746:	dba8      	blt.n	800269a <oled_drawChar+0xc2>
        	}
      }
    }

    uint8_t col_start = colbyte_from_x(x);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ff2a 	bl	80025a2 <colbyte_from_x>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end   = col_start + bytes_per_row - 1;
 8002754:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002758:	b2da      	uxtb	r2, r3
 800275a:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 800275e:	4413      	add	r3, r2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr  = rowaddr_from_y(y + row);
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800276e:	4413      	add	r3, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff25 	bl	80025c0 <rowaddr_from_y>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr);
 800277c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002780:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8002784:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8002788:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 800278c:	f7ff fdc6 	bl	800231c <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);
 8002790:	205c      	movs	r0, #92	@ 0x5c
 8002792:	f7ff fd73 	bl	800227c <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);
 8002796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800279a:	b29a      	uxth	r2, r3
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fd92 	bl	80022cc <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 80027a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027ac:	3301      	adds	r3, #1
 80027ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027bc:	4293      	cmp	r3, r2
 80027be:	f6ff af54 	blt.w	800266a <oled_drawChar+0x92>
 80027c2:	e004      	b.n	80027ce <oled_drawChar+0x1f6>
	  	  return;
 80027c4:	bf00      	nop
 80027c6:	e002      	b.n	80027ce <oled_drawChar+0x1f6>
	  	  return;
 80027c8:	bf00      	nop
 80027ca:	e000      	b.n	80027ce <oled_drawChar+0x1f6>
	  	  return;
 80027cc:	bf00      	nop
  }
}
 80027ce:	37b8      	adds	r7, #184	@ 0xb8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <oled_drawString>:

/* 문자열을 화면에 그리는 함수 */
void oled_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  int cx = x, cy = y;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	613b      	str	r3, [r7, #16]

  while (*str) {
 80027ea:	e020      	b.n	800282e <oled_drawString+0x5a>
    if (*str == '\n')
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b0a      	cmp	r3, #10
 80027f2:	d108      	bne.n	8002806 <oled_drawString+0x32>
    {
      cy += font->height + 1;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	3301      	adds	r3, #1
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
      cx = x;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e010      	b.n	8002828 <oled_drawString+0x54>
    }

    else if (*str != '\r')
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b0d      	cmp	r3, #13
 800280c:	d00c      	beq.n	8002828 <oled_drawString+0x54>
    {
      oled_drawChar(cx, cy, *str, font, gray);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6939      	ldr	r1, [r7, #16]
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7ff fedb 	bl	80025d8 <oled_drawChar>
      cx += 4;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3304      	adds	r3, #4
 8002826:	617b      	str	r3, [r7, #20]
    }
    str++;  // 다음 문자로 이동
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3301      	adds	r3, #1
 800282c:	607b      	str	r3, [r7, #4]
  while (*str) {
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1da      	bne.n	80027ec <oled_drawString+0x18>
  }
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <oled_setPixelInBuffer>:
    oled_drawBitmap(bmpData, width, height, startX, startY);
}


void oled_setPixelInBuffer(int x, int y, uint8_t gray)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	71fb      	strb	r3, [r7, #7]
    if (x < 0 || x >= OLED_W || y < 0 || y >= OLED_H) {
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db45      	blt.n	80028e0 <oled_setPixelInBuffer+0xa0>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2bff      	cmp	r3, #255	@ 0xff
 8002858:	dc42      	bgt.n	80028e0 <oled_setPixelInBuffer+0xa0>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db3f      	blt.n	80028e0 <oled_setPixelInBuffer+0xa0>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b3f      	cmp	r3, #63	@ 0x3f
 8002864:	dc3c      	bgt.n	80028e0 <oled_setPixelInBuffer+0xa0>
        return;
    }

    if (gray > 15) {
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d901      	bls.n	8002870 <oled_setPixelInBuffer+0x30>
        gray = 15;
 800286c:	230f      	movs	r3, #15
 800286e:	71fb      	strb	r3, [r7, #7]
    }

    int bufferIndex = y * (OLED_W/2) + (x/2);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	01da      	lsls	r2, r3, #7
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0fd9      	lsrs	r1, r3, #31
 8002878:	440b      	add	r3, r1
 800287a:	105b      	asrs	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

    if (x & 1) {
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d015      	beq.n	80028b6 <oled_setPixelInBuffer+0x76>
        // 홀수 x: 하위 니블
        frameBuffer[bufferIndex] = (frameBuffer[bufferIndex] & 0xF0) | (gray & 0x0F);
 800288a:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <oled_setPixelInBuffer+0xac>)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4413      	add	r3, r2
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f023 030f 	bic.w	r3, r3, #15
 8002898:	b25a      	sxtb	r2, r3
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	b2d9      	uxtb	r1, r3
 80028aa:	4a10      	ldr	r2, [pc, #64]	@ (80028ec <oled_setPixelInBuffer+0xac>)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	4413      	add	r3, r2
 80028b0:	460a      	mov	r2, r1
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e015      	b.n	80028e2 <oled_setPixelInBuffer+0xa2>
    } else {
        // 짝수 x: 상위 니블
        frameBuffer[bufferIndex] = (frameBuffer[bufferIndex] & 0x0F) | (gray << 4);
 80028b6:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <oled_setPixelInBuffer+0xac>)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	b25a      	sxtb	r2, r3
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	b2d9      	uxtb	r1, r3
 80028d4:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <oled_setPixelInBuffer+0xac>)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4413      	add	r3, r2
 80028da:	460a      	mov	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e000      	b.n	80028e2 <oled_setPixelInBuffer+0xa2>
        return;
 80028e0:	bf00      	nop
    }
}
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	200002dc 	.word	0x200002dc

080028f0 <oled_updateDisplay>:

void oled_updateDisplay(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
    OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80028f4:	233f      	movs	r3, #63	@ 0x3f
 80028f6:	2200      	movs	r2, #0
 80028f8:	215b      	movs	r1, #91	@ 0x5b
 80028fa:	201c      	movs	r0, #28
 80028fc:	f7ff fd0e 	bl	800231c <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);
 8002900:	205c      	movs	r0, #92	@ 0x5c
 8002902:	f7ff fcbb 	bl	800227c <OLED_write_cmd>
    OLED_write_data(frameBuffer, sizeof(frameBuffer));
 8002906:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800290a:	4802      	ldr	r0, [pc, #8]	@ (8002914 <oled_updateDisplay+0x24>)
 800290c:	f7ff fcde 	bl	80022cc <OLED_write_data>
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200002dc 	.word	0x200002dc

08002918 <oled_clearBuffer>:

void oled_clearBuffer(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0x00, sizeof(frameBuffer));
 800291c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002920:	2100      	movs	r1, #0
 8002922:	4802      	ldr	r0, [pc, #8]	@ (800292c <oled_clearBuffer+0x14>)
 8002924:	f009 fd6e 	bl	800c404 <memset>
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200002dc 	.word	0x200002dc

08002930 <DisplayImageFromSD_Enhanced>:


// SD카드에서 BMP 파일을 읽어 OLED에 출력하는 함수
void DisplayImageFromSD_Enhanced(char *fileName)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0a8      	sub	sp, #160	@ 0xa0
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
    if (closeFlag == 0)
 8002938:	4ba5      	ldr	r3, [pc, #660]	@ (8002bd0 <DisplayImageFromSD_Enhanced+0x2a0>)
 800293a:	f993 3000 	ldrsb.w	r3, [r3]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <DisplayImageFromSD_Enhanced+0x16>
    {
        CloseFile();
 8002942:	f7ff f941 	bl	8001bc8 <CloseFile>
    }

    fres = f_open(&fil, fileName, FA_READ);
 8002946:	2201      	movs	r2, #1
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	48a2      	ldr	r0, [pc, #648]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 800294c:	f007 fca8 	bl	800a2a0 <f_open>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	4ba0      	ldr	r3, [pc, #640]	@ (8002bd8 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002956:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK)
 8002958:	4b9f      	ldr	r3, [pc, #636]	@ (8002bd8 <DisplayImageFromSD_Enhanced+0x2a8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <DisplayImageFromSD_Enhanced+0x3a>
    {
        printf("Failed to open image file '%s'!\r\n", fileName);
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	489e      	ldr	r0, [pc, #632]	@ (8002bdc <DisplayImageFromSD_Enhanced+0x2ac>)
 8002964:	f009 fbd0 	bl	800c108 <iprintf>
        return;
 8002968:	e1e3      	b.n	8002d32 <DisplayImageFromSD_Enhanced+0x402>
    }

    // BMP 헤더 읽기 (기존과 동일)
    uint8_t bmpHeader[54];
    fres = f_read(&fil, bmpHeader, 54, &br);
 800296a:	f107 010c 	add.w	r1, r7, #12
 800296e:	4b9c      	ldr	r3, [pc, #624]	@ (8002be0 <DisplayImageFromSD_Enhanced+0x2b0>)
 8002970:	2236      	movs	r2, #54	@ 0x36
 8002972:	4898      	ldr	r0, [pc, #608]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002974:	f007 fe5c 	bl	800a630 <f_read>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	4b96      	ldr	r3, [pc, #600]	@ (8002bd8 <DisplayImageFromSD_Enhanced+0x2a8>)
 800297e:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK || br < 54)
 8002980:	4b95      	ldr	r3, [pc, #596]	@ (8002bd8 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <DisplayImageFromSD_Enhanced+0x60>
 8002988:	4b95      	ldr	r3, [pc, #596]	@ (8002be0 <DisplayImageFromSD_Enhanced+0x2b0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b35      	cmp	r3, #53	@ 0x35
 800298e:	d806      	bhi.n	800299e <DisplayImageFromSD_Enhanced+0x6e>
    {
        printf("Failed to read BMP header!\r\n");
 8002990:	4894      	ldr	r0, [pc, #592]	@ (8002be4 <DisplayImageFromSD_Enhanced+0x2b4>)
 8002992:	f009 fc21 	bl	800c1d8 <puts>
        f_close(&fil);
 8002996:	488f      	ldr	r0, [pc, #572]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002998:	f008 f9bb 	bl	800ad12 <f_close>
        return;
 800299c:	e1c9      	b.n	8002d32 <DisplayImageFromSD_Enhanced+0x402>
    }

    uint32_t dataOffset = *(uint32_t*)&bmpHeader[10];
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	330a      	adds	r3, #10
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t width = *(uint32_t*)&bmpHeader[18];
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	3312      	adds	r3, #18
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t height = *(uint32_t*)&bmpHeader[22];
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	3316      	adds	r3, #22
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint16_t bitsPerPixel = *(uint16_t*)&bmpHeader[28];
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	331c      	adds	r3, #28
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    printf("Image: %lux%lu, %d bits\r\n", width, height, bitsPerPixel);
 80029cc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80029d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80029d2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80029d6:	4884      	ldr	r0, [pc, #528]	@ (8002be8 <DisplayImageFromSD_Enhanced+0x2b8>)
 80029d8:	f009 fb96 	bl	800c108 <iprintf>

    if (width > 256 || height > 64)
 80029dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e4:	d802      	bhi.n	80029ec <DisplayImageFromSD_Enhanced+0xbc>
 80029e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029e8:	2b40      	cmp	r3, #64	@ 0x40
 80029ea:	d906      	bls.n	80029fa <DisplayImageFromSD_Enhanced+0xca>
    {
        printf("Image too large! Max: 256x64\r\n");
 80029ec:	487f      	ldr	r0, [pc, #508]	@ (8002bec <DisplayImageFromSD_Enhanced+0x2bc>)
 80029ee:	f009 fbf3 	bl	800c1d8 <puts>
        f_close(&fil);
 80029f2:	4878      	ldr	r0, [pc, #480]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 80029f4:	f008 f98d 	bl	800ad12 <f_close>
        return;
 80029f8:	e19b      	b.n	8002d32 <DisplayImageFromSD_Enhanced+0x402>
    }

    // 32비트 처리 (24비트도 유사하게 수정)
    if (bitsPerPixel == 32)
 80029fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	f040 818f 	bne.w	8002d22 <DisplayImageFromSD_Enhanced+0x3f2>
    {
        uint32_t rowSize = width * 4;
 8002a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	677b      	str	r3, [r7, #116]	@ 0x74
        uint8_t *rowBuffer = (uint8_t*)malloc(rowSize);
 8002a0c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002a0e:	f008 fda5 	bl	800b55c <malloc>
 8002a12:	4603      	mov	r3, r0
 8002a14:	673b      	str	r3, [r7, #112]	@ 0x70

        if (rowBuffer == NULL)
 8002a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <DisplayImageFromSD_Enhanced+0xfa>
        {
            printf("Memory allocation failed!\r\n");
 8002a1c:	4874      	ldr	r0, [pc, #464]	@ (8002bf0 <DisplayImageFromSD_Enhanced+0x2c0>)
 8002a1e:	f009 fbdb 	bl	800c1d8 <puts>
            f_close(&fil);
 8002a22:	486c      	ldr	r0, [pc, #432]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002a24:	f008 f975 	bl	800ad12 <f_close>
            return;
 8002a28:	e183      	b.n	8002d32 <DisplayImageFromSD_Enhanced+0x402>
        }

        // 1단계: 히스토그램 분석 (최소/최대 밝기 찾기)
        uint8_t minGray = 255, maxGray = 0;
 8002a2a:	23ff      	movs	r3, #255	@ 0xff
 8002a2c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

        printf("Analyzing image histogram...\r\n");
 8002a36:	486f      	ldr	r0, [pc, #444]	@ (8002bf4 <DisplayImageFromSD_Enhanced+0x2c4>)
 8002a38:	f009 fbce 	bl	800c1d8 <puts>
        for (int row = 0; row < height; row++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a42:	e07a      	b.n	8002b3a <DisplayImageFromSD_Enhanced+0x20a>
        {
            int bmpRow = height - 1 - row;
 8002a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            uint32_t filePos = dataOffset + bmpRow * rowSize;
 8002a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002a5c:	4413      	add	r3, r2
 8002a5e:	66bb      	str	r3, [r7, #104]	@ 0x68

            f_lseek(&fil, filePos);
 8002a60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a62:	485c      	ldr	r0, [pc, #368]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002a64:	f008 f97f 	bl	800ad66 <f_lseek>
            fres = f_read(&fil, rowBuffer, rowSize, &br);
 8002a68:	4b5d      	ldr	r3, [pc, #372]	@ (8002be0 <DisplayImageFromSD_Enhanced+0x2b0>)
 8002a6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a6c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a6e:	4859      	ldr	r0, [pc, #356]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002a70:	f007 fdde 	bl	800a630 <f_read>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b57      	ldr	r3, [pc, #348]	@ (8002bd8 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002a7a:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) break;
 8002a7c:	4b56      	ldr	r3, [pc, #344]	@ (8002bd8 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d161      	bne.n	8002b48 <DisplayImageFromSD_Enhanced+0x218>

            for (uint32_t col = 0; col < width; col++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a8a:	e04b      	b.n	8002b24 <DisplayImageFromSD_Enhanced+0x1f4>
            {
                uint32_t pixelOffset = col * 4;
 8002a8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	667b      	str	r3, [r7, #100]	@ 0x64
                uint8_t b = rowBuffer[pixelOffset];
 8002a94:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002a96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                uint8_t g = rowBuffer[pixelOffset + 1];
 8002aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002aa6:	4413      	add	r3, r2
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                uint8_t r = rowBuffer[pixelOffset + 2];
 8002aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002ab4:	4413      	add	r3, r2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

                uint8_t gray = (r * 299 + g * 587 + b * 114) / 1000;
 8002abc:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8002ac0:	f240 122b 	movw	r2, #299	@ 0x12b
 8002ac4:	fb03 f202 	mul.w	r2, r3, r2
 8002ac8:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002acc:	f240 214b 	movw	r1, #587	@ 0x24b
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	441a      	add	r2, r3
 8002ad6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002ada:	2172      	movs	r1, #114	@ 0x72
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4a45      	ldr	r2, [pc, #276]	@ (8002bf8 <DisplayImageFromSD_Enhanced+0x2c8>)
 8002ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ae8:	1192      	asrs	r2, r2, #6
 8002aea:	17db      	asrs	r3, r3, #31
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                if (gray < minGray) minGray = gray;
 8002af2:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8002af6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d203      	bcs.n	8002b06 <DisplayImageFromSD_Enhanced+0x1d6>
 8002afe:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8002b02:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
                if (gray > maxGray) maxGray = gray;
 8002b06:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8002b0a:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d903      	bls.n	8002b1a <DisplayImageFromSD_Enhanced+0x1ea>
 8002b12:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8002b16:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
            for (uint32_t col = 0; col < width; col++)
 8002b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d3ad      	bcc.n	8002a8c <DisplayImageFromSD_Enhanced+0x15c>
        for (int row = 0; row < height; row++)
 8002b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b34:	3301      	adds	r3, #1
 8002b36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f63f af7f 	bhi.w	8002a44 <DisplayImageFromSD_Enhanced+0x114>
 8002b46:	e000      	b.n	8002b4a <DisplayImageFromSD_Enhanced+0x21a>
            if (fres != FR_OK) break;
 8002b48:	bf00      	nop
            }
        }

        printf("Gray range: %d - %d\r\n", minGray, maxGray);
 8002b4a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002b4e:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002b52:	4619      	mov	r1, r3
 8002b54:	4829      	ldr	r0, [pc, #164]	@ (8002bfc <DisplayImageFromSD_Enhanced+0x2cc>)
 8002b56:	f009 fad7 	bl	800c108 <iprintf>

        // 2단계: 히스토그램 스트레칭을 적용하여 실제 출력
        oled_clearBuffer();
 8002b5a:	f7ff fedd 	bl	8002918 <oled_clearBuffer>

        uint8_t startX = (256 - width) / 2;
 8002b5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b62:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        uint8_t startY = (64 - height) / 2;
 8002b6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b6e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

        printf("Rendering with enhanced contrast...\r\n");
 8002b78:	4821      	ldr	r0, [pc, #132]	@ (8002c00 <DisplayImageFromSD_Enhanced+0x2d0>)
 8002b7a:	f009 fb2d 	bl	800c1d8 <puts>
        for (int row = 0; row < height; row++) {
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b84:	e0c2      	b.n	8002d0c <DisplayImageFromSD_Enhanced+0x3dc>
            int bmpRow = height - 1 - row;
 8002b86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b8a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	65bb      	str	r3, [r7, #88]	@ 0x58
            uint32_t filePos = dataOffset + bmpRow * rowSize;
 8002b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b94:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002b9e:	4413      	add	r3, r2
 8002ba0:	657b      	str	r3, [r7, #84]	@ 0x54

            f_lseek(&fil, filePos);
 8002ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ba4:	480b      	ldr	r0, [pc, #44]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002ba6:	f008 f8de 	bl	800ad66 <f_lseek>
            fres = f_read(&fil, rowBuffer, rowSize, &br);
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <DisplayImageFromSD_Enhanced+0x2b0>)
 8002bac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002bae:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002bb0:	4808      	ldr	r0, [pc, #32]	@ (8002bd4 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002bb2:	f007 fd3d 	bl	800a630 <f_read>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002bbc:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK)
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 80a9 	bne.w	8002d1a <DisplayImageFromSD_Enhanced+0x3ea>
            {
            	break;
            }

            for (uint32_t col = 0; col < width; col++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002bce:	e092      	b.n	8002cf6 <DisplayImageFromSD_Enhanced+0x3c6>
 8002bd0:	20000001 	.word	0x20000001
 8002bd4:	200036b4 	.word	0x200036b4
 8002bd8:	200036b0 	.word	0x200036b0
 8002bdc:	0800e9b4 	.word	0x0800e9b4
 8002be0:	200036a4 	.word	0x200036a4
 8002be4:	0800e9d8 	.word	0x0800e9d8
 8002be8:	0800e9f4 	.word	0x0800e9f4
 8002bec:	0800ea10 	.word	0x0800ea10
 8002bf0:	0800ea30 	.word	0x0800ea30
 8002bf4:	0800ea4c 	.word	0x0800ea4c
 8002bf8:	10624dd3 	.word	0x10624dd3
 8002bfc:	0800ea6c 	.word	0x0800ea6c
 8002c00:	0800ea84 	.word	0x0800ea84
            {
                uint32_t pixelOffset = col * 4;
 8002c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	653b      	str	r3, [r7, #80]	@ 0x50
                uint8_t b = rowBuffer[pixelOffset];
 8002c0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c10:	4413      	add	r3, r2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                uint8_t g = rowBuffer[pixelOffset + 1];
 8002c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
                uint8_t r = rowBuffer[pixelOffset + 2];
 8002c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c28:	3302      	adds	r3, #2
 8002c2a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

                uint8_t gray = (r * 299 + g * 587 + b * 114) / 1000;
 8002c34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c38:	f240 122b 	movw	r2, #299	@ 0x12b
 8002c3c:	fb03 f202 	mul.w	r2, r3, r2
 8002c40:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002c44:	f240 214b 	movw	r1, #587	@ 0x24b
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	441a      	add	r2, r3
 8002c4e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c52:	2172      	movs	r1, #114	@ 0x72
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a37      	ldr	r2, [pc, #220]	@ (8002d38 <DisplayImageFromSD_Enhanced+0x408>)
 8002c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002c60:	1192      	asrs	r2, r2, #6
 8002c62:	17db      	asrs	r3, r3, #31
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

                // 히스토그램 스트레칭 적용
                uint8_t enhanced;
                if (maxGray > minGray)
 8002c6a:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002c6e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d911      	bls.n	8002c9a <DisplayImageFromSD_Enhanced+0x36a>
                {
                    enhanced = ((gray - minGray) * 15) / (maxGray - minGray);
 8002c76:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002c7a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9a      	subs	r2, r3, r2
 8002c86:	f897 109e 	ldrb.w	r1, [r7, #158]	@ 0x9e
 8002c8a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002c8e:	1acb      	subs	r3, r1, r3
 8002c90:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c94:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8002c98:	e002      	b.n	8002ca0 <DisplayImageFromSD_Enhanced+0x370>
                }
                else
                {
                    enhanced = 8;  // 단색 이미지인 경우 중간값
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                }

                if (enhanced > 15)
 8002ca0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d902      	bls.n	8002cae <DisplayImageFromSD_Enhanced+0x37e>
                {
                	enhanced = 15;
 8002ca8:	230f      	movs	r3, #15
 8002caa:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                }

                int displayX = startX + col;
 8002cae:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8002cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb6:	4413      	add	r3, r2
 8002cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
                int displayY = startY + row;
 8002cba:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002cbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002cc2:	4413      	add	r3, r2
 8002cc4:	647b      	str	r3, [r7, #68]	@ 0x44

                if (displayX >= 0 && displayX < 256 && displayY >= 0 && displayY < 64)
 8002cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0f      	blt.n	8002cec <DisplayImageFromSD_Enhanced+0x3bc>
 8002ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cce:	2bff      	cmp	r3, #255	@ 0xff
 8002cd0:	dc0c      	bgt.n	8002cec <DisplayImageFromSD_Enhanced+0x3bc>
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db09      	blt.n	8002cec <DisplayImageFromSD_Enhanced+0x3bc>
 8002cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cda:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cdc:	dc06      	bgt.n	8002cec <DisplayImageFromSD_Enhanced+0x3bc>
                {
                    oled_setPixelInBuffer(displayX, displayY, enhanced);
 8002cde:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002ce6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002ce8:	f7ff fdaa 	bl	8002840 <oled_setPixelInBuffer>
            for (uint32_t col = 0; col < width; col++)
 8002cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cf6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d380      	bcc.n	8002c04 <DisplayImageFromSD_Enhanced+0x2d4>
        for (int row = 0; row < height; row++) {
 8002d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d06:	3301      	adds	r3, #1
 8002d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	f63f af37 	bhi.w	8002b86 <DisplayImageFromSD_Enhanced+0x256>
 8002d18:	e000      	b.n	8002d1c <DisplayImageFromSD_Enhanced+0x3ec>
            	break;
 8002d1a:	bf00      	nop
                }
            }
        }

        free(rowBuffer);
 8002d1c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002d1e:	f008 fc25 	bl	800b56c <free>
    }

    oled_updateDisplay();
 8002d22:	f7ff fde5 	bl	80028f0 <oled_updateDisplay>
    printf("Enhanced image displayed!\r\n");
 8002d26:	4805      	ldr	r0, [pc, #20]	@ (8002d3c <DisplayImageFromSD_Enhanced+0x40c>)
 8002d28:	f009 fa56 	bl	800c1d8 <puts>
    f_close(&fil);
 8002d2c:	4804      	ldr	r0, [pc, #16]	@ (8002d40 <DisplayImageFromSD_Enhanced+0x410>)
 8002d2e:	f007 fff0 	bl	800ad12 <f_close>
}
 8002d32:	37a0      	adds	r7, #160	@ 0xa0
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	10624dd3 	.word	0x10624dd3
 8002d3c:	0800eaac 	.word	0x0800eaac
 8002d40:	200036b4 	.word	0x200036b4

08002d44 <OLED_setCameraMode>:

/* 촬영 모드 - 플리커 최소화 */
void OLED_setCameraMode(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
    // 촬영을 위한 최적 설정 (밝기 유지하면서 플리커 감소)
    OLED_write_cmd(OLED_SETCLOCKDIVIDER);
 8002d48:	20b3      	movs	r0, #179	@ 0xb3
 8002d4a:	f7ff fa97 	bl	800227c <OLED_write_cmd>
    d = 0x70;  // 느린 클록 (플리커 감소)
 8002d4e:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <OLED_setCameraMode+0x50>)
 8002d50:	2270      	movs	r2, #112	@ 0x70
 8002d52:	701a      	strb	r2, [r3, #0]
    OLED_write_data(&d, 1);
 8002d54:	2101      	movs	r1, #1
 8002d56:	480f      	ldr	r0, [pc, #60]	@ (8002d94 <OLED_setCameraMode+0x50>)
 8002d58:	f7ff fab8 	bl	80022cc <OLED_write_data>
    OLED_write_cmd(OLED_MASTERCURRENT);
 8002d5c:	20c7      	movs	r0, #199	@ 0xc7
 8002d5e:	f7ff fa8d 	bl	800227c <OLED_write_cmd>
    d = 0x0F;  // 0x08에서 0x0D로 증가 (밝기 유지)
 8002d62:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <OLED_setCameraMode+0x50>)
 8002d64:	220f      	movs	r2, #15
 8002d66:	701a      	strb	r2, [r3, #0]
    OLED_write_data(&d, 1);
 8002d68:	2101      	movs	r1, #1
 8002d6a:	480a      	ldr	r0, [pc, #40]	@ (8002d94 <OLED_setCameraMode+0x50>)
 8002d6c:	f7ff faae 	bl	80022cc <OLED_write_data>

    // 대비도 최대로
       OLED_write_cmd(OLED_SETCONTRAST);
 8002d70:	20c1      	movs	r0, #193	@ 0xc1
 8002d72:	f7ff fa83 	bl	800227c <OLED_write_cmd>
       d = 0xFF;
 8002d76:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <OLED_setCameraMode+0x50>)
 8002d78:	22ff      	movs	r2, #255	@ 0xff
 8002d7a:	701a      	strb	r2, [r3, #0]
       OLED_write_data(&d, 1);
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4805      	ldr	r0, [pc, #20]	@ (8002d94 <OLED_setCameraMode+0x50>)
 8002d80:	f7ff faa4 	bl	80022cc <OLED_write_data>

    HAL_Delay(200);
 8002d84:	20c8      	movs	r0, #200	@ 0xc8
 8002d86:	f000 fbfd 	bl	8003584 <HAL_Delay>
    printf("Camera mode enabled - balanced brightness and flicker\r\n");
 8002d8a:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <OLED_setCameraMode+0x54>)
 8002d8c:	f009 fa24 	bl	800c1d8 <puts>
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	200002db 	.word	0x200002db
 8002d98:	0800eac8 	.word	0x0800eac8

08002d9c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002da2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e14 <MX_SPI1_Init+0x78>)
 8002da4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002da8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002dac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dae:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002db4:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002db6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002dba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dc2:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002dd2:	2218      	movs	r2, #24
 8002dd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002dea:	2207      	movs	r2, #7
 8002dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002df6:	2208      	movs	r2, #8
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dfa:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <MX_SPI1_Init+0x74>)
 8002dfc:	f002 f8fe 	bl	8004ffc <HAL_SPI_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e06:	f7ff fa33 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20004748 	.word	0x20004748
 8002e14:	40013000 	.word	0x40013000

08002e18 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e90 <MX_SPI3_Init+0x78>)
 8002e20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e2a:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e30:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e32:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e38:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e44:	4b11      	ldr	r3, [pc, #68]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e4e:	2228      	movs	r2, #40	@ 0x28
 8002e50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e52:	4b0e      	ldr	r3, [pc, #56]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002e64:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e66:	2207      	movs	r2, #7
 8002e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e6a:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e70:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e72:	2208      	movs	r2, #8
 8002e74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e76:	4805      	ldr	r0, [pc, #20]	@ (8002e8c <MX_SPI3_Init+0x74>)
 8002e78:	f002 f8c0 	bl	8004ffc <HAL_SPI_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002e82:	f7ff f9f5 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200046e4 	.word	0x200046e4
 8002e90:	40003c00 	.word	0x40003c00

08002e94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	@ 0x30
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a57      	ldr	r2, [pc, #348]	@ (8003010 <HAL_SPI_MspInit+0x17c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d17b      	bne.n	8002fae <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eb6:	4b57      	ldr	r3, [pc, #348]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eba:	4a56      	ldr	r2, [pc, #344]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002ebc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ec0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ec2:	4b54      	ldr	r3, [pc, #336]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4b51      	ldr	r3, [pc, #324]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed2:	4a50      	ldr	r2, [pc, #320]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eda:	4b4e      	ldr	r3, [pc, #312]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_CLK_Pin|SPI1_MISO_SD_DAT0_Pin|SPI1_MOSI_SD_CMD_Pin;
 8002ee6:	23e0      	movs	r3, #224	@ 0xe0
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef6:	2305      	movs	r3, #5
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	f107 031c 	add.w	r3, r7, #28
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f04:	f000 fef6 	bl	8003cf4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8002f08:	4b43      	ldr	r3, [pc, #268]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f0a:	4a44      	ldr	r2, [pc, #272]	@ (800301c <HAL_SPI_MspInit+0x188>)
 8002f0c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002f0e:	4b42      	ldr	r3, [pc, #264]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f10:	220a      	movs	r2, #10
 8002f12:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f14:	4b40      	ldr	r3, [pc, #256]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f20:	4b3d      	ldr	r3, [pc, #244]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f22:	2280      	movs	r2, #128	@ 0x80
 8002f24:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f26:	4b3c      	ldr	r3, [pc, #240]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002f32:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f34:	2220      	movs	r2, #32
 8002f36:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f38:	4b37      	ldr	r3, [pc, #220]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002f3e:	4836      	ldr	r0, [pc, #216]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f40:	f000 fc5e 	bl	8003800 <HAL_DMA_Init>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002f4a:	f7ff f991 	bl	8002270 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a31      	ldr	r2, [pc, #196]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f54:	4a30      	ldr	r2, [pc, #192]	@ (8003018 <HAL_SPI_MspInit+0x184>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002f5a:	4b31      	ldr	r3, [pc, #196]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f5c:	4a31      	ldr	r2, [pc, #196]	@ (8003024 <HAL_SPI_MspInit+0x190>)
 8002f5e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002f60:	4b2f      	ldr	r3, [pc, #188]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f62:	220b      	movs	r2, #11
 8002f64:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f66:	4b2e      	ldr	r3, [pc, #184]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f68:	2210      	movs	r2, #16
 8002f6a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f72:	4b2b      	ldr	r3, [pc, #172]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f74:	2280      	movs	r2, #128	@ 0x80
 8002f76:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f78:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f7e:	4b28      	ldr	r3, [pc, #160]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002f84:	4b26      	ldr	r3, [pc, #152]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f86:	2220      	movs	r2, #32
 8002f88:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f8a:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f90:	4823      	ldr	r0, [pc, #140]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002f92:	f000 fc35 	bl	8003800 <HAL_DMA_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002f9c:	f7ff f968 	bl	8002270 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <HAL_SPI_MspInit+0x18c>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002fac:	e02c      	b.n	8003008 <HAL_SPI_MspInit+0x174>
  else if(spiHandle->Instance==SPI3)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003028 <HAL_SPI_MspInit+0x194>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d127      	bne.n	8003008 <HAL_SPI_MspInit+0x174>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002fb8:	4b16      	ldr	r3, [pc, #88]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbc:	4a15      	ldr	r2, [pc, #84]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc4:	4b13      	ldr	r3, [pc, #76]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd0:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002fd6:	f043 0302 	orr.w	r3, r3, #2
 8002fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <HAL_SPI_MspInit+0x180>)
 8002fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002fe8:	2328      	movs	r3, #40	@ 0x28
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ff8:	2306      	movs	r3, #6
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	480a      	ldr	r0, [pc, #40]	@ (800302c <HAL_SPI_MspInit+0x198>)
 8003004:	f000 fe76 	bl	8003cf4 <HAL_GPIO_Init>
}
 8003008:	bf00      	nop
 800300a:	3730      	adds	r7, #48	@ 0x30
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40013000 	.word	0x40013000
 8003014:	40021000 	.word	0x40021000
 8003018:	200047ac 	.word	0x200047ac
 800301c:	40020008 	.word	0x40020008
 8003020:	2000480c 	.word	0x2000480c
 8003024:	4002001c 	.word	0x4002001c
 8003028:	40003c00 	.word	0x40003c00
 800302c:	48000400 	.word	0x48000400

08003030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <HAL_MspInit+0x44>)
 8003038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303a:	4a0e      	ldr	r2, [pc, #56]	@ (8003074 <HAL_MspInit+0x44>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6613      	str	r3, [r2, #96]	@ 0x60
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_MspInit+0x44>)
 8003044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_MspInit+0x44>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <HAL_MspInit+0x44>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003058:	6593      	str	r3, [r2, #88]	@ 0x58
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_MspInit+0x44>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003066:	f001 f89b 	bl	80041a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <NMI_Handler+0x4>

08003080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <HardFault_Handler+0x4>

08003088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <MemManage_Handler+0x4>

08003090 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <UsageFault_Handler+0x4>

080030a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <SysTick_Handler+0x38>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <SysTick_Handler+0x18>
		Timer1--;
 80030d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <SysTick_Handler+0x38>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <SysTick_Handler+0x38>)
 80030e2:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80030e4:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <SysTick_Handler+0x3c>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <SysTick_Handler+0x2c>
		Timer2--;
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <SysTick_Handler+0x3c>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <SysTick_Handler+0x3c>)
 80030f6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f8:	f000 fa26 	bl	8003548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80030fc:	f000 fb73 	bl	80037e6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20002664 	.word	0x20002664
 8003108:	20002662 	.word	0x20002662

0800310c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003110:	4802      	ldr	r0, [pc, #8]	@ (800311c <DMA1_Channel1_IRQHandler+0x10>)
 8003112:	f000 fcdd 	bl	8003ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200047ac 	.word	0x200047ac

08003120 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003124:	4802      	ldr	r0, [pc, #8]	@ (8003130 <DMA1_Channel2_IRQHandler+0x10>)
 8003126:	f000 fcd3 	bl	8003ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	2000480c 	.word	0x2000480c

08003134 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003138:	4802      	ldr	r0, [pc, #8]	@ (8003144 <USART1_IRQHandler+0x10>)
 800313a:	f002 fe2d 	bl	8005d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2000486c 	.word	0x2000486c

08003148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return 1;
 800314c:	2301      	movs	r3, #1
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <_kill>:

int _kill(int pid, int sig)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003162:	f009 f9c3 	bl	800c4ec <__errno>
 8003166:	4603      	mov	r3, r0
 8003168:	2216      	movs	r2, #22
 800316a:	601a      	str	r2, [r3, #0]
  return -1;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <_exit>:

void _exit (int status)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003180:	f04f 31ff 	mov.w	r1, #4294967295
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ffe7 	bl	8003158 <_kill>
  while (1) {}    /* Make sure we hang here */
 800318a:	bf00      	nop
 800318c:	e7fd      	b.n	800318a <_exit+0x12>

0800318e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e00a      	b.n	80031b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031a0:	f3af 8000 	nop.w
 80031a4:	4601      	mov	r1, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	60ba      	str	r2, [r7, #8]
 80031ac:	b2ca      	uxtb	r2, r1
 80031ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3301      	adds	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	dbf0      	blt.n	80031a0 <_read+0x12>
  }

  return len;
 80031be:	687b      	ldr	r3, [r7, #4]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e009      	b.n	80031ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	60ba      	str	r2, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fbe0 	bl	80019a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3301      	adds	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	dbf1      	blt.n	80031da <_write+0x12>
  }
  return len;
 80031f6:	687b      	ldr	r3, [r7, #4]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_close>:

int _close(int file)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003228:	605a      	str	r2, [r3, #4]
  return 0;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <_isatty>:

int _isatty(int file)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003240:	2301      	movs	r3, #1
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003270:	4a14      	ldr	r2, [pc, #80]	@ (80032c4 <_sbrk+0x5c>)
 8003272:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <_sbrk+0x60>)
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800327c:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <_sbrk+0x64>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003284:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <_sbrk+0x64>)
 8003286:	4a12      	ldr	r2, [pc, #72]	@ (80032d0 <_sbrk+0x68>)
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800328a:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <_sbrk+0x64>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	429a      	cmp	r2, r3
 8003296:	d207      	bcs.n	80032a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003298:	f009 f928 	bl	800c4ec <__errno>
 800329c:	4603      	mov	r3, r0
 800329e:	220c      	movs	r2, #12
 80032a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	e009      	b.n	80032bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a8:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <_sbrk+0x64>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ae:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <_sbrk+0x64>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	4a05      	ldr	r2, [pc, #20]	@ (80032cc <_sbrk+0x64>)
 80032b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ba:	68fb      	ldr	r3, [r7, #12]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20008000 	.word	0x20008000
 80032c8:	00000400 	.word	0x00000400
 80032cc:	200022dc 	.word	0x200022dc
 80032d0:	20006970 	.word	0x20006970

080032d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032d8:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <SystemInit+0x20>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	4a05      	ldr	r2, [pc, #20]	@ (80032f4 <SystemInit+0x20>)
 80032e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032fc:	4b22      	ldr	r3, [pc, #136]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 80032fe:	4a23      	ldr	r2, [pc, #140]	@ (800338c <MX_USART1_UART_Init+0x94>)
 8003300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003302:	4b21      	ldr	r3, [pc, #132]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800330a:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003310:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003316:	4b1c      	ldr	r3, [pc, #112]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800331c:	4b1a      	ldr	r3, [pc, #104]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 800331e:	220c      	movs	r2, #12
 8003320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003322:	4b19      	ldr	r3, [pc, #100]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003328:	4b17      	ldr	r3, [pc, #92]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800332e:	4b16      	ldr	r3, [pc, #88]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003330:	2200      	movs	r2, #0
 8003332:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003334:	4b14      	ldr	r3, [pc, #80]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003336:	2200      	movs	r2, #0
 8003338:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800333a:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 800333c:	2200      	movs	r2, #0
 800333e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003340:	4811      	ldr	r0, [pc, #68]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003342:	f002 fbff 	bl	8005b44 <HAL_UART_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800334c:	f7fe ff90 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003350:	2100      	movs	r1, #0
 8003352:	480d      	ldr	r0, [pc, #52]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003354:	f004 fc45 	bl	8007be2 <HAL_UARTEx_SetTxFifoThreshold>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800335e:	f7fe ff87 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003362:	2100      	movs	r1, #0
 8003364:	4808      	ldr	r0, [pc, #32]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003366:	f004 fc7a 	bl	8007c5e <HAL_UARTEx_SetRxFifoThreshold>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003370:	f7fe ff7e 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003374:	4804      	ldr	r0, [pc, #16]	@ (8003388 <MX_USART1_UART_Init+0x90>)
 8003376:	f004 fbfb 	bl	8007b70 <HAL_UARTEx_DisableFifoMode>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003380:	f7fe ff76 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}
 8003388:	2000486c 	.word	0x2000486c
 800338c:	40013800 	.word	0x40013800

08003390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b09a      	sub	sp, #104	@ 0x68
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	2244      	movs	r2, #68	@ 0x44
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f009 f827 	bl	800c404 <memset>
  if(uartHandle->Instance==USART1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a22      	ldr	r2, [pc, #136]	@ (8003444 <HAL_UART_MspInit+0xb4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d13d      	bne.n	800343c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033c0:	2301      	movs	r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c8:	f107 0310 	add.w	r3, r7, #16
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fc25 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033d8:	f7fe ff4a 	bl	8002270 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_UART_MspInit+0xb8>)
 80033de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e0:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <HAL_UART_MspInit+0xb8>)
 80033e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80033e8:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <HAL_UART_MspInit+0xb8>)
 80033ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f4:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_UART_MspInit+0xb8>)
 80033f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f8:	4a13      	ldr	r2, [pc, #76]	@ (8003448 <HAL_UART_MspInit+0xb8>)
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_UART_MspInit+0xb8>)
 8003402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800340c:	23c0      	movs	r3, #192	@ 0xc0
 800340e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	2300      	movs	r3, #0
 800341a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800341c:	2307      	movs	r3, #7
 800341e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003420:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003424:	4619      	mov	r1, r3
 8003426:	4809      	ldr	r0, [pc, #36]	@ (800344c <HAL_UART_MspInit+0xbc>)
 8003428:	f000 fc64 	bl	8003cf4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800342c:	2200      	movs	r2, #0
 800342e:	2100      	movs	r1, #0
 8003430:	2025      	movs	r0, #37	@ 0x25
 8003432:	f000 f9a4 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003436:	2025      	movs	r0, #37	@ 0x25
 8003438:	f000 f9bb 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800343c:	bf00      	nop
 800343e:	3768      	adds	r7, #104	@ 0x68
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40013800 	.word	0x40013800
 8003448:	40021000 	.word	0x40021000
 800344c:	48000400 	.word	0x48000400

08003450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003450:	480d      	ldr	r0, [pc, #52]	@ (8003488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003452:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003454:	f7ff ff3e 	bl	80032d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003458:	480c      	ldr	r0, [pc, #48]	@ (800348c <LoopForever+0x6>)
  ldr r1, =_edata
 800345a:	490d      	ldr	r1, [pc, #52]	@ (8003490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800345c:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <LoopForever+0xe>)
  movs r3, #0
 800345e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003460:	e002      	b.n	8003468 <LoopCopyDataInit>

08003462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003466:	3304      	adds	r3, #4

08003468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800346a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800346c:	d3f9      	bcc.n	8003462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003470:	4c0a      	ldr	r4, [pc, #40]	@ (800349c <LoopForever+0x16>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003474:	e001      	b.n	800347a <LoopFillZerobss>

08003476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003478:	3204      	adds	r2, #4

0800347a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800347a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800347c:	d3fb      	bcc.n	8003476 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800347e:	f009 f83b 	bl	800c4f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003482:	f7fe fdf7 	bl	8002074 <main>

08003486 <LoopForever>:

LoopForever:
    b LoopForever
 8003486:	e7fe      	b.n	8003486 <LoopForever>
  ldr   r0, =_estack
 8003488:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800348c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003490:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003494:	0800fac4 	.word	0x0800fac4
  ldr r2, =_sbss
 8003498:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800349c:	20006970 	.word	0x20006970

080034a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034a0:	e7fe      	b.n	80034a0 <ADC1_2_IRQHandler>

080034a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f000 f95b 	bl	8003768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034b2:	200f      	movs	r0, #15
 80034b4:	f000 f80e 	bl	80034d4 <HAL_InitTick>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	71fb      	strb	r3, [r7, #7]
 80034c2:	e001      	b.n	80034c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034c4:	f7ff fdb4 	bl	8003030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034c8:	79fb      	ldrb	r3, [r7, #7]

}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80034e0:	4b16      	ldr	r3, [pc, #88]	@ (800353c <HAL_InitTick+0x68>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d022      	beq.n	800352e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034e8:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_InitTick+0x6c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b13      	ldr	r3, [pc, #76]	@ (800353c <HAL_InitTick+0x68>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80034f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f966 	bl	80037ce <HAL_SYSTICK_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	d809      	bhi.n	8003522 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800350e:	2200      	movs	r2, #0
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	f04f 30ff 	mov.w	r0, #4294967295
 8003516:	f000 f932 	bl	800377e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <HAL_InitTick+0x70>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	e007      	b.n	8003532 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e004      	b.n	8003532 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e001      	b.n	8003532 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2000000c 	.word	0x2000000c
 8003540:	20000004 	.word	0x20000004
 8003544:	20000008 	.word	0x20000008

08003548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <HAL_IncTick+0x1c>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_IncTick+0x20>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4413      	add	r3, r2
 8003556:	4a03      	ldr	r2, [pc, #12]	@ (8003564 <HAL_IncTick+0x1c>)
 8003558:	6013      	str	r3, [r2, #0]
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	20004900 	.word	0x20004900
 8003568:	2000000c 	.word	0x2000000c

0800356c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return uwTick;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <HAL_GetTick+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20004900 	.word	0x20004900

08003584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff ffee 	bl	800356c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d004      	beq.n	80035a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <HAL_Delay+0x40>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4413      	add	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035a8:	bf00      	nop
 80035aa:	f7ff ffdf 	bl	800356c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d8f7      	bhi.n	80035aa <HAL_Delay+0x26>
  {
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	2000000c 	.word	0x2000000c

080035c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d8:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <__NVIC_SetPriorityGrouping+0x44>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e4:	4013      	ands	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fa:	4a04      	ldr	r2, [pc, #16]	@ (800360c <__NVIC_SetPriorityGrouping+0x44>)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	60d3      	str	r3, [r2, #12]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003614:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <__NVIC_GetPriorityGrouping+0x18>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	f003 0307 	and.w	r3, r3, #7
}
 800361e:	4618      	mov	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	2b00      	cmp	r3, #0
 800363c:	db0b      	blt.n	8003656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4907      	ldr	r1, [pc, #28]	@ (8003664 <__NVIC_EnableIRQ+0x38>)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2001      	movs	r0, #1
 800364e:	fa00 f202 	lsl.w	r2, r0, r2
 8003652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e000e100 	.word	0xe000e100

08003668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	2b00      	cmp	r3, #0
 800367a:	db0a      	blt.n	8003692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	490c      	ldr	r1, [pc, #48]	@ (80036b4 <__NVIC_SetPriority+0x4c>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	440b      	add	r3, r1
 800368c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003690:	e00a      	b.n	80036a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4908      	ldr	r1, [pc, #32]	@ (80036b8 <__NVIC_SetPriority+0x50>)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3b04      	subs	r3, #4
 80036a0:	0112      	lsls	r2, r2, #4
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	440b      	add	r3, r1
 80036a6:	761a      	strb	r2, [r3, #24]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000e100 	.word	0xe000e100
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	@ 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f1c3 0307 	rsb	r3, r3, #7
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf28      	it	cs
 80036da:	2304      	movcs	r3, #4
 80036dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	d902      	bls.n	80036ec <NVIC_EncodePriority+0x30>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3b03      	subs	r3, #3
 80036ea:	e000      	b.n	80036ee <NVIC_EncodePriority+0x32>
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	401a      	ands	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003704:	f04f 31ff 	mov.w	r1, #4294967295
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	43d9      	mvns	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	4313      	orrs	r3, r2
         );
}
 8003716:	4618      	mov	r0, r3
 8003718:	3724      	adds	r7, #36	@ 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003734:	d301      	bcc.n	800373a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003736:	2301      	movs	r3, #1
 8003738:	e00f      	b.n	800375a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373a:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <SysTick_Config+0x40>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003742:	210f      	movs	r1, #15
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	f7ff ff8e 	bl	8003668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <SysTick_Config+0x40>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003752:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <SysTick_Config+0x40>)
 8003754:	2207      	movs	r2, #7
 8003756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000e010 	.word	0xe000e010

08003768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff29 	bl	80035c8 <__NVIC_SetPriorityGrouping>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff40 	bl	8003610 <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff90 	bl	80036bc <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5f 	bl	8003668 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff33 	bl	800362c <__NVIC_EnableIRQ>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffa4 	bl	8003724 <SysTick_Config>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80037ea:	f000 f802 	bl	80037f2 <HAL_SYSTICK_Callback>
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80037f2:	b480      	push	{r7}
 80037f4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e08d      	b.n	800392e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <HAL_DMA_Init+0x138>)
 800381a:	429a      	cmp	r2, r3
 800381c:	d80f      	bhi.n	800383e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	4b45      	ldr	r3, [pc, #276]	@ (800393c <HAL_DMA_Init+0x13c>)
 8003826:	4413      	add	r3, r2
 8003828:	4a45      	ldr	r2, [pc, #276]	@ (8003940 <HAL_DMA_Init+0x140>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	009a      	lsls	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a42      	ldr	r2, [pc, #264]	@ (8003944 <HAL_DMA_Init+0x144>)
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
 800383c:	e00e      	b.n	800385c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	4b40      	ldr	r3, [pc, #256]	@ (8003948 <HAL_DMA_Init+0x148>)
 8003846:	4413      	add	r3, r2
 8003848:	4a3d      	ldr	r2, [pc, #244]	@ (8003940 <HAL_DMA_Init+0x140>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a3c      	ldr	r2, [pc, #240]	@ (800394c <HAL_DMA_Init+0x14c>)
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9be 	bl	8003c30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038bc:	d102      	bne.n	80038c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d010      	beq.n	8003904 <HAL_DMA_Init+0x104>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d80c      	bhi.n	8003904 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9de 	bl	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	e008      	b.n	8003916 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40020407 	.word	0x40020407
 800393c:	bffdfff8 	.word	0xbffdfff8
 8003940:	cccccccd 	.word	0xcccccccd
 8003944:	40020000 	.word	0x40020000
 8003948:	bffdfbf8 	.word	0xbffdfbf8
 800394c:	40020400 	.word	0x40020400

08003950 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d005      	beq.n	8003974 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2204      	movs	r2, #4
 800396c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	e037      	b.n	80039e4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 020e 	bic.w	r2, r2, #14
 8003982:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003992:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039c0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039e2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d00d      	beq.n	8003a36 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e047      	b.n	8003ac6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 020e 	bic.w	r2, r2, #14
 8003a44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	f003 021f 	and.w	r2, r3, #31
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	2101      	movs	r1, #1
 8003a74:	fa01 f202 	lsl.w	r2, r1, r2
 8003a78:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a82:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00c      	beq.n	8003aa6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003aa4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
    }
  }
  return status;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2204      	movs	r2, #4
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d026      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x7a>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d021      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d107      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0204 	bic.w	r2, r2, #4
 8003b22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b28:	f003 021f 	and.w	r2, r3, #31
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	2104      	movs	r1, #4
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d071      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b48:	e06c      	b.n	8003c24 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2202      	movs	r2, #2
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02e      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d029      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 020a 	bic.w	r2, r2, #10
 8003b84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f003 021f 	and.w	r2, r3, #31
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d038      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bba:	e033      	b.n	8003c24 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d02a      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d025      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 020e 	bic.w	r2, r2, #14
 8003be8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f003 021f 	and.w	r2, r3, #31
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
}
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d802      	bhi.n	8003c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003c44:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e001      	b.n	8003c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003c4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c4c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3b08      	subs	r3, #8
 8003c5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c68:	089b      	lsrs	r3, r3, #2
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	2201      	movs	r2, #1
 8003c84:	409a      	lsls	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40020407 	.word	0x40020407
 8003c9c:	40020800 	.word	0x40020800
 8003ca0:	40020820 	.word	0x40020820
 8003ca4:	cccccccd 	.word	0xcccccccd
 8003ca8:	40020880 	.word	0x40020880

08003cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003cce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	1000823f 	.word	0x1000823f
 8003cf0:	40020940 	.word	0x40020940

08003cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d02:	e15a      	b.n	8003fba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	2101      	movs	r1, #1
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	4013      	ands	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 814c 	beq.w	8003fb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d005      	beq.n	8003d34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d130      	bne.n	8003d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 0201 	and.w	r2, r3, #1
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d017      	beq.n	8003dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d123      	bne.n	8003e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	08da      	lsrs	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3208      	adds	r2, #8
 8003de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	220f      	movs	r2, #15
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	08da      	lsrs	r2, r3, #3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3208      	adds	r2, #8
 8003e20:	6939      	ldr	r1, [r7, #16]
 8003e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0203 	and.w	r2, r3, #3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80a6 	beq.w	8003fb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e68:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd8 <HAL_GPIO_Init+0x2e4>)
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd8 <HAL_GPIO_Init+0x2e4>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e74:	4b58      	ldr	r3, [pc, #352]	@ (8003fd8 <HAL_GPIO_Init+0x2e4>)
 8003e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e80:	4a56      	ldr	r2, [pc, #344]	@ (8003fdc <HAL_GPIO_Init+0x2e8>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	3302      	adds	r3, #2
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	220f      	movs	r2, #15
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003eaa:	d01f      	beq.n	8003eec <HAL_GPIO_Init+0x1f8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe0 <HAL_GPIO_Init+0x2ec>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d019      	beq.n	8003ee8 <HAL_GPIO_Init+0x1f4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe4 <HAL_GPIO_Init+0x2f0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_GPIO_Init+0x1f0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe8 <HAL_GPIO_Init+0x2f4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_GPIO_Init+0x1ec>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a49      	ldr	r2, [pc, #292]	@ (8003fec <HAL_GPIO_Init+0x2f8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <HAL_GPIO_Init+0x1e8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a48      	ldr	r2, [pc, #288]	@ (8003ff0 <HAL_GPIO_Init+0x2fc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_GPIO_Init+0x1e4>
 8003ed4:	2305      	movs	r3, #5
 8003ed6:	e00a      	b.n	8003eee <HAL_GPIO_Init+0x1fa>
 8003ed8:	2306      	movs	r3, #6
 8003eda:	e008      	b.n	8003eee <HAL_GPIO_Init+0x1fa>
 8003edc:	2304      	movs	r3, #4
 8003ede:	e006      	b.n	8003eee <HAL_GPIO_Init+0x1fa>
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e004      	b.n	8003eee <HAL_GPIO_Init+0x1fa>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e002      	b.n	8003eee <HAL_GPIO_Init+0x1fa>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_GPIO_Init+0x1fa>
 8003eec:	2300      	movs	r3, #0
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	f002 0203 	and.w	r2, r2, #3
 8003ef4:	0092      	lsls	r2, r2, #2
 8003ef6:	4093      	lsls	r3, r2
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003efe:	4937      	ldr	r1, [pc, #220]	@ (8003fdc <HAL_GPIO_Init+0x2e8>)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	3302      	adds	r3, #2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ff4 <HAL_GPIO_Init+0x300>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f30:	4a30      	ldr	r2, [pc, #192]	@ (8003ff4 <HAL_GPIO_Init+0x300>)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f36:	4b2f      	ldr	r3, [pc, #188]	@ (8003ff4 <HAL_GPIO_Init+0x300>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f5a:	4a26      	ldr	r2, [pc, #152]	@ (8003ff4 <HAL_GPIO_Init+0x300>)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f60:	4b24      	ldr	r3, [pc, #144]	@ (8003ff4 <HAL_GPIO_Init+0x300>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff4 <HAL_GPIO_Init+0x300>)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff4 <HAL_GPIO_Init+0x300>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4013      	ands	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fae:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <HAL_GPIO_Init+0x300>)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f47f ae9d 	bne.w	8003d04 <HAL_GPIO_Init+0x10>
  }
}
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	48000400 	.word	0x48000400
 8003fe4:	48000800 	.word	0x48000800
 8003fe8:	48000c00 	.word	0x48000c00
 8003fec:	48001000 	.word	0x48001000
 8003ff0:	48001400 	.word	0x48001400
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e001      	b.n	800401a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
 8004034:	4613      	mov	r3, r2
 8004036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004044:	e002      	b.n	800404c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d141      	bne.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004066:	4b4b      	ldr	r3, [pc, #300]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004072:	d131      	bne.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004074:	4b47      	ldr	r3, [pc, #284]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800407a:	4a46      	ldr	r2, [pc, #280]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004084:	4b43      	ldr	r3, [pc, #268]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800408c:	4a41      	ldr	r2, [pc, #260]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004094:	4b40      	ldr	r3, [pc, #256]	@ (8004198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2232      	movs	r2, #50	@ 0x32
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	4a3f      	ldr	r2, [pc, #252]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	0c9b      	lsrs	r3, r3, #18
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040aa:	e002      	b.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040b2:	4b38      	ldr	r3, [pc, #224]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040be:	d102      	bne.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f2      	bne.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c6:	4b33      	ldr	r3, [pc, #204]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d2:	d158      	bne.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e057      	b.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040de:	4a2d      	ldr	r2, [pc, #180]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040e8:	e04d      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f0:	d141      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040f2:	4b28      	ldr	r3, [pc, #160]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fe:	d131      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004100:	4b24      	ldr	r3, [pc, #144]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004106:	4a23      	ldr	r2, [pc, #140]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004110:	4b20      	ldr	r3, [pc, #128]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004118:	4a1e      	ldr	r2, [pc, #120]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800411e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2232      	movs	r2, #50	@ 0x32
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	4a1c      	ldr	r2, [pc, #112]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004136:	e002      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414a:	d102      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f2      	bne.n	8004138 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004152:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d112      	bne.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e011      	b.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004164:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800416a:	4a0a      	ldr	r2, [pc, #40]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004170:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004174:	e007      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004176:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800417e:	4a05      	ldr	r2, [pc, #20]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004180:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004184:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40007000 	.word	0x40007000
 8004198:	20000004 	.word	0x20000004
 800419c:	431bde83 	.word	0x431bde83

080041a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a04      	ldr	r2, [pc, #16]	@ (80041bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041ae:	6093      	str	r3, [r2, #8]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40007000 	.word	0x40007000

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e2fe      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d075      	beq.n	80042ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041de:	4b97      	ldr	r3, [pc, #604]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e8:	4b94      	ldr	r3, [pc, #592]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_OscConfig+0x3e>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d002      	beq.n	8004204 <HAL_RCC_OscConfig+0x44>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d10b      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	4b8d      	ldr	r3, [pc, #564]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05b      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e2d9      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x74>
 8004226:	4b85      	ldr	r3, [pc, #532]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a84      	ldr	r2, [pc, #528]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x98>
 800423e:	4b7f      	ldr	r3, [pc, #508]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7e      	ldr	r2, [pc, #504]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b7c      	ldr	r3, [pc, #496]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7b      	ldr	r2, [pc, #492]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004258:	4b78      	ldr	r3, [pc, #480]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a77      	ldr	r2, [pc, #476]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b75      	ldr	r3, [pc, #468]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a74      	ldr	r2, [pc, #464]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800426e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7ff f978 	bl	800356c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7ff f974 	bl	800356c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	@ 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e29e      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004292:	4b6a      	ldr	r3, [pc, #424]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xc0>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7ff f964 	bl	800356c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7ff f960 	bl	800356c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e28a      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ba:	4b60      	ldr	r3, [pc, #384]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d075      	beq.n	80043c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e0:	4b56      	ldr	r3, [pc, #344]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d102      	bne.n	80042f6 <HAL_RCC_OscConfig+0x136>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d002      	beq.n	80042fc <HAL_RCC_OscConfig+0x13c>
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d11f      	bne.n	800433c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fc:	4b4f      	ldr	r3, [pc, #316]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x154>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e25d      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004314:	4b49      	ldr	r3, [pc, #292]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	4946      	ldr	r1, [pc, #280]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004328:	4b45      	ldr	r3, [pc, #276]	@ (8004440 <HAL_RCC_OscConfig+0x280>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff f8d1 	bl	80034d4 <HAL_InitTick>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d043      	beq.n	80043c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e249      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004344:	4b3d      	ldr	r3, [pc, #244]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3c      	ldr	r2, [pc, #240]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800434a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7ff f90c 	bl	800356c <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004358:	f7ff f908 	bl	800356c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e232      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800436a:	4b34      	ldr	r3, [pc, #208]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	4b31      	ldr	r3, [pc, #196]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	492d      	ldr	r1, [pc, #180]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]
 800438a:	e01a      	b.n	80043c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438c:	4b2b      	ldr	r3, [pc, #172]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2a      	ldr	r2, [pc, #168]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004392:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7ff f8e8 	bl	800356c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a0:	f7ff f8e4 	bl	800356c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e20e      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b2:	4b22      	ldr	r3, [pc, #136]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1e0>
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d041      	beq.n	8004452 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01c      	beq.n	8004410 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d6:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80043d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7ff f8c1 	bl	800356c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ee:	f7ff f8bd 	bl	800356c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e1e7      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004400:	4b0e      	ldr	r3, [pc, #56]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0ef      	beq.n	80043ee <HAL_RCC_OscConfig+0x22e>
 800440e:	e020      	b.n	8004452 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004410:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004416:	4a09      	ldr	r2, [pc, #36]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7ff f8a4 	bl	800356c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004426:	e00d      	b.n	8004444 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004428:	f7ff f8a0 	bl	800356c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d906      	bls.n	8004444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1ca      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004444:	4b8c      	ldr	r3, [pc, #560]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ea      	bne.n	8004428 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80a6 	beq.w	80045ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004460:	2300      	movs	r3, #0
 8004462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004464:	4b84      	ldr	r3, [pc, #528]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x2b4>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x2b6>
 8004474:	2300      	movs	r3, #0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447a:	4b7f      	ldr	r3, [pc, #508]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	4a7e      	ldr	r2, [pc, #504]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004484:	6593      	str	r3, [r2, #88]	@ 0x58
 8004486:	4b7c      	ldr	r3, [pc, #496]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004492:	2301      	movs	r3, #1
 8004494:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004496:	4b79      	ldr	r3, [pc, #484]	@ (800467c <HAL_RCC_OscConfig+0x4bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d118      	bne.n	80044d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a2:	4b76      	ldr	r3, [pc, #472]	@ (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a75      	ldr	r2, [pc, #468]	@ (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ae:	f7ff f85d 	bl	800356c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b6:	f7ff f859 	bl	800356c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e183      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c8:	4b6c      	ldr	r3, [pc, #432]	@ (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d108      	bne.n	80044ee <HAL_RCC_OscConfig+0x32e>
 80044dc:	4b66      	ldr	r3, [pc, #408]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e2:	4a65      	ldr	r2, [pc, #404]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ec:	e024      	b.n	8004538 <HAL_RCC_OscConfig+0x378>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d110      	bne.n	8004518 <HAL_RCC_OscConfig+0x358>
 80044f6:	4b60      	ldr	r3, [pc, #384]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004506:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450c:	4a5a      	ldr	r2, [pc, #360]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004516:	e00f      	b.n	8004538 <HAL_RCC_OscConfig+0x378>
 8004518:	4b57      	ldr	r3, [pc, #348]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	4a56      	ldr	r2, [pc, #344]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004528:	4b53      	ldr	r3, [pc, #332]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452e:	4a52      	ldr	r2, [pc, #328]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7ff f814 	bl	800356c <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7ff f810 	bl	800356c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e138      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455e:	4b46      	ldr	r3, [pc, #280]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ed      	beq.n	8004548 <HAL_RCC_OscConfig+0x388>
 800456c:	e015      	b.n	800459a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fe fffd 	bl	800356c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fe fff9 	bl	800356c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e121      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800458c:	4b3a      	ldr	r3, [pc, #232]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ed      	bne.n	8004576 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800459a:	7ffb      	ldrb	r3, [r7, #31]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a0:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	4a34      	ldr	r2, [pc, #208]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d03c      	beq.n	8004632 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01c      	beq.n	80045fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fe ffcc 	bl	800356c <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d8:	f7fe ffc8 	bl	800356c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0f2      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ea:	4b23      	ldr	r3, [pc, #140]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <HAL_RCC_OscConfig+0x418>
 80045f8:	e01b      	b.n	8004632 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004600:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fe ffaf 	bl	800356c <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004612:	f7fe ffab 	bl	800356c <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0d5      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004624:	4b14      	ldr	r3, [pc, #80]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ef      	bne.n	8004612 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80c9 	beq.w	80047ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463c:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b0c      	cmp	r3, #12
 8004646:	f000 8083 	beq.w	8004750 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d15e      	bne.n	8004710 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a08      	ldr	r2, [pc, #32]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004658:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800465c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fe ff85 	bl	800356c <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004664:	e00c      	b.n	8004680 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004666:	f7fe ff81 	bl	800356c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d905      	bls.n	8004680 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0ab      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004680:	4b55      	ldr	r3, [pc, #340]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ec      	bne.n	8004666 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468c:	4b52      	ldr	r3, [pc, #328]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	4b52      	ldr	r3, [pc, #328]	@ (80047dc <HAL_RCC_OscConfig+0x61c>)
 8004692:	4013      	ands	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6a11      	ldr	r1, [r2, #32]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800469c:	3a01      	subs	r2, #1
 800469e:	0112      	lsls	r2, r2, #4
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046a6:	0212      	lsls	r2, r2, #8
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046ae:	0852      	lsrs	r2, r2, #1
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0552      	lsls	r2, r2, #21
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046ba:	0852      	lsrs	r2, r2, #1
 80046bc:	3a01      	subs	r2, #1
 80046be:	0652      	lsls	r2, r2, #25
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046c6:	06d2      	lsls	r2, r2, #27
 80046c8:	430a      	orrs	r2, r1
 80046ca:	4943      	ldr	r1, [pc, #268]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d0:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a40      	ldr	r2, [pc, #256]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046dc:	4b3e      	ldr	r3, [pc, #248]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a3d      	ldr	r2, [pc, #244]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fe ff40 	bl	800356c <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fe ff3c 	bl	800356c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e066      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004702:	4b35      	ldr	r3, [pc, #212]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x530>
 800470e:	e05e      	b.n	80047ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004710:	4b31      	ldr	r3, [pc, #196]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a30      	ldr	r2, [pc, #192]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800471a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe ff26 	bl	800356c <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fe ff22 	bl	800356c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e04c      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004736:	4b28      	ldr	r3, [pc, #160]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004742:	4b25      	ldr	r3, [pc, #148]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	4924      	ldr	r1, [pc, #144]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004748:	4b25      	ldr	r3, [pc, #148]	@ (80047e0 <HAL_RCC_OscConfig+0x620>)
 800474a:	4013      	ands	r3, r2
 800474c:	60cb      	str	r3, [r1, #12]
 800474e:	e03e      	b.n	80047ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e039      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800475c:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f003 0203 	and.w	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	429a      	cmp	r2, r3
 800476e:	d12c      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	3b01      	subs	r3, #1
 800477c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d123      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d11b      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d113      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	3b01      	subs	r3, #1
 80047b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	3b01      	subs	r3, #1
 80047c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d001      	beq.n	80047ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000
 80047dc:	019f800c 	.word	0x019f800c
 80047e0:	feeefffc 	.word	0xfeeefffc

080047e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e11e      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b91      	ldr	r3, [pc, #580]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d910      	bls.n	800482c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b8e      	ldr	r3, [pc, #568]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 020f 	bic.w	r2, r3, #15
 8004812:	498c      	ldr	r1, [pc, #560]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b8a      	ldr	r3, [pc, #552]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e106      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d073      	beq.n	8004920 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d129      	bne.n	8004894 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004840:	4b81      	ldr	r3, [pc, #516]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0f4      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004850:	f000 f99e 	bl	8004b90 <RCC_GetSysClockFreqFromPLLSource>
 8004854:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4a7c      	ldr	r2, [pc, #496]	@ (8004a4c <HAL_RCC_ClockConfig+0x268>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d93f      	bls.n	80048de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800485e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d033      	beq.n	80048de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800487a:	2b00      	cmp	r3, #0
 800487c:	d12f      	bne.n	80048de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800487e:	4b72      	ldr	r3, [pc, #456]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004886:	4a70      	ldr	r2, [pc, #448]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800488e:	2380      	movs	r3, #128	@ 0x80
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e024      	b.n	80048de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d107      	bne.n	80048ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0c6      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ac:	4b66      	ldr	r3, [pc, #408]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0be      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048bc:	f000 f8ce 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4a61      	ldr	r2, [pc, #388]	@ (8004a4c <HAL_RCC_ClockConfig+0x268>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d909      	bls.n	80048de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048da:	2380      	movs	r3, #128	@ 0x80
 80048dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b5a      	ldr	r3, [pc, #360]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4957      	ldr	r1, [pc, #348]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fe fe3c 	bl	800356c <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fe fe38 	bl	800356c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e095      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b43      	ldr	r3, [pc, #268]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a42      	ldr	r2, [pc, #264]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800493e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004942:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004950:	4b3d      	ldr	r3, [pc, #244]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004958:	4a3b      	ldr	r2, [pc, #236]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800495a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800495e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b39      	ldr	r3, [pc, #228]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4936      	ldr	r1, [pc, #216]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
 8004972:	e008      	b.n	8004986 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b80      	cmp	r3, #128	@ 0x80
 8004978:	d105      	bne.n	8004986 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800497a:	4b33      	ldr	r3, [pc, #204]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4a32      	ldr	r2, [pc, #200]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004980:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004984:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004986:	4b2f      	ldr	r3, [pc, #188]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d21d      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004994:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 020f 	bic.w	r2, r3, #15
 800499c:	4929      	ldr	r1, [pc, #164]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049a4:	f7fe fde2 	bl	800356c <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fe fdde 	bl	800356c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e03b      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d1ed      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4917      	ldr	r1, [pc, #92]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fa:	4b13      	ldr	r3, [pc, #76]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	490f      	ldr	r1, [pc, #60]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a0e:	f000 f825 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	490c      	ldr	r1, [pc, #48]	@ (8004a50 <HAL_RCC_ClockConfig+0x26c>)
 8004a20:	5ccb      	ldrb	r3, [r1, r3]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <HAL_RCC_ClockConfig+0x270>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_RCC_ClockConfig+0x274>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fd4e 	bl	80034d4 <HAL_InitTick>
 8004a38:	4603      	mov	r3, r0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40022000 	.word	0x40022000
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	04c4b400 	.word	0x04c4b400
 8004a50:	0800f2bc 	.word	0x0800f2bc
 8004a54:	20000004 	.word	0x20000004
 8004a58:	20000008 	.word	0x20000008

08004a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a62:	4b2c      	ldr	r3, [pc, #176]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e047      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a74:	4b27      	ldr	r3, [pc, #156]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a80:	4b26      	ldr	r3, [pc, #152]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e03e      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a86:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d136      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a92:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d10c      	bne.n	8004aca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aba:	68d2      	ldr	r2, [r2, #12]
 8004abc:	0a12      	lsrs	r2, r2, #8
 8004abe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	617b      	str	r3, [r7, #20]
      break;
 8004ac8:	e00c      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aca:	4a13      	ldr	r2, [pc, #76]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	4a10      	ldr	r2, [pc, #64]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	0a12      	lsrs	r2, r2, #8
 8004ad8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
      break;
 8004ae2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0e5b      	lsrs	r3, r3, #25
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	3301      	adds	r3, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e001      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b04:	693b      	ldr	r3, [r7, #16]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200

08004b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000004 	.word	0x20000004

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4904      	ldr	r1, [pc, #16]	@ (8004b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	0800f2cc 	.word	0x0800f2cc

08004b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b68:	f7ff ffda 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0adb      	lsrs	r3, r3, #11
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4904      	ldr	r1, [pc, #16]	@ (8004b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	0800f2cc 	.word	0x0800f2cc

08004b90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b96:	4b1e      	ldr	r3, [pc, #120]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d10c      	bne.n	8004bce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bb4:	4a17      	ldr	r2, [pc, #92]	@ (8004c14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	4a14      	ldr	r2, [pc, #80]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bbe:	68d2      	ldr	r2, [r2, #12]
 8004bc0:	0a12      	lsrs	r2, r2, #8
 8004bc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	617b      	str	r3, [r7, #20]
    break;
 8004bcc:	e00c      	b.n	8004be8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bce:	4a12      	ldr	r2, [pc, #72]	@ (8004c18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd8:	68d2      	ldr	r2, [r2, #12]
 8004bda:	0a12      	lsrs	r2, r2, #8
 8004bdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]
    break;
 8004be6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004be8:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	0e5b      	lsrs	r3, r3, #25
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c02:	687b      	ldr	r3, [r7, #4]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40021000 	.word	0x40021000
 8004c14:	007a1200 	.word	0x007a1200
 8004c18:	00f42400 	.word	0x00f42400

08004c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c24:	2300      	movs	r3, #0
 8004c26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c28:	2300      	movs	r3, #0
 8004c2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8098 	beq.w	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3e:	4b43      	ldr	r3, [pc, #268]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10d      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c56:	4b3d      	ldr	r3, [pc, #244]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c62:	2301      	movs	r3, #1
 8004c64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c66:	4b3a      	ldr	r3, [pc, #232]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a39      	ldr	r2, [pc, #228]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c72:	f7fe fc7b 	bl	800356c <HAL_GetTick>
 8004c76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c78:	e009      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7a:	f7fe fc77 	bl	800356c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d902      	bls.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c8c:	e005      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c8e:	4b30      	ldr	r3, [pc, #192]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ef      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d159      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004caa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01e      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d019      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cbc:	4b23      	ldr	r3, [pc, #140]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc8:	4b20      	ldr	r3, [pc, #128]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	4a1f      	ldr	r2, [pc, #124]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	4a1b      	ldr	r2, [pc, #108]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce8:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fe fc37 	bl	800356c <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d00:	e00b      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fe fc33 	bl	800356c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d902      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	74fb      	strb	r3, [r7, #19]
            break;
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ec      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2e:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	4903      	ldr	r1, [pc, #12]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d44:	e008      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	74bb      	strb	r3, [r7, #18]
 8004d4a:	e005      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d58:	7c7b      	ldrb	r3, [r7, #17]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d105      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5e:	4ba6      	ldr	r3, [pc, #664]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d62:	4aa5      	ldr	r2, [pc, #660]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d76:	4ba0      	ldr	r3, [pc, #640]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7c:	f023 0203 	bic.w	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	499c      	ldr	r1, [pc, #624]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d98:	4b97      	ldr	r3, [pc, #604]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	f023 020c 	bic.w	r2, r3, #12
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4994      	ldr	r1, [pc, #592]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dba:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	498b      	ldr	r1, [pc, #556]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ddc:	4b86      	ldr	r3, [pc, #536]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	4983      	ldr	r1, [pc, #524]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	497a      	ldr	r1, [pc, #488]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e20:	4b75      	ldr	r3, [pc, #468]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	4972      	ldr	r1, [pc, #456]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e42:	4b6d      	ldr	r3, [pc, #436]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4969      	ldr	r1, [pc, #420]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e64:	4b64      	ldr	r3, [pc, #400]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4961      	ldr	r1, [pc, #388]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e86:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	4958      	ldr	r1, [pc, #352]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea8:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	4950      	ldr	r1, [pc, #320]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec6:	d105      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ed2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee0:	4b45      	ldr	r3, [pc, #276]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4942      	ldr	r1, [pc, #264]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004efe:	d105      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f00:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a3c      	ldr	r2, [pc, #240]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f18:	4b37      	ldr	r3, [pc, #220]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	4934      	ldr	r1, [pc, #208]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f36:	d105      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f38:	4b2f      	ldr	r3, [pc, #188]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d015      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f50:	4b29      	ldr	r3, [pc, #164]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	4926      	ldr	r1, [pc, #152]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f70:	4b21      	ldr	r3, [pc, #132]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	4918      	ldr	r1, [pc, #96]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4a12      	ldr	r2, [pc, #72]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fce:	490a      	ldr	r1, [pc, #40]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fde:	d105      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fe0:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	.word	0x40021000

08004ffc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e09d      	b.n	800514a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d108      	bne.n	8005028 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800501e:	d009      	beq.n	8005034 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	61da      	str	r2, [r3, #28]
 8005026:	e005      	b.n	8005034 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fd ff20 	bl	8002e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800506a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005074:	d902      	bls.n	800507c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e002      	b.n	8005082 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800507c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005080:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800508a:	d007      	beq.n	800509c <HAL_SPI_Init+0xa0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005094:	d002      	beq.n	800509c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050de:	ea42 0103 	orr.w	r1, r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	0c1b      	lsrs	r3, r3, #16
 80050f8:	f003 0204 	and.w	r2, r3, #4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005118:	ea42 0103 	orr.w	r1, r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b088      	sub	sp, #32
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005162:	f7fe fa03 	bl	800356c <HAL_GetTick>
 8005166:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d001      	beq.n	800517c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
 800517a:	e15c      	b.n	8005436 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_SPI_Transmit+0x36>
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e154      	b.n	8005436 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_SPI_Transmit+0x48>
 8005196:	2302      	movs	r3, #2
 8005198:	e14d      	b.n	8005436 <HAL_SPI_Transmit+0x2e4>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2203      	movs	r2, #3
 80051a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ec:	d10f      	bne.n	800520e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800520c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005218:	2b40      	cmp	r3, #64	@ 0x40
 800521a:	d007      	beq.n	800522c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005234:	d952      	bls.n	80052dc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_SPI_Transmit+0xf2>
 800523e:	8b7b      	ldrh	r3, [r7, #26]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d145      	bne.n	80052d0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005268:	e032      	b.n	80052d0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d112      	bne.n	800529e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	881a      	ldrh	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	1c9a      	adds	r2, r3, #2
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800529c:	e018      	b.n	80052d0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800529e:	f7fe f965 	bl	800356c <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d803      	bhi.n	80052b6 <HAL_SPI_Transmit+0x164>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d102      	bne.n	80052bc <HAL_SPI_Transmit+0x16a>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d109      	bne.n	80052d0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e0b2      	b.n	8005436 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1c7      	bne.n	800526a <HAL_SPI_Transmit+0x118>
 80052da:	e083      	b.n	80053e4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_SPI_Transmit+0x198>
 80052e4:	8b7b      	ldrh	r3, [r7, #26]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d177      	bne.n	80053da <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d912      	bls.n	800531a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	881a      	ldrh	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	1c9a      	adds	r2, r3, #2
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b02      	subs	r3, #2
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005318:	e05f      	b.n	80053da <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005340:	e04b      	b.n	80053da <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d12b      	bne.n	80053a8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	d912      	bls.n	8005380 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	881a      	ldrh	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536a:	1c9a      	adds	r2, r3, #2
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b02      	subs	r3, #2
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800537e:	e02c      	b.n	80053da <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053a6:	e018      	b.n	80053da <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a8:	f7fe f8e0 	bl	800356c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d803      	bhi.n	80053c0 <HAL_SPI_Transmit+0x26e>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d102      	bne.n	80053c6 <HAL_SPI_Transmit+0x274>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e02d      	b.n	8005436 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ae      	bne.n	8005342 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fb65 	bl	8005ab8 <SPI_EndRxTxTransaction>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005434:	2300      	movs	r3, #0
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3720      	adds	r7, #32
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b08a      	sub	sp, #40	@ 0x28
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800544c:	2301      	movs	r3, #1
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005450:	f7fe f88c 	bl	800356c <HAL_GetTick>
 8005454:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800545c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005464:	887b      	ldrh	r3, [r7, #2]
 8005466:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005468:	887b      	ldrh	r3, [r7, #2]
 800546a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800546c:	7ffb      	ldrb	r3, [r7, #31]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d00c      	beq.n	800548c <HAL_SPI_TransmitReceive+0x4e>
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005478:	d106      	bne.n	8005488 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <HAL_SPI_TransmitReceive+0x4a>
 8005482:	7ffb      	ldrb	r3, [r7, #31]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d001      	beq.n	800548c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
 800548a:	e1f3      	b.n	8005874 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_SPI_TransmitReceive+0x60>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_SPI_TransmitReceive+0x60>
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e1e8      	b.n	8005874 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x72>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e1e1      	b.n	8005874 <HAL_SPI_TransmitReceive+0x436>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d003      	beq.n	80054cc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2205      	movs	r2, #5
 80054c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	887a      	ldrh	r2, [r7, #2]
 80054e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	887a      	ldrh	r2, [r7, #2]
 80054f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	887a      	ldrh	r2, [r7, #2]
 80054f8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800550e:	d802      	bhi.n	8005516 <HAL_SPI_TransmitReceive+0xd8>
 8005510:	8abb      	ldrh	r3, [r7, #20]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d908      	bls.n	8005528 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	e007      	b.n	8005538 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005542:	2b40      	cmp	r3, #64	@ 0x40
 8005544:	d007      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800555e:	f240 8083 	bls.w	8005668 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x132>
 800556a:	8afb      	ldrh	r3, [r7, #22]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d16f      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	881a      	ldrh	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005594:	e05c      	b.n	8005650 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d11b      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x19e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x19e>
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d113      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d11c      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x1e6>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	b292      	uxth	r2, r2
 8005602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005620:	2301      	movs	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005624:	f7fd ffa2 	bl	800356c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005630:	429a      	cmp	r2, r3
 8005632:	d80d      	bhi.n	8005650 <HAL_SPI_TransmitReceive+0x212>
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d009      	beq.n	8005650 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e111      	b.n	8005874 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19d      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x158>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d197      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x158>
 8005666:	e0e5      	b.n	8005834 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_SPI_TransmitReceive+0x23a>
 8005670:	8afb      	ldrh	r3, [r7, #22]
 8005672:	2b01      	cmp	r3, #1
 8005674:	f040 80d1 	bne.w	800581a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b01      	cmp	r3, #1
 8005680:	d912      	bls.n	80056a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005692:	1c9a      	adds	r2, r3, #2
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b02      	subs	r3, #2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056a6:	e0b8      	b.n	800581a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ce:	e0a4      	b.n	800581a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d134      	bne.n	8005748 <HAL_SPI_TransmitReceive+0x30a>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d02f      	beq.n	8005748 <HAL_SPI_TransmitReceive+0x30a>
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d12c      	bne.n	8005748 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d912      	bls.n	800571e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b02      	subs	r3, #2
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800571c:	e012      	b.n	8005744 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d148      	bne.n	80057e8 <HAL_SPI_TransmitReceive+0x3aa>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d042      	beq.n	80057e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	d923      	bls.n	80057b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	b292      	uxth	r2, r2
 800577a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	1c9a      	adds	r2, r3, #2
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b02      	subs	r3, #2
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d81f      	bhi.n	80057e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057b2:	605a      	str	r2, [r3, #4]
 80057b4:	e016      	b.n	80057e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f103 020c 	add.w	r2, r3, #12
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057e4:	2301      	movs	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057e8:	f7fd fec0 	bl	800356c <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d803      	bhi.n	8005800 <HAL_SPI_TransmitReceive+0x3c2>
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d102      	bne.n	8005806 <HAL_SPI_TransmitReceive+0x3c8>
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e02c      	b.n	8005874 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	f47f af55 	bne.w	80056d0 <HAL_SPI_TransmitReceive+0x292>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	f47f af4e 	bne.w	80056d0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f93d 	bl	8005ab8 <SPI_EndRxTxTransaction>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e00e      	b.n	8005874 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005872:	2300      	movs	r3, #0
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3728      	adds	r7, #40	@ 0x28
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800588c:	f7fd fe6e 	bl	800356c <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4413      	add	r3, r2
 800589a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800589c:	f7fd fe66 	bl	800356c <HAL_GetTick>
 80058a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058a2:	4b39      	ldr	r3, [pc, #228]	@ (8005988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	015b      	lsls	r3, r3, #5
 80058a8:	0d1b      	lsrs	r3, r3, #20
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b2:	e054      	b.n	800595e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d050      	beq.n	800595e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058bc:	f7fd fe56 	bl	800356c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d902      	bls.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d13d      	bne.n	800594e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ea:	d111      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f4:	d004      	beq.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fe:	d107      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800590e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005918:	d10f      	bne.n	800593a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e017      	b.n	800597e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3b01      	subs	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d19b      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000004 	.word	0x20000004

0800598c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	@ 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800599e:	f7fd fde5 	bl	800356c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	4413      	add	r3, r2
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80059ae:	f7fd fddd 	bl	800356c <HAL_GetTick>
 80059b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059bc:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	00da      	lsls	r2, r3, #3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	0d1b      	lsrs	r3, r3, #20
 80059cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80059d4:	e060      	b.n	8005a98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80059dc:	d107      	bne.n	80059ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d104      	bne.n	80059ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d050      	beq.n	8005a98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059f6:	f7fd fdb9 	bl	800356c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d902      	bls.n	8005a0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d13d      	bne.n	8005a88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a24:	d111      	bne.n	8005a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a2e:	d004      	beq.n	8005a3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a38:	d107      	bne.n	8005a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a52:	d10f      	bne.n	8005a74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e010      	b.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d196      	bne.n	80059d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3728      	adds	r7, #40	@ 0x28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000004 	.word	0x20000004

08005ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff ff5b 	bl	800598c <SPI_WaitFifoStateUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae0:	f043 0220 	orr.w	r2, r3, #32
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e027      	b.n	8005b3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	2180      	movs	r1, #128	@ 0x80
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fec0 	bl	800587c <SPI_WaitFlagStateUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e014      	b.n	8005b3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff ff34 	bl	800598c <SPI_WaitFifoStateUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2e:	f043 0220 	orr.w	r2, r3, #32
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e000      	b.n	8005b3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e042      	b.n	8005bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fd fc11 	bl	8003390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2224      	movs	r2, #36	@ 0x24
 8005b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 ff30 	bl	80069f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fc61 	bl	800645c <UART_SetConfig>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e01b      	b.n	8005bdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 ffaf 	bl	8006b38 <UART_CheckIdleState>
 8005bda:	4603      	mov	r3, r0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	@ 0x28
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d17b      	bne.n	8005cf6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_UART_Transmit+0x26>
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e074      	b.n	8005cf8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2221      	movs	r2, #33	@ 0x21
 8005c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c1e:	f7fd fca5 	bl	800356c <HAL_GetTick>
 8005c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3c:	d108      	bne.n	8005c50 <HAL_UART_Transmit+0x6c>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	e003      	b.n	8005c58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c58:	e030      	b.n	8005cbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2200      	movs	r2, #0
 8005c62:	2180      	movs	r1, #128	@ 0x80
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f001 f811 	bl	8006c8c <UART_WaitOnFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e03d      	b.n	8005cf8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	3302      	adds	r3, #2
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e007      	b.n	8005caa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	781a      	ldrb	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1c8      	bne.n	8005c5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2140      	movs	r1, #64	@ 0x40
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 ffda 	bl	8006c8c <UART_WaitOnFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e006      	b.n	8005cf8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e000      	b.n	8005cf8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005cf6:	2302      	movs	r3, #2
  }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	@ 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d137      	bne.n	8005d88 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_UART_Receive_IT+0x24>
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e030      	b.n	8005d8a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a18      	ldr	r2, [pc, #96]	@ (8005d94 <HAL_UART_Receive_IT+0x94>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d01f      	beq.n	8005d78 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	613b      	str	r3, [r7, #16]
   return(result);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	623b      	str	r3, [r7, #32]
 8005d66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	69f9      	ldr	r1, [r7, #28]
 8005d6a:	6a3a      	ldr	r2, [r7, #32]
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e6      	bne.n	8005d46 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fff2 	bl	8006d68 <UART_Start_Receive_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	e000      	b.n	8005d8a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3728      	adds	r7, #40	@ 0x28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40008000 	.word	0x40008000

08005d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005dc2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11b      	bne.n	8005e0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d015      	beq.n	8005e0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8300 	beq.w	8006402 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4798      	blx	r3
      }
      return;
 8005e0a:	e2fa      	b.n	8006402 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8123 	beq.w	800605c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8006050 <HAL_UART_IRQHandler+0x2b8>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e26:	4b8b      	ldr	r3, [pc, #556]	@ (8006054 <HAL_UART_IRQHandler+0x2bc>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8116 	beq.w	800605c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d011      	beq.n	8005e60 <HAL_UART_IRQHandler+0xc8>
 8005e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e56:	f043 0201 	orr.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d011      	beq.n	8005e90 <HAL_UART_IRQHandler+0xf8>
 8005e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e86:	f043 0204 	orr.w	r2, r3, #4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d011      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x128>
 8005e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2204      	movs	r2, #4
 8005eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb6:	f043 0202 	orr.w	r2, r3, #2
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d017      	beq.n	8005efc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ed8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005edc:	4b5c      	ldr	r3, [pc, #368]	@ (8006050 <HAL_UART_IRQHandler+0x2b8>)
 8005ede:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef2:	f043 0208 	orr.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d012      	beq.n	8005f2e <HAL_UART_IRQHandler+0x196>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00c      	beq.n	8005f2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8266 	beq.w	8006406 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d013      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d105      	bne.n	8005f5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d005      	beq.n	8005f92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d054      	beq.n	800603c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 f80a 	bl	8006fac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b40      	cmp	r3, #64	@ 0x40
 8005fa4:	d146      	bne.n	8006034 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1d9      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d017      	beq.n	800602c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006002:	4a15      	ldr	r2, [pc, #84]	@ (8006058 <HAL_UART_IRQHandler+0x2c0>)
 8006004:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800600c:	4618      	mov	r0, r3
 800600e:	f7fd fcf8 	bl	8003a02 <HAL_DMA_Abort_IT>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d019      	beq.n	800604c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006026:	4610      	mov	r0, r2
 8006028:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602a:	e00f      	b.n	800604c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f9ff 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006032:	e00b      	b.n	800604c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f9fb 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603a:	e007      	b.n	800604c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f9f7 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800604a:	e1dc      	b.n	8006406 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	bf00      	nop
    return;
 800604e:	e1da      	b.n	8006406 <HAL_UART_IRQHandler+0x66e>
 8006050:	10000001 	.word	0x10000001
 8006054:	04000120 	.word	0x04000120
 8006058:	08007079 	.word	0x08007079

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006060:	2b01      	cmp	r3, #1
 8006062:	f040 8170 	bne.w	8006346 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8169 	beq.w	8006346 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8162 	beq.w	8006346 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2210      	movs	r2, #16
 8006088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006094:	2b40      	cmp	r3, #64	@ 0x40
 8006096:	f040 80d8 	bne.w	800624a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80af 	beq.w	8006210 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060bc:	429a      	cmp	r2, r3
 80060be:	f080 80a7 	bcs.w	8006210 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 8087 	bne.w	80061ee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800610a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800610e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1da      	bne.n	80060e0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3308      	adds	r3, #8
 8006130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800613a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800614e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e1      	bne.n	800612a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800617c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3308      	adds	r3, #8
 8006186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800618a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800618c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e3      	bne.n	8006166 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061bc:	f023 0310 	bic.w	r3, r3, #16
 80061c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e4      	bne.n	80061ac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fd fbb1 	bl	8003950 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006200:	b29b      	uxth	r3, r3
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	b29b      	uxth	r3, r3
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f91b 	bl	8006444 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800620e:	e0fc      	b.n	800640a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800621a:	429a      	cmp	r2, r3
 800621c:	f040 80f5 	bne.w	800640a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b20      	cmp	r3, #32
 8006230:	f040 80eb 	bne.w	800640a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8fe 	bl	8006444 <HAL_UARTEx_RxEventCallback>
      return;
 8006248:	e0df      	b.n	800640a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006256:	b29b      	uxth	r3, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80d1 	beq.w	800640e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800626c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80cc 	beq.w	800640e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006286:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800628a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006298:	647b      	str	r3, [r7, #68]	@ 0x44
 800629a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800629e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e4      	bne.n	8006276 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	623b      	str	r3, [r7, #32]
   return(result);
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80062d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e1      	bne.n	80062ac <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	60fb      	str	r3, [r7, #12]
   return(result);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f023 0310 	bic.w	r3, r3, #16
 8006310:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	69b9      	ldr	r1, [r7, #24]
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	617b      	str	r3, [r7, #20]
   return(result);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e4      	bne.n	80062fc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f880 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006344:	e063      	b.n	800640e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <HAL_UART_IRQHandler+0x5d8>
 8006352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006366:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fbe3 	bl	8007b34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800636e:	e051      	b.n	8006414 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006378:	2b00      	cmp	r3, #0
 800637a:	d014      	beq.n	80063a6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800637c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800638c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006398:	2b00      	cmp	r3, #0
 800639a:	d03a      	beq.n	8006412 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	4798      	blx	r3
    }
    return;
 80063a4:	e035      	b.n	8006412 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HAL_UART_IRQHandler+0x62e>
 80063b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fe6c 	bl	800709c <UART_EndTransmit_IT>
    return;
 80063c4:	e026      	b.n	8006414 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <HAL_UART_IRQHandler+0x64e>
 80063d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fbbc 	bl	8007b5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063e4:	e016      	b.n	8006414 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d010      	beq.n	8006414 <HAL_UART_IRQHandler+0x67c>
 80063f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da0c      	bge.n	8006414 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 fba4 	bl	8007b48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006400:	e008      	b.n	8006414 <HAL_UART_IRQHandler+0x67c>
      return;
 8006402:	bf00      	nop
 8006404:	e006      	b.n	8006414 <HAL_UART_IRQHandler+0x67c>
    return;
 8006406:	bf00      	nop
 8006408:	e004      	b.n	8006414 <HAL_UART_IRQHandler+0x67c>
      return;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <HAL_UART_IRQHandler+0x67c>
      return;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <HAL_UART_IRQHandler+0x67c>
    return;
 8006412:	bf00      	nop
  }
}
 8006414:	37e8      	adds	r7, #232	@ 0xe8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop

0800641c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800645c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006460:	b08c      	sub	sp, #48	@ 0x30
 8006462:	af00      	add	r7, sp, #0
 8006464:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	431a      	orrs	r2, r3
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	431a      	orrs	r2, r3
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	4313      	orrs	r3, r2
 8006482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4bab      	ldr	r3, [pc, #684]	@ (8006738 <UART_SetConfig+0x2dc>)
 800648c:	4013      	ands	r3, r2
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	6812      	ldr	r2, [r2, #0]
 8006492:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006494:	430b      	orrs	r3, r1
 8006496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4aa0      	ldr	r2, [pc, #640]	@ (800673c <UART_SetConfig+0x2e0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064c4:	4313      	orrs	r3, r2
 80064c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80064d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064dc:	430b      	orrs	r3, r1
 80064de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	f023 010f 	bic.w	r1, r3, #15
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a91      	ldr	r2, [pc, #580]	@ (8006740 <UART_SetConfig+0x2e4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d125      	bne.n	800654c <UART_SetConfig+0xf0>
 8006500:	4b90      	ldr	r3, [pc, #576]	@ (8006744 <UART_SetConfig+0x2e8>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b03      	cmp	r3, #3
 800650c:	d81a      	bhi.n	8006544 <UART_SetConfig+0xe8>
 800650e:	a201      	add	r2, pc, #4	@ (adr r2, 8006514 <UART_SetConfig+0xb8>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	08006525 	.word	0x08006525
 8006518:	08006535 	.word	0x08006535
 800651c:	0800652d 	.word	0x0800652d
 8006520:	0800653d 	.word	0x0800653d
 8006524:	2301      	movs	r3, #1
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800652a:	e0d6      	b.n	80066da <UART_SetConfig+0x27e>
 800652c:	2302      	movs	r3, #2
 800652e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006532:	e0d2      	b.n	80066da <UART_SetConfig+0x27e>
 8006534:	2304      	movs	r3, #4
 8006536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800653a:	e0ce      	b.n	80066da <UART_SetConfig+0x27e>
 800653c:	2308      	movs	r3, #8
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006542:	e0ca      	b.n	80066da <UART_SetConfig+0x27e>
 8006544:	2310      	movs	r3, #16
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800654a:	e0c6      	b.n	80066da <UART_SetConfig+0x27e>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a7d      	ldr	r2, [pc, #500]	@ (8006748 <UART_SetConfig+0x2ec>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d138      	bne.n	80065c8 <UART_SetConfig+0x16c>
 8006556:	4b7b      	ldr	r3, [pc, #492]	@ (8006744 <UART_SetConfig+0x2e8>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655c:	f003 030c 	and.w	r3, r3, #12
 8006560:	2b0c      	cmp	r3, #12
 8006562:	d82d      	bhi.n	80065c0 <UART_SetConfig+0x164>
 8006564:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <UART_SetConfig+0x110>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080065c1 	.word	0x080065c1
 8006574:	080065c1 	.word	0x080065c1
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065b1 	.word	0x080065b1
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065c1 	.word	0x080065c1
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065a9 	.word	0x080065a9
 8006590:	080065c1 	.word	0x080065c1
 8006594:	080065c1 	.word	0x080065c1
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065b9 	.word	0x080065b9
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065a6:	e098      	b.n	80066da <UART_SetConfig+0x27e>
 80065a8:	2302      	movs	r3, #2
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ae:	e094      	b.n	80066da <UART_SetConfig+0x27e>
 80065b0:	2304      	movs	r3, #4
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065b6:	e090      	b.n	80066da <UART_SetConfig+0x27e>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065be:	e08c      	b.n	80066da <UART_SetConfig+0x27e>
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c6:	e088      	b.n	80066da <UART_SetConfig+0x27e>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a5f      	ldr	r2, [pc, #380]	@ (800674c <UART_SetConfig+0x2f0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d125      	bne.n	800661e <UART_SetConfig+0x1c2>
 80065d2:	4b5c      	ldr	r3, [pc, #368]	@ (8006744 <UART_SetConfig+0x2e8>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065dc:	2b30      	cmp	r3, #48	@ 0x30
 80065de:	d016      	beq.n	800660e <UART_SetConfig+0x1b2>
 80065e0:	2b30      	cmp	r3, #48	@ 0x30
 80065e2:	d818      	bhi.n	8006616 <UART_SetConfig+0x1ba>
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d00a      	beq.n	80065fe <UART_SetConfig+0x1a2>
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d814      	bhi.n	8006616 <UART_SetConfig+0x1ba>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <UART_SetConfig+0x19a>
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d008      	beq.n	8006606 <UART_SetConfig+0x1aa>
 80065f4:	e00f      	b.n	8006616 <UART_SetConfig+0x1ba>
 80065f6:	2300      	movs	r3, #0
 80065f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fc:	e06d      	b.n	80066da <UART_SetConfig+0x27e>
 80065fe:	2302      	movs	r3, #2
 8006600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006604:	e069      	b.n	80066da <UART_SetConfig+0x27e>
 8006606:	2304      	movs	r3, #4
 8006608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660c:	e065      	b.n	80066da <UART_SetConfig+0x27e>
 800660e:	2308      	movs	r3, #8
 8006610:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006614:	e061      	b.n	80066da <UART_SetConfig+0x27e>
 8006616:	2310      	movs	r3, #16
 8006618:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800661c:	e05d      	b.n	80066da <UART_SetConfig+0x27e>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a4b      	ldr	r2, [pc, #300]	@ (8006750 <UART_SetConfig+0x2f4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d125      	bne.n	8006674 <UART_SetConfig+0x218>
 8006628:	4b46      	ldr	r3, [pc, #280]	@ (8006744 <UART_SetConfig+0x2e8>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006632:	2bc0      	cmp	r3, #192	@ 0xc0
 8006634:	d016      	beq.n	8006664 <UART_SetConfig+0x208>
 8006636:	2bc0      	cmp	r3, #192	@ 0xc0
 8006638:	d818      	bhi.n	800666c <UART_SetConfig+0x210>
 800663a:	2b80      	cmp	r3, #128	@ 0x80
 800663c:	d00a      	beq.n	8006654 <UART_SetConfig+0x1f8>
 800663e:	2b80      	cmp	r3, #128	@ 0x80
 8006640:	d814      	bhi.n	800666c <UART_SetConfig+0x210>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <UART_SetConfig+0x1f0>
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	d008      	beq.n	800665c <UART_SetConfig+0x200>
 800664a:	e00f      	b.n	800666c <UART_SetConfig+0x210>
 800664c:	2300      	movs	r3, #0
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006652:	e042      	b.n	80066da <UART_SetConfig+0x27e>
 8006654:	2302      	movs	r3, #2
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665a:	e03e      	b.n	80066da <UART_SetConfig+0x27e>
 800665c:	2304      	movs	r3, #4
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006662:	e03a      	b.n	80066da <UART_SetConfig+0x27e>
 8006664:	2308      	movs	r3, #8
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800666a:	e036      	b.n	80066da <UART_SetConfig+0x27e>
 800666c:	2310      	movs	r3, #16
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006672:	e032      	b.n	80066da <UART_SetConfig+0x27e>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a30      	ldr	r2, [pc, #192]	@ (800673c <UART_SetConfig+0x2e0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d12a      	bne.n	80066d4 <UART_SetConfig+0x278>
 800667e:	4b31      	ldr	r3, [pc, #196]	@ (8006744 <UART_SetConfig+0x2e8>)
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006684:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006688:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800668c:	d01a      	beq.n	80066c4 <UART_SetConfig+0x268>
 800668e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006692:	d81b      	bhi.n	80066cc <UART_SetConfig+0x270>
 8006694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006698:	d00c      	beq.n	80066b4 <UART_SetConfig+0x258>
 800669a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800669e:	d815      	bhi.n	80066cc <UART_SetConfig+0x270>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <UART_SetConfig+0x250>
 80066a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a8:	d008      	beq.n	80066bc <UART_SetConfig+0x260>
 80066aa:	e00f      	b.n	80066cc <UART_SetConfig+0x270>
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b2:	e012      	b.n	80066da <UART_SetConfig+0x27e>
 80066b4:	2302      	movs	r3, #2
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ba:	e00e      	b.n	80066da <UART_SetConfig+0x27e>
 80066bc:	2304      	movs	r3, #4
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c2:	e00a      	b.n	80066da <UART_SetConfig+0x27e>
 80066c4:	2308      	movs	r3, #8
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ca:	e006      	b.n	80066da <UART_SetConfig+0x27e>
 80066cc:	2310      	movs	r3, #16
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d2:	e002      	b.n	80066da <UART_SetConfig+0x27e>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a17      	ldr	r2, [pc, #92]	@ (800673c <UART_SetConfig+0x2e0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	f040 80a8 	bne.w	8006836 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d834      	bhi.n	8006758 <UART_SetConfig+0x2fc>
 80066ee:	a201      	add	r2, pc, #4	@ (adr r2, 80066f4 <UART_SetConfig+0x298>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006719 	.word	0x08006719
 80066f8:	08006759 	.word	0x08006759
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006759 	.word	0x08006759
 8006704:	08006727 	.word	0x08006727
 8006708:	08006759 	.word	0x08006759
 800670c:	08006759 	.word	0x08006759
 8006710:	08006759 	.word	0x08006759
 8006714:	0800672f 	.word	0x0800672f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006718:	f7fe fa0e 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 800671c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800671e:	e021      	b.n	8006764 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006720:	4b0c      	ldr	r3, [pc, #48]	@ (8006754 <UART_SetConfig+0x2f8>)
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006724:	e01e      	b.n	8006764 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006726:	f7fe f999 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 800672a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800672c:	e01a      	b.n	8006764 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006732:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006734:	e016      	b.n	8006764 <UART_SetConfig+0x308>
 8006736:	bf00      	nop
 8006738:	cfff69f3 	.word	0xcfff69f3
 800673c:	40008000 	.word	0x40008000
 8006740:	40013800 	.word	0x40013800
 8006744:	40021000 	.word	0x40021000
 8006748:	40004400 	.word	0x40004400
 800674c:	40004800 	.word	0x40004800
 8006750:	40004c00 	.word	0x40004c00
 8006754:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006762:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 812a 	beq.w	80069c0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006770:	4a9e      	ldr	r2, [pc, #632]	@ (80069ec <UART_SetConfig+0x590>)
 8006772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006776:	461a      	mov	r2, r3
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	fbb3 f3f2 	udiv	r3, r3, r2
 800677e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	4413      	add	r3, r2
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	429a      	cmp	r2, r3
 800678e:	d305      	bcc.n	800679c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	429a      	cmp	r2, r3
 800679a:	d903      	bls.n	80067a4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067a2:	e10d      	b.n	80069c0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	2200      	movs	r2, #0
 80067a8:	60bb      	str	r3, [r7, #8]
 80067aa:	60fa      	str	r2, [r7, #12]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b0:	4a8e      	ldr	r2, [pc, #568]	@ (80069ec <UART_SetConfig+0x590>)
 80067b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2200      	movs	r2, #0
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067c6:	f7fa fa27 	bl	8000c18 <__aeabi_uldivmod>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	020b      	lsls	r3, r1, #8
 80067dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067e0:	0202      	lsls	r2, r0, #8
 80067e2:	6979      	ldr	r1, [r7, #20]
 80067e4:	6849      	ldr	r1, [r1, #4]
 80067e6:	0849      	lsrs	r1, r1, #1
 80067e8:	2000      	movs	r0, #0
 80067ea:	460c      	mov	r4, r1
 80067ec:	4605      	mov	r5, r0
 80067ee:	eb12 0804 	adds.w	r8, r2, r4
 80067f2:	eb43 0905 	adc.w	r9, r3, r5
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	469a      	mov	sl, r3
 80067fe:	4693      	mov	fp, r2
 8006800:	4652      	mov	r2, sl
 8006802:	465b      	mov	r3, fp
 8006804:	4640      	mov	r0, r8
 8006806:	4649      	mov	r1, r9
 8006808:	f7fa fa06 	bl	8000c18 <__aeabi_uldivmod>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4613      	mov	r3, r2
 8006812:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800681a:	d308      	bcc.n	800682e <UART_SetConfig+0x3d2>
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006822:	d204      	bcs.n	800682e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a3a      	ldr	r2, [r7, #32]
 800682a:	60da      	str	r2, [r3, #12]
 800682c:	e0c8      	b.n	80069c0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006834:	e0c4      	b.n	80069c0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800683e:	d167      	bne.n	8006910 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006840:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006844:	2b08      	cmp	r3, #8
 8006846:	d828      	bhi.n	800689a <UART_SetConfig+0x43e>
 8006848:	a201      	add	r2, pc, #4	@ (adr r2, 8006850 <UART_SetConfig+0x3f4>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006875 	.word	0x08006875
 8006854:	0800687d 	.word	0x0800687d
 8006858:	08006885 	.word	0x08006885
 800685c:	0800689b 	.word	0x0800689b
 8006860:	0800688b 	.word	0x0800688b
 8006864:	0800689b 	.word	0x0800689b
 8006868:	0800689b 	.word	0x0800689b
 800686c:	0800689b 	.word	0x0800689b
 8006870:	08006893 	.word	0x08006893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006874:	f7fe f960 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8006878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800687a:	e014      	b.n	80068a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800687c:	f7fe f972 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 8006880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006882:	e010      	b.n	80068a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006884:	4b5a      	ldr	r3, [pc, #360]	@ (80069f0 <UART_SetConfig+0x594>)
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006888:	e00d      	b.n	80068a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688a:	f7fe f8e7 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 800688e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8089 	beq.w	80069c0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	4a4e      	ldr	r2, [pc, #312]	@ (80069ec <UART_SetConfig+0x590>)
 80068b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b8:	461a      	mov	r2, r3
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c0:	005a      	lsls	r2, r3, #1
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	441a      	add	r2, r3
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	2b0f      	cmp	r3, #15
 80068d8:	d916      	bls.n	8006908 <UART_SetConfig+0x4ac>
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e0:	d212      	bcs.n	8006908 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f023 030f 	bic.w	r3, r3, #15
 80068ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	8bfb      	ldrh	r3, [r7, #30]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	8bfa      	ldrh	r2, [r7, #30]
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	e05b      	b.n	80069c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800690e:	e057      	b.n	80069c0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006910:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006914:	2b08      	cmp	r3, #8
 8006916:	d828      	bhi.n	800696a <UART_SetConfig+0x50e>
 8006918:	a201      	add	r2, pc, #4	@ (adr r2, 8006920 <UART_SetConfig+0x4c4>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	08006945 	.word	0x08006945
 8006924:	0800694d 	.word	0x0800694d
 8006928:	08006955 	.word	0x08006955
 800692c:	0800696b 	.word	0x0800696b
 8006930:	0800695b 	.word	0x0800695b
 8006934:	0800696b 	.word	0x0800696b
 8006938:	0800696b 	.word	0x0800696b
 800693c:	0800696b 	.word	0x0800696b
 8006940:	08006963 	.word	0x08006963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006944:	f7fe f8f8 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8006948:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800694a:	e014      	b.n	8006976 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800694c:	f7fe f90a 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 8006950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006952:	e010      	b.n	8006976 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006954:	4b26      	ldr	r3, [pc, #152]	@ (80069f0 <UART_SetConfig+0x594>)
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006958:	e00d      	b.n	8006976 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800695a:	f7fe f87f 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 800695e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006960:	e009      	b.n	8006976 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006968:	e005      	b.n	8006976 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006974:	bf00      	nop
    }

    if (pclk != 0U)
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d021      	beq.n	80069c0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	4a1a      	ldr	r2, [pc, #104]	@ (80069ec <UART_SetConfig+0x590>)
 8006982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006986:	461a      	mov	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	fbb3 f2f2 	udiv	r2, r3, r2
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	441a      	add	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	fbb2 f3f3 	udiv	r3, r2, r3
 800699e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	2b0f      	cmp	r3, #15
 80069a4:	d909      	bls.n	80069ba <UART_SetConfig+0x55e>
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ac:	d205      	bcs.n	80069ba <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60da      	str	r2, [r3, #12]
 80069b8:	e002      	b.n	80069c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2200      	movs	r2, #0
 80069da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80069dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3730      	adds	r7, #48	@ 0x30
 80069e4:	46bd      	mov	sp, r7
 80069e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ea:	bf00      	nop
 80069ec:	0800f2d4 	.word	0x0800f2d4
 80069f0:	00f42400 	.word	0x00f42400

080069f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00a      	beq.n	8006aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01a      	beq.n	8006b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006af2:	d10a      	bne.n	8006b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b098      	sub	sp, #96	@ 0x60
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b48:	f7fc fd10 	bl	800356c <HAL_GetTick>
 8006b4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d12f      	bne.n	8006bbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b64:	2200      	movs	r2, #0
 8006b66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f88e 	bl	8006c8c <UART_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d022      	beq.n	8006bbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e6      	bne.n	8006b76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e063      	b.n	8006c84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d149      	bne.n	8006c5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f857 	bl	8006c8c <UART_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d03c      	beq.n	8006c5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3308      	adds	r3, #8
 8006c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c36:	61fa      	str	r2, [r7, #28]
 8006c38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	69b9      	ldr	r1, [r7, #24]
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	617b      	str	r3, [r7, #20]
   return(result);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e5      	bne.n	8006c16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e012      	b.n	8006c84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3758      	adds	r7, #88	@ 0x58
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9c:	e04f      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d04b      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca6:	f7fc fc61 	bl	800356c <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d302      	bcc.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e04e      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d037      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2b80      	cmp	r3, #128	@ 0x80
 8006cd2:	d034      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b40      	cmp	r3, #64	@ 0x40
 8006cd8:	d031      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d110      	bne.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2208      	movs	r2, #8
 8006cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f95b 	bl	8006fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e029      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d18:	d111      	bne.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f941 	bl	8006fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e00f      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4013      	ands	r3, r2
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d0a0      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b0a3      	sub	sp, #140	@ 0x8c
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	88fa      	ldrh	r2, [r7, #6]
 8006d88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d9a:	d10e      	bne.n	8006dba <UART_Start_Receive_IT+0x52>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d105      	bne.n	8006db0 <UART_Start_Receive_IT+0x48>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006daa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dae:	e02d      	b.n	8006e0c <UART_Start_Receive_IT+0xa4>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	22ff      	movs	r2, #255	@ 0xff
 8006db4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006db8:	e028      	b.n	8006e0c <UART_Start_Receive_IT+0xa4>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10d      	bne.n	8006dde <UART_Start_Receive_IT+0x76>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <UART_Start_Receive_IT+0x6c>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	22ff      	movs	r2, #255	@ 0xff
 8006dce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dd2:	e01b      	b.n	8006e0c <UART_Start_Receive_IT+0xa4>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	227f      	movs	r2, #127	@ 0x7f
 8006dd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ddc:	e016      	b.n	8006e0c <UART_Start_Receive_IT+0xa4>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de6:	d10d      	bne.n	8006e04 <UART_Start_Receive_IT+0x9c>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <UART_Start_Receive_IT+0x92>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	227f      	movs	r2, #127	@ 0x7f
 8006df4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006df8:	e008      	b.n	8006e0c <UART_Start_Receive_IT+0xa4>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	223f      	movs	r2, #63	@ 0x3f
 8006dfe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e02:	e003      	b.n	8006e0c <UART_Start_Receive_IT+0xa4>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2222      	movs	r2, #34	@ 0x22
 8006e18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006e2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006e40:	673a      	str	r2, [r7, #112]	@ 0x70
 8006e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006e46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006e4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e3      	bne.n	8006e1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e5c:	d14f      	bne.n	8006efe <UART_Start_Receive_IT+0x196>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006e64:	88fa      	ldrh	r2, [r7, #6]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d349      	bcc.n	8006efe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e72:	d107      	bne.n	8006e84 <UART_Start_Receive_IT+0x11c>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4a47      	ldr	r2, [pc, #284]	@ (8006f9c <UART_Start_Receive_IT+0x234>)
 8006e80:	675a      	str	r2, [r3, #116]	@ 0x74
 8006e82:	e002      	b.n	8006e8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a46      	ldr	r2, [pc, #280]	@ (8006fa0 <UART_Start_Receive_IT+0x238>)
 8006e88:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01a      	beq.n	8006ec8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006eb6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006eba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e4      	bne.n	8006e92 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3308      	adds	r3, #8
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ee8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006eea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e5      	bne.n	8006ec8 <UART_Start_Receive_IT+0x160>
 8006efc:	e046      	b.n	8006f8c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f06:	d107      	bne.n	8006f18 <UART_Start_Receive_IT+0x1b0>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4a24      	ldr	r2, [pc, #144]	@ (8006fa4 <UART_Start_Receive_IT+0x23c>)
 8006f14:	675a      	str	r2, [r3, #116]	@ 0x74
 8006f16:	e002      	b.n	8006f1e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a23      	ldr	r2, [pc, #140]	@ (8006fa8 <UART_Start_Receive_IT+0x240>)
 8006f1c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d019      	beq.n	8006f5a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006f3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f46:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e6      	bne.n	8006f26 <UART_Start_Receive_IT+0x1be>
 8006f58:	e018      	b.n	8006f8c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	613b      	str	r3, [r7, #16]
   return(result);
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f043 0320 	orr.w	r3, r3, #32
 8006f6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f78:	623b      	str	r3, [r7, #32]
 8006f7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	69f9      	ldr	r1, [r7, #28]
 8006f7e:	6a3a      	ldr	r2, [r7, #32]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e6      	bne.n	8006f5a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	378c      	adds	r7, #140	@ 0x8c
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	080077c9 	.word	0x080077c9
 8006fa0:	08007465 	.word	0x08007465
 8006fa4:	080072ad 	.word	0x080072ad
 8006fa8:	080070f5 	.word	0x080070f5

08006fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b095      	sub	sp, #84	@ 0x54
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800700a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e3      	bne.n	8006fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007022:	2b01      	cmp	r3, #1
 8007024:	d118      	bne.n	8007058 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	60bb      	str	r3, [r7, #8]
   return(result);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f023 0310 	bic.w	r3, r3, #16
 800703a:	647b      	str	r3, [r7, #68]	@ 0x44
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6979      	ldr	r1, [r7, #20]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	613b      	str	r3, [r7, #16]
   return(result);
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800706c:	bf00      	nop
 800706e:	3754      	adds	r7, #84	@ 0x54
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff f9ce 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6979      	ldr	r1, [r7, #20]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	613b      	str	r3, [r7, #16]
   return(result);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e6      	bne.n	80070a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff f999 	bl	800641c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ea:	bf00      	nop
 80070ec:	3720      	adds	r7, #32
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b09c      	sub	sp, #112	@ 0x70
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007102:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800710c:	2b22      	cmp	r3, #34	@ 0x22
 800710e:	f040 80be 	bne.w	800728e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800711c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007120:	b2d9      	uxtb	r1, r3
 8007122:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007126:	b2da      	uxtb	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712c:	400a      	ands	r2, r1
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 80a1 	bne.w	800729e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800716a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800716c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800717a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800717c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800719e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80071ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80071b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e5      	bne.n	800718e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a33      	ldr	r2, [pc, #204]	@ (80072a8 <UART_RxISR_8BIT+0x1b4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d01f      	beq.n	8007220 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d018      	beq.n	8007220 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	623b      	str	r3, [r7, #32]
   return(result);
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007202:	663b      	str	r3, [r7, #96]	@ 0x60
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800720c:	633b      	str	r3, [r7, #48]	@ 0x30
 800720e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e6      	bne.n	80071ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d12e      	bne.n	8007286 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	60fb      	str	r3, [r7, #12]
   return(result);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0310 	bic.w	r3, r3, #16
 8007242:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	69b9      	ldr	r1, [r7, #24]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	617b      	str	r3, [r7, #20]
   return(result);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e6      	bne.n	800722e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b10      	cmp	r3, #16
 800726c:	d103      	bne.n	8007276 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2210      	movs	r2, #16
 8007274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff f8e0 	bl	8006444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007284:	e00b      	b.n	800729e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fa ffa8 	bl	80021dc <HAL_UART_RxCpltCallback>
}
 800728c:	e007      	b.n	800729e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0208 	orr.w	r2, r2, #8
 800729c:	619a      	str	r2, [r3, #24]
}
 800729e:	bf00      	nop
 80072a0:	3770      	adds	r7, #112	@ 0x70
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	40008000 	.word	0x40008000

080072ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b09c      	sub	sp, #112	@ 0x70
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80072ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072c4:	2b22      	cmp	r3, #34	@ 0x22
 80072c6:	f040 80be 	bne.w	8007446 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80072da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80072de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80072e2:	4013      	ands	r3, r2
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ee:	1c9a      	adds	r2, r3, #2
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 80a1 	bne.w	8007456 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007328:	667b      	str	r3, [r7, #100]	@ 0x64
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007332:	657b      	str	r3, [r7, #84]	@ 0x54
 8007334:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007338:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e6      	bne.n	8007314 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	663b      	str	r3, [r7, #96]	@ 0x60
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007366:	643a      	str	r2, [r7, #64]	@ 0x40
 8007368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800736c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e5      	bne.n	8007346 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a33      	ldr	r2, [pc, #204]	@ (8007460 <UART_RxISR_16BIT+0x1b4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d01f      	beq.n	80073d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d018      	beq.n	80073d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e6      	bne.n	80073a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d12e      	bne.n	800743e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f023 0310 	bic.w	r3, r3, #16
 80073fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6979      	ldr	r1, [r7, #20]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	613b      	str	r3, [r7, #16]
   return(result);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e6      	bne.n	80073e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f003 0310 	and.w	r3, r3, #16
 8007422:	2b10      	cmp	r3, #16
 8007424:	d103      	bne.n	800742e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2210      	movs	r2, #16
 800742c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff f804 	bl	8006444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800743c:	e00b      	b.n	8007456 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fa fecc 	bl	80021dc <HAL_UART_RxCpltCallback>
}
 8007444:	e007      	b.n	8007456 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0208 	orr.w	r2, r2, #8
 8007454:	619a      	str	r2, [r3, #24]
}
 8007456:	bf00      	nop
 8007458:	3770      	adds	r7, #112	@ 0x70
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40008000 	.word	0x40008000

08007464 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b0ac      	sub	sp, #176	@ 0xb0
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007472:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800749a:	2b22      	cmp	r3, #34	@ 0x22
 800749c:	f040 8183 	bne.w	80077a6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074a6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074aa:	e126      	b.n	80076fa <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80074ba:	b2d9      	uxtb	r1, r3
 80074bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c6:	400a      	ands	r2, r1
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80074f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d053      	beq.n	80075a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d011      	beq.n	800752e <UART_RxISR_8BIT_FIFOEN+0xca>
 800750a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800750e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00b      	beq.n	800752e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2201      	movs	r2, #1
 800751c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007524:	f043 0201 	orr.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800752e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d011      	beq.n	800755e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800753a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2202      	movs	r2, #2
 800754c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007554:	f043 0204 	orr.w	r2, r3, #4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800755e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d011      	beq.n	800758e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800756a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00b      	beq.n	800758e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2204      	movs	r2, #4
 800757c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007584:	f043 0202 	orr.w	r2, r3, #2
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007594:	2b00      	cmp	r3, #0
 8007596:	d006      	beq.n	80075a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fe ff49 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f040 80a3 	bne.w	80076fa <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80075c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075d8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80075dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80075e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e4      	bne.n	80075b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80075fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3308      	adds	r3, #8
 800760e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007612:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007614:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007618:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007620:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e1      	bne.n	80075ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a60      	ldr	r2, [pc, #384]	@ (80077c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d021      	beq.n	8007688 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d01a      	beq.n	8007688 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007662:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007674:	657b      	str	r3, [r7, #84]	@ 0x54
 8007676:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800767a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e4      	bne.n	8007652 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d130      	bne.n	80076f2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	f023 0310 	bic.w	r3, r3, #16
 80076aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e4      	bne.n	8007696 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b10      	cmp	r3, #16
 80076d8:	d103      	bne.n	80076e2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2210      	movs	r2, #16
 80076e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fe feaa 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80076f0:	e00e      	b.n	8007710 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fa fd72 	bl	80021dc <HAL_UART_RxCpltCallback>
        break;
 80076f8:	e00a      	b.n	8007710 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d006      	beq.n	8007710 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	f47f aece 	bne.w	80074ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007716:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800771a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800771e:	2b00      	cmp	r3, #0
 8007720:	d049      	beq.n	80077b6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007728:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800772c:	429a      	cmp	r2, r3
 800772e:	d242      	bcs.n	80077b6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3308      	adds	r3, #8
 8007736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3308      	adds	r3, #8
 8007750:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007754:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007756:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800775a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e3      	bne.n	8007730 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a16      	ldr	r2, [pc, #88]	@ (80077c4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800776c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60bb      	str	r3, [r7, #8]
   return(result);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f043 0320 	orr.w	r3, r3, #32
 8007782:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6979      	ldr	r1, [r7, #20]
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	613b      	str	r3, [r7, #16]
   return(result);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e4      	bne.n	800776e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077a4:	e007      	b.n	80077b6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699a      	ldr	r2, [r3, #24]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0208 	orr.w	r2, r2, #8
 80077b4:	619a      	str	r2, [r3, #24]
}
 80077b6:	bf00      	nop
 80077b8:	37b0      	adds	r7, #176	@ 0xb0
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40008000 	.word	0x40008000
 80077c4:	080070f5 	.word	0x080070f5

080077c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b0ae      	sub	sp, #184	@ 0xb8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077fe:	2b22      	cmp	r3, #34	@ 0x22
 8007800:	f040 8187 	bne.w	8007b12 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800780a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800780e:	e12a      	b.n	8007a66 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007816:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007822:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007826:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800782a:	4013      	ands	r3, r2
 800782c:	b29a      	uxth	r2, r3
 800782e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007832:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007838:	1c9a      	adds	r2, r3, #2
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800785a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b00      	cmp	r3, #0
 8007864:	d053      	beq.n	800790e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d011      	beq.n	8007896 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00b      	beq.n	8007896 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2201      	movs	r2, #1
 8007884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800788c:	f043 0201 	orr.w	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d011      	beq.n	80078c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80078a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00b      	beq.n	80078c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2202      	movs	r2, #2
 80078b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078bc:	f043 0204 	orr.w	r2, r3, #4
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d011      	beq.n	80078f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80078d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2204      	movs	r2, #4
 80078e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ec:	f043 0202 	orr.w	r2, r3, #2
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d006      	beq.n	800790e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fe fd95 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 80a5 	bne.w	8007a66 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800792a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800792c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800793e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007942:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e2      	bne.n	800791c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3308      	adds	r3, #8
 800797a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800797e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007980:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007984:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800798c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e1      	bne.n	8007956 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a60      	ldr	r2, [pc, #384]	@ (8007b2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d021      	beq.n	80079f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01a      	beq.n	80079f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e4      	bne.n	80079be <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d130      	bne.n	8007a5e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a12:	f023 0310 	bic.w	r3, r3, #16
 8007a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e4      	bne.n	8007a02 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d103      	bne.n	8007a4e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2210      	movs	r2, #16
 8007a4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fe fcf4 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007a5c:	e00e      	b.n	8007a7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fa fbbc 	bl	80021dc <HAL_UART_RxCpltCallback>
        break;
 8007a64:	e00a      	b.n	8007a7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a66:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d006      	beq.n	8007a7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007a6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f47f aeca 	bne.w	8007810 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a82:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a86:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d049      	beq.n	8007b22 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a94:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d242      	bcs.n	8007b22 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ab2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007ac0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e3      	bne.n	8007a9c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a16      	ldr	r2, [pc, #88]	@ (8007b30 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007ad8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f043 0320 	orr.w	r3, r3, #32
 8007aee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	69b9      	ldr	r1, [r7, #24]
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e4      	bne.n	8007ada <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b10:	e007      	b.n	8007b22 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699a      	ldr	r2, [r3, #24]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0208 	orr.w	r2, r2, #8
 8007b20:	619a      	str	r2, [r3, #24]
}
 8007b22:	bf00      	nop
 8007b24:	37b8      	adds	r7, #184	@ 0xb8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	40008000 	.word	0x40008000
 8007b30:	080072ad 	.word	0x080072ad

08007b34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b82:	2302      	movs	r3, #2
 8007b84:	e027      	b.n	8007bd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2224      	movs	r2, #36	@ 0x24
 8007b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0201 	bic.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007bb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d101      	bne.n	8007bfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e02d      	b.n	8007c56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2224      	movs	r2, #36	@ 0x24
 8007c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0201 	bic.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f850 	bl	8007cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c72:	2302      	movs	r3, #2
 8007c74:	e02d      	b.n	8007cd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2224      	movs	r2, #36	@ 0x24
 8007c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f812 	bl	8007cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d108      	bne.n	8007cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cfc:	e031      	b.n	8007d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cfe:	2308      	movs	r3, #8
 8007d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d02:	2308      	movs	r3, #8
 8007d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	0e5b      	lsrs	r3, r3, #25
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	0f5b      	lsrs	r3, r3, #29
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	7b3a      	ldrb	r2, [r7, #12]
 8007d2a:	4911      	ldr	r1, [pc, #68]	@ (8007d70 <UARTEx_SetNbDataToProcess+0x94>)
 8007d2c:	5c8a      	ldrb	r2, [r1, r2]
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d32:	7b3a      	ldrb	r2, [r7, #12]
 8007d34:	490f      	ldr	r1, [pc, #60]	@ (8007d74 <UARTEx_SetNbDataToProcess+0x98>)
 8007d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	7b7a      	ldrb	r2, [r7, #13]
 8007d48:	4909      	ldr	r1, [pc, #36]	@ (8007d70 <UARTEx_SetNbDataToProcess+0x94>)
 8007d4a:	5c8a      	ldrb	r2, [r1, r2]
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d50:	7b7a      	ldrb	r2, [r7, #13]
 8007d52:	4908      	ldr	r1, [pc, #32]	@ (8007d74 <UARTEx_SetNbDataToProcess+0x98>)
 8007d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d62:	bf00      	nop
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	0800f2ec 	.word	0x0800f2ec
 8007d74:	0800f2f4 	.word	0x0800f2f4

08007d78 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8007d7c:	4907      	ldr	r1, [pc, #28]	@ (8007d9c <MX_FATFS_Init+0x24>)
 8007d7e:	4808      	ldr	r0, [pc, #32]	@ (8007da0 <MX_FATFS_Init+0x28>)
 8007d80:	f003 fb16 	bl	800b3b0 <FATFS_LinkDriver>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8007d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8e:	e003      	b.n	8007d98 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8007d90:	4b04      	ldr	r3, [pc, #16]	@ (8007da4 <MX_FATFS_Init+0x2c>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8007d96:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20004904 	.word	0x20004904
 8007da0:	20000010 	.word	0x20000010
 8007da4:	200022e0 	.word	0x200022e0

08007da8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007dac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7f9 faaf 	bl	8001328 <SD_disk_initialize>
 8007dca:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7f9 fb8d 	bl	8001500 <SD_disk_status>
 8007de6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007e00:	7bf8      	ldrb	r0, [r7, #15]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	f7f9 fb90 	bl	800152c <SD_disk_read>
 8007e0c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007e26:	7bf8      	ldrb	r0, [r7, #15]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	f7f9 fbe7 	bl	8001600 <SD_disk_write>
 8007e32:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	603a      	str	r2, [r7, #0]
 8007e46:	71fb      	strb	r3, [r7, #7]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007e4c:	79b9      	ldrb	r1, [r7, #6]
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7f9 fc58 	bl	8001708 <SD_disk_ioctl>
 8007e58:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	4a08      	ldr	r2, [pc, #32]	@ (8007e94 <disk_status+0x30>)
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	79fa      	ldrb	r2, [r7, #7]
 8007e7c:	4905      	ldr	r1, [pc, #20]	@ (8007e94 <disk_status+0x30>)
 8007e7e:	440a      	add	r2, r1
 8007e80:	7a12      	ldrb	r2, [r2, #8]
 8007e82:	4610      	mov	r0, r2
 8007e84:	4798      	blx	r3
 8007e86:	4603      	mov	r3, r0
 8007e88:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	2000250c 	.word	0x2000250c

08007e98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee0 <disk_initialize+0x48>)
 8007eaa:	5cd3      	ldrb	r3, [r2, r3]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d111      	bne.n	8007ed4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8007ee0 <disk_initialize+0x48>)
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	4a09      	ldr	r2, [pc, #36]	@ (8007ee0 <disk_initialize+0x48>)
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	79fa      	ldrb	r2, [r7, #7]
 8007ec6:	4906      	ldr	r1, [pc, #24]	@ (8007ee0 <disk_initialize+0x48>)
 8007ec8:	440a      	add	r2, r1
 8007eca:	7a12      	ldrb	r2, [r2, #8]
 8007ecc:	4610      	mov	r0, r2
 8007ece:	4798      	blx	r3
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	2000250c 	.word	0x2000250c

08007ee4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ee4:	b590      	push	{r4, r7, lr}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8007f20 <disk_read+0x3c>)
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	689c      	ldr	r4, [r3, #8]
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	4a07      	ldr	r2, [pc, #28]	@ (8007f20 <disk_read+0x3c>)
 8007f04:	4413      	add	r3, r2
 8007f06:	7a18      	ldrb	r0, [r3, #8]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	47a0      	blx	r4
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd90      	pop	{r4, r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	2000250c 	.word	0x2000250c

08007f24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	4a0a      	ldr	r2, [pc, #40]	@ (8007f60 <disk_write+0x3c>)
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	68dc      	ldr	r4, [r3, #12]
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	4a07      	ldr	r2, [pc, #28]	@ (8007f60 <disk_write+0x3c>)
 8007f44:	4413      	add	r3, r2
 8007f46:	7a18      	ldrb	r0, [r3, #8]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	47a0      	blx	r4
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd90      	pop	{r4, r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	2000250c 	.word	0x2000250c

08007f64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	603a      	str	r2, [r7, #0]
 8007f6e:	71fb      	strb	r3, [r7, #7]
 8007f70:	460b      	mov	r3, r1
 8007f72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	4a09      	ldr	r2, [pc, #36]	@ (8007f9c <disk_ioctl+0x38>)
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	4906      	ldr	r1, [pc, #24]	@ (8007f9c <disk_ioctl+0x38>)
 8007f84:	440a      	add	r2, r1
 8007f86:	7a10      	ldrb	r0, [r2, #8]
 8007f88:	79b9      	ldrb	r1, [r7, #6]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	4798      	blx	r3
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73fb      	strb	r3, [r7, #15]
  return res;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	2000250c 	.word	0x2000250c

08007fa0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3301      	adds	r3, #1
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007fb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	b21a      	sxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b21b      	sxth	r3, r3
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	b21b      	sxth	r3, r3
 8007fc2:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007fc4:	89fb      	ldrh	r3, [r7, #14]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b085      	sub	sp, #20
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3303      	adds	r3, #3
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	3202      	adds	r2, #2
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	021b      	lsls	r3, r3, #8
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	3201      	adds	r2, #1
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	7812      	ldrb	r2, [r2, #0]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
	return rv;
 800800a:	68fb      	ldr	r3, [r7, #12]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	607a      	str	r2, [r7, #4]
 800802a:	887a      	ldrh	r2, [r7, #2]
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	887b      	ldrh	r3, [r7, #2]
 8008032:	0a1b      	lsrs	r3, r3, #8
 8008034:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	887a      	ldrh	r2, [r7, #2]
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	701a      	strb	r2, [r3, #0]
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	607a      	str	r2, [r7, #4]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	b2d2      	uxtb	r2, r2
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	0a1b      	lsrs	r3, r3, #8
 800807a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	b2d2      	uxtb	r2, r2
 8008098:	701a      	strb	r2, [r3, #0]
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80080a6:	b480      	push	{r7}
 80080a8:	b087      	sub	sp, #28
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00d      	beq.n	80080dc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	1c53      	adds	r3, r2, #1
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	1c59      	adds	r1, r3, #1
 80080ca:	6179      	str	r1, [r7, #20]
 80080cc:	7812      	ldrb	r2, [r2, #0]
 80080ce:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	607b      	str	r3, [r7, #4]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f1      	bne.n	80080c0 <mem_cpy+0x1a>
	}
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	617a      	str	r2, [r7, #20]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3b01      	subs	r3, #1
 8008108:	607b      	str	r3, [r7, #4]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f3      	bne.n	80080f8 <mem_set+0x10>
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800811e:	b480      	push	{r7}
 8008120:	b089      	sub	sp, #36	@ 0x24
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	61fa      	str	r2, [r7, #28]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	4619      	mov	r1, r3
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	61ba      	str	r2, [r7, #24]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	1acb      	subs	r3, r1, r3
 800814a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3b01      	subs	r3, #1
 8008150:	607b      	str	r3, [r7, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <mem_cmp+0x40>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0eb      	beq.n	8008136 <mem_cmp+0x18>

	return r;
 800815e:	697b      	ldr	r3, [r7, #20]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3724      	adds	r7, #36	@ 0x24
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008176:	e002      	b.n	800817e <chk_chr+0x12>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3301      	adds	r3, #1
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <chk_chr+0x26>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	4293      	cmp	r3, r2
 8008190:	d1f2      	bne.n	8008178 <chk_chr+0xc>
	return *str;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	781b      	ldrb	r3, [r3, #0]
}
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
	...

080081a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	e029      	b.n	800820c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80081b8:	4a27      	ldr	r2, [pc, #156]	@ (8008258 <chk_lock+0xb4>)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	4413      	add	r3, r2
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d01d      	beq.n	8008202 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081c6:	4a24      	ldr	r2, [pc, #144]	@ (8008258 <chk_lock+0xb4>)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	4413      	add	r3, r2
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d116      	bne.n	8008206 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80081d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008258 <chk_lock+0xb4>)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	4413      	add	r3, r2
 80081e0:	3304      	adds	r3, #4
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d10c      	bne.n	8008206 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80081ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008258 <chk_lock+0xb4>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	4413      	add	r3, r2
 80081f4:	3308      	adds	r3, #8
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d102      	bne.n	8008206 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008200:	e007      	b.n	8008212 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008202:	2301      	movs	r3, #1
 8008204:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d9d2      	bls.n	80081b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d109      	bne.n	800822c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <chk_lock+0x80>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b02      	cmp	r3, #2
 8008222:	d101      	bne.n	8008228 <chk_lock+0x84>
 8008224:	2300      	movs	r3, #0
 8008226:	e010      	b.n	800824a <chk_lock+0xa6>
 8008228:	2312      	movs	r3, #18
 800822a:	e00e      	b.n	800824a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d108      	bne.n	8008244 <chk_lock+0xa0>
 8008232:	4a09      	ldr	r2, [pc, #36]	@ (8008258 <chk_lock+0xb4>)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	4413      	add	r3, r2
 800823a:	330c      	adds	r3, #12
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008242:	d101      	bne.n	8008248 <chk_lock+0xa4>
 8008244:	2310      	movs	r3, #16
 8008246:	e000      	b.n	800824a <chk_lock+0xa6>
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	200022ec 	.word	0x200022ec

0800825c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008262:	2300      	movs	r3, #0
 8008264:	607b      	str	r3, [r7, #4]
 8008266:	e002      	b.n	800826e <enq_lock+0x12>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3301      	adds	r3, #1
 800826c:	607b      	str	r3, [r7, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d806      	bhi.n	8008282 <enq_lock+0x26>
 8008274:	4a09      	ldr	r2, [pc, #36]	@ (800829c <enq_lock+0x40>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	4413      	add	r3, r2
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1f2      	bne.n	8008268 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b02      	cmp	r3, #2
 8008286:	bf14      	ite	ne
 8008288:	2301      	movne	r3, #1
 800828a:	2300      	moveq	r3, #0
 800828c:	b2db      	uxtb	r3, r3
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	200022ec 	.word	0x200022ec

080082a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	e01f      	b.n	80082f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80082b0:	4a41      	ldr	r2, [pc, #260]	@ (80083b8 <inc_lock+0x118>)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	011b      	lsls	r3, r3, #4
 80082b6:	4413      	add	r3, r2
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d113      	bne.n	80082ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80082c2:	4a3d      	ldr	r2, [pc, #244]	@ (80083b8 <inc_lock+0x118>)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	4413      	add	r3, r2
 80082ca:	3304      	adds	r3, #4
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d109      	bne.n	80082ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80082d6:	4a38      	ldr	r2, [pc, #224]	@ (80083b8 <inc_lock+0x118>)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	4413      	add	r3, r2
 80082de:	3308      	adds	r3, #8
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d006      	beq.n	80082f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3301      	adds	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d9dc      	bls.n	80082b0 <inc_lock+0x10>
 80082f6:	e000      	b.n	80082fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80082f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d132      	bne.n	8008366 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e002      	b.n	800830c <inc_lock+0x6c>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3301      	adds	r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d806      	bhi.n	8008320 <inc_lock+0x80>
 8008312:	4a29      	ldr	r2, [pc, #164]	@ (80083b8 <inc_lock+0x118>)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	4413      	add	r3, r2
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f2      	bne.n	8008306 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d101      	bne.n	800832a <inc_lock+0x8a>
 8008326:	2300      	movs	r3, #0
 8008328:	e040      	b.n	80083ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4922      	ldr	r1, [pc, #136]	@ (80083b8 <inc_lock+0x118>)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	011b      	lsls	r3, r3, #4
 8008334:	440b      	add	r3, r1
 8008336:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	491e      	ldr	r1, [pc, #120]	@ (80083b8 <inc_lock+0x118>)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	440b      	add	r3, r1
 8008344:	3304      	adds	r3, #4
 8008346:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	695a      	ldr	r2, [r3, #20]
 800834c:	491a      	ldr	r1, [pc, #104]	@ (80083b8 <inc_lock+0x118>)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	440b      	add	r3, r1
 8008354:	3308      	adds	r3, #8
 8008356:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008358:	4a17      	ldr	r2, [pc, #92]	@ (80083b8 <inc_lock+0x118>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	4413      	add	r3, r2
 8008360:	330c      	adds	r3, #12
 8008362:	2200      	movs	r2, #0
 8008364:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d009      	beq.n	8008380 <inc_lock+0xe0>
 800836c:	4a12      	ldr	r2, [pc, #72]	@ (80083b8 <inc_lock+0x118>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	4413      	add	r3, r2
 8008374:	330c      	adds	r3, #12
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <inc_lock+0xe0>
 800837c:	2300      	movs	r3, #0
 800837e:	e015      	b.n	80083ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d108      	bne.n	8008398 <inc_lock+0xf8>
 8008386:	4a0c      	ldr	r2, [pc, #48]	@ (80083b8 <inc_lock+0x118>)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	4413      	add	r3, r2
 800838e:	330c      	adds	r3, #12
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	e001      	b.n	800839c <inc_lock+0xfc>
 8008398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800839c:	4906      	ldr	r1, [pc, #24]	@ (80083b8 <inc_lock+0x118>)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	440b      	add	r3, r1
 80083a4:	330c      	adds	r3, #12
 80083a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	200022ec 	.word	0x200022ec

080083bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d825      	bhi.n	800841c <dec_lock+0x60>
		n = Files[i].ctr;
 80083d0:	4a17      	ldr	r2, [pc, #92]	@ (8008430 <dec_lock+0x74>)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	4413      	add	r3, r2
 80083d8:	330c      	adds	r3, #12
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80083de:	89fb      	ldrh	r3, [r7, #14]
 80083e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083e4:	d101      	bne.n	80083ea <dec_lock+0x2e>
 80083e6:	2300      	movs	r3, #0
 80083e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80083ea:	89fb      	ldrh	r3, [r7, #14]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <dec_lock+0x3a>
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80083f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008430 <dec_lock+0x74>)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	4413      	add	r3, r2
 80083fe:	330c      	adds	r3, #12
 8008400:	89fa      	ldrh	r2, [r7, #14]
 8008402:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008404:	89fb      	ldrh	r3, [r7, #14]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d105      	bne.n	8008416 <dec_lock+0x5a>
 800840a:	4a09      	ldr	r2, [pc, #36]	@ (8008430 <dec_lock+0x74>)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	4413      	add	r3, r2
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	737b      	strb	r3, [r7, #13]
 800841a:	e001      	b.n	8008420 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800841c:	2302      	movs	r3, #2
 800841e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008420:	7b7b      	ldrb	r3, [r7, #13]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	200022ec 	.word	0x200022ec

08008434 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800843c:	2300      	movs	r3, #0
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	e010      	b.n	8008464 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008442:	4a0d      	ldr	r2, [pc, #52]	@ (8008478 <clear_lock+0x44>)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	4413      	add	r3, r2
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	429a      	cmp	r2, r3
 8008450:	d105      	bne.n	800845e <clear_lock+0x2a>
 8008452:	4a09      	ldr	r2, [pc, #36]	@ (8008478 <clear_lock+0x44>)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	4413      	add	r3, r2
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3301      	adds	r3, #1
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d9eb      	bls.n	8008442 <clear_lock+0xe>
	}
}
 800846a:	bf00      	nop
 800846c:	bf00      	nop
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	200022ec 	.word	0x200022ec

0800847c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	78db      	ldrb	r3, [r3, #3]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d034      	beq.n	80084fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008494:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7858      	ldrb	r0, [r3, #1]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80084a0:	2301      	movs	r3, #1
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	f7ff fd3e 	bl	8007f24 <disk_write>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	73fb      	strb	r3, [r7, #15]
 80084b2:	e022      	b.n	80084fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	1ad2      	subs	r2, r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d217      	bcs.n	80084fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	789b      	ldrb	r3, [r3, #2]
 80084ce:	613b      	str	r3, [r7, #16]
 80084d0:	e010      	b.n	80084f4 <sync_window+0x78>
					wsect += fs->fsize;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4413      	add	r3, r2
 80084da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	7858      	ldrb	r0, [r3, #1]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80084e6:	2301      	movs	r3, #1
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	f7ff fd1b 	bl	8007f24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d8eb      	bhi.n	80084d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d01b      	beq.n	8008554 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff ffad 	bl	800847c <sync_window>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d113      	bne.n	8008554 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	7858      	ldrb	r0, [r3, #1]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008536:	2301      	movs	r3, #1
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	f7ff fcd3 	bl	8007ee4 <disk_read>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008544:	f04f 33ff 	mov.w	r3, #4294967295
 8008548:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800854a:	2301      	movs	r3, #1
 800854c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ff87 	bl	800847c <sync_window>
 800856e:	4603      	mov	r3, r0
 8008570:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d159      	bne.n	800862c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b03      	cmp	r3, #3
 800857e:	d149      	bne.n	8008614 <sync_fs+0xb4>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	791b      	ldrb	r3, [r3, #4]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d145      	bne.n	8008614 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	899b      	ldrh	r3, [r3, #12]
 8008592:	461a      	mov	r2, r3
 8008594:	2100      	movs	r1, #0
 8008596:	f7ff fda7 	bl	80080e8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3338      	adds	r3, #56	@ 0x38
 800859e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80085a2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fd36 	bl	8008018 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3338      	adds	r3, #56	@ 0x38
 80085b0:	4921      	ldr	r1, [pc, #132]	@ (8008638 <sync_fs+0xd8>)
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fd4b 	bl	800804e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3338      	adds	r3, #56	@ 0x38
 80085bc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80085c0:	491e      	ldr	r1, [pc, #120]	@ (800863c <sync_fs+0xdc>)
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fd43 	bl	800804e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3338      	adds	r3, #56	@ 0x38
 80085cc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f7ff fd39 	bl	800804e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3338      	adds	r3, #56	@ 0x38
 80085e0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	4619      	mov	r1, r3
 80085ea:	4610      	mov	r0, r2
 80085ec:	f7ff fd2f 	bl	800804e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7858      	ldrb	r0, [r3, #1]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008608:	2301      	movs	r3, #1
 800860a:	f7ff fc8b 	bl	8007f24 <disk_write>
			fs->fsi_flag = 0;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	2200      	movs	r2, #0
 800861a:	2100      	movs	r1, #0
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fca1 	bl	8007f64 <disk_ioctl>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <sync_fs+0xcc>
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	41615252 	.word	0x41615252
 800863c:	61417272 	.word	0x61417272

08008640 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	3b02      	subs	r3, #2
 800864e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	3b02      	subs	r3, #2
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d301      	bcc.n	8008660 <clust2sect+0x20>
 800865c:	2300      	movs	r3, #0
 800865e:	e008      	b.n	8008672 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	895b      	ldrh	r3, [r3, #10]
 8008664:	461a      	mov	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	fb03 f202 	mul.w	r2, r3, r2
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	4413      	add	r3, r2
}
 8008672:	4618      	mov	r0, r3
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b086      	sub	sp, #24
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d904      	bls.n	800869e <get_fat+0x20>
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d302      	bcc.n	80086a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800869e:	2301      	movs	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	e0ba      	b.n	800881a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80086a4:	f04f 33ff 	mov.w	r3, #4294967295
 80086a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f000 8082 	beq.w	80087b8 <get_fat+0x13a>
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	f300 80a6 	bgt.w	8008806 <get_fat+0x188>
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d002      	beq.n	80086c4 <get_fat+0x46>
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d055      	beq.n	800876e <get_fat+0xf0>
 80086c2:	e0a0      	b.n	8008806 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	899b      	ldrh	r3, [r3, #12]
 80086da:	4619      	mov	r1, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	fbb3 f3f1 	udiv	r3, r3, r1
 80086e2:	4413      	add	r3, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	6938      	ldr	r0, [r7, #16]
 80086e8:	f7ff ff0c 	bl	8008504 <move_window>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 808c 	bne.w	800880c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	60fa      	str	r2, [r7, #12]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	8992      	ldrh	r2, [r2, #12]
 80086fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008702:	fb01 f202 	mul.w	r2, r1, r2
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4413      	add	r3, r2
 800870c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008710:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	899b      	ldrh	r3, [r3, #12]
 800871a:	4619      	mov	r1, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008722:	4413      	add	r3, r2
 8008724:	4619      	mov	r1, r3
 8008726:	6938      	ldr	r0, [r7, #16]
 8008728:	f7ff feec 	bl	8008504 <move_window>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d16e      	bne.n	8008810 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	899b      	ldrh	r3, [r3, #12]
 8008736:	461a      	mov	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	fbb3 f1f2 	udiv	r1, r3, r2
 800873e:	fb01 f202 	mul.w	r2, r1, r2
 8008742:	1a9b      	subs	r3, r3, r2
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4413      	add	r3, r2
 8008748:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	4313      	orrs	r3, r2
 8008752:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <get_fat+0xe6>
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	091b      	lsrs	r3, r3, #4
 8008762:	e002      	b.n	800876a <get_fat+0xec>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800876a:	617b      	str	r3, [r7, #20]
			break;
 800876c:	e055      	b.n	800881a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	899b      	ldrh	r3, [r3, #12]
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	b29b      	uxth	r3, r3
 800877a:	4619      	mov	r1, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008782:	4413      	add	r3, r2
 8008784:	4619      	mov	r1, r3
 8008786:	6938      	ldr	r0, [r7, #16]
 8008788:	f7ff febc 	bl	8008504 <move_window>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d140      	bne.n	8008814 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	8992      	ldrh	r2, [r2, #12]
 80087a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80087a4:	fb00 f202 	mul.w	r2, r0, r2
 80087a8:	1a9b      	subs	r3, r3, r2
 80087aa:	440b      	add	r3, r1
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fbf7 	bl	8007fa0 <ld_word>
 80087b2:	4603      	mov	r3, r0
 80087b4:	617b      	str	r3, [r7, #20]
			break;
 80087b6:	e030      	b.n	800881a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	899b      	ldrh	r3, [r3, #12]
 80087c0:	089b      	lsrs	r3, r3, #2
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	4619      	mov	r1, r3
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80087cc:	4413      	add	r3, r2
 80087ce:	4619      	mov	r1, r3
 80087d0:	6938      	ldr	r0, [r7, #16]
 80087d2:	f7ff fe97 	bl	8008504 <move_window>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d11d      	bne.n	8008818 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	8992      	ldrh	r2, [r2, #12]
 80087ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80087ee:	fb00 f202 	mul.w	r2, r0, r2
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	440b      	add	r3, r1
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff fbeb 	bl	8007fd2 <ld_dword>
 80087fc:	4603      	mov	r3, r0
 80087fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008802:	617b      	str	r3, [r7, #20]
			break;
 8008804:	e009      	b.n	800881a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008806:	2301      	movs	r3, #1
 8008808:	617b      	str	r3, [r7, #20]
 800880a:	e006      	b.n	800881a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800880c:	bf00      	nop
 800880e:	e004      	b.n	800881a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008810:	bf00      	nop
 8008812:	e002      	b.n	800881a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008814:	bf00      	nop
 8008816:	e000      	b.n	800881a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008818:	bf00      	nop
		}
	}

	return val;
 800881a:	697b      	ldr	r3, [r7, #20]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b089      	sub	sp, #36	@ 0x24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008830:	2302      	movs	r3, #2
 8008832:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b01      	cmp	r3, #1
 8008838:	f240 8109 	bls.w	8008a4e <put_fat+0x22a>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	429a      	cmp	r2, r3
 8008844:	f080 8103 	bcs.w	8008a4e <put_fat+0x22a>
		switch (fs->fs_type) {
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b03      	cmp	r3, #3
 800884e:	f000 80b6 	beq.w	80089be <put_fat+0x19a>
 8008852:	2b03      	cmp	r3, #3
 8008854:	f300 80fb 	bgt.w	8008a4e <put_fat+0x22a>
 8008858:	2b01      	cmp	r3, #1
 800885a:	d003      	beq.n	8008864 <put_fat+0x40>
 800885c:	2b02      	cmp	r3, #2
 800885e:	f000 8083 	beq.w	8008968 <put_fat+0x144>
 8008862:	e0f4      	b.n	8008a4e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	4413      	add	r3, r2
 8008870:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	899b      	ldrh	r3, [r3, #12]
 800887a:	4619      	mov	r1, r3
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008882:	4413      	add	r3, r2
 8008884:	4619      	mov	r1, r3
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff fe3c 	bl	8008504 <move_window>
 800888c:	4603      	mov	r3, r0
 800888e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008890:	7ffb      	ldrb	r3, [r7, #31]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 80d4 	bne.w	8008a40 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	61ba      	str	r2, [r7, #24]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	8992      	ldrh	r2, [r2, #12]
 80088a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80088ac:	fb00 f202 	mul.w	r2, r0, r2
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	440b      	add	r3, r1
 80088b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00d      	beq.n	80088dc <put_fat+0xb8>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	b25b      	sxtb	r3, r3
 80088c6:	f003 030f 	and.w	r3, r3, #15
 80088ca:	b25a      	sxtb	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	b25b      	sxtb	r3, r3
 80088d4:	4313      	orrs	r3, r2
 80088d6:	b25b      	sxtb	r3, r3
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	e001      	b.n	80088e0 <put_fat+0xbc>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	899b      	ldrh	r3, [r3, #12]
 80088f2:	4619      	mov	r1, r3
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80088fa:	4413      	add	r3, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fe00 	bl	8008504 <move_window>
 8008904:	4603      	mov	r3, r0
 8008906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008908:	7ffb      	ldrb	r3, [r7, #31]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 809a 	bne.w	8008a44 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	899b      	ldrh	r3, [r3, #12]
 800891a:	461a      	mov	r2, r3
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008922:	fb00 f202 	mul.w	r2, r0, r2
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	440b      	add	r3, r1
 800892a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <put_fat+0x11a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	091b      	lsrs	r3, r3, #4
 800893a:	b2db      	uxtb	r3, r3
 800893c:	e00e      	b.n	800895c <put_fat+0x138>
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	b25b      	sxtb	r3, r3
 8008944:	f023 030f 	bic.w	r3, r3, #15
 8008948:	b25a      	sxtb	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	0a1b      	lsrs	r3, r3, #8
 800894e:	b25b      	sxtb	r3, r3
 8008950:	f003 030f 	and.w	r3, r3, #15
 8008954:	b25b      	sxtb	r3, r3
 8008956:	4313      	orrs	r3, r2
 8008958:	b25b      	sxtb	r3, r3
 800895a:	b2db      	uxtb	r3, r3
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	70da      	strb	r2, [r3, #3]
			break;
 8008966:	e072      	b.n	8008a4e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	899b      	ldrh	r3, [r3, #12]
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	b29b      	uxth	r3, r3
 8008974:	4619      	mov	r1, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	fbb3 f3f1 	udiv	r3, r3, r1
 800897c:	4413      	add	r3, r2
 800897e:	4619      	mov	r1, r3
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff fdbf 	bl	8008504 <move_window>
 8008986:	4603      	mov	r3, r0
 8008988:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800898a:	7ffb      	ldrb	r3, [r7, #31]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d15b      	bne.n	8008a48 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	8992      	ldrh	r2, [r2, #12]
 800899e:	fbb3 f0f2 	udiv	r0, r3, r2
 80089a2:	fb00 f202 	mul.w	r2, r0, r2
 80089a6:	1a9b      	subs	r3, r3, r2
 80089a8:	440b      	add	r3, r1
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	b292      	uxth	r2, r2
 80089ae:	4611      	mov	r1, r2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7ff fb31 	bl	8008018 <st_word>
			fs->wflag = 1;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2201      	movs	r2, #1
 80089ba:	70da      	strb	r2, [r3, #3]
			break;
 80089bc:	e047      	b.n	8008a4e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	899b      	ldrh	r3, [r3, #12]
 80089c6:	089b      	lsrs	r3, r3, #2
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	4619      	mov	r1, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80089d2:	4413      	add	r3, r2
 80089d4:	4619      	mov	r1, r3
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f7ff fd94 	bl	8008504 <move_window>
 80089dc:	4603      	mov	r3, r0
 80089de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089e0:	7ffb      	ldrb	r3, [r7, #31]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d132      	bne.n	8008a4c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	8992      	ldrh	r2, [r2, #12]
 80089fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80089fe:	fb00 f202 	mul.w	r2, r0, r2
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	440b      	add	r3, r1
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff fae3 	bl	8007fd2 <ld_dword>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008a12:	4323      	orrs	r3, r4
 8008a14:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	8992      	ldrh	r2, [r2, #12]
 8008a24:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a28:	fb00 f202 	mul.w	r2, r0, r2
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	440b      	add	r3, r1
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fb0b 	bl	800804e <st_dword>
			fs->wflag = 1;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	70da      	strb	r2, [r3, #3]
			break;
 8008a3e:	e006      	b.n	8008a4e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a40:	bf00      	nop
 8008a42:	e004      	b.n	8008a4e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a44:	bf00      	nop
 8008a46:	e002      	b.n	8008a4e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a48:	bf00      	nop
 8008a4a:	e000      	b.n	8008a4e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a4c:	bf00      	nop
		}
	}
	return res;
 8008a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3724      	adds	r7, #36	@ 0x24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd90      	pop	{r4, r7, pc}

08008a58 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d904      	bls.n	8008a7e <remove_chain+0x26>
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d301      	bcc.n	8008a82 <remove_chain+0x2a>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e04b      	b.n	8008b1a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00c      	beq.n	8008aa2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008a88:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	69b8      	ldr	r0, [r7, #24]
 8008a90:	f7ff fec8 	bl	8008824 <put_fat>
 8008a94:	4603      	mov	r3, r0
 8008a96:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008a98:	7ffb      	ldrb	r3, [r7, #31]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <remove_chain+0x4a>
 8008a9e:	7ffb      	ldrb	r3, [r7, #31]
 8008aa0:	e03b      	b.n	8008b1a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7ff fdea 	bl	800867e <get_fat>
 8008aaa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d031      	beq.n	8008b16 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <remove_chain+0x64>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e02e      	b.n	8008b1a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d101      	bne.n	8008ac8 <remove_chain+0x70>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e028      	b.n	8008b1a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ac8:	2200      	movs	r2, #0
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	69b8      	ldr	r0, [r7, #24]
 8008ace:	f7ff fea9 	bl	8008824 <put_fat>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ad6:	7ffb      	ldrb	r3, [r7, #31]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <remove_chain+0x88>
 8008adc:	7ffb      	ldrb	r3, [r7, #31]
 8008ade:	e01c      	b.n	8008b1a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	3b02      	subs	r3, #2
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d20b      	bcs.n	8008b06 <remove_chain+0xae>
			fs->free_clst++;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	791b      	ldrb	r3, [r3, #4]
 8008afc:	f043 0301 	orr.w	r3, r3, #1
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d3c6      	bcc.n	8008aa2 <remove_chain+0x4a>
 8008b14:	e000      	b.n	8008b18 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008b16:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3720      	adds	r7, #32
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b088      	sub	sp, #32
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10d      	bne.n	8008b54 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d004      	beq.n	8008b4e <create_chain+0x2c>
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d31b      	bcc.n	8008b86 <create_chain+0x64>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	61bb      	str	r3, [r7, #24]
 8008b52:	e018      	b.n	8008b86 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fd91 	bl	800867e <get_fat>
 8008b5c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d801      	bhi.n	8008b68 <create_chain+0x46>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e070      	b.n	8008c4a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d101      	bne.n	8008b74 <create_chain+0x52>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	e06a      	b.n	8008c4a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d201      	bcs.n	8008b82 <create_chain+0x60>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	e063      	b.n	8008c4a <create_chain+0x128>
		scl = clst;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	69fa      	ldr	r2, [r7, #28]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d307      	bcc.n	8008baa <create_chain+0x88>
				ncl = 2;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d901      	bls.n	8008baa <create_chain+0x88>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e04f      	b.n	8008c4a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008baa:	69f9      	ldr	r1, [r7, #28]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff fd66 	bl	800867e <get_fat>
 8008bb2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00e      	beq.n	8008bd8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d003      	beq.n	8008bc8 <create_chain+0xa6>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	d101      	bne.n	8008bcc <create_chain+0xaa>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	e03e      	b.n	8008c4a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d1da      	bne.n	8008b8a <create_chain+0x68>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e038      	b.n	8008c4a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008bd8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	69f9      	ldr	r1, [r7, #28]
 8008be0:	6938      	ldr	r0, [r7, #16]
 8008be2:	f7ff fe1f 	bl	8008824 <put_fat>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <create_chain+0xe2>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d006      	beq.n	8008c04 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f7ff fe12 	bl	8008824 <put_fat>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d116      	bne.n	8008c38 <create_chain+0x116>
		fs->last_clst = ncl;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	3b02      	subs	r3, #2
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d804      	bhi.n	8008c28 <create_chain+0x106>
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	1e5a      	subs	r2, r3, #1
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	791b      	ldrb	r3, [r3, #4]
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	711a      	strb	r2, [r3, #4]
 8008c36:	e007      	b.n	8008c48 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d102      	bne.n	8008c44 <create_chain+0x122>
 8008c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c42:	e000      	b.n	8008c46 <create_chain+0x124>
 8008c44:	2301      	movs	r3, #1
 8008c46:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008c48:	69fb      	ldr	r3, [r7, #28]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b087      	sub	sp, #28
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	3304      	adds	r3, #4
 8008c68:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	899b      	ldrh	r3, [r3, #12]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	8952      	ldrh	r2, [r2, #10]
 8008c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	1d1a      	adds	r2, r3, #4
 8008c84:	613a      	str	r2, [r7, #16]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <clmt_clust+0x42>
 8008c90:	2300      	movs	r3, #0
 8008c92:	e010      	b.n	8008cb6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d307      	bcc.n	8008cac <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008caa:	e7e9      	b.n	8008c80 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008cac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	4413      	add	r3, r2
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b086      	sub	sp, #24
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cd8:	d204      	bcs.n	8008ce4 <dir_sdi+0x22>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	f003 031f 	and.w	r3, r3, #31
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e071      	b.n	8008dcc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <dir_sdi+0x46>
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d902      	bls.n	8008d08 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10c      	bne.n	8008d28 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	095b      	lsrs	r3, r3, #5
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	8912      	ldrh	r2, [r2, #8]
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d301      	bcc.n	8008d1e <dir_sdi+0x5c>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e056      	b.n	8008dcc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	61da      	str	r2, [r3, #28]
 8008d26:	e02d      	b.n	8008d84 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	895b      	ldrh	r3, [r3, #10]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	899b      	ldrh	r3, [r3, #12]
 8008d32:	fb02 f303 	mul.w	r3, r2, r3
 8008d36:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d38:	e019      	b.n	8008d6e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6979      	ldr	r1, [r7, #20]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fc9d 	bl	800867e <get_fat>
 8008d44:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d101      	bne.n	8008d52 <dir_sdi+0x90>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e03c      	b.n	8008dcc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d904      	bls.n	8008d62 <dir_sdi+0xa0>
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d301      	bcc.n	8008d66 <dir_sdi+0xa4>
 8008d62:	2302      	movs	r3, #2
 8008d64:	e032      	b.n	8008dcc <dir_sdi+0x10a>
			ofs -= csz;
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d2e1      	bcs.n	8008d3a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008d76:	6979      	ldr	r1, [r7, #20]
 8008d78:	6938      	ldr	r0, [r7, #16]
 8008d7a:	f7ff fc61 	bl	8008640 <clust2sect>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <dir_sdi+0xd4>
 8008d92:	2302      	movs	r3, #2
 8008d94:	e01a      	b.n	8008dcc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	69da      	ldr	r2, [r3, #28]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	899b      	ldrh	r3, [r3, #12]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008da6:	441a      	add	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	899b      	ldrh	r3, [r3, #12]
 8008db6:	461a      	mov	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dbe:	fb00 f202 	mul.w	r2, r0, r2
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	18ca      	adds	r2, r1, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	3320      	adds	r3, #32
 8008dea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <dir_next+0x28>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dfa:	d301      	bcc.n	8008e00 <dir_next+0x2c>
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	e0bb      	b.n	8008f78 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	461a      	mov	r2, r3
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e0c:	fb01 f202 	mul.w	r2, r1, r2
 8008e10:	1a9b      	subs	r3, r3, r2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f040 809d 	bne.w	8008f52 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10b      	bne.n	8008e42 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	8912      	ldrh	r2, [r2, #8]
 8008e32:	4293      	cmp	r3, r2
 8008e34:	f0c0 808d 	bcc.w	8008f52 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	61da      	str	r2, [r3, #28]
 8008e3e:	2304      	movs	r3, #4
 8008e40:	e09a      	b.n	8008f78 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	899b      	ldrh	r3, [r3, #12]
 8008e46:	461a      	mov	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	8952      	ldrh	r2, [r2, #10]
 8008e52:	3a01      	subs	r2, #1
 8008e54:	4013      	ands	r3, r2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d17b      	bne.n	8008f52 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f7ff fc0b 	bl	800867e <get_fat>
 8008e68:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d801      	bhi.n	8008e74 <dir_next+0xa0>
 8008e70:	2302      	movs	r3, #2
 8008e72:	e081      	b.n	8008f78 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d101      	bne.n	8008e80 <dir_next+0xac>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e07b      	b.n	8008f78 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d359      	bcc.n	8008f3e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d104      	bne.n	8008e9a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	61da      	str	r2, [r3, #28]
 8008e96:	2304      	movs	r3, #4
 8008e98:	e06e      	b.n	8008f78 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	f7ff fe3d 	bl	8008b22 <create_chain>
 8008ea8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <dir_next+0xe0>
 8008eb0:	2307      	movs	r3, #7
 8008eb2:	e061      	b.n	8008f78 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d101      	bne.n	8008ebe <dir_next+0xea>
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e05c      	b.n	8008f78 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec4:	d101      	bne.n	8008eca <dir_next+0xf6>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e056      	b.n	8008f78 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7ff fad6 	bl	800847c <sync_window>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <dir_next+0x106>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e04e      	b.n	8008f78 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	899b      	ldrh	r3, [r3, #12]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	f7ff f8fe 	bl	80080e8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008eec:	2300      	movs	r3, #0
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	6979      	ldr	r1, [r7, #20]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff fba4 	bl	8008640 <clust2sect>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8008efe:	e012      	b.n	8008f26 <dir_next+0x152>
						fs->wflag = 1;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fab8 	bl	800847c <sync_window>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <dir_next+0x142>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e030      	b.n	8008f78 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	895b      	ldrh	r3, [r3, #10]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d3e6      	bcc.n	8008f00 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad2      	subs	r2, r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008f44:	6979      	ldr	r1, [r7, #20]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff fb7a 	bl	8008640 <clust2sect>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	899b      	ldrh	r3, [r3, #12]
 8008f62:	461a      	mov	r2, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f6a:	fb00 f202 	mul.w	r2, r0, r2
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	18ca      	adds	r2, r1, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008f90:	2100      	movs	r1, #0
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff fe95 	bl	8008cc2 <dir_sdi>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d12b      	bne.n	8008ffa <dir_alloc+0x7a>
		n = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	4619      	mov	r1, r3
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f7ff faa9 	bl	8008504 <move_window>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d11d      	bne.n	8008ff8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2be5      	cmp	r3, #229	@ 0xe5
 8008fc4:	d004      	beq.n	8008fd0 <dir_alloc+0x50>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d107      	bne.n	8008fe0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	613b      	str	r3, [r7, #16]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d102      	bne.n	8008fe4 <dir_alloc+0x64>
 8008fde:	e00c      	b.n	8008ffa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff fef4 	bl	8008dd4 <dir_next>
 8008fec:	4603      	mov	r3, r0
 8008fee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0d7      	beq.n	8008fa6 <dir_alloc+0x26>
 8008ff6:	e000      	b.n	8008ffa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008ff8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d101      	bne.n	8009004 <dir_alloc+0x84>
 8009000:	2307      	movs	r3, #7
 8009002:	75fb      	strb	r3, [r7, #23]
	return res;
 8009004:	7dfb      	ldrb	r3, [r7, #23]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	331a      	adds	r3, #26
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe ffbf 	bl	8007fa0 <ld_word>
 8009022:	4603      	mov	r3, r0
 8009024:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b03      	cmp	r3, #3
 800902c:	d109      	bne.n	8009042 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	3314      	adds	r3, #20
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe ffb4 	bl	8007fa0 <ld_word>
 8009038:	4603      	mov	r3, r0
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009042:	68fb      	ldr	r3, [r7, #12]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	331a      	adds	r3, #26
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	b292      	uxth	r2, r2
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe ffd8 	bl	8008018 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d109      	bne.n	8009084 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f103 0214 	add.w	r2, r3, #20
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	0c1b      	lsrs	r3, r3, #16
 800907a:	b29b      	uxth	r3, r3
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fe ffca 	bl	8008018 <st_word>
	}
}
 8009084:	bf00      	nop
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800908c:	b590      	push	{r4, r7, lr}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	331a      	adds	r3, #26
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe ff80 	bl	8007fa0 <ld_word>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <cmp_lfn+0x1e>
 80090a6:	2300      	movs	r3, #0
 80090a8:	e059      	b.n	800915e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090b2:	1e5a      	subs	r2, r3, #1
 80090b4:	4613      	mov	r3, r2
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80090c0:	2301      	movs	r3, #1
 80090c2:	81fb      	strh	r3, [r7, #14]
 80090c4:	2300      	movs	r3, #0
 80090c6:	613b      	str	r3, [r7, #16]
 80090c8:	e033      	b.n	8009132 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80090ca:	4a27      	ldr	r2, [pc, #156]	@ (8009168 <cmp_lfn+0xdc>)
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	4413      	add	r3, r2
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	4413      	add	r3, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe ff61 	bl	8007fa0 <ld_word>
 80090de:	4603      	mov	r3, r0
 80090e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80090e2:	89fb      	ldrh	r3, [r7, #14]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01a      	beq.n	800911e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80090ec:	d812      	bhi.n	8009114 <cmp_lfn+0x88>
 80090ee:	89bb      	ldrh	r3, [r7, #12]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 f9a9 	bl	800b448 <ff_wtoupper>
 80090f6:	4603      	mov	r3, r0
 80090f8:	461c      	mov	r4, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	617a      	str	r2, [r7, #20]
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4413      	add	r3, r2
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f002 f99d 	bl	800b448 <ff_wtoupper>
 800910e:	4603      	mov	r3, r0
 8009110:	429c      	cmp	r4, r3
 8009112:	d001      	beq.n	8009118 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009114:	2300      	movs	r3, #0
 8009116:	e022      	b.n	800915e <cmp_lfn+0xd2>
			}
			wc = uc;
 8009118:	89bb      	ldrh	r3, [r7, #12]
 800911a:	81fb      	strh	r3, [r7, #14]
 800911c:	e006      	b.n	800912c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800911e:	89bb      	ldrh	r3, [r7, #12]
 8009120:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009124:	4293      	cmp	r3, r2
 8009126:	d001      	beq.n	800912c <cmp_lfn+0xa0>
 8009128:	2300      	movs	r3, #0
 800912a:	e018      	b.n	800915e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	3301      	adds	r3, #1
 8009130:	613b      	str	r3, [r7, #16]
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2b0c      	cmp	r3, #12
 8009136:	d9c8      	bls.n	80090ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00b      	beq.n	800915c <cmp_lfn+0xd0>
 8009144:	89fb      	ldrh	r3, [r7, #14]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d008      	beq.n	800915c <cmp_lfn+0xd0>
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	4413      	add	r3, r2
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <cmp_lfn+0xd0>
 8009158:	2300      	movs	r3, #0
 800915a:	e000      	b.n	800915e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800915c:	2301      	movs	r3, #1
}
 800915e:	4618      	mov	r0, r3
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	bd90      	pop	{r4, r7, pc}
 8009166:	bf00      	nop
 8009168:	0800f37c 	.word	0x0800f37c

0800916c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4611      	mov	r1, r2
 8009178:	461a      	mov	r2, r3
 800917a:	460b      	mov	r3, r1
 800917c:	71fb      	strb	r3, [r7, #7]
 800917e:	4613      	mov	r3, r2
 8009180:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	330d      	adds	r3, #13
 8009186:	79ba      	ldrb	r2, [r7, #6]
 8009188:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	330b      	adds	r3, #11
 800918e:	220f      	movs	r2, #15
 8009190:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	330c      	adds	r3, #12
 8009196:	2200      	movs	r2, #0
 8009198:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	331a      	adds	r3, #26
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe ff39 	bl	8008018 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	1e5a      	subs	r2, r3, #1
 80091aa:	4613      	mov	r3, r2
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	82fb      	strh	r3, [r7, #22]
 80091ba:	2300      	movs	r3, #0
 80091bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80091be:	8afb      	ldrh	r3, [r7, #22]
 80091c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d007      	beq.n	80091d8 <put_lfn+0x6c>
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	61fa      	str	r2, [r7, #28]
 80091ce:	005b      	lsls	r3, r3, #1
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4413      	add	r3, r2
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80091d8:	4a17      	ldr	r2, [pc, #92]	@ (8009238 <put_lfn+0xcc>)
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	4413      	add	r3, r2
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4413      	add	r3, r2
 80091e6:	8afa      	ldrh	r2, [r7, #22]
 80091e8:	4611      	mov	r1, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe ff14 	bl	8008018 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80091f0:	8afb      	ldrh	r3, [r7, #22]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <put_lfn+0x90>
 80091f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80091fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	3301      	adds	r3, #1
 8009200:	61bb      	str	r3, [r7, #24]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	2b0c      	cmp	r3, #12
 8009206:	d9da      	bls.n	80091be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009208:	8afb      	ldrh	r3, [r7, #22]
 800920a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800920e:	4293      	cmp	r3, r2
 8009210:	d006      	beq.n	8009220 <put_lfn+0xb4>
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <put_lfn+0xbc>
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009226:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	79fa      	ldrb	r2, [r7, #7]
 800922c:	701a      	strb	r2, [r3, #0]
}
 800922e:	bf00      	nop
 8009230:	3720      	adds	r7, #32
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	0800f37c 	.word	0x0800f37c

0800923c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08c      	sub	sp, #48	@ 0x30
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800924a:	220b      	movs	r2, #11
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f7fe ff29 	bl	80080a6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b05      	cmp	r3, #5
 8009258:	d92b      	bls.n	80092b2 <gen_numname+0x76>
		sr = seq;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800925e:	e022      	b.n	80092a6 <gen_numname+0x6a>
			wc = *lfn++;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	1c9a      	adds	r2, r3, #2
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800926a:	2300      	movs	r3, #0
 800926c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800926e:	e017      	b.n	80092a0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	005a      	lsls	r2, r3, #1
 8009274:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	4413      	add	r3, r2
 800927c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800927e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009280:	085b      	lsrs	r3, r3, #1
 8009282:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <gen_numname+0x5e>
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8009294:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8009298:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800929a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929c:	3301      	adds	r3, #1
 800929e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a2:	2b0f      	cmp	r3, #15
 80092a4:	d9e4      	bls.n	8009270 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1d8      	bne.n	8009260 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80092b2:	2307      	movs	r3, #7
 80092b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	3330      	adds	r3, #48	@ 0x30
 80092c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80092c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092ca:	2b39      	cmp	r3, #57	@ 0x39
 80092cc:	d904      	bls.n	80092d8 <gen_numname+0x9c>
 80092ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092d2:	3307      	adds	r3, #7
 80092d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	1e5a      	subs	r2, r3, #1
 80092dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80092de:	3330      	adds	r3, #48	@ 0x30
 80092e0:	443b      	add	r3, r7
 80092e2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80092e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	091b      	lsrs	r3, r3, #4
 80092ee:	603b      	str	r3, [r7, #0]
	} while (seq);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1df      	bne.n	80092b6 <gen_numname+0x7a>
	ns[i] = '~';
 80092f6:	f107 0214 	add.w	r2, r7, #20
 80092fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fc:	4413      	add	r3, r2
 80092fe:	227e      	movs	r2, #126	@ 0x7e
 8009300:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009302:	2300      	movs	r3, #0
 8009304:	627b      	str	r3, [r7, #36]	@ 0x24
 8009306:	e002      	b.n	800930e <gen_numname+0xd2>
 8009308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930a:	3301      	adds	r3, #1
 800930c:	627b      	str	r3, [r7, #36]	@ 0x24
 800930e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009312:	429a      	cmp	r2, r3
 8009314:	d205      	bcs.n	8009322 <gen_numname+0xe6>
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931a:	4413      	add	r3, r2
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b20      	cmp	r3, #32
 8009320:	d1f2      	bne.n	8009308 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009324:	2b07      	cmp	r3, #7
 8009326:	d807      	bhi.n	8009338 <gen_numname+0xfc>
 8009328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800932e:	3330      	adds	r3, #48	@ 0x30
 8009330:	443b      	add	r3, r7
 8009332:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009336:	e000      	b.n	800933a <gen_numname+0xfe>
 8009338:	2120      	movs	r1, #32
 800933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4413      	add	r3, r2
 8009344:	460a      	mov	r2, r1
 8009346:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934a:	2b07      	cmp	r3, #7
 800934c:	d9e9      	bls.n	8009322 <gen_numname+0xe6>
}
 800934e:	bf00      	nop
 8009350:	bf00      	nop
 8009352:	3730      	adds	r7, #48	@ 0x30
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009364:	230b      	movs	r3, #11
 8009366:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	b2da      	uxtb	r2, r3
 800936c:	0852      	lsrs	r2, r2, #1
 800936e:	01db      	lsls	r3, r3, #7
 8009370:	4313      	orrs	r3, r2
 8009372:	b2da      	uxtb	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	1c59      	adds	r1, r3, #1
 8009378:	6079      	str	r1, [r7, #4]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	4413      	add	r3, r2
 800937e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	3b01      	subs	r3, #1
 8009384:	60bb      	str	r3, [r7, #8]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1ed      	bne.n	8009368 <sum_sfn+0x10>
	return sum;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b086      	sub	sp, #24
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80093a8:	2100      	movs	r1, #0
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7ff fc89 	bl	8008cc2 <dir_sdi>
 80093b0:	4603      	mov	r3, r0
 80093b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <dir_find+0x24>
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	e0a9      	b.n	8009512 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80093be:	23ff      	movs	r3, #255	@ 0xff
 80093c0:	753b      	strb	r3, [r7, #20]
 80093c2:	7d3b      	ldrb	r3, [r7, #20]
 80093c4:	757b      	strb	r3, [r7, #21]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f04f 32ff 	mov.w	r2, #4294967295
 80093cc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6938      	ldr	r0, [r7, #16]
 80093d6:	f7ff f895 	bl	8008504 <move_window>
 80093da:	4603      	mov	r3, r0
 80093dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f040 8090 	bne.w	8009506 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80093ee:	7dbb      	ldrb	r3, [r7, #22]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <dir_find+0x60>
 80093f4:	2304      	movs	r3, #4
 80093f6:	75fb      	strb	r3, [r7, #23]
 80093f8:	e08a      	b.n	8009510 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	330b      	adds	r3, #11
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009406:	73fb      	strb	r3, [r7, #15]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7bfa      	ldrb	r2, [r7, #15]
 800940c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800940e:	7dbb      	ldrb	r3, [r7, #22]
 8009410:	2be5      	cmp	r3, #229	@ 0xe5
 8009412:	d007      	beq.n	8009424 <dir_find+0x8a>
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	f003 0308 	and.w	r3, r3, #8
 800941a:	2b00      	cmp	r3, #0
 800941c:	d009      	beq.n	8009432 <dir_find+0x98>
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b0f      	cmp	r3, #15
 8009422:	d006      	beq.n	8009432 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009424:	23ff      	movs	r3, #255	@ 0xff
 8009426:	757b      	strb	r3, [r7, #21]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f04f 32ff 	mov.w	r2, #4294967295
 800942e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009430:	e05e      	b.n	80094f0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	2b0f      	cmp	r3, #15
 8009436:	d136      	bne.n	80094a6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800943e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009442:	2b00      	cmp	r3, #0
 8009444:	d154      	bne.n	80094f0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009446:	7dbb      	ldrb	r3, [r7, #22]
 8009448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00d      	beq.n	800946c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	7b5b      	ldrb	r3, [r3, #13]
 8009456:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009458:	7dbb      	ldrb	r3, [r7, #22]
 800945a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800945e:	75bb      	strb	r3, [r7, #22]
 8009460:	7dbb      	ldrb	r3, [r7, #22]
 8009462:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	695a      	ldr	r2, [r3, #20]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800946c:	7dba      	ldrb	r2, [r7, #22]
 800946e:	7d7b      	ldrb	r3, [r7, #21]
 8009470:	429a      	cmp	r2, r3
 8009472:	d115      	bne.n	80094a0 <dir_find+0x106>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	330d      	adds	r3, #13
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	7d3a      	ldrb	r2, [r7, #20]
 800947e:	429a      	cmp	r2, r3
 8009480:	d10e      	bne.n	80094a0 <dir_find+0x106>
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f7ff fdfd 	bl	800908c <cmp_lfn>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <dir_find+0x106>
 8009498:	7d7b      	ldrb	r3, [r7, #21]
 800949a:	3b01      	subs	r3, #1
 800949c:	b2db      	uxtb	r3, r3
 800949e:	e000      	b.n	80094a2 <dir_find+0x108>
 80094a0:	23ff      	movs	r3, #255	@ 0xff
 80094a2:	757b      	strb	r3, [r7, #21]
 80094a4:	e024      	b.n	80094f0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80094a6:	7d7b      	ldrb	r3, [r7, #21]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d109      	bne.n	80094c0 <dir_find+0x126>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff ff51 	bl	8009358 <sum_sfn>
 80094b6:	4603      	mov	r3, r0
 80094b8:	461a      	mov	r2, r3
 80094ba:	7d3b      	ldrb	r3, [r7, #20]
 80094bc:	4293      	cmp	r3, r2
 80094be:	d024      	beq.n	800950a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <dir_find+0x14a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a18      	ldr	r0, [r3, #32]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3324      	adds	r3, #36	@ 0x24
 80094d6:	220b      	movs	r2, #11
 80094d8:	4619      	mov	r1, r3
 80094da:	f7fe fe20 	bl	800811e <mem_cmp>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d014      	beq.n	800950e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80094e4:	23ff      	movs	r3, #255	@ 0xff
 80094e6:	757b      	strb	r3, [r7, #21]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f04f 32ff 	mov.w	r2, #4294967295
 80094ee:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80094f0:	2100      	movs	r1, #0
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff fc6e 	bl	8008dd4 <dir_next>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f43f af65 	beq.w	80093ce <dir_find+0x34>
 8009504:	e004      	b.n	8009510 <dir_find+0x176>
		if (res != FR_OK) break;
 8009506:	bf00      	nop
 8009508:	e002      	b.n	8009510 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800950a:	bf00      	nop
 800950c:	e000      	b.n	8009510 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800950e:	bf00      	nop

	return res;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08c      	sub	sp, #48	@ 0x30
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009530:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <dir_register+0x20>
 8009538:	2306      	movs	r3, #6
 800953a:	e0e0      	b.n	80096fe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800953c:	2300      	movs	r3, #0
 800953e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009540:	e002      	b.n	8009548 <dir_register+0x2c>
 8009542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009544:	3301      	adds	r3, #1
 8009546:	627b      	str	r3, [r7, #36]	@ 0x24
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	4413      	add	r3, r2
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1f4      	bne.n	8009542 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800955e:	f107 030c 	add.w	r3, r7, #12
 8009562:	220c      	movs	r2, #12
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe fd9e 	bl	80080a6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d032      	beq.n	80095da <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2240      	movs	r2, #64	@ 0x40
 8009578:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800957c:	2301      	movs	r3, #1
 800957e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009580:	e016      	b.n	80095b0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	f107 010c 	add.w	r1, r7, #12
 8009590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009592:	f7ff fe53 	bl	800923c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff feff 	bl	800939a <dir_find>
 800959c:	4603      	mov	r3, r0
 800959e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80095a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d106      	bne.n	80095b8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	3301      	adds	r3, #1
 80095ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b2:	2b63      	cmp	r3, #99	@ 0x63
 80095b4:	d9e5      	bls.n	8009582 <dir_register+0x66>
 80095b6:	e000      	b.n	80095ba <dir_register+0x9e>
			if (res != FR_OK) break;
 80095b8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80095ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095bc:	2b64      	cmp	r3, #100	@ 0x64
 80095be:	d101      	bne.n	80095c4 <dir_register+0xa8>
 80095c0:	2307      	movs	r3, #7
 80095c2:	e09c      	b.n	80096fe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80095c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095c8:	2b04      	cmp	r3, #4
 80095ca:	d002      	beq.n	80095d2 <dir_register+0xb6>
 80095cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095d0:	e095      	b.n	80096fe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80095d2:	7dfa      	ldrb	r2, [r7, #23]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d007      	beq.n	80095f4 <dir_register+0xd8>
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	330c      	adds	r3, #12
 80095e8:	4a47      	ldr	r2, [pc, #284]	@ (8009708 <dir_register+0x1ec>)
 80095ea:	fba2 2303 	umull	r2, r3, r2, r3
 80095ee:	089b      	lsrs	r3, r3, #2
 80095f0:	3301      	adds	r3, #1
 80095f2:	e000      	b.n	80095f6 <dir_register+0xda>
 80095f4:	2301      	movs	r3, #1
 80095f6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80095f8:	6a39      	ldr	r1, [r7, #32]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fcc0 	bl	8008f80 <dir_alloc>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009606:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800960a:	2b00      	cmp	r3, #0
 800960c:	d148      	bne.n	80096a0 <dir_register+0x184>
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	3b01      	subs	r3, #1
 8009612:	623b      	str	r3, [r7, #32]
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d042      	beq.n	80096a0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695a      	ldr	r2, [r3, #20]
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	015b      	lsls	r3, r3, #5
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff fb4b 	bl	8008cc2 <dir_sdi>
 800962c:	4603      	mov	r3, r0
 800962e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009636:	2b00      	cmp	r3, #0
 8009638:	d132      	bne.n	80096a0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3324      	adds	r3, #36	@ 0x24
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff fe8a 	bl	8009358 <sum_sfn>
 8009644:	4603      	mov	r3, r0
 8009646:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	4619      	mov	r1, r3
 800964e:	69f8      	ldr	r0, [r7, #28]
 8009650:	f7fe ff58 	bl	8008504 <move_window>
 8009654:	4603      	mov	r3, r0
 8009656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800965a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800965e:	2b00      	cmp	r3, #0
 8009660:	d11d      	bne.n	800969e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	6918      	ldr	r0, [r3, #16]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a19      	ldr	r1, [r3, #32]
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	b2da      	uxtb	r2, r3
 800966e:	7efb      	ldrb	r3, [r7, #27]
 8009670:	f7ff fd7c 	bl	800916c <put_lfn>
				fs->wflag = 1;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	2201      	movs	r2, #1
 8009678:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff fba9 	bl	8008dd4 <dir_next>
 8009682:	4603      	mov	r3, r0
 8009684:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8009688:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800968c:	2b00      	cmp	r3, #0
 800968e:	d107      	bne.n	80096a0 <dir_register+0x184>
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	3b01      	subs	r3, #1
 8009694:	623b      	str	r3, [r7, #32]
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1d5      	bne.n	8009648 <dir_register+0x12c>
 800969c:	e000      	b.n	80096a0 <dir_register+0x184>
				if (res != FR_OK) break;
 800969e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80096a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d128      	bne.n	80096fa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	4619      	mov	r1, r3
 80096ae:	69f8      	ldr	r0, [r7, #28]
 80096b0:	f7fe ff28 	bl	8008504 <move_window>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80096ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d11b      	bne.n	80096fa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	2220      	movs	r2, #32
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fd0c 	bl	80080e8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a18      	ldr	r0, [r3, #32]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3324      	adds	r3, #36	@ 0x24
 80096d8:	220b      	movs	r2, #11
 80096da:	4619      	mov	r1, r3
 80096dc:	f7fe fce3 	bl	80080a6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	330c      	adds	r3, #12
 80096ec:	f002 0218 	and.w	r2, r2, #24
 80096f0:	b2d2      	uxtb	r2, r2
 80096f2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	2201      	movs	r2, #1
 80096f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80096fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3730      	adds	r7, #48	@ 0x30
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	4ec4ec4f 	.word	0x4ec4ec4f

0800970c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	@ 0x28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	2300      	movs	r3, #0
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	61ba      	str	r2, [r7, #24]
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	4413      	add	r3, r2
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800973a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800973c:	2b1f      	cmp	r3, #31
 800973e:	d940      	bls.n	80097c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009740:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009742:	2b2f      	cmp	r3, #47	@ 0x2f
 8009744:	d006      	beq.n	8009754 <create_name+0x48>
 8009746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009748:	2b5c      	cmp	r3, #92	@ 0x5c
 800974a:	d110      	bne.n	800976e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800974c:	e002      	b.n	8009754 <create_name+0x48>
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	3301      	adds	r3, #1
 8009752:	61bb      	str	r3, [r7, #24]
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4413      	add	r3, r2
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b2f      	cmp	r3, #47	@ 0x2f
 800975e:	d0f6      	beq.n	800974e <create_name+0x42>
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	4413      	add	r3, r2
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b5c      	cmp	r3, #92	@ 0x5c
 800976a:	d0f0      	beq.n	800974e <create_name+0x42>
			break;
 800976c:	e02a      	b.n	80097c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2bfe      	cmp	r3, #254	@ 0xfe
 8009772:	d901      	bls.n	8009778 <create_name+0x6c>
 8009774:	2306      	movs	r3, #6
 8009776:	e17d      	b.n	8009a74 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800977a:	b2db      	uxtb	r3, r3
 800977c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800977e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009780:	2101      	movs	r1, #1
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fe24 	bl	800b3d0 <ff_convert>
 8009788:	4603      	mov	r3, r0
 800978a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800978c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <create_name+0x8a>
 8009792:	2306      	movs	r3, #6
 8009794:	e16e      	b.n	8009a74 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009798:	2b7f      	cmp	r3, #127	@ 0x7f
 800979a:	d809      	bhi.n	80097b0 <create_name+0xa4>
 800979c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800979e:	4619      	mov	r1, r3
 80097a0:	488d      	ldr	r0, [pc, #564]	@ (80099d8 <create_name+0x2cc>)
 80097a2:	f7fe fce3 	bl	800816c <chk_chr>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <create_name+0xa4>
 80097ac:	2306      	movs	r3, #6
 80097ae:	e161      	b.n	8009a74 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	617a      	str	r2, [r7, #20]
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80097be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80097c0:	e7b4      	b.n	800972c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80097c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	441a      	add	r2, r3
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80097ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097d0:	2b1f      	cmp	r3, #31
 80097d2:	d801      	bhi.n	80097d8 <create_name+0xcc>
 80097d4:	2304      	movs	r3, #4
 80097d6:	e000      	b.n	80097da <create_name+0xce>
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80097de:	e011      	b.n	8009804 <create_name+0xf8>
		w = lfn[di - 1];
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80097e6:	3b01      	subs	r3, #1
 80097e8:	005b      	lsls	r3, r3, #1
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	4413      	add	r3, r2
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80097f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d002      	beq.n	80097fe <create_name+0xf2>
 80097f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80097fc:	d106      	bne.n	800980c <create_name+0x100>
		di--;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	3b01      	subs	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1ea      	bne.n	80097e0 <create_name+0xd4>
 800980a:	e000      	b.n	800980e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800980c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	4413      	add	r3, r2
 8009816:	2200      	movs	r2, #0
 8009818:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <create_name+0x118>
 8009820:	2306      	movs	r3, #6
 8009822:	e127      	b.n	8009a74 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3324      	adds	r3, #36	@ 0x24
 8009828:	220b      	movs	r2, #11
 800982a:	2120      	movs	r1, #32
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fc5b 	bl	80080e8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009832:	2300      	movs	r3, #0
 8009834:	61bb      	str	r3, [r7, #24]
 8009836:	e002      	b.n	800983e <create_name+0x132>
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	3301      	adds	r3, #1
 800983c:	61bb      	str	r3, [r7, #24]
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4413      	add	r3, r2
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	2b20      	cmp	r3, #32
 800984a:	d0f5      	beq.n	8009838 <create_name+0x12c>
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	2b2e      	cmp	r3, #46	@ 0x2e
 8009858:	d0ee      	beq.n	8009838 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d009      	beq.n	8009874 <create_name+0x168>
 8009860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009864:	f043 0303 	orr.w	r3, r3, #3
 8009868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800986c:	e002      	b.n	8009874 <create_name+0x168>
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	3b01      	subs	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d009      	beq.n	800988e <create_name+0x182>
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009880:	3b01      	subs	r3, #1
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4413      	add	r3, r2
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	2b2e      	cmp	r3, #46	@ 0x2e
 800988c:	d1ef      	bne.n	800986e <create_name+0x162>

	i = b = 0; ni = 8;
 800988e:	2300      	movs	r3, #0
 8009890:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009894:	2300      	movs	r3, #0
 8009896:	623b      	str	r3, [r7, #32]
 8009898:	2308      	movs	r3, #8
 800989a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	1c5a      	adds	r2, r3, #1
 80098a0:	61ba      	str	r2, [r7, #24]
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80098ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8090 	beq.w	80099d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80098b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	d006      	beq.n	80098c8 <create_name+0x1bc>
 80098ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80098be:	d10a      	bne.n	80098d6 <create_name+0x1ca>
 80098c0:	69ba      	ldr	r2, [r7, #24]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d006      	beq.n	80098d6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80098c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098cc:	f043 0303 	orr.w	r3, r3, #3
 80098d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80098d4:	e07d      	b.n	80099d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80098d6:	6a3a      	ldr	r2, [r7, #32]
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d203      	bcs.n	80098e6 <create_name+0x1da>
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d123      	bne.n	800992e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	2b0b      	cmp	r3, #11
 80098ea:	d106      	bne.n	80098fa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80098ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098f0:	f043 0303 	orr.w	r3, r3, #3
 80098f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80098f8:	e075      	b.n	80099e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d005      	beq.n	800990e <create_name+0x202>
 8009902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009906:	f043 0303 	orr.w	r3, r3, #3
 800990a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800990e:	69ba      	ldr	r2, [r7, #24]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	429a      	cmp	r2, r3
 8009914:	d866      	bhi.n	80099e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	2308      	movs	r3, #8
 800991c:	623b      	str	r3, [r7, #32]
 800991e:	230b      	movs	r3, #11
 8009920:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009922:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800992c:	e051      	b.n	80099d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800992e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009930:	2b7f      	cmp	r3, #127	@ 0x7f
 8009932:	d914      	bls.n	800995e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009934:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009936:	2100      	movs	r1, #0
 8009938:	4618      	mov	r0, r3
 800993a:	f001 fd49 	bl	800b3d0 <ff_convert>
 800993e:	4603      	mov	r3, r0
 8009940:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009944:	2b00      	cmp	r3, #0
 8009946:	d004      	beq.n	8009952 <create_name+0x246>
 8009948:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800994a:	3b80      	subs	r3, #128	@ 0x80
 800994c:	4a23      	ldr	r2, [pc, #140]	@ (80099dc <create_name+0x2d0>)
 800994e:	5cd3      	ldrb	r3, [r2, r3]
 8009950:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009956:	f043 0302 	orr.w	r3, r3, #2
 800995a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800995e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d007      	beq.n	8009974 <create_name+0x268>
 8009964:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009966:	4619      	mov	r1, r3
 8009968:	481d      	ldr	r0, [pc, #116]	@ (80099e0 <create_name+0x2d4>)
 800996a:	f7fe fbff 	bl	800816c <chk_chr>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d008      	beq.n	8009986 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009974:	235f      	movs	r3, #95	@ 0x5f
 8009976:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800997c:	f043 0303 	orr.w	r3, r3, #3
 8009980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009984:	e01b      	b.n	80099be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009988:	2b40      	cmp	r3, #64	@ 0x40
 800998a:	d909      	bls.n	80099a0 <create_name+0x294>
 800998c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800998e:	2b5a      	cmp	r3, #90	@ 0x5a
 8009990:	d806      	bhi.n	80099a0 <create_name+0x294>
					b |= 2;
 8009992:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009996:	f043 0302 	orr.w	r3, r3, #2
 800999a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800999e:	e00e      	b.n	80099be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80099a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099a2:	2b60      	cmp	r3, #96	@ 0x60
 80099a4:	d90b      	bls.n	80099be <create_name+0x2b2>
 80099a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80099aa:	d808      	bhi.n	80099be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80099ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099b0:	f043 0301 	orr.w	r3, r3, #1
 80099b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80099b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099ba:	3b20      	subs	r3, #32
 80099bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	623a      	str	r2, [r7, #32]
 80099c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80099c6:	b2d1      	uxtb	r1, r2
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	4413      	add	r3, r2
 80099cc:	460a      	mov	r2, r1
 80099ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80099d2:	e763      	b.n	800989c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80099d4:	bf00      	nop
 80099d6:	e006      	b.n	80099e6 <create_name+0x2da>
 80099d8:	0800eb00 	.word	0x0800eb00
 80099dc:	0800f2fc 	.word	0x0800f2fc
 80099e0:	0800eb0c 	.word	0x0800eb0c
			if (si > di) break;			/* No extension */
 80099e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80099ec:	2be5      	cmp	r3, #229	@ 0xe5
 80099ee:	d103      	bne.n	80099f8 <create_name+0x2ec>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2205      	movs	r2, #5
 80099f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	2b08      	cmp	r3, #8
 80099fc:	d104      	bne.n	8009a08 <create_name+0x2fc>
 80099fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009a08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a0c:	f003 030c 	and.w	r3, r3, #12
 8009a10:	2b0c      	cmp	r3, #12
 8009a12:	d005      	beq.n	8009a20 <create_name+0x314>
 8009a14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d105      	bne.n	8009a2c <create_name+0x320>
 8009a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a24:	f043 0302 	orr.w	r3, r3, #2
 8009a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a30:	f003 0302 	and.w	r3, r3, #2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d117      	bne.n	8009a68 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009a38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a3c:	f003 0303 	and.w	r3, r3, #3
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d105      	bne.n	8009a50 <create_name+0x344>
 8009a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a48:	f043 0310 	orr.w	r3, r3, #16
 8009a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009a50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a54:	f003 030c 	and.w	r3, r3, #12
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	d105      	bne.n	8009a68 <create_name+0x35c>
 8009a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a60:	f043 0308 	orr.w	r3, r3, #8
 8009a64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009a6e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009a72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3728      	adds	r7, #40	@ 0x28
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009a90:	e002      	b.n	8009a98 <follow_path+0x1c>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	3301      	adds	r3, #1
 8009a96:	603b      	str	r3, [r7, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a9e:	d0f8      	beq.n	8009a92 <follow_path+0x16>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b5c      	cmp	r3, #92	@ 0x5c
 8009aa6:	d0f4      	beq.n	8009a92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b1f      	cmp	r3, #31
 8009ab4:	d80a      	bhi.n	8009acc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2280      	movs	r2, #128	@ 0x80
 8009aba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009abe:	2100      	movs	r1, #0
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff f8fe 	bl	8008cc2 <dir_sdi>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75fb      	strb	r3, [r7, #23]
 8009aca:	e048      	b.n	8009b5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009acc:	463b      	mov	r3, r7
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff fe1b 	bl	800970c <create_name>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d139      	bne.n	8009b54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff fc5a 	bl	800939a <dir_find>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009af0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009af2:	7dfb      	ldrb	r3, [r7, #23]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d12c      	bne.n	8009b58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009afe:	7afb      	ldrb	r3, [r7, #11]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d127      	bne.n	8009b58 <follow_path+0xdc>
 8009b08:	2305      	movs	r3, #5
 8009b0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b0c:	e024      	b.n	8009b58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d121      	bne.n	8009b5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	799b      	ldrb	r3, [r3, #6]
 8009b1c:	f003 0310 	and.w	r3, r3, #16
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009b24:	2305      	movs	r3, #5
 8009b26:	75fb      	strb	r3, [r7, #23]
 8009b28:	e019      	b.n	8009b5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	8992      	ldrh	r2, [r2, #12]
 8009b38:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b3c:	fb00 f202 	mul.w	r2, r0, r2
 8009b40:	1a9b      	subs	r3, r3, r2
 8009b42:	440b      	add	r3, r1
 8009b44:	4619      	mov	r1, r3
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff fa61 	bl	800900e <ld_clust>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b52:	e7bb      	b.n	8009acc <follow_path+0x50>
			if (res != FR_OK) break;
 8009b54:	bf00      	nop
 8009b56:	e002      	b.n	8009b5e <follow_path+0xe2>
				break;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b5c:	bf00      	nop
			}
		}
	}

	return res;
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295
 8009b74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d031      	beq.n	8009be2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	e002      	b.n	8009b8c <get_ldnumber+0x24>
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	2b1f      	cmp	r3, #31
 8009b92:	d903      	bls.n	8009b9c <get_ldnumber+0x34>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b3a      	cmp	r3, #58	@ 0x3a
 8009b9a:	d1f4      	bne.n	8009b86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b3a      	cmp	r3, #58	@ 0x3a
 8009ba2:	d11c      	bne.n	8009bde <get_ldnumber+0x76>
			tp = *path;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	60fa      	str	r2, [r7, #12]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	3b30      	subs	r3, #48	@ 0x30
 8009bb4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b09      	cmp	r3, #9
 8009bba:	d80e      	bhi.n	8009bda <get_ldnumber+0x72>
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d10a      	bne.n	8009bda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d107      	bne.n	8009bda <get_ldnumber+0x72>
					vol = (int)i;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	e002      	b.n	8009be4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009bde:	2300      	movs	r3, #0
 8009be0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009be2:	693b      	ldr	r3, [r7, #16]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	371c      	adds	r7, #28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	70da      	strb	r2, [r3, #3]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f04f 32ff 	mov.w	r2, #4294967295
 8009c06:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7fe fc7a 	bl	8008504 <move_window>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <check_fs+0x2a>
 8009c16:	2304      	movs	r3, #4
 8009c18:	e038      	b.n	8009c8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3338      	adds	r3, #56	@ 0x38
 8009c1e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe f9bc 	bl	8007fa0 <ld_word>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d001      	beq.n	8009c38 <check_fs+0x48>
 8009c34:	2303      	movs	r3, #3
 8009c36:	e029      	b.n	8009c8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c3e:	2be9      	cmp	r3, #233	@ 0xe9
 8009c40:	d009      	beq.n	8009c56 <check_fs+0x66>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c48:	2beb      	cmp	r3, #235	@ 0xeb
 8009c4a:	d11e      	bne.n	8009c8a <check_fs+0x9a>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009c52:	2b90      	cmp	r3, #144	@ 0x90
 8009c54:	d119      	bne.n	8009c8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	3338      	adds	r3, #56	@ 0x38
 8009c5a:	3336      	adds	r3, #54	@ 0x36
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe f9b8 	bl	8007fd2 <ld_dword>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009c68:	4a0a      	ldr	r2, [pc, #40]	@ (8009c94 <check_fs+0xa4>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d101      	bne.n	8009c72 <check_fs+0x82>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e00c      	b.n	8009c8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3338      	adds	r3, #56	@ 0x38
 8009c76:	3352      	adds	r3, #82	@ 0x52
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe f9aa 	bl	8007fd2 <ld_dword>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4a05      	ldr	r2, [pc, #20]	@ (8009c98 <check_fs+0xa8>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d101      	bne.n	8009c8a <check_fs+0x9a>
 8009c86:	2300      	movs	r3, #0
 8009c88:	e000      	b.n	8009c8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009c8a:	2302      	movs	r3, #2
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	00544146 	.word	0x00544146
 8009c98:	33544146 	.word	0x33544146

08009c9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b096      	sub	sp, #88	@ 0x58
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff ff59 	bl	8009b68 <get_ldnumber>
 8009cb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	da01      	bge.n	8009cc2 <find_volume+0x26>
 8009cbe:	230b      	movs	r3, #11
 8009cc0:	e265      	b.n	800a18e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009cc2:	4a9f      	ldr	r2, [pc, #636]	@ (8009f40 <find_volume+0x2a4>)
 8009cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <find_volume+0x3a>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	e25b      	b.n	800a18e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009cda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	f023 0301 	bic.w	r3, r3, #1
 8009ce2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01a      	beq.n	8009d22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe f8b7 	bl	8007e64 <disk_status>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009cfc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10c      	bne.n	8009d22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d007      	beq.n	8009d1e <find_volume+0x82>
 8009d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d12:	f003 0304 	and.w	r3, r3, #4
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009d1a:	230a      	movs	r3, #10
 8009d1c:	e237      	b.n	800a18e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e235      	b.n	800a18e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d24:	2200      	movs	r2, #0
 8009d26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d32:	785b      	ldrb	r3, [r3, #1]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe f8af 	bl	8007e98 <disk_initialize>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009d40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e21e      	b.n	800a18e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d50:	79fb      	ldrb	r3, [r7, #7]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <find_volume+0xca>
 8009d56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009d62:	230a      	movs	r3, #10
 8009d64:	e213      	b.n	800a18e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d68:	7858      	ldrb	r0, [r3, #1]
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6c:	330c      	adds	r3, #12
 8009d6e:	461a      	mov	r2, r3
 8009d70:	2102      	movs	r1, #2
 8009d72:	f7fe f8f7 	bl	8007f64 <disk_ioctl>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <find_volume+0xe4>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e206      	b.n	800a18e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	899b      	ldrh	r3, [r3, #12]
 8009d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d88:	d80d      	bhi.n	8009da6 <find_volume+0x10a>
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	899b      	ldrh	r3, [r3, #12]
 8009d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d92:	d308      	bcc.n	8009da6 <find_volume+0x10a>
 8009d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d96:	899b      	ldrh	r3, [r3, #12]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9c:	899b      	ldrh	r3, [r3, #12]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	4013      	ands	r3, r2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <find_volume+0x10e>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e1f1      	b.n	800a18e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009dae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009db0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009db2:	f7ff ff1d 	bl	8009bf0 <check_fs>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d149      	bne.n	8009e58 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dc8:	e01e      	b.n	8009e08 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dcc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009dd8:	4413      	add	r3, r2
 8009dda:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dde:	3304      	adds	r3, #4
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d006      	beq.n	8009df4 <find_volume+0x158>
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	3308      	adds	r3, #8
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe f8f1 	bl	8007fd2 <ld_dword>
 8009df0:	4602      	mov	r2, r0
 8009df2:	e000      	b.n	8009df6 <find_volume+0x15a>
 8009df4:	2200      	movs	r2, #0
 8009df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	3358      	adds	r3, #88	@ 0x58
 8009dfc:	443b      	add	r3, r7
 8009dfe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e04:	3301      	adds	r3, #1
 8009e06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d9dd      	bls.n	8009dca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009e0e:	2300      	movs	r3, #0
 8009e10:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <find_volume+0x182>
 8009e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	3358      	adds	r3, #88	@ 0x58
 8009e24:	443b      	add	r3, r7
 8009e26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009e2a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d005      	beq.n	8009e3e <find_volume+0x1a2>
 8009e32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e36:	f7ff fedb 	bl	8009bf0 <check_fs>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	e000      	b.n	8009e40 <find_volume+0x1a4>
 8009e3e:	2303      	movs	r3, #3
 8009e40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d905      	bls.n	8009e58 <find_volume+0x1bc>
 8009e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e4e:	3301      	adds	r3, #1
 8009e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d9e2      	bls.n	8009e1e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d101      	bne.n	8009e64 <find_volume+0x1c8>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e194      	b.n	800a18e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d901      	bls.n	8009e70 <find_volume+0x1d4>
 8009e6c:	230d      	movs	r3, #13
 8009e6e:	e18e      	b.n	800a18e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e72:	3338      	adds	r3, #56	@ 0x38
 8009e74:	330b      	adds	r3, #11
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fe f892 	bl	8007fa0 <ld_word>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	461a      	mov	r2, r3
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	899b      	ldrh	r3, [r3, #12]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d001      	beq.n	8009e8c <find_volume+0x1f0>
 8009e88:	230d      	movs	r3, #13
 8009e8a:	e180      	b.n	800a18e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	3338      	adds	r3, #56	@ 0x38
 8009e90:	3316      	adds	r3, #22
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe f884 	bl	8007fa0 <ld_word>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d106      	bne.n	8009eb0 <find_volume+0x214>
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea4:	3338      	adds	r3, #56	@ 0x38
 8009ea6:	3324      	adds	r3, #36	@ 0x24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe f892 	bl	8007fd2 <ld_dword>
 8009eae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009eb4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec2:	789b      	ldrb	r3, [r3, #2]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d005      	beq.n	8009ed4 <find_volume+0x238>
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	789b      	ldrb	r3, [r3, #2]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d001      	beq.n	8009ed4 <find_volume+0x238>
 8009ed0:	230d      	movs	r3, #13
 8009ed2:	e15c      	b.n	800a18e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed6:	789b      	ldrb	r3, [r3, #2]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009edc:	fb02 f303 	mul.w	r3, r2, r3
 8009ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ee8:	461a      	mov	r2, r3
 8009eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef0:	895b      	ldrh	r3, [r3, #10]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d008      	beq.n	8009f08 <find_volume+0x26c>
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef8:	895b      	ldrh	r3, [r3, #10]
 8009efa:	461a      	mov	r2, r3
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	895b      	ldrh	r3, [r3, #10]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	4013      	ands	r3, r2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <find_volume+0x270>
 8009f08:	230d      	movs	r3, #13
 8009f0a:	e140      	b.n	800a18e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0e:	3338      	adds	r3, #56	@ 0x38
 8009f10:	3311      	adds	r3, #17
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe f844 	bl	8007fa0 <ld_word>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f22:	891b      	ldrh	r3, [r3, #8]
 8009f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f26:	8992      	ldrh	r2, [r2, #12]
 8009f28:	0952      	lsrs	r2, r2, #5
 8009f2a:	b292      	uxth	r2, r2
 8009f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f30:	fb01 f202 	mul.w	r2, r1, r2
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <find_volume+0x2a8>
 8009f3c:	230d      	movs	r3, #13
 8009f3e:	e126      	b.n	800a18e <find_volume+0x4f2>
 8009f40:	200022e4 	.word	0x200022e4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f46:	3338      	adds	r3, #56	@ 0x38
 8009f48:	3313      	adds	r3, #19
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe f828 	bl	8007fa0 <ld_word>
 8009f50:	4603      	mov	r3, r0
 8009f52:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <find_volume+0x2cc>
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5c:	3338      	adds	r3, #56	@ 0x38
 8009f5e:	3320      	adds	r3, #32
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe f836 	bl	8007fd2 <ld_dword>
 8009f66:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6a:	3338      	adds	r3, #56	@ 0x38
 8009f6c:	330e      	adds	r3, #14
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe f816 	bl	8007fa0 <ld_word>
 8009f74:	4603      	mov	r3, r0
 8009f76:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f78:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <find_volume+0x2e6>
 8009f7e:	230d      	movs	r3, #13
 8009f80:	e105      	b.n	800a18e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f82:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f86:	4413      	add	r3, r2
 8009f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f8a:	8911      	ldrh	r1, [r2, #8]
 8009f8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f8e:	8992      	ldrh	r2, [r2, #12]
 8009f90:	0952      	lsrs	r2, r2, #5
 8009f92:	b292      	uxth	r2, r2
 8009f94:	fbb1 f2f2 	udiv	r2, r1, r2
 8009f98:	b292      	uxth	r2, r2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d201      	bcs.n	8009faa <find_volume+0x30e>
 8009fa6:	230d      	movs	r3, #13
 8009fa8:	e0f1      	b.n	800a18e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fb2:	8952      	ldrh	r2, [r2, #10]
 8009fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fb8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <find_volume+0x328>
 8009fc0:	230d      	movs	r3, #13
 8009fc2:	e0e4      	b.n	800a18e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fcc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d802      	bhi.n	8009fda <find_volume+0x33e>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fdc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d802      	bhi.n	8009fea <find_volume+0x34e>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fec:	1c9a      	adds	r2, r3, #2
 8009fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ff6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009ff8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ffc:	441a      	add	r2, r3
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a000:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a002:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	441a      	add	r2, r3
 800a008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800a00c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a010:	2b03      	cmp	r3, #3
 800a012:	d11e      	bne.n	800a052 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	3338      	adds	r3, #56	@ 0x38
 800a018:	332a      	adds	r3, #42	@ 0x2a
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fd ffc0 	bl	8007fa0 <ld_word>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <find_volume+0x38e>
 800a026:	230d      	movs	r3, #13
 800a028:	e0b1      	b.n	800a18e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	891b      	ldrh	r3, [r3, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <find_volume+0x39a>
 800a032:	230d      	movs	r3, #13
 800a034:	e0ab      	b.n	800a18e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a038:	3338      	adds	r3, #56	@ 0x38
 800a03a:	332c      	adds	r3, #44	@ 0x2c
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fd ffc8 	bl	8007fd2 <ld_dword>
 800a042:	4602      	mov	r2, r0
 800a044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a046:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a050:	e01f      	b.n	800a092 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a054:	891b      	ldrh	r3, [r3, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <find_volume+0x3c2>
 800a05a:	230d      	movs	r3, #13
 800a05c:	e097      	b.n	800a18e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a060:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a064:	441a      	add	r2, r3
 800a066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a068:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a06a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d103      	bne.n	800a07a <find_volume+0x3de>
 800a072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	e00a      	b.n	800a090 <find_volume+0x3f4>
 800a07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07c:	69da      	ldr	r2, [r3, #28]
 800a07e:	4613      	mov	r3, r2
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	4413      	add	r3, r2
 800a084:	085a      	lsrs	r2, r3, #1
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a090:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a094:	6a1a      	ldr	r2, [r3, #32]
 800a096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a098:	899b      	ldrh	r3, [r3, #12]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a09e:	440b      	add	r3, r1
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a0a4:	8989      	ldrh	r1, [r1, #12]
 800a0a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d201      	bcs.n	800a0b2 <find_volume+0x416>
 800a0ae:	230d      	movs	r3, #13
 800a0b0:	e06d      	b.n	800a18e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b8:	619a      	str	r2, [r3, #24]
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0bc:	699a      	ldr	r2, [r3, #24]
 800a0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c4:	2280      	movs	r2, #128	@ 0x80
 800a0c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d149      	bne.n	800a164 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d2:	3338      	adds	r3, #56	@ 0x38
 800a0d4:	3330      	adds	r3, #48	@ 0x30
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fd ff62 	bl	8007fa0 <ld_word>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d140      	bne.n	800a164 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a0e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a0ea:	f7fe fa0b 	bl	8008504 <move_window>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d137      	bne.n	800a164 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	3338      	adds	r3, #56	@ 0x38
 800a0fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a102:	4618      	mov	r0, r3
 800a104:	f7fd ff4c 	bl	8007fa0 <ld_word>
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a110:	429a      	cmp	r2, r3
 800a112:	d127      	bne.n	800a164 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	3338      	adds	r3, #56	@ 0x38
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fd ff5a 	bl	8007fd2 <ld_dword>
 800a11e:	4603      	mov	r3, r0
 800a120:	4a1d      	ldr	r2, [pc, #116]	@ (800a198 <find_volume+0x4fc>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d11e      	bne.n	800a164 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a128:	3338      	adds	r3, #56	@ 0x38
 800a12a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fd ff4f 	bl	8007fd2 <ld_dword>
 800a134:	4603      	mov	r3, r0
 800a136:	4a19      	ldr	r2, [pc, #100]	@ (800a19c <find_volume+0x500>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d113      	bne.n	800a164 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13e:	3338      	adds	r3, #56	@ 0x38
 800a140:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a144:	4618      	mov	r0, r3
 800a146:	f7fd ff44 	bl	8007fd2 <ld_dword>
 800a14a:	4602      	mov	r2, r0
 800a14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a152:	3338      	adds	r3, #56	@ 0x38
 800a154:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fd ff3a 	bl	8007fd2 <ld_dword>
 800a15e:	4602      	mov	r2, r0
 800a160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a162:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a166:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a16a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a16c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a0 <find_volume+0x504>)
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	3301      	adds	r3, #1
 800a172:	b29a      	uxth	r2, r3
 800a174:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a0 <find_volume+0x504>)
 800a176:	801a      	strh	r2, [r3, #0]
 800a178:	4b09      	ldr	r3, [pc, #36]	@ (800a1a0 <find_volume+0x504>)
 800a17a:	881a      	ldrh	r2, [r3, #0]
 800a17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a182:	4a08      	ldr	r2, [pc, #32]	@ (800a1a4 <find_volume+0x508>)
 800a184:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a186:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a188:	f7fe f954 	bl	8008434 <clear_lock>
#endif
	return FR_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3758      	adds	r7, #88	@ 0x58
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	41615252 	.word	0x41615252
 800a19c:	61417272 	.word	0x61417272
 800a1a0:	200022e8 	.word	0x200022e8
 800a1a4:	2000230c 	.word	0x2000230c

0800a1a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a1b2:	2309      	movs	r3, #9
 800a1b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d01c      	beq.n	800a1f6 <validate+0x4e>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d018      	beq.n	800a1f6 <validate+0x4e>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d013      	beq.n	800a1f6 <validate+0x4e>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	889a      	ldrh	r2, [r3, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	88db      	ldrh	r3, [r3, #6]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d10c      	bne.n	800a1f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fd fe3e 	bl	8007e64 <disk_status>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <validate+0x4e>
			res = FR_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <validate+0x5a>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	e000      	b.n	800a204 <validate+0x5c>
 800a202:	2300      	movs	r3, #0
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	6013      	str	r3, [r2, #0]
	return res;
 800a208:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a226:	f107 0310 	add.w	r3, r7, #16
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff fc9c 	bl	8009b68 <get_ldnumber>
 800a230:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	2b00      	cmp	r3, #0
 800a236:	da01      	bge.n	800a23c <f_mount+0x28>
 800a238:	230b      	movs	r3, #11
 800a23a:	e02b      	b.n	800a294 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a23c:	4a17      	ldr	r2, [pc, #92]	@ (800a29c <f_mount+0x88>)
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a244:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d005      	beq.n	800a258 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a24c:	69b8      	ldr	r0, [r7, #24]
 800a24e:	f7fe f8f1 	bl	8008434 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	490d      	ldr	r1, [pc, #52]	@ (800a29c <f_mount+0x88>)
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <f_mount+0x66>
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d001      	beq.n	800a27e <f_mount+0x6a>
 800a27a:	2300      	movs	r3, #0
 800a27c:	e00a      	b.n	800a294 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a27e:	f107 010c 	add.w	r1, r7, #12
 800a282:	f107 0308 	add.w	r3, r7, #8
 800a286:	2200      	movs	r2, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f7ff fd07 	bl	8009c9c <find_volume>
 800a28e:	4603      	mov	r3, r0
 800a290:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a292:	7dfb      	ldrb	r3, [r7, #23]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3720      	adds	r7, #32
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	200022e4 	.word	0x200022e4

0800a2a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b09a      	sub	sp, #104	@ 0x68
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <f_open+0x18>
 800a2b4:	2309      	movs	r3, #9
 800a2b6:	e1b7      	b.n	800a628 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a2b8:	79fb      	ldrb	r3, [r7, #7]
 800a2ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a2c0:	79fa      	ldrb	r2, [r7, #7]
 800a2c2:	f107 0114 	add.w	r1, r7, #20
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff fce6 	bl	8009c9c <find_volume>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a2d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f040 819b 	bne.w	800a616 <f_open+0x376>
		dj.obj.fs = fs;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	f107 0318 	add.w	r3, r7, #24
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff fbc5 	bl	8009a7c <follow_path>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a2f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d118      	bne.n	800a332 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a300:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a304:	b25b      	sxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	da03      	bge.n	800a312 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a30a:	2306      	movs	r3, #6
 800a30c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a310:	e00f      	b.n	800a332 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a312:	79fb      	ldrb	r3, [r7, #7]
 800a314:	2b01      	cmp	r3, #1
 800a316:	bf8c      	ite	hi
 800a318:	2301      	movhi	r3, #1
 800a31a:	2300      	movls	r3, #0
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	461a      	mov	r2, r3
 800a320:	f107 0318 	add.w	r3, r7, #24
 800a324:	4611      	mov	r1, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f7fd ff3c 	bl	80081a4 <chk_lock>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a332:	79fb      	ldrb	r3, [r7, #7]
 800a334:	f003 031c 	and.w	r3, r3, #28
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d07f      	beq.n	800a43c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a33c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a340:	2b00      	cmp	r3, #0
 800a342:	d017      	beq.n	800a374 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a344:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d10e      	bne.n	800a36a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a34c:	f7fd ff86 	bl	800825c <enq_lock>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d006      	beq.n	800a364 <f_open+0xc4>
 800a356:	f107 0318 	add.w	r3, r7, #24
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff f8de 	bl	800951c <dir_register>
 800a360:	4603      	mov	r3, r0
 800a362:	e000      	b.n	800a366 <f_open+0xc6>
 800a364:	2312      	movs	r3, #18
 800a366:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	f043 0308 	orr.w	r3, r3, #8
 800a370:	71fb      	strb	r3, [r7, #7]
 800a372:	e010      	b.n	800a396 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a374:	7fbb      	ldrb	r3, [r7, #30]
 800a376:	f003 0311 	and.w	r3, r3, #17
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <f_open+0xe6>
					res = FR_DENIED;
 800a37e:	2307      	movs	r3, #7
 800a380:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a384:	e007      	b.n	800a396 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <f_open+0xf6>
 800a390:	2308      	movs	r3, #8
 800a392:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a396:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d168      	bne.n	800a470 <f_open+0x1d0>
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	f003 0308 	and.w	r3, r3, #8
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d063      	beq.n	800a470 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a3a8:	f7fd fcfe 	bl	8007da8 <get_fattime>
 800a3ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b0:	330e      	adds	r3, #14
 800a3b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fd fe4a 	bl	800804e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3bc:	3316      	adds	r3, #22
 800a3be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fd fe44 	bl	800804e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	330b      	adds	r3, #11
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe fe1a 	bl	800900e <ld_clust>
 800a3da:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe fe32 	bl	800904c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ea:	331c      	adds	r3, #28
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fd fe2d 	bl	800804e <st_dword>
					fs->wflag = 1;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a3fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d037      	beq.n	800a470 <f_open+0x1d0>
						dw = fs->winsect;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a404:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a406:	f107 0318 	add.w	r3, r7, #24
 800a40a:	2200      	movs	r2, #0
 800a40c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe fb22 	bl	8008a58 <remove_chain>
 800a414:	4603      	mov	r3, r0
 800a416:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800a41a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d126      	bne.n	800a470 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe f86c 	bl	8008504 <move_window>
 800a42c:	4603      	mov	r3, r0
 800a42e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a436:	3a01      	subs	r2, #1
 800a438:	615a      	str	r2, [r3, #20]
 800a43a:	e019      	b.n	800a470 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a43c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a440:	2b00      	cmp	r3, #0
 800a442:	d115      	bne.n	800a470 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a444:	7fbb      	ldrb	r3, [r7, #30]
 800a446:	f003 0310 	and.w	r3, r3, #16
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a44e:	2304      	movs	r3, #4
 800a450:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a454:	e00c      	b.n	800a470 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	f003 0302 	and.w	r3, r3, #2
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d007      	beq.n	800a470 <f_open+0x1d0>
 800a460:	7fbb      	ldrb	r3, [r7, #30]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <f_open+0x1d0>
						res = FR_DENIED;
 800a46a:	2307      	movs	r3, #7
 800a46c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a470:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a474:	2b00      	cmp	r3, #0
 800a476:	d126      	bne.n	800a4c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	f003 0308 	and.w	r3, r3, #8
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a482:	79fb      	ldrb	r3, [r7, #7]
 800a484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a488:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	bf8c      	ite	hi
 800a49e:	2301      	movhi	r3, #1
 800a4a0:	2300      	movls	r3, #0
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f107 0318 	add.w	r3, r7, #24
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fd fef7 	bl	80082a0 <inc_lock>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <f_open+0x226>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a4c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 80a3 	bne.w	800a616 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fe fd99 	bl	800900e <ld_clust>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e4:	331c      	adds	r3, #28
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fd fd73 	bl	8007fd2 <ld_dword>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	88da      	ldrh	r2, [r3, #6]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	79fa      	ldrb	r2, [r7, #7]
 800a50a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3330      	adds	r3, #48	@ 0x30
 800a522:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a526:	2100      	movs	r1, #0
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd fddd 	bl	80080e8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a52e:	79fb      	ldrb	r3, [r7, #7]
 800a530:	f003 0320 	and.w	r3, r3, #32
 800a534:	2b00      	cmp	r3, #0
 800a536:	d06e      	beq.n	800a616 <f_open+0x376>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d06a      	beq.n	800a616 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	895b      	ldrh	r3, [r3, #10]
 800a54c:	461a      	mov	r2, r3
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	899b      	ldrh	r3, [r3, #12]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
 800a556:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a564:	e016      	b.n	800a594 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe f887 	bl	800867e <get_fat>
 800a570:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a574:	2b01      	cmp	r3, #1
 800a576:	d802      	bhi.n	800a57e <f_open+0x2de>
 800a578:	2302      	movs	r3, #2
 800a57a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a57e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a584:	d102      	bne.n	800a58c <f_open+0x2ec>
 800a586:	2301      	movs	r3, #1
 800a588:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a58c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a58e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a594:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <f_open+0x304>
 800a59c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a59e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d8e0      	bhi.n	800a566 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a5aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d131      	bne.n	800a616 <f_open+0x376>
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	899b      	ldrh	r3, [r3, #12]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5be:	fb01 f202 	mul.w	r2, r1, r2
 800a5c2:	1a9b      	subs	r3, r3, r2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d026      	beq.n	800a616 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fe f837 	bl	8008640 <clust2sect>
 800a5d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a5d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d103      	bne.n	800a5e2 <f_open+0x342>
						res = FR_INT_ERR;
 800a5da:	2302      	movs	r3, #2
 800a5dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a5e0:	e019      	b.n	800a616 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	899b      	ldrh	r3, [r3, #12]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5f0:	441a      	add	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	7858      	ldrb	r0, [r3, #1]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6a1a      	ldr	r2, [r3, #32]
 800a604:	2301      	movs	r3, #1
 800a606:	f7fd fc6d 	bl	8007ee4 <disk_read>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <f_open+0x376>
 800a610:	2301      	movs	r3, #1
 800a612:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a616:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d002      	beq.n	800a624 <f_open+0x384>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a624:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3768      	adds	r7, #104	@ 0x68
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08e      	sub	sp, #56	@ 0x38
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2200      	movs	r2, #0
 800a646:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f107 0214 	add.w	r2, r7, #20
 800a64e:	4611      	mov	r1, r2
 800a650:	4618      	mov	r0, r3
 800a652:	f7ff fda9 	bl	800a1a8 <validate>
 800a656:	4603      	mov	r3, r0
 800a658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a65c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a660:	2b00      	cmp	r3, #0
 800a662:	d107      	bne.n	800a674 <f_read+0x44>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	7d5b      	ldrb	r3, [r3, #21]
 800a668:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a66c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <f_read+0x4a>
 800a674:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a678:	e135      	b.n	800a8e6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	7d1b      	ldrb	r3, [r3, #20]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <f_read+0x5a>
 800a686:	2307      	movs	r3, #7
 800a688:	e12d      	b.n	800a8e6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	f240 811e 	bls.w	800a8dc <f_read+0x2ac>
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a6a4:	e11a      	b.n	800a8dc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	8992      	ldrh	r2, [r2, #12]
 800a6ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6b2:	fb01 f202 	mul.w	r2, r1, r2
 800a6b6:	1a9b      	subs	r3, r3, r2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f040 80d5 	bne.w	800a868 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	8992      	ldrh	r2, [r2, #12]
 800a6c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	8952      	ldrh	r2, [r2, #10]
 800a6ce:	3a01      	subs	r2, #1
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d12f      	bne.n	800a73a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d103      	bne.n	800a6ea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6e8:	e013      	b.n	800a712 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d007      	beq.n	800a702 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7fe faaa 	bl	8008c52 <clmt_clust>
 800a6fe:	6338      	str	r0, [r7, #48]	@ 0x30
 800a700:	e007      	b.n	800a712 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	4619      	mov	r1, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	f7fd ffb7 	bl	800867e <get_fat>
 800a710:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a714:	2b01      	cmp	r3, #1
 800a716:	d804      	bhi.n	800a722 <f_read+0xf2>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2202      	movs	r2, #2
 800a71c:	755a      	strb	r2, [r3, #21]
 800a71e:	2302      	movs	r3, #2
 800a720:	e0e1      	b.n	800a8e6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a728:	d104      	bne.n	800a734 <f_read+0x104>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2201      	movs	r2, #1
 800a72e:	755a      	strb	r2, [r3, #21]
 800a730:	2301      	movs	r3, #1
 800a732:	e0d8      	b.n	800a8e6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a738:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f7fd ff7c 	bl	8008640 <clust2sect>
 800a748:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <f_read+0x12a>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2202      	movs	r2, #2
 800a754:	755a      	strb	r2, [r3, #21]
 800a756:	2302      	movs	r3, #2
 800a758:	e0c5      	b.n	800a8e6 <f_read+0x2b6>
			sect += csect;
 800a75a:	69ba      	ldr	r2, [r7, #24]
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	899b      	ldrh	r3, [r3, #12]
 800a766:	461a      	mov	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a76e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	2b00      	cmp	r3, #0
 800a774:	d041      	beq.n	800a7fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a776:	69fa      	ldr	r2, [r7, #28]
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	4413      	add	r3, r2
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	8952      	ldrh	r2, [r2, #10]
 800a780:	4293      	cmp	r3, r2
 800a782:	d905      	bls.n	800a790 <f_read+0x160>
					cc = fs->csize - csect;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	895b      	ldrh	r3, [r3, #10]
 800a788:	461a      	mov	r2, r3
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	7858      	ldrb	r0, [r3, #1]
 800a794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a79a:	f7fd fba3 	bl	8007ee4 <disk_read>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d004      	beq.n	800a7ae <f_read+0x17e>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	755a      	strb	r2, [r3, #21]
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e09b      	b.n	800a8e6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	7d1b      	ldrb	r3, [r3, #20]
 800a7b2:	b25b      	sxtb	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da18      	bge.n	800a7ea <f_read+0x1ba>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a1a      	ldr	r2, [r3, #32]
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d911      	bls.n	800a7ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a1a      	ldr	r2, [r3, #32]
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	8992      	ldrh	r2, [r2, #12]
 800a7d2:	fb02 f303 	mul.w	r3, r2, r3
 800a7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7d8:	18d0      	adds	r0, r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	899b      	ldrh	r3, [r3, #12]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	f7fd fc5e 	bl	80080a6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	899b      	ldrh	r3, [r3, #12]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	fb02 f303 	mul.w	r3, r2, r3
 800a7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a7f8:	e05c      	b.n	800a8b4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	69ba      	ldr	r2, [r7, #24]
 800a800:	429a      	cmp	r2, r3
 800a802:	d02e      	beq.n	800a862 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	7d1b      	ldrb	r3, [r3, #20]
 800a808:	b25b      	sxtb	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	da18      	bge.n	800a840 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	7858      	ldrb	r0, [r3, #1]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6a1a      	ldr	r2, [r3, #32]
 800a81c:	2301      	movs	r3, #1
 800a81e:	f7fd fb81 	bl	8007f24 <disk_write>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d004      	beq.n	800a832 <f_read+0x202>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	755a      	strb	r2, [r3, #21]
 800a82e:	2301      	movs	r3, #1
 800a830:	e059      	b.n	800a8e6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	7d1b      	ldrb	r3, [r3, #20]
 800a836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	7858      	ldrb	r0, [r3, #1]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a84a:	2301      	movs	r3, #1
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	f7fd fb49 	bl	8007ee4 <disk_read>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <f_read+0x232>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	755a      	strb	r2, [r3, #21]
 800a85e:	2301      	movs	r3, #1
 800a860:	e041      	b.n	800a8e6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	899b      	ldrh	r3, [r3, #12]
 800a86c:	4618      	mov	r0, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	8992      	ldrh	r2, [r2, #12]
 800a876:	fbb3 f1f2 	udiv	r1, r3, r2
 800a87a:	fb01 f202 	mul.w	r2, r1, r2
 800a87e:	1a9b      	subs	r3, r3, r2
 800a880:	1ac3      	subs	r3, r0, r3
 800a882:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d901      	bls.n	800a890 <f_read+0x260>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	8992      	ldrh	r2, [r2, #12]
 800a89e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8a2:	fb00 f202 	mul.w	r2, r0, r2
 800a8a6:	1a9b      	subs	r3, r3, r2
 800a8a8:	440b      	add	r3, r1
 800a8aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a8b0:	f7fd fbf9 	bl	80080a6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b8:	4413      	add	r3, r2
 800a8ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	699a      	ldr	r2, [r3, #24]
 800a8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c2:	441a      	add	r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	619a      	str	r2, [r3, #24]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ce:	441a      	add	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f47f aee1 	bne.w	800a6a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3738      	adds	r7, #56	@ 0x38
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b08c      	sub	sp, #48	@ 0x30
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	60f8      	str	r0, [r7, #12]
 800a8f6:	60b9      	str	r1, [r7, #8]
 800a8f8:	607a      	str	r2, [r7, #4]
 800a8fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f107 0210 	add.w	r2, r7, #16
 800a90c:	4611      	mov	r1, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7ff fc4a 	bl	800a1a8 <validate>
 800a914:	4603      	mov	r3, r0
 800a916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a91a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d107      	bne.n	800a932 <f_write+0x44>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	7d5b      	ldrb	r3, [r3, #21]
 800a926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a92a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <f_write+0x4a>
 800a932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a936:	e16a      	b.n	800ac0e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	7d1b      	ldrb	r3, [r3, #20]
 800a93c:	f003 0302 	and.w	r3, r3, #2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <f_write+0x5a>
 800a944:	2307      	movs	r3, #7
 800a946:	e162      	b.n	800ac0e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	699a      	ldr	r2, [r3, #24]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	441a      	add	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	429a      	cmp	r2, r3
 800a956:	f080 814c 	bcs.w	800abf2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	43db      	mvns	r3, r3
 800a960:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a962:	e146      	b.n	800abf2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	8992      	ldrh	r2, [r2, #12]
 800a96c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a970:	fb01 f202 	mul.w	r2, r1, r2
 800a974:	1a9b      	subs	r3, r3, r2
 800a976:	2b00      	cmp	r3, #0
 800a978:	f040 80f1 	bne.w	800ab5e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	8992      	ldrh	r2, [r2, #12]
 800a984:	fbb3 f3f2 	udiv	r3, r3, r2
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	8952      	ldrh	r2, [r2, #10]
 800a98c:	3a01      	subs	r2, #1
 800a98e:	4013      	ands	r3, r2
 800a990:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d143      	bne.n	800aa20 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10c      	bne.n	800a9ba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d11a      	bne.n	800a9e2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe f8b6 	bl	8008b22 <create_chain>
 800a9b6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a9b8:	e013      	b.n	800a9e2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f7fe f942 	bl	8008c52 <clmt_clust>
 800a9ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a9d0:	e007      	b.n	800a9e2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f7fe f8a1 	bl	8008b22 <create_chain>
 800a9e0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 8109 	beq.w	800abfc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d104      	bne.n	800a9fa <f_write+0x10c>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	755a      	strb	r2, [r3, #21]
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e109      	b.n	800ac0e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa00:	d104      	bne.n	800aa0c <f_write+0x11e>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2201      	movs	r2, #1
 800aa06:	755a      	strb	r2, [r3, #21]
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e100      	b.n	800ac0e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa10:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d102      	bne.n	800aa20 <f_write+0x132>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa1e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	7d1b      	ldrb	r3, [r3, #20]
 800aa24:	b25b      	sxtb	r3, r3
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	da18      	bge.n	800aa5c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	7858      	ldrb	r0, [r3, #1]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a1a      	ldr	r2, [r3, #32]
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f7fd fa73 	bl	8007f24 <disk_write>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <f_write+0x160>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2201      	movs	r2, #1
 800aa48:	755a      	strb	r2, [r3, #21]
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e0df      	b.n	800ac0e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	7d1b      	ldrb	r3, [r3, #20]
 800aa52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f7fd fdeb 	bl	8008640 <clust2sect>
 800aa6a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d104      	bne.n	800aa7c <f_write+0x18e>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2202      	movs	r2, #2
 800aa76:	755a      	strb	r2, [r3, #21]
 800aa78:	2302      	movs	r3, #2
 800aa7a:	e0c8      	b.n	800ac0e <f_write+0x320>
			sect += csect;
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	4413      	add	r3, r2
 800aa82:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	899b      	ldrh	r3, [r3, #12]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d043      	beq.n	800ab20 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	8952      	ldrh	r2, [r2, #10]
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d905      	bls.n	800aab2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	895b      	ldrh	r3, [r3, #10]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	7858      	ldrb	r0, [r3, #1]
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	69f9      	ldr	r1, [r7, #28]
 800aabc:	f7fd fa32 	bl	8007f24 <disk_write>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <f_write+0x1e2>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2201      	movs	r2, #1
 800aaca:	755a      	strb	r2, [r3, #21]
 800aacc:	2301      	movs	r3, #1
 800aace:	e09e      	b.n	800ac0e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6a1a      	ldr	r2, [r3, #32]
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	6a3a      	ldr	r2, [r7, #32]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d918      	bls.n	800ab10 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6a1a      	ldr	r2, [r3, #32]
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	8992      	ldrh	r2, [r2, #12]
 800aaf0:	fb02 f303 	mul.w	r3, r2, r3
 800aaf4:	69fa      	ldr	r2, [r7, #28]
 800aaf6:	18d1      	adds	r1, r2, r3
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	899b      	ldrh	r3, [r3, #12]
 800aafc:	461a      	mov	r2, r3
 800aafe:	f7fd fad2 	bl	80080a6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	7d1b      	ldrb	r3, [r3, #20]
 800ab06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	899b      	ldrh	r3, [r3, #12]
 800ab14:	461a      	mov	r2, r3
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	fb02 f303 	mul.w	r3, r2, r3
 800ab1c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ab1e:	e04b      	b.n	800abb8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d016      	beq.n	800ab58 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	699a      	ldr	r2, [r3, #24]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d210      	bcs.n	800ab58 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	7858      	ldrb	r0, [r3, #1]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab40:	2301      	movs	r3, #1
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	f7fd f9ce 	bl	8007ee4 <disk_read>
 800ab48:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d004      	beq.n	800ab58 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2201      	movs	r2, #1
 800ab52:	755a      	strb	r2, [r3, #21]
 800ab54:	2301      	movs	r3, #1
 800ab56:	e05a      	b.n	800ac0e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	899b      	ldrh	r3, [r3, #12]
 800ab62:	4618      	mov	r0, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	8992      	ldrh	r2, [r2, #12]
 800ab6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab70:	fb01 f202 	mul.w	r2, r1, r2
 800ab74:	1a9b      	subs	r3, r3, r2
 800ab76:	1ac3      	subs	r3, r0, r3
 800ab78:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ab7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d901      	bls.n	800ab86 <f_write+0x298>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	8992      	ldrh	r2, [r2, #12]
 800ab94:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab98:	fb00 f202 	mul.w	r2, r0, r2
 800ab9c:	1a9b      	subs	r3, r3, r2
 800ab9e:	440b      	add	r3, r1
 800aba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aba2:	69f9      	ldr	r1, [r7, #28]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fd fa7e 	bl	80080a6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	7d1b      	ldrb	r3, [r3, #20]
 800abae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800abb8:	69fa      	ldr	r2, [r7, #28]
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	4413      	add	r3, r2
 800abbe:	61fb      	str	r3, [r7, #28]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	699a      	ldr	r2, [r3, #24]
 800abc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc6:	441a      	add	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	619a      	str	r2, [r3, #24]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	68da      	ldr	r2, [r3, #12]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	bf38      	it	cc
 800abd8:	461a      	movcc	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	60da      	str	r2, [r3, #12]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	441a      	add	r2, r3
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f47f aeb5 	bne.w	800a964 <f_write+0x76>
 800abfa:	e000      	b.n	800abfe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800abfc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	7d1b      	ldrb	r3, [r3, #20]
 800ac02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3730      	adds	r7, #48	@ 0x30
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b086      	sub	sp, #24
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f107 0208 	add.w	r2, r7, #8
 800ac24:	4611      	mov	r1, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fabe 	bl	800a1a8 <validate>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac30:	7dfb      	ldrb	r3, [r7, #23]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d168      	bne.n	800ad08 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	7d1b      	ldrb	r3, [r3, #20]
 800ac3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d062      	beq.n	800ad08 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	7d1b      	ldrb	r3, [r3, #20]
 800ac46:	b25b      	sxtb	r3, r3
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	da15      	bge.n	800ac78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	7858      	ldrb	r0, [r3, #1]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1a      	ldr	r2, [r3, #32]
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f7fd f962 	bl	8007f24 <disk_write>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <f_sync+0x54>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e04f      	b.n	800ad0a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	7d1b      	ldrb	r3, [r3, #20]
 800ac6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ac78:	f7fd f896 	bl	8007da8 <get_fattime>
 800ac7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac84:	4619      	mov	r1, r3
 800ac86:	4610      	mov	r0, r2
 800ac88:	f7fd fc3c 	bl	8008504 <move_window>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ac90:	7dfb      	ldrb	r3, [r7, #23]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d138      	bne.n	800ad08 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	330b      	adds	r3, #11
 800aca0:	781a      	ldrb	r2, [r3, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	330b      	adds	r3, #11
 800aca6:	f042 0220 	orr.w	r2, r2, #32
 800acaa:	b2d2      	uxtb	r2, r2
 800acac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	461a      	mov	r2, r3
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	f7fe f9c7 	bl	800904c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f103 021c 	add.w	r2, r3, #28
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f7fd f9bf 	bl	800804e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3316      	adds	r3, #22
 800acd4:	6939      	ldr	r1, [r7, #16]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fd f9b9 	bl	800804e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3312      	adds	r3, #18
 800ace0:	2100      	movs	r1, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fd f998 	bl	8008018 <st_word>
					fs->wflag = 1;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	2201      	movs	r2, #1
 800acec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fd fc35 	bl	8008560 <sync_fs>
 800acf6:	4603      	mov	r3, r0
 800acf8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	7d1b      	ldrb	r3, [r3, #20]
 800acfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad02:	b2da      	uxtb	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3718      	adds	r7, #24
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7ff ff7b 	bl	800ac16 <f_sync>
 800ad20:	4603      	mov	r3, r0
 800ad22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d118      	bne.n	800ad5c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f107 0208 	add.w	r2, r7, #8
 800ad30:	4611      	mov	r1, r2
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7ff fa38 	bl	800a1a8 <validate>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10c      	bne.n	800ad5c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fd fb38 	bl	80083bc <dec_lock>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b090      	sub	sp, #64	@ 0x40
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f107 0208 	add.w	r2, r7, #8
 800ad76:	4611      	mov	r1, r2
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff fa15 	bl	800a1a8 <validate>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ad84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <f_lseek+0x2e>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7d5b      	ldrb	r3, [r3, #21]
 800ad90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ad94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <f_lseek+0x3c>
 800ad9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ada0:	e201      	b.n	800b1a6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 80d9 	beq.w	800af5e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb2:	d15a      	bne.n	800ae6a <f_lseek+0x104>
			tbl = fp->cltbl;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800adba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbc:	1d1a      	adds	r2, r3, #4
 800adbe:	627a      	str	r2, [r7, #36]	@ 0x24
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	617b      	str	r3, [r7, #20]
 800adc4:	2302      	movs	r3, #2
 800adc6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800adce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add0:	2b00      	cmp	r3, #0
 800add2:	d03a      	beq.n	800ae4a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800add4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add6:	613b      	str	r3, [r7, #16]
 800add8:	2300      	movs	r3, #0
 800adda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800addc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adde:	3302      	adds	r3, #2
 800ade0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	60fb      	str	r3, [r7, #12]
 800ade6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade8:	3301      	adds	r3, #1
 800adea:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fd fc44 	bl	800867e <get_fat>
 800adf6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d804      	bhi.n	800ae08 <f_lseek+0xa2>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2202      	movs	r2, #2
 800ae02:	755a      	strb	r2, [r3, #21]
 800ae04:	2302      	movs	r3, #2
 800ae06:	e1ce      	b.n	800b1a6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0e:	d104      	bne.n	800ae1a <f_lseek+0xb4>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	755a      	strb	r2, [r3, #21]
 800ae16:	2301      	movs	r3, #1
 800ae18:	e1c5      	b.n	800b1a6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d0de      	beq.n	800ade2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ae24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d809      	bhi.n	800ae40 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	1d1a      	adds	r2, r3, #4
 800ae30:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae38:	1d1a      	adds	r2, r3, #4
 800ae3a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	69db      	ldr	r3, [r3, #28]
 800ae44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d3c4      	bcc.n	800add4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae50:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ae52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d803      	bhi.n	800ae62 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	e19f      	b.n	800b1a2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ae62:	2311      	movs	r3, #17
 800ae64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ae68:	e19b      	b.n	800b1a2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d902      	bls.n	800ae7a <f_lseek+0x114>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 818d 	beq.w	800b1a2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7fd fedf 	bl	8008c52 <clmt_clust>
 800ae94:	4602      	mov	r2, r0
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fd fbcc 	bl	8008640 <clust2sect>
 800aea8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d104      	bne.n	800aeba <f_lseek+0x154>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	755a      	strb	r2, [r3, #21]
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e175      	b.n	800b1a6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	8992      	ldrh	r2, [r2, #12]
 800aec2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	8952      	ldrh	r2, [r2, #10]
 800aeca:	3a01      	subs	r2, #1
 800aecc:	4013      	ands	r3, r2
 800aece:	69ba      	ldr	r2, [r7, #24]
 800aed0:	4413      	add	r3, r2
 800aed2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	8992      	ldrh	r2, [r2, #12]
 800aedc:	fbb3 f1f2 	udiv	r1, r3, r2
 800aee0:	fb01 f202 	mul.w	r2, r1, r2
 800aee4:	1a9b      	subs	r3, r3, r2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 815b 	beq.w	800b1a2 <f_lseek+0x43c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	69ba      	ldr	r2, [r7, #24]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	f000 8155 	beq.w	800b1a2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	7d1b      	ldrb	r3, [r3, #20]
 800aefc:	b25b      	sxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	da18      	bge.n	800af34 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	7858      	ldrb	r0, [r3, #1]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a1a      	ldr	r2, [r3, #32]
 800af10:	2301      	movs	r3, #1
 800af12:	f7fd f807 	bl	8007f24 <disk_write>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d004      	beq.n	800af26 <f_lseek+0x1c0>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	755a      	strb	r2, [r3, #21]
 800af22:	2301      	movs	r3, #1
 800af24:	e13f      	b.n	800b1a6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	7d1b      	ldrb	r3, [r3, #20]
 800af2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	7858      	ldrb	r0, [r3, #1]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af3e:	2301      	movs	r3, #1
 800af40:	69ba      	ldr	r2, [r7, #24]
 800af42:	f7fc ffcf 	bl	8007ee4 <disk_read>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d004      	beq.n	800af56 <f_lseek+0x1f0>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	755a      	strb	r2, [r3, #21]
 800af52:	2301      	movs	r3, #1
 800af54:	e127      	b.n	800b1a6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	621a      	str	r2, [r3, #32]
 800af5c:	e121      	b.n	800b1a2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	429a      	cmp	r2, r3
 800af66:	d908      	bls.n	800af7a <f_lseek+0x214>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7d1b      	ldrb	r3, [r3, #20]
 800af6c:	f003 0302 	and.w	r3, r3, #2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d102      	bne.n	800af7a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	637b      	str	r3, [r7, #52]	@ 0x34
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af88:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 80b5 	beq.w	800b0fc <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	895b      	ldrh	r3, [r3, #10]
 800af96:	461a      	mov	r2, r3
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	899b      	ldrh	r3, [r3, #12]
 800af9c:	fb02 f303 	mul.w	r3, r2, r3
 800afa0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d01b      	beq.n	800afe0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	1e5a      	subs	r2, r3, #1
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	fbb2 f2f3 	udiv	r2, r2, r3
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	1e59      	subs	r1, r3, #1
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d30f      	bcc.n	800afe0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	1e5a      	subs	r2, r3, #1
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	425b      	negs	r3, r3
 800afc8:	401a      	ands	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afde:	e022      	b.n	800b026 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d119      	bne.n	800b020 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2100      	movs	r1, #0
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fd fd96 	bl	8008b22 <create_chain>
 800aff6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affa:	2b01      	cmp	r3, #1
 800affc:	d104      	bne.n	800b008 <f_lseek+0x2a2>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2202      	movs	r2, #2
 800b002:	755a      	strb	r2, [r3, #21]
 800b004:	2302      	movs	r3, #2
 800b006:	e0ce      	b.n	800b1a6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00e:	d104      	bne.n	800b01a <f_lseek+0x2b4>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	755a      	strb	r2, [r3, #21]
 800b016:	2301      	movs	r3, #1
 800b018:	e0c5      	b.n	800b1a6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b01e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b024:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d067      	beq.n	800b0fc <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b02c:	e03a      	b.n	800b0a4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	603b      	str	r3, [r7, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	699a      	ldr	r2, [r3, #24]
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	441a      	add	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	7d1b      	ldrb	r3, [r3, #20]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b052:	4618      	mov	r0, r3
 800b054:	f7fd fd65 	bl	8008b22 <create_chain>
 800b058:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d108      	bne.n	800b072 <f_lseek+0x30c>
							ofs = 0; break;
 800b060:	2300      	movs	r3, #0
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	e022      	b.n	800b0ac <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fd fb07 	bl	800867e <get_fat>
 800b070:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b078:	d104      	bne.n	800b084 <f_lseek+0x31e>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	755a      	strb	r2, [r3, #21]
 800b080:	2301      	movs	r3, #1
 800b082:	e090      	b.n	800b1a6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b086:	2b01      	cmp	r3, #1
 800b088:	d904      	bls.n	800b094 <f_lseek+0x32e>
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b090:	429a      	cmp	r2, r3
 800b092:	d304      	bcc.n	800b09e <f_lseek+0x338>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2202      	movs	r2, #2
 800b098:	755a      	strb	r2, [r3, #21]
 800b09a:	2302      	movs	r3, #2
 800b09c:	e083      	b.n	800b1a6 <f_lseek+0x440>
					fp->clust = clst;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0a2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d8c0      	bhi.n	800b02e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699a      	ldr	r2, [r3, #24]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	441a      	add	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	899b      	ldrh	r3, [r3, #12]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0c4:	fb01 f202 	mul.w	r2, r1, r2
 800b0c8:	1a9b      	subs	r3, r3, r2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d016      	beq.n	800b0fc <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fd fab4 	bl	8008640 <clust2sect>
 800b0d8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d104      	bne.n	800b0ea <f_lseek+0x384>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	755a      	strb	r2, [r3, #21]
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	e05d      	b.n	800b1a6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	899b      	ldrh	r3, [r3, #12]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0f8:	4413      	add	r3, r2
 800b0fa:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	699a      	ldr	r2, [r3, #24]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	429a      	cmp	r2, r3
 800b106:	d90a      	bls.n	800b11e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	699a      	ldr	r2, [r3, #24]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	7d1b      	ldrb	r3, [r3, #20]
 800b114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	8992      	ldrh	r2, [r2, #12]
 800b126:	fbb3 f1f2 	udiv	r1, r3, r2
 800b12a:	fb01 f202 	mul.w	r2, r1, r2
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d036      	beq.n	800b1a2 <f_lseek+0x43c>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a1b      	ldr	r3, [r3, #32]
 800b138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d031      	beq.n	800b1a2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	7d1b      	ldrb	r3, [r3, #20]
 800b142:	b25b      	sxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	da18      	bge.n	800b17a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	7858      	ldrb	r0, [r3, #1]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1a      	ldr	r2, [r3, #32]
 800b156:	2301      	movs	r3, #1
 800b158:	f7fc fee4 	bl	8007f24 <disk_write>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <f_lseek+0x406>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	755a      	strb	r2, [r3, #21]
 800b168:	2301      	movs	r3, #1
 800b16a:	e01c      	b.n	800b1a6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	7d1b      	ldrb	r3, [r3, #20]
 800b170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b174:	b2da      	uxtb	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	7858      	ldrb	r0, [r3, #1]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b184:	2301      	movs	r3, #1
 800b186:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b188:	f7fc feac 	bl	8007ee4 <disk_read>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d004      	beq.n	800b19c <f_lseek+0x436>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2201      	movs	r2, #1
 800b196:	755a      	strb	r2, [r3, #21]
 800b198:	2301      	movs	r3, #1
 800b19a:	e004      	b.n	800b1a6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1a0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b1a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3740      	adds	r7, #64	@ 0x40
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b092      	sub	sp, #72	@ 0x48
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b1ba:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b1be:	f107 030c 	add.w	r3, r7, #12
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe fd69 	bl	8009c9c <find_volume>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800b1d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f040 8099 	bne.w	800b30c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b1da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e2:	699a      	ldr	r2, [r3, #24]
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	3b02      	subs	r3, #2
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d804      	bhi.n	800b1f8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f0:	699a      	ldr	r2, [r3, #24]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	e089      	b.n	800b30c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d128      	bne.n	800b256 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b204:	2302      	movs	r3, #2
 800b206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b20c:	f107 0314 	add.w	r3, r7, #20
 800b210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b212:	4618      	mov	r0, r3
 800b214:	f7fd fa33 	bl	800867e <get_fat>
 800b218:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b220:	d103      	bne.n	800b22a <f_getfree+0x7c>
 800b222:	2301      	movs	r3, #1
 800b224:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b228:	e063      	b.n	800b2f2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d103      	bne.n	800b238 <f_getfree+0x8a>
 800b230:	2302      	movs	r3, #2
 800b232:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b236:	e05c      	b.n	800b2f2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d102      	bne.n	800b244 <f_getfree+0x96>
 800b23e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b240:	3301      	adds	r3, #1
 800b242:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800b244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b246:	3301      	adds	r3, #1
 800b248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24c:	69db      	ldr	r3, [r3, #28]
 800b24e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b250:	429a      	cmp	r2, r3
 800b252:	d3db      	bcc.n	800b20c <f_getfree+0x5e>
 800b254:	e04d      	b.n	800b2f2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b260:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	637b      	str	r3, [r7, #52]	@ 0x34
 800b266:	2300      	movs	r3, #0
 800b268:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800b26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d113      	bne.n	800b298 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b278:	4619      	mov	r1, r3
 800b27a:	f7fd f943 	bl	8008504 <move_window>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800b284:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d131      	bne.n	800b2f0 <f_getfree+0x142>
							p = fs->win;
 800b28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28e:	3338      	adds	r3, #56	@ 0x38
 800b290:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800b292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b294:	899b      	ldrh	r3, [r3, #12]
 800b296:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d10f      	bne.n	800b2c0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b2a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2a2:	f7fc fe7d 	bl	8007fa0 <ld_word>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d102      	bne.n	800b2b2 <f_getfree+0x104>
 800b2ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	3302      	adds	r3, #2
 800b2b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ba:	3b02      	subs	r3, #2
 800b2bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2be:	e010      	b.n	800b2e2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b2c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2c2:	f7fc fe86 	bl	8007fd2 <ld_dword>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <f_getfree+0x128>
 800b2d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d8:	3304      	adds	r3, #4
 800b2da:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2de:	3b04      	subs	r3, #4
 800b2e0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800b2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1bd      	bne.n	800b26a <f_getfree+0xbc>
 800b2ee:	e000      	b.n	800b2f2 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b2f0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2f6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2fc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b300:	791a      	ldrb	r2, [r3, #4]
 800b302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b304:	f042 0201 	orr.w	r2, r2, #1
 800b308:	b2d2      	uxtb	r2, r2
 800b30a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b30c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b310:	4618      	mov	r0, r3
 800b312:	3748      	adds	r7, #72	@ 0x48
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	4613      	mov	r3, r2
 800b324:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b326:	2301      	movs	r3, #1
 800b328:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b32e:	4b1f      	ldr	r3, [pc, #124]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b330:	7a5b      	ldrb	r3, [r3, #9]
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d131      	bne.n	800b39c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b338:	4b1c      	ldr	r3, [pc, #112]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b33a:	7a5b      	ldrb	r3, [r3, #9]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	461a      	mov	r2, r3
 800b340:	4b1a      	ldr	r3, [pc, #104]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b342:	2100      	movs	r1, #0
 800b344:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b346:	4b19      	ldr	r3, [pc, #100]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b348:	7a5b      	ldrb	r3, [r3, #9]
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	4a17      	ldr	r2, [pc, #92]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b356:	4b15      	ldr	r3, [pc, #84]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b358:	7a5b      	ldrb	r3, [r3, #9]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	461a      	mov	r2, r3
 800b35e:	4b13      	ldr	r3, [pc, #76]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b360:	4413      	add	r3, r2
 800b362:	79fa      	ldrb	r2, [r7, #7]
 800b364:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b366:	4b11      	ldr	r3, [pc, #68]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b368:	7a5b      	ldrb	r3, [r3, #9]
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	b2d1      	uxtb	r1, r2
 800b370:	4a0e      	ldr	r2, [pc, #56]	@ (800b3ac <FATFS_LinkDriverEx+0x94>)
 800b372:	7251      	strb	r1, [r2, #9]
 800b374:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b376:	7dbb      	ldrb	r3, [r7, #22]
 800b378:	3330      	adds	r3, #48	@ 0x30
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	3301      	adds	r3, #1
 800b384:	223a      	movs	r2, #58	@ 0x3a
 800b386:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	3302      	adds	r3, #2
 800b38c:	222f      	movs	r2, #47	@ 0x2f
 800b38e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	3303      	adds	r3, #3
 800b394:	2200      	movs	r2, #0
 800b396:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	371c      	adds	r7, #28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	2000250c 	.word	0x2000250c

0800b3b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff ffaa 	bl	800b318 <FATFS_LinkDriverEx>
 800b3c4:	4603      	mov	r3, r0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
	...

0800b3d0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b3dc:	88fb      	ldrh	r3, [r7, #6]
 800b3de:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3e0:	d802      	bhi.n	800b3e8 <ff_convert+0x18>
		c = chr;
 800b3e2:	88fb      	ldrh	r3, [r7, #6]
 800b3e4:	81fb      	strh	r3, [r7, #14]
 800b3e6:	e025      	b.n	800b434 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00b      	beq.n	800b406 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b3ee:	88fb      	ldrh	r3, [r7, #6]
 800b3f0:	2bff      	cmp	r3, #255	@ 0xff
 800b3f2:	d805      	bhi.n	800b400 <ff_convert+0x30>
 800b3f4:	88fb      	ldrh	r3, [r7, #6]
 800b3f6:	3b80      	subs	r3, #128	@ 0x80
 800b3f8:	4a12      	ldr	r2, [pc, #72]	@ (800b444 <ff_convert+0x74>)
 800b3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3fe:	e000      	b.n	800b402 <ff_convert+0x32>
 800b400:	2300      	movs	r3, #0
 800b402:	81fb      	strh	r3, [r7, #14]
 800b404:	e016      	b.n	800b434 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b406:	2300      	movs	r3, #0
 800b408:	81fb      	strh	r3, [r7, #14]
 800b40a:	e009      	b.n	800b420 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b40c:	89fb      	ldrh	r3, [r7, #14]
 800b40e:	4a0d      	ldr	r2, [pc, #52]	@ (800b444 <ff_convert+0x74>)
 800b410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b414:	88fa      	ldrh	r2, [r7, #6]
 800b416:	429a      	cmp	r2, r3
 800b418:	d006      	beq.n	800b428 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b41a:	89fb      	ldrh	r3, [r7, #14]
 800b41c:	3301      	adds	r3, #1
 800b41e:	81fb      	strh	r3, [r7, #14]
 800b420:	89fb      	ldrh	r3, [r7, #14]
 800b422:	2b7f      	cmp	r3, #127	@ 0x7f
 800b424:	d9f2      	bls.n	800b40c <ff_convert+0x3c>
 800b426:	e000      	b.n	800b42a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b428:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b42a:	89fb      	ldrh	r3, [r7, #14]
 800b42c:	3380      	adds	r3, #128	@ 0x80
 800b42e:	b29b      	uxth	r3, r3
 800b430:	b2db      	uxtb	r3, r3
 800b432:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b434:	89fb      	ldrh	r3, [r7, #14]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	0800f38c 	.word	0x0800f38c

0800b448 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b452:	88fb      	ldrh	r3, [r7, #6]
 800b454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b458:	d201      	bcs.n	800b45e <ff_wtoupper+0x16>
 800b45a:	4b3e      	ldr	r3, [pc, #248]	@ (800b554 <ff_wtoupper+0x10c>)
 800b45c:	e000      	b.n	800b460 <ff_wtoupper+0x18>
 800b45e:	4b3e      	ldr	r3, [pc, #248]	@ (800b558 <ff_wtoupper+0x110>)
 800b460:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	1c9a      	adds	r2, r3, #2
 800b466:	617a      	str	r2, [r7, #20]
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b46c:	8a7b      	ldrh	r3, [r7, #18]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d068      	beq.n	800b544 <ff_wtoupper+0xfc>
 800b472:	88fa      	ldrh	r2, [r7, #6]
 800b474:	8a7b      	ldrh	r3, [r7, #18]
 800b476:	429a      	cmp	r2, r3
 800b478:	d364      	bcc.n	800b544 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	1c9a      	adds	r2, r3, #2
 800b47e:	617a      	str	r2, [r7, #20]
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	823b      	strh	r3, [r7, #16]
 800b484:	8a3b      	ldrh	r3, [r7, #16]
 800b486:	0a1b      	lsrs	r3, r3, #8
 800b488:	81fb      	strh	r3, [r7, #14]
 800b48a:	8a3b      	ldrh	r3, [r7, #16]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b490:	88fa      	ldrh	r2, [r7, #6]
 800b492:	8a79      	ldrh	r1, [r7, #18]
 800b494:	8a3b      	ldrh	r3, [r7, #16]
 800b496:	440b      	add	r3, r1
 800b498:	429a      	cmp	r2, r3
 800b49a:	da49      	bge.n	800b530 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b49c:	89fb      	ldrh	r3, [r7, #14]
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	d84f      	bhi.n	800b542 <ff_wtoupper+0xfa>
 800b4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4a8 <ff_wtoupper+0x60>)
 800b4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a8:	0800b4cd 	.word	0x0800b4cd
 800b4ac:	0800b4df 	.word	0x0800b4df
 800b4b0:	0800b4f5 	.word	0x0800b4f5
 800b4b4:	0800b4fd 	.word	0x0800b4fd
 800b4b8:	0800b505 	.word	0x0800b505
 800b4bc:	0800b50d 	.word	0x0800b50d
 800b4c0:	0800b515 	.word	0x0800b515
 800b4c4:	0800b51d 	.word	0x0800b51d
 800b4c8:	0800b525 	.word	0x0800b525
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b4cc:	88fa      	ldrh	r2, [r7, #6]
 800b4ce:	8a7b      	ldrh	r3, [r7, #18]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	80fb      	strh	r3, [r7, #6]
 800b4dc:	e027      	b.n	800b52e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b4de:	88fa      	ldrh	r2, [r7, #6]
 800b4e0:	8a7b      	ldrh	r3, [r7, #18]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	88fa      	ldrh	r2, [r7, #6]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	80fb      	strh	r3, [r7, #6]
 800b4f2:	e01c      	b.n	800b52e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b4f4:	88fb      	ldrh	r3, [r7, #6]
 800b4f6:	3b10      	subs	r3, #16
 800b4f8:	80fb      	strh	r3, [r7, #6]
 800b4fa:	e018      	b.n	800b52e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b4fc:	88fb      	ldrh	r3, [r7, #6]
 800b4fe:	3b20      	subs	r3, #32
 800b500:	80fb      	strh	r3, [r7, #6]
 800b502:	e014      	b.n	800b52e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b504:	88fb      	ldrh	r3, [r7, #6]
 800b506:	3b30      	subs	r3, #48	@ 0x30
 800b508:	80fb      	strh	r3, [r7, #6]
 800b50a:	e010      	b.n	800b52e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b50c:	88fb      	ldrh	r3, [r7, #6]
 800b50e:	3b1a      	subs	r3, #26
 800b510:	80fb      	strh	r3, [r7, #6]
 800b512:	e00c      	b.n	800b52e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b514:	88fb      	ldrh	r3, [r7, #6]
 800b516:	3308      	adds	r3, #8
 800b518:	80fb      	strh	r3, [r7, #6]
 800b51a:	e008      	b.n	800b52e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b51c:	88fb      	ldrh	r3, [r7, #6]
 800b51e:	3b50      	subs	r3, #80	@ 0x50
 800b520:	80fb      	strh	r3, [r7, #6]
 800b522:	e004      	b.n	800b52e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b524:	88fb      	ldrh	r3, [r7, #6]
 800b526:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b52a:	80fb      	strh	r3, [r7, #6]
 800b52c:	bf00      	nop
			}
			break;
 800b52e:	e008      	b.n	800b542 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b530:	89fb      	ldrh	r3, [r7, #14]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d195      	bne.n	800b462 <ff_wtoupper+0x1a>
 800b536:	8a3b      	ldrh	r3, [r7, #16]
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	4413      	add	r3, r2
 800b53e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b540:	e78f      	b.n	800b462 <ff_wtoupper+0x1a>
			break;
 800b542:	bf00      	nop
	}

	return chr;
 800b544:	88fb      	ldrh	r3, [r7, #6]
}
 800b546:	4618      	mov	r0, r3
 800b548:	371c      	adds	r7, #28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	0800f48c 	.word	0x0800f48c
 800b558:	0800f680 	.word	0x0800f680

0800b55c <malloc>:
 800b55c:	4b02      	ldr	r3, [pc, #8]	@ (800b568 <malloc+0xc>)
 800b55e:	4601      	mov	r1, r0
 800b560:	6818      	ldr	r0, [r3, #0]
 800b562:	f000 b82d 	b.w	800b5c0 <_malloc_r>
 800b566:	bf00      	nop
 800b568:	20000030 	.word	0x20000030

0800b56c <free>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	@ (800b578 <free+0xc>)
 800b56e:	4601      	mov	r1, r0
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f001 be41 	b.w	800d1f8 <_free_r>
 800b576:	bf00      	nop
 800b578:	20000030 	.word	0x20000030

0800b57c <sbrk_aligned>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	4e0f      	ldr	r6, [pc, #60]	@ (800b5bc <sbrk_aligned+0x40>)
 800b580:	460c      	mov	r4, r1
 800b582:	6831      	ldr	r1, [r6, #0]
 800b584:	4605      	mov	r5, r0
 800b586:	b911      	cbnz	r1, 800b58e <sbrk_aligned+0x12>
 800b588:	f000 ff8e 	bl	800c4a8 <_sbrk_r>
 800b58c:	6030      	str	r0, [r6, #0]
 800b58e:	4621      	mov	r1, r4
 800b590:	4628      	mov	r0, r5
 800b592:	f000 ff89 	bl	800c4a8 <_sbrk_r>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	d103      	bne.n	800b5a2 <sbrk_aligned+0x26>
 800b59a:	f04f 34ff 	mov.w	r4, #4294967295
 800b59e:	4620      	mov	r0, r4
 800b5a0:	bd70      	pop	{r4, r5, r6, pc}
 800b5a2:	1cc4      	adds	r4, r0, #3
 800b5a4:	f024 0403 	bic.w	r4, r4, #3
 800b5a8:	42a0      	cmp	r0, r4
 800b5aa:	d0f8      	beq.n	800b59e <sbrk_aligned+0x22>
 800b5ac:	1a21      	subs	r1, r4, r0
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f000 ff7a 	bl	800c4a8 <_sbrk_r>
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d1f2      	bne.n	800b59e <sbrk_aligned+0x22>
 800b5b8:	e7ef      	b.n	800b59a <sbrk_aligned+0x1e>
 800b5ba:	bf00      	nop
 800b5bc:	20002518 	.word	0x20002518

0800b5c0 <_malloc_r>:
 800b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	1ccd      	adds	r5, r1, #3
 800b5c6:	f025 0503 	bic.w	r5, r5, #3
 800b5ca:	3508      	adds	r5, #8
 800b5cc:	2d0c      	cmp	r5, #12
 800b5ce:	bf38      	it	cc
 800b5d0:	250c      	movcc	r5, #12
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	db01      	blt.n	800b5dc <_malloc_r+0x1c>
 800b5d8:	42a9      	cmp	r1, r5
 800b5da:	d904      	bls.n	800b5e6 <_malloc_r+0x26>
 800b5dc:	230c      	movs	r3, #12
 800b5de:	6033      	str	r3, [r6, #0]
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6bc <_malloc_r+0xfc>
 800b5ea:	f000 f869 	bl	800b6c0 <__malloc_lock>
 800b5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f2:	461c      	mov	r4, r3
 800b5f4:	bb44      	cbnz	r4, 800b648 <_malloc_r+0x88>
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f7ff ffbf 	bl	800b57c <sbrk_aligned>
 800b5fe:	1c43      	adds	r3, r0, #1
 800b600:	4604      	mov	r4, r0
 800b602:	d158      	bne.n	800b6b6 <_malloc_r+0xf6>
 800b604:	f8d8 4000 	ldr.w	r4, [r8]
 800b608:	4627      	mov	r7, r4
 800b60a:	2f00      	cmp	r7, #0
 800b60c:	d143      	bne.n	800b696 <_malloc_r+0xd6>
 800b60e:	2c00      	cmp	r4, #0
 800b610:	d04b      	beq.n	800b6aa <_malloc_r+0xea>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	4639      	mov	r1, r7
 800b616:	4630      	mov	r0, r6
 800b618:	eb04 0903 	add.w	r9, r4, r3
 800b61c:	f000 ff44 	bl	800c4a8 <_sbrk_r>
 800b620:	4581      	cmp	r9, r0
 800b622:	d142      	bne.n	800b6aa <_malloc_r+0xea>
 800b624:	6821      	ldr	r1, [r4, #0]
 800b626:	1a6d      	subs	r5, r5, r1
 800b628:	4629      	mov	r1, r5
 800b62a:	4630      	mov	r0, r6
 800b62c:	f7ff ffa6 	bl	800b57c <sbrk_aligned>
 800b630:	3001      	adds	r0, #1
 800b632:	d03a      	beq.n	800b6aa <_malloc_r+0xea>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	442b      	add	r3, r5
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	f8d8 3000 	ldr.w	r3, [r8]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	bb62      	cbnz	r2, 800b69c <_malloc_r+0xdc>
 800b642:	f8c8 7000 	str.w	r7, [r8]
 800b646:	e00f      	b.n	800b668 <_malloc_r+0xa8>
 800b648:	6822      	ldr	r2, [r4, #0]
 800b64a:	1b52      	subs	r2, r2, r5
 800b64c:	d420      	bmi.n	800b690 <_malloc_r+0xd0>
 800b64e:	2a0b      	cmp	r2, #11
 800b650:	d917      	bls.n	800b682 <_malloc_r+0xc2>
 800b652:	1961      	adds	r1, r4, r5
 800b654:	42a3      	cmp	r3, r4
 800b656:	6025      	str	r5, [r4, #0]
 800b658:	bf18      	it	ne
 800b65a:	6059      	strne	r1, [r3, #4]
 800b65c:	6863      	ldr	r3, [r4, #4]
 800b65e:	bf08      	it	eq
 800b660:	f8c8 1000 	streq.w	r1, [r8]
 800b664:	5162      	str	r2, [r4, r5]
 800b666:	604b      	str	r3, [r1, #4]
 800b668:	4630      	mov	r0, r6
 800b66a:	f000 f82f 	bl	800b6cc <__malloc_unlock>
 800b66e:	f104 000b 	add.w	r0, r4, #11
 800b672:	1d23      	adds	r3, r4, #4
 800b674:	f020 0007 	bic.w	r0, r0, #7
 800b678:	1ac2      	subs	r2, r0, r3
 800b67a:	bf1c      	itt	ne
 800b67c:	1a1b      	subne	r3, r3, r0
 800b67e:	50a3      	strne	r3, [r4, r2]
 800b680:	e7af      	b.n	800b5e2 <_malloc_r+0x22>
 800b682:	6862      	ldr	r2, [r4, #4]
 800b684:	42a3      	cmp	r3, r4
 800b686:	bf0c      	ite	eq
 800b688:	f8c8 2000 	streq.w	r2, [r8]
 800b68c:	605a      	strne	r2, [r3, #4]
 800b68e:	e7eb      	b.n	800b668 <_malloc_r+0xa8>
 800b690:	4623      	mov	r3, r4
 800b692:	6864      	ldr	r4, [r4, #4]
 800b694:	e7ae      	b.n	800b5f4 <_malloc_r+0x34>
 800b696:	463c      	mov	r4, r7
 800b698:	687f      	ldr	r7, [r7, #4]
 800b69a:	e7b6      	b.n	800b60a <_malloc_r+0x4a>
 800b69c:	461a      	mov	r2, r3
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	d1fb      	bne.n	800b69c <_malloc_r+0xdc>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	6053      	str	r3, [r2, #4]
 800b6a8:	e7de      	b.n	800b668 <_malloc_r+0xa8>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	6033      	str	r3, [r6, #0]
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f000 f80c 	bl	800b6cc <__malloc_unlock>
 800b6b4:	e794      	b.n	800b5e0 <_malloc_r+0x20>
 800b6b6:	6005      	str	r5, [r0, #0]
 800b6b8:	e7d6      	b.n	800b668 <_malloc_r+0xa8>
 800b6ba:	bf00      	nop
 800b6bc:	2000251c 	.word	0x2000251c

0800b6c0 <__malloc_lock>:
 800b6c0:	4801      	ldr	r0, [pc, #4]	@ (800b6c8 <__malloc_lock+0x8>)
 800b6c2:	f000 bf3e 	b.w	800c542 <__retarget_lock_acquire_recursive>
 800b6c6:	bf00      	nop
 800b6c8:	20002660 	.word	0x20002660

0800b6cc <__malloc_unlock>:
 800b6cc:	4801      	ldr	r0, [pc, #4]	@ (800b6d4 <__malloc_unlock+0x8>)
 800b6ce:	f000 bf39 	b.w	800c544 <__retarget_lock_release_recursive>
 800b6d2:	bf00      	nop
 800b6d4:	20002660 	.word	0x20002660

0800b6d8 <__cvt>:
 800b6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6dc:	ec57 6b10 	vmov	r6, r7, d0
 800b6e0:	2f00      	cmp	r7, #0
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	bfbb      	ittet	lt
 800b6ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b6ee:	461f      	movlt	r7, r3
 800b6f0:	2300      	movge	r3, #0
 800b6f2:	232d      	movlt	r3, #45	@ 0x2d
 800b6f4:	700b      	strb	r3, [r1, #0]
 800b6f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b6fc:	4691      	mov	r9, r2
 800b6fe:	f023 0820 	bic.w	r8, r3, #32
 800b702:	bfbc      	itt	lt
 800b704:	4632      	movlt	r2, r6
 800b706:	4616      	movlt	r6, r2
 800b708:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b70c:	d005      	beq.n	800b71a <__cvt+0x42>
 800b70e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b712:	d100      	bne.n	800b716 <__cvt+0x3e>
 800b714:	3401      	adds	r4, #1
 800b716:	2102      	movs	r1, #2
 800b718:	e000      	b.n	800b71c <__cvt+0x44>
 800b71a:	2103      	movs	r1, #3
 800b71c:	ab03      	add	r3, sp, #12
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	ab02      	add	r3, sp, #8
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	ec47 6b10 	vmov	d0, r6, r7
 800b728:	4653      	mov	r3, sl
 800b72a:	4622      	mov	r2, r4
 800b72c:	f000 ff94 	bl	800c658 <_dtoa_r>
 800b730:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b734:	4605      	mov	r5, r0
 800b736:	d119      	bne.n	800b76c <__cvt+0x94>
 800b738:	f019 0f01 	tst.w	r9, #1
 800b73c:	d00e      	beq.n	800b75c <__cvt+0x84>
 800b73e:	eb00 0904 	add.w	r9, r0, r4
 800b742:	2200      	movs	r2, #0
 800b744:	2300      	movs	r3, #0
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	f7f5 f9f5 	bl	8000b38 <__aeabi_dcmpeq>
 800b74e:	b108      	cbz	r0, 800b754 <__cvt+0x7c>
 800b750:	f8cd 900c 	str.w	r9, [sp, #12]
 800b754:	2230      	movs	r2, #48	@ 0x30
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	454b      	cmp	r3, r9
 800b75a:	d31e      	bcc.n	800b79a <__cvt+0xc2>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b760:	1b5b      	subs	r3, r3, r5
 800b762:	4628      	mov	r0, r5
 800b764:	6013      	str	r3, [r2, #0]
 800b766:	b004      	add	sp, #16
 800b768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b770:	eb00 0904 	add.w	r9, r0, r4
 800b774:	d1e5      	bne.n	800b742 <__cvt+0x6a>
 800b776:	7803      	ldrb	r3, [r0, #0]
 800b778:	2b30      	cmp	r3, #48	@ 0x30
 800b77a:	d10a      	bne.n	800b792 <__cvt+0xba>
 800b77c:	2200      	movs	r2, #0
 800b77e:	2300      	movs	r3, #0
 800b780:	4630      	mov	r0, r6
 800b782:	4639      	mov	r1, r7
 800b784:	f7f5 f9d8 	bl	8000b38 <__aeabi_dcmpeq>
 800b788:	b918      	cbnz	r0, 800b792 <__cvt+0xba>
 800b78a:	f1c4 0401 	rsb	r4, r4, #1
 800b78e:	f8ca 4000 	str.w	r4, [sl]
 800b792:	f8da 3000 	ldr.w	r3, [sl]
 800b796:	4499      	add	r9, r3
 800b798:	e7d3      	b.n	800b742 <__cvt+0x6a>
 800b79a:	1c59      	adds	r1, r3, #1
 800b79c:	9103      	str	r1, [sp, #12]
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e7d9      	b.n	800b756 <__cvt+0x7e>

0800b7a2 <__exponent>:
 800b7a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	bfba      	itte	lt
 800b7a8:	4249      	neglt	r1, r1
 800b7aa:	232d      	movlt	r3, #45	@ 0x2d
 800b7ac:	232b      	movge	r3, #43	@ 0x2b
 800b7ae:	2909      	cmp	r1, #9
 800b7b0:	7002      	strb	r2, [r0, #0]
 800b7b2:	7043      	strb	r3, [r0, #1]
 800b7b4:	dd29      	ble.n	800b80a <__exponent+0x68>
 800b7b6:	f10d 0307 	add.w	r3, sp, #7
 800b7ba:	461d      	mov	r5, r3
 800b7bc:	270a      	movs	r7, #10
 800b7be:	461a      	mov	r2, r3
 800b7c0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b7c4:	fb07 1416 	mls	r4, r7, r6, r1
 800b7c8:	3430      	adds	r4, #48	@ 0x30
 800b7ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	2c63      	cmp	r4, #99	@ 0x63
 800b7d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	dcf1      	bgt.n	800b7be <__exponent+0x1c>
 800b7da:	3130      	adds	r1, #48	@ 0x30
 800b7dc:	1e94      	subs	r4, r2, #2
 800b7de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7e2:	1c41      	adds	r1, r0, #1
 800b7e4:	4623      	mov	r3, r4
 800b7e6:	42ab      	cmp	r3, r5
 800b7e8:	d30a      	bcc.n	800b800 <__exponent+0x5e>
 800b7ea:	f10d 0309 	add.w	r3, sp, #9
 800b7ee:	1a9b      	subs	r3, r3, r2
 800b7f0:	42ac      	cmp	r4, r5
 800b7f2:	bf88      	it	hi
 800b7f4:	2300      	movhi	r3, #0
 800b7f6:	3302      	adds	r3, #2
 800b7f8:	4403      	add	r3, r0
 800b7fa:	1a18      	subs	r0, r3, r0
 800b7fc:	b003      	add	sp, #12
 800b7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b800:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b804:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b808:	e7ed      	b.n	800b7e6 <__exponent+0x44>
 800b80a:	2330      	movs	r3, #48	@ 0x30
 800b80c:	3130      	adds	r1, #48	@ 0x30
 800b80e:	7083      	strb	r3, [r0, #2]
 800b810:	70c1      	strb	r1, [r0, #3]
 800b812:	1d03      	adds	r3, r0, #4
 800b814:	e7f1      	b.n	800b7fa <__exponent+0x58>
	...

0800b818 <_printf_float>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	b08d      	sub	sp, #52	@ 0x34
 800b81e:	460c      	mov	r4, r1
 800b820:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b824:	4616      	mov	r6, r2
 800b826:	461f      	mov	r7, r3
 800b828:	4605      	mov	r5, r0
 800b82a:	f000 fe05 	bl	800c438 <_localeconv_r>
 800b82e:	6803      	ldr	r3, [r0, #0]
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	4618      	mov	r0, r3
 800b834:	f7f4 fd54 	bl	80002e0 <strlen>
 800b838:	2300      	movs	r3, #0
 800b83a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b83c:	f8d8 3000 	ldr.w	r3, [r8]
 800b840:	9005      	str	r0, [sp, #20]
 800b842:	3307      	adds	r3, #7
 800b844:	f023 0307 	bic.w	r3, r3, #7
 800b848:	f103 0208 	add.w	r2, r3, #8
 800b84c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b850:	f8d4 b000 	ldr.w	fp, [r4]
 800b854:	f8c8 2000 	str.w	r2, [r8]
 800b858:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b85c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b860:	9307      	str	r3, [sp, #28]
 800b862:	f8cd 8018 	str.w	r8, [sp, #24]
 800b866:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b86a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b86e:	4b9c      	ldr	r3, [pc, #624]	@ (800bae0 <_printf_float+0x2c8>)
 800b870:	f04f 32ff 	mov.w	r2, #4294967295
 800b874:	f7f5 f992 	bl	8000b9c <__aeabi_dcmpun>
 800b878:	bb70      	cbnz	r0, 800b8d8 <_printf_float+0xc0>
 800b87a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b87e:	4b98      	ldr	r3, [pc, #608]	@ (800bae0 <_printf_float+0x2c8>)
 800b880:	f04f 32ff 	mov.w	r2, #4294967295
 800b884:	f7f5 f96c 	bl	8000b60 <__aeabi_dcmple>
 800b888:	bb30      	cbnz	r0, 800b8d8 <_printf_float+0xc0>
 800b88a:	2200      	movs	r2, #0
 800b88c:	2300      	movs	r3, #0
 800b88e:	4640      	mov	r0, r8
 800b890:	4649      	mov	r1, r9
 800b892:	f7f5 f95b 	bl	8000b4c <__aeabi_dcmplt>
 800b896:	b110      	cbz	r0, 800b89e <_printf_float+0x86>
 800b898:	232d      	movs	r3, #45	@ 0x2d
 800b89a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b89e:	4a91      	ldr	r2, [pc, #580]	@ (800bae4 <_printf_float+0x2cc>)
 800b8a0:	4b91      	ldr	r3, [pc, #580]	@ (800bae8 <_printf_float+0x2d0>)
 800b8a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b8a6:	bf8c      	ite	hi
 800b8a8:	4690      	movhi	r8, r2
 800b8aa:	4698      	movls	r8, r3
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	6123      	str	r3, [r4, #16]
 800b8b0:	f02b 0304 	bic.w	r3, fp, #4
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	f04f 0900 	mov.w	r9, #0
 800b8ba:	9700      	str	r7, [sp, #0]
 800b8bc:	4633      	mov	r3, r6
 800b8be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	f000 f9d2 	bl	800bc6c <_printf_common>
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	f040 808d 	bne.w	800b9e8 <_printf_float+0x1d0>
 800b8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d2:	b00d      	add	sp, #52	@ 0x34
 800b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	4642      	mov	r2, r8
 800b8da:	464b      	mov	r3, r9
 800b8dc:	4640      	mov	r0, r8
 800b8de:	4649      	mov	r1, r9
 800b8e0:	f7f5 f95c 	bl	8000b9c <__aeabi_dcmpun>
 800b8e4:	b140      	cbz	r0, 800b8f8 <_printf_float+0xe0>
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	bfbc      	itt	lt
 800b8ec:	232d      	movlt	r3, #45	@ 0x2d
 800b8ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b8f2:	4a7e      	ldr	r2, [pc, #504]	@ (800baec <_printf_float+0x2d4>)
 800b8f4:	4b7e      	ldr	r3, [pc, #504]	@ (800baf0 <_printf_float+0x2d8>)
 800b8f6:	e7d4      	b.n	800b8a2 <_printf_float+0x8a>
 800b8f8:	6863      	ldr	r3, [r4, #4]
 800b8fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b8fe:	9206      	str	r2, [sp, #24]
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	d13b      	bne.n	800b97c <_printf_float+0x164>
 800b904:	2306      	movs	r3, #6
 800b906:	6063      	str	r3, [r4, #4]
 800b908:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b90c:	2300      	movs	r3, #0
 800b90e:	6022      	str	r2, [r4, #0]
 800b910:	9303      	str	r3, [sp, #12]
 800b912:	ab0a      	add	r3, sp, #40	@ 0x28
 800b914:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b918:	ab09      	add	r3, sp, #36	@ 0x24
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	6861      	ldr	r1, [r4, #4]
 800b91e:	ec49 8b10 	vmov	d0, r8, r9
 800b922:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b926:	4628      	mov	r0, r5
 800b928:	f7ff fed6 	bl	800b6d8 <__cvt>
 800b92c:	9b06      	ldr	r3, [sp, #24]
 800b92e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b930:	2b47      	cmp	r3, #71	@ 0x47
 800b932:	4680      	mov	r8, r0
 800b934:	d129      	bne.n	800b98a <_printf_float+0x172>
 800b936:	1cc8      	adds	r0, r1, #3
 800b938:	db02      	blt.n	800b940 <_printf_float+0x128>
 800b93a:	6863      	ldr	r3, [r4, #4]
 800b93c:	4299      	cmp	r1, r3
 800b93e:	dd41      	ble.n	800b9c4 <_printf_float+0x1ac>
 800b940:	f1aa 0a02 	sub.w	sl, sl, #2
 800b944:	fa5f fa8a 	uxtb.w	sl, sl
 800b948:	3901      	subs	r1, #1
 800b94a:	4652      	mov	r2, sl
 800b94c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b950:	9109      	str	r1, [sp, #36]	@ 0x24
 800b952:	f7ff ff26 	bl	800b7a2 <__exponent>
 800b956:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b958:	1813      	adds	r3, r2, r0
 800b95a:	2a01      	cmp	r2, #1
 800b95c:	4681      	mov	r9, r0
 800b95e:	6123      	str	r3, [r4, #16]
 800b960:	dc02      	bgt.n	800b968 <_printf_float+0x150>
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	07d2      	lsls	r2, r2, #31
 800b966:	d501      	bpl.n	800b96c <_printf_float+0x154>
 800b968:	3301      	adds	r3, #1
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0a2      	beq.n	800b8ba <_printf_float+0xa2>
 800b974:	232d      	movs	r3, #45	@ 0x2d
 800b976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b97a:	e79e      	b.n	800b8ba <_printf_float+0xa2>
 800b97c:	9a06      	ldr	r2, [sp, #24]
 800b97e:	2a47      	cmp	r2, #71	@ 0x47
 800b980:	d1c2      	bne.n	800b908 <_printf_float+0xf0>
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1c0      	bne.n	800b908 <_printf_float+0xf0>
 800b986:	2301      	movs	r3, #1
 800b988:	e7bd      	b.n	800b906 <_printf_float+0xee>
 800b98a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b98e:	d9db      	bls.n	800b948 <_printf_float+0x130>
 800b990:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b994:	d118      	bne.n	800b9c8 <_printf_float+0x1b0>
 800b996:	2900      	cmp	r1, #0
 800b998:	6863      	ldr	r3, [r4, #4]
 800b99a:	dd0b      	ble.n	800b9b4 <_printf_float+0x19c>
 800b99c:	6121      	str	r1, [r4, #16]
 800b99e:	b913      	cbnz	r3, 800b9a6 <_printf_float+0x18e>
 800b9a0:	6822      	ldr	r2, [r4, #0]
 800b9a2:	07d0      	lsls	r0, r2, #31
 800b9a4:	d502      	bpl.n	800b9ac <_printf_float+0x194>
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	440b      	add	r3, r1
 800b9aa:	6123      	str	r3, [r4, #16]
 800b9ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b9ae:	f04f 0900 	mov.w	r9, #0
 800b9b2:	e7db      	b.n	800b96c <_printf_float+0x154>
 800b9b4:	b913      	cbnz	r3, 800b9bc <_printf_float+0x1a4>
 800b9b6:	6822      	ldr	r2, [r4, #0]
 800b9b8:	07d2      	lsls	r2, r2, #31
 800b9ba:	d501      	bpl.n	800b9c0 <_printf_float+0x1a8>
 800b9bc:	3302      	adds	r3, #2
 800b9be:	e7f4      	b.n	800b9aa <_printf_float+0x192>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e7f2      	b.n	800b9aa <_printf_float+0x192>
 800b9c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ca:	4299      	cmp	r1, r3
 800b9cc:	db05      	blt.n	800b9da <_printf_float+0x1c2>
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	6121      	str	r1, [r4, #16]
 800b9d2:	07d8      	lsls	r0, r3, #31
 800b9d4:	d5ea      	bpl.n	800b9ac <_printf_float+0x194>
 800b9d6:	1c4b      	adds	r3, r1, #1
 800b9d8:	e7e7      	b.n	800b9aa <_printf_float+0x192>
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	bfd4      	ite	le
 800b9de:	f1c1 0202 	rsble	r2, r1, #2
 800b9e2:	2201      	movgt	r2, #1
 800b9e4:	4413      	add	r3, r2
 800b9e6:	e7e0      	b.n	800b9aa <_printf_float+0x192>
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	055a      	lsls	r2, r3, #21
 800b9ec:	d407      	bmi.n	800b9fe <_printf_float+0x1e6>
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	47b8      	blx	r7
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	d12b      	bne.n	800ba54 <_printf_float+0x23c>
 800b9fc:	e767      	b.n	800b8ce <_printf_float+0xb6>
 800b9fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba02:	f240 80dd 	bls.w	800bbc0 <_printf_float+0x3a8>
 800ba06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f7f5 f893 	bl	8000b38 <__aeabi_dcmpeq>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d033      	beq.n	800ba7e <_printf_float+0x266>
 800ba16:	4a37      	ldr	r2, [pc, #220]	@ (800baf4 <_printf_float+0x2dc>)
 800ba18:	2301      	movs	r3, #1
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	f43f af54 	beq.w	800b8ce <_printf_float+0xb6>
 800ba26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ba2a:	4543      	cmp	r3, r8
 800ba2c:	db02      	blt.n	800ba34 <_printf_float+0x21c>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	07d8      	lsls	r0, r3, #31
 800ba32:	d50f      	bpl.n	800ba54 <_printf_float+0x23c>
 800ba34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	47b8      	blx	r7
 800ba3e:	3001      	adds	r0, #1
 800ba40:	f43f af45 	beq.w	800b8ce <_printf_float+0xb6>
 800ba44:	f04f 0900 	mov.w	r9, #0
 800ba48:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba4c:	f104 0a1a 	add.w	sl, r4, #26
 800ba50:	45c8      	cmp	r8, r9
 800ba52:	dc09      	bgt.n	800ba68 <_printf_float+0x250>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	079b      	lsls	r3, r3, #30
 800ba58:	f100 8103 	bmi.w	800bc62 <_printf_float+0x44a>
 800ba5c:	68e0      	ldr	r0, [r4, #12]
 800ba5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba60:	4298      	cmp	r0, r3
 800ba62:	bfb8      	it	lt
 800ba64:	4618      	movlt	r0, r3
 800ba66:	e734      	b.n	800b8d2 <_printf_float+0xba>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4628      	mov	r0, r5
 800ba70:	47b8      	blx	r7
 800ba72:	3001      	adds	r0, #1
 800ba74:	f43f af2b 	beq.w	800b8ce <_printf_float+0xb6>
 800ba78:	f109 0901 	add.w	r9, r9, #1
 800ba7c:	e7e8      	b.n	800ba50 <_printf_float+0x238>
 800ba7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	dc39      	bgt.n	800baf8 <_printf_float+0x2e0>
 800ba84:	4a1b      	ldr	r2, [pc, #108]	@ (800baf4 <_printf_float+0x2dc>)
 800ba86:	2301      	movs	r3, #1
 800ba88:	4631      	mov	r1, r6
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	47b8      	blx	r7
 800ba8e:	3001      	adds	r0, #1
 800ba90:	f43f af1d 	beq.w	800b8ce <_printf_float+0xb6>
 800ba94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ba98:	ea59 0303 	orrs.w	r3, r9, r3
 800ba9c:	d102      	bne.n	800baa4 <_printf_float+0x28c>
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	07d9      	lsls	r1, r3, #31
 800baa2:	d5d7      	bpl.n	800ba54 <_printf_float+0x23c>
 800baa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa8:	4631      	mov	r1, r6
 800baaa:	4628      	mov	r0, r5
 800baac:	47b8      	blx	r7
 800baae:	3001      	adds	r0, #1
 800bab0:	f43f af0d 	beq.w	800b8ce <_printf_float+0xb6>
 800bab4:	f04f 0a00 	mov.w	sl, #0
 800bab8:	f104 0b1a 	add.w	fp, r4, #26
 800babc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800babe:	425b      	negs	r3, r3
 800bac0:	4553      	cmp	r3, sl
 800bac2:	dc01      	bgt.n	800bac8 <_printf_float+0x2b0>
 800bac4:	464b      	mov	r3, r9
 800bac6:	e793      	b.n	800b9f0 <_printf_float+0x1d8>
 800bac8:	2301      	movs	r3, #1
 800baca:	465a      	mov	r2, fp
 800bacc:	4631      	mov	r1, r6
 800bace:	4628      	mov	r0, r5
 800bad0:	47b8      	blx	r7
 800bad2:	3001      	adds	r0, #1
 800bad4:	f43f aefb 	beq.w	800b8ce <_printf_float+0xb6>
 800bad8:	f10a 0a01 	add.w	sl, sl, #1
 800badc:	e7ee      	b.n	800babc <_printf_float+0x2a4>
 800bade:	bf00      	nop
 800bae0:	7fefffff 	.word	0x7fefffff
 800bae4:	0800f740 	.word	0x0800f740
 800bae8:	0800f73c 	.word	0x0800f73c
 800baec:	0800f748 	.word	0x0800f748
 800baf0:	0800f744 	.word	0x0800f744
 800baf4:	0800f74c 	.word	0x0800f74c
 800baf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bafa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bafe:	4553      	cmp	r3, sl
 800bb00:	bfa8      	it	ge
 800bb02:	4653      	movge	r3, sl
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	4699      	mov	r9, r3
 800bb08:	dc36      	bgt.n	800bb78 <_printf_float+0x360>
 800bb0a:	f04f 0b00 	mov.w	fp, #0
 800bb0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb12:	f104 021a 	add.w	r2, r4, #26
 800bb16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb18:	9306      	str	r3, [sp, #24]
 800bb1a:	eba3 0309 	sub.w	r3, r3, r9
 800bb1e:	455b      	cmp	r3, fp
 800bb20:	dc31      	bgt.n	800bb86 <_printf_float+0x36e>
 800bb22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb24:	459a      	cmp	sl, r3
 800bb26:	dc3a      	bgt.n	800bb9e <_printf_float+0x386>
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	07da      	lsls	r2, r3, #31
 800bb2c:	d437      	bmi.n	800bb9e <_printf_float+0x386>
 800bb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb30:	ebaa 0903 	sub.w	r9, sl, r3
 800bb34:	9b06      	ldr	r3, [sp, #24]
 800bb36:	ebaa 0303 	sub.w	r3, sl, r3
 800bb3a:	4599      	cmp	r9, r3
 800bb3c:	bfa8      	it	ge
 800bb3e:	4699      	movge	r9, r3
 800bb40:	f1b9 0f00 	cmp.w	r9, #0
 800bb44:	dc33      	bgt.n	800bbae <_printf_float+0x396>
 800bb46:	f04f 0800 	mov.w	r8, #0
 800bb4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb4e:	f104 0b1a 	add.w	fp, r4, #26
 800bb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb54:	ebaa 0303 	sub.w	r3, sl, r3
 800bb58:	eba3 0309 	sub.w	r3, r3, r9
 800bb5c:	4543      	cmp	r3, r8
 800bb5e:	f77f af79 	ble.w	800ba54 <_printf_float+0x23c>
 800bb62:	2301      	movs	r3, #1
 800bb64:	465a      	mov	r2, fp
 800bb66:	4631      	mov	r1, r6
 800bb68:	4628      	mov	r0, r5
 800bb6a:	47b8      	blx	r7
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	f43f aeae 	beq.w	800b8ce <_printf_float+0xb6>
 800bb72:	f108 0801 	add.w	r8, r8, #1
 800bb76:	e7ec      	b.n	800bb52 <_printf_float+0x33a>
 800bb78:	4642      	mov	r2, r8
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	47b8      	blx	r7
 800bb80:	3001      	adds	r0, #1
 800bb82:	d1c2      	bne.n	800bb0a <_printf_float+0x2f2>
 800bb84:	e6a3      	b.n	800b8ce <_printf_float+0xb6>
 800bb86:	2301      	movs	r3, #1
 800bb88:	4631      	mov	r1, r6
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	9206      	str	r2, [sp, #24]
 800bb8e:	47b8      	blx	r7
 800bb90:	3001      	adds	r0, #1
 800bb92:	f43f ae9c 	beq.w	800b8ce <_printf_float+0xb6>
 800bb96:	9a06      	ldr	r2, [sp, #24]
 800bb98:	f10b 0b01 	add.w	fp, fp, #1
 800bb9c:	e7bb      	b.n	800bb16 <_printf_float+0x2fe>
 800bb9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bba2:	4631      	mov	r1, r6
 800bba4:	4628      	mov	r0, r5
 800bba6:	47b8      	blx	r7
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d1c0      	bne.n	800bb2e <_printf_float+0x316>
 800bbac:	e68f      	b.n	800b8ce <_printf_float+0xb6>
 800bbae:	9a06      	ldr	r2, [sp, #24]
 800bbb0:	464b      	mov	r3, r9
 800bbb2:	4442      	add	r2, r8
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	47b8      	blx	r7
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d1c3      	bne.n	800bb46 <_printf_float+0x32e>
 800bbbe:	e686      	b.n	800b8ce <_printf_float+0xb6>
 800bbc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbc4:	f1ba 0f01 	cmp.w	sl, #1
 800bbc8:	dc01      	bgt.n	800bbce <_printf_float+0x3b6>
 800bbca:	07db      	lsls	r3, r3, #31
 800bbcc:	d536      	bpl.n	800bc3c <_printf_float+0x424>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	4642      	mov	r2, r8
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b8      	blx	r7
 800bbd8:	3001      	adds	r0, #1
 800bbda:	f43f ae78 	beq.w	800b8ce <_printf_float+0xb6>
 800bbde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	47b8      	blx	r7
 800bbe8:	3001      	adds	r0, #1
 800bbea:	f43f ae70 	beq.w	800b8ce <_printf_float+0xb6>
 800bbee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbfa:	f7f4 ff9d 	bl	8000b38 <__aeabi_dcmpeq>
 800bbfe:	b9c0      	cbnz	r0, 800bc32 <_printf_float+0x41a>
 800bc00:	4653      	mov	r3, sl
 800bc02:	f108 0201 	add.w	r2, r8, #1
 800bc06:	4631      	mov	r1, r6
 800bc08:	4628      	mov	r0, r5
 800bc0a:	47b8      	blx	r7
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d10c      	bne.n	800bc2a <_printf_float+0x412>
 800bc10:	e65d      	b.n	800b8ce <_printf_float+0xb6>
 800bc12:	2301      	movs	r3, #1
 800bc14:	465a      	mov	r2, fp
 800bc16:	4631      	mov	r1, r6
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	f43f ae56 	beq.w	800b8ce <_printf_float+0xb6>
 800bc22:	f108 0801 	add.w	r8, r8, #1
 800bc26:	45d0      	cmp	r8, sl
 800bc28:	dbf3      	blt.n	800bc12 <_printf_float+0x3fa>
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bc30:	e6df      	b.n	800b9f2 <_printf_float+0x1da>
 800bc32:	f04f 0800 	mov.w	r8, #0
 800bc36:	f104 0b1a 	add.w	fp, r4, #26
 800bc3a:	e7f4      	b.n	800bc26 <_printf_float+0x40e>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	4642      	mov	r2, r8
 800bc40:	e7e1      	b.n	800bc06 <_printf_float+0x3ee>
 800bc42:	2301      	movs	r3, #1
 800bc44:	464a      	mov	r2, r9
 800bc46:	4631      	mov	r1, r6
 800bc48:	4628      	mov	r0, r5
 800bc4a:	47b8      	blx	r7
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	f43f ae3e 	beq.w	800b8ce <_printf_float+0xb6>
 800bc52:	f108 0801 	add.w	r8, r8, #1
 800bc56:	68e3      	ldr	r3, [r4, #12]
 800bc58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc5a:	1a5b      	subs	r3, r3, r1
 800bc5c:	4543      	cmp	r3, r8
 800bc5e:	dcf0      	bgt.n	800bc42 <_printf_float+0x42a>
 800bc60:	e6fc      	b.n	800ba5c <_printf_float+0x244>
 800bc62:	f04f 0800 	mov.w	r8, #0
 800bc66:	f104 0919 	add.w	r9, r4, #25
 800bc6a:	e7f4      	b.n	800bc56 <_printf_float+0x43e>

0800bc6c <_printf_common>:
 800bc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc70:	4616      	mov	r6, r2
 800bc72:	4698      	mov	r8, r3
 800bc74:	688a      	ldr	r2, [r1, #8]
 800bc76:	690b      	ldr	r3, [r1, #16]
 800bc78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	bfb8      	it	lt
 800bc80:	4613      	movlt	r3, r2
 800bc82:	6033      	str	r3, [r6, #0]
 800bc84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc88:	4607      	mov	r7, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	b10a      	cbz	r2, 800bc92 <_printf_common+0x26>
 800bc8e:	3301      	adds	r3, #1
 800bc90:	6033      	str	r3, [r6, #0]
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	0699      	lsls	r1, r3, #26
 800bc96:	bf42      	ittt	mi
 800bc98:	6833      	ldrmi	r3, [r6, #0]
 800bc9a:	3302      	addmi	r3, #2
 800bc9c:	6033      	strmi	r3, [r6, #0]
 800bc9e:	6825      	ldr	r5, [r4, #0]
 800bca0:	f015 0506 	ands.w	r5, r5, #6
 800bca4:	d106      	bne.n	800bcb4 <_printf_common+0x48>
 800bca6:	f104 0a19 	add.w	sl, r4, #25
 800bcaa:	68e3      	ldr	r3, [r4, #12]
 800bcac:	6832      	ldr	r2, [r6, #0]
 800bcae:	1a9b      	subs	r3, r3, r2
 800bcb0:	42ab      	cmp	r3, r5
 800bcb2:	dc26      	bgt.n	800bd02 <_printf_common+0x96>
 800bcb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcb8:	6822      	ldr	r2, [r4, #0]
 800bcba:	3b00      	subs	r3, #0
 800bcbc:	bf18      	it	ne
 800bcbe:	2301      	movne	r3, #1
 800bcc0:	0692      	lsls	r2, r2, #26
 800bcc2:	d42b      	bmi.n	800bd1c <_printf_common+0xb0>
 800bcc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bcc8:	4641      	mov	r1, r8
 800bcca:	4638      	mov	r0, r7
 800bccc:	47c8      	blx	r9
 800bcce:	3001      	adds	r0, #1
 800bcd0:	d01e      	beq.n	800bd10 <_printf_common+0xa4>
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	6922      	ldr	r2, [r4, #16]
 800bcd6:	f003 0306 	and.w	r3, r3, #6
 800bcda:	2b04      	cmp	r3, #4
 800bcdc:	bf02      	ittt	eq
 800bcde:	68e5      	ldreq	r5, [r4, #12]
 800bce0:	6833      	ldreq	r3, [r6, #0]
 800bce2:	1aed      	subeq	r5, r5, r3
 800bce4:	68a3      	ldr	r3, [r4, #8]
 800bce6:	bf0c      	ite	eq
 800bce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcec:	2500      	movne	r5, #0
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	bfc4      	itt	gt
 800bcf2:	1a9b      	subgt	r3, r3, r2
 800bcf4:	18ed      	addgt	r5, r5, r3
 800bcf6:	2600      	movs	r6, #0
 800bcf8:	341a      	adds	r4, #26
 800bcfa:	42b5      	cmp	r5, r6
 800bcfc:	d11a      	bne.n	800bd34 <_printf_common+0xc8>
 800bcfe:	2000      	movs	r0, #0
 800bd00:	e008      	b.n	800bd14 <_printf_common+0xa8>
 800bd02:	2301      	movs	r3, #1
 800bd04:	4652      	mov	r2, sl
 800bd06:	4641      	mov	r1, r8
 800bd08:	4638      	mov	r0, r7
 800bd0a:	47c8      	blx	r9
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d103      	bne.n	800bd18 <_printf_common+0xac>
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd18:	3501      	adds	r5, #1
 800bd1a:	e7c6      	b.n	800bcaa <_printf_common+0x3e>
 800bd1c:	18e1      	adds	r1, r4, r3
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	2030      	movs	r0, #48	@ 0x30
 800bd22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd26:	4422      	add	r2, r4
 800bd28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd30:	3302      	adds	r3, #2
 800bd32:	e7c7      	b.n	800bcc4 <_printf_common+0x58>
 800bd34:	2301      	movs	r3, #1
 800bd36:	4622      	mov	r2, r4
 800bd38:	4641      	mov	r1, r8
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	47c8      	blx	r9
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d0e6      	beq.n	800bd10 <_printf_common+0xa4>
 800bd42:	3601      	adds	r6, #1
 800bd44:	e7d9      	b.n	800bcfa <_printf_common+0x8e>
	...

0800bd48 <_printf_i>:
 800bd48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd4c:	7e0f      	ldrb	r7, [r1, #24]
 800bd4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd50:	2f78      	cmp	r7, #120	@ 0x78
 800bd52:	4691      	mov	r9, r2
 800bd54:	4680      	mov	r8, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	469a      	mov	sl, r3
 800bd5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd5e:	d807      	bhi.n	800bd70 <_printf_i+0x28>
 800bd60:	2f62      	cmp	r7, #98	@ 0x62
 800bd62:	d80a      	bhi.n	800bd7a <_printf_i+0x32>
 800bd64:	2f00      	cmp	r7, #0
 800bd66:	f000 80d1 	beq.w	800bf0c <_printf_i+0x1c4>
 800bd6a:	2f58      	cmp	r7, #88	@ 0x58
 800bd6c:	f000 80b8 	beq.w	800bee0 <_printf_i+0x198>
 800bd70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd78:	e03a      	b.n	800bdf0 <_printf_i+0xa8>
 800bd7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd7e:	2b15      	cmp	r3, #21
 800bd80:	d8f6      	bhi.n	800bd70 <_printf_i+0x28>
 800bd82:	a101      	add	r1, pc, #4	@ (adr r1, 800bd88 <_printf_i+0x40>)
 800bd84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd88:	0800bde1 	.word	0x0800bde1
 800bd8c:	0800bdf5 	.word	0x0800bdf5
 800bd90:	0800bd71 	.word	0x0800bd71
 800bd94:	0800bd71 	.word	0x0800bd71
 800bd98:	0800bd71 	.word	0x0800bd71
 800bd9c:	0800bd71 	.word	0x0800bd71
 800bda0:	0800bdf5 	.word	0x0800bdf5
 800bda4:	0800bd71 	.word	0x0800bd71
 800bda8:	0800bd71 	.word	0x0800bd71
 800bdac:	0800bd71 	.word	0x0800bd71
 800bdb0:	0800bd71 	.word	0x0800bd71
 800bdb4:	0800bef3 	.word	0x0800bef3
 800bdb8:	0800be1f 	.word	0x0800be1f
 800bdbc:	0800bead 	.word	0x0800bead
 800bdc0:	0800bd71 	.word	0x0800bd71
 800bdc4:	0800bd71 	.word	0x0800bd71
 800bdc8:	0800bf15 	.word	0x0800bf15
 800bdcc:	0800bd71 	.word	0x0800bd71
 800bdd0:	0800be1f 	.word	0x0800be1f
 800bdd4:	0800bd71 	.word	0x0800bd71
 800bdd8:	0800bd71 	.word	0x0800bd71
 800bddc:	0800beb5 	.word	0x0800beb5
 800bde0:	6833      	ldr	r3, [r6, #0]
 800bde2:	1d1a      	adds	r2, r3, #4
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	6032      	str	r2, [r6, #0]
 800bde8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e09c      	b.n	800bf2e <_printf_i+0x1e6>
 800bdf4:	6833      	ldr	r3, [r6, #0]
 800bdf6:	6820      	ldr	r0, [r4, #0]
 800bdf8:	1d19      	adds	r1, r3, #4
 800bdfa:	6031      	str	r1, [r6, #0]
 800bdfc:	0606      	lsls	r6, r0, #24
 800bdfe:	d501      	bpl.n	800be04 <_printf_i+0xbc>
 800be00:	681d      	ldr	r5, [r3, #0]
 800be02:	e003      	b.n	800be0c <_printf_i+0xc4>
 800be04:	0645      	lsls	r5, r0, #25
 800be06:	d5fb      	bpl.n	800be00 <_printf_i+0xb8>
 800be08:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be0c:	2d00      	cmp	r5, #0
 800be0e:	da03      	bge.n	800be18 <_printf_i+0xd0>
 800be10:	232d      	movs	r3, #45	@ 0x2d
 800be12:	426d      	negs	r5, r5
 800be14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be18:	4858      	ldr	r0, [pc, #352]	@ (800bf7c <_printf_i+0x234>)
 800be1a:	230a      	movs	r3, #10
 800be1c:	e011      	b.n	800be42 <_printf_i+0xfa>
 800be1e:	6821      	ldr	r1, [r4, #0]
 800be20:	6833      	ldr	r3, [r6, #0]
 800be22:	0608      	lsls	r0, r1, #24
 800be24:	f853 5b04 	ldr.w	r5, [r3], #4
 800be28:	d402      	bmi.n	800be30 <_printf_i+0xe8>
 800be2a:	0649      	lsls	r1, r1, #25
 800be2c:	bf48      	it	mi
 800be2e:	b2ad      	uxthmi	r5, r5
 800be30:	2f6f      	cmp	r7, #111	@ 0x6f
 800be32:	4852      	ldr	r0, [pc, #328]	@ (800bf7c <_printf_i+0x234>)
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	bf14      	ite	ne
 800be38:	230a      	movne	r3, #10
 800be3a:	2308      	moveq	r3, #8
 800be3c:	2100      	movs	r1, #0
 800be3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be42:	6866      	ldr	r6, [r4, #4]
 800be44:	60a6      	str	r6, [r4, #8]
 800be46:	2e00      	cmp	r6, #0
 800be48:	db05      	blt.n	800be56 <_printf_i+0x10e>
 800be4a:	6821      	ldr	r1, [r4, #0]
 800be4c:	432e      	orrs	r6, r5
 800be4e:	f021 0104 	bic.w	r1, r1, #4
 800be52:	6021      	str	r1, [r4, #0]
 800be54:	d04b      	beq.n	800beee <_printf_i+0x1a6>
 800be56:	4616      	mov	r6, r2
 800be58:	fbb5 f1f3 	udiv	r1, r5, r3
 800be5c:	fb03 5711 	mls	r7, r3, r1, r5
 800be60:	5dc7      	ldrb	r7, [r0, r7]
 800be62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be66:	462f      	mov	r7, r5
 800be68:	42bb      	cmp	r3, r7
 800be6a:	460d      	mov	r5, r1
 800be6c:	d9f4      	bls.n	800be58 <_printf_i+0x110>
 800be6e:	2b08      	cmp	r3, #8
 800be70:	d10b      	bne.n	800be8a <_printf_i+0x142>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	07df      	lsls	r7, r3, #31
 800be76:	d508      	bpl.n	800be8a <_printf_i+0x142>
 800be78:	6923      	ldr	r3, [r4, #16]
 800be7a:	6861      	ldr	r1, [r4, #4]
 800be7c:	4299      	cmp	r1, r3
 800be7e:	bfde      	ittt	le
 800be80:	2330      	movle	r3, #48	@ 0x30
 800be82:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be86:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be8a:	1b92      	subs	r2, r2, r6
 800be8c:	6122      	str	r2, [r4, #16]
 800be8e:	f8cd a000 	str.w	sl, [sp]
 800be92:	464b      	mov	r3, r9
 800be94:	aa03      	add	r2, sp, #12
 800be96:	4621      	mov	r1, r4
 800be98:	4640      	mov	r0, r8
 800be9a:	f7ff fee7 	bl	800bc6c <_printf_common>
 800be9e:	3001      	adds	r0, #1
 800bea0:	d14a      	bne.n	800bf38 <_printf_i+0x1f0>
 800bea2:	f04f 30ff 	mov.w	r0, #4294967295
 800bea6:	b004      	add	sp, #16
 800bea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	f043 0320 	orr.w	r3, r3, #32
 800beb2:	6023      	str	r3, [r4, #0]
 800beb4:	4832      	ldr	r0, [pc, #200]	@ (800bf80 <_printf_i+0x238>)
 800beb6:	2778      	movs	r7, #120	@ 0x78
 800beb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	6831      	ldr	r1, [r6, #0]
 800bec0:	061f      	lsls	r7, r3, #24
 800bec2:	f851 5b04 	ldr.w	r5, [r1], #4
 800bec6:	d402      	bmi.n	800bece <_printf_i+0x186>
 800bec8:	065f      	lsls	r7, r3, #25
 800beca:	bf48      	it	mi
 800becc:	b2ad      	uxthmi	r5, r5
 800bece:	6031      	str	r1, [r6, #0]
 800bed0:	07d9      	lsls	r1, r3, #31
 800bed2:	bf44      	itt	mi
 800bed4:	f043 0320 	orrmi.w	r3, r3, #32
 800bed8:	6023      	strmi	r3, [r4, #0]
 800beda:	b11d      	cbz	r5, 800bee4 <_printf_i+0x19c>
 800bedc:	2310      	movs	r3, #16
 800bede:	e7ad      	b.n	800be3c <_printf_i+0xf4>
 800bee0:	4826      	ldr	r0, [pc, #152]	@ (800bf7c <_printf_i+0x234>)
 800bee2:	e7e9      	b.n	800beb8 <_printf_i+0x170>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	f023 0320 	bic.w	r3, r3, #32
 800beea:	6023      	str	r3, [r4, #0]
 800beec:	e7f6      	b.n	800bedc <_printf_i+0x194>
 800beee:	4616      	mov	r6, r2
 800bef0:	e7bd      	b.n	800be6e <_printf_i+0x126>
 800bef2:	6833      	ldr	r3, [r6, #0]
 800bef4:	6825      	ldr	r5, [r4, #0]
 800bef6:	6961      	ldr	r1, [r4, #20]
 800bef8:	1d18      	adds	r0, r3, #4
 800befa:	6030      	str	r0, [r6, #0]
 800befc:	062e      	lsls	r6, r5, #24
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	d501      	bpl.n	800bf06 <_printf_i+0x1be>
 800bf02:	6019      	str	r1, [r3, #0]
 800bf04:	e002      	b.n	800bf0c <_printf_i+0x1c4>
 800bf06:	0668      	lsls	r0, r5, #25
 800bf08:	d5fb      	bpl.n	800bf02 <_printf_i+0x1ba>
 800bf0a:	8019      	strh	r1, [r3, #0]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	6123      	str	r3, [r4, #16]
 800bf10:	4616      	mov	r6, r2
 800bf12:	e7bc      	b.n	800be8e <_printf_i+0x146>
 800bf14:	6833      	ldr	r3, [r6, #0]
 800bf16:	1d1a      	adds	r2, r3, #4
 800bf18:	6032      	str	r2, [r6, #0]
 800bf1a:	681e      	ldr	r6, [r3, #0]
 800bf1c:	6862      	ldr	r2, [r4, #4]
 800bf1e:	2100      	movs	r1, #0
 800bf20:	4630      	mov	r0, r6
 800bf22:	f7f4 f98d 	bl	8000240 <memchr>
 800bf26:	b108      	cbz	r0, 800bf2c <_printf_i+0x1e4>
 800bf28:	1b80      	subs	r0, r0, r6
 800bf2a:	6060      	str	r0, [r4, #4]
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	6123      	str	r3, [r4, #16]
 800bf30:	2300      	movs	r3, #0
 800bf32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf36:	e7aa      	b.n	800be8e <_printf_i+0x146>
 800bf38:	6923      	ldr	r3, [r4, #16]
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	4640      	mov	r0, r8
 800bf40:	47d0      	blx	sl
 800bf42:	3001      	adds	r0, #1
 800bf44:	d0ad      	beq.n	800bea2 <_printf_i+0x15a>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	079b      	lsls	r3, r3, #30
 800bf4a:	d413      	bmi.n	800bf74 <_printf_i+0x22c>
 800bf4c:	68e0      	ldr	r0, [r4, #12]
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	4298      	cmp	r0, r3
 800bf52:	bfb8      	it	lt
 800bf54:	4618      	movlt	r0, r3
 800bf56:	e7a6      	b.n	800bea6 <_printf_i+0x15e>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	4632      	mov	r2, r6
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	4640      	mov	r0, r8
 800bf60:	47d0      	blx	sl
 800bf62:	3001      	adds	r0, #1
 800bf64:	d09d      	beq.n	800bea2 <_printf_i+0x15a>
 800bf66:	3501      	adds	r5, #1
 800bf68:	68e3      	ldr	r3, [r4, #12]
 800bf6a:	9903      	ldr	r1, [sp, #12]
 800bf6c:	1a5b      	subs	r3, r3, r1
 800bf6e:	42ab      	cmp	r3, r5
 800bf70:	dcf2      	bgt.n	800bf58 <_printf_i+0x210>
 800bf72:	e7eb      	b.n	800bf4c <_printf_i+0x204>
 800bf74:	2500      	movs	r5, #0
 800bf76:	f104 0619 	add.w	r6, r4, #25
 800bf7a:	e7f5      	b.n	800bf68 <_printf_i+0x220>
 800bf7c:	0800f74e 	.word	0x0800f74e
 800bf80:	0800f75f 	.word	0x0800f75f

0800bf84 <std>:
 800bf84:	2300      	movs	r3, #0
 800bf86:	b510      	push	{r4, lr}
 800bf88:	4604      	mov	r4, r0
 800bf8a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf92:	6083      	str	r3, [r0, #8]
 800bf94:	8181      	strh	r1, [r0, #12]
 800bf96:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf98:	81c2      	strh	r2, [r0, #14]
 800bf9a:	6183      	str	r3, [r0, #24]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	2208      	movs	r2, #8
 800bfa0:	305c      	adds	r0, #92	@ 0x5c
 800bfa2:	f000 fa2f 	bl	800c404 <memset>
 800bfa6:	4b0d      	ldr	r3, [pc, #52]	@ (800bfdc <std+0x58>)
 800bfa8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe0 <std+0x5c>)
 800bfac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bfae:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe4 <std+0x60>)
 800bfb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe8 <std+0x64>)
 800bfb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bfec <std+0x68>)
 800bfb8:	6224      	str	r4, [r4, #32]
 800bfba:	429c      	cmp	r4, r3
 800bfbc:	d006      	beq.n	800bfcc <std+0x48>
 800bfbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bfc2:	4294      	cmp	r4, r2
 800bfc4:	d002      	beq.n	800bfcc <std+0x48>
 800bfc6:	33d0      	adds	r3, #208	@ 0xd0
 800bfc8:	429c      	cmp	r4, r3
 800bfca:	d105      	bne.n	800bfd8 <std+0x54>
 800bfcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd4:	f000 bab4 	b.w	800c540 <__retarget_lock_init_recursive>
 800bfd8:	bd10      	pop	{r4, pc}
 800bfda:	bf00      	nop
 800bfdc:	0800c255 	.word	0x0800c255
 800bfe0:	0800c277 	.word	0x0800c277
 800bfe4:	0800c2af 	.word	0x0800c2af
 800bfe8:	0800c2d3 	.word	0x0800c2d3
 800bfec:	20002520 	.word	0x20002520

0800bff0 <stdio_exit_handler>:
 800bff0:	4a02      	ldr	r2, [pc, #8]	@ (800bffc <stdio_exit_handler+0xc>)
 800bff2:	4903      	ldr	r1, [pc, #12]	@ (800c000 <stdio_exit_handler+0x10>)
 800bff4:	4803      	ldr	r0, [pc, #12]	@ (800c004 <stdio_exit_handler+0x14>)
 800bff6:	f000 b869 	b.w	800c0cc <_fwalk_sglue>
 800bffa:	bf00      	nop
 800bffc:	20000024 	.word	0x20000024
 800c000:	0800dfbd 	.word	0x0800dfbd
 800c004:	20000034 	.word	0x20000034

0800c008 <cleanup_stdio>:
 800c008:	6841      	ldr	r1, [r0, #4]
 800c00a:	4b0c      	ldr	r3, [pc, #48]	@ (800c03c <cleanup_stdio+0x34>)
 800c00c:	4299      	cmp	r1, r3
 800c00e:	b510      	push	{r4, lr}
 800c010:	4604      	mov	r4, r0
 800c012:	d001      	beq.n	800c018 <cleanup_stdio+0x10>
 800c014:	f001 ffd2 	bl	800dfbc <_fflush_r>
 800c018:	68a1      	ldr	r1, [r4, #8]
 800c01a:	4b09      	ldr	r3, [pc, #36]	@ (800c040 <cleanup_stdio+0x38>)
 800c01c:	4299      	cmp	r1, r3
 800c01e:	d002      	beq.n	800c026 <cleanup_stdio+0x1e>
 800c020:	4620      	mov	r0, r4
 800c022:	f001 ffcb 	bl	800dfbc <_fflush_r>
 800c026:	68e1      	ldr	r1, [r4, #12]
 800c028:	4b06      	ldr	r3, [pc, #24]	@ (800c044 <cleanup_stdio+0x3c>)
 800c02a:	4299      	cmp	r1, r3
 800c02c:	d004      	beq.n	800c038 <cleanup_stdio+0x30>
 800c02e:	4620      	mov	r0, r4
 800c030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c034:	f001 bfc2 	b.w	800dfbc <_fflush_r>
 800c038:	bd10      	pop	{r4, pc}
 800c03a:	bf00      	nop
 800c03c:	20002520 	.word	0x20002520
 800c040:	20002588 	.word	0x20002588
 800c044:	200025f0 	.word	0x200025f0

0800c048 <global_stdio_init.part.0>:
 800c048:	b510      	push	{r4, lr}
 800c04a:	4b0b      	ldr	r3, [pc, #44]	@ (800c078 <global_stdio_init.part.0+0x30>)
 800c04c:	4c0b      	ldr	r4, [pc, #44]	@ (800c07c <global_stdio_init.part.0+0x34>)
 800c04e:	4a0c      	ldr	r2, [pc, #48]	@ (800c080 <global_stdio_init.part.0+0x38>)
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	4620      	mov	r0, r4
 800c054:	2200      	movs	r2, #0
 800c056:	2104      	movs	r1, #4
 800c058:	f7ff ff94 	bl	800bf84 <std>
 800c05c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c060:	2201      	movs	r2, #1
 800c062:	2109      	movs	r1, #9
 800c064:	f7ff ff8e 	bl	800bf84 <std>
 800c068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c06c:	2202      	movs	r2, #2
 800c06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c072:	2112      	movs	r1, #18
 800c074:	f7ff bf86 	b.w	800bf84 <std>
 800c078:	20002658 	.word	0x20002658
 800c07c:	20002520 	.word	0x20002520
 800c080:	0800bff1 	.word	0x0800bff1

0800c084 <__sfp_lock_acquire>:
 800c084:	4801      	ldr	r0, [pc, #4]	@ (800c08c <__sfp_lock_acquire+0x8>)
 800c086:	f000 ba5c 	b.w	800c542 <__retarget_lock_acquire_recursive>
 800c08a:	bf00      	nop
 800c08c:	20002661 	.word	0x20002661

0800c090 <__sfp_lock_release>:
 800c090:	4801      	ldr	r0, [pc, #4]	@ (800c098 <__sfp_lock_release+0x8>)
 800c092:	f000 ba57 	b.w	800c544 <__retarget_lock_release_recursive>
 800c096:	bf00      	nop
 800c098:	20002661 	.word	0x20002661

0800c09c <__sinit>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	4604      	mov	r4, r0
 800c0a0:	f7ff fff0 	bl	800c084 <__sfp_lock_acquire>
 800c0a4:	6a23      	ldr	r3, [r4, #32]
 800c0a6:	b11b      	cbz	r3, 800c0b0 <__sinit+0x14>
 800c0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ac:	f7ff bff0 	b.w	800c090 <__sfp_lock_release>
 800c0b0:	4b04      	ldr	r3, [pc, #16]	@ (800c0c4 <__sinit+0x28>)
 800c0b2:	6223      	str	r3, [r4, #32]
 800c0b4:	4b04      	ldr	r3, [pc, #16]	@ (800c0c8 <__sinit+0x2c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f5      	bne.n	800c0a8 <__sinit+0xc>
 800c0bc:	f7ff ffc4 	bl	800c048 <global_stdio_init.part.0>
 800c0c0:	e7f2      	b.n	800c0a8 <__sinit+0xc>
 800c0c2:	bf00      	nop
 800c0c4:	0800c009 	.word	0x0800c009
 800c0c8:	20002658 	.word	0x20002658

0800c0cc <_fwalk_sglue>:
 800c0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d0:	4607      	mov	r7, r0
 800c0d2:	4688      	mov	r8, r1
 800c0d4:	4614      	mov	r4, r2
 800c0d6:	2600      	movs	r6, #0
 800c0d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0dc:	f1b9 0901 	subs.w	r9, r9, #1
 800c0e0:	d505      	bpl.n	800c0ee <_fwalk_sglue+0x22>
 800c0e2:	6824      	ldr	r4, [r4, #0]
 800c0e4:	2c00      	cmp	r4, #0
 800c0e6:	d1f7      	bne.n	800c0d8 <_fwalk_sglue+0xc>
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ee:	89ab      	ldrh	r3, [r5, #12]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d907      	bls.n	800c104 <_fwalk_sglue+0x38>
 800c0f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	d003      	beq.n	800c104 <_fwalk_sglue+0x38>
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4638      	mov	r0, r7
 800c100:	47c0      	blx	r8
 800c102:	4306      	orrs	r6, r0
 800c104:	3568      	adds	r5, #104	@ 0x68
 800c106:	e7e9      	b.n	800c0dc <_fwalk_sglue+0x10>

0800c108 <iprintf>:
 800c108:	b40f      	push	{r0, r1, r2, r3}
 800c10a:	b507      	push	{r0, r1, r2, lr}
 800c10c:	4906      	ldr	r1, [pc, #24]	@ (800c128 <iprintf+0x20>)
 800c10e:	ab04      	add	r3, sp, #16
 800c110:	6808      	ldr	r0, [r1, #0]
 800c112:	f853 2b04 	ldr.w	r2, [r3], #4
 800c116:	6881      	ldr	r1, [r0, #8]
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	f001 fdb3 	bl	800dc84 <_vfiprintf_r>
 800c11e:	b003      	add	sp, #12
 800c120:	f85d eb04 	ldr.w	lr, [sp], #4
 800c124:	b004      	add	sp, #16
 800c126:	4770      	bx	lr
 800c128:	20000030 	.word	0x20000030

0800c12c <_puts_r>:
 800c12c:	6a03      	ldr	r3, [r0, #32]
 800c12e:	b570      	push	{r4, r5, r6, lr}
 800c130:	6884      	ldr	r4, [r0, #8]
 800c132:	4605      	mov	r5, r0
 800c134:	460e      	mov	r6, r1
 800c136:	b90b      	cbnz	r3, 800c13c <_puts_r+0x10>
 800c138:	f7ff ffb0 	bl	800c09c <__sinit>
 800c13c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c13e:	07db      	lsls	r3, r3, #31
 800c140:	d405      	bmi.n	800c14e <_puts_r+0x22>
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	0598      	lsls	r0, r3, #22
 800c146:	d402      	bmi.n	800c14e <_puts_r+0x22>
 800c148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c14a:	f000 f9fa 	bl	800c542 <__retarget_lock_acquire_recursive>
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	0719      	lsls	r1, r3, #28
 800c152:	d502      	bpl.n	800c15a <_puts_r+0x2e>
 800c154:	6923      	ldr	r3, [r4, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d135      	bne.n	800c1c6 <_puts_r+0x9a>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4628      	mov	r0, r5
 800c15e:	f000 f8fb 	bl	800c358 <__swsetup_r>
 800c162:	b380      	cbz	r0, 800c1c6 <_puts_r+0x9a>
 800c164:	f04f 35ff 	mov.w	r5, #4294967295
 800c168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c16a:	07da      	lsls	r2, r3, #31
 800c16c:	d405      	bmi.n	800c17a <_puts_r+0x4e>
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	059b      	lsls	r3, r3, #22
 800c172:	d402      	bmi.n	800c17a <_puts_r+0x4e>
 800c174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c176:	f000 f9e5 	bl	800c544 <__retarget_lock_release_recursive>
 800c17a:	4628      	mov	r0, r5
 800c17c:	bd70      	pop	{r4, r5, r6, pc}
 800c17e:	2b00      	cmp	r3, #0
 800c180:	da04      	bge.n	800c18c <_puts_r+0x60>
 800c182:	69a2      	ldr	r2, [r4, #24]
 800c184:	429a      	cmp	r2, r3
 800c186:	dc17      	bgt.n	800c1b8 <_puts_r+0x8c>
 800c188:	290a      	cmp	r1, #10
 800c18a:	d015      	beq.n	800c1b8 <_puts_r+0x8c>
 800c18c:	6823      	ldr	r3, [r4, #0]
 800c18e:	1c5a      	adds	r2, r3, #1
 800c190:	6022      	str	r2, [r4, #0]
 800c192:	7019      	strb	r1, [r3, #0]
 800c194:	68a3      	ldr	r3, [r4, #8]
 800c196:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c19a:	3b01      	subs	r3, #1
 800c19c:	60a3      	str	r3, [r4, #8]
 800c19e:	2900      	cmp	r1, #0
 800c1a0:	d1ed      	bne.n	800c17e <_puts_r+0x52>
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	da11      	bge.n	800c1ca <_puts_r+0x9e>
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	210a      	movs	r1, #10
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f000 f895 	bl	800c2da <__swbuf_r>
 800c1b0:	3001      	adds	r0, #1
 800c1b2:	d0d7      	beq.n	800c164 <_puts_r+0x38>
 800c1b4:	250a      	movs	r5, #10
 800c1b6:	e7d7      	b.n	800c168 <_puts_r+0x3c>
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f88d 	bl	800c2da <__swbuf_r>
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	d1e7      	bne.n	800c194 <_puts_r+0x68>
 800c1c4:	e7ce      	b.n	800c164 <_puts_r+0x38>
 800c1c6:	3e01      	subs	r6, #1
 800c1c8:	e7e4      	b.n	800c194 <_puts_r+0x68>
 800c1ca:	6823      	ldr	r3, [r4, #0]
 800c1cc:	1c5a      	adds	r2, r3, #1
 800c1ce:	6022      	str	r2, [r4, #0]
 800c1d0:	220a      	movs	r2, #10
 800c1d2:	701a      	strb	r2, [r3, #0]
 800c1d4:	e7ee      	b.n	800c1b4 <_puts_r+0x88>
	...

0800c1d8 <puts>:
 800c1d8:	4b02      	ldr	r3, [pc, #8]	@ (800c1e4 <puts+0xc>)
 800c1da:	4601      	mov	r1, r0
 800c1dc:	6818      	ldr	r0, [r3, #0]
 800c1de:	f7ff bfa5 	b.w	800c12c <_puts_r>
 800c1e2:	bf00      	nop
 800c1e4:	20000030 	.word	0x20000030

0800c1e8 <sniprintf>:
 800c1e8:	b40c      	push	{r2, r3}
 800c1ea:	b530      	push	{r4, r5, lr}
 800c1ec:	4b18      	ldr	r3, [pc, #96]	@ (800c250 <sniprintf+0x68>)
 800c1ee:	1e0c      	subs	r4, r1, #0
 800c1f0:	681d      	ldr	r5, [r3, #0]
 800c1f2:	b09d      	sub	sp, #116	@ 0x74
 800c1f4:	da08      	bge.n	800c208 <sniprintf+0x20>
 800c1f6:	238b      	movs	r3, #139	@ 0x8b
 800c1f8:	602b      	str	r3, [r5, #0]
 800c1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fe:	b01d      	add	sp, #116	@ 0x74
 800c200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c204:	b002      	add	sp, #8
 800c206:	4770      	bx	lr
 800c208:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c20c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c210:	f04f 0300 	mov.w	r3, #0
 800c214:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c216:	bf14      	ite	ne
 800c218:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c21c:	4623      	moveq	r3, r4
 800c21e:	9304      	str	r3, [sp, #16]
 800c220:	9307      	str	r3, [sp, #28]
 800c222:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c226:	9002      	str	r0, [sp, #8]
 800c228:	9006      	str	r0, [sp, #24]
 800c22a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c22e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c230:	ab21      	add	r3, sp, #132	@ 0x84
 800c232:	a902      	add	r1, sp, #8
 800c234:	4628      	mov	r0, r5
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	f001 fbfe 	bl	800da38 <_svfiprintf_r>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	bfbc      	itt	lt
 800c240:	238b      	movlt	r3, #139	@ 0x8b
 800c242:	602b      	strlt	r3, [r5, #0]
 800c244:	2c00      	cmp	r4, #0
 800c246:	d0da      	beq.n	800c1fe <sniprintf+0x16>
 800c248:	9b02      	ldr	r3, [sp, #8]
 800c24a:	2200      	movs	r2, #0
 800c24c:	701a      	strb	r2, [r3, #0]
 800c24e:	e7d6      	b.n	800c1fe <sniprintf+0x16>
 800c250:	20000030 	.word	0x20000030

0800c254 <__sread>:
 800c254:	b510      	push	{r4, lr}
 800c256:	460c      	mov	r4, r1
 800c258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25c:	f000 f912 	bl	800c484 <_read_r>
 800c260:	2800      	cmp	r0, #0
 800c262:	bfab      	itete	ge
 800c264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c266:	89a3      	ldrhlt	r3, [r4, #12]
 800c268:	181b      	addge	r3, r3, r0
 800c26a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c26e:	bfac      	ite	ge
 800c270:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c272:	81a3      	strhlt	r3, [r4, #12]
 800c274:	bd10      	pop	{r4, pc}

0800c276 <__swrite>:
 800c276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c27a:	461f      	mov	r7, r3
 800c27c:	898b      	ldrh	r3, [r1, #12]
 800c27e:	05db      	lsls	r3, r3, #23
 800c280:	4605      	mov	r5, r0
 800c282:	460c      	mov	r4, r1
 800c284:	4616      	mov	r6, r2
 800c286:	d505      	bpl.n	800c294 <__swrite+0x1e>
 800c288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c28c:	2302      	movs	r3, #2
 800c28e:	2200      	movs	r2, #0
 800c290:	f000 f8e6 	bl	800c460 <_lseek_r>
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c29a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c29e:	81a3      	strh	r3, [r4, #12]
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	463b      	mov	r3, r7
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2aa:	f000 b90d 	b.w	800c4c8 <_write_r>

0800c2ae <__sseek>:
 800c2ae:	b510      	push	{r4, lr}
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b6:	f000 f8d3 	bl	800c460 <_lseek_r>
 800c2ba:	1c43      	adds	r3, r0, #1
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	bf15      	itete	ne
 800c2c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c2c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c2c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c2ca:	81a3      	strheq	r3, [r4, #12]
 800c2cc:	bf18      	it	ne
 800c2ce:	81a3      	strhne	r3, [r4, #12]
 800c2d0:	bd10      	pop	{r4, pc}

0800c2d2 <__sclose>:
 800c2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d6:	f000 b8b3 	b.w	800c440 <_close_r>

0800c2da <__swbuf_r>:
 800c2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2dc:	460e      	mov	r6, r1
 800c2de:	4614      	mov	r4, r2
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	b118      	cbz	r0, 800c2ec <__swbuf_r+0x12>
 800c2e4:	6a03      	ldr	r3, [r0, #32]
 800c2e6:	b90b      	cbnz	r3, 800c2ec <__swbuf_r+0x12>
 800c2e8:	f7ff fed8 	bl	800c09c <__sinit>
 800c2ec:	69a3      	ldr	r3, [r4, #24]
 800c2ee:	60a3      	str	r3, [r4, #8]
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	071a      	lsls	r2, r3, #28
 800c2f4:	d501      	bpl.n	800c2fa <__swbuf_r+0x20>
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	b943      	cbnz	r3, 800c30c <__swbuf_r+0x32>
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f000 f82b 	bl	800c358 <__swsetup_r>
 800c302:	b118      	cbz	r0, 800c30c <__swbuf_r+0x32>
 800c304:	f04f 37ff 	mov.w	r7, #4294967295
 800c308:	4638      	mov	r0, r7
 800c30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	6922      	ldr	r2, [r4, #16]
 800c310:	1a98      	subs	r0, r3, r2
 800c312:	6963      	ldr	r3, [r4, #20]
 800c314:	b2f6      	uxtb	r6, r6
 800c316:	4283      	cmp	r3, r0
 800c318:	4637      	mov	r7, r6
 800c31a:	dc05      	bgt.n	800c328 <__swbuf_r+0x4e>
 800c31c:	4621      	mov	r1, r4
 800c31e:	4628      	mov	r0, r5
 800c320:	f001 fe4c 	bl	800dfbc <_fflush_r>
 800c324:	2800      	cmp	r0, #0
 800c326:	d1ed      	bne.n	800c304 <__swbuf_r+0x2a>
 800c328:	68a3      	ldr	r3, [r4, #8]
 800c32a:	3b01      	subs	r3, #1
 800c32c:	60a3      	str	r3, [r4, #8]
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	6022      	str	r2, [r4, #0]
 800c334:	701e      	strb	r6, [r3, #0]
 800c336:	6962      	ldr	r2, [r4, #20]
 800c338:	1c43      	adds	r3, r0, #1
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d004      	beq.n	800c348 <__swbuf_r+0x6e>
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	07db      	lsls	r3, r3, #31
 800c342:	d5e1      	bpl.n	800c308 <__swbuf_r+0x2e>
 800c344:	2e0a      	cmp	r6, #10
 800c346:	d1df      	bne.n	800c308 <__swbuf_r+0x2e>
 800c348:	4621      	mov	r1, r4
 800c34a:	4628      	mov	r0, r5
 800c34c:	f001 fe36 	bl	800dfbc <_fflush_r>
 800c350:	2800      	cmp	r0, #0
 800c352:	d0d9      	beq.n	800c308 <__swbuf_r+0x2e>
 800c354:	e7d6      	b.n	800c304 <__swbuf_r+0x2a>
	...

0800c358 <__swsetup_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4b29      	ldr	r3, [pc, #164]	@ (800c400 <__swsetup_r+0xa8>)
 800c35c:	4605      	mov	r5, r0
 800c35e:	6818      	ldr	r0, [r3, #0]
 800c360:	460c      	mov	r4, r1
 800c362:	b118      	cbz	r0, 800c36c <__swsetup_r+0x14>
 800c364:	6a03      	ldr	r3, [r0, #32]
 800c366:	b90b      	cbnz	r3, 800c36c <__swsetup_r+0x14>
 800c368:	f7ff fe98 	bl	800c09c <__sinit>
 800c36c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c370:	0719      	lsls	r1, r3, #28
 800c372:	d422      	bmi.n	800c3ba <__swsetup_r+0x62>
 800c374:	06da      	lsls	r2, r3, #27
 800c376:	d407      	bmi.n	800c388 <__swsetup_r+0x30>
 800c378:	2209      	movs	r2, #9
 800c37a:	602a      	str	r2, [r5, #0]
 800c37c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	f04f 30ff 	mov.w	r0, #4294967295
 800c386:	e033      	b.n	800c3f0 <__swsetup_r+0x98>
 800c388:	0758      	lsls	r0, r3, #29
 800c38a:	d512      	bpl.n	800c3b2 <__swsetup_r+0x5a>
 800c38c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c38e:	b141      	cbz	r1, 800c3a2 <__swsetup_r+0x4a>
 800c390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c394:	4299      	cmp	r1, r3
 800c396:	d002      	beq.n	800c39e <__swsetup_r+0x46>
 800c398:	4628      	mov	r0, r5
 800c39a:	f000 ff2d 	bl	800d1f8 <_free_r>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3a8:	81a3      	strh	r3, [r4, #12]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	6063      	str	r3, [r4, #4]
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	f043 0308 	orr.w	r3, r3, #8
 800c3b8:	81a3      	strh	r3, [r4, #12]
 800c3ba:	6923      	ldr	r3, [r4, #16]
 800c3bc:	b94b      	cbnz	r3, 800c3d2 <__swsetup_r+0x7a>
 800c3be:	89a3      	ldrh	r3, [r4, #12]
 800c3c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c3c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3c8:	d003      	beq.n	800c3d2 <__swsetup_r+0x7a>
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f001 fe43 	bl	800e058 <__smakebuf_r>
 800c3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3d6:	f013 0201 	ands.w	r2, r3, #1
 800c3da:	d00a      	beq.n	800c3f2 <__swsetup_r+0x9a>
 800c3dc:	2200      	movs	r2, #0
 800c3de:	60a2      	str	r2, [r4, #8]
 800c3e0:	6962      	ldr	r2, [r4, #20]
 800c3e2:	4252      	negs	r2, r2
 800c3e4:	61a2      	str	r2, [r4, #24]
 800c3e6:	6922      	ldr	r2, [r4, #16]
 800c3e8:	b942      	cbnz	r2, 800c3fc <__swsetup_r+0xa4>
 800c3ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3ee:	d1c5      	bne.n	800c37c <__swsetup_r+0x24>
 800c3f0:	bd38      	pop	{r3, r4, r5, pc}
 800c3f2:	0799      	lsls	r1, r3, #30
 800c3f4:	bf58      	it	pl
 800c3f6:	6962      	ldrpl	r2, [r4, #20]
 800c3f8:	60a2      	str	r2, [r4, #8]
 800c3fa:	e7f4      	b.n	800c3e6 <__swsetup_r+0x8e>
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e7f7      	b.n	800c3f0 <__swsetup_r+0x98>
 800c400:	20000030 	.word	0x20000030

0800c404 <memset>:
 800c404:	4402      	add	r2, r0
 800c406:	4603      	mov	r3, r0
 800c408:	4293      	cmp	r3, r2
 800c40a:	d100      	bne.n	800c40e <memset+0xa>
 800c40c:	4770      	bx	lr
 800c40e:	f803 1b01 	strb.w	r1, [r3], #1
 800c412:	e7f9      	b.n	800c408 <memset+0x4>

0800c414 <strncmp>:
 800c414:	b510      	push	{r4, lr}
 800c416:	b16a      	cbz	r2, 800c434 <strncmp+0x20>
 800c418:	3901      	subs	r1, #1
 800c41a:	1884      	adds	r4, r0, r2
 800c41c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c420:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c424:	429a      	cmp	r2, r3
 800c426:	d103      	bne.n	800c430 <strncmp+0x1c>
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d001      	beq.n	800c430 <strncmp+0x1c>
 800c42c:	2a00      	cmp	r2, #0
 800c42e:	d1f5      	bne.n	800c41c <strncmp+0x8>
 800c430:	1ad0      	subs	r0, r2, r3
 800c432:	bd10      	pop	{r4, pc}
 800c434:	4610      	mov	r0, r2
 800c436:	e7fc      	b.n	800c432 <strncmp+0x1e>

0800c438 <_localeconv_r>:
 800c438:	4800      	ldr	r0, [pc, #0]	@ (800c43c <_localeconv_r+0x4>)
 800c43a:	4770      	bx	lr
 800c43c:	20000170 	.word	0x20000170

0800c440 <_close_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d06      	ldr	r5, [pc, #24]	@ (800c45c <_close_r+0x1c>)
 800c444:	2300      	movs	r3, #0
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	602b      	str	r3, [r5, #0]
 800c44c:	f7f6 fed8 	bl	8003200 <_close>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_close_r+0x1a>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_close_r+0x1a>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	2000265c 	.word	0x2000265c

0800c460 <_lseek_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d07      	ldr	r5, [pc, #28]	@ (800c480 <_lseek_r+0x20>)
 800c464:	4604      	mov	r4, r0
 800c466:	4608      	mov	r0, r1
 800c468:	4611      	mov	r1, r2
 800c46a:	2200      	movs	r2, #0
 800c46c:	602a      	str	r2, [r5, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f7f6 feed 	bl	800324e <_lseek>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_lseek_r+0x1e>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_lseek_r+0x1e>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	2000265c 	.word	0x2000265c

0800c484 <_read_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4d07      	ldr	r5, [pc, #28]	@ (800c4a4 <_read_r+0x20>)
 800c488:	4604      	mov	r4, r0
 800c48a:	4608      	mov	r0, r1
 800c48c:	4611      	mov	r1, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	602a      	str	r2, [r5, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	f7f6 fe7b 	bl	800318e <_read>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_read_r+0x1e>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_read_r+0x1e>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	2000265c 	.word	0x2000265c

0800c4a8 <_sbrk_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4d06      	ldr	r5, [pc, #24]	@ (800c4c4 <_sbrk_r+0x1c>)
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	4608      	mov	r0, r1
 800c4b2:	602b      	str	r3, [r5, #0]
 800c4b4:	f7f6 fed8 	bl	8003268 <_sbrk>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d102      	bne.n	800c4c2 <_sbrk_r+0x1a>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	b103      	cbz	r3, 800c4c2 <_sbrk_r+0x1a>
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	bd38      	pop	{r3, r4, r5, pc}
 800c4c4:	2000265c 	.word	0x2000265c

0800c4c8 <_write_r>:
 800c4c8:	b538      	push	{r3, r4, r5, lr}
 800c4ca:	4d07      	ldr	r5, [pc, #28]	@ (800c4e8 <_write_r+0x20>)
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	4608      	mov	r0, r1
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	602a      	str	r2, [r5, #0]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	f7f6 fe76 	bl	80031c8 <_write>
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	d102      	bne.n	800c4e6 <_write_r+0x1e>
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	b103      	cbz	r3, 800c4e6 <_write_r+0x1e>
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	2000265c 	.word	0x2000265c

0800c4ec <__errno>:
 800c4ec:	4b01      	ldr	r3, [pc, #4]	@ (800c4f4 <__errno+0x8>)
 800c4ee:	6818      	ldr	r0, [r3, #0]
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20000030 	.word	0x20000030

0800c4f8 <__libc_init_array>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	4d0d      	ldr	r5, [pc, #52]	@ (800c530 <__libc_init_array+0x38>)
 800c4fc:	4c0d      	ldr	r4, [pc, #52]	@ (800c534 <__libc_init_array+0x3c>)
 800c4fe:	1b64      	subs	r4, r4, r5
 800c500:	10a4      	asrs	r4, r4, #2
 800c502:	2600      	movs	r6, #0
 800c504:	42a6      	cmp	r6, r4
 800c506:	d109      	bne.n	800c51c <__libc_init_array+0x24>
 800c508:	4d0b      	ldr	r5, [pc, #44]	@ (800c538 <__libc_init_array+0x40>)
 800c50a:	4c0c      	ldr	r4, [pc, #48]	@ (800c53c <__libc_init_array+0x44>)
 800c50c:	f001 ff10 	bl	800e330 <_init>
 800c510:	1b64      	subs	r4, r4, r5
 800c512:	10a4      	asrs	r4, r4, #2
 800c514:	2600      	movs	r6, #0
 800c516:	42a6      	cmp	r6, r4
 800c518:	d105      	bne.n	800c526 <__libc_init_array+0x2e>
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c520:	4798      	blx	r3
 800c522:	3601      	adds	r6, #1
 800c524:	e7ee      	b.n	800c504 <__libc_init_array+0xc>
 800c526:	f855 3b04 	ldr.w	r3, [r5], #4
 800c52a:	4798      	blx	r3
 800c52c:	3601      	adds	r6, #1
 800c52e:	e7f2      	b.n	800c516 <__libc_init_array+0x1e>
 800c530:	0800fabc 	.word	0x0800fabc
 800c534:	0800fabc 	.word	0x0800fabc
 800c538:	0800fabc 	.word	0x0800fabc
 800c53c:	0800fac0 	.word	0x0800fac0

0800c540 <__retarget_lock_init_recursive>:
 800c540:	4770      	bx	lr

0800c542 <__retarget_lock_acquire_recursive>:
 800c542:	4770      	bx	lr

0800c544 <__retarget_lock_release_recursive>:
 800c544:	4770      	bx	lr

0800c546 <quorem>:
 800c546:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54a:	6903      	ldr	r3, [r0, #16]
 800c54c:	690c      	ldr	r4, [r1, #16]
 800c54e:	42a3      	cmp	r3, r4
 800c550:	4607      	mov	r7, r0
 800c552:	db7e      	blt.n	800c652 <quorem+0x10c>
 800c554:	3c01      	subs	r4, #1
 800c556:	f101 0814 	add.w	r8, r1, #20
 800c55a:	00a3      	lsls	r3, r4, #2
 800c55c:	f100 0514 	add.w	r5, r0, #20
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c566:	9301      	str	r3, [sp, #4]
 800c568:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c56c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c570:	3301      	adds	r3, #1
 800c572:	429a      	cmp	r2, r3
 800c574:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c578:	fbb2 f6f3 	udiv	r6, r2, r3
 800c57c:	d32e      	bcc.n	800c5dc <quorem+0x96>
 800c57e:	f04f 0a00 	mov.w	sl, #0
 800c582:	46c4      	mov	ip, r8
 800c584:	46ae      	mov	lr, r5
 800c586:	46d3      	mov	fp, sl
 800c588:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c58c:	b298      	uxth	r0, r3
 800c58e:	fb06 a000 	mla	r0, r6, r0, sl
 800c592:	0c02      	lsrs	r2, r0, #16
 800c594:	0c1b      	lsrs	r3, r3, #16
 800c596:	fb06 2303 	mla	r3, r6, r3, r2
 800c59a:	f8de 2000 	ldr.w	r2, [lr]
 800c59e:	b280      	uxth	r0, r0
 800c5a0:	b292      	uxth	r2, r2
 800c5a2:	1a12      	subs	r2, r2, r0
 800c5a4:	445a      	add	r2, fp
 800c5a6:	f8de 0000 	ldr.w	r0, [lr]
 800c5aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c5b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c5b8:	b292      	uxth	r2, r2
 800c5ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c5be:	45e1      	cmp	r9, ip
 800c5c0:	f84e 2b04 	str.w	r2, [lr], #4
 800c5c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c5c8:	d2de      	bcs.n	800c588 <quorem+0x42>
 800c5ca:	9b00      	ldr	r3, [sp, #0]
 800c5cc:	58eb      	ldr	r3, [r5, r3]
 800c5ce:	b92b      	cbnz	r3, 800c5dc <quorem+0x96>
 800c5d0:	9b01      	ldr	r3, [sp, #4]
 800c5d2:	3b04      	subs	r3, #4
 800c5d4:	429d      	cmp	r5, r3
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	d32f      	bcc.n	800c63a <quorem+0xf4>
 800c5da:	613c      	str	r4, [r7, #16]
 800c5dc:	4638      	mov	r0, r7
 800c5de:	f001 f8c7 	bl	800d770 <__mcmp>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	db25      	blt.n	800c632 <quorem+0xec>
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5ee:	f8d1 c000 	ldr.w	ip, [r1]
 800c5f2:	fa1f fe82 	uxth.w	lr, r2
 800c5f6:	fa1f f38c 	uxth.w	r3, ip
 800c5fa:	eba3 030e 	sub.w	r3, r3, lr
 800c5fe:	4403      	add	r3, r0
 800c600:	0c12      	lsrs	r2, r2, #16
 800c602:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c606:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c610:	45c1      	cmp	r9, r8
 800c612:	f841 3b04 	str.w	r3, [r1], #4
 800c616:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c61a:	d2e6      	bcs.n	800c5ea <quorem+0xa4>
 800c61c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c620:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c624:	b922      	cbnz	r2, 800c630 <quorem+0xea>
 800c626:	3b04      	subs	r3, #4
 800c628:	429d      	cmp	r5, r3
 800c62a:	461a      	mov	r2, r3
 800c62c:	d30b      	bcc.n	800c646 <quorem+0x100>
 800c62e:	613c      	str	r4, [r7, #16]
 800c630:	3601      	adds	r6, #1
 800c632:	4630      	mov	r0, r6
 800c634:	b003      	add	sp, #12
 800c636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63a:	6812      	ldr	r2, [r2, #0]
 800c63c:	3b04      	subs	r3, #4
 800c63e:	2a00      	cmp	r2, #0
 800c640:	d1cb      	bne.n	800c5da <quorem+0x94>
 800c642:	3c01      	subs	r4, #1
 800c644:	e7c6      	b.n	800c5d4 <quorem+0x8e>
 800c646:	6812      	ldr	r2, [r2, #0]
 800c648:	3b04      	subs	r3, #4
 800c64a:	2a00      	cmp	r2, #0
 800c64c:	d1ef      	bne.n	800c62e <quorem+0xe8>
 800c64e:	3c01      	subs	r4, #1
 800c650:	e7ea      	b.n	800c628 <quorem+0xe2>
 800c652:	2000      	movs	r0, #0
 800c654:	e7ee      	b.n	800c634 <quorem+0xee>
	...

0800c658 <_dtoa_r>:
 800c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	69c7      	ldr	r7, [r0, #28]
 800c65e:	b097      	sub	sp, #92	@ 0x5c
 800c660:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c664:	ec55 4b10 	vmov	r4, r5, d0
 800c668:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c66a:	9107      	str	r1, [sp, #28]
 800c66c:	4681      	mov	r9, r0
 800c66e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c670:	9311      	str	r3, [sp, #68]	@ 0x44
 800c672:	b97f      	cbnz	r7, 800c694 <_dtoa_r+0x3c>
 800c674:	2010      	movs	r0, #16
 800c676:	f7fe ff71 	bl	800b55c <malloc>
 800c67a:	4602      	mov	r2, r0
 800c67c:	f8c9 001c 	str.w	r0, [r9, #28]
 800c680:	b920      	cbnz	r0, 800c68c <_dtoa_r+0x34>
 800c682:	4ba9      	ldr	r3, [pc, #676]	@ (800c928 <_dtoa_r+0x2d0>)
 800c684:	21ef      	movs	r1, #239	@ 0xef
 800c686:	48a9      	ldr	r0, [pc, #676]	@ (800c92c <_dtoa_r+0x2d4>)
 800c688:	f001 fd6c 	bl	800e164 <__assert_func>
 800c68c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c690:	6007      	str	r7, [r0, #0]
 800c692:	60c7      	str	r7, [r0, #12]
 800c694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c698:	6819      	ldr	r1, [r3, #0]
 800c69a:	b159      	cbz	r1, 800c6b4 <_dtoa_r+0x5c>
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	604a      	str	r2, [r1, #4]
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	4093      	lsls	r3, r2
 800c6a4:	608b      	str	r3, [r1, #8]
 800c6a6:	4648      	mov	r0, r9
 800c6a8:	f000 fe30 	bl	800d30c <_Bfree>
 800c6ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	1e2b      	subs	r3, r5, #0
 800c6b6:	bfb9      	ittee	lt
 800c6b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c6bc:	9305      	strlt	r3, [sp, #20]
 800c6be:	2300      	movge	r3, #0
 800c6c0:	6033      	strge	r3, [r6, #0]
 800c6c2:	9f05      	ldr	r7, [sp, #20]
 800c6c4:	4b9a      	ldr	r3, [pc, #616]	@ (800c930 <_dtoa_r+0x2d8>)
 800c6c6:	bfbc      	itt	lt
 800c6c8:	2201      	movlt	r2, #1
 800c6ca:	6032      	strlt	r2, [r6, #0]
 800c6cc:	43bb      	bics	r3, r7
 800c6ce:	d112      	bne.n	800c6f6 <_dtoa_r+0x9e>
 800c6d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c6d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6dc:	4323      	orrs	r3, r4
 800c6de:	f000 855a 	beq.w	800d196 <_dtoa_r+0xb3e>
 800c6e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c6e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c944 <_dtoa_r+0x2ec>
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f000 855c 	beq.w	800d1a6 <_dtoa_r+0xb4e>
 800c6ee:	f10a 0303 	add.w	r3, sl, #3
 800c6f2:	f000 bd56 	b.w	800d1a2 <_dtoa_r+0xb4a>
 800c6f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	ec51 0b17 	vmov	r0, r1, d7
 800c700:	2300      	movs	r3, #0
 800c702:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c706:	f7f4 fa17 	bl	8000b38 <__aeabi_dcmpeq>
 800c70a:	4680      	mov	r8, r0
 800c70c:	b158      	cbz	r0, 800c726 <_dtoa_r+0xce>
 800c70e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c710:	2301      	movs	r3, #1
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c716:	b113      	cbz	r3, 800c71e <_dtoa_r+0xc6>
 800c718:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c71a:	4b86      	ldr	r3, [pc, #536]	@ (800c934 <_dtoa_r+0x2dc>)
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c948 <_dtoa_r+0x2f0>
 800c722:	f000 bd40 	b.w	800d1a6 <_dtoa_r+0xb4e>
 800c726:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c72a:	aa14      	add	r2, sp, #80	@ 0x50
 800c72c:	a915      	add	r1, sp, #84	@ 0x54
 800c72e:	4648      	mov	r0, r9
 800c730:	f001 f8ce 	bl	800d8d0 <__d2b>
 800c734:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c738:	9002      	str	r0, [sp, #8]
 800c73a:	2e00      	cmp	r6, #0
 800c73c:	d078      	beq.n	800c830 <_dtoa_r+0x1d8>
 800c73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c740:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c74c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c750:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c754:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c758:	4619      	mov	r1, r3
 800c75a:	2200      	movs	r2, #0
 800c75c:	4b76      	ldr	r3, [pc, #472]	@ (800c938 <_dtoa_r+0x2e0>)
 800c75e:	f7f3 fdcb 	bl	80002f8 <__aeabi_dsub>
 800c762:	a36b      	add	r3, pc, #428	@ (adr r3, 800c910 <_dtoa_r+0x2b8>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f7f3 ff7e 	bl	8000668 <__aeabi_dmul>
 800c76c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c918 <_dtoa_r+0x2c0>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f7f3 fdc3 	bl	80002fc <__adddf3>
 800c776:	4604      	mov	r4, r0
 800c778:	4630      	mov	r0, r6
 800c77a:	460d      	mov	r5, r1
 800c77c:	f7f3 ff0a 	bl	8000594 <__aeabi_i2d>
 800c780:	a367      	add	r3, pc, #412	@ (adr r3, 800c920 <_dtoa_r+0x2c8>)
 800c782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c786:	f7f3 ff6f 	bl	8000668 <__aeabi_dmul>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	4620      	mov	r0, r4
 800c790:	4629      	mov	r1, r5
 800c792:	f7f3 fdb3 	bl	80002fc <__adddf3>
 800c796:	4604      	mov	r4, r0
 800c798:	460d      	mov	r5, r1
 800c79a:	f7f4 fa15 	bl	8000bc8 <__aeabi_d2iz>
 800c79e:	2200      	movs	r2, #0
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	f7f4 f9d0 	bl	8000b4c <__aeabi_dcmplt>
 800c7ac:	b140      	cbz	r0, 800c7c0 <_dtoa_r+0x168>
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	f7f3 fef0 	bl	8000594 <__aeabi_i2d>
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	462b      	mov	r3, r5
 800c7b8:	f7f4 f9be 	bl	8000b38 <__aeabi_dcmpeq>
 800c7bc:	b900      	cbnz	r0, 800c7c0 <_dtoa_r+0x168>
 800c7be:	3f01      	subs	r7, #1
 800c7c0:	2f16      	cmp	r7, #22
 800c7c2:	d852      	bhi.n	800c86a <_dtoa_r+0x212>
 800c7c4:	4b5d      	ldr	r3, [pc, #372]	@ (800c93c <_dtoa_r+0x2e4>)
 800c7c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c7d2:	f7f4 f9bb 	bl	8000b4c <__aeabi_dcmplt>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d049      	beq.n	800c86e <_dtoa_r+0x216>
 800c7da:	3f01      	subs	r7, #1
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c7e2:	1b9b      	subs	r3, r3, r6
 800c7e4:	1e5a      	subs	r2, r3, #1
 800c7e6:	bf45      	ittet	mi
 800c7e8:	f1c3 0301 	rsbmi	r3, r3, #1
 800c7ec:	9300      	strmi	r3, [sp, #0]
 800c7ee:	2300      	movpl	r3, #0
 800c7f0:	2300      	movmi	r3, #0
 800c7f2:	9206      	str	r2, [sp, #24]
 800c7f4:	bf54      	ite	pl
 800c7f6:	9300      	strpl	r3, [sp, #0]
 800c7f8:	9306      	strmi	r3, [sp, #24]
 800c7fa:	2f00      	cmp	r7, #0
 800c7fc:	db39      	blt.n	800c872 <_dtoa_r+0x21a>
 800c7fe:	9b06      	ldr	r3, [sp, #24]
 800c800:	970d      	str	r7, [sp, #52]	@ 0x34
 800c802:	443b      	add	r3, r7
 800c804:	9306      	str	r3, [sp, #24]
 800c806:	2300      	movs	r3, #0
 800c808:	9308      	str	r3, [sp, #32]
 800c80a:	9b07      	ldr	r3, [sp, #28]
 800c80c:	2b09      	cmp	r3, #9
 800c80e:	d863      	bhi.n	800c8d8 <_dtoa_r+0x280>
 800c810:	2b05      	cmp	r3, #5
 800c812:	bfc4      	itt	gt
 800c814:	3b04      	subgt	r3, #4
 800c816:	9307      	strgt	r3, [sp, #28]
 800c818:	9b07      	ldr	r3, [sp, #28]
 800c81a:	f1a3 0302 	sub.w	r3, r3, #2
 800c81e:	bfcc      	ite	gt
 800c820:	2400      	movgt	r4, #0
 800c822:	2401      	movle	r4, #1
 800c824:	2b03      	cmp	r3, #3
 800c826:	d863      	bhi.n	800c8f0 <_dtoa_r+0x298>
 800c828:	e8df f003 	tbb	[pc, r3]
 800c82c:	2b375452 	.word	0x2b375452
 800c830:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c834:	441e      	add	r6, r3
 800c836:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c83a:	2b20      	cmp	r3, #32
 800c83c:	bfc1      	itttt	gt
 800c83e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c842:	409f      	lslgt	r7, r3
 800c844:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c848:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c84c:	bfd6      	itet	le
 800c84e:	f1c3 0320 	rsble	r3, r3, #32
 800c852:	ea47 0003 	orrgt.w	r0, r7, r3
 800c856:	fa04 f003 	lslle.w	r0, r4, r3
 800c85a:	f7f3 fe8b 	bl	8000574 <__aeabi_ui2d>
 800c85e:	2201      	movs	r2, #1
 800c860:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c864:	3e01      	subs	r6, #1
 800c866:	9212      	str	r2, [sp, #72]	@ 0x48
 800c868:	e776      	b.n	800c758 <_dtoa_r+0x100>
 800c86a:	2301      	movs	r3, #1
 800c86c:	e7b7      	b.n	800c7de <_dtoa_r+0x186>
 800c86e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c870:	e7b6      	b.n	800c7e0 <_dtoa_r+0x188>
 800c872:	9b00      	ldr	r3, [sp, #0]
 800c874:	1bdb      	subs	r3, r3, r7
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	427b      	negs	r3, r7
 800c87a:	9308      	str	r3, [sp, #32]
 800c87c:	2300      	movs	r3, #0
 800c87e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c880:	e7c3      	b.n	800c80a <_dtoa_r+0x1b2>
 800c882:	2301      	movs	r3, #1
 800c884:	9309      	str	r3, [sp, #36]	@ 0x24
 800c886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c888:	eb07 0b03 	add.w	fp, r7, r3
 800c88c:	f10b 0301 	add.w	r3, fp, #1
 800c890:	2b01      	cmp	r3, #1
 800c892:	9303      	str	r3, [sp, #12]
 800c894:	bfb8      	it	lt
 800c896:	2301      	movlt	r3, #1
 800c898:	e006      	b.n	800c8a8 <_dtoa_r+0x250>
 800c89a:	2301      	movs	r3, #1
 800c89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c89e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dd28      	ble.n	800c8f6 <_dtoa_r+0x29e>
 800c8a4:	469b      	mov	fp, r3
 800c8a6:	9303      	str	r3, [sp, #12]
 800c8a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	2204      	movs	r2, #4
 800c8b0:	f102 0514 	add.w	r5, r2, #20
 800c8b4:	429d      	cmp	r5, r3
 800c8b6:	d926      	bls.n	800c906 <_dtoa_r+0x2ae>
 800c8b8:	6041      	str	r1, [r0, #4]
 800c8ba:	4648      	mov	r0, r9
 800c8bc:	f000 fce6 	bl	800d28c <_Balloc>
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d142      	bne.n	800c94c <_dtoa_r+0x2f4>
 800c8c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c940 <_dtoa_r+0x2e8>)
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800c8ce:	e6da      	b.n	800c686 <_dtoa_r+0x2e>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e7e3      	b.n	800c89c <_dtoa_r+0x244>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e7d5      	b.n	800c884 <_dtoa_r+0x22c>
 800c8d8:	2401      	movs	r4, #1
 800c8da:	2300      	movs	r3, #0
 800c8dc:	9307      	str	r3, [sp, #28]
 800c8de:	9409      	str	r4, [sp, #36]	@ 0x24
 800c8e0:	f04f 3bff 	mov.w	fp, #4294967295
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f8cd b00c 	str.w	fp, [sp, #12]
 800c8ea:	2312      	movs	r3, #18
 800c8ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8ee:	e7db      	b.n	800c8a8 <_dtoa_r+0x250>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8f4:	e7f4      	b.n	800c8e0 <_dtoa_r+0x288>
 800c8f6:	f04f 0b01 	mov.w	fp, #1
 800c8fa:	f8cd b00c 	str.w	fp, [sp, #12]
 800c8fe:	465b      	mov	r3, fp
 800c900:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c904:	e7d0      	b.n	800c8a8 <_dtoa_r+0x250>
 800c906:	3101      	adds	r1, #1
 800c908:	0052      	lsls	r2, r2, #1
 800c90a:	e7d1      	b.n	800c8b0 <_dtoa_r+0x258>
 800c90c:	f3af 8000 	nop.w
 800c910:	636f4361 	.word	0x636f4361
 800c914:	3fd287a7 	.word	0x3fd287a7
 800c918:	8b60c8b3 	.word	0x8b60c8b3
 800c91c:	3fc68a28 	.word	0x3fc68a28
 800c920:	509f79fb 	.word	0x509f79fb
 800c924:	3fd34413 	.word	0x3fd34413
 800c928:	0800f77d 	.word	0x0800f77d
 800c92c:	0800f794 	.word	0x0800f794
 800c930:	7ff00000 	.word	0x7ff00000
 800c934:	0800f74d 	.word	0x0800f74d
 800c938:	3ff80000 	.word	0x3ff80000
 800c93c:	0800f8e8 	.word	0x0800f8e8
 800c940:	0800f7ec 	.word	0x0800f7ec
 800c944:	0800f779 	.word	0x0800f779
 800c948:	0800f74c 	.word	0x0800f74c
 800c94c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c950:	6018      	str	r0, [r3, #0]
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	2b0e      	cmp	r3, #14
 800c956:	f200 80a1 	bhi.w	800ca9c <_dtoa_r+0x444>
 800c95a:	2c00      	cmp	r4, #0
 800c95c:	f000 809e 	beq.w	800ca9c <_dtoa_r+0x444>
 800c960:	2f00      	cmp	r7, #0
 800c962:	dd33      	ble.n	800c9cc <_dtoa_r+0x374>
 800c964:	4b9c      	ldr	r3, [pc, #624]	@ (800cbd8 <_dtoa_r+0x580>)
 800c966:	f007 020f 	and.w	r2, r7, #15
 800c96a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c96e:	ed93 7b00 	vldr	d7, [r3]
 800c972:	05f8      	lsls	r0, r7, #23
 800c974:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c978:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c97c:	d516      	bpl.n	800c9ac <_dtoa_r+0x354>
 800c97e:	4b97      	ldr	r3, [pc, #604]	@ (800cbdc <_dtoa_r+0x584>)
 800c980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c988:	f7f3 ff98 	bl	80008bc <__aeabi_ddiv>
 800c98c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c990:	f004 040f 	and.w	r4, r4, #15
 800c994:	2603      	movs	r6, #3
 800c996:	4d91      	ldr	r5, [pc, #580]	@ (800cbdc <_dtoa_r+0x584>)
 800c998:	b954      	cbnz	r4, 800c9b0 <_dtoa_r+0x358>
 800c99a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c99e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9a2:	f7f3 ff8b 	bl	80008bc <__aeabi_ddiv>
 800c9a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9aa:	e028      	b.n	800c9fe <_dtoa_r+0x3a6>
 800c9ac:	2602      	movs	r6, #2
 800c9ae:	e7f2      	b.n	800c996 <_dtoa_r+0x33e>
 800c9b0:	07e1      	lsls	r1, r4, #31
 800c9b2:	d508      	bpl.n	800c9c6 <_dtoa_r+0x36e>
 800c9b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c9b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9bc:	f7f3 fe54 	bl	8000668 <__aeabi_dmul>
 800c9c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c9c4:	3601      	adds	r6, #1
 800c9c6:	1064      	asrs	r4, r4, #1
 800c9c8:	3508      	adds	r5, #8
 800c9ca:	e7e5      	b.n	800c998 <_dtoa_r+0x340>
 800c9cc:	f000 80af 	beq.w	800cb2e <_dtoa_r+0x4d6>
 800c9d0:	427c      	negs	r4, r7
 800c9d2:	4b81      	ldr	r3, [pc, #516]	@ (800cbd8 <_dtoa_r+0x580>)
 800c9d4:	4d81      	ldr	r5, [pc, #516]	@ (800cbdc <_dtoa_r+0x584>)
 800c9d6:	f004 020f 	and.w	r2, r4, #15
 800c9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c9e6:	f7f3 fe3f 	bl	8000668 <__aeabi_dmul>
 800c9ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9ee:	1124      	asrs	r4, r4, #4
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	2602      	movs	r6, #2
 800c9f4:	2c00      	cmp	r4, #0
 800c9f6:	f040 808f 	bne.w	800cb18 <_dtoa_r+0x4c0>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1d3      	bne.n	800c9a6 <_dtoa_r+0x34e>
 800c9fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 8094 	beq.w	800cb32 <_dtoa_r+0x4da>
 800ca0a:	4b75      	ldr	r3, [pc, #468]	@ (800cbe0 <_dtoa_r+0x588>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4620      	mov	r0, r4
 800ca10:	4629      	mov	r1, r5
 800ca12:	f7f4 f89b 	bl	8000b4c <__aeabi_dcmplt>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	f000 808b 	beq.w	800cb32 <_dtoa_r+0x4da>
 800ca1c:	9b03      	ldr	r3, [sp, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 8087 	beq.w	800cb32 <_dtoa_r+0x4da>
 800ca24:	f1bb 0f00 	cmp.w	fp, #0
 800ca28:	dd34      	ble.n	800ca94 <_dtoa_r+0x43c>
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	4b6d      	ldr	r3, [pc, #436]	@ (800cbe4 <_dtoa_r+0x58c>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	4629      	mov	r1, r5
 800ca32:	f7f3 fe19 	bl	8000668 <__aeabi_dmul>
 800ca36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca3a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ca3e:	3601      	adds	r6, #1
 800ca40:	465c      	mov	r4, fp
 800ca42:	4630      	mov	r0, r6
 800ca44:	f7f3 fda6 	bl	8000594 <__aeabi_i2d>
 800ca48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca4c:	f7f3 fe0c 	bl	8000668 <__aeabi_dmul>
 800ca50:	4b65      	ldr	r3, [pc, #404]	@ (800cbe8 <_dtoa_r+0x590>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	f7f3 fc52 	bl	80002fc <__adddf3>
 800ca58:	4605      	mov	r5, r0
 800ca5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ca5e:	2c00      	cmp	r4, #0
 800ca60:	d16a      	bne.n	800cb38 <_dtoa_r+0x4e0>
 800ca62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca66:	4b61      	ldr	r3, [pc, #388]	@ (800cbec <_dtoa_r+0x594>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f7f3 fc45 	bl	80002f8 <__aeabi_dsub>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca76:	462a      	mov	r2, r5
 800ca78:	4633      	mov	r3, r6
 800ca7a:	f7f4 f885 	bl	8000b88 <__aeabi_dcmpgt>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f040 8298 	bne.w	800cfb4 <_dtoa_r+0x95c>
 800ca84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca88:	462a      	mov	r2, r5
 800ca8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ca8e:	f7f4 f85d 	bl	8000b4c <__aeabi_dcmplt>
 800ca92:	bb38      	cbnz	r0, 800cae4 <_dtoa_r+0x48c>
 800ca94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ca98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ca9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f2c0 8157 	blt.w	800cd52 <_dtoa_r+0x6fa>
 800caa4:	2f0e      	cmp	r7, #14
 800caa6:	f300 8154 	bgt.w	800cd52 <_dtoa_r+0x6fa>
 800caaa:	4b4b      	ldr	r3, [pc, #300]	@ (800cbd8 <_dtoa_r+0x580>)
 800caac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cab0:	ed93 7b00 	vldr	d7, [r3]
 800cab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	ed8d 7b00 	vstr	d7, [sp]
 800cabc:	f280 80e5 	bge.w	800cc8a <_dtoa_r+0x632>
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f300 80e1 	bgt.w	800cc8a <_dtoa_r+0x632>
 800cac8:	d10c      	bne.n	800cae4 <_dtoa_r+0x48c>
 800caca:	4b48      	ldr	r3, [pc, #288]	@ (800cbec <_dtoa_r+0x594>)
 800cacc:	2200      	movs	r2, #0
 800cace:	ec51 0b17 	vmov	r0, r1, d7
 800cad2:	f7f3 fdc9 	bl	8000668 <__aeabi_dmul>
 800cad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cada:	f7f4 f84b 	bl	8000b74 <__aeabi_dcmpge>
 800cade:	2800      	cmp	r0, #0
 800cae0:	f000 8266 	beq.w	800cfb0 <_dtoa_r+0x958>
 800cae4:	2400      	movs	r4, #0
 800cae6:	4625      	mov	r5, r4
 800cae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800caea:	4656      	mov	r6, sl
 800caec:	ea6f 0803 	mvn.w	r8, r3
 800caf0:	2700      	movs	r7, #0
 800caf2:	4621      	mov	r1, r4
 800caf4:	4648      	mov	r0, r9
 800caf6:	f000 fc09 	bl	800d30c <_Bfree>
 800cafa:	2d00      	cmp	r5, #0
 800cafc:	f000 80bd 	beq.w	800cc7a <_dtoa_r+0x622>
 800cb00:	b12f      	cbz	r7, 800cb0e <_dtoa_r+0x4b6>
 800cb02:	42af      	cmp	r7, r5
 800cb04:	d003      	beq.n	800cb0e <_dtoa_r+0x4b6>
 800cb06:	4639      	mov	r1, r7
 800cb08:	4648      	mov	r0, r9
 800cb0a:	f000 fbff 	bl	800d30c <_Bfree>
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4648      	mov	r0, r9
 800cb12:	f000 fbfb 	bl	800d30c <_Bfree>
 800cb16:	e0b0      	b.n	800cc7a <_dtoa_r+0x622>
 800cb18:	07e2      	lsls	r2, r4, #31
 800cb1a:	d505      	bpl.n	800cb28 <_dtoa_r+0x4d0>
 800cb1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb20:	f7f3 fda2 	bl	8000668 <__aeabi_dmul>
 800cb24:	3601      	adds	r6, #1
 800cb26:	2301      	movs	r3, #1
 800cb28:	1064      	asrs	r4, r4, #1
 800cb2a:	3508      	adds	r5, #8
 800cb2c:	e762      	b.n	800c9f4 <_dtoa_r+0x39c>
 800cb2e:	2602      	movs	r6, #2
 800cb30:	e765      	b.n	800c9fe <_dtoa_r+0x3a6>
 800cb32:	9c03      	ldr	r4, [sp, #12]
 800cb34:	46b8      	mov	r8, r7
 800cb36:	e784      	b.n	800ca42 <_dtoa_r+0x3ea>
 800cb38:	4b27      	ldr	r3, [pc, #156]	@ (800cbd8 <_dtoa_r+0x580>)
 800cb3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb44:	4454      	add	r4, sl
 800cb46:	2900      	cmp	r1, #0
 800cb48:	d054      	beq.n	800cbf4 <_dtoa_r+0x59c>
 800cb4a:	4929      	ldr	r1, [pc, #164]	@ (800cbf0 <_dtoa_r+0x598>)
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	f7f3 feb5 	bl	80008bc <__aeabi_ddiv>
 800cb52:	4633      	mov	r3, r6
 800cb54:	462a      	mov	r2, r5
 800cb56:	f7f3 fbcf 	bl	80002f8 <__aeabi_dsub>
 800cb5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cb5e:	4656      	mov	r6, sl
 800cb60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb64:	f7f4 f830 	bl	8000bc8 <__aeabi_d2iz>
 800cb68:	4605      	mov	r5, r0
 800cb6a:	f7f3 fd13 	bl	8000594 <__aeabi_i2d>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb76:	f7f3 fbbf 	bl	80002f8 <__aeabi_dsub>
 800cb7a:	3530      	adds	r5, #48	@ 0x30
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb84:	f806 5b01 	strb.w	r5, [r6], #1
 800cb88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb8c:	f7f3 ffde 	bl	8000b4c <__aeabi_dcmplt>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d172      	bne.n	800cc7a <_dtoa_r+0x622>
 800cb94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb98:	4911      	ldr	r1, [pc, #68]	@ (800cbe0 <_dtoa_r+0x588>)
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	f7f3 fbac 	bl	80002f8 <__aeabi_dsub>
 800cba0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cba4:	f7f3 ffd2 	bl	8000b4c <__aeabi_dcmplt>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	f040 80b4 	bne.w	800cd16 <_dtoa_r+0x6be>
 800cbae:	42a6      	cmp	r6, r4
 800cbb0:	f43f af70 	beq.w	800ca94 <_dtoa_r+0x43c>
 800cbb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe4 <_dtoa_r+0x58c>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f7f3 fd54 	bl	8000668 <__aeabi_dmul>
 800cbc0:	4b08      	ldr	r3, [pc, #32]	@ (800cbe4 <_dtoa_r+0x58c>)
 800cbc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbcc:	f7f3 fd4c 	bl	8000668 <__aeabi_dmul>
 800cbd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbd4:	e7c4      	b.n	800cb60 <_dtoa_r+0x508>
 800cbd6:	bf00      	nop
 800cbd8:	0800f8e8 	.word	0x0800f8e8
 800cbdc:	0800f8c0 	.word	0x0800f8c0
 800cbe0:	3ff00000 	.word	0x3ff00000
 800cbe4:	40240000 	.word	0x40240000
 800cbe8:	401c0000 	.word	0x401c0000
 800cbec:	40140000 	.word	0x40140000
 800cbf0:	3fe00000 	.word	0x3fe00000
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f7f3 fd36 	bl	8000668 <__aeabi_dmul>
 800cbfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc00:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cc02:	4656      	mov	r6, sl
 800cc04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc08:	f7f3 ffde 	bl	8000bc8 <__aeabi_d2iz>
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	f7f3 fcc1 	bl	8000594 <__aeabi_i2d>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc1a:	f7f3 fb6d 	bl	80002f8 <__aeabi_dsub>
 800cc1e:	3530      	adds	r5, #48	@ 0x30
 800cc20:	f806 5b01 	strb.w	r5, [r6], #1
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	42a6      	cmp	r6, r4
 800cc2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc2e:	f04f 0200 	mov.w	r2, #0
 800cc32:	d124      	bne.n	800cc7e <_dtoa_r+0x626>
 800cc34:	4baf      	ldr	r3, [pc, #700]	@ (800cef4 <_dtoa_r+0x89c>)
 800cc36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cc3a:	f7f3 fb5f 	bl	80002fc <__adddf3>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc46:	f7f3 ff9f 	bl	8000b88 <__aeabi_dcmpgt>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d163      	bne.n	800cd16 <_dtoa_r+0x6be>
 800cc4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc52:	49a8      	ldr	r1, [pc, #672]	@ (800cef4 <_dtoa_r+0x89c>)
 800cc54:	2000      	movs	r0, #0
 800cc56:	f7f3 fb4f 	bl	80002f8 <__aeabi_dsub>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc62:	f7f3 ff73 	bl	8000b4c <__aeabi_dcmplt>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	f43f af14 	beq.w	800ca94 <_dtoa_r+0x43c>
 800cc6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cc6e:	1e73      	subs	r3, r6, #1
 800cc70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc76:	2b30      	cmp	r3, #48	@ 0x30
 800cc78:	d0f8      	beq.n	800cc6c <_dtoa_r+0x614>
 800cc7a:	4647      	mov	r7, r8
 800cc7c:	e03b      	b.n	800ccf6 <_dtoa_r+0x69e>
 800cc7e:	4b9e      	ldr	r3, [pc, #632]	@ (800cef8 <_dtoa_r+0x8a0>)
 800cc80:	f7f3 fcf2 	bl	8000668 <__aeabi_dmul>
 800cc84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc88:	e7bc      	b.n	800cc04 <_dtoa_r+0x5ac>
 800cc8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cc8e:	4656      	mov	r6, sl
 800cc90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc94:	4620      	mov	r0, r4
 800cc96:	4629      	mov	r1, r5
 800cc98:	f7f3 fe10 	bl	80008bc <__aeabi_ddiv>
 800cc9c:	f7f3 ff94 	bl	8000bc8 <__aeabi_d2iz>
 800cca0:	4680      	mov	r8, r0
 800cca2:	f7f3 fc77 	bl	8000594 <__aeabi_i2d>
 800cca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccaa:	f7f3 fcdd 	bl	8000668 <__aeabi_dmul>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ccba:	f7f3 fb1d 	bl	80002f8 <__aeabi_dsub>
 800ccbe:	f806 4b01 	strb.w	r4, [r6], #1
 800ccc2:	9d03      	ldr	r5, [sp, #12]
 800ccc4:	eba6 040a 	sub.w	r4, r6, sl
 800ccc8:	42a5      	cmp	r5, r4
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	d133      	bne.n	800cd38 <_dtoa_r+0x6e0>
 800ccd0:	f7f3 fb14 	bl	80002fc <__adddf3>
 800ccd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccd8:	4604      	mov	r4, r0
 800ccda:	460d      	mov	r5, r1
 800ccdc:	f7f3 ff54 	bl	8000b88 <__aeabi_dcmpgt>
 800cce0:	b9c0      	cbnz	r0, 800cd14 <_dtoa_r+0x6bc>
 800cce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cce6:	4620      	mov	r0, r4
 800cce8:	4629      	mov	r1, r5
 800ccea:	f7f3 ff25 	bl	8000b38 <__aeabi_dcmpeq>
 800ccee:	b110      	cbz	r0, 800ccf6 <_dtoa_r+0x69e>
 800ccf0:	f018 0f01 	tst.w	r8, #1
 800ccf4:	d10e      	bne.n	800cd14 <_dtoa_r+0x6bc>
 800ccf6:	9902      	ldr	r1, [sp, #8]
 800ccf8:	4648      	mov	r0, r9
 800ccfa:	f000 fb07 	bl	800d30c <_Bfree>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	7033      	strb	r3, [r6, #0]
 800cd02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd04:	3701      	adds	r7, #1
 800cd06:	601f      	str	r7, [r3, #0]
 800cd08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f000 824b 	beq.w	800d1a6 <_dtoa_r+0xb4e>
 800cd10:	601e      	str	r6, [r3, #0]
 800cd12:	e248      	b.n	800d1a6 <_dtoa_r+0xb4e>
 800cd14:	46b8      	mov	r8, r7
 800cd16:	4633      	mov	r3, r6
 800cd18:	461e      	mov	r6, r3
 800cd1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd1e:	2a39      	cmp	r2, #57	@ 0x39
 800cd20:	d106      	bne.n	800cd30 <_dtoa_r+0x6d8>
 800cd22:	459a      	cmp	sl, r3
 800cd24:	d1f8      	bne.n	800cd18 <_dtoa_r+0x6c0>
 800cd26:	2230      	movs	r2, #48	@ 0x30
 800cd28:	f108 0801 	add.w	r8, r8, #1
 800cd2c:	f88a 2000 	strb.w	r2, [sl]
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	3201      	adds	r2, #1
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	e7a0      	b.n	800cc7a <_dtoa_r+0x622>
 800cd38:	4b6f      	ldr	r3, [pc, #444]	@ (800cef8 <_dtoa_r+0x8a0>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f7f3 fc94 	bl	8000668 <__aeabi_dmul>
 800cd40:	2200      	movs	r2, #0
 800cd42:	2300      	movs	r3, #0
 800cd44:	4604      	mov	r4, r0
 800cd46:	460d      	mov	r5, r1
 800cd48:	f7f3 fef6 	bl	8000b38 <__aeabi_dcmpeq>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d09f      	beq.n	800cc90 <_dtoa_r+0x638>
 800cd50:	e7d1      	b.n	800ccf6 <_dtoa_r+0x69e>
 800cd52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	f000 80ea 	beq.w	800cf2e <_dtoa_r+0x8d6>
 800cd5a:	9a07      	ldr	r2, [sp, #28]
 800cd5c:	2a01      	cmp	r2, #1
 800cd5e:	f300 80cd 	bgt.w	800cefc <_dtoa_r+0x8a4>
 800cd62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cd64:	2a00      	cmp	r2, #0
 800cd66:	f000 80c1 	beq.w	800ceec <_dtoa_r+0x894>
 800cd6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cd6e:	9c08      	ldr	r4, [sp, #32]
 800cd70:	9e00      	ldr	r6, [sp, #0]
 800cd72:	9a00      	ldr	r2, [sp, #0]
 800cd74:	441a      	add	r2, r3
 800cd76:	9200      	str	r2, [sp, #0]
 800cd78:	9a06      	ldr	r2, [sp, #24]
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	441a      	add	r2, r3
 800cd7e:	4648      	mov	r0, r9
 800cd80:	9206      	str	r2, [sp, #24]
 800cd82:	f000 fb77 	bl	800d474 <__i2b>
 800cd86:	4605      	mov	r5, r0
 800cd88:	b166      	cbz	r6, 800cda4 <_dtoa_r+0x74c>
 800cd8a:	9b06      	ldr	r3, [sp, #24]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	dd09      	ble.n	800cda4 <_dtoa_r+0x74c>
 800cd90:	42b3      	cmp	r3, r6
 800cd92:	9a00      	ldr	r2, [sp, #0]
 800cd94:	bfa8      	it	ge
 800cd96:	4633      	movge	r3, r6
 800cd98:	1ad2      	subs	r2, r2, r3
 800cd9a:	9200      	str	r2, [sp, #0]
 800cd9c:	9a06      	ldr	r2, [sp, #24]
 800cd9e:	1af6      	subs	r6, r6, r3
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	9306      	str	r3, [sp, #24]
 800cda4:	9b08      	ldr	r3, [sp, #32]
 800cda6:	b30b      	cbz	r3, 800cdec <_dtoa_r+0x794>
 800cda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 80c6 	beq.w	800cf3c <_dtoa_r+0x8e4>
 800cdb0:	2c00      	cmp	r4, #0
 800cdb2:	f000 80c0 	beq.w	800cf36 <_dtoa_r+0x8de>
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	4622      	mov	r2, r4
 800cdba:	4648      	mov	r0, r9
 800cdbc:	f000 fc12 	bl	800d5e4 <__pow5mult>
 800cdc0:	9a02      	ldr	r2, [sp, #8]
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	4648      	mov	r0, r9
 800cdc8:	f000 fb6a 	bl	800d4a0 <__multiply>
 800cdcc:	9902      	ldr	r1, [sp, #8]
 800cdce:	4680      	mov	r8, r0
 800cdd0:	4648      	mov	r0, r9
 800cdd2:	f000 fa9b 	bl	800d30c <_Bfree>
 800cdd6:	9b08      	ldr	r3, [sp, #32]
 800cdd8:	1b1b      	subs	r3, r3, r4
 800cdda:	9308      	str	r3, [sp, #32]
 800cddc:	f000 80b1 	beq.w	800cf42 <_dtoa_r+0x8ea>
 800cde0:	9a08      	ldr	r2, [sp, #32]
 800cde2:	4641      	mov	r1, r8
 800cde4:	4648      	mov	r0, r9
 800cde6:	f000 fbfd 	bl	800d5e4 <__pow5mult>
 800cdea:	9002      	str	r0, [sp, #8]
 800cdec:	2101      	movs	r1, #1
 800cdee:	4648      	mov	r0, r9
 800cdf0:	f000 fb40 	bl	800d474 <__i2b>
 800cdf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 81d8 	beq.w	800d1ae <_dtoa_r+0xb56>
 800cdfe:	461a      	mov	r2, r3
 800ce00:	4601      	mov	r1, r0
 800ce02:	4648      	mov	r0, r9
 800ce04:	f000 fbee 	bl	800d5e4 <__pow5mult>
 800ce08:	9b07      	ldr	r3, [sp, #28]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	f300 809f 	bgt.w	800cf50 <_dtoa_r+0x8f8>
 800ce12:	9b04      	ldr	r3, [sp, #16]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f040 8097 	bne.w	800cf48 <_dtoa_r+0x8f0>
 800ce1a:	9b05      	ldr	r3, [sp, #20]
 800ce1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f040 8093 	bne.w	800cf4c <_dtoa_r+0x8f4>
 800ce26:	9b05      	ldr	r3, [sp, #20]
 800ce28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce2c:	0d1b      	lsrs	r3, r3, #20
 800ce2e:	051b      	lsls	r3, r3, #20
 800ce30:	b133      	cbz	r3, 800ce40 <_dtoa_r+0x7e8>
 800ce32:	9b00      	ldr	r3, [sp, #0]
 800ce34:	3301      	adds	r3, #1
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	9b06      	ldr	r3, [sp, #24]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	9306      	str	r3, [sp, #24]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	9308      	str	r3, [sp, #32]
 800ce42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 81b8 	beq.w	800d1ba <_dtoa_r+0xb62>
 800ce4a:	6923      	ldr	r3, [r4, #16]
 800ce4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce50:	6918      	ldr	r0, [r3, #16]
 800ce52:	f000 fac3 	bl	800d3dc <__hi0bits>
 800ce56:	f1c0 0020 	rsb	r0, r0, #32
 800ce5a:	9b06      	ldr	r3, [sp, #24]
 800ce5c:	4418      	add	r0, r3
 800ce5e:	f010 001f 	ands.w	r0, r0, #31
 800ce62:	f000 8082 	beq.w	800cf6a <_dtoa_r+0x912>
 800ce66:	f1c0 0320 	rsb	r3, r0, #32
 800ce6a:	2b04      	cmp	r3, #4
 800ce6c:	dd73      	ble.n	800cf56 <_dtoa_r+0x8fe>
 800ce6e:	9b00      	ldr	r3, [sp, #0]
 800ce70:	f1c0 001c 	rsb	r0, r0, #28
 800ce74:	4403      	add	r3, r0
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	9b06      	ldr	r3, [sp, #24]
 800ce7a:	4403      	add	r3, r0
 800ce7c:	4406      	add	r6, r0
 800ce7e:	9306      	str	r3, [sp, #24]
 800ce80:	9b00      	ldr	r3, [sp, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	dd05      	ble.n	800ce92 <_dtoa_r+0x83a>
 800ce86:	9902      	ldr	r1, [sp, #8]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4648      	mov	r0, r9
 800ce8c:	f000 fc04 	bl	800d698 <__lshift>
 800ce90:	9002      	str	r0, [sp, #8]
 800ce92:	9b06      	ldr	r3, [sp, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd05      	ble.n	800cea4 <_dtoa_r+0x84c>
 800ce98:	4621      	mov	r1, r4
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	4648      	mov	r0, r9
 800ce9e:	f000 fbfb 	bl	800d698 <__lshift>
 800cea2:	4604      	mov	r4, r0
 800cea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d061      	beq.n	800cf6e <_dtoa_r+0x916>
 800ceaa:	9802      	ldr	r0, [sp, #8]
 800ceac:	4621      	mov	r1, r4
 800ceae:	f000 fc5f 	bl	800d770 <__mcmp>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	da5b      	bge.n	800cf6e <_dtoa_r+0x916>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	9902      	ldr	r1, [sp, #8]
 800ceba:	220a      	movs	r2, #10
 800cebc:	4648      	mov	r0, r9
 800cebe:	f000 fa47 	bl	800d350 <__multadd>
 800cec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec4:	9002      	str	r0, [sp, #8]
 800cec6:	f107 38ff 	add.w	r8, r7, #4294967295
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 8177 	beq.w	800d1be <_dtoa_r+0xb66>
 800ced0:	4629      	mov	r1, r5
 800ced2:	2300      	movs	r3, #0
 800ced4:	220a      	movs	r2, #10
 800ced6:	4648      	mov	r0, r9
 800ced8:	f000 fa3a 	bl	800d350 <__multadd>
 800cedc:	f1bb 0f00 	cmp.w	fp, #0
 800cee0:	4605      	mov	r5, r0
 800cee2:	dc6f      	bgt.n	800cfc4 <_dtoa_r+0x96c>
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	dc49      	bgt.n	800cf7e <_dtoa_r+0x926>
 800ceea:	e06b      	b.n	800cfc4 <_dtoa_r+0x96c>
 800ceec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ceee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cef2:	e73c      	b.n	800cd6e <_dtoa_r+0x716>
 800cef4:	3fe00000 	.word	0x3fe00000
 800cef8:	40240000 	.word	0x40240000
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	1e5c      	subs	r4, r3, #1
 800cf00:	9b08      	ldr	r3, [sp, #32]
 800cf02:	42a3      	cmp	r3, r4
 800cf04:	db09      	blt.n	800cf1a <_dtoa_r+0x8c2>
 800cf06:	1b1c      	subs	r4, r3, r4
 800cf08:	9b03      	ldr	r3, [sp, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f6bf af30 	bge.w	800cd70 <_dtoa_r+0x718>
 800cf10:	9b00      	ldr	r3, [sp, #0]
 800cf12:	9a03      	ldr	r2, [sp, #12]
 800cf14:	1a9e      	subs	r6, r3, r2
 800cf16:	2300      	movs	r3, #0
 800cf18:	e72b      	b.n	800cd72 <_dtoa_r+0x71a>
 800cf1a:	9b08      	ldr	r3, [sp, #32]
 800cf1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf1e:	9408      	str	r4, [sp, #32]
 800cf20:	1ae3      	subs	r3, r4, r3
 800cf22:	441a      	add	r2, r3
 800cf24:	9e00      	ldr	r6, [sp, #0]
 800cf26:	9b03      	ldr	r3, [sp, #12]
 800cf28:	920d      	str	r2, [sp, #52]	@ 0x34
 800cf2a:	2400      	movs	r4, #0
 800cf2c:	e721      	b.n	800cd72 <_dtoa_r+0x71a>
 800cf2e:	9c08      	ldr	r4, [sp, #32]
 800cf30:	9e00      	ldr	r6, [sp, #0]
 800cf32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cf34:	e728      	b.n	800cd88 <_dtoa_r+0x730>
 800cf36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cf3a:	e751      	b.n	800cde0 <_dtoa_r+0x788>
 800cf3c:	9a08      	ldr	r2, [sp, #32]
 800cf3e:	9902      	ldr	r1, [sp, #8]
 800cf40:	e750      	b.n	800cde4 <_dtoa_r+0x78c>
 800cf42:	f8cd 8008 	str.w	r8, [sp, #8]
 800cf46:	e751      	b.n	800cdec <_dtoa_r+0x794>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	e779      	b.n	800ce40 <_dtoa_r+0x7e8>
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	e777      	b.n	800ce40 <_dtoa_r+0x7e8>
 800cf50:	2300      	movs	r3, #0
 800cf52:	9308      	str	r3, [sp, #32]
 800cf54:	e779      	b.n	800ce4a <_dtoa_r+0x7f2>
 800cf56:	d093      	beq.n	800ce80 <_dtoa_r+0x828>
 800cf58:	9a00      	ldr	r2, [sp, #0]
 800cf5a:	331c      	adds	r3, #28
 800cf5c:	441a      	add	r2, r3
 800cf5e:	9200      	str	r2, [sp, #0]
 800cf60:	9a06      	ldr	r2, [sp, #24]
 800cf62:	441a      	add	r2, r3
 800cf64:	441e      	add	r6, r3
 800cf66:	9206      	str	r2, [sp, #24]
 800cf68:	e78a      	b.n	800ce80 <_dtoa_r+0x828>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	e7f4      	b.n	800cf58 <_dtoa_r+0x900>
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	46b8      	mov	r8, r7
 800cf74:	dc20      	bgt.n	800cfb8 <_dtoa_r+0x960>
 800cf76:	469b      	mov	fp, r3
 800cf78:	9b07      	ldr	r3, [sp, #28]
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	dd1e      	ble.n	800cfbc <_dtoa_r+0x964>
 800cf7e:	f1bb 0f00 	cmp.w	fp, #0
 800cf82:	f47f adb1 	bne.w	800cae8 <_dtoa_r+0x490>
 800cf86:	4621      	mov	r1, r4
 800cf88:	465b      	mov	r3, fp
 800cf8a:	2205      	movs	r2, #5
 800cf8c:	4648      	mov	r0, r9
 800cf8e:	f000 f9df 	bl	800d350 <__multadd>
 800cf92:	4601      	mov	r1, r0
 800cf94:	4604      	mov	r4, r0
 800cf96:	9802      	ldr	r0, [sp, #8]
 800cf98:	f000 fbea 	bl	800d770 <__mcmp>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	f77f ada3 	ble.w	800cae8 <_dtoa_r+0x490>
 800cfa2:	4656      	mov	r6, sl
 800cfa4:	2331      	movs	r3, #49	@ 0x31
 800cfa6:	f806 3b01 	strb.w	r3, [r6], #1
 800cfaa:	f108 0801 	add.w	r8, r8, #1
 800cfae:	e59f      	b.n	800caf0 <_dtoa_r+0x498>
 800cfb0:	9c03      	ldr	r4, [sp, #12]
 800cfb2:	46b8      	mov	r8, r7
 800cfb4:	4625      	mov	r5, r4
 800cfb6:	e7f4      	b.n	800cfa2 <_dtoa_r+0x94a>
 800cfb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cfbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f000 8101 	beq.w	800d1c6 <_dtoa_r+0xb6e>
 800cfc4:	2e00      	cmp	r6, #0
 800cfc6:	dd05      	ble.n	800cfd4 <_dtoa_r+0x97c>
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4632      	mov	r2, r6
 800cfcc:	4648      	mov	r0, r9
 800cfce:	f000 fb63 	bl	800d698 <__lshift>
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	9b08      	ldr	r3, [sp, #32]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d05c      	beq.n	800d094 <_dtoa_r+0xa3c>
 800cfda:	6869      	ldr	r1, [r5, #4]
 800cfdc:	4648      	mov	r0, r9
 800cfde:	f000 f955 	bl	800d28c <_Balloc>
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	b928      	cbnz	r0, 800cff2 <_dtoa_r+0x99a>
 800cfe6:	4b82      	ldr	r3, [pc, #520]	@ (800d1f0 <_dtoa_r+0xb98>)
 800cfe8:	4602      	mov	r2, r0
 800cfea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cfee:	f7ff bb4a 	b.w	800c686 <_dtoa_r+0x2e>
 800cff2:	692a      	ldr	r2, [r5, #16]
 800cff4:	3202      	adds	r2, #2
 800cff6:	0092      	lsls	r2, r2, #2
 800cff8:	f105 010c 	add.w	r1, r5, #12
 800cffc:	300c      	adds	r0, #12
 800cffe:	f001 f8a3 	bl	800e148 <memcpy>
 800d002:	2201      	movs	r2, #1
 800d004:	4631      	mov	r1, r6
 800d006:	4648      	mov	r0, r9
 800d008:	f000 fb46 	bl	800d698 <__lshift>
 800d00c:	f10a 0301 	add.w	r3, sl, #1
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	eb0a 030b 	add.w	r3, sl, fp
 800d016:	9308      	str	r3, [sp, #32]
 800d018:	9b04      	ldr	r3, [sp, #16]
 800d01a:	f003 0301 	and.w	r3, r3, #1
 800d01e:	462f      	mov	r7, r5
 800d020:	9306      	str	r3, [sp, #24]
 800d022:	4605      	mov	r5, r0
 800d024:	9b00      	ldr	r3, [sp, #0]
 800d026:	9802      	ldr	r0, [sp, #8]
 800d028:	4621      	mov	r1, r4
 800d02a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d02e:	f7ff fa8a 	bl	800c546 <quorem>
 800d032:	4603      	mov	r3, r0
 800d034:	3330      	adds	r3, #48	@ 0x30
 800d036:	9003      	str	r0, [sp, #12]
 800d038:	4639      	mov	r1, r7
 800d03a:	9802      	ldr	r0, [sp, #8]
 800d03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d03e:	f000 fb97 	bl	800d770 <__mcmp>
 800d042:	462a      	mov	r2, r5
 800d044:	9004      	str	r0, [sp, #16]
 800d046:	4621      	mov	r1, r4
 800d048:	4648      	mov	r0, r9
 800d04a:	f000 fbad 	bl	800d7a8 <__mdiff>
 800d04e:	68c2      	ldr	r2, [r0, #12]
 800d050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d052:	4606      	mov	r6, r0
 800d054:	bb02      	cbnz	r2, 800d098 <_dtoa_r+0xa40>
 800d056:	4601      	mov	r1, r0
 800d058:	9802      	ldr	r0, [sp, #8]
 800d05a:	f000 fb89 	bl	800d770 <__mcmp>
 800d05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d060:	4602      	mov	r2, r0
 800d062:	4631      	mov	r1, r6
 800d064:	4648      	mov	r0, r9
 800d066:	920c      	str	r2, [sp, #48]	@ 0x30
 800d068:	9309      	str	r3, [sp, #36]	@ 0x24
 800d06a:	f000 f94f 	bl	800d30c <_Bfree>
 800d06e:	9b07      	ldr	r3, [sp, #28]
 800d070:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d072:	9e00      	ldr	r6, [sp, #0]
 800d074:	ea42 0103 	orr.w	r1, r2, r3
 800d078:	9b06      	ldr	r3, [sp, #24]
 800d07a:	4319      	orrs	r1, r3
 800d07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d07e:	d10d      	bne.n	800d09c <_dtoa_r+0xa44>
 800d080:	2b39      	cmp	r3, #57	@ 0x39
 800d082:	d027      	beq.n	800d0d4 <_dtoa_r+0xa7c>
 800d084:	9a04      	ldr	r2, [sp, #16]
 800d086:	2a00      	cmp	r2, #0
 800d088:	dd01      	ble.n	800d08e <_dtoa_r+0xa36>
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	3331      	adds	r3, #49	@ 0x31
 800d08e:	f88b 3000 	strb.w	r3, [fp]
 800d092:	e52e      	b.n	800caf2 <_dtoa_r+0x49a>
 800d094:	4628      	mov	r0, r5
 800d096:	e7b9      	b.n	800d00c <_dtoa_r+0x9b4>
 800d098:	2201      	movs	r2, #1
 800d09a:	e7e2      	b.n	800d062 <_dtoa_r+0xa0a>
 800d09c:	9904      	ldr	r1, [sp, #16]
 800d09e:	2900      	cmp	r1, #0
 800d0a0:	db04      	blt.n	800d0ac <_dtoa_r+0xa54>
 800d0a2:	9807      	ldr	r0, [sp, #28]
 800d0a4:	4301      	orrs	r1, r0
 800d0a6:	9806      	ldr	r0, [sp, #24]
 800d0a8:	4301      	orrs	r1, r0
 800d0aa:	d120      	bne.n	800d0ee <_dtoa_r+0xa96>
 800d0ac:	2a00      	cmp	r2, #0
 800d0ae:	ddee      	ble.n	800d08e <_dtoa_r+0xa36>
 800d0b0:	9902      	ldr	r1, [sp, #8]
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	4648      	mov	r0, r9
 800d0b8:	f000 faee 	bl	800d698 <__lshift>
 800d0bc:	4621      	mov	r1, r4
 800d0be:	9002      	str	r0, [sp, #8]
 800d0c0:	f000 fb56 	bl	800d770 <__mcmp>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	9b00      	ldr	r3, [sp, #0]
 800d0c8:	dc02      	bgt.n	800d0d0 <_dtoa_r+0xa78>
 800d0ca:	d1e0      	bne.n	800d08e <_dtoa_r+0xa36>
 800d0cc:	07da      	lsls	r2, r3, #31
 800d0ce:	d5de      	bpl.n	800d08e <_dtoa_r+0xa36>
 800d0d0:	2b39      	cmp	r3, #57	@ 0x39
 800d0d2:	d1da      	bne.n	800d08a <_dtoa_r+0xa32>
 800d0d4:	2339      	movs	r3, #57	@ 0x39
 800d0d6:	f88b 3000 	strb.w	r3, [fp]
 800d0da:	4633      	mov	r3, r6
 800d0dc:	461e      	mov	r6, r3
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d0e4:	2a39      	cmp	r2, #57	@ 0x39
 800d0e6:	d04e      	beq.n	800d186 <_dtoa_r+0xb2e>
 800d0e8:	3201      	adds	r2, #1
 800d0ea:	701a      	strb	r2, [r3, #0]
 800d0ec:	e501      	b.n	800caf2 <_dtoa_r+0x49a>
 800d0ee:	2a00      	cmp	r2, #0
 800d0f0:	dd03      	ble.n	800d0fa <_dtoa_r+0xaa2>
 800d0f2:	2b39      	cmp	r3, #57	@ 0x39
 800d0f4:	d0ee      	beq.n	800d0d4 <_dtoa_r+0xa7c>
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	e7c9      	b.n	800d08e <_dtoa_r+0xa36>
 800d0fa:	9a00      	ldr	r2, [sp, #0]
 800d0fc:	9908      	ldr	r1, [sp, #32]
 800d0fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d102:	428a      	cmp	r2, r1
 800d104:	d028      	beq.n	800d158 <_dtoa_r+0xb00>
 800d106:	9902      	ldr	r1, [sp, #8]
 800d108:	2300      	movs	r3, #0
 800d10a:	220a      	movs	r2, #10
 800d10c:	4648      	mov	r0, r9
 800d10e:	f000 f91f 	bl	800d350 <__multadd>
 800d112:	42af      	cmp	r7, r5
 800d114:	9002      	str	r0, [sp, #8]
 800d116:	f04f 0300 	mov.w	r3, #0
 800d11a:	f04f 020a 	mov.w	r2, #10
 800d11e:	4639      	mov	r1, r7
 800d120:	4648      	mov	r0, r9
 800d122:	d107      	bne.n	800d134 <_dtoa_r+0xadc>
 800d124:	f000 f914 	bl	800d350 <__multadd>
 800d128:	4607      	mov	r7, r0
 800d12a:	4605      	mov	r5, r0
 800d12c:	9b00      	ldr	r3, [sp, #0]
 800d12e:	3301      	adds	r3, #1
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	e777      	b.n	800d024 <_dtoa_r+0x9cc>
 800d134:	f000 f90c 	bl	800d350 <__multadd>
 800d138:	4629      	mov	r1, r5
 800d13a:	4607      	mov	r7, r0
 800d13c:	2300      	movs	r3, #0
 800d13e:	220a      	movs	r2, #10
 800d140:	4648      	mov	r0, r9
 800d142:	f000 f905 	bl	800d350 <__multadd>
 800d146:	4605      	mov	r5, r0
 800d148:	e7f0      	b.n	800d12c <_dtoa_r+0xad4>
 800d14a:	f1bb 0f00 	cmp.w	fp, #0
 800d14e:	bfcc      	ite	gt
 800d150:	465e      	movgt	r6, fp
 800d152:	2601      	movle	r6, #1
 800d154:	4456      	add	r6, sl
 800d156:	2700      	movs	r7, #0
 800d158:	9902      	ldr	r1, [sp, #8]
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	2201      	movs	r2, #1
 800d15e:	4648      	mov	r0, r9
 800d160:	f000 fa9a 	bl	800d698 <__lshift>
 800d164:	4621      	mov	r1, r4
 800d166:	9002      	str	r0, [sp, #8]
 800d168:	f000 fb02 	bl	800d770 <__mcmp>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	dcb4      	bgt.n	800d0da <_dtoa_r+0xa82>
 800d170:	d102      	bne.n	800d178 <_dtoa_r+0xb20>
 800d172:	9b00      	ldr	r3, [sp, #0]
 800d174:	07db      	lsls	r3, r3, #31
 800d176:	d4b0      	bmi.n	800d0da <_dtoa_r+0xa82>
 800d178:	4633      	mov	r3, r6
 800d17a:	461e      	mov	r6, r3
 800d17c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d180:	2a30      	cmp	r2, #48	@ 0x30
 800d182:	d0fa      	beq.n	800d17a <_dtoa_r+0xb22>
 800d184:	e4b5      	b.n	800caf2 <_dtoa_r+0x49a>
 800d186:	459a      	cmp	sl, r3
 800d188:	d1a8      	bne.n	800d0dc <_dtoa_r+0xa84>
 800d18a:	2331      	movs	r3, #49	@ 0x31
 800d18c:	f108 0801 	add.w	r8, r8, #1
 800d190:	f88a 3000 	strb.w	r3, [sl]
 800d194:	e4ad      	b.n	800caf2 <_dtoa_r+0x49a>
 800d196:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d198:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d1f4 <_dtoa_r+0xb9c>
 800d19c:	b11b      	cbz	r3, 800d1a6 <_dtoa_r+0xb4e>
 800d19e:	f10a 0308 	add.w	r3, sl, #8
 800d1a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d1a4:	6013      	str	r3, [r2, #0]
 800d1a6:	4650      	mov	r0, sl
 800d1a8:	b017      	add	sp, #92	@ 0x5c
 800d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ae:	9b07      	ldr	r3, [sp, #28]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	f77f ae2e 	ble.w	800ce12 <_dtoa_r+0x7ba>
 800d1b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1b8:	9308      	str	r3, [sp, #32]
 800d1ba:	2001      	movs	r0, #1
 800d1bc:	e64d      	b.n	800ce5a <_dtoa_r+0x802>
 800d1be:	f1bb 0f00 	cmp.w	fp, #0
 800d1c2:	f77f aed9 	ble.w	800cf78 <_dtoa_r+0x920>
 800d1c6:	4656      	mov	r6, sl
 800d1c8:	9802      	ldr	r0, [sp, #8]
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	f7ff f9bb 	bl	800c546 <quorem>
 800d1d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d1d4:	f806 3b01 	strb.w	r3, [r6], #1
 800d1d8:	eba6 020a 	sub.w	r2, r6, sl
 800d1dc:	4593      	cmp	fp, r2
 800d1de:	ddb4      	ble.n	800d14a <_dtoa_r+0xaf2>
 800d1e0:	9902      	ldr	r1, [sp, #8]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	220a      	movs	r2, #10
 800d1e6:	4648      	mov	r0, r9
 800d1e8:	f000 f8b2 	bl	800d350 <__multadd>
 800d1ec:	9002      	str	r0, [sp, #8]
 800d1ee:	e7eb      	b.n	800d1c8 <_dtoa_r+0xb70>
 800d1f0:	0800f7ec 	.word	0x0800f7ec
 800d1f4:	0800f770 	.word	0x0800f770

0800d1f8 <_free_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	2900      	cmp	r1, #0
 800d1fe:	d041      	beq.n	800d284 <_free_r+0x8c>
 800d200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d204:	1f0c      	subs	r4, r1, #4
 800d206:	2b00      	cmp	r3, #0
 800d208:	bfb8      	it	lt
 800d20a:	18e4      	addlt	r4, r4, r3
 800d20c:	f7fe fa58 	bl	800b6c0 <__malloc_lock>
 800d210:	4a1d      	ldr	r2, [pc, #116]	@ (800d288 <_free_r+0x90>)
 800d212:	6813      	ldr	r3, [r2, #0]
 800d214:	b933      	cbnz	r3, 800d224 <_free_r+0x2c>
 800d216:	6063      	str	r3, [r4, #4]
 800d218:	6014      	str	r4, [r2, #0]
 800d21a:	4628      	mov	r0, r5
 800d21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d220:	f7fe ba54 	b.w	800b6cc <__malloc_unlock>
 800d224:	42a3      	cmp	r3, r4
 800d226:	d908      	bls.n	800d23a <_free_r+0x42>
 800d228:	6820      	ldr	r0, [r4, #0]
 800d22a:	1821      	adds	r1, r4, r0
 800d22c:	428b      	cmp	r3, r1
 800d22e:	bf01      	itttt	eq
 800d230:	6819      	ldreq	r1, [r3, #0]
 800d232:	685b      	ldreq	r3, [r3, #4]
 800d234:	1809      	addeq	r1, r1, r0
 800d236:	6021      	streq	r1, [r4, #0]
 800d238:	e7ed      	b.n	800d216 <_free_r+0x1e>
 800d23a:	461a      	mov	r2, r3
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	b10b      	cbz	r3, 800d244 <_free_r+0x4c>
 800d240:	42a3      	cmp	r3, r4
 800d242:	d9fa      	bls.n	800d23a <_free_r+0x42>
 800d244:	6811      	ldr	r1, [r2, #0]
 800d246:	1850      	adds	r0, r2, r1
 800d248:	42a0      	cmp	r0, r4
 800d24a:	d10b      	bne.n	800d264 <_free_r+0x6c>
 800d24c:	6820      	ldr	r0, [r4, #0]
 800d24e:	4401      	add	r1, r0
 800d250:	1850      	adds	r0, r2, r1
 800d252:	4283      	cmp	r3, r0
 800d254:	6011      	str	r1, [r2, #0]
 800d256:	d1e0      	bne.n	800d21a <_free_r+0x22>
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	6053      	str	r3, [r2, #4]
 800d25e:	4408      	add	r0, r1
 800d260:	6010      	str	r0, [r2, #0]
 800d262:	e7da      	b.n	800d21a <_free_r+0x22>
 800d264:	d902      	bls.n	800d26c <_free_r+0x74>
 800d266:	230c      	movs	r3, #12
 800d268:	602b      	str	r3, [r5, #0]
 800d26a:	e7d6      	b.n	800d21a <_free_r+0x22>
 800d26c:	6820      	ldr	r0, [r4, #0]
 800d26e:	1821      	adds	r1, r4, r0
 800d270:	428b      	cmp	r3, r1
 800d272:	bf04      	itt	eq
 800d274:	6819      	ldreq	r1, [r3, #0]
 800d276:	685b      	ldreq	r3, [r3, #4]
 800d278:	6063      	str	r3, [r4, #4]
 800d27a:	bf04      	itt	eq
 800d27c:	1809      	addeq	r1, r1, r0
 800d27e:	6021      	streq	r1, [r4, #0]
 800d280:	6054      	str	r4, [r2, #4]
 800d282:	e7ca      	b.n	800d21a <_free_r+0x22>
 800d284:	bd38      	pop	{r3, r4, r5, pc}
 800d286:	bf00      	nop
 800d288:	2000251c 	.word	0x2000251c

0800d28c <_Balloc>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	69c6      	ldr	r6, [r0, #28]
 800d290:	4604      	mov	r4, r0
 800d292:	460d      	mov	r5, r1
 800d294:	b976      	cbnz	r6, 800d2b4 <_Balloc+0x28>
 800d296:	2010      	movs	r0, #16
 800d298:	f7fe f960 	bl	800b55c <malloc>
 800d29c:	4602      	mov	r2, r0
 800d29e:	61e0      	str	r0, [r4, #28]
 800d2a0:	b920      	cbnz	r0, 800d2ac <_Balloc+0x20>
 800d2a2:	4b18      	ldr	r3, [pc, #96]	@ (800d304 <_Balloc+0x78>)
 800d2a4:	4818      	ldr	r0, [pc, #96]	@ (800d308 <_Balloc+0x7c>)
 800d2a6:	216b      	movs	r1, #107	@ 0x6b
 800d2a8:	f000 ff5c 	bl	800e164 <__assert_func>
 800d2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2b0:	6006      	str	r6, [r0, #0]
 800d2b2:	60c6      	str	r6, [r0, #12]
 800d2b4:	69e6      	ldr	r6, [r4, #28]
 800d2b6:	68f3      	ldr	r3, [r6, #12]
 800d2b8:	b183      	cbz	r3, 800d2dc <_Balloc+0x50>
 800d2ba:	69e3      	ldr	r3, [r4, #28]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2c2:	b9b8      	cbnz	r0, 800d2f4 <_Balloc+0x68>
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d2ca:	1d72      	adds	r2, r6, #5
 800d2cc:	0092      	lsls	r2, r2, #2
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 ff66 	bl	800e1a0 <_calloc_r>
 800d2d4:	b160      	cbz	r0, 800d2f0 <_Balloc+0x64>
 800d2d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2da:	e00e      	b.n	800d2fa <_Balloc+0x6e>
 800d2dc:	2221      	movs	r2, #33	@ 0x21
 800d2de:	2104      	movs	r1, #4
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f000 ff5d 	bl	800e1a0 <_calloc_r>
 800d2e6:	69e3      	ldr	r3, [r4, #28]
 800d2e8:	60f0      	str	r0, [r6, #12]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1e4      	bne.n	800d2ba <_Balloc+0x2e>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	6802      	ldr	r2, [r0, #0]
 800d2f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d300:	e7f7      	b.n	800d2f2 <_Balloc+0x66>
 800d302:	bf00      	nop
 800d304:	0800f77d 	.word	0x0800f77d
 800d308:	0800f7fd 	.word	0x0800f7fd

0800d30c <_Bfree>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	69c6      	ldr	r6, [r0, #28]
 800d310:	4605      	mov	r5, r0
 800d312:	460c      	mov	r4, r1
 800d314:	b976      	cbnz	r6, 800d334 <_Bfree+0x28>
 800d316:	2010      	movs	r0, #16
 800d318:	f7fe f920 	bl	800b55c <malloc>
 800d31c:	4602      	mov	r2, r0
 800d31e:	61e8      	str	r0, [r5, #28]
 800d320:	b920      	cbnz	r0, 800d32c <_Bfree+0x20>
 800d322:	4b09      	ldr	r3, [pc, #36]	@ (800d348 <_Bfree+0x3c>)
 800d324:	4809      	ldr	r0, [pc, #36]	@ (800d34c <_Bfree+0x40>)
 800d326:	218f      	movs	r1, #143	@ 0x8f
 800d328:	f000 ff1c 	bl	800e164 <__assert_func>
 800d32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d330:	6006      	str	r6, [r0, #0]
 800d332:	60c6      	str	r6, [r0, #12]
 800d334:	b13c      	cbz	r4, 800d346 <_Bfree+0x3a>
 800d336:	69eb      	ldr	r3, [r5, #28]
 800d338:	6862      	ldr	r2, [r4, #4]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d340:	6021      	str	r1, [r4, #0]
 800d342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	0800f77d 	.word	0x0800f77d
 800d34c:	0800f7fd 	.word	0x0800f7fd

0800d350 <__multadd>:
 800d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d354:	690d      	ldr	r5, [r1, #16]
 800d356:	4607      	mov	r7, r0
 800d358:	460c      	mov	r4, r1
 800d35a:	461e      	mov	r6, r3
 800d35c:	f101 0c14 	add.w	ip, r1, #20
 800d360:	2000      	movs	r0, #0
 800d362:	f8dc 3000 	ldr.w	r3, [ip]
 800d366:	b299      	uxth	r1, r3
 800d368:	fb02 6101 	mla	r1, r2, r1, r6
 800d36c:	0c1e      	lsrs	r6, r3, #16
 800d36e:	0c0b      	lsrs	r3, r1, #16
 800d370:	fb02 3306 	mla	r3, r2, r6, r3
 800d374:	b289      	uxth	r1, r1
 800d376:	3001      	adds	r0, #1
 800d378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d37c:	4285      	cmp	r5, r0
 800d37e:	f84c 1b04 	str.w	r1, [ip], #4
 800d382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d386:	dcec      	bgt.n	800d362 <__multadd+0x12>
 800d388:	b30e      	cbz	r6, 800d3ce <__multadd+0x7e>
 800d38a:	68a3      	ldr	r3, [r4, #8]
 800d38c:	42ab      	cmp	r3, r5
 800d38e:	dc19      	bgt.n	800d3c4 <__multadd+0x74>
 800d390:	6861      	ldr	r1, [r4, #4]
 800d392:	4638      	mov	r0, r7
 800d394:	3101      	adds	r1, #1
 800d396:	f7ff ff79 	bl	800d28c <_Balloc>
 800d39a:	4680      	mov	r8, r0
 800d39c:	b928      	cbnz	r0, 800d3aa <__multadd+0x5a>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d3d4 <__multadd+0x84>)
 800d3a2:	480d      	ldr	r0, [pc, #52]	@ (800d3d8 <__multadd+0x88>)
 800d3a4:	21ba      	movs	r1, #186	@ 0xba
 800d3a6:	f000 fedd 	bl	800e164 <__assert_func>
 800d3aa:	6922      	ldr	r2, [r4, #16]
 800d3ac:	3202      	adds	r2, #2
 800d3ae:	f104 010c 	add.w	r1, r4, #12
 800d3b2:	0092      	lsls	r2, r2, #2
 800d3b4:	300c      	adds	r0, #12
 800d3b6:	f000 fec7 	bl	800e148 <memcpy>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4638      	mov	r0, r7
 800d3be:	f7ff ffa5 	bl	800d30c <_Bfree>
 800d3c2:	4644      	mov	r4, r8
 800d3c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3c8:	3501      	adds	r5, #1
 800d3ca:	615e      	str	r6, [r3, #20]
 800d3cc:	6125      	str	r5, [r4, #16]
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d4:	0800f7ec 	.word	0x0800f7ec
 800d3d8:	0800f7fd 	.word	0x0800f7fd

0800d3dc <__hi0bits>:
 800d3dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	bf36      	itet	cc
 800d3e4:	0403      	lslcc	r3, r0, #16
 800d3e6:	2000      	movcs	r0, #0
 800d3e8:	2010      	movcc	r0, #16
 800d3ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d3ee:	bf3c      	itt	cc
 800d3f0:	021b      	lslcc	r3, r3, #8
 800d3f2:	3008      	addcc	r0, #8
 800d3f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3f8:	bf3c      	itt	cc
 800d3fa:	011b      	lslcc	r3, r3, #4
 800d3fc:	3004      	addcc	r0, #4
 800d3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d402:	bf3c      	itt	cc
 800d404:	009b      	lslcc	r3, r3, #2
 800d406:	3002      	addcc	r0, #2
 800d408:	2b00      	cmp	r3, #0
 800d40a:	db05      	blt.n	800d418 <__hi0bits+0x3c>
 800d40c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d410:	f100 0001 	add.w	r0, r0, #1
 800d414:	bf08      	it	eq
 800d416:	2020      	moveq	r0, #32
 800d418:	4770      	bx	lr

0800d41a <__lo0bits>:
 800d41a:	6803      	ldr	r3, [r0, #0]
 800d41c:	4602      	mov	r2, r0
 800d41e:	f013 0007 	ands.w	r0, r3, #7
 800d422:	d00b      	beq.n	800d43c <__lo0bits+0x22>
 800d424:	07d9      	lsls	r1, r3, #31
 800d426:	d421      	bmi.n	800d46c <__lo0bits+0x52>
 800d428:	0798      	lsls	r0, r3, #30
 800d42a:	bf49      	itett	mi
 800d42c:	085b      	lsrmi	r3, r3, #1
 800d42e:	089b      	lsrpl	r3, r3, #2
 800d430:	2001      	movmi	r0, #1
 800d432:	6013      	strmi	r3, [r2, #0]
 800d434:	bf5c      	itt	pl
 800d436:	6013      	strpl	r3, [r2, #0]
 800d438:	2002      	movpl	r0, #2
 800d43a:	4770      	bx	lr
 800d43c:	b299      	uxth	r1, r3
 800d43e:	b909      	cbnz	r1, 800d444 <__lo0bits+0x2a>
 800d440:	0c1b      	lsrs	r3, r3, #16
 800d442:	2010      	movs	r0, #16
 800d444:	b2d9      	uxtb	r1, r3
 800d446:	b909      	cbnz	r1, 800d44c <__lo0bits+0x32>
 800d448:	3008      	adds	r0, #8
 800d44a:	0a1b      	lsrs	r3, r3, #8
 800d44c:	0719      	lsls	r1, r3, #28
 800d44e:	bf04      	itt	eq
 800d450:	091b      	lsreq	r3, r3, #4
 800d452:	3004      	addeq	r0, #4
 800d454:	0799      	lsls	r1, r3, #30
 800d456:	bf04      	itt	eq
 800d458:	089b      	lsreq	r3, r3, #2
 800d45a:	3002      	addeq	r0, #2
 800d45c:	07d9      	lsls	r1, r3, #31
 800d45e:	d403      	bmi.n	800d468 <__lo0bits+0x4e>
 800d460:	085b      	lsrs	r3, r3, #1
 800d462:	f100 0001 	add.w	r0, r0, #1
 800d466:	d003      	beq.n	800d470 <__lo0bits+0x56>
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	4770      	bx	lr
 800d46c:	2000      	movs	r0, #0
 800d46e:	4770      	bx	lr
 800d470:	2020      	movs	r0, #32
 800d472:	4770      	bx	lr

0800d474 <__i2b>:
 800d474:	b510      	push	{r4, lr}
 800d476:	460c      	mov	r4, r1
 800d478:	2101      	movs	r1, #1
 800d47a:	f7ff ff07 	bl	800d28c <_Balloc>
 800d47e:	4602      	mov	r2, r0
 800d480:	b928      	cbnz	r0, 800d48e <__i2b+0x1a>
 800d482:	4b05      	ldr	r3, [pc, #20]	@ (800d498 <__i2b+0x24>)
 800d484:	4805      	ldr	r0, [pc, #20]	@ (800d49c <__i2b+0x28>)
 800d486:	f240 1145 	movw	r1, #325	@ 0x145
 800d48a:	f000 fe6b 	bl	800e164 <__assert_func>
 800d48e:	2301      	movs	r3, #1
 800d490:	6144      	str	r4, [r0, #20]
 800d492:	6103      	str	r3, [r0, #16]
 800d494:	bd10      	pop	{r4, pc}
 800d496:	bf00      	nop
 800d498:	0800f7ec 	.word	0x0800f7ec
 800d49c:	0800f7fd 	.word	0x0800f7fd

0800d4a0 <__multiply>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	4617      	mov	r7, r2
 800d4a6:	690a      	ldr	r2, [r1, #16]
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	bfa8      	it	ge
 800d4ae:	463b      	movge	r3, r7
 800d4b0:	4689      	mov	r9, r1
 800d4b2:	bfa4      	itt	ge
 800d4b4:	460f      	movge	r7, r1
 800d4b6:	4699      	movge	r9, r3
 800d4b8:	693d      	ldr	r5, [r7, #16]
 800d4ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6879      	ldr	r1, [r7, #4]
 800d4c2:	eb05 060a 	add.w	r6, r5, sl
 800d4c6:	42b3      	cmp	r3, r6
 800d4c8:	b085      	sub	sp, #20
 800d4ca:	bfb8      	it	lt
 800d4cc:	3101      	addlt	r1, #1
 800d4ce:	f7ff fedd 	bl	800d28c <_Balloc>
 800d4d2:	b930      	cbnz	r0, 800d4e2 <__multiply+0x42>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	4b41      	ldr	r3, [pc, #260]	@ (800d5dc <__multiply+0x13c>)
 800d4d8:	4841      	ldr	r0, [pc, #260]	@ (800d5e0 <__multiply+0x140>)
 800d4da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d4de:	f000 fe41 	bl	800e164 <__assert_func>
 800d4e2:	f100 0414 	add.w	r4, r0, #20
 800d4e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d4ea:	4623      	mov	r3, r4
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	4573      	cmp	r3, lr
 800d4f0:	d320      	bcc.n	800d534 <__multiply+0x94>
 800d4f2:	f107 0814 	add.w	r8, r7, #20
 800d4f6:	f109 0114 	add.w	r1, r9, #20
 800d4fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d4fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d502:	9302      	str	r3, [sp, #8]
 800d504:	1beb      	subs	r3, r5, r7
 800d506:	3b15      	subs	r3, #21
 800d508:	f023 0303 	bic.w	r3, r3, #3
 800d50c:	3304      	adds	r3, #4
 800d50e:	3715      	adds	r7, #21
 800d510:	42bd      	cmp	r5, r7
 800d512:	bf38      	it	cc
 800d514:	2304      	movcc	r3, #4
 800d516:	9301      	str	r3, [sp, #4]
 800d518:	9b02      	ldr	r3, [sp, #8]
 800d51a:	9103      	str	r1, [sp, #12]
 800d51c:	428b      	cmp	r3, r1
 800d51e:	d80c      	bhi.n	800d53a <__multiply+0x9a>
 800d520:	2e00      	cmp	r6, #0
 800d522:	dd03      	ble.n	800d52c <__multiply+0x8c>
 800d524:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d055      	beq.n	800d5d8 <__multiply+0x138>
 800d52c:	6106      	str	r6, [r0, #16]
 800d52e:	b005      	add	sp, #20
 800d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d534:	f843 2b04 	str.w	r2, [r3], #4
 800d538:	e7d9      	b.n	800d4ee <__multiply+0x4e>
 800d53a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d53e:	f1ba 0f00 	cmp.w	sl, #0
 800d542:	d01f      	beq.n	800d584 <__multiply+0xe4>
 800d544:	46c4      	mov	ip, r8
 800d546:	46a1      	mov	r9, r4
 800d548:	2700      	movs	r7, #0
 800d54a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d54e:	f8d9 3000 	ldr.w	r3, [r9]
 800d552:	fa1f fb82 	uxth.w	fp, r2
 800d556:	b29b      	uxth	r3, r3
 800d558:	fb0a 330b 	mla	r3, sl, fp, r3
 800d55c:	443b      	add	r3, r7
 800d55e:	f8d9 7000 	ldr.w	r7, [r9]
 800d562:	0c12      	lsrs	r2, r2, #16
 800d564:	0c3f      	lsrs	r7, r7, #16
 800d566:	fb0a 7202 	mla	r2, sl, r2, r7
 800d56a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d56e:	b29b      	uxth	r3, r3
 800d570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d574:	4565      	cmp	r5, ip
 800d576:	f849 3b04 	str.w	r3, [r9], #4
 800d57a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d57e:	d8e4      	bhi.n	800d54a <__multiply+0xaa>
 800d580:	9b01      	ldr	r3, [sp, #4]
 800d582:	50e7      	str	r7, [r4, r3]
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d58a:	3104      	adds	r1, #4
 800d58c:	f1b9 0f00 	cmp.w	r9, #0
 800d590:	d020      	beq.n	800d5d4 <__multiply+0x134>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	4647      	mov	r7, r8
 800d596:	46a4      	mov	ip, r4
 800d598:	f04f 0a00 	mov.w	sl, #0
 800d59c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d5a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d5a4:	fb09 220b 	mla	r2, r9, fp, r2
 800d5a8:	4452      	add	r2, sl
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5b0:	f84c 3b04 	str.w	r3, [ip], #4
 800d5b4:	f857 3b04 	ldr.w	r3, [r7], #4
 800d5b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d5bc:	f8bc 3000 	ldrh.w	r3, [ip]
 800d5c0:	fb09 330a 	mla	r3, r9, sl, r3
 800d5c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d5c8:	42bd      	cmp	r5, r7
 800d5ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d5ce:	d8e5      	bhi.n	800d59c <__multiply+0xfc>
 800d5d0:	9a01      	ldr	r2, [sp, #4]
 800d5d2:	50a3      	str	r3, [r4, r2]
 800d5d4:	3404      	adds	r4, #4
 800d5d6:	e79f      	b.n	800d518 <__multiply+0x78>
 800d5d8:	3e01      	subs	r6, #1
 800d5da:	e7a1      	b.n	800d520 <__multiply+0x80>
 800d5dc:	0800f7ec 	.word	0x0800f7ec
 800d5e0:	0800f7fd 	.word	0x0800f7fd

0800d5e4 <__pow5mult>:
 800d5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e8:	4615      	mov	r5, r2
 800d5ea:	f012 0203 	ands.w	r2, r2, #3
 800d5ee:	4607      	mov	r7, r0
 800d5f0:	460e      	mov	r6, r1
 800d5f2:	d007      	beq.n	800d604 <__pow5mult+0x20>
 800d5f4:	4c25      	ldr	r4, [pc, #148]	@ (800d68c <__pow5mult+0xa8>)
 800d5f6:	3a01      	subs	r2, #1
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5fe:	f7ff fea7 	bl	800d350 <__multadd>
 800d602:	4606      	mov	r6, r0
 800d604:	10ad      	asrs	r5, r5, #2
 800d606:	d03d      	beq.n	800d684 <__pow5mult+0xa0>
 800d608:	69fc      	ldr	r4, [r7, #28]
 800d60a:	b97c      	cbnz	r4, 800d62c <__pow5mult+0x48>
 800d60c:	2010      	movs	r0, #16
 800d60e:	f7fd ffa5 	bl	800b55c <malloc>
 800d612:	4602      	mov	r2, r0
 800d614:	61f8      	str	r0, [r7, #28]
 800d616:	b928      	cbnz	r0, 800d624 <__pow5mult+0x40>
 800d618:	4b1d      	ldr	r3, [pc, #116]	@ (800d690 <__pow5mult+0xac>)
 800d61a:	481e      	ldr	r0, [pc, #120]	@ (800d694 <__pow5mult+0xb0>)
 800d61c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d620:	f000 fda0 	bl	800e164 <__assert_func>
 800d624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d628:	6004      	str	r4, [r0, #0]
 800d62a:	60c4      	str	r4, [r0, #12]
 800d62c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d634:	b94c      	cbnz	r4, 800d64a <__pow5mult+0x66>
 800d636:	f240 2171 	movw	r1, #625	@ 0x271
 800d63a:	4638      	mov	r0, r7
 800d63c:	f7ff ff1a 	bl	800d474 <__i2b>
 800d640:	2300      	movs	r3, #0
 800d642:	f8c8 0008 	str.w	r0, [r8, #8]
 800d646:	4604      	mov	r4, r0
 800d648:	6003      	str	r3, [r0, #0]
 800d64a:	f04f 0900 	mov.w	r9, #0
 800d64e:	07eb      	lsls	r3, r5, #31
 800d650:	d50a      	bpl.n	800d668 <__pow5mult+0x84>
 800d652:	4631      	mov	r1, r6
 800d654:	4622      	mov	r2, r4
 800d656:	4638      	mov	r0, r7
 800d658:	f7ff ff22 	bl	800d4a0 <__multiply>
 800d65c:	4631      	mov	r1, r6
 800d65e:	4680      	mov	r8, r0
 800d660:	4638      	mov	r0, r7
 800d662:	f7ff fe53 	bl	800d30c <_Bfree>
 800d666:	4646      	mov	r6, r8
 800d668:	106d      	asrs	r5, r5, #1
 800d66a:	d00b      	beq.n	800d684 <__pow5mult+0xa0>
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	b938      	cbnz	r0, 800d680 <__pow5mult+0x9c>
 800d670:	4622      	mov	r2, r4
 800d672:	4621      	mov	r1, r4
 800d674:	4638      	mov	r0, r7
 800d676:	f7ff ff13 	bl	800d4a0 <__multiply>
 800d67a:	6020      	str	r0, [r4, #0]
 800d67c:	f8c0 9000 	str.w	r9, [r0]
 800d680:	4604      	mov	r4, r0
 800d682:	e7e4      	b.n	800d64e <__pow5mult+0x6a>
 800d684:	4630      	mov	r0, r6
 800d686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d68a:	bf00      	nop
 800d68c:	0800f8b0 	.word	0x0800f8b0
 800d690:	0800f77d 	.word	0x0800f77d
 800d694:	0800f7fd 	.word	0x0800f7fd

0800d698 <__lshift>:
 800d698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d69c:	460c      	mov	r4, r1
 800d69e:	6849      	ldr	r1, [r1, #4]
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6a6:	68a3      	ldr	r3, [r4, #8]
 800d6a8:	4607      	mov	r7, r0
 800d6aa:	4691      	mov	r9, r2
 800d6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6b0:	f108 0601 	add.w	r6, r8, #1
 800d6b4:	42b3      	cmp	r3, r6
 800d6b6:	db0b      	blt.n	800d6d0 <__lshift+0x38>
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	f7ff fde7 	bl	800d28c <_Balloc>
 800d6be:	4605      	mov	r5, r0
 800d6c0:	b948      	cbnz	r0, 800d6d6 <__lshift+0x3e>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	4b28      	ldr	r3, [pc, #160]	@ (800d768 <__lshift+0xd0>)
 800d6c6:	4829      	ldr	r0, [pc, #164]	@ (800d76c <__lshift+0xd4>)
 800d6c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d6cc:	f000 fd4a 	bl	800e164 <__assert_func>
 800d6d0:	3101      	adds	r1, #1
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	e7ee      	b.n	800d6b4 <__lshift+0x1c>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f100 0114 	add.w	r1, r0, #20
 800d6dc:	f100 0210 	add.w	r2, r0, #16
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	4553      	cmp	r3, sl
 800d6e4:	db33      	blt.n	800d74e <__lshift+0xb6>
 800d6e6:	6920      	ldr	r0, [r4, #16]
 800d6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6ec:	f104 0314 	add.w	r3, r4, #20
 800d6f0:	f019 091f 	ands.w	r9, r9, #31
 800d6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6fc:	d02b      	beq.n	800d756 <__lshift+0xbe>
 800d6fe:	f1c9 0e20 	rsb	lr, r9, #32
 800d702:	468a      	mov	sl, r1
 800d704:	2200      	movs	r2, #0
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	fa00 f009 	lsl.w	r0, r0, r9
 800d70c:	4310      	orrs	r0, r2
 800d70e:	f84a 0b04 	str.w	r0, [sl], #4
 800d712:	f853 2b04 	ldr.w	r2, [r3], #4
 800d716:	459c      	cmp	ip, r3
 800d718:	fa22 f20e 	lsr.w	r2, r2, lr
 800d71c:	d8f3      	bhi.n	800d706 <__lshift+0x6e>
 800d71e:	ebac 0304 	sub.w	r3, ip, r4
 800d722:	3b15      	subs	r3, #21
 800d724:	f023 0303 	bic.w	r3, r3, #3
 800d728:	3304      	adds	r3, #4
 800d72a:	f104 0015 	add.w	r0, r4, #21
 800d72e:	4560      	cmp	r0, ip
 800d730:	bf88      	it	hi
 800d732:	2304      	movhi	r3, #4
 800d734:	50ca      	str	r2, [r1, r3]
 800d736:	b10a      	cbz	r2, 800d73c <__lshift+0xa4>
 800d738:	f108 0602 	add.w	r6, r8, #2
 800d73c:	3e01      	subs	r6, #1
 800d73e:	4638      	mov	r0, r7
 800d740:	612e      	str	r6, [r5, #16]
 800d742:	4621      	mov	r1, r4
 800d744:	f7ff fde2 	bl	800d30c <_Bfree>
 800d748:	4628      	mov	r0, r5
 800d74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d74e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d752:	3301      	adds	r3, #1
 800d754:	e7c5      	b.n	800d6e2 <__lshift+0x4a>
 800d756:	3904      	subs	r1, #4
 800d758:	f853 2b04 	ldr.w	r2, [r3], #4
 800d75c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d760:	459c      	cmp	ip, r3
 800d762:	d8f9      	bhi.n	800d758 <__lshift+0xc0>
 800d764:	e7ea      	b.n	800d73c <__lshift+0xa4>
 800d766:	bf00      	nop
 800d768:	0800f7ec 	.word	0x0800f7ec
 800d76c:	0800f7fd 	.word	0x0800f7fd

0800d770 <__mcmp>:
 800d770:	690a      	ldr	r2, [r1, #16]
 800d772:	4603      	mov	r3, r0
 800d774:	6900      	ldr	r0, [r0, #16]
 800d776:	1a80      	subs	r0, r0, r2
 800d778:	b530      	push	{r4, r5, lr}
 800d77a:	d10e      	bne.n	800d79a <__mcmp+0x2a>
 800d77c:	3314      	adds	r3, #20
 800d77e:	3114      	adds	r1, #20
 800d780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d78c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d790:	4295      	cmp	r5, r2
 800d792:	d003      	beq.n	800d79c <__mcmp+0x2c>
 800d794:	d205      	bcs.n	800d7a2 <__mcmp+0x32>
 800d796:	f04f 30ff 	mov.w	r0, #4294967295
 800d79a:	bd30      	pop	{r4, r5, pc}
 800d79c:	42a3      	cmp	r3, r4
 800d79e:	d3f3      	bcc.n	800d788 <__mcmp+0x18>
 800d7a0:	e7fb      	b.n	800d79a <__mcmp+0x2a>
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	e7f9      	b.n	800d79a <__mcmp+0x2a>
	...

0800d7a8 <__mdiff>:
 800d7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ac:	4689      	mov	r9, r1
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	4648      	mov	r0, r9
 800d7b4:	4614      	mov	r4, r2
 800d7b6:	f7ff ffdb 	bl	800d770 <__mcmp>
 800d7ba:	1e05      	subs	r5, r0, #0
 800d7bc:	d112      	bne.n	800d7e4 <__mdiff+0x3c>
 800d7be:	4629      	mov	r1, r5
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	f7ff fd63 	bl	800d28c <_Balloc>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	b928      	cbnz	r0, 800d7d6 <__mdiff+0x2e>
 800d7ca:	4b3f      	ldr	r3, [pc, #252]	@ (800d8c8 <__mdiff+0x120>)
 800d7cc:	f240 2137 	movw	r1, #567	@ 0x237
 800d7d0:	483e      	ldr	r0, [pc, #248]	@ (800d8cc <__mdiff+0x124>)
 800d7d2:	f000 fcc7 	bl	800e164 <__assert_func>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7dc:	4610      	mov	r0, r2
 800d7de:	b003      	add	sp, #12
 800d7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e4:	bfbc      	itt	lt
 800d7e6:	464b      	movlt	r3, r9
 800d7e8:	46a1      	movlt	r9, r4
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d7f0:	bfba      	itte	lt
 800d7f2:	461c      	movlt	r4, r3
 800d7f4:	2501      	movlt	r5, #1
 800d7f6:	2500      	movge	r5, #0
 800d7f8:	f7ff fd48 	bl	800d28c <_Balloc>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	b918      	cbnz	r0, 800d808 <__mdiff+0x60>
 800d800:	4b31      	ldr	r3, [pc, #196]	@ (800d8c8 <__mdiff+0x120>)
 800d802:	f240 2145 	movw	r1, #581	@ 0x245
 800d806:	e7e3      	b.n	800d7d0 <__mdiff+0x28>
 800d808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d80c:	6926      	ldr	r6, [r4, #16]
 800d80e:	60c5      	str	r5, [r0, #12]
 800d810:	f109 0310 	add.w	r3, r9, #16
 800d814:	f109 0514 	add.w	r5, r9, #20
 800d818:	f104 0e14 	add.w	lr, r4, #20
 800d81c:	f100 0b14 	add.w	fp, r0, #20
 800d820:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d824:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d828:	9301      	str	r3, [sp, #4]
 800d82a:	46d9      	mov	r9, fp
 800d82c:	f04f 0c00 	mov.w	ip, #0
 800d830:	9b01      	ldr	r3, [sp, #4]
 800d832:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d836:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d83a:	9301      	str	r3, [sp, #4]
 800d83c:	fa1f f38a 	uxth.w	r3, sl
 800d840:	4619      	mov	r1, r3
 800d842:	b283      	uxth	r3, r0
 800d844:	1acb      	subs	r3, r1, r3
 800d846:	0c00      	lsrs	r0, r0, #16
 800d848:	4463      	add	r3, ip
 800d84a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d84e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d852:	b29b      	uxth	r3, r3
 800d854:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d858:	4576      	cmp	r6, lr
 800d85a:	f849 3b04 	str.w	r3, [r9], #4
 800d85e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d862:	d8e5      	bhi.n	800d830 <__mdiff+0x88>
 800d864:	1b33      	subs	r3, r6, r4
 800d866:	3b15      	subs	r3, #21
 800d868:	f023 0303 	bic.w	r3, r3, #3
 800d86c:	3415      	adds	r4, #21
 800d86e:	3304      	adds	r3, #4
 800d870:	42a6      	cmp	r6, r4
 800d872:	bf38      	it	cc
 800d874:	2304      	movcc	r3, #4
 800d876:	441d      	add	r5, r3
 800d878:	445b      	add	r3, fp
 800d87a:	461e      	mov	r6, r3
 800d87c:	462c      	mov	r4, r5
 800d87e:	4544      	cmp	r4, r8
 800d880:	d30e      	bcc.n	800d8a0 <__mdiff+0xf8>
 800d882:	f108 0103 	add.w	r1, r8, #3
 800d886:	1b49      	subs	r1, r1, r5
 800d888:	f021 0103 	bic.w	r1, r1, #3
 800d88c:	3d03      	subs	r5, #3
 800d88e:	45a8      	cmp	r8, r5
 800d890:	bf38      	it	cc
 800d892:	2100      	movcc	r1, #0
 800d894:	440b      	add	r3, r1
 800d896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d89a:	b191      	cbz	r1, 800d8c2 <__mdiff+0x11a>
 800d89c:	6117      	str	r7, [r2, #16]
 800d89e:	e79d      	b.n	800d7dc <__mdiff+0x34>
 800d8a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d8a4:	46e6      	mov	lr, ip
 800d8a6:	0c08      	lsrs	r0, r1, #16
 800d8a8:	fa1c fc81 	uxtah	ip, ip, r1
 800d8ac:	4471      	add	r1, lr
 800d8ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d8b2:	b289      	uxth	r1, r1
 800d8b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d8b8:	f846 1b04 	str.w	r1, [r6], #4
 800d8bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8c0:	e7dd      	b.n	800d87e <__mdiff+0xd6>
 800d8c2:	3f01      	subs	r7, #1
 800d8c4:	e7e7      	b.n	800d896 <__mdiff+0xee>
 800d8c6:	bf00      	nop
 800d8c8:	0800f7ec 	.word	0x0800f7ec
 800d8cc:	0800f7fd 	.word	0x0800f7fd

0800d8d0 <__d2b>:
 800d8d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8d4:	460f      	mov	r7, r1
 800d8d6:	2101      	movs	r1, #1
 800d8d8:	ec59 8b10 	vmov	r8, r9, d0
 800d8dc:	4616      	mov	r6, r2
 800d8de:	f7ff fcd5 	bl	800d28c <_Balloc>
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	b930      	cbnz	r0, 800d8f4 <__d2b+0x24>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	4b23      	ldr	r3, [pc, #140]	@ (800d978 <__d2b+0xa8>)
 800d8ea:	4824      	ldr	r0, [pc, #144]	@ (800d97c <__d2b+0xac>)
 800d8ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8f0:	f000 fc38 	bl	800e164 <__assert_func>
 800d8f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8fc:	b10d      	cbz	r5, 800d902 <__d2b+0x32>
 800d8fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d902:	9301      	str	r3, [sp, #4]
 800d904:	f1b8 0300 	subs.w	r3, r8, #0
 800d908:	d023      	beq.n	800d952 <__d2b+0x82>
 800d90a:	4668      	mov	r0, sp
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	f7ff fd84 	bl	800d41a <__lo0bits>
 800d912:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d916:	b1d0      	cbz	r0, 800d94e <__d2b+0x7e>
 800d918:	f1c0 0320 	rsb	r3, r0, #32
 800d91c:	fa02 f303 	lsl.w	r3, r2, r3
 800d920:	430b      	orrs	r3, r1
 800d922:	40c2      	lsrs	r2, r0
 800d924:	6163      	str	r3, [r4, #20]
 800d926:	9201      	str	r2, [sp, #4]
 800d928:	9b01      	ldr	r3, [sp, #4]
 800d92a:	61a3      	str	r3, [r4, #24]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	bf0c      	ite	eq
 800d930:	2201      	moveq	r2, #1
 800d932:	2202      	movne	r2, #2
 800d934:	6122      	str	r2, [r4, #16]
 800d936:	b1a5      	cbz	r5, 800d962 <__d2b+0x92>
 800d938:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d93c:	4405      	add	r5, r0
 800d93e:	603d      	str	r5, [r7, #0]
 800d940:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d944:	6030      	str	r0, [r6, #0]
 800d946:	4620      	mov	r0, r4
 800d948:	b003      	add	sp, #12
 800d94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d94e:	6161      	str	r1, [r4, #20]
 800d950:	e7ea      	b.n	800d928 <__d2b+0x58>
 800d952:	a801      	add	r0, sp, #4
 800d954:	f7ff fd61 	bl	800d41a <__lo0bits>
 800d958:	9b01      	ldr	r3, [sp, #4]
 800d95a:	6163      	str	r3, [r4, #20]
 800d95c:	3020      	adds	r0, #32
 800d95e:	2201      	movs	r2, #1
 800d960:	e7e8      	b.n	800d934 <__d2b+0x64>
 800d962:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d966:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d96a:	6038      	str	r0, [r7, #0]
 800d96c:	6918      	ldr	r0, [r3, #16]
 800d96e:	f7ff fd35 	bl	800d3dc <__hi0bits>
 800d972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d976:	e7e5      	b.n	800d944 <__d2b+0x74>
 800d978:	0800f7ec 	.word	0x0800f7ec
 800d97c:	0800f7fd 	.word	0x0800f7fd

0800d980 <__ssputs_r>:
 800d980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d984:	688e      	ldr	r6, [r1, #8]
 800d986:	461f      	mov	r7, r3
 800d988:	42be      	cmp	r6, r7
 800d98a:	680b      	ldr	r3, [r1, #0]
 800d98c:	4682      	mov	sl, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	4690      	mov	r8, r2
 800d992:	d82d      	bhi.n	800d9f0 <__ssputs_r+0x70>
 800d994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d998:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d99c:	d026      	beq.n	800d9ec <__ssputs_r+0x6c>
 800d99e:	6965      	ldr	r5, [r4, #20]
 800d9a0:	6909      	ldr	r1, [r1, #16]
 800d9a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9a6:	eba3 0901 	sub.w	r9, r3, r1
 800d9aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9ae:	1c7b      	adds	r3, r7, #1
 800d9b0:	444b      	add	r3, r9
 800d9b2:	106d      	asrs	r5, r5, #1
 800d9b4:	429d      	cmp	r5, r3
 800d9b6:	bf38      	it	cc
 800d9b8:	461d      	movcc	r5, r3
 800d9ba:	0553      	lsls	r3, r2, #21
 800d9bc:	d527      	bpl.n	800da0e <__ssputs_r+0x8e>
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7fd fdfe 	bl	800b5c0 <_malloc_r>
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	b360      	cbz	r0, 800da22 <__ssputs_r+0xa2>
 800d9c8:	6921      	ldr	r1, [r4, #16]
 800d9ca:	464a      	mov	r2, r9
 800d9cc:	f000 fbbc 	bl	800e148 <memcpy>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	6126      	str	r6, [r4, #16]
 800d9de:	6165      	str	r5, [r4, #20]
 800d9e0:	444e      	add	r6, r9
 800d9e2:	eba5 0509 	sub.w	r5, r5, r9
 800d9e6:	6026      	str	r6, [r4, #0]
 800d9e8:	60a5      	str	r5, [r4, #8]
 800d9ea:	463e      	mov	r6, r7
 800d9ec:	42be      	cmp	r6, r7
 800d9ee:	d900      	bls.n	800d9f2 <__ssputs_r+0x72>
 800d9f0:	463e      	mov	r6, r7
 800d9f2:	6820      	ldr	r0, [r4, #0]
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	4641      	mov	r1, r8
 800d9f8:	f000 fb6a 	bl	800e0d0 <memmove>
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	1b9b      	subs	r3, r3, r6
 800da00:	60a3      	str	r3, [r4, #8]
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	4433      	add	r3, r6
 800da06:	6023      	str	r3, [r4, #0]
 800da08:	2000      	movs	r0, #0
 800da0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0e:	462a      	mov	r2, r5
 800da10:	f000 fbec 	bl	800e1ec <_realloc_r>
 800da14:	4606      	mov	r6, r0
 800da16:	2800      	cmp	r0, #0
 800da18:	d1e0      	bne.n	800d9dc <__ssputs_r+0x5c>
 800da1a:	6921      	ldr	r1, [r4, #16]
 800da1c:	4650      	mov	r0, sl
 800da1e:	f7ff fbeb 	bl	800d1f8 <_free_r>
 800da22:	230c      	movs	r3, #12
 800da24:	f8ca 3000 	str.w	r3, [sl]
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	f04f 30ff 	mov.w	r0, #4294967295
 800da34:	e7e9      	b.n	800da0a <__ssputs_r+0x8a>
	...

0800da38 <_svfiprintf_r>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	4698      	mov	r8, r3
 800da3e:	898b      	ldrh	r3, [r1, #12]
 800da40:	061b      	lsls	r3, r3, #24
 800da42:	b09d      	sub	sp, #116	@ 0x74
 800da44:	4607      	mov	r7, r0
 800da46:	460d      	mov	r5, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	d510      	bpl.n	800da6e <_svfiprintf_r+0x36>
 800da4c:	690b      	ldr	r3, [r1, #16]
 800da4e:	b973      	cbnz	r3, 800da6e <_svfiprintf_r+0x36>
 800da50:	2140      	movs	r1, #64	@ 0x40
 800da52:	f7fd fdb5 	bl	800b5c0 <_malloc_r>
 800da56:	6028      	str	r0, [r5, #0]
 800da58:	6128      	str	r0, [r5, #16]
 800da5a:	b930      	cbnz	r0, 800da6a <_svfiprintf_r+0x32>
 800da5c:	230c      	movs	r3, #12
 800da5e:	603b      	str	r3, [r7, #0]
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	b01d      	add	sp, #116	@ 0x74
 800da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6a:	2340      	movs	r3, #64	@ 0x40
 800da6c:	616b      	str	r3, [r5, #20]
 800da6e:	2300      	movs	r3, #0
 800da70:	9309      	str	r3, [sp, #36]	@ 0x24
 800da72:	2320      	movs	r3, #32
 800da74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da78:	f8cd 800c 	str.w	r8, [sp, #12]
 800da7c:	2330      	movs	r3, #48	@ 0x30
 800da7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc1c <_svfiprintf_r+0x1e4>
 800da82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da86:	f04f 0901 	mov.w	r9, #1
 800da8a:	4623      	mov	r3, r4
 800da8c:	469a      	mov	sl, r3
 800da8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da92:	b10a      	cbz	r2, 800da98 <_svfiprintf_r+0x60>
 800da94:	2a25      	cmp	r2, #37	@ 0x25
 800da96:	d1f9      	bne.n	800da8c <_svfiprintf_r+0x54>
 800da98:	ebba 0b04 	subs.w	fp, sl, r4
 800da9c:	d00b      	beq.n	800dab6 <_svfiprintf_r+0x7e>
 800da9e:	465b      	mov	r3, fp
 800daa0:	4622      	mov	r2, r4
 800daa2:	4629      	mov	r1, r5
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff ff6b 	bl	800d980 <__ssputs_r>
 800daaa:	3001      	adds	r0, #1
 800daac:	f000 80a7 	beq.w	800dbfe <_svfiprintf_r+0x1c6>
 800dab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dab2:	445a      	add	r2, fp
 800dab4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dab6:	f89a 3000 	ldrb.w	r3, [sl]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 809f 	beq.w	800dbfe <_svfiprintf_r+0x1c6>
 800dac0:	2300      	movs	r3, #0
 800dac2:	f04f 32ff 	mov.w	r2, #4294967295
 800dac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daca:	f10a 0a01 	add.w	sl, sl, #1
 800dace:	9304      	str	r3, [sp, #16]
 800dad0:	9307      	str	r3, [sp, #28]
 800dad2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dad6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dad8:	4654      	mov	r4, sl
 800dada:	2205      	movs	r2, #5
 800dadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae0:	484e      	ldr	r0, [pc, #312]	@ (800dc1c <_svfiprintf_r+0x1e4>)
 800dae2:	f7f2 fbad 	bl	8000240 <memchr>
 800dae6:	9a04      	ldr	r2, [sp, #16]
 800dae8:	b9d8      	cbnz	r0, 800db22 <_svfiprintf_r+0xea>
 800daea:	06d0      	lsls	r0, r2, #27
 800daec:	bf44      	itt	mi
 800daee:	2320      	movmi	r3, #32
 800daf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daf4:	0711      	lsls	r1, r2, #28
 800daf6:	bf44      	itt	mi
 800daf8:	232b      	movmi	r3, #43	@ 0x2b
 800dafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dafe:	f89a 3000 	ldrb.w	r3, [sl]
 800db02:	2b2a      	cmp	r3, #42	@ 0x2a
 800db04:	d015      	beq.n	800db32 <_svfiprintf_r+0xfa>
 800db06:	9a07      	ldr	r2, [sp, #28]
 800db08:	4654      	mov	r4, sl
 800db0a:	2000      	movs	r0, #0
 800db0c:	f04f 0c0a 	mov.w	ip, #10
 800db10:	4621      	mov	r1, r4
 800db12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db16:	3b30      	subs	r3, #48	@ 0x30
 800db18:	2b09      	cmp	r3, #9
 800db1a:	d94b      	bls.n	800dbb4 <_svfiprintf_r+0x17c>
 800db1c:	b1b0      	cbz	r0, 800db4c <_svfiprintf_r+0x114>
 800db1e:	9207      	str	r2, [sp, #28]
 800db20:	e014      	b.n	800db4c <_svfiprintf_r+0x114>
 800db22:	eba0 0308 	sub.w	r3, r0, r8
 800db26:	fa09 f303 	lsl.w	r3, r9, r3
 800db2a:	4313      	orrs	r3, r2
 800db2c:	9304      	str	r3, [sp, #16]
 800db2e:	46a2      	mov	sl, r4
 800db30:	e7d2      	b.n	800dad8 <_svfiprintf_r+0xa0>
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	1d19      	adds	r1, r3, #4
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	9103      	str	r1, [sp, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	bfbb      	ittet	lt
 800db3e:	425b      	neglt	r3, r3
 800db40:	f042 0202 	orrlt.w	r2, r2, #2
 800db44:	9307      	strge	r3, [sp, #28]
 800db46:	9307      	strlt	r3, [sp, #28]
 800db48:	bfb8      	it	lt
 800db4a:	9204      	strlt	r2, [sp, #16]
 800db4c:	7823      	ldrb	r3, [r4, #0]
 800db4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800db50:	d10a      	bne.n	800db68 <_svfiprintf_r+0x130>
 800db52:	7863      	ldrb	r3, [r4, #1]
 800db54:	2b2a      	cmp	r3, #42	@ 0x2a
 800db56:	d132      	bne.n	800dbbe <_svfiprintf_r+0x186>
 800db58:	9b03      	ldr	r3, [sp, #12]
 800db5a:	1d1a      	adds	r2, r3, #4
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	9203      	str	r2, [sp, #12]
 800db60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db64:	3402      	adds	r4, #2
 800db66:	9305      	str	r3, [sp, #20]
 800db68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc2c <_svfiprintf_r+0x1f4>
 800db6c:	7821      	ldrb	r1, [r4, #0]
 800db6e:	2203      	movs	r2, #3
 800db70:	4650      	mov	r0, sl
 800db72:	f7f2 fb65 	bl	8000240 <memchr>
 800db76:	b138      	cbz	r0, 800db88 <_svfiprintf_r+0x150>
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	eba0 000a 	sub.w	r0, r0, sl
 800db7e:	2240      	movs	r2, #64	@ 0x40
 800db80:	4082      	lsls	r2, r0
 800db82:	4313      	orrs	r3, r2
 800db84:	3401      	adds	r4, #1
 800db86:	9304      	str	r3, [sp, #16]
 800db88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db8c:	4824      	ldr	r0, [pc, #144]	@ (800dc20 <_svfiprintf_r+0x1e8>)
 800db8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db92:	2206      	movs	r2, #6
 800db94:	f7f2 fb54 	bl	8000240 <memchr>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d036      	beq.n	800dc0a <_svfiprintf_r+0x1d2>
 800db9c:	4b21      	ldr	r3, [pc, #132]	@ (800dc24 <_svfiprintf_r+0x1ec>)
 800db9e:	bb1b      	cbnz	r3, 800dbe8 <_svfiprintf_r+0x1b0>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	3307      	adds	r3, #7
 800dba4:	f023 0307 	bic.w	r3, r3, #7
 800dba8:	3308      	adds	r3, #8
 800dbaa:	9303      	str	r3, [sp, #12]
 800dbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbae:	4433      	add	r3, r6
 800dbb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbb2:	e76a      	b.n	800da8a <_svfiprintf_r+0x52>
 800dbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbb8:	460c      	mov	r4, r1
 800dbba:	2001      	movs	r0, #1
 800dbbc:	e7a8      	b.n	800db10 <_svfiprintf_r+0xd8>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	3401      	adds	r4, #1
 800dbc2:	9305      	str	r3, [sp, #20]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f04f 0c0a 	mov.w	ip, #10
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbd0:	3a30      	subs	r2, #48	@ 0x30
 800dbd2:	2a09      	cmp	r2, #9
 800dbd4:	d903      	bls.n	800dbde <_svfiprintf_r+0x1a6>
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d0c6      	beq.n	800db68 <_svfiprintf_r+0x130>
 800dbda:	9105      	str	r1, [sp, #20]
 800dbdc:	e7c4      	b.n	800db68 <_svfiprintf_r+0x130>
 800dbde:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e7f0      	b.n	800dbca <_svfiprintf_r+0x192>
 800dbe8:	ab03      	add	r3, sp, #12
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	462a      	mov	r2, r5
 800dbee:	4b0e      	ldr	r3, [pc, #56]	@ (800dc28 <_svfiprintf_r+0x1f0>)
 800dbf0:	a904      	add	r1, sp, #16
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	f7fd fe10 	bl	800b818 <_printf_float>
 800dbf8:	1c42      	adds	r2, r0, #1
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	d1d6      	bne.n	800dbac <_svfiprintf_r+0x174>
 800dbfe:	89ab      	ldrh	r3, [r5, #12]
 800dc00:	065b      	lsls	r3, r3, #25
 800dc02:	f53f af2d 	bmi.w	800da60 <_svfiprintf_r+0x28>
 800dc06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc08:	e72c      	b.n	800da64 <_svfiprintf_r+0x2c>
 800dc0a:	ab03      	add	r3, sp, #12
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	462a      	mov	r2, r5
 800dc10:	4b05      	ldr	r3, [pc, #20]	@ (800dc28 <_svfiprintf_r+0x1f0>)
 800dc12:	a904      	add	r1, sp, #16
 800dc14:	4638      	mov	r0, r7
 800dc16:	f7fe f897 	bl	800bd48 <_printf_i>
 800dc1a:	e7ed      	b.n	800dbf8 <_svfiprintf_r+0x1c0>
 800dc1c:	0800f856 	.word	0x0800f856
 800dc20:	0800f860 	.word	0x0800f860
 800dc24:	0800b819 	.word	0x0800b819
 800dc28:	0800d981 	.word	0x0800d981
 800dc2c:	0800f85c 	.word	0x0800f85c

0800dc30 <__sfputc_r>:
 800dc30:	6893      	ldr	r3, [r2, #8]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	b410      	push	{r4}
 800dc38:	6093      	str	r3, [r2, #8]
 800dc3a:	da08      	bge.n	800dc4e <__sfputc_r+0x1e>
 800dc3c:	6994      	ldr	r4, [r2, #24]
 800dc3e:	42a3      	cmp	r3, r4
 800dc40:	db01      	blt.n	800dc46 <__sfputc_r+0x16>
 800dc42:	290a      	cmp	r1, #10
 800dc44:	d103      	bne.n	800dc4e <__sfputc_r+0x1e>
 800dc46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc4a:	f7fe bb46 	b.w	800c2da <__swbuf_r>
 800dc4e:	6813      	ldr	r3, [r2, #0]
 800dc50:	1c58      	adds	r0, r3, #1
 800dc52:	6010      	str	r0, [r2, #0]
 800dc54:	7019      	strb	r1, [r3, #0]
 800dc56:	4608      	mov	r0, r1
 800dc58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc5c:	4770      	bx	lr

0800dc5e <__sfputs_r>:
 800dc5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc60:	4606      	mov	r6, r0
 800dc62:	460f      	mov	r7, r1
 800dc64:	4614      	mov	r4, r2
 800dc66:	18d5      	adds	r5, r2, r3
 800dc68:	42ac      	cmp	r4, r5
 800dc6a:	d101      	bne.n	800dc70 <__sfputs_r+0x12>
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	e007      	b.n	800dc80 <__sfputs_r+0x22>
 800dc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc74:	463a      	mov	r2, r7
 800dc76:	4630      	mov	r0, r6
 800dc78:	f7ff ffda 	bl	800dc30 <__sfputc_r>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d1f3      	bne.n	800dc68 <__sfputs_r+0xa>
 800dc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc84 <_vfiprintf_r>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	460d      	mov	r5, r1
 800dc8a:	b09d      	sub	sp, #116	@ 0x74
 800dc8c:	4614      	mov	r4, r2
 800dc8e:	4698      	mov	r8, r3
 800dc90:	4606      	mov	r6, r0
 800dc92:	b118      	cbz	r0, 800dc9c <_vfiprintf_r+0x18>
 800dc94:	6a03      	ldr	r3, [r0, #32]
 800dc96:	b90b      	cbnz	r3, 800dc9c <_vfiprintf_r+0x18>
 800dc98:	f7fe fa00 	bl	800c09c <__sinit>
 800dc9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc9e:	07d9      	lsls	r1, r3, #31
 800dca0:	d405      	bmi.n	800dcae <_vfiprintf_r+0x2a>
 800dca2:	89ab      	ldrh	r3, [r5, #12]
 800dca4:	059a      	lsls	r2, r3, #22
 800dca6:	d402      	bmi.n	800dcae <_vfiprintf_r+0x2a>
 800dca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcaa:	f7fe fc4a 	bl	800c542 <__retarget_lock_acquire_recursive>
 800dcae:	89ab      	ldrh	r3, [r5, #12]
 800dcb0:	071b      	lsls	r3, r3, #28
 800dcb2:	d501      	bpl.n	800dcb8 <_vfiprintf_r+0x34>
 800dcb4:	692b      	ldr	r3, [r5, #16]
 800dcb6:	b99b      	cbnz	r3, 800dce0 <_vfiprintf_r+0x5c>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f7fe fb4c 	bl	800c358 <__swsetup_r>
 800dcc0:	b170      	cbz	r0, 800dce0 <_vfiprintf_r+0x5c>
 800dcc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcc4:	07dc      	lsls	r4, r3, #31
 800dcc6:	d504      	bpl.n	800dcd2 <_vfiprintf_r+0x4e>
 800dcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dccc:	b01d      	add	sp, #116	@ 0x74
 800dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd2:	89ab      	ldrh	r3, [r5, #12]
 800dcd4:	0598      	lsls	r0, r3, #22
 800dcd6:	d4f7      	bmi.n	800dcc8 <_vfiprintf_r+0x44>
 800dcd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcda:	f7fe fc33 	bl	800c544 <__retarget_lock_release_recursive>
 800dcde:	e7f3      	b.n	800dcc8 <_vfiprintf_r+0x44>
 800dce0:	2300      	movs	r3, #0
 800dce2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dce4:	2320      	movs	r3, #32
 800dce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcea:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcee:	2330      	movs	r3, #48	@ 0x30
 800dcf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dea0 <_vfiprintf_r+0x21c>
 800dcf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcf8:	f04f 0901 	mov.w	r9, #1
 800dcfc:	4623      	mov	r3, r4
 800dcfe:	469a      	mov	sl, r3
 800dd00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd04:	b10a      	cbz	r2, 800dd0a <_vfiprintf_r+0x86>
 800dd06:	2a25      	cmp	r2, #37	@ 0x25
 800dd08:	d1f9      	bne.n	800dcfe <_vfiprintf_r+0x7a>
 800dd0a:	ebba 0b04 	subs.w	fp, sl, r4
 800dd0e:	d00b      	beq.n	800dd28 <_vfiprintf_r+0xa4>
 800dd10:	465b      	mov	r3, fp
 800dd12:	4622      	mov	r2, r4
 800dd14:	4629      	mov	r1, r5
 800dd16:	4630      	mov	r0, r6
 800dd18:	f7ff ffa1 	bl	800dc5e <__sfputs_r>
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	f000 80a7 	beq.w	800de70 <_vfiprintf_r+0x1ec>
 800dd22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd24:	445a      	add	r2, fp
 800dd26:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd28:	f89a 3000 	ldrb.w	r3, [sl]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 809f 	beq.w	800de70 <_vfiprintf_r+0x1ec>
 800dd32:	2300      	movs	r3, #0
 800dd34:	f04f 32ff 	mov.w	r2, #4294967295
 800dd38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd3c:	f10a 0a01 	add.w	sl, sl, #1
 800dd40:	9304      	str	r3, [sp, #16]
 800dd42:	9307      	str	r3, [sp, #28]
 800dd44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd48:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd4a:	4654      	mov	r4, sl
 800dd4c:	2205      	movs	r2, #5
 800dd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd52:	4853      	ldr	r0, [pc, #332]	@ (800dea0 <_vfiprintf_r+0x21c>)
 800dd54:	f7f2 fa74 	bl	8000240 <memchr>
 800dd58:	9a04      	ldr	r2, [sp, #16]
 800dd5a:	b9d8      	cbnz	r0, 800dd94 <_vfiprintf_r+0x110>
 800dd5c:	06d1      	lsls	r1, r2, #27
 800dd5e:	bf44      	itt	mi
 800dd60:	2320      	movmi	r3, #32
 800dd62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd66:	0713      	lsls	r3, r2, #28
 800dd68:	bf44      	itt	mi
 800dd6a:	232b      	movmi	r3, #43	@ 0x2b
 800dd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd70:	f89a 3000 	ldrb.w	r3, [sl]
 800dd74:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd76:	d015      	beq.n	800dda4 <_vfiprintf_r+0x120>
 800dd78:	9a07      	ldr	r2, [sp, #28]
 800dd7a:	4654      	mov	r4, sl
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	f04f 0c0a 	mov.w	ip, #10
 800dd82:	4621      	mov	r1, r4
 800dd84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd88:	3b30      	subs	r3, #48	@ 0x30
 800dd8a:	2b09      	cmp	r3, #9
 800dd8c:	d94b      	bls.n	800de26 <_vfiprintf_r+0x1a2>
 800dd8e:	b1b0      	cbz	r0, 800ddbe <_vfiprintf_r+0x13a>
 800dd90:	9207      	str	r2, [sp, #28]
 800dd92:	e014      	b.n	800ddbe <_vfiprintf_r+0x13a>
 800dd94:	eba0 0308 	sub.w	r3, r0, r8
 800dd98:	fa09 f303 	lsl.w	r3, r9, r3
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	9304      	str	r3, [sp, #16]
 800dda0:	46a2      	mov	sl, r4
 800dda2:	e7d2      	b.n	800dd4a <_vfiprintf_r+0xc6>
 800dda4:	9b03      	ldr	r3, [sp, #12]
 800dda6:	1d19      	adds	r1, r3, #4
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	9103      	str	r1, [sp, #12]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	bfbb      	ittet	lt
 800ddb0:	425b      	neglt	r3, r3
 800ddb2:	f042 0202 	orrlt.w	r2, r2, #2
 800ddb6:	9307      	strge	r3, [sp, #28]
 800ddb8:	9307      	strlt	r3, [sp, #28]
 800ddba:	bfb8      	it	lt
 800ddbc:	9204      	strlt	r2, [sp, #16]
 800ddbe:	7823      	ldrb	r3, [r4, #0]
 800ddc0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddc2:	d10a      	bne.n	800ddda <_vfiprintf_r+0x156>
 800ddc4:	7863      	ldrb	r3, [r4, #1]
 800ddc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddc8:	d132      	bne.n	800de30 <_vfiprintf_r+0x1ac>
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	1d1a      	adds	r2, r3, #4
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	9203      	str	r2, [sp, #12]
 800ddd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddd6:	3402      	adds	r4, #2
 800ddd8:	9305      	str	r3, [sp, #20]
 800ddda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800deb0 <_vfiprintf_r+0x22c>
 800ddde:	7821      	ldrb	r1, [r4, #0]
 800dde0:	2203      	movs	r2, #3
 800dde2:	4650      	mov	r0, sl
 800dde4:	f7f2 fa2c 	bl	8000240 <memchr>
 800dde8:	b138      	cbz	r0, 800ddfa <_vfiprintf_r+0x176>
 800ddea:	9b04      	ldr	r3, [sp, #16]
 800ddec:	eba0 000a 	sub.w	r0, r0, sl
 800ddf0:	2240      	movs	r2, #64	@ 0x40
 800ddf2:	4082      	lsls	r2, r0
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	3401      	adds	r4, #1
 800ddf8:	9304      	str	r3, [sp, #16]
 800ddfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddfe:	4829      	ldr	r0, [pc, #164]	@ (800dea4 <_vfiprintf_r+0x220>)
 800de00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de04:	2206      	movs	r2, #6
 800de06:	f7f2 fa1b 	bl	8000240 <memchr>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d03f      	beq.n	800de8e <_vfiprintf_r+0x20a>
 800de0e:	4b26      	ldr	r3, [pc, #152]	@ (800dea8 <_vfiprintf_r+0x224>)
 800de10:	bb1b      	cbnz	r3, 800de5a <_vfiprintf_r+0x1d6>
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	3307      	adds	r3, #7
 800de16:	f023 0307 	bic.w	r3, r3, #7
 800de1a:	3308      	adds	r3, #8
 800de1c:	9303      	str	r3, [sp, #12]
 800de1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de20:	443b      	add	r3, r7
 800de22:	9309      	str	r3, [sp, #36]	@ 0x24
 800de24:	e76a      	b.n	800dcfc <_vfiprintf_r+0x78>
 800de26:	fb0c 3202 	mla	r2, ip, r2, r3
 800de2a:	460c      	mov	r4, r1
 800de2c:	2001      	movs	r0, #1
 800de2e:	e7a8      	b.n	800dd82 <_vfiprintf_r+0xfe>
 800de30:	2300      	movs	r3, #0
 800de32:	3401      	adds	r4, #1
 800de34:	9305      	str	r3, [sp, #20]
 800de36:	4619      	mov	r1, r3
 800de38:	f04f 0c0a 	mov.w	ip, #10
 800de3c:	4620      	mov	r0, r4
 800de3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de42:	3a30      	subs	r2, #48	@ 0x30
 800de44:	2a09      	cmp	r2, #9
 800de46:	d903      	bls.n	800de50 <_vfiprintf_r+0x1cc>
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d0c6      	beq.n	800ddda <_vfiprintf_r+0x156>
 800de4c:	9105      	str	r1, [sp, #20]
 800de4e:	e7c4      	b.n	800ddda <_vfiprintf_r+0x156>
 800de50:	fb0c 2101 	mla	r1, ip, r1, r2
 800de54:	4604      	mov	r4, r0
 800de56:	2301      	movs	r3, #1
 800de58:	e7f0      	b.n	800de3c <_vfiprintf_r+0x1b8>
 800de5a:	ab03      	add	r3, sp, #12
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	462a      	mov	r2, r5
 800de60:	4b12      	ldr	r3, [pc, #72]	@ (800deac <_vfiprintf_r+0x228>)
 800de62:	a904      	add	r1, sp, #16
 800de64:	4630      	mov	r0, r6
 800de66:	f7fd fcd7 	bl	800b818 <_printf_float>
 800de6a:	4607      	mov	r7, r0
 800de6c:	1c78      	adds	r0, r7, #1
 800de6e:	d1d6      	bne.n	800de1e <_vfiprintf_r+0x19a>
 800de70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de72:	07d9      	lsls	r1, r3, #31
 800de74:	d405      	bmi.n	800de82 <_vfiprintf_r+0x1fe>
 800de76:	89ab      	ldrh	r3, [r5, #12]
 800de78:	059a      	lsls	r2, r3, #22
 800de7a:	d402      	bmi.n	800de82 <_vfiprintf_r+0x1fe>
 800de7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de7e:	f7fe fb61 	bl	800c544 <__retarget_lock_release_recursive>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	065b      	lsls	r3, r3, #25
 800de86:	f53f af1f 	bmi.w	800dcc8 <_vfiprintf_r+0x44>
 800de8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de8c:	e71e      	b.n	800dccc <_vfiprintf_r+0x48>
 800de8e:	ab03      	add	r3, sp, #12
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	462a      	mov	r2, r5
 800de94:	4b05      	ldr	r3, [pc, #20]	@ (800deac <_vfiprintf_r+0x228>)
 800de96:	a904      	add	r1, sp, #16
 800de98:	4630      	mov	r0, r6
 800de9a:	f7fd ff55 	bl	800bd48 <_printf_i>
 800de9e:	e7e4      	b.n	800de6a <_vfiprintf_r+0x1e6>
 800dea0:	0800f856 	.word	0x0800f856
 800dea4:	0800f860 	.word	0x0800f860
 800dea8:	0800b819 	.word	0x0800b819
 800deac:	0800dc5f 	.word	0x0800dc5f
 800deb0:	0800f85c 	.word	0x0800f85c

0800deb4 <__sflush_r>:
 800deb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800deb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800debc:	0716      	lsls	r6, r2, #28
 800debe:	4605      	mov	r5, r0
 800dec0:	460c      	mov	r4, r1
 800dec2:	d454      	bmi.n	800df6e <__sflush_r+0xba>
 800dec4:	684b      	ldr	r3, [r1, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	dc02      	bgt.n	800ded0 <__sflush_r+0x1c>
 800deca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800decc:	2b00      	cmp	r3, #0
 800dece:	dd48      	ble.n	800df62 <__sflush_r+0xae>
 800ded0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ded2:	2e00      	cmp	r6, #0
 800ded4:	d045      	beq.n	800df62 <__sflush_r+0xae>
 800ded6:	2300      	movs	r3, #0
 800ded8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dedc:	682f      	ldr	r7, [r5, #0]
 800dede:	6a21      	ldr	r1, [r4, #32]
 800dee0:	602b      	str	r3, [r5, #0]
 800dee2:	d030      	beq.n	800df46 <__sflush_r+0x92>
 800dee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	0759      	lsls	r1, r3, #29
 800deea:	d505      	bpl.n	800def8 <__sflush_r+0x44>
 800deec:	6863      	ldr	r3, [r4, #4]
 800deee:	1ad2      	subs	r2, r2, r3
 800def0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800def2:	b10b      	cbz	r3, 800def8 <__sflush_r+0x44>
 800def4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800def6:	1ad2      	subs	r2, r2, r3
 800def8:	2300      	movs	r3, #0
 800defa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800defc:	6a21      	ldr	r1, [r4, #32]
 800defe:	4628      	mov	r0, r5
 800df00:	47b0      	blx	r6
 800df02:	1c43      	adds	r3, r0, #1
 800df04:	89a3      	ldrh	r3, [r4, #12]
 800df06:	d106      	bne.n	800df16 <__sflush_r+0x62>
 800df08:	6829      	ldr	r1, [r5, #0]
 800df0a:	291d      	cmp	r1, #29
 800df0c:	d82b      	bhi.n	800df66 <__sflush_r+0xb2>
 800df0e:	4a2a      	ldr	r2, [pc, #168]	@ (800dfb8 <__sflush_r+0x104>)
 800df10:	40ca      	lsrs	r2, r1
 800df12:	07d6      	lsls	r6, r2, #31
 800df14:	d527      	bpl.n	800df66 <__sflush_r+0xb2>
 800df16:	2200      	movs	r2, #0
 800df18:	6062      	str	r2, [r4, #4]
 800df1a:	04d9      	lsls	r1, r3, #19
 800df1c:	6922      	ldr	r2, [r4, #16]
 800df1e:	6022      	str	r2, [r4, #0]
 800df20:	d504      	bpl.n	800df2c <__sflush_r+0x78>
 800df22:	1c42      	adds	r2, r0, #1
 800df24:	d101      	bne.n	800df2a <__sflush_r+0x76>
 800df26:	682b      	ldr	r3, [r5, #0]
 800df28:	b903      	cbnz	r3, 800df2c <__sflush_r+0x78>
 800df2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800df2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df2e:	602f      	str	r7, [r5, #0]
 800df30:	b1b9      	cbz	r1, 800df62 <__sflush_r+0xae>
 800df32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df36:	4299      	cmp	r1, r3
 800df38:	d002      	beq.n	800df40 <__sflush_r+0x8c>
 800df3a:	4628      	mov	r0, r5
 800df3c:	f7ff f95c 	bl	800d1f8 <_free_r>
 800df40:	2300      	movs	r3, #0
 800df42:	6363      	str	r3, [r4, #52]	@ 0x34
 800df44:	e00d      	b.n	800df62 <__sflush_r+0xae>
 800df46:	2301      	movs	r3, #1
 800df48:	4628      	mov	r0, r5
 800df4a:	47b0      	blx	r6
 800df4c:	4602      	mov	r2, r0
 800df4e:	1c50      	adds	r0, r2, #1
 800df50:	d1c9      	bne.n	800dee6 <__sflush_r+0x32>
 800df52:	682b      	ldr	r3, [r5, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d0c6      	beq.n	800dee6 <__sflush_r+0x32>
 800df58:	2b1d      	cmp	r3, #29
 800df5a:	d001      	beq.n	800df60 <__sflush_r+0xac>
 800df5c:	2b16      	cmp	r3, #22
 800df5e:	d11e      	bne.n	800df9e <__sflush_r+0xea>
 800df60:	602f      	str	r7, [r5, #0]
 800df62:	2000      	movs	r0, #0
 800df64:	e022      	b.n	800dfac <__sflush_r+0xf8>
 800df66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df6a:	b21b      	sxth	r3, r3
 800df6c:	e01b      	b.n	800dfa6 <__sflush_r+0xf2>
 800df6e:	690f      	ldr	r7, [r1, #16]
 800df70:	2f00      	cmp	r7, #0
 800df72:	d0f6      	beq.n	800df62 <__sflush_r+0xae>
 800df74:	0793      	lsls	r3, r2, #30
 800df76:	680e      	ldr	r6, [r1, #0]
 800df78:	bf08      	it	eq
 800df7a:	694b      	ldreq	r3, [r1, #20]
 800df7c:	600f      	str	r7, [r1, #0]
 800df7e:	bf18      	it	ne
 800df80:	2300      	movne	r3, #0
 800df82:	eba6 0807 	sub.w	r8, r6, r7
 800df86:	608b      	str	r3, [r1, #8]
 800df88:	f1b8 0f00 	cmp.w	r8, #0
 800df8c:	dde9      	ble.n	800df62 <__sflush_r+0xae>
 800df8e:	6a21      	ldr	r1, [r4, #32]
 800df90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df92:	4643      	mov	r3, r8
 800df94:	463a      	mov	r2, r7
 800df96:	4628      	mov	r0, r5
 800df98:	47b0      	blx	r6
 800df9a:	2800      	cmp	r0, #0
 800df9c:	dc08      	bgt.n	800dfb0 <__sflush_r+0xfc>
 800df9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfa6:	81a3      	strh	r3, [r4, #12]
 800dfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb0:	4407      	add	r7, r0
 800dfb2:	eba8 0800 	sub.w	r8, r8, r0
 800dfb6:	e7e7      	b.n	800df88 <__sflush_r+0xd4>
 800dfb8:	20400001 	.word	0x20400001

0800dfbc <_fflush_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	690b      	ldr	r3, [r1, #16]
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	b913      	cbnz	r3, 800dfcc <_fflush_r+0x10>
 800dfc6:	2500      	movs	r5, #0
 800dfc8:	4628      	mov	r0, r5
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	b118      	cbz	r0, 800dfd6 <_fflush_r+0x1a>
 800dfce:	6a03      	ldr	r3, [r0, #32]
 800dfd0:	b90b      	cbnz	r3, 800dfd6 <_fflush_r+0x1a>
 800dfd2:	f7fe f863 	bl	800c09c <__sinit>
 800dfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d0f3      	beq.n	800dfc6 <_fflush_r+0xa>
 800dfde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfe0:	07d0      	lsls	r0, r2, #31
 800dfe2:	d404      	bmi.n	800dfee <_fflush_r+0x32>
 800dfe4:	0599      	lsls	r1, r3, #22
 800dfe6:	d402      	bmi.n	800dfee <_fflush_r+0x32>
 800dfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfea:	f7fe faaa 	bl	800c542 <__retarget_lock_acquire_recursive>
 800dfee:	4628      	mov	r0, r5
 800dff0:	4621      	mov	r1, r4
 800dff2:	f7ff ff5f 	bl	800deb4 <__sflush_r>
 800dff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dff8:	07da      	lsls	r2, r3, #31
 800dffa:	4605      	mov	r5, r0
 800dffc:	d4e4      	bmi.n	800dfc8 <_fflush_r+0xc>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	059b      	lsls	r3, r3, #22
 800e002:	d4e1      	bmi.n	800dfc8 <_fflush_r+0xc>
 800e004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e006:	f7fe fa9d 	bl	800c544 <__retarget_lock_release_recursive>
 800e00a:	e7dd      	b.n	800dfc8 <_fflush_r+0xc>

0800e00c <__swhatbuf_r>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	460c      	mov	r4, r1
 800e010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e014:	2900      	cmp	r1, #0
 800e016:	b096      	sub	sp, #88	@ 0x58
 800e018:	4615      	mov	r5, r2
 800e01a:	461e      	mov	r6, r3
 800e01c:	da0d      	bge.n	800e03a <__swhatbuf_r+0x2e>
 800e01e:	89a3      	ldrh	r3, [r4, #12]
 800e020:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e024:	f04f 0100 	mov.w	r1, #0
 800e028:	bf14      	ite	ne
 800e02a:	2340      	movne	r3, #64	@ 0x40
 800e02c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e030:	2000      	movs	r0, #0
 800e032:	6031      	str	r1, [r6, #0]
 800e034:	602b      	str	r3, [r5, #0]
 800e036:	b016      	add	sp, #88	@ 0x58
 800e038:	bd70      	pop	{r4, r5, r6, pc}
 800e03a:	466a      	mov	r2, sp
 800e03c:	f000 f862 	bl	800e104 <_fstat_r>
 800e040:	2800      	cmp	r0, #0
 800e042:	dbec      	blt.n	800e01e <__swhatbuf_r+0x12>
 800e044:	9901      	ldr	r1, [sp, #4]
 800e046:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e04a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e04e:	4259      	negs	r1, r3
 800e050:	4159      	adcs	r1, r3
 800e052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e056:	e7eb      	b.n	800e030 <__swhatbuf_r+0x24>

0800e058 <__smakebuf_r>:
 800e058:	898b      	ldrh	r3, [r1, #12]
 800e05a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e05c:	079d      	lsls	r5, r3, #30
 800e05e:	4606      	mov	r6, r0
 800e060:	460c      	mov	r4, r1
 800e062:	d507      	bpl.n	800e074 <__smakebuf_r+0x1c>
 800e064:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	6123      	str	r3, [r4, #16]
 800e06c:	2301      	movs	r3, #1
 800e06e:	6163      	str	r3, [r4, #20]
 800e070:	b003      	add	sp, #12
 800e072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e074:	ab01      	add	r3, sp, #4
 800e076:	466a      	mov	r2, sp
 800e078:	f7ff ffc8 	bl	800e00c <__swhatbuf_r>
 800e07c:	9f00      	ldr	r7, [sp, #0]
 800e07e:	4605      	mov	r5, r0
 800e080:	4639      	mov	r1, r7
 800e082:	4630      	mov	r0, r6
 800e084:	f7fd fa9c 	bl	800b5c0 <_malloc_r>
 800e088:	b948      	cbnz	r0, 800e09e <__smakebuf_r+0x46>
 800e08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e08e:	059a      	lsls	r2, r3, #22
 800e090:	d4ee      	bmi.n	800e070 <__smakebuf_r+0x18>
 800e092:	f023 0303 	bic.w	r3, r3, #3
 800e096:	f043 0302 	orr.w	r3, r3, #2
 800e09a:	81a3      	strh	r3, [r4, #12]
 800e09c:	e7e2      	b.n	800e064 <__smakebuf_r+0xc>
 800e09e:	89a3      	ldrh	r3, [r4, #12]
 800e0a0:	6020      	str	r0, [r4, #0]
 800e0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a6:	81a3      	strh	r3, [r4, #12]
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e0ae:	b15b      	cbz	r3, 800e0c8 <__smakebuf_r+0x70>
 800e0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f000 f837 	bl	800e128 <_isatty_r>
 800e0ba:	b128      	cbz	r0, 800e0c8 <__smakebuf_r+0x70>
 800e0bc:	89a3      	ldrh	r3, [r4, #12]
 800e0be:	f023 0303 	bic.w	r3, r3, #3
 800e0c2:	f043 0301 	orr.w	r3, r3, #1
 800e0c6:	81a3      	strh	r3, [r4, #12]
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	431d      	orrs	r5, r3
 800e0cc:	81a5      	strh	r5, [r4, #12]
 800e0ce:	e7cf      	b.n	800e070 <__smakebuf_r+0x18>

0800e0d0 <memmove>:
 800e0d0:	4288      	cmp	r0, r1
 800e0d2:	b510      	push	{r4, lr}
 800e0d4:	eb01 0402 	add.w	r4, r1, r2
 800e0d8:	d902      	bls.n	800e0e0 <memmove+0x10>
 800e0da:	4284      	cmp	r4, r0
 800e0dc:	4623      	mov	r3, r4
 800e0de:	d807      	bhi.n	800e0f0 <memmove+0x20>
 800e0e0:	1e43      	subs	r3, r0, #1
 800e0e2:	42a1      	cmp	r1, r4
 800e0e4:	d008      	beq.n	800e0f8 <memmove+0x28>
 800e0e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0ee:	e7f8      	b.n	800e0e2 <memmove+0x12>
 800e0f0:	4402      	add	r2, r0
 800e0f2:	4601      	mov	r1, r0
 800e0f4:	428a      	cmp	r2, r1
 800e0f6:	d100      	bne.n	800e0fa <memmove+0x2a>
 800e0f8:	bd10      	pop	{r4, pc}
 800e0fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e102:	e7f7      	b.n	800e0f4 <memmove+0x24>

0800e104 <_fstat_r>:
 800e104:	b538      	push	{r3, r4, r5, lr}
 800e106:	4d07      	ldr	r5, [pc, #28]	@ (800e124 <_fstat_r+0x20>)
 800e108:	2300      	movs	r3, #0
 800e10a:	4604      	mov	r4, r0
 800e10c:	4608      	mov	r0, r1
 800e10e:	4611      	mov	r1, r2
 800e110:	602b      	str	r3, [r5, #0]
 800e112:	f7f5 f881 	bl	8003218 <_fstat>
 800e116:	1c43      	adds	r3, r0, #1
 800e118:	d102      	bne.n	800e120 <_fstat_r+0x1c>
 800e11a:	682b      	ldr	r3, [r5, #0]
 800e11c:	b103      	cbz	r3, 800e120 <_fstat_r+0x1c>
 800e11e:	6023      	str	r3, [r4, #0]
 800e120:	bd38      	pop	{r3, r4, r5, pc}
 800e122:	bf00      	nop
 800e124:	2000265c 	.word	0x2000265c

0800e128 <_isatty_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4d06      	ldr	r5, [pc, #24]	@ (800e144 <_isatty_r+0x1c>)
 800e12c:	2300      	movs	r3, #0
 800e12e:	4604      	mov	r4, r0
 800e130:	4608      	mov	r0, r1
 800e132:	602b      	str	r3, [r5, #0]
 800e134:	f7f5 f880 	bl	8003238 <_isatty>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	d102      	bne.n	800e142 <_isatty_r+0x1a>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	b103      	cbz	r3, 800e142 <_isatty_r+0x1a>
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	bd38      	pop	{r3, r4, r5, pc}
 800e144:	2000265c 	.word	0x2000265c

0800e148 <memcpy>:
 800e148:	440a      	add	r2, r1
 800e14a:	4291      	cmp	r1, r2
 800e14c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e150:	d100      	bne.n	800e154 <memcpy+0xc>
 800e152:	4770      	bx	lr
 800e154:	b510      	push	{r4, lr}
 800e156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e15a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e15e:	4291      	cmp	r1, r2
 800e160:	d1f9      	bne.n	800e156 <memcpy+0xe>
 800e162:	bd10      	pop	{r4, pc}

0800e164 <__assert_func>:
 800e164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e166:	4614      	mov	r4, r2
 800e168:	461a      	mov	r2, r3
 800e16a:	4b09      	ldr	r3, [pc, #36]	@ (800e190 <__assert_func+0x2c>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4605      	mov	r5, r0
 800e170:	68d8      	ldr	r0, [r3, #12]
 800e172:	b14c      	cbz	r4, 800e188 <__assert_func+0x24>
 800e174:	4b07      	ldr	r3, [pc, #28]	@ (800e194 <__assert_func+0x30>)
 800e176:	9100      	str	r1, [sp, #0]
 800e178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e17c:	4906      	ldr	r1, [pc, #24]	@ (800e198 <__assert_func+0x34>)
 800e17e:	462b      	mov	r3, r5
 800e180:	f000 f870 	bl	800e264 <fiprintf>
 800e184:	f000 f880 	bl	800e288 <abort>
 800e188:	4b04      	ldr	r3, [pc, #16]	@ (800e19c <__assert_func+0x38>)
 800e18a:	461c      	mov	r4, r3
 800e18c:	e7f3      	b.n	800e176 <__assert_func+0x12>
 800e18e:	bf00      	nop
 800e190:	20000030 	.word	0x20000030
 800e194:	0800f871 	.word	0x0800f871
 800e198:	0800f87e 	.word	0x0800f87e
 800e19c:	0800f8ac 	.word	0x0800f8ac

0800e1a0 <_calloc_r>:
 800e1a0:	b570      	push	{r4, r5, r6, lr}
 800e1a2:	fba1 5402 	umull	r5, r4, r1, r2
 800e1a6:	b934      	cbnz	r4, 800e1b6 <_calloc_r+0x16>
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7fd fa09 	bl	800b5c0 <_malloc_r>
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	b928      	cbnz	r0, 800e1be <_calloc_r+0x1e>
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	bd70      	pop	{r4, r5, r6, pc}
 800e1b6:	220c      	movs	r2, #12
 800e1b8:	6002      	str	r2, [r0, #0]
 800e1ba:	2600      	movs	r6, #0
 800e1bc:	e7f9      	b.n	800e1b2 <_calloc_r+0x12>
 800e1be:	462a      	mov	r2, r5
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	f7fe f91f 	bl	800c404 <memset>
 800e1c6:	e7f4      	b.n	800e1b2 <_calloc_r+0x12>

0800e1c8 <__ascii_mbtowc>:
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	b901      	cbnz	r1, 800e1ce <__ascii_mbtowc+0x6>
 800e1cc:	a901      	add	r1, sp, #4
 800e1ce:	b142      	cbz	r2, 800e1e2 <__ascii_mbtowc+0x1a>
 800e1d0:	b14b      	cbz	r3, 800e1e6 <__ascii_mbtowc+0x1e>
 800e1d2:	7813      	ldrb	r3, [r2, #0]
 800e1d4:	600b      	str	r3, [r1, #0]
 800e1d6:	7812      	ldrb	r2, [r2, #0]
 800e1d8:	1e10      	subs	r0, r2, #0
 800e1da:	bf18      	it	ne
 800e1dc:	2001      	movne	r0, #1
 800e1de:	b002      	add	sp, #8
 800e1e0:	4770      	bx	lr
 800e1e2:	4610      	mov	r0, r2
 800e1e4:	e7fb      	b.n	800e1de <__ascii_mbtowc+0x16>
 800e1e6:	f06f 0001 	mvn.w	r0, #1
 800e1ea:	e7f8      	b.n	800e1de <__ascii_mbtowc+0x16>

0800e1ec <_realloc_r>:
 800e1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f0:	4607      	mov	r7, r0
 800e1f2:	4614      	mov	r4, r2
 800e1f4:	460d      	mov	r5, r1
 800e1f6:	b921      	cbnz	r1, 800e202 <_realloc_r+0x16>
 800e1f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	f7fd b9df 	b.w	800b5c0 <_malloc_r>
 800e202:	b92a      	cbnz	r2, 800e210 <_realloc_r+0x24>
 800e204:	f7fe fff8 	bl	800d1f8 <_free_r>
 800e208:	4625      	mov	r5, r4
 800e20a:	4628      	mov	r0, r5
 800e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e210:	f000 f841 	bl	800e296 <_malloc_usable_size_r>
 800e214:	4284      	cmp	r4, r0
 800e216:	4606      	mov	r6, r0
 800e218:	d802      	bhi.n	800e220 <_realloc_r+0x34>
 800e21a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e21e:	d8f4      	bhi.n	800e20a <_realloc_r+0x1e>
 800e220:	4621      	mov	r1, r4
 800e222:	4638      	mov	r0, r7
 800e224:	f7fd f9cc 	bl	800b5c0 <_malloc_r>
 800e228:	4680      	mov	r8, r0
 800e22a:	b908      	cbnz	r0, 800e230 <_realloc_r+0x44>
 800e22c:	4645      	mov	r5, r8
 800e22e:	e7ec      	b.n	800e20a <_realloc_r+0x1e>
 800e230:	42b4      	cmp	r4, r6
 800e232:	4622      	mov	r2, r4
 800e234:	4629      	mov	r1, r5
 800e236:	bf28      	it	cs
 800e238:	4632      	movcs	r2, r6
 800e23a:	f7ff ff85 	bl	800e148 <memcpy>
 800e23e:	4629      	mov	r1, r5
 800e240:	4638      	mov	r0, r7
 800e242:	f7fe ffd9 	bl	800d1f8 <_free_r>
 800e246:	e7f1      	b.n	800e22c <_realloc_r+0x40>

0800e248 <__ascii_wctomb>:
 800e248:	4603      	mov	r3, r0
 800e24a:	4608      	mov	r0, r1
 800e24c:	b141      	cbz	r1, 800e260 <__ascii_wctomb+0x18>
 800e24e:	2aff      	cmp	r2, #255	@ 0xff
 800e250:	d904      	bls.n	800e25c <__ascii_wctomb+0x14>
 800e252:	228a      	movs	r2, #138	@ 0x8a
 800e254:	601a      	str	r2, [r3, #0]
 800e256:	f04f 30ff 	mov.w	r0, #4294967295
 800e25a:	4770      	bx	lr
 800e25c:	700a      	strb	r2, [r1, #0]
 800e25e:	2001      	movs	r0, #1
 800e260:	4770      	bx	lr
	...

0800e264 <fiprintf>:
 800e264:	b40e      	push	{r1, r2, r3}
 800e266:	b503      	push	{r0, r1, lr}
 800e268:	4601      	mov	r1, r0
 800e26a:	ab03      	add	r3, sp, #12
 800e26c:	4805      	ldr	r0, [pc, #20]	@ (800e284 <fiprintf+0x20>)
 800e26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e272:	6800      	ldr	r0, [r0, #0]
 800e274:	9301      	str	r3, [sp, #4]
 800e276:	f7ff fd05 	bl	800dc84 <_vfiprintf_r>
 800e27a:	b002      	add	sp, #8
 800e27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e280:	b003      	add	sp, #12
 800e282:	4770      	bx	lr
 800e284:	20000030 	.word	0x20000030

0800e288 <abort>:
 800e288:	b508      	push	{r3, lr}
 800e28a:	2006      	movs	r0, #6
 800e28c:	f000 f834 	bl	800e2f8 <raise>
 800e290:	2001      	movs	r0, #1
 800e292:	f7f4 ff71 	bl	8003178 <_exit>

0800e296 <_malloc_usable_size_r>:
 800e296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e29a:	1f18      	subs	r0, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	bfbc      	itt	lt
 800e2a0:	580b      	ldrlt	r3, [r1, r0]
 800e2a2:	18c0      	addlt	r0, r0, r3
 800e2a4:	4770      	bx	lr

0800e2a6 <_raise_r>:
 800e2a6:	291f      	cmp	r1, #31
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	d904      	bls.n	800e2ba <_raise_r+0x14>
 800e2b0:	2316      	movs	r3, #22
 800e2b2:	6003      	str	r3, [r0, #0]
 800e2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2bc:	b112      	cbz	r2, 800e2c4 <_raise_r+0x1e>
 800e2be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2c2:	b94b      	cbnz	r3, 800e2d8 <_raise_r+0x32>
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	f000 f831 	bl	800e32c <_getpid_r>
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	4601      	mov	r1, r0
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2d4:	f000 b818 	b.w	800e308 <_kill_r>
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d00a      	beq.n	800e2f2 <_raise_r+0x4c>
 800e2dc:	1c59      	adds	r1, r3, #1
 800e2de:	d103      	bne.n	800e2e8 <_raise_r+0x42>
 800e2e0:	2316      	movs	r3, #22
 800e2e2:	6003      	str	r3, [r0, #0]
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	e7e7      	b.n	800e2b8 <_raise_r+0x12>
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	4798      	blx	r3
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	e7e0      	b.n	800e2b8 <_raise_r+0x12>
	...

0800e2f8 <raise>:
 800e2f8:	4b02      	ldr	r3, [pc, #8]	@ (800e304 <raise+0xc>)
 800e2fa:	4601      	mov	r1, r0
 800e2fc:	6818      	ldr	r0, [r3, #0]
 800e2fe:	f7ff bfd2 	b.w	800e2a6 <_raise_r>
 800e302:	bf00      	nop
 800e304:	20000030 	.word	0x20000030

0800e308 <_kill_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4d07      	ldr	r5, [pc, #28]	@ (800e328 <_kill_r+0x20>)
 800e30c:	2300      	movs	r3, #0
 800e30e:	4604      	mov	r4, r0
 800e310:	4608      	mov	r0, r1
 800e312:	4611      	mov	r1, r2
 800e314:	602b      	str	r3, [r5, #0]
 800e316:	f7f4 ff1f 	bl	8003158 <_kill>
 800e31a:	1c43      	adds	r3, r0, #1
 800e31c:	d102      	bne.n	800e324 <_kill_r+0x1c>
 800e31e:	682b      	ldr	r3, [r5, #0]
 800e320:	b103      	cbz	r3, 800e324 <_kill_r+0x1c>
 800e322:	6023      	str	r3, [r4, #0]
 800e324:	bd38      	pop	{r3, r4, r5, pc}
 800e326:	bf00      	nop
 800e328:	2000265c 	.word	0x2000265c

0800e32c <_getpid_r>:
 800e32c:	f7f4 bf0c 	b.w	8003148 <_getpid>

0800e330 <_init>:
 800e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e332:	bf00      	nop
 800e334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e336:	bc08      	pop	{r3}
 800e338:	469e      	mov	lr, r3
 800e33a:	4770      	bx	lr

0800e33c <_fini>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	bf00      	nop
 800e340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e342:	bc08      	pop	{r3}
 800e344:	469e      	mov	lr, r3
 800e346:	4770      	bx	lr
