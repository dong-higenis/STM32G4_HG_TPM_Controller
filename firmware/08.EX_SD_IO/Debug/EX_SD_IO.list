
EX_SD_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d434  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d6c  0800d618  0800d618  0000e618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e384  0800e384  000101ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e384  0800e384  0000f384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e38c  0800e38c  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e38c  0800e38c  0000f38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e390  0800e390  0000f390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800e394  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026b8  200001ec  0800e580  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028a4  0800e580  000108a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014de2  00000000  00000000  0001021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f7  00000000  00000000  00024ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  000284f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5d  00000000  00000000  00029678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209b2  00000000  00000000  0002a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195bc  00000000  00000000  0004ad87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcb79  00000000  00000000  00064343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120ebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005888  00000000  00000000  00120f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00126788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d5fc 	.word	0x0800d5fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800d5fc 	.word	0x0800d5fc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b988 	b.w	8000f40 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	468e      	mov	lr, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	4688      	mov	r8, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d962      	bls.n	8000d24 <__udivmoddi4+0xdc>
 8000c5e:	fab2 f682 	clz	r6, r2
 8000c62:	b14e      	cbz	r6, 8000c78 <__udivmoddi4+0x30>
 8000c64:	f1c6 0320 	rsb	r3, r6, #32
 8000c68:	fa01 f806 	lsl.w	r8, r1, r6
 8000c6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	ea43 0808 	orr.w	r8, r3, r8
 8000c76:	40b4      	lsls	r4, r6
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c84:	0c23      	lsrs	r3, r4, #16
 8000c86:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c9c:	f080 80ea 	bcs.w	8000e74 <__udivmoddi4+0x22c>
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f240 80e7 	bls.w	8000e74 <__udivmoddi4+0x22c>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	1a9a      	subs	r2, r3, r2
 8000cac:	b2a3      	uxth	r3, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cba:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cbe:	459c      	cmp	ip, r3
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x8e>
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc8:	f080 80d6 	bcs.w	8000e78 <__udivmoddi4+0x230>
 8000ccc:	459c      	cmp	ip, r3
 8000cce:	f240 80d3 	bls.w	8000e78 <__udivmoddi4+0x230>
 8000cd2:	443b      	add	r3, r7
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cda:	eba3 030c 	sub.w	r3, r3, ip
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11d      	cbz	r5, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40f3      	lsrs	r3, r6
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d905      	bls.n	8000cfe <__udivmoddi4+0xb6>
 8000cf2:	b10d      	cbz	r5, 8000cf8 <__udivmoddi4+0xb0>
 8000cf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e7f5      	b.n	8000cea <__udivmoddi4+0xa2>
 8000cfe:	fab3 f183 	clz	r1, r3
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d146      	bne.n	8000d94 <__udivmoddi4+0x14c>
 8000d06:	4573      	cmp	r3, lr
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xc8>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 8105 	bhi.w	8000f1a <__udivmoddi4+0x2d2>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	4690      	mov	r8, r2
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e5      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d1e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d22:	e7e2      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f000 8090 	beq.w	8000e4a <__udivmoddi4+0x202>
 8000d2a:	fab2 f682 	clz	r6, r2
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f040 80a4 	bne.w	8000e7c <__udivmoddi4+0x234>
 8000d34:	1a8a      	subs	r2, r1, r2
 8000d36:	0c03      	lsrs	r3, r0, #16
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	b280      	uxth	r0, r0
 8000d3e:	b2bc      	uxth	r4, r7
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d46:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x11e>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x11c>
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f200 80e0 	bhi.w	8000f24 <__udivmoddi4+0x2dc>
 8000d64:	46c4      	mov	ip, r8
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d6c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d70:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d74:	fb02 f404 	mul.w	r4, r2, r4
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x144>
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x142>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f200 80ca 	bhi.w	8000f1e <__udivmoddi4+0x2d6>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000d94:	f1c1 0620 	rsb	r6, r1, #32
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	431f      	orrs	r7, r3
 8000da0:	fa0e f401 	lsl.w	r4, lr, r1
 8000da4:	fa20 f306 	lsr.w	r3, r0, r6
 8000da8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db0:	4323      	orrs	r3, r4
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	fa1f fc87 	uxth.w	ip, r7
 8000dba:	fbbe f0f9 	udiv	r0, lr, r9
 8000dbe:	0c1c      	lsrs	r4, r3, #16
 8000dc0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dc4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dc8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x1a0>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dda:	f080 809c 	bcs.w	8000f16 <__udivmoddi4+0x2ce>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f240 8099 	bls.w	8000f16 <__udivmoddi4+0x2ce>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	fa1f fe83 	uxth.w	lr, r3
 8000df0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df4:	fb09 4413 	mls	r4, r9, r3, r4
 8000df8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dfc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1ce>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e0a:	f080 8082 	bcs.w	8000f12 <__udivmoddi4+0x2ca>
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d97f      	bls.n	8000f12 <__udivmoddi4+0x2ca>
 8000e12:	3b02      	subs	r3, #2
 8000e14:	443c      	add	r4, r7
 8000e16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e22:	4564      	cmp	r4, ip
 8000e24:	4673      	mov	r3, lr
 8000e26:	46e1      	mov	r9, ip
 8000e28:	d362      	bcc.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e2a:	d05f      	beq.n	8000eec <__udivmoddi4+0x2a4>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x1fe>
 8000e2e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e32:	eb64 0409 	sbc.w	r4, r4, r9
 8000e36:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e3e:	431e      	orrs	r6, r3
 8000e40:	40cc      	lsrs	r4, r1
 8000e42:	e9c5 6400 	strd	r6, r4, [r5]
 8000e46:	2100      	movs	r1, #0
 8000e48:	e74f      	b.n	8000cea <__udivmoddi4+0xa2>
 8000e4a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e4e:	0c01      	lsrs	r1, r0, #16
 8000e50:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e54:	b280      	uxth	r0, r0
 8000e56:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	463c      	mov	r4, r7
 8000e60:	46b8      	mov	r8, r7
 8000e62:	46be      	mov	lr, r7
 8000e64:	2620      	movs	r6, #32
 8000e66:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e6a:	eba2 0208 	sub.w	r2, r2, r8
 8000e6e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e72:	e766      	b.n	8000d42 <__udivmoddi4+0xfa>
 8000e74:	4601      	mov	r1, r0
 8000e76:	e718      	b.n	8000caa <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e72c      	b.n	8000cd6 <__udivmoddi4+0x8e>
 8000e7c:	f1c6 0220 	rsb	r2, r6, #32
 8000e80:	fa2e f302 	lsr.w	r3, lr, r2
 8000e84:	40b7      	lsls	r7, r6
 8000e86:	40b1      	lsls	r1, r6
 8000e88:	fa20 f202 	lsr.w	r2, r0, r2
 8000e8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e90:	430a      	orrs	r2, r1
 8000e92:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e96:	b2bc      	uxth	r4, r7
 8000e98:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb08 f904 	mul.w	r9, r8, r4
 8000ea6:	40b0      	lsls	r0, r6
 8000ea8:	4589      	cmp	r9, r1
 8000eaa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eae:	b280      	uxth	r0, r0
 8000eb0:	d93e      	bls.n	8000f30 <__udivmoddi4+0x2e8>
 8000eb2:	1879      	adds	r1, r7, r1
 8000eb4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000eb8:	d201      	bcs.n	8000ebe <__udivmoddi4+0x276>
 8000eba:	4589      	cmp	r9, r1
 8000ebc:	d81f      	bhi.n	8000efe <__udivmoddi4+0x2b6>
 8000ebe:	eba1 0109 	sub.w	r1, r1, r9
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fb09 f804 	mul.w	r8, r9, r4
 8000eca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d229      	bcs.n	8000f2c <__udivmoddi4+0x2e4>
 8000ed8:	18ba      	adds	r2, r7, r2
 8000eda:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ede:	d2c4      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee0:	4542      	cmp	r2, r8
 8000ee2:	d2c2      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ee8:	443a      	add	r2, r7
 8000eea:	e7be      	b.n	8000e6a <__udivmoddi4+0x222>
 8000eec:	45f0      	cmp	r8, lr
 8000eee:	d29d      	bcs.n	8000e2c <__udivmoddi4+0x1e4>
 8000ef0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ef4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ef8:	3801      	subs	r0, #1
 8000efa:	46e1      	mov	r9, ip
 8000efc:	e796      	b.n	8000e2c <__udivmoddi4+0x1e4>
 8000efe:	eba7 0909 	sub.w	r9, r7, r9
 8000f02:	4449      	add	r1, r9
 8000f04:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f08:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0c:	fb09 f804 	mul.w	r8, r9, r4
 8000f10:	e7db      	b.n	8000eca <__udivmoddi4+0x282>
 8000f12:	4673      	mov	r3, lr
 8000f14:	e77f      	b.n	8000e16 <__udivmoddi4+0x1ce>
 8000f16:	4650      	mov	r0, sl
 8000f18:	e766      	b.n	8000de8 <__udivmoddi4+0x1a0>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e6fd      	b.n	8000d1a <__udivmoddi4+0xd2>
 8000f1e:	443b      	add	r3, r7
 8000f20:	3a02      	subs	r2, #2
 8000f22:	e733      	b.n	8000d8c <__udivmoddi4+0x144>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	443b      	add	r3, r7
 8000f2a:	e71c      	b.n	8000d66 <__udivmoddi4+0x11e>
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	e79c      	b.n	8000e6a <__udivmoddi4+0x222>
 8000f30:	eba1 0109 	sub.w	r1, r1, r9
 8000f34:	46c4      	mov	ip, r8
 8000f36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3a:	fb09 f804 	mul.w	r8, r9, r4
 8000f3e:	e7c4      	b.n	8000eca <__udivmoddi4+0x282>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4e:	4a15      	ldr	r2, [pc, #84]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_DMA_Init+0x60>)
 8000f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	200b      	movs	r0, #11
 8000f80:	f001 fd49 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f84:	200b      	movs	r0, #11
 8000f86:	f001 fd60 	bl	8002a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	200c      	movs	r0, #12
 8000f90:	f001 fd41 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f94:	200c      	movs	r0, #12
 8000f96:	f001 fd58 	bl	8002a4a <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <SELECT>:
 * SPI 함수들 ( SPI 신호 동작관련 )
 **************************************/

/* 슬레이브 선택! */
static void SELECT(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);  // CS를 LOW로
 8000fac:	2200      	movs	r2, #0
 8000fae:	2110      	movs	r1, #16
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb4:	f002 f984 	bl	80032c0 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f001 fc2f 	bl	800281c <HAL_Delay>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <DESELECT>:

/* 슬레이브 선택 해제! */
static void DESELECT(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);    // CS를 HIGH로
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2110      	movs	r1, #16
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f002 f977 	bl	80032c0 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f001 fc22 	bl	800281c <HAL_Delay>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SPI_TxByte>:

/* SPI 데이터 송신! */
static void SPI_TxByte(uint8_t data)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE)); // TX 버퍼 비울 때까지 대기
 8000fe6:	bf00      	nop
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <SPI_TxByte+0x30>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d1f8      	bne.n	8000fe8 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT); // 1바이트 전송
 8000ff6:	1df9      	adds	r1, r7, #7
 8000ff8:	2364      	movs	r3, #100	@ 0x64
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4803      	ldr	r0, [pc, #12]	@ (800100c <SPI_TxByte+0x30>)
 8000ffe:	f003 f9f4 	bl	80043ea <HAL_SPI_Transmit>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000235c 	.word	0x2000235c

08001010 <SPI_TxBuffer>:

/* SPI 전송 버퍼! */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800101c:	bf00      	nop
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <SPI_TxBuffer+0x30>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b02      	cmp	r3, #2
 800102a:	d1f8      	bne.n	800101e <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	2364      	movs	r3, #100	@ 0x64
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <SPI_TxBuffer+0x30>)
 8001034:	f003 f9d9 	bl	80043ea <HAL_SPI_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000235c 	.word	0x2000235c

08001044 <SPI_RxByte>:

/* SPI 데이터 수신! */
static uint8_t SPI_RxByte(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF; // SD카드는 0xFF를 보내야 응답함
 800104a:	23ff      	movs	r3, #255	@ 0xff
 800104c:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800104e:	bf00      	nop
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <SPI_RxByte+0x34>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b02      	cmp	r3, #2
 800105c:	d1f8      	bne.n	8001050 <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800105e:	1dba      	adds	r2, r7, #6
 8001060:	1df9      	adds	r1, r7, #7
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <SPI_RxByte+0x34>)
 800106a:	f003 fb34 	bl	80046d6 <HAL_SPI_TransmitReceive>

    return data;
 800106e:	79bb      	ldrb	r3, [r7, #6]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000235c 	.word	0x2000235c

0800107c <SPI_RxBytePtr>:

/* 포인터를 통한 SPI 수신 데이터  */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8001084:	f7ff ffde 	bl	8001044 <SPI_RxByte>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <SD_ReadyWait>:
 * SD 함수
 **************************************/

/*  SD카드 준비 상태 확인 */
static uint8_t SD_ReadyWait(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms 타임아웃 설정 */
    Timer2 = 500;
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <SD_ReadyWait+0x30>)
 80010a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010a4:	801a      	strh	r2, [r3, #0]
		0x00: 바쁨 (busy)
		기타값: 에러 또는 처리중
     */

    do {
        res = SPI_RxByte();
 80010a6:	f7ff ffcd 	bl	8001044 <SPI_RxByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2bff      	cmp	r3, #255	@ 0xff
 80010b2:	d004      	beq.n	80010be <SD_ReadyWait+0x26>
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SD_ReadyWait+0x30>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f3      	bne.n	80010a6 <SD_ReadyWait+0xe>

    return res;
 80010be:	79fb      	ldrb	r3, [r7, #7]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000020a 	.word	0x2000020a

080010cc <SD_PowerOn>:

/* 전원 제어 */
static void SD_PowerOn(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF; // 약 8000번 시도
 80010d2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010d6:	60fb      	str	r3, [r7, #12]

    /* 1단계: 웨이크업 시퀀스 */
    DESELECT(); // 슬레이브 선택 해제!
 80010d8:	f7ff ff73 	bl	8000fc2 <DESELECT>
    for(int i = 0; i < 10; i++)
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	e005      	b.n	80010ee <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF); // 80클럭 펄스 생성 (10바이트 × 8비트)
 80010e2:	20ff      	movs	r0, #255	@ 0xff
 80010e4:	f7ff ff7a 	bl	8000fdc <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	ddf6      	ble.n	80010e2 <SD_PowerOn+0x16>
    }

    /* 슬레이브 선택! */
    SELECT();
 80010f4:	f7ff ff58 	bl	8000fa8 <SELECT>

    /* 2단계: 카드 선택 및 IDLE 명령 */
    args[0] = CMD0;     // 명령어: GO_IDLE_STATE
 80010f8:	2340      	movs	r3, #64	@ 0x40
 80010fa:	703b      	strb	r3, [r7, #0]
    args[1] = 0;        // 인수 [31:24] = 0
 80010fc:	2300      	movs	r3, #0
 80010fe:	707b      	strb	r3, [r7, #1]
    args[2] = 0;        // 인수 [23:16] = 0
 8001100:	2300      	movs	r3, #0
 8001102:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;        // 인수 [15:8] = 0
 8001104:	2300      	movs	r3, #0
 8001106:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;        // 인수 [7:0] = 0
 8001108:	2300      	movs	r3, #0
 800110a:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     // CRC (CMD0용 고정값)
 800110c:	2395      	movs	r3, #149	@ 0x95
 800110e:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args)); // 6바이트 전송
 8001110:	463b      	mov	r3, r7
 8001112:	2106      	movs	r1, #6
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff7b 	bl	8001010 <SPI_TxBuffer>

    /* 3단계: 응답 대기 (R1 응답 = 0x01 기대) */
    while ((SPI_RxByte() != 0x01) && cnt)
 800111a:	e002      	b.n	8001122 <SD_PowerOn+0x56>
    {
        cnt--; // 타임아웃 카운터
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3b01      	subs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 8001122:	f7ff ff8f 	bl	8001044 <SPI_RxByte>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d002      	beq.n	8001132 <SD_PowerOn+0x66>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f4      	bne.n	800111c <SD_PowerOn+0x50>
    }

    DESELECT(); // 명령 완료 후 비활성화
 8001132:	f7ff ff46 	bl	8000fc2 <DESELECT>
    SPI_TxByte(0XFF); // 추가 클럭 제공
 8001136:	20ff      	movs	r0, #255	@ 0xff
 8001138:	f7ff ff50 	bl	8000fdc <SPI_TxByte>

    PowerFlag = 1; // 전원 상태 플래그 설정
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <SD_PowerOn+0x80>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000020d 	.word	0x2000020d

08001150 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <SD_PowerOff+0x14>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	2000020d 	.word	0x2000020d

08001168 <SD_CheckPower>:

/* Power Flag 체크용 함수! */
static uint8_t SD_CheckPower(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
    return PowerFlag;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <SD_CheckPower+0x14>)
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000020d 	.word	0x2000020d

08001180 <SD_RxDataBlock>:

/* 데이터 블록 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* 200ms 타임아웃 */
    Timer1 = 200;
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <SD_RxDataBlock+0x5c>)
 800118c:	22c8      	movs	r2, #200	@ 0xc8
 800118e:	801a      	strh	r2, [r3, #0]

    /* 응답을 받을때 까지 or 타임아웃 시간까지 루프를 돕니다. */
    // 1단계: 데이터 토큰 대기
    do {
        token = SPI_RxByte();
 8001190:	f7ff ff58 	bl	8001044 <SPI_RxByte>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2bff      	cmp	r3, #255	@ 0xff
 800119c:	d104      	bne.n	80011a8 <SD_RxDataBlock+0x28>
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <SD_RxDataBlock+0x5c>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f3      	bne.n	8001190 <SD_RxDataBlock+0x10>

    // 2단계: 토큰 검증
    if(token != 0xFE) return FALSE;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80011ac:	d007      	beq.n	80011be <SD_RxDataBlock+0x3e>
 80011ae:	2300      	movs	r3, #0
 80011b0:	e00f      	b.n	80011d2 <SD_RxDataBlock+0x52>

    // 3단계: 실제 데이터 수신
    while(len--) {
        SPI_RxBytePtr(buff++);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5f 	bl	800107c <SPI_RxBytePtr>
    while(len--) {
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	603a      	str	r2, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f4      	bne.n	80011b2 <SD_RxDataBlock+0x32>
    }

    // 4단계: CRC 무시 (사용 안 함)
    SPI_RxByte();
 80011c8:	f7ff ff3c 	bl	8001044 <SPI_RxByte>
    SPI_RxByte();
 80011cc:	f7ff ff3a 	bl	8001044 <SPI_RxByte>

    return TRUE;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000208 	.word	0x20000208

080011e0 <SD_TxDataBlock>:


/* 데이터 블록 전송 */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 80011ec:	23ff      	movs	r3, #255	@ 0xff
 80011ee:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73bb      	strb	r3, [r7, #14]

    // 1단계: 카드 준비 상태 확인
    if (SD_ReadyWait() != 0xFF) return FALSE;
 80011f4:	f7ff ff50 	bl	8001098 <SD_ReadyWait>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2bff      	cmp	r3, #255	@ 0xff
 80011fc:	d001      	beq.n	8001202 <SD_TxDataBlock+0x22>
 80011fe:	2300      	movs	r3, #0
 8001200:	e037      	b.n	8001272 <SD_TxDataBlock+0x92>

    // 2단계: 토큰 전송
    SPI_TxByte(token); // 0xFE(단일블록) 또는 0xFC(다중블록)
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fee9 	bl	8000fdc <SPI_TxByte>

    // 3단계: 데이터 전송 (STOP 토큰이 아닌 경우만)
    if (token != 0xFD) // 0xFD = STOP_TRANSMISSION 토큰
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	2bfd      	cmp	r3, #253	@ 0xfd
 800120e:	d028      	beq.n	8001262 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);  // 512바이트 데이터
 8001210:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fefb 	bl	8001010 <SPI_TxBuffer>

        SPI_RxByte();  // 더미 CRC 상위
 800121a:	f7ff ff13 	bl	8001044 <SPI_RxByte>
        SPI_RxByte();  // 더미 CRC 하위
 800121e:	f7ff ff11 	bl	8001044 <SPI_RxByte>

        // 4단계: 데이터 응답 토큰 수신
        while (i <= 64)
 8001222:	e00b      	b.n	800123c <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 8001224:	f7ff ff0e 	bl	8001044 <SPI_RxByte>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]

            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2b05      	cmp	r3, #5
 8001234:	d006      	beq.n	8001244 <SD_TxDataBlock+0x64>
            i++;
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	3301      	adds	r3, #1
 800123a:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	2b40      	cmp	r3, #64	@ 0x40
 8001240:	d9f0      	bls.n	8001224 <SD_TxDataBlock+0x44>
 8001242:	e000      	b.n	8001246 <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 8001244:	bf00      	nop
        }

        // 5단계: 바쁨 상태 대기
        Timer1 = 200; // 200ms 타임아웃
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <SD_TxDataBlock+0x9c>)
 8001248:	22c8      	movs	r2, #200	@ 0xc8
 800124a:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 800124c:	bf00      	nop
 800124e:	f7ff fef9 	bl	8001044 <SPI_RxByte>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d104      	bne.n	8001262 <SD_TxDataBlock+0x82>
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <SD_TxDataBlock+0x9c>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f5      	bne.n	800124e <SD_TxDataBlock+0x6e>
    }
    if ((resp & 0x1F) == 0x05) return TRUE;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	2b05      	cmp	r3, #5
 800126a:	d101      	bne.n	8001270 <SD_TxDataBlock+0x90>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <SD_TxDataBlock+0x92>

    return FALSE;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000208 	.word	0x20000208

08001280 <SD_SendCmd>:
#endif /* _USE_WRITE */


/* 명령어 전송 함수!*/
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    // 1단계: 카드 준비 대기
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 800128c:	f7ff ff04 	bl	8001098 <SD_ReadyWait>
 8001290:	4603      	mov	r3, r0
 8001292:	2bff      	cmp	r3, #255	@ 0xff
 8001294:	d001      	beq.n	800129a <SD_SendCmd+0x1a>
 8001296:	23ff      	movs	r3, #255	@ 0xff
 8001298:	e042      	b.n	8001320 <SD_SendCmd+0xa0>

    // 2단계: 명령어 패킷 전송 (6바이트)
    SPI_TxByte(cmd);                    // 명령어 바이트
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe9d 	bl	8000fdc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   // 인수 [31:24]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	0e1b      	lsrs	r3, r3, #24
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe97 	bl	8000fdc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   // 인수 [23:16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe91 	bl	8000fdc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    // 인수 [15:8]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe8b 	bl	8000fdc <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           // 인수 [7:0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe86 	bl	8000fdc <SPI_TxByte>

    // 3단계: CRC 계산 및 전송
    if(cmd == CMD0) crc = 0x95;         // CMD0은 항상 0x95
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b40      	cmp	r3, #64	@ 0x40
 80012d4:	d102      	bne.n	80012dc <SD_SendCmd+0x5c>
 80012d6:	2395      	movs	r3, #149	@ 0x95
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e007      	b.n	80012ec <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    // CMD8(0x1AA)는 0x87
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b48      	cmp	r3, #72	@ 0x48
 80012e0:	d102      	bne.n	80012e8 <SD_SendCmd+0x68>
 80012e2:	2387      	movs	r3, #135	@ 0x87
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e001      	b.n	80012ec <SD_SendCmd+0x6c>
    else crc = 1;                       // 나머지는 더미 CRC
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]

    SPI_TxByte(crc);
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe74 	bl	8000fdc <SPI_TxByte>

    // 4단계: CMD12 특수 처리
    if (cmd == CMD12) SPI_RxByte();     // STOP_TRANSMISSION 후 더미바이트
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b4c      	cmp	r3, #76	@ 0x4c
 80012f8:	d101      	bne.n	80012fe <SD_SendCmd+0x7e>
 80012fa:	f7ff fea3 	bl	8001044 <SPI_RxByte>

    // 5단계: R1 응답 수신 (최대 10번 시도)
    uint8_t n = 10;
 80012fe:	230a      	movs	r3, #10
 8001300:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 8001302:	f7ff fe9f 	bl	8001044 <SPI_RxByte>
 8001306:	4603      	mov	r3, r0
 8001308:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);      // MSB가 0이 될 때까지
 800130a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800130e:	2b00      	cmp	r3, #0
 8001310:	da05      	bge.n	800131e <SD_SendCmd+0x9e>
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	3b01      	subs	r3, #1
 8001316:	73bb      	strb	r3, [r7, #14]
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f1      	bne.n	8001302 <SD_SendCmd+0x82>

    return res;
 800131e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SD_disk_initialize>:
 * 사용자 정의 diskio.c 함수!
 **************************************/

/* SD 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    // 1단계: 드라이브 번호 확인 (0만 지원)
    if(drv) return STA_NOINIT;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SD_disk_initialize+0x14>
 8001338:	2301      	movs	r3, #1
 800133a:	e0d6      	b.n	80014ea <SD_disk_initialize+0x1c2>

    // 2단계: 물리적 디스크 존재 확인
    if(Stat & STA_NODISK) return Stat;
 800133c:	4b6d      	ldr	r3, [pc, #436]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <SD_disk_initialize+0x2a>
 800134a:	4b6a      	ldr	r3, [pc, #424]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	e0cb      	b.n	80014ea <SD_disk_initialize+0x1c2>

    // 3단계: 전원 켜기
    SD_PowerOn();
 8001352:	f7ff febb 	bl	80010cc <SD_PowerOn>

    // 4단계: 카드 선택
    SELECT();
 8001356:	f7ff fe27 	bl	8000fa8 <SELECT>

    type = 0;  // 카드 타입 초기화
 800135a:	2300      	movs	r3, #0
 800135c:	73bb      	strb	r3, [r7, #14]

    // 5단계: IDLE 상태 확인
    if (SD_SendCmd(CMD0, 0) == 1)  // R1 = 0x01 (IDLE 상태) 기대
 800135e:	2100      	movs	r1, #0
 8001360:	2040      	movs	r0, #64	@ 0x40
 8001362:	f7ff ff8d 	bl	8001280 <SD_SendCmd>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80a6 	bne.w	80014ba <SD_disk_initialize+0x192>
    {
        Timer1 = 1000;  // 1초 타임아웃
 800136e:	4b62      	ldr	r3, [pc, #392]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 8001370:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001374:	801a      	strh	r2, [r3, #0]

        // 6단계: SD v2+ 확인 (CMD8 지원 여부)
        if (SD_SendCmd(CMD8, 0x1AA) == 1)  // 0x1AA = 2.7-3.6V, 0xAA 체크패턴
 8001376:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800137a:	2048      	movs	r0, #72	@ 0x48
 800137c:	f7ff ff80 	bl	8001280 <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d158      	bne.n	8001438 <SD_disk_initialize+0x110>
        {
            // OCR(Operation Conditions Register) 수신
            for (n = 0; n < 4; n++)
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e00c      	b.n	80013a6 <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 800138c:	7bfc      	ldrb	r4, [r7, #15]
 800138e:	f7ff fe59 	bl	8001044 <SPI_RxByte>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	f104 0310 	add.w	r3, r4, #16
 800139a:	443b      	add	r3, r7
 800139c:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d9ef      	bls.n	800138c <SD_disk_initialize+0x64>
            }

            // 전압 범위 및 체크 패턴 확인
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)  // 지원 전압 + 체크패턴
 80013ac:	7abb      	ldrb	r3, [r7, #10]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	f040 8083 	bne.w	80014ba <SD_disk_initialize+0x192>
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	2baa      	cmp	r3, #170	@ 0xaa
 80013b8:	d17f      	bne.n	80014ba <SD_disk_initialize+0x192>
            {
                // ACMD41로 초기화 (HCS 비트 설정)
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 80013ba:	2100      	movs	r1, #0
 80013bc:	2077      	movs	r0, #119	@ 0x77
 80013be:	f7ff ff5f 	bl	8001280 <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d807      	bhi.n	80013d8 <SD_disk_initialize+0xb0>
                        SD_SendCmd(CMD41, 1UL << 30) == 0) // HCS=1 (고용량 지원)
 80013c8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013cc:	2069      	movs	r0, #105	@ 0x69
 80013ce:	f7ff ff57 	bl	8001280 <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <SD_disk_initialize+0xbc>
                        break;
                } while (Timer1);
 80013d8:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1eb      	bne.n	80013ba <SD_disk_initialize+0x92>
 80013e2:	e000      	b.n	80013e6 <SD_disk_initialize+0xbe>
                        break;
 80013e4:	bf00      	nop

                // 초기화 완료 후 OCR 읽기
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013e6:	4b44      	ldr	r3, [pc, #272]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d064      	beq.n	80014ba <SD_disk_initialize+0x192>
 80013f0:	2100      	movs	r1, #0
 80013f2:	207a      	movs	r0, #122	@ 0x7a
 80013f4:	f7ff ff44 	bl	8001280 <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d15d      	bne.n	80014ba <SD_disk_initialize+0x192>
                {
                    for (n = 0; n < 4; n++)
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e00c      	b.n	800141e <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 8001404:	7bfc      	ldrb	r4, [r7, #15]
 8001406:	f7ff fe1d 	bl	8001044 <SPI_RxByte>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	f104 0310 	add.w	r3, r4, #16
 8001412:	443b      	add	r3, r7
 8001414:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d9ef      	bls.n	8001404 <SD_disk_initialize+0xdc>
                    }

                    // CCS 비트 확인 (카드 용량 구조)
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001424:	7a3b      	ldrb	r3, [r7, #8]
 8001426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SD_disk_initialize+0x10a>
 800142e:	230c      	movs	r3, #12
 8001430:	e000      	b.n	8001434 <SD_disk_initialize+0x10c>
 8001432:	2304      	movs	r3, #4
 8001434:	73bb      	strb	r3, [r7, #14]
 8001436:	e040      	b.n	80014ba <SD_disk_initialize+0x192>
            }
        }
        else
        {
            // SD v1 또는 MMC 카드
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1)
 8001438:	2100      	movs	r1, #0
 800143a:	2077      	movs	r0, #119	@ 0x77
 800143c:	f7ff ff20 	bl	8001280 <SD_SendCmd>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	d808      	bhi.n	8001458 <SD_disk_initialize+0x130>
 8001446:	2100      	movs	r1, #0
 8001448:	2069      	movs	r0, #105	@ 0x69
 800144a:	f7ff ff19 	bl	8001280 <SD_SendCmd>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d801      	bhi.n	8001458 <SD_disk_initialize+0x130>
 8001454:	2302      	movs	r3, #2
 8001456:	e000      	b.n	800145a <SD_disk_initialize+0x132>
 8001458:	2301      	movs	r3, #1
 800145a:	73bb      	strb	r3, [r7, #14]
                   ? CT_SD1 : CT_MMC;

            do
            {
                if (type == CT_SD1)
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d10e      	bne.n	8001480 <SD_disk_initialize+0x158>
                {
                    // SD v1: ACMD41
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001462:	2100      	movs	r1, #0
 8001464:	2077      	movs	r0, #119	@ 0x77
 8001466:	f7ff ff0b 	bl	8001280 <SD_SendCmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d80e      	bhi.n	800148e <SD_disk_initialize+0x166>
 8001470:	2100      	movs	r1, #0
 8001472:	2069      	movs	r0, #105	@ 0x69
 8001474:	f7ff ff04 	bl	8001280 <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <SD_disk_initialize+0x166>
                        break;
 800147e:	e00d      	b.n	800149c <SD_disk_initialize+0x174>
                }
                else
                {
                    // MMC: CMD1
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 8001480:	2100      	movs	r1, #0
 8001482:	2041      	movs	r0, #65	@ 0x41
 8001484:	f7ff fefc 	bl	8001280 <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <SD_disk_initialize+0x172>
                }
            } while (Timer1);
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e1      	bne.n	800145c <SD_disk_initialize+0x134>
 8001498:	e000      	b.n	800149c <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 800149a:	bf00      	nop

            // 블록 크기 설정 (512바이트)
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <SD_disk_initialize+0x1d0>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <SD_disk_initialize+0x18e>
 80014a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014aa:	2050      	movs	r0, #80	@ 0x50
 80014ac:	f7ff fee8 	bl	8001280 <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SD_disk_initialize+0x192>
                type = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;  // 감지된 카드 타입 저장
 80014ba:	4a10      	ldr	r2, [pc, #64]	@ (80014fc <SD_disk_initialize+0x1d4>)
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	7013      	strb	r3, [r2, #0]

    DESELECT();      // 카드 비활성화
 80014c0:	f7ff fd7f 	bl	8000fc2 <DESELECT>
    SPI_RxByte();    // 추가 클럭
 80014c4:	f7ff fdbe 	bl	8001044 <SPI_RxByte>

    // 상태 업데이트
    if (type)
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;  // 초기화 완료 플래그 제거
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e001      	b.n	80014e4 <SD_disk_initialize+0x1bc>
    }
    else
    {
        SD_PowerOff();        // 초기화 실패 시 전원 끄기
 80014e0:	f7ff fe36 	bl	8001150 <SD_PowerOff>
    }

    return Stat;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <SD_disk_initialize+0x1cc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000208 	.word	0x20000208
 80014fc:	2000020c 	.word	0x2000020c

08001500 <SD_disk_status>:

/* SD 상태 리턴함수! */
DSTATUS SD_disk_status(BYTE drv)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SD_disk_status+0x14>
 8001510:	2301      	movs	r3, #1
 8001512:	e002      	b.n	800151a <SD_disk_status+0x1a>
    return Stat;
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SD_disk_status+0x28>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000000 	.word	0x20000000

0800152c <SD_disk_read>:

/* 섹터 읽기 함수! */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <SD_disk_read+0x1c>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <SD_disk_read+0x20>
 8001548:	2304      	movs	r3, #4
 800154a:	e051      	b.n	80015f0 <SD_disk_read+0xc4>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <SD_disk_read+0xcc>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SD_disk_read+0x32>
 800155a:	2303      	movs	r3, #3
 800155c:	e048      	b.n	80015f0 <SD_disk_read+0xc4>

    // 3단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800155e:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <SD_disk_read+0xd0>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <SD_disk_read+0x44>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	025b      	lsls	r3, r3, #9
 800156e:	607b      	str	r3, [r7, #4]

    SELECT();
 8001570:	f7ff fd1a 	bl	8000fa8 <SELECT>

    if (count == 1)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d111      	bne.n	800159e <SD_disk_read+0x72>
    {
        // 단일 블록 읽기
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	2051      	movs	r0, #81	@ 0x51
 800157e:	f7ff fe7f 	bl	8001280 <SD_SendCmd>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d129      	bne.n	80015dc <SD_disk_read+0xb0>
 8001588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800158c:	68b8      	ldr	r0, [r7, #8]
 800158e:	f7ff fdf7 	bl	8001180 <SD_RxDataBlock>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d021      	beq.n	80015dc <SD_disk_read+0xb0>
            count = 0;  // 성공 시 count를 0으로
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	e01e      	b.n	80015dc <SD_disk_read+0xb0>
    }
    else
    {
        // 다중 블록 읽기
        if (SD_SendCmd(CMD18, sector) == 0)
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	2052      	movs	r0, #82	@ 0x52
 80015a2:	f7ff fe6d 	bl	8001280 <SD_SendCmd>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d117      	bne.n	80015dc <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 80015ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f7ff fde5 	bl	8001180 <SD_RxDataBlock>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00a      	beq.n	80015d2 <SD_disk_read+0xa6>
                buff += 512;  // 다음 블록 버퍼 위치
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015c2:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ed      	bne.n	80015ac <SD_disk_read+0x80>
 80015d0:	e000      	b.n	80015d4 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 80015d2:	bf00      	nop

            SD_SendCmd(CMD12, 0);  // 전송 중지 명령
 80015d4:	2100      	movs	r1, #0
 80015d6:	204c      	movs	r0, #76	@ 0x4c
 80015d8:	f7ff fe52 	bl	8001280 <SD_SendCmd>
        }
    }

    DESELECT();
 80015dc:	f7ff fcf1 	bl	8000fc2 <DESELECT>
    SPI_RxByte();
 80015e0:	f7ff fd30 	bl	8001044 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	2000020c 	.word	0x2000020c

08001600 <SD_disk_write>:
/* 섹터 쓰기 함수! */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <SD_disk_write+0x1c>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <SD_disk_write+0x20>
 800161c:	2304      	movs	r3, #4
 800161e:	e06b      	b.n	80016f8 <SD_disk_write+0xf8>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001620:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <SD_disk_write+0x100>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SD_disk_write+0x32>
 800162e:	2303      	movs	r3, #3
 8001630:	e062      	b.n	80016f8 <SD_disk_write+0xf8>

    // 3단계: 쓰기 보호 확인
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <SD_disk_write+0x100>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SD_disk_write+0x44>
 8001640:	2302      	movs	r3, #2
 8001642:	e059      	b.n	80016f8 <SD_disk_write+0xf8>

    // 4단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8001644:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <SD_disk_write+0x104>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <SD_disk_write+0x56>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	025b      	lsls	r3, r3, #9
 8001654:	607b      	str	r3, [r7, #4]

    SELECT();
 8001656:	f7ff fca7 	bl	8000fa8 <SELECT>

    if (count == 1)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d110      	bne.n	8001682 <SD_disk_write+0x82>
    {
        // 단일 블록 쓰기
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	2058      	movs	r0, #88	@ 0x58
 8001664:	f7ff fe0c 	bl	8001280 <SD_SendCmd>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d13a      	bne.n	80016e4 <SD_disk_write+0xe4>
 800166e:	21fe      	movs	r1, #254	@ 0xfe
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f7ff fdb5 	bl	80011e0 <SD_TxDataBlock>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d033      	beq.n	80016e4 <SD_disk_write+0xe4>
            count = 0;  // 성공 시 count를 0으로
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	e030      	b.n	80016e4 <SD_disk_write+0xe4>
    }
    else
    {
        // 다중 블록 쓰기
        if (CardType & CT_SD1)
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <SD_disk_write+0x104>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 800168e:	2100      	movs	r1, #0
 8001690:	2077      	movs	r0, #119	@ 0x77
 8001692:	f7ff fdf5 	bl	8001280 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	2057      	movs	r0, #87	@ 0x57
 800169a:	f7ff fdf1 	bl	8001280 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	2059      	movs	r0, #89	@ 0x59
 80016a2:	f7ff fded 	bl	8001280 <SD_SendCmd>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d11b      	bne.n	80016e4 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016ac:	21fc      	movs	r1, #252	@ 0xfc
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7ff fd96 	bl	80011e0 <SD_TxDataBlock>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <SD_disk_write+0xd0>
                buff += 512;  // 다음 블록 버퍼 위치
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016c0:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <SD_disk_write+0xac>
 80016ce:	e000      	b.n	80016d2 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016d0:	bf00      	nop

            /* STOP_TRAN 토큰 */
            if(!SD_TxDataBlock(0, 0xFD))
 80016d2:	21fd      	movs	r1, #253	@ 0xfd
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fd83 	bl	80011e0 <SD_TxDataBlock>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <SD_disk_write+0xe4>
            {
                count = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	603b      	str	r3, [r7, #0]
            }
        }
    }

    DESELECT();
 80016e4:	f7ff fc6d 	bl	8000fc2 <DESELECT>
    SPI_RxByte();
 80016e8:	f7ff fcac 	bl	8001044 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	2000020c 	.word	0x2000020c

08001708 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08b      	sub	sp, #44	@ 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	603a      	str	r2, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	460b      	mov	r3, r1
 8001716:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	623b      	str	r3, [r7, #32]

    if (drv) return RES_PARERR;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SD_disk_ioctl+0x1e>
 8001722:	2304      	movs	r3, #4
 8001724:	e0ad      	b.n	8001882 <SD_disk_ioctl+0x17a>
    res = RES_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)  // 전원 제어
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d124      	bne.n	800177c <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d012      	beq.n	8001760 <SD_disk_ioctl+0x58>
 800173a:	2b02      	cmp	r3, #2
 800173c:	dc1a      	bgt.n	8001774 <SD_disk_ioctl+0x6c>
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <SD_disk_ioctl+0x40>
 8001742:	2b01      	cmp	r3, #1
 8001744:	d006      	beq.n	8001754 <SD_disk_ioctl+0x4c>
 8001746:	e015      	b.n	8001774 <SD_disk_ioctl+0x6c>
        {
        case 0: SD_PowerOff(); res = RES_OK; break;      // 전원 끄기
 8001748:	f7ff fd02 	bl	8001150 <SD_PowerOff>
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001752:	e094      	b.n	800187e <SD_disk_ioctl+0x176>
        case 1: SD_PowerOn(); res = RES_OK; break;       // 전원 켜기
 8001754:	f7ff fcba 	bl	80010cc <SD_PowerOn>
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800175e:	e08e      	b.n	800187e <SD_disk_ioctl+0x176>
        case 2: *(ptr + 1) = SD_CheckPower(); res = RES_OK; break; // 전원 상태 확인
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	1c5c      	adds	r4, r3, #1
 8001764:	f7ff fd00 	bl	8001168 <SD_CheckPower>
 8001768:	4603      	mov	r3, r0
 800176a:	7023      	strb	r3, [r4, #0]
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001772:	e084      	b.n	800187e <SD_disk_ioctl+0x176>
        default: res = RES_PARERR;
 8001774:	2304      	movs	r3, #4
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800177a:	e080      	b.n	800187e <SD_disk_ioctl+0x176>
        }
    }
    else
    {
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 800177c:	4b43      	ldr	r3, [pc, #268]	@ (800188c <SD_disk_ioctl+0x184>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SD_disk_ioctl+0x86>
 800178a:	2303      	movs	r3, #3
 800178c:	e079      	b.n	8001882 <SD_disk_ioctl+0x17a>

        SELECT();
 800178e:	f7ff fc0b 	bl	8000fa8 <SELECT>

        switch (ctrl)
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d05a      	beq.n	800184e <SD_disk_ioctl+0x146>
 8001798:	2b02      	cmp	r3, #2
 800179a:	dc6c      	bgt.n	8001876 <SD_disk_ioctl+0x16e>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d05e      	beq.n	800185e <SD_disk_ioctl+0x156>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d168      	bne.n	8001876 <SD_disk_ioctl+0x16e>
        {
        case GET_SECTOR_COUNT:  // 총 섹터 수 얻기
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017a4:	2100      	movs	r1, #0
 80017a6:	2049      	movs	r0, #73	@ 0x49
 80017a8:	f7ff fd6a 	bl	8001280 <SD_SendCmd>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d15e      	bne.n	8001870 <SD_disk_ioctl+0x168>
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2110      	movs	r1, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fce1 	bl	8001180 <SD_RxDataBlock>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d055      	beq.n	8001870 <SD_disk_ioctl+0x168>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 80017c4:	7a3b      	ldrb	r3, [r7, #8]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10f      	bne.n	80017ee <SD_disk_ioctl+0xe6>
                {
                    // FIX 5: SDv2 CSD 파싱 수정
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80017d6:	7c3b      	ldrb	r3, [r7, #16]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	4313      	orrs	r3, r2
 80017dc:	7c7a      	ldrb	r2, [r7, #17]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;  // (C_SIZE+1) * 1024
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	3301      	adds	r3, #1
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e02b      	b.n	8001846 <SD_disk_ioctl+0x13e>
                }
                else /* MMC or SDC V1 */
                {
                    // 복잡한 CSD v1 계산
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017ee:	7b7b      	ldrb	r3, [r7, #13]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	7cbb      	ldrb	r3, [r7, #18]
 80017f8:	09db      	lsrs	r3, r3, #7
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	7c7b      	ldrb	r3, [r7, #17]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 0306 	and.w	r3, r3, #6
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4413      	add	r3, r2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3302      	adds	r3, #2
 8001812:	77fb      	strb	r3, [r7, #31]
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001814:	7c3b      	ldrb	r3, [r7, #16]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	b29b      	uxth	r3, r3
 8001822:	4413      	add	r3, r2
 8001824:	b29a      	uxth	r2, r3
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	b29b      	uxth	r3, r3
 800182c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001830:	b29b      	uxth	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	3301      	adds	r3, #1
 8001838:	83bb      	strh	r3, [r7, #28]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 800183a:	8bba      	ldrh	r2, [r7, #28]
 800183c:	7ffb      	ldrb	r3, [r7, #31]
 800183e:	3b09      	subs	r3, #9
 8001840:	409a      	lsls	r2, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800184c:	e010      	b.n	8001870 <SD_disk_ioctl+0x168>

        case GET_SECTOR_SIZE:   // 섹터 크기 (항상 512)
            *(WORD*) buff = 512;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001854:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800185c:	e00b      	b.n	8001876 <SD_disk_ioctl+0x16e>

        case CTRL_SYNC:         // 동기화 (쓰기 완료 대기)
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800185e:	f7ff fc1b 	bl	8001098 <SD_ReadyWait>
 8001862:	4603      	mov	r3, r0
 8001864:	2bff      	cmp	r3, #255	@ 0xff
 8001866:	d105      	bne.n	8001874 <SD_disk_ioctl+0x16c>
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800186e:	e001      	b.n	8001874 <SD_disk_ioctl+0x16c>
            break;
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <SD_disk_ioctl+0x16e>
            break;
 8001874:	bf00      	nop

        // 추가 정보들...
        }

        DESELECT();
 8001876:	f7ff fba4 	bl	8000fc2 <DESELECT>
        SPI_RxByte();
 800187a:	f7ff fbe3 	bl	8001044 <SPI_RxByte>
    }

    return res;
 800187e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001882:	4618      	mov	r0, r3
 8001884:	372c      	adds	r7, #44	@ 0x2c
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000

08001890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a6:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a27      	ldr	r2, [pc, #156]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a1b      	ldr	r2, [pc, #108]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <MX_GPIO_Init+0xb8>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2110      	movs	r1, #16
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f001 fce3 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CD_GPIO_Port, SD_CD_Pin, GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	2110      	movs	r1, #16
 80018fe:	4813      	ldr	r0, [pc, #76]	@ (800194c <MX_GPIO_Init+0xbc>)
 8001900:	f001 fcde 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001904:	2310      	movs	r3, #16
 8001906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001908:	2301      	movs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001910:	2301      	movs	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191e:	f001 fb35 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001922:	2310      	movs	r3, #16
 8001924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	2301      	movs	r3, #1
 8001928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800192e:	2301      	movs	r3, #1
 8001930:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	4619      	mov	r1, r3
 8001938:	4804      	ldr	r0, [pc, #16]	@ (800194c <MX_GPIO_Init+0xbc>)
 800193a:	f001 fb27 	bl	8002f8c <HAL_GPIO_Init>

}
 800193e:	bf00      	nop
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	48000400 	.word	0x48000400

08001950 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8001958:	1d39      	adds	r1, r7, #4
 800195a:	2364      	movs	r3, #100	@ 0x64
 800195c:	2201      	movs	r2, #1
 800195e:	4804      	ldr	r0, [pc, #16]	@ (8001970 <__io_putchar+0x20>)
 8001960:	f003 fa8c 	bl	8004e7c <HAL_UART_Transmit>
	return ch;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20002484 	.word	0x20002484

08001974 <SD_IsCardDetected>:

/* SD카드 감지 함수 */
uint8_t SD_IsCardDetected(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	// CD 핀이 LOW면 카드 삽입됨
	return (HAL_GPIO_ReadPin(SD_CD_GPIO_Port, SD_CD_Pin) == GPIO_PIN_RESET);
 8001978:	2110      	movs	r1, #16
 800197a:	4805      	ldr	r0, [pc, #20]	@ (8001990 <SD_IsCardDetected+0x1c>)
 800197c:	f001 fc88 	bl	8003290 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	bf0c      	ite	eq
 8001986:	2301      	moveq	r3, #1
 8001988:	2300      	movne	r3, #0
 800198a:	b2db      	uxtb	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	48000400 	.word	0x48000400

08001994 <SDMount>:

/* SD카드 마운트 함수 */
void SDMount(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	fres = f_mount(&fs, "", 0);
 8001998:	2200      	movs	r2, #0
 800199a:	490c      	ldr	r1, [pc, #48]	@ (80019cc <SDMount+0x38>)
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <SDMount+0x3c>)
 800199e:	f007 fd85 	bl	80094ac <f_mount>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <SDMount+0x40>)
 80019a8:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <SDMount+0x40>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <SDMount+0x26>
		printf("SD Card mounted Successfully!\r\n");
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <SDMount+0x44>)
 80019b4:	f009 fc9e 	bl	800b2f4 <puts>
	} else if (fres != FR_OK) {
		printf("SD Card mount error!!\r\n");
	}
}
 80019b8:	e006      	b.n	80019c8 <SDMount+0x34>
	} else if (fres != FR_OK) {
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <SDMount+0x40>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <SDMount+0x34>
		printf("SD Card mount error!!\r\n");
 80019c2:	4806      	ldr	r0, [pc, #24]	@ (80019dc <SDMount+0x48>)
 80019c4:	f009 fc96 	bl	800b2f4 <puts>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	0800d618 	.word	0x0800d618
 80019d0:	20000210 	.word	0x20000210
 80019d4:	2000227c 	.word	0x2000227c
 80019d8:	0800d61c 	.word	0x0800d61c
 80019dc:	0800d63c 	.word	0x0800d63c

080019e0 <SDUnmount>:

/* SD 카드 언마운트 (열린 파일이 있으면 먼저 닫기) */
void SDUnmount(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

	if (closeFlag == 0) // 열린 파일 있으면 닫기
 80019e4:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <SDUnmount+0x48>)
 80019e6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <SDUnmount+0x12>
	{
	    CloseFile();
 80019ee:	f000 f877 	bl	8001ae0 <CloseFile>
	}

	fres = f_mount(NULL, "", 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	490d      	ldr	r1, [pc, #52]	@ (8001a2c <SDUnmount+0x4c>)
 80019f6:	2000      	movs	r0, #0
 80019f8:	f007 fd58 	bl	80094ac <f_mount>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <SDUnmount+0x50>)
 8001a02:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <SDUnmount+0x50>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d103      	bne.n	8001a14 <SDUnmount+0x34>
		printf("SD Card Un-mounted Successfully!\r\n");
 8001a0c:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <SDUnmount+0x54>)
 8001a0e:	f009 fc71 	bl	800b2f4 <puts>
	} else if (fres != FR_OK) {
		printf("SD Card Un-mount error!!\r\n");
	}
}
 8001a12:	e006      	b.n	8001a22 <SDUnmount+0x42>
	} else if (fres != FR_OK) {
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <SDUnmount+0x50>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <SDUnmount+0x42>
		printf("SD Card Un-mount error!!\r\n");
 8001a1c:	4806      	ldr	r0, [pc, #24]	@ (8001a38 <SDUnmount+0x58>)
 8001a1e:	f009 fc69 	bl	800b2f4 <puts>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000001 	.word	0x20000001
 8001a2c:	0800d618 	.word	0x0800d618
 8001a30:	2000227c 	.word	0x2000227c
 8001a34:	0800d654 	.word	0x0800d654
 8001a38:	0800d678 	.word	0x0800d678

08001a3c <OpenFile>:

/* 파일 열기(없으면 생성). append 모드로 사용 */
void OpenFile(char* fileName)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    if(closeFlag == 0)
 8001a44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <OpenFile+0x84>)
 8001a46:	f993 3000 	ldrsb.w	r3, [r3]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <OpenFile+0x1a>
    {
        printf("File already open! Close it first.\r\n");
 8001a4e:	481d      	ldr	r0, [pc, #116]	@ (8001ac4 <OpenFile+0x88>)
 8001a50:	f009 fc50 	bl	800b2f4 <puts>
        return;
 8001a54:	e030      	b.n	8001ab8 <OpenFile+0x7c>
    }

    // 파일이 있으면 열고, 없으면 생성하여 append 모드로 사용
    fres = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001a56:	2213      	movs	r2, #19
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	481b      	ldr	r0, [pc, #108]	@ (8001ac8 <OpenFile+0x8c>)
 8001a5c:	f007 fd6c 	bl	8009538 <f_open>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <OpenFile+0x90>)
 8001a66:	701a      	strb	r2, [r3, #0]

    if(fres == FR_OK)
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <OpenFile+0x90>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d118      	bne.n	8001aa2 <OpenFile+0x66>
    {
    	// 항상 파일 끝으로 이동하여 이어쓰기(Append)
        f_lseek(&fil, f_size(&fil));
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <OpenFile+0x8c>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4814      	ldr	r0, [pc, #80]	@ (8001ac8 <OpenFile+0x8c>)
 8001a78:	f008 fac1 	bl	8009ffe <f_lseek>

        printf("File '%s' ready for writing!\r\n", fileName);
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4814      	ldr	r0, [pc, #80]	@ (8001ad0 <OpenFile+0x94>)
 8001a80:	f009 fbd0 	bl	800b224 <iprintf>
        if(f_size(&fil) > 0)
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <OpenFile+0x8c>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <OpenFile+0x5e>
        {
            printf("File size: %lu bytes\r\n", f_size(&fil));
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <OpenFile+0x8c>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4810      	ldr	r0, [pc, #64]	@ (8001ad4 <OpenFile+0x98>)
 8001a94:	f009 fbc6 	bl	800b224 <iprintf>
 8001a98:	e00b      	b.n	8001ab2 <OpenFile+0x76>
        }
        else
        {
            printf("New file created.\r\n");
 8001a9a:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <OpenFile+0x9c>)
 8001a9c:	f009 fc2a 	bl	800b2f4 <puts>
 8001aa0:	e007      	b.n	8001ab2 <OpenFile+0x76>
        }
    }
    else
    {
        printf("Failed to open/create file '%s'. Error: %d\r\n", fileName, fres);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <OpenFile+0x90>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	480c      	ldr	r0, [pc, #48]	@ (8001adc <OpenFile+0xa0>)
 8001aac:	f009 fbba 	bl	800b224 <iprintf>
        return;
 8001ab0:	e002      	b.n	8001ab8 <OpenFile+0x7c>
    }

    closeFlag = 0; // 이제 열림 상태
 8001ab2:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <OpenFile+0x84>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
}
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000001 	.word	0x20000001
 8001ac4:	0800d694 	.word	0x0800d694
 8001ac8:	2000124c 	.word	0x2000124c
 8001acc:	2000227c 	.word	0x2000227c
 8001ad0:	0800d6b8 	.word	0x0800d6b8
 8001ad4:	0800d6d8 	.word	0x0800d6d8
 8001ad8:	0800d6f0 	.word	0x0800d6f0
 8001adc:	0800d704 	.word	0x0800d704

08001ae0 <CloseFile>:

/* 열린 파일 닫기 */
void CloseFile(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	fres = f_close(&fil);
 8001ae4:	480d      	ldr	r0, [pc, #52]	@ (8001b1c <CloseFile+0x3c>)
 8001ae6:	f008 fa60 	bl	8009faa <f_close>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <CloseFile+0x40>)
 8001af0:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <CloseFile+0x40>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <CloseFile+0x22>
		printf("File Closed !\r\n");
 8001afa:	480a      	ldr	r0, [pc, #40]	@ (8001b24 <CloseFile+0x44>)
 8001afc:	f009 fbfa 	bl	800b2f4 <puts>
 8001b00:	e006      	b.n	8001b10 <CloseFile+0x30>
	} else if (fres != FR_OK) {
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <CloseFile+0x40>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <CloseFile+0x30>
		printf("File Close Failed... \r\n");
 8001b0a:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <CloseFile+0x48>)
 8001b0c:	f009 fbf2 	bl	800b2f4 <puts>
	}
	closeFlag = 1;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <CloseFile+0x4c>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000124c 	.word	0x2000124c
 8001b20:	2000227c 	.word	0x2000227c
 8001b24:	0800d734 	.word	0x0800d734
 8001b28:	0800d744 	.word	0x0800d744
 8001b2c:	20000001 	.word	0x20000001

08001b30 <CheckSize>:

/* SD 카드 여유 공간 조회 (KB 단위로 표시) */
void CheckSize(void) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  fres = f_getfree("", &fre_clust, &pfs);
 8001b36:	4a24      	ldr	r2, [pc, #144]	@ (8001bc8 <CheckSize+0x98>)
 8001b38:	4924      	ldr	r1, [pc, #144]	@ (8001bcc <CheckSize+0x9c>)
 8001b3a:	4825      	ldr	r0, [pc, #148]	@ (8001bd0 <CheckSize+0xa0>)
 8001b3c:	f008 fc83 	bl	800a446 <f_getfree>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <CheckSize+0xa4>)
 8001b46:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8001b48:	4b22      	ldr	r3, [pc, #136]	@ (8001bd4 <CheckSize+0xa4>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d130      	bne.n	8001bb2 <CheckSize+0x82>
    // 클러스터 수 * 클러스터당 섹터수 * 섹터당 512바이트 → KB로 환산( /1024 = *0.5)
    uint32_t freeKB = (uint32_t)(fre_clust * pfs->csize * 0.5f);
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <CheckSize+0x98>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	895b      	ldrh	r3, [r3, #10]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <CheckSize+0x9c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b74:	ee17 3a90 	vmov	r3, s15
 8001b78:	607b      	str	r3, [r7, #4]
    uint32_t totalKB = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5f);
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <CheckSize+0x98>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	3b02      	subs	r3, #2
 8001b82:	4a11      	ldr	r2, [pc, #68]	@ (8001bc8 <CheckSize+0x98>)
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	8952      	ldrh	r2, [r2, #10]
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b94:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba0:	ee17 3a90 	vmov	r3, s15
 8001ba4:	603b      	str	r3, [r7, #0]
    printf("Free: %lu KB / Total: %lu KB\r\n", freeKB, totalKB);
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	480b      	ldr	r0, [pc, #44]	@ (8001bd8 <CheckSize+0xa8>)
 8001bac:	f009 fb3a 	bl	800b224 <iprintf>
  } else {
    printf("Failed to get free space. (FRESULT=%d)\r\n", fres);
  }
}
 8001bb0:	e005      	b.n	8001bbe <CheckSize+0x8e>
    printf("Failed to get free space. (FRESULT=%d)\r\n", fres);
 8001bb2:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <CheckSize+0xa4>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <CheckSize+0xac>)
 8001bba:	f009 fb33 	bl	800b224 <iprintf>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20001248 	.word	0x20001248
 8001bcc:	20002280 	.word	0x20002280
 8001bd0:	0800d618 	.word	0x0800d618
 8001bd4:	2000227c 	.word	0x2000227c
 8001bd8:	0800d75c 	.word	0x0800d75c
 8001bdc:	0800d77c 	.word	0x0800d77c

08001be0 <WriteFile>:

/* 현재 열린 파일 끝에 한 줄을 추가로 기록 */
void WriteFile(char* text)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    if (closeFlag)
 8001be8:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <WriteFile+0x98>)
 8001bea:	f993 3000 	ldrsb.w	r3, [r3]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <WriteFile+0x1a>
    {
        printf("No file is open! Use 'open <filename>' first.\r\n");
 8001bf2:	4822      	ldr	r0, [pc, #136]	@ (8001c7c <WriteFile+0x9c>)
 8001bf4:	f009 fb7e 	bl	800b2f4 <puts>
        return;
 8001bf8:	e03a      	b.n	8001c70 <WriteFile+0x90>
    }

    // 안전하게 개행을 붙여 한 줄 단위로 기록
    snprintf(buffer, sizeof(buffer), "%s\r\n", text);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a20      	ldr	r2, [pc, #128]	@ (8001c80 <WriteFile+0xa0>)
 8001bfe:	2164      	movs	r1, #100	@ 0x64
 8001c00:	4820      	ldr	r0, [pc, #128]	@ (8001c84 <WriteFile+0xa4>)
 8001c02:	f009 fb7f 	bl	800b304 <sniprintf>

    // 파일 끝으로 이동 (append)
    fres = f_lseek(&fil, f_size(&fil));
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <WriteFile+0xa8>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481e      	ldr	r0, [pc, #120]	@ (8001c88 <WriteFile+0xa8>)
 8001c0e:	f008 f9f6 	bl	8009ffe <f_lseek>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <WriteFile+0xac>)
 8001c18:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <WriteFile+0xac>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <WriteFile+0x4a>
    {
        printf("Can't move to end of file\r\n");
 8001c22:	481b      	ldr	r0, [pc, #108]	@ (8001c90 <WriteFile+0xb0>)
 8001c24:	f009 fb66 	bl	800b2f4 <puts>
        return;
 8001c28:	e022      	b.n	8001c70 <WriteFile+0x90>
    }

    sprintf(buffer, "%s\r\n", text);
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4914      	ldr	r1, [pc, #80]	@ (8001c80 <WriteFile+0xa0>)
 8001c2e:	4815      	ldr	r0, [pc, #84]	@ (8001c84 <WriteFile+0xa4>)
 8001c30:	f009 fb9e 	bl	800b370 <siprintf>
    fres = f_write(&fil, buffer, strlen(buffer), &bw);
 8001c34:	4813      	ldr	r0, [pc, #76]	@ (8001c84 <WriteFile+0xa4>)
 8001c36:	f7fe fb53 	bl	80002e0 <strlen>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <WriteFile+0xb4>)
 8001c3e:	4911      	ldr	r1, [pc, #68]	@ (8001c84 <WriteFile+0xa4>)
 8001c40:	4811      	ldr	r0, [pc, #68]	@ (8001c88 <WriteFile+0xa8>)
 8001c42:	f007 ffa0 	bl	8009b86 <f_write>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <WriteFile+0xac>)
 8001c4c:	701a      	strb	r2, [r3, #0]

    if(fres == FR_OK)
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <WriteFile+0xac>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <WriteFile+0x8a>
    {
        printf("Writing Complete! %lu bytes written.\r\n", bw);
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <WriteFile+0xb4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480e      	ldr	r0, [pc, #56]	@ (8001c98 <WriteFile+0xb8>)
 8001c5e:	f009 fae1 	bl	800b224 <iprintf>
        f_sync(&fil);  // 즉시 저장(전원 차단에 대비)
 8001c62:	4809      	ldr	r0, [pc, #36]	@ (8001c88 <WriteFile+0xa8>)
 8001c64:	f008 f923 	bl	8009eae <f_sync>
 8001c68:	e002      	b.n	8001c70 <WriteFile+0x90>
    }
    else
    {
        printf("Writing Failed\r\n");
 8001c6a:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <WriteFile+0xbc>)
 8001c6c:	f009 fb42 	bl	800b2f4 <puts>
    }
}
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000001 	.word	0x20000001
 8001c7c:	0800d7a8 	.word	0x0800d7a8
 8001c80:	0800d7d8 	.word	0x0800d7d8
 8001c84:	20002284 	.word	0x20002284
 8001c88:	2000124c 	.word	0x2000124c
 8001c8c:	2000227c 	.word	0x2000227c
 8001c90:	0800d7e0 	.word	0x0800d7e0
 8001c94:	200022ec 	.word	0x200022ec
 8001c98:	0800d7fc 	.word	0x0800d7fc
 8001c9c:	0800d824 	.word	0x0800d824

08001ca0 <ReadFile>:

/* 기존의 파일 내용 읽기 */
void ReadFile(char* fileName)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    // 현재 열린 파일이 있으면 닫기
    if (closeFlag == 0)
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <ReadFile+0xc0>)
 8001caa:	f993 3000 	ldrsb.w	r3, [r3]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <ReadFile+0x16>
        CloseFile();
 8001cb2:	f7ff ff15 	bl	8001ae0 <CloseFile>

    fres = f_open(&fil, fileName, FA_READ);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	482a      	ldr	r0, [pc, #168]	@ (8001d64 <ReadFile+0xc4>)
 8001cbc:	f007 fc3c 	bl	8009538 <f_open>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <ReadFile+0xc8>)
 8001cc6:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK)
 8001cc8:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <ReadFile+0xc8>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d117      	bne.n	8001d00 <ReadFile+0x60>
    {
        printf("File '%s' opened for reading.\r\n", fileName);
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4826      	ldr	r0, [pc, #152]	@ (8001d6c <ReadFile+0xcc>)
 8001cd4:	f009 faa6 	bl	800b224 <iprintf>
        printf("Failed to open file '%s' for reading!\r\n", fileName);
        return;
    }

    // 파일 전체 읽기
    memset(buffer, 0, sizeof(buffer));
 8001cd8:	2264      	movs	r2, #100	@ 0x64
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4824      	ldr	r0, [pc, #144]	@ (8001d70 <ReadFile+0xd0>)
 8001cde:	f009 fc41 	bl	800b564 <memset>
    fres = f_read(&fil, buffer, sizeof(buffer)-1, &br);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <ReadFile+0xd4>)
 8001ce4:	2263      	movs	r2, #99	@ 0x63
 8001ce6:	4922      	ldr	r1, [pc, #136]	@ (8001d70 <ReadFile+0xd0>)
 8001ce8:	481e      	ldr	r0, [pc, #120]	@ (8001d64 <ReadFile+0xc4>)
 8001cea:	f007 fded 	bl	80098c8 <f_read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <ReadFile+0xc8>)
 8001cf4:	701a      	strb	r2, [r3, #0]

    if (fres == FR_OK && br > 0)
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <ReadFile+0xc8>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d126      	bne.n	8001d4c <ReadFile+0xac>
 8001cfe:	e004      	b.n	8001d0a <ReadFile+0x6a>
        printf("Failed to open file '%s' for reading!\r\n", fileName);
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	481d      	ldr	r0, [pc, #116]	@ (8001d78 <ReadFile+0xd8>)
 8001d04:	f009 fa8e 	bl	800b224 <iprintf>
        return;
 8001d08:	e026      	b.n	8001d58 <ReadFile+0xb8>
    if (fres == FR_OK && br > 0)
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <ReadFile+0xd4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01c      	beq.n	8001d4c <ReadFile+0xac>
    {
        printf("-----------FILE CONTENT----------\r\n");
 8001d12:	481a      	ldr	r0, [pc, #104]	@ (8001d7c <ReadFile+0xdc>)
 8001d14:	f009 faee 	bl	800b2f4 <puts>
        printf("%s", buffer);
 8001d18:	4915      	ldr	r1, [pc, #84]	@ (8001d70 <ReadFile+0xd0>)
 8001d1a:	4819      	ldr	r0, [pc, #100]	@ (8001d80 <ReadFile+0xe0>)
 8001d1c:	f009 fa82 	bl	800b224 <iprintf>
        if (buffer[strlen(buffer)-1] != '\n')
 8001d20:	4813      	ldr	r0, [pc, #76]	@ (8001d70 <ReadFile+0xd0>)
 8001d22:	f7fe fadd 	bl	80002e0 <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	4a11      	ldr	r2, [pc, #68]	@ (8001d70 <ReadFile+0xd0>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	2b0a      	cmp	r3, #10
 8001d30:	d002      	beq.n	8001d38 <ReadFile+0x98>
            printf("\r\n");
 8001d32:	4814      	ldr	r0, [pc, #80]	@ (8001d84 <ReadFile+0xe4>)
 8001d34:	f009 fade 	bl	800b2f4 <puts>
        printf("-----------END OF FILE-----------\r\n");
 8001d38:	4813      	ldr	r0, [pc, #76]	@ (8001d88 <ReadFile+0xe8>)
 8001d3a:	f009 fadb 	bl	800b2f4 <puts>
        printf("%lu bytes read.\r\n", br);
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <ReadFile+0xd4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4811      	ldr	r0, [pc, #68]	@ (8001d8c <ReadFile+0xec>)
 8001d46:	f009 fa6d 	bl	800b224 <iprintf>
 8001d4a:	e002      	b.n	8001d52 <ReadFile+0xb2>
    }
    else
    {
        printf("File is empty or read failed!\r\n");
 8001d4c:	4810      	ldr	r0, [pc, #64]	@ (8001d90 <ReadFile+0xf0>)
 8001d4e:	f009 fad1 	bl	800b2f4 <puts>
    }

    f_close(&fil);  // 읽기 후 파일 닫기
 8001d52:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <ReadFile+0xc4>)
 8001d54:	f008 f929 	bl	8009faa <f_close>
}
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000001 	.word	0x20000001
 8001d64:	2000124c 	.word	0x2000124c
 8001d68:	2000227c 	.word	0x2000227c
 8001d6c:	0800d834 	.word	0x0800d834
 8001d70:	20002284 	.word	0x20002284
 8001d74:	200022f0 	.word	0x200022f0
 8001d78:	0800d854 	.word	0x0800d854
 8001d7c:	0800d87c 	.word	0x0800d87c
 8001d80:	0800d8a0 	.word	0x0800d8a0
 8001d84:	0800d8a4 	.word	0x0800d8a4
 8001d88:	0800d8a8 	.word	0x0800d8a8
 8001d8c:	0800d8cc 	.word	0x0800d8cc
 8001d90:	0800d8e0 	.word	0x0800d8e0

08001d94 <ProcessCommand>:

// ========== 인터페이스 함수 =================

/* 문자열 한 줄을 명령으로 해석해 실행 */
void ProcessCommand(char *command)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	printf("Command received: %s\r\n", command);
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4836      	ldr	r0, [pc, #216]	@ (8001e78 <ProcessCommand+0xe4>)
 8001da0:	f009 fa40 	bl	800b224 <iprintf>

	if (strcmp(command, "mount") == 0)
 8001da4:	4935      	ldr	r1, [pc, #212]	@ (8001e7c <ProcessCommand+0xe8>)
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fa3a 	bl	8000220 <strcmp>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <ProcessCommand+0x24>
	{
		SDMount();
 8001db2:	f7ff fdef 	bl	8001994 <SDMount>
	else
	{
		printf("Unknown command: %s\r\n", command);
		printf("Type 'help' for available commands.\r\n");
	}
}
 8001db6:	e05b      	b.n	8001e70 <ProcessCommand+0xdc>
	else if (strcmp(command, "unmount") == 0)
 8001db8:	4931      	ldr	r1, [pc, #196]	@ (8001e80 <ProcessCommand+0xec>)
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fa30 	bl	8000220 <strcmp>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d102      	bne.n	8001dcc <ProcessCommand+0x38>
		SDUnmount();
 8001dc6:	f7ff fe0b 	bl	80019e0 <SDUnmount>
}
 8001dca:	e051      	b.n	8001e70 <ProcessCommand+0xdc>
	else if (strncmp(command, "open ", 5) == 0)
 8001dcc:	2205      	movs	r2, #5
 8001dce:	492d      	ldr	r1, [pc, #180]	@ (8001e84 <ProcessCommand+0xf0>)
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f009 fbcf 	bl	800b574 <strncmp>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d106      	bne.n	8001dea <ProcessCommand+0x56>
		char *filename = command + 5;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3305      	adds	r3, #5
 8001de0:	60fb      	str	r3, [r7, #12]
		OpenFile(filename);
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff fe2a 	bl	8001a3c <OpenFile>
}
 8001de8:	e042      	b.n	8001e70 <ProcessCommand+0xdc>
	else if (strcmp(command, "close") == 0)
 8001dea:	4927      	ldr	r1, [pc, #156]	@ (8001e88 <ProcessCommand+0xf4>)
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fa17 	bl	8000220 <strcmp>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <ProcessCommand+0x6a>
		CloseFile();
 8001df8:	f7ff fe72 	bl	8001ae0 <CloseFile>
}
 8001dfc:	e038      	b.n	8001e70 <ProcessCommand+0xdc>
	else if (strncmp(command, "write ", 6) == 0)
 8001dfe:	2206      	movs	r2, #6
 8001e00:	4922      	ldr	r1, [pc, #136]	@ (8001e8c <ProcessCommand+0xf8>)
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f009 fbb6 	bl	800b574 <strncmp>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <ProcessCommand+0x88>
		char *text = command + 6;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3306      	adds	r3, #6
 8001e12:	613b      	str	r3, [r7, #16]
		WriteFile(text);
 8001e14:	6938      	ldr	r0, [r7, #16]
 8001e16:	f7ff fee3 	bl	8001be0 <WriteFile>
}
 8001e1a:	e029      	b.n	8001e70 <ProcessCommand+0xdc>
	else if (strncmp(command, "read ", 5) == 0)
 8001e1c:	2205      	movs	r2, #5
 8001e1e:	491c      	ldr	r1, [pc, #112]	@ (8001e90 <ProcessCommand+0xfc>)
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f009 fba7 	bl	800b574 <strncmp>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <ProcessCommand+0xa6>
		char *filename = command + 5;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3305      	adds	r3, #5
 8001e30:	617b      	str	r3, [r7, #20]
		ReadFile(filename);
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff34 	bl	8001ca0 <ReadFile>
}
 8001e38:	e01a      	b.n	8001e70 <ProcessCommand+0xdc>
	else if (strcmp(command, "size") == 0)
 8001e3a:	4916      	ldr	r1, [pc, #88]	@ (8001e94 <ProcessCommand+0x100>)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7fe f9ef 	bl	8000220 <strcmp>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <ProcessCommand+0xba>
		CheckSize();
 8001e48:	f7ff fe72 	bl	8001b30 <CheckSize>
}
 8001e4c:	e010      	b.n	8001e70 <ProcessCommand+0xdc>
	else if (strcmp(command, "help") == 0)
 8001e4e:	4912      	ldr	r1, [pc, #72]	@ (8001e98 <ProcessCommand+0x104>)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7fe f9e5 	bl	8000220 <strcmp>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <ProcessCommand+0xce>
		ShowHelp();
 8001e5c:	f000 f822 	bl	8001ea4 <ShowHelp>
}
 8001e60:	e006      	b.n	8001e70 <ProcessCommand+0xdc>
		printf("Unknown command: %s\r\n", command);
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	480d      	ldr	r0, [pc, #52]	@ (8001e9c <ProcessCommand+0x108>)
 8001e66:	f009 f9dd 	bl	800b224 <iprintf>
		printf("Type 'help' for available commands.\r\n");
 8001e6a:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <ProcessCommand+0x10c>)
 8001e6c:	f009 fa42 	bl	800b2f4 <puts>
}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	0800d900 	.word	0x0800d900
 8001e7c:	0800d918 	.word	0x0800d918
 8001e80:	0800d920 	.word	0x0800d920
 8001e84:	0800d928 	.word	0x0800d928
 8001e88:	0800d930 	.word	0x0800d930
 8001e8c:	0800d938 	.word	0x0800d938
 8001e90:	0800d940 	.word	0x0800d940
 8001e94:	0800d948 	.word	0x0800d948
 8001e98:	0800d950 	.word	0x0800d950
 8001e9c:	0800d958 	.word	0x0800d958
 8001ea0:	0800d970 	.word	0x0800d970

08001ea4 <ShowHelp>:

/* 지원 명령 리스트 출력 */
void ShowHelp(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	printf("\r\n=== Available Commands ===\r\n");
 8001ea8:	480f      	ldr	r0, [pc, #60]	@ (8001ee8 <ShowHelp+0x44>)
 8001eaa:	f009 fa23 	bl	800b2f4 <puts>
	printf("mount              - Mount SD card\r\n");
 8001eae:	480f      	ldr	r0, [pc, #60]	@ (8001eec <ShowHelp+0x48>)
 8001eb0:	f009 fa20 	bl	800b2f4 <puts>
	printf("unmount            - Unmount SD card\r\n");
 8001eb4:	480e      	ldr	r0, [pc, #56]	@ (8001ef0 <ShowHelp+0x4c>)
 8001eb6:	f009 fa1d 	bl	800b2f4 <puts>
	printf("open <filename>    - Open file\r\n");
 8001eba:	480e      	ldr	r0, [pc, #56]	@ (8001ef4 <ShowHelp+0x50>)
 8001ebc:	f009 fa1a 	bl	800b2f4 <puts>
	printf("close              - Close current file\r\n");
 8001ec0:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <ShowHelp+0x54>)
 8001ec2:	f009 fa17 	bl	800b2f4 <puts>
	printf("write <text>       - Write text to file\r\n");
 8001ec6:	480d      	ldr	r0, [pc, #52]	@ (8001efc <ShowHelp+0x58>)
 8001ec8:	f009 fa14 	bl	800b2f4 <puts>
	printf("read <filename>    - Read file content\r\n");
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <ShowHelp+0x5c>)
 8001ece:	f009 fa11 	bl	800b2f4 <puts>
	printf("size               - Check SD card free space\r\n");
 8001ed2:	480c      	ldr	r0, [pc, #48]	@ (8001f04 <ShowHelp+0x60>)
 8001ed4:	f009 fa0e 	bl	800b2f4 <puts>
	printf("help               - Show this help\r\n");
 8001ed8:	480b      	ldr	r0, [pc, #44]	@ (8001f08 <ShowHelp+0x64>)
 8001eda:	f009 fa0b 	bl	800b2f4 <puts>
	printf("==========================\r\n");
 8001ede:	480b      	ldr	r0, [pc, #44]	@ (8001f0c <ShowHelp+0x68>)
 8001ee0:	f009 fa08 	bl	800b2f4 <puts>
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	0800d998 	.word	0x0800d998
 8001eec:	0800d9b8 	.word	0x0800d9b8
 8001ef0:	0800d9dc 	.word	0x0800d9dc
 8001ef4:	0800da04 	.word	0x0800da04
 8001ef8:	0800da24 	.word	0x0800da24
 8001efc:	0800da50 	.word	0x0800da50
 8001f00:	0800da7c 	.word	0x0800da7c
 8001f04:	0800daa4 	.word	0x0800daa4
 8001f08:	0800dad4 	.word	0x0800dad4
 8001f0c:	0800dafc 	.word	0x0800dafc

08001f10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f16:	f000 fc10 	bl	800273a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f1a:	f000 f85b 	bl	8001fd4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f1e:	f7ff fcb7 	bl	8001890 <MX_GPIO_Init>
	MX_DMA_Init();
 8001f22:	f7ff f80f 	bl	8000f44 <MX_DMA_Init>
	MX_SPI1_Init();
 8001f26:	f000 f8f5 	bl	8002114 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001f2a:	f000 fb31 	bl	8002590 <MX_USART1_UART_Init>
	if (MX_FATFS_Init() != APP_OK) {
 8001f2e:	f005 f86f 	bl	8007010 <MX_FATFS_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <main+0x2c>
		Error_Handler();
 8001f38:	f000 f8e6 	bl	8002108 <Error_Handler>
	}
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &g_rx, 1); // UART 전역변수로 받기!
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	491d      	ldr	r1, [pc, #116]	@ (8001fb4 <main+0xa4>)
 8001f40:	481d      	ldr	r0, [pc, #116]	@ (8001fb8 <main+0xa8>)
 8001f42:	f003 f829 	bl	8004f98 <HAL_UART_Receive_IT>

	// 시작 메시지
	printf("\r\n=== SD Card Control System ===\r\n");
 8001f46:	481d      	ldr	r0, [pc, #116]	@ (8001fbc <main+0xac>)
 8001f48:	f009 f9d4 	bl	800b2f4 <puts>
	printf("Type 'help' for available commands.\r\n");
 8001f4c:	481c      	ldr	r0, [pc, #112]	@ (8001fc0 <main+0xb0>)
 8001f4e:	f009 f9d1 	bl	800b2f4 <puts>
	printf("Ready> ");
 8001f52:	481c      	ldr	r0, [pc, #112]	@ (8001fc4 <main+0xb4>)
 8001f54:	f009 f966 	bl	800b224 <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		uint8_t currentCardState = SD_IsCardDetected(); // 카드 삽입 감지
 8001f58:	f7ff fd0c 	bl	8001974 <SD_IsCardDetected>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]

		if (currentCardState && !previousCardState) // 디바운싱
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <main+0x6a>
 8001f66:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <main+0xb8>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <main+0x6a>
		{
			HAL_Delay(200); // 디바운싱
 8001f6e:	20c8      	movs	r0, #200	@ 0xc8
 8001f70:	f000 fc54 	bl	800281c <HAL_Delay>
			SDMount();
 8001f74:	f7ff fd0e 	bl	8001994 <SDMount>
 8001f78:	e008      	b.n	8001f8c <main+0x7c>
		}
		else if (!currentCardState && previousCardState) // 카드 제거 감지
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <main+0x7c>
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <main+0xb8>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <main+0x7c>
		{
			SDUnmount();
 8001f88:	f7ff fd2a 	bl	80019e0 <SDUnmount>
		}

		previousCardState = currentCardState;
 8001f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc8 <main+0xb8>)
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	7013      	strb	r3, [r2, #0]

		// 명령어 처리
		if (commandReady)
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <main+0xbc>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <main+0x9c>
		{
			ProcessCommand(rxBuffer);
 8001f9a:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <main+0xc0>)
 8001f9c:	f7ff fefa 	bl	8001d94 <ProcessCommand>
			commandReady = 0;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <main+0xbc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
			printf("Ready> "); // 계속 사용자 입력을 감시
 8001fa6:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <main+0xb4>)
 8001fa8:	f009 f93c 	bl	800b224 <iprintf>
		}

		HAL_Delay(10);
 8001fac:	200a      	movs	r0, #10
 8001fae:	f000 fc35 	bl	800281c <HAL_Delay>
	while (1) {
 8001fb2:	e7d1      	b.n	8001f58 <main+0x48>
 8001fb4:	2000235a 	.word	0x2000235a
 8001fb8:	20002484 	.word	0x20002484
 8001fbc:	0800db18 	.word	0x0800db18
 8001fc0:	0800d970 	.word	0x0800d970
 8001fc4:	0800db3c 	.word	0x0800db3c
 8001fc8:	200022e8 	.word	0x200022e8
 8001fcc:	20002359 	.word	0x20002359
 8001fd0:	200022f4 	.word	0x200022f4

08001fd4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b094      	sub	sp, #80	@ 0x50
 8001fd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	2238      	movs	r2, #56	@ 0x38
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f009 fabe 	bl	800b564 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f001 f97a 	bl	80032f0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002000:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002004:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002006:	2302      	movs	r3, #2
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800200a:	2303      	movs	r3, #3
 800200c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800200e:	2301      	movs	r3, #1
 8002010:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 40;
 8002012:	2328      	movs	r3, #40	@ 0x28
 8002014:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002016:	2302      	movs	r3, #2
 8002018:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800201a:	2302      	movs	r3, #2
 800201c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800201e:	2302      	movs	r3, #2
 8002020:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f001 fa16 	bl	8003458 <HAL_RCC_OscConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0x62>
		Error_Handler();
 8002032:	f000 f869 	bl	8002108 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002036:	230f      	movs	r3, #15
 8002038:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203a:	2303      	movs	r3, #3
 800203c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2104      	movs	r1, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f001 fd14 	bl	8003a7c <HAL_RCC_ClockConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0x8a>
		Error_Handler();
 800205a:	f000 f855 	bl	8002108 <Error_Handler>
	}
}
 800205e:	bf00      	nop
 8002060:	3750      	adds	r7, #80	@ 0x50
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART 수신 인터럽트 콜백
 *        1바이트씩 수신해 '\r' 또는 '\n'이 오면 한 줄 명령으로 처리한다.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1d      	ldr	r2, [pc, #116]	@ (80020ec <HAL_UART_RxCpltCallback+0x84>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d134      	bne.n	80020e4 <HAL_UART_RxCpltCallback+0x7c>
    if (g_rx == '\r' || g_rx == '\n') {
 800207a:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <HAL_UART_RxCpltCallback+0x88>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b0d      	cmp	r3, #13
 8002082:	d004      	beq.n	800208e <HAL_UART_RxCpltCallback+0x26>
 8002084:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <HAL_UART_RxCpltCallback+0x88>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b0a      	cmp	r3, #10
 800208c:	d10f      	bne.n	80020ae <HAL_UART_RxCpltCallback+0x46>
      // 한 줄 종료 → 명령 처리 플래그 셋
      rxBuffer[rxIndex] = '\0';
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_UART_RxCpltCallback+0x8c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <HAL_UART_RxCpltCallback+0x90>)
 8002096:	2100      	movs	r1, #0
 8002098:	5499      	strb	r1, [r3, r2]
      commandReady = 1;
 800209a:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_UART_RxCpltCallback+0x94>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
      rxIndex = 0;
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <HAL_UART_RxCpltCallback+0x8c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
      printf("\r\n");  // 깔끔히 줄바꿈
 80020a6:	4816      	ldr	r0, [pc, #88]	@ (8002100 <HAL_UART_RxCpltCallback+0x98>)
 80020a8:	f009 f924 	bl	800b2f4 <puts>
 80020ac:	e015      	b.n	80020da <HAL_UART_RxCpltCallback+0x72>
    } else if (rxIndex < sizeof(rxBuffer) - 1) {
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <HAL_UART_RxCpltCallback+0x8c>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b62      	cmp	r3, #98	@ 0x62
 80020b4:	d811      	bhi.n	80020da <HAL_UART_RxCpltCallback+0x72>
      // 일반 문자 → 버퍼에 축적, 동시에 에코백(선택)
      rxBuffer[rxIndex++] = g_rx;
 80020b6:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <HAL_UART_RxCpltCallback+0x8c>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	b2d1      	uxtb	r1, r2
 80020be:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <HAL_UART_RxCpltCallback+0x8c>)
 80020c0:	7011      	strb	r1, [r2, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <HAL_UART_RxCpltCallback+0x88>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2d9      	uxtb	r1, r3
 80020ca:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_UART_RxCpltCallback+0x90>)
 80020cc:	5499      	strb	r1, [r3, r2]
      HAL_UART_Transmit(&huart1, (uint8_t*)&g_rx, 1, 10);
 80020ce:	230a      	movs	r3, #10
 80020d0:	2201      	movs	r2, #1
 80020d2:	4907      	ldr	r1, [pc, #28]	@ (80020f0 <HAL_UART_RxCpltCallback+0x88>)
 80020d4:	480b      	ldr	r0, [pc, #44]	@ (8002104 <HAL_UART_RxCpltCallback+0x9c>)
 80020d6:	f002 fed1 	bl	8004e7c <HAL_UART_Transmit>
    }
    // 다음 1바이트 수신 예약
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&g_rx, 1);
 80020da:	2201      	movs	r2, #1
 80020dc:	4904      	ldr	r1, [pc, #16]	@ (80020f0 <HAL_UART_RxCpltCallback+0x88>)
 80020de:	4809      	ldr	r0, [pc, #36]	@ (8002104 <HAL_UART_RxCpltCallback+0x9c>)
 80020e0:	f002 ff5a 	bl	8004f98 <HAL_UART_Receive_IT>
  }
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40013800 	.word	0x40013800
 80020f0:	2000235a 	.word	0x2000235a
 80020f4:	20002358 	.word	0x20002358
 80020f8:	200022f4 	.word	0x200022f4
 80020fc:	20002359 	.word	0x20002359
 8002100:	0800d8a4 	.word	0x0800d8a4
 8002104:	20002484 	.word	0x20002484

08002108 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <Error_Handler+0x8>

08002114 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <MX_SPI1_Init+0x74>)
 800211a:	4a1c      	ldr	r2, [pc, #112]	@ (800218c <MX_SPI1_Init+0x78>)
 800211c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800211e:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002120:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800212c:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <MX_SPI1_Init+0x74>)
 800212e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002132:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800213a:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <MX_SPI1_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002146:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <MX_SPI1_Init+0x74>)
 800214a:	2210      	movs	r2, #16
 800214c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <MX_SPI1_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002162:	2207      	movs	r2, #7
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002166:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <MX_SPI1_Init+0x74>)
 800216e:	2208      	movs	r2, #8
 8002170:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	@ (8002188 <MX_SPI1_Init+0x74>)
 8002174:	f002 f88e 	bl	8004294 <HAL_SPI_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800217e:	f7ff ffc3 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000235c 	.word	0x2000235c
 800218c:	40013000 	.word	0x40013000

08002190 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a40      	ldr	r2, [pc, #256]	@ (80022b0 <HAL_SPI_MspInit+0x120>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d17a      	bne.n	80022a8 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b2:	4b40      	ldr	r3, [pc, #256]	@ (80022b4 <HAL_SPI_MspInit+0x124>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	4a3f      	ldr	r2, [pc, #252]	@ (80022b4 <HAL_SPI_MspInit+0x124>)
 80021b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80021be:	4b3d      	ldr	r3, [pc, #244]	@ (80022b4 <HAL_SPI_MspInit+0x124>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_SPI_MspInit+0x124>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a39      	ldr	r2, [pc, #228]	@ (80022b4 <HAL_SPI_MspInit+0x124>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d6:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_SPI_MspInit+0x124>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_CLK_Pin|SPI1_MISO_SD_DAT0_Pin|SPI1_MOSI_SD_CMD_Pin;
 80021e2:	23e0      	movs	r3, #224	@ 0xe0
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f2:	2305      	movs	r3, #5
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002200:	f000 fec4 	bl	8002f8c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8002204:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 8002206:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <HAL_SPI_MspInit+0x12c>)
 8002208:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800220a:	4b2b      	ldr	r3, [pc, #172]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 800220c:	220a      	movs	r2, #10
 800220e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002210:	4b29      	ldr	r3, [pc, #164]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002216:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 800221e:	2280      	movs	r2, #128	@ 0x80
 8002220:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002222:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002228:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800222e:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 8002230:	2220      	movs	r2, #32
 8002232:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002234:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800223a:	481f      	ldr	r0, [pc, #124]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 800223c:	f000 fc2c 	bl	8002a98 <HAL_DMA_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002246:	f7ff ff5f 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1a      	ldr	r2, [pc, #104]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 800224e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002250:	4a19      	ldr	r2, [pc, #100]	@ (80022b8 <HAL_SPI_MspInit+0x128>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002256:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 8002258:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_SPI_MspInit+0x134>)
 800225a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800225c:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 800225e:	220b      	movs	r2, #11
 8002260:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002262:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 8002264:	2210      	movs	r2, #16
 8002266:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002268:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800226e:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 8002270:	2280      	movs	r2, #128	@ 0x80
 8002272:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002274:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 8002282:	2220      	movs	r2, #32
 8002284:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 800228e:	f000 fc03 	bl	8002a98 <HAL_DMA_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002298:	f7ff ff36 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a08      	ldr	r2, [pc, #32]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 80022a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80022a2:	4a07      	ldr	r2, [pc, #28]	@ (80022c0 <HAL_SPI_MspInit+0x130>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022a8:	bf00      	nop
 80022aa:	3728      	adds	r7, #40	@ 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40013000 	.word	0x40013000
 80022b4:	40021000 	.word	0x40021000
 80022b8:	200023c0 	.word	0x200023c0
 80022bc:	40020008 	.word	0x40020008
 80022c0:	20002420 	.word	0x20002420
 80022c4:	4002001c 	.word	0x4002001c

080022c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <HAL_MspInit+0x44>)
 80022d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d2:	4a0e      	ldr	r2, [pc, #56]	@ (800230c <HAL_MspInit+0x44>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022da:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <HAL_MspInit+0x44>)
 80022dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_MspInit+0x44>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	4a08      	ldr	r2, [pc, #32]	@ (800230c <HAL_MspInit+0x44>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_MspInit+0x44>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022fe:	f001 f89b 	bl	8003438 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <NMI_Handler+0x4>

08002318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <MemManage_Handler+0x4>

08002328 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <UsageFault_Handler+0x4>

08002338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002368:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <SysTick_Handler+0x38>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <SysTick_Handler+0x18>
		Timer1--;
 8002370:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <SysTick_Handler+0x38>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <SysTick_Handler+0x38>)
 800237a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <SysTick_Handler+0x3c>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <SysTick_Handler+0x2c>
		Timer2--;
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <SysTick_Handler+0x3c>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <SysTick_Handler+0x3c>)
 800238e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002390:	f000 fa26 	bl	80027e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002394:	f000 fb73 	bl	8002a7e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000208 	.word	0x20000208
 80023a0:	2000020a 	.word	0x2000020a

080023a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <DMA1_Channel1_IRQHandler+0x10>)
 80023aa:	f000 fcdd 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200023c0 	.word	0x200023c0

080023b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <DMA1_Channel2_IRQHandler+0x10>)
 80023be:	f000 fcd3 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20002420 	.word	0x20002420

080023cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <USART1_IRQHandler+0x10>)
 80023d2:	f002 fe2d 	bl	8005030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20002484 	.word	0x20002484

080023e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_kill>:

int _kill(int pid, int sig)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fa:	f009 f917 	bl	800b62c <__errno>
 80023fe:	4603      	mov	r3, r0
 8002400:	2216      	movs	r2, #22
 8002402:	601a      	str	r2, [r3, #0]
  return -1;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_exit>:

void _exit (int status)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ffe7 	bl	80023f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002422:	bf00      	nop
 8002424:	e7fd      	b.n	8002422 <_exit+0x12>

08002426 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e00a      	b.n	800244e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002438:	f3af 8000 	nop.w
 800243c:	4601      	mov	r1, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	dbf0      	blt.n	8002438 <_read+0x12>
  }

  return len;
 8002456:	687b      	ldr	r3, [r7, #4]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e009      	b.n	8002486 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	60ba      	str	r2, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fa68 	bl	8001950 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	dbf1      	blt.n	8002472 <_write+0x12>
  }
  return len;
 800248e:	687b      	ldr	r3, [r7, #4]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_close>:

int _close(int file)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c0:	605a      	str	r2, [r3, #4]
  return 0;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_isatty>:

int _isatty(int file)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024d8:	2301      	movs	r3, #1
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <_sbrk+0x5c>)
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <_sbrk+0x60>)
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800251c:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <_sbrk+0x64>)
 800251e:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <_sbrk+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d207      	bcs.n	8002540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002530:	f009 f87c 	bl	800b62c <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e009      	b.n	8002554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20008000 	.word	0x20008000
 8002560:	00000400 	.word	0x00000400
 8002564:	20002480 	.word	0x20002480
 8002568:	200028a8 	.word	0x200028a8

0800256c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002570:	4b06      	ldr	r3, [pc, #24]	@ (800258c <SystemInit+0x20>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	4a05      	ldr	r2, [pc, #20]	@ (800258c <SystemInit+0x20>)
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002594:	4b22      	ldr	r3, [pc, #136]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 8002596:	4a23      	ldr	r2, [pc, #140]	@ (8002624 <MX_USART1_UART_Init+0x94>)
 8002598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800259a:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 800259c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025b6:	220c      	movs	r2, #12
 80025b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c0:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c6:	4b16      	ldr	r3, [pc, #88]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d2:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d8:	4811      	ldr	r0, [pc, #68]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025da:	f002 fbff 	bl	8004ddc <HAL_UART_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80025e4:	f7ff fd90 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e8:	2100      	movs	r1, #0
 80025ea:	480d      	ldr	r0, [pc, #52]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025ec:	f004 fc45 	bl	8006e7a <HAL_UARTEx_SetTxFifoThreshold>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80025f6:	f7ff fd87 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025fa:	2100      	movs	r1, #0
 80025fc:	4808      	ldr	r0, [pc, #32]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 80025fe:	f004 fc7a 	bl	8006ef6 <HAL_UARTEx_SetRxFifoThreshold>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002608:	f7ff fd7e 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800260c:	4804      	ldr	r0, [pc, #16]	@ (8002620 <MX_USART1_UART_Init+0x90>)
 800260e:	f004 fbfb 	bl	8006e08 <HAL_UARTEx_DisableFifoMode>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002618:	f7ff fd76 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20002484 	.word	0x20002484
 8002624:	40013800 	.word	0x40013800

08002628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b09a      	sub	sp, #104	@ 0x68
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	2244      	movs	r2, #68	@ 0x44
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f008 ff8b 	bl	800b564 <memset>
  if(uartHandle->Instance==USART1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_UART_MspInit+0xb4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d13d      	bne.n	80026d4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002658:	2301      	movs	r3, #1
 800265a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	4618      	mov	r0, r3
 8002666:	f001 fc25 	bl	8003eb4 <HAL_RCCEx_PeriphCLKConfig>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002670:	f7ff fd4a 	bl	8002108 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002674:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HAL_UART_MspInit+0xb8>)
 8002676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002678:	4a19      	ldr	r2, [pc, #100]	@ (80026e0 <HAL_UART_MspInit+0xb8>)
 800267a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002680:	4b17      	ldr	r3, [pc, #92]	@ (80026e0 <HAL_UART_MspInit+0xb8>)
 8002682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268c:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <HAL_UART_MspInit+0xb8>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	4a13      	ldr	r2, [pc, #76]	@ (80026e0 <HAL_UART_MspInit+0xb8>)
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <HAL_UART_MspInit+0xb8>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026a4:	23c0      	movs	r3, #192	@ 0xc0
 80026a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026b4:	2307      	movs	r3, #7
 80026b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026bc:	4619      	mov	r1, r3
 80026be:	4809      	ldr	r0, [pc, #36]	@ (80026e4 <HAL_UART_MspInit+0xbc>)
 80026c0:	f000 fc64 	bl	8002f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	2025      	movs	r0, #37	@ 0x25
 80026ca:	f000 f9a4 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026ce:	2025      	movs	r0, #37	@ 0x25
 80026d0:	f000 f9bb 	bl	8002a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026d4:	bf00      	nop
 80026d6:	3768      	adds	r7, #104	@ 0x68
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40013800 	.word	0x40013800
 80026e0:	40021000 	.word	0x40021000
 80026e4:	48000400 	.word	0x48000400

080026e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e8:	480d      	ldr	r0, [pc, #52]	@ (8002720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026ec:	f7ff ff3e 	bl	800256c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026f0:	480c      	ldr	r0, [pc, #48]	@ (8002724 <LoopForever+0x6>)
  ldr r1, =_edata
 80026f2:	490d      	ldr	r1, [pc, #52]	@ (8002728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026f4:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <LoopForever+0xe>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026f8:	e002      	b.n	8002700 <LoopCopyDataInit>

080026fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026fe:	3304      	adds	r3, #4

08002700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002704:	d3f9      	bcc.n	80026fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002708:	4c0a      	ldr	r4, [pc, #40]	@ (8002734 <LoopForever+0x16>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800270c:	e001      	b.n	8002712 <LoopFillZerobss>

0800270e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800270e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002710:	3204      	adds	r2, #4

08002712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002714:	d3fb      	bcc.n	800270e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002716:	f008 ff8f 	bl	800b638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800271a:	f7ff fbf9 	bl	8001f10 <main>

0800271e <LoopForever>:

LoopForever:
    b LoopForever
 800271e:	e7fe      	b.n	800271e <LoopForever>
  ldr   r0, =_estack
 8002720:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002728:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800272c:	0800e394 	.word	0x0800e394
  ldr r2, =_sbss
 8002730:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002734:	200028a4 	.word	0x200028a4

08002738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002738:	e7fe      	b.n	8002738 <ADC1_2_IRQHandler>

0800273a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 f95b 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800274a:	200f      	movs	r0, #15
 800274c:	f000 f80e 	bl	800276c <HAL_InitTick>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	71fb      	strb	r3, [r7, #7]
 800275a:	e001      	b.n	8002760 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800275c:	f7ff fdb4 	bl	80022c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002760:	79fb      	ldrb	r3, [r7, #7]

}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002778:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <HAL_InitTick+0x68>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d022      	beq.n	80027c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002780:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_InitTick+0x6c>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <HAL_InitTick+0x68>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800278c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f966 	bl	8002a66 <HAL_SYSTICK_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10f      	bne.n	80027c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b0f      	cmp	r3, #15
 80027a4:	d809      	bhi.n	80027ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a6:	2200      	movs	r2, #0
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	f04f 30ff 	mov.w	r0, #4294967295
 80027ae:	f000 f932 	bl	8002a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027b2:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <HAL_InitTick+0x70>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	e007      	b.n	80027ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e004      	b.n	80027ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	2000000c 	.word	0x2000000c
 80027d8:	20000004 	.word	0x20000004
 80027dc:	20000008 	.word	0x20000008

080027e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_IncTick+0x1c>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_IncTick+0x20>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	4a03      	ldr	r2, [pc, #12]	@ (80027fc <HAL_IncTick+0x1c>)
 80027f0:	6013      	str	r3, [r2, #0]
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	20002518 	.word	0x20002518
 8002800:	2000000c 	.word	0x2000000c

08002804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTick;
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_GetTick+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20002518 	.word	0x20002518

0800281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff ffee 	bl	8002804 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d004      	beq.n	8002840 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002836:	4b09      	ldr	r3, [pc, #36]	@ (800285c <HAL_Delay+0x40>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002840:	bf00      	nop
 8002842:	f7ff ffdf 	bl	8002804 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	429a      	cmp	r2, r3
 8002850:	d8f7      	bhi.n	8002842 <HAL_Delay+0x26>
  {
  }
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000000c 	.word	0x2000000c

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	@ (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	@ (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	@ (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	@ 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	@ 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a24:	f7ff ff40 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f7ff ff90 	bl	8002954 <NVIC_EncodePriority>
 8002a34:	4602      	mov	r2, r0
 8002a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff5f 	bl	8002900 <__NVIC_SetPriority>
}
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff33 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffa4 	bl	80029bc <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002a82:	f000 f802 	bl	8002a8a <HAL_SYSTICK_Callback>
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e08d      	b.n	8002bc6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_DMA_Init+0x138>)
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d80f      	bhi.n	8002ad6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b45      	ldr	r3, [pc, #276]	@ (8002bd4 <HAL_DMA_Init+0x13c>)
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a45      	ldr	r2, [pc, #276]	@ (8002bd8 <HAL_DMA_Init+0x140>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	009a      	lsls	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a42      	ldr	r2, [pc, #264]	@ (8002bdc <HAL_DMA_Init+0x144>)
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ad4:	e00e      	b.n	8002af4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_DMA_Init+0x148>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd8 <HAL_DMA_Init+0x140>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a3c      	ldr	r2, [pc, #240]	@ (8002be4 <HAL_DMA_Init+0x14c>)
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9be 	bl	8002ec8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b54:	d102      	bne.n	8002b5c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b70:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_DMA_Init+0x104>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d80c      	bhi.n	8002b9c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9de 	bl	8002f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	e008      	b.n	8002bae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40020407 	.word	0x40020407
 8002bd4:	bffdfff8 	.word	0xbffdfff8
 8002bd8:	cccccccd 	.word	0xcccccccd
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	bffdfbf8 	.word	0xbffdfbf8
 8002be4:	40020400 	.word	0x40020400

08002be8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d005      	beq.n	8002c0c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2204      	movs	r2, #4
 8002c04:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	e037      	b.n	8002c7c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 020e 	bic.w	r2, r2, #14
 8002c1a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c2a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c58:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c70:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c7a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d00d      	beq.n	8002cce <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e047      	b.n	8002d5e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 020e 	bic.w	r2, r2, #14
 8002cdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f003 021f 	and.w	r2, r3, #31
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d10:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d1a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d3c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
    }
  }
  return status;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2204      	movs	r2, #4
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d026      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x7a>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d021      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0204 	bic.w	r2, r2, #4
 8002dba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	2104      	movs	r1, #4
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d071      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002de0:	e06c      	b.n	8002ebc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2202      	movs	r2, #2
 8002dec:	409a      	lsls	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02e      	beq.n	8002e54 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d029      	beq.n	8002e54 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 020a 	bic.w	r2, r2, #10
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	f003 021f 	and.w	r2, r3, #31
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	2102      	movs	r1, #2
 8002e34:	fa01 f202 	lsl.w	r2, r1, r2
 8002e38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d038      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e52:	e033      	b.n	8002ebc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02a      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d025      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 020e 	bic.w	r2, r2, #14
 8002e80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	f003 021f 	and.w	r2, r3, #31
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	2101      	movs	r1, #1
 8002e90:	fa01 f202 	lsl.w	r2, r1, r2
 8002e94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
}
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b16      	ldr	r3, [pc, #88]	@ (8002f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d802      	bhi.n	8002ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002edc:	4b15      	ldr	r3, [pc, #84]	@ (8002f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e001      	b.n	8002ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002ee2:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ee4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3b08      	subs	r3, #8
 8002ef2:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	009a      	lsls	r2, r3, #2
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a0b      	ldr	r2, [pc, #44]	@ (8002f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002f12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40020407 	.word	0x40020407
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020820 	.word	0x40020820
 8002f3c:	cccccccd 	.word	0xcccccccd
 8002f40:	40020880 	.word	0x40020880

08002f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a08      	ldr	r2, [pc, #32]	@ (8002f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f66:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2201      	movs	r2, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	1000823f 	.word	0x1000823f
 8002f88:	40020940 	.word	0x40020940

08002f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f9a:	e15a      	b.n	8003252 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 814c 	beq.w	800324c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d005      	beq.n	8002fcc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d130      	bne.n	800302e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003002:	2201      	movs	r2, #1
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	f003 0201 	and.w	r2, r3, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b03      	cmp	r3, #3
 8003038:	d017      	beq.n	800306a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d123      	bne.n	80030be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	08da      	lsrs	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3208      	adds	r2, #8
 800307e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	08da      	lsrs	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3208      	adds	r2, #8
 80030b8:	6939      	ldr	r1, [r7, #16]
 80030ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	2203      	movs	r2, #3
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0203 	and.w	r2, r3, #3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80a6 	beq.w	800324c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003100:	4b5b      	ldr	r3, [pc, #364]	@ (8003270 <HAL_GPIO_Init+0x2e4>)
 8003102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003104:	4a5a      	ldr	r2, [pc, #360]	@ (8003270 <HAL_GPIO_Init+0x2e4>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6613      	str	r3, [r2, #96]	@ 0x60
 800310c:	4b58      	ldr	r3, [pc, #352]	@ (8003270 <HAL_GPIO_Init+0x2e4>)
 800310e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003118:	4a56      	ldr	r2, [pc, #344]	@ (8003274 <HAL_GPIO_Init+0x2e8>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003142:	d01f      	beq.n	8003184 <HAL_GPIO_Init+0x1f8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a4c      	ldr	r2, [pc, #304]	@ (8003278 <HAL_GPIO_Init+0x2ec>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d019      	beq.n	8003180 <HAL_GPIO_Init+0x1f4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a4b      	ldr	r2, [pc, #300]	@ (800327c <HAL_GPIO_Init+0x2f0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_GPIO_Init+0x1f0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a4a      	ldr	r2, [pc, #296]	@ (8003280 <HAL_GPIO_Init+0x2f4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00d      	beq.n	8003178 <HAL_GPIO_Init+0x1ec>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a49      	ldr	r2, [pc, #292]	@ (8003284 <HAL_GPIO_Init+0x2f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <HAL_GPIO_Init+0x1e8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a48      	ldr	r2, [pc, #288]	@ (8003288 <HAL_GPIO_Init+0x2fc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d101      	bne.n	8003170 <HAL_GPIO_Init+0x1e4>
 800316c:	2305      	movs	r3, #5
 800316e:	e00a      	b.n	8003186 <HAL_GPIO_Init+0x1fa>
 8003170:	2306      	movs	r3, #6
 8003172:	e008      	b.n	8003186 <HAL_GPIO_Init+0x1fa>
 8003174:	2304      	movs	r3, #4
 8003176:	e006      	b.n	8003186 <HAL_GPIO_Init+0x1fa>
 8003178:	2303      	movs	r3, #3
 800317a:	e004      	b.n	8003186 <HAL_GPIO_Init+0x1fa>
 800317c:	2302      	movs	r3, #2
 800317e:	e002      	b.n	8003186 <HAL_GPIO_Init+0x1fa>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_GPIO_Init+0x1fa>
 8003184:	2300      	movs	r3, #0
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	f002 0203 	and.w	r2, r2, #3
 800318c:	0092      	lsls	r2, r2, #2
 800318e:	4093      	lsls	r3, r2
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003196:	4937      	ldr	r1, [pc, #220]	@ (8003274 <HAL_GPIO_Init+0x2e8>)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a4:	4b39      	ldr	r3, [pc, #228]	@ (800328c <HAL_GPIO_Init+0x300>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031c8:	4a30      	ldr	r2, [pc, #192]	@ (800328c <HAL_GPIO_Init+0x300>)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ce:	4b2f      	ldr	r3, [pc, #188]	@ (800328c <HAL_GPIO_Init+0x300>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031f2:	4a26      	ldr	r2, [pc, #152]	@ (800328c <HAL_GPIO_Init+0x300>)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031f8:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_GPIO_Init+0x300>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800321c:	4a1b      	ldr	r2, [pc, #108]	@ (800328c <HAL_GPIO_Init+0x300>)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003222:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <HAL_GPIO_Init+0x300>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003246:	4a11      	ldr	r2, [pc, #68]	@ (800328c <HAL_GPIO_Init+0x300>)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3301      	adds	r3, #1
 8003250:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	f47f ae9d 	bne.w	8002f9c <HAL_GPIO_Init+0x10>
  }
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40021000 	.word	0x40021000
 8003274:	40010000 	.word	0x40010000
 8003278:	48000400 	.word	0x48000400
 800327c:	48000800 	.word	0x48000800
 8003280:	48000c00 	.word	0x48000c00
 8003284:	48001000 	.word	0x48001000
 8003288:	48001400 	.word	0x48001400
 800328c:	40010400 	.word	0x40010400

08003290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e001      	b.n	80032b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032dc:	e002      	b.n	80032e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d141      	bne.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fe:	4b4b      	ldr	r3, [pc, #300]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330a:	d131      	bne.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800330c:	4b47      	ldr	r3, [pc, #284]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003312:	4a46      	ldr	r2, [pc, #280]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800331c:	4b43      	ldr	r3, [pc, #268]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003324:	4a41      	ldr	r2, [pc, #260]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800332a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800332c:	4b40      	ldr	r3, [pc, #256]	@ (8003430 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2232      	movs	r2, #50	@ 0x32
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	4a3f      	ldr	r2, [pc, #252]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	0c9b      	lsrs	r3, r3, #18
 800333e:	3301      	adds	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003342:	e002      	b.n	800334a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3b01      	subs	r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800334a:	4b38      	ldr	r3, [pc, #224]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003356:	d102      	bne.n	800335e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f2      	bne.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800335e:	4b33      	ldr	r3, [pc, #204]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800336a:	d158      	bne.n	800341e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e057      	b.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003370:	4b2e      	ldr	r3, [pc, #184]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003376:	4a2d      	ldr	r2, [pc, #180]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800337c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003380:	e04d      	b.n	800341e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003388:	d141      	bne.n	800340e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800338a:	4b28      	ldr	r3, [pc, #160]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003396:	d131      	bne.n	80033fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003398:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800339e:	4a23      	ldr	r2, [pc, #140]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a8:	4b20      	ldr	r3, [pc, #128]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033b0:	4a1e      	ldr	r2, [pc, #120]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003430 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2232      	movs	r2, #50	@ 0x32
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	0c9b      	lsrs	r3, r3, #18
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ce:	e002      	b.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d6:	4b15      	ldr	r3, [pc, #84]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e2:	d102      	bne.n	80033ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f2      	bne.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ea:	4b10      	ldr	r3, [pc, #64]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f6:	d112      	bne.n	800341e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e011      	b.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003402:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800340c:	e007      	b.n	800341e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800340e:	4b07      	ldr	r3, [pc, #28]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003416:	4a05      	ldr	r2, [pc, #20]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800341c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40007000 	.word	0x40007000
 8003430:	20000004 	.word	0x20000004
 8003434:	431bde83 	.word	0x431bde83

08003438 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a04      	ldr	r2, [pc, #16]	@ (8003454 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003446:	6093      	str	r3, [r2, #8]
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40007000 	.word	0x40007000

08003458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e2fe      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d075      	beq.n	8003562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003476:	4b97      	ldr	r3, [pc, #604]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	4b94      	ldr	r3, [pc, #592]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d102      	bne.n	8003496 <HAL_RCC_OscConfig+0x3e>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d002      	beq.n	800349c <HAL_RCC_OscConfig+0x44>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d10b      	bne.n	80034b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	4b8d      	ldr	r3, [pc, #564]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d05b      	beq.n	8003560 <HAL_RCC_OscConfig+0x108>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d157      	bne.n	8003560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e2d9      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034bc:	d106      	bne.n	80034cc <HAL_RCC_OscConfig+0x74>
 80034be:	4b85      	ldr	r3, [pc, #532]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a84      	ldr	r2, [pc, #528]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e01d      	b.n	8003508 <HAL_RCC_OscConfig+0xb0>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x98>
 80034d6:	4b7f      	ldr	r3, [pc, #508]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7e      	ldr	r2, [pc, #504]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b7c      	ldr	r3, [pc, #496]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7b      	ldr	r2, [pc, #492]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0xb0>
 80034f0:	4b78      	ldr	r3, [pc, #480]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a77      	ldr	r2, [pc, #476]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b75      	ldr	r3, [pc, #468]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a74      	ldr	r2, [pc, #464]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7ff f978 	bl	8002804 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7ff f974 	bl	8002804 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	@ 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e29e      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352a:	4b6a      	ldr	r3, [pc, #424]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0xc0>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7ff f964 	bl	8002804 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7ff f960 	bl	8002804 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	@ 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e28a      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003552:	4b60      	ldr	r3, [pc, #384]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0xe8>
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d075      	beq.n	800365a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356e:	4b59      	ldr	r3, [pc, #356]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	4b56      	ldr	r3, [pc, #344]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d102      	bne.n	800358e <HAL_RCC_OscConfig+0x136>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d002      	beq.n	8003594 <HAL_RCC_OscConfig+0x13c>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b04      	cmp	r3, #4
 8003592:	d11f      	bne.n	80035d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003594:	4b4f      	ldr	r3, [pc, #316]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_OscConfig+0x154>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e25d      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b49      	ldr	r3, [pc, #292]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	4946      	ldr	r1, [pc, #280]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035c0:	4b45      	ldr	r3, [pc, #276]	@ (80036d8 <HAL_RCC_OscConfig+0x280>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff f8d1 	bl	800276c <HAL_InitTick>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d043      	beq.n	8003658 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e249      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d023      	beq.n	8003624 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035dc:	4b3d      	ldr	r3, [pc, #244]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a3c      	ldr	r2, [pc, #240]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7ff f90c 	bl	8002804 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7ff f908 	bl	8002804 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e232      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003602:	4b34      	ldr	r3, [pc, #208]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360e:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	492d      	ldr	r1, [pc, #180]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
 8003622:	e01a      	b.n	800365a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003624:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 800362a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800362e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7ff f8e8 	bl	8002804 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003638:	f7ff f8e4 	bl	8002804 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e20e      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800364a:	4b22      	ldr	r3, [pc, #136]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x1e0>
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003658:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d041      	beq.n	80036ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366e:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003674:	4a17      	ldr	r2, [pc, #92]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7ff f8c1 	bl	8002804 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003686:	f7ff f8bd 	bl	8002804 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1e7      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ef      	beq.n	8003686 <HAL_RCC_OscConfig+0x22e>
 80036a6:	e020      	b.n	80036ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7ff f8a4 	bl	8002804 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036be:	e00d      	b.n	80036dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c0:	f7ff f8a0 	bl	8002804 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d906      	bls.n	80036dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1ca      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ea      	bne.n	80036c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80a6 	beq.w	8003844 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f8:	2300      	movs	r3, #0
 80036fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036fc:	4b84      	ldr	r3, [pc, #528]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_OscConfig+0x2b4>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x2b6>
 800370c:	2300      	movs	r3, #0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	4b7f      	ldr	r3, [pc, #508]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	4a7e      	ldr	r2, [pc, #504]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800371c:	6593      	str	r3, [r2, #88]	@ 0x58
 800371e:	4b7c      	ldr	r3, [pc, #496]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372e:	4b79      	ldr	r3, [pc, #484]	@ (8003914 <HAL_RCC_OscConfig+0x4bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800373a:	4b76      	ldr	r3, [pc, #472]	@ (8003914 <HAL_RCC_OscConfig+0x4bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a75      	ldr	r2, [pc, #468]	@ (8003914 <HAL_RCC_OscConfig+0x4bc>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7ff f85d 	bl	8002804 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374e:	f7ff f859 	bl	8002804 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e183      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003760:	4b6c      	ldr	r3, [pc, #432]	@ (8003914 <HAL_RCC_OscConfig+0x4bc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d108      	bne.n	8003786 <HAL_RCC_OscConfig+0x32e>
 8003774:	4b66      	ldr	r3, [pc, #408]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377a:	4a65      	ldr	r2, [pc, #404]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003784:	e024      	b.n	80037d0 <HAL_RCC_OscConfig+0x378>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b05      	cmp	r3, #5
 800378c:	d110      	bne.n	80037b0 <HAL_RCC_OscConfig+0x358>
 800378e:	4b60      	ldr	r3, [pc, #384]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003794:	4a5e      	ldr	r2, [pc, #376]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800379e:	4b5c      	ldr	r3, [pc, #368]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ae:	e00f      	b.n	80037d0 <HAL_RCC_OscConfig+0x378>
 80037b0:	4b57      	ldr	r3, [pc, #348]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	4a56      	ldr	r2, [pc, #344]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c0:	4b53      	ldr	r3, [pc, #332]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	4a52      	ldr	r2, [pc, #328]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7ff f814 	bl	8002804 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7ff f810 	bl	8002804 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e138      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f6:	4b46      	ldr	r3, [pc, #280]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ed      	beq.n	80037e0 <HAL_RCC_OscConfig+0x388>
 8003804:	e015      	b.n	8003832 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fe fffd 	bl	8002804 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe fff9 	bl	8002804 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e121      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003824:	4b3a      	ldr	r3, [pc, #232]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1ed      	bne.n	800380e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003832:	7ffb      	ldrb	r3, [r7, #31]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d105      	bne.n	8003844 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003838:	4b35      	ldr	r3, [pc, #212]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	4a34      	ldr	r2, [pc, #208]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 800383e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003842:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d03c      	beq.n	80038ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01c      	beq.n	8003892 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003858:	4b2d      	ldr	r3, [pc, #180]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 800385a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800385e:	4a2c      	ldr	r2, [pc, #176]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fe ffcc 	bl	8002804 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003870:	f7fe ffc8 	bl	8002804 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0f2      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003882:	4b23      	ldr	r3, [pc, #140]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ef      	beq.n	8003870 <HAL_RCC_OscConfig+0x418>
 8003890:	e01b      	b.n	80038ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003892:	4b1f      	ldr	r3, [pc, #124]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 8003894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003898:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a2:	f7fe ffaf 	bl	8002804 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038aa:	f7fe ffab 	bl	8002804 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0d5      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038bc:	4b14      	ldr	r3, [pc, #80]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80038be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ef      	bne.n	80038aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80c9 	beq.w	8003a66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	f000 8083 	beq.w	80039e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d15e      	bne.n	80039a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	4b09      	ldr	r3, [pc, #36]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a08      	ldr	r2, [pc, #32]	@ (8003910 <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe ff85 	bl	8002804 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fc:	e00c      	b.n	8003918 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fe ff81 	bl	8002804 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d905      	bls.n	8003918 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0ab      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
 8003910:	40021000 	.word	0x40021000
 8003914:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003918:	4b55      	ldr	r3, [pc, #340]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ec      	bne.n	80038fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003924:	4b52      	ldr	r3, [pc, #328]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	4b52      	ldr	r3, [pc, #328]	@ (8003a74 <HAL_RCC_OscConfig+0x61c>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6a11      	ldr	r1, [r2, #32]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003934:	3a01      	subs	r2, #1
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800393e:	0212      	lsls	r2, r2, #8
 8003940:	4311      	orrs	r1, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003946:	0852      	lsrs	r2, r2, #1
 8003948:	3a01      	subs	r2, #1
 800394a:	0552      	lsls	r2, r2, #21
 800394c:	4311      	orrs	r1, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003952:	0852      	lsrs	r2, r2, #1
 8003954:	3a01      	subs	r2, #1
 8003956:	0652      	lsls	r2, r2, #25
 8003958:	4311      	orrs	r1, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800395e:	06d2      	lsls	r2, r2, #27
 8003960:	430a      	orrs	r2, r1
 8003962:	4943      	ldr	r1, [pc, #268]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003964:	4313      	orrs	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003968:	4b41      	ldr	r3, [pc, #260]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a40      	ldr	r2, [pc, #256]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 800396e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003972:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003974:	4b3e      	ldr	r3, [pc, #248]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a3d      	ldr	r2, [pc, #244]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 800397a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800397e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fe ff40 	bl	8002804 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003988:	f7fe ff3c 	bl	8002804 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e066      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399a:	4b35      	ldr	r3, [pc, #212]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x530>
 80039a6:	e05e      	b.n	8003a66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b31      	ldr	r3, [pc, #196]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a30      	ldr	r2, [pc, #192]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fe ff26 	bl	8002804 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fe ff22 	bl	8002804 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04c      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ce:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039da:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4924      	ldr	r1, [pc, #144]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039e0:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <HAL_RCC_OscConfig+0x620>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	60cb      	str	r3, [r1, #12]
 80039e6:	e03e      	b.n	8003a66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e039      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d12c      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	3b01      	subs	r3, #1
 8003a14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d123      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d11b      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d113      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	3b01      	subs	r3, #1
 8003a48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	019f800c 	.word	0x019f800c
 8003a78:	feeefffc 	.word	0xfeeefffc

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e11e      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a94:	4b91      	ldr	r3, [pc, #580]	@ (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d910      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b8e      	ldr	r3, [pc, #568]	@ (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 020f 	bic.w	r2, r3, #15
 8003aaa:	498c      	ldr	r1, [pc, #560]	@ (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b8a      	ldr	r3, [pc, #552]	@ (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e106      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d073      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d129      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad8:	4b81      	ldr	r3, [pc, #516]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0f4      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ae8:	f000 f99e 	bl	8003e28 <RCC_GetSysClockFreqFromPLLSource>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4a7c      	ldr	r2, [pc, #496]	@ (8003ce4 <HAL_RCC_ClockConfig+0x268>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d93f      	bls.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003af6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d033      	beq.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d12f      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b16:	4b72      	ldr	r3, [pc, #456]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b1e:	4a70      	ldr	r2, [pc, #448]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b26:	2380      	movs	r3, #128	@ 0x80
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e024      	b.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b34:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0c6      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b44:	4b66      	ldr	r3, [pc, #408]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0be      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b54:	f000 f8ce 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4a61      	ldr	r2, [pc, #388]	@ (8003ce4 <HAL_RCC_ClockConfig+0x268>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d909      	bls.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b62:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b6a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b72:	2380      	movs	r3, #128	@ 0x80
 8003b74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4957      	ldr	r1, [pc, #348]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fe fe3c 	bl	8002804 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fe fe38 	bl	8002804 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e095      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd0:	4b43      	ldr	r3, [pc, #268]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a42      	ldr	r2, [pc, #264]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003be8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4936      	ldr	r1, [pc, #216]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b80      	cmp	r3, #128	@ 0x80
 8003c10:	d105      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c12:	4b33      	ldr	r3, [pc, #204]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4a32      	ldr	r2, [pc, #200]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d21d      	bcs.n	8003c68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 020f 	bic.w	r2, r3, #15
 8003c34:	4929      	ldr	r1, [pc, #164]	@ (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c3c:	f7fe fde2 	bl	8002804 <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fe fdde 	bl	8002804 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e03b      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1ed      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4917      	ldr	r1, [pc, #92]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c92:	4b13      	ldr	r3, [pc, #76]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	490f      	ldr	r1, [pc, #60]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ca6:	f000 f825 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	490c      	ldr	r1, [pc, #48]	@ (8003ce8 <HAL_RCC_ClockConfig+0x26c>)
 8003cb8:	5ccb      	ldrb	r3, [r1, r3]
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <HAL_RCC_ClockConfig+0x274>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe fd4e 	bl	800276c <HAL_InitTick>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	04c4b400 	.word	0x04c4b400
 8003ce8:	0800db8c 	.word	0x0800db8c
 8003cec:	20000004 	.word	0x20000004
 8003cf0:	20000008 	.word	0x20000008

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d102      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d06:	4b2a      	ldr	r3, [pc, #168]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	e047      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d0c:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d102      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d18:	4b26      	ldr	r3, [pc, #152]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	e03e      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d1e:	4b23      	ldr	r3, [pc, #140]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d136      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d2a:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d34:	4b1d      	ldr	r3, [pc, #116]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d10c      	bne.n	8003d62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d48:	4a1a      	ldr	r2, [pc, #104]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d52:	68d2      	ldr	r2, [r2, #12]
 8003d54:	0a12      	lsrs	r2, r2, #8
 8003d56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	617b      	str	r3, [r7, #20]
      break;
 8003d60:	e00c      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d62:	4a13      	ldr	r2, [pc, #76]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	4a10      	ldr	r2, [pc, #64]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6c:	68d2      	ldr	r2, [r2, #12]
 8003d6e:	0a12      	lsrs	r2, r2, #8
 8003d70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]
      break;
 8003d7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0e5b      	lsrs	r3, r3, #25
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e001      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d9c:	693b      	ldr	r3, [r7, #16]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	@ (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000004 	.word	0x20000004

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dd4:	f7ff fff0 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4904      	ldr	r1, [pc, #16]	@ (8003df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	0800db9c 	.word	0x0800db9c

08003dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e00:	f7ff ffda 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	0adb      	lsrs	r3, r3, #11
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4904      	ldr	r1, [pc, #16]	@ (8003e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	0800db9c 	.word	0x0800db9c

08003e28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3301      	adds	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d10c      	bne.n	8003e66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e4c:	4a17      	ldr	r2, [pc, #92]	@ (8003eac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	4a14      	ldr	r2, [pc, #80]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e56:	68d2      	ldr	r2, [r2, #12]
 8003e58:	0a12      	lsrs	r2, r2, #8
 8003e5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	617b      	str	r3, [r7, #20]
    break;
 8003e64:	e00c      	b.n	8003e80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e66:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	0a12      	lsrs	r2, r2, #8
 8003e74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]
    break;
 8003e7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e80:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	0e5b      	lsrs	r3, r3, #25
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e9a:	687b      	ldr	r3, [r7, #4]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	007a1200 	.word	0x007a1200
 8003eb0:	00f42400 	.word	0x00f42400

08003eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8098 	beq.w	8004002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed6:	4b43      	ldr	r3, [pc, #268]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10d      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	4b40      	ldr	r3, [pc, #256]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eee:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efa:	2301      	movs	r3, #1
 8003efc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003efe:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a39      	ldr	r2, [pc, #228]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f0a:	f7fe fc7b 	bl	8002804 <HAL_GetTick>
 8003f0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f10:	e009      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f12:	f7fe fc77 	bl	8002804 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d902      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	74fb      	strb	r3, [r7, #19]
        break;
 8003f24:	e005      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f26:	4b30      	ldr	r3, [pc, #192]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ef      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d159      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f38:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01e      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d019      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f54:	4b23      	ldr	r3, [pc, #140]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f60:	4b20      	ldr	r3, [pc, #128]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f70:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f76:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f80:	4a18      	ldr	r2, [pc, #96]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fe fc37 	bl	8002804 <HAL_GetTick>
 8003f96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f98:	e00b      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe fc33 	bl	8002804 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d902      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	74fb      	strb	r3, [r7, #19]
            break;
 8003fb0:	e006      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ec      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc6:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	4903      	ldr	r1, [pc, #12]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	74bb      	strb	r3, [r7, #18]
 8003fe2:	e005      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff0:	7c7b      	ldrb	r3, [r7, #17]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4ba6      	ldr	r3, [pc, #664]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	4aa5      	ldr	r2, [pc, #660]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004000:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400e:	4ba0      	ldr	r3, [pc, #640]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004014:	f023 0203 	bic.w	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	499c      	ldr	r1, [pc, #624]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004030:	4b97      	ldr	r3, [pc, #604]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f023 020c 	bic.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4994      	ldr	r1, [pc, #592]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004052:	4b8f      	ldr	r3, [pc, #572]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	498b      	ldr	r1, [pc, #556]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004074:	4b86      	ldr	r3, [pc, #536]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	4983      	ldr	r1, [pc, #524]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004096:	4b7e      	ldr	r3, [pc, #504]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	497a      	ldr	r1, [pc, #488]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b8:	4b75      	ldr	r3, [pc, #468]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	4972      	ldr	r1, [pc, #456]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040da:	4b6d      	ldr	r3, [pc, #436]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	4969      	ldr	r1, [pc, #420]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040fc:	4b64      	ldr	r3, [pc, #400]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004102:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4961      	ldr	r1, [pc, #388]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800411e:	4b5c      	ldr	r3, [pc, #368]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004124:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	4958      	ldr	r1, [pc, #352]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004140:	4b53      	ldr	r3, [pc, #332]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414e:	4950      	ldr	r1, [pc, #320]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004160:	4b4b      	ldr	r3, [pc, #300]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a4a      	ldr	r2, [pc, #296]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004178:	4b45      	ldr	r3, [pc, #276]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	4942      	ldr	r1, [pc, #264]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004198:	4b3d      	ldr	r3, [pc, #244]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a3c      	ldr	r2, [pc, #240]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041a2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041b0:	4b37      	ldr	r3, [pc, #220]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	4934      	ldr	r1, [pc, #208]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041ce:	d105      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e8:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f6:	4926      	ldr	r1, [pc, #152]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004206:	d105      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004208:	4b21      	ldr	r3, [pc, #132]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a20      	ldr	r2, [pc, #128]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004212:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004220:	4b1b      	ldr	r3, [pc, #108]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422e:	4918      	ldr	r1, [pc, #96]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800423e:	d105      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004240:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a12      	ldr	r2, [pc, #72]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800424a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004258:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	490a      	ldr	r1, [pc, #40]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004278:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a04      	ldr	r2, [pc, #16]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004282:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004284:	7cbb      	ldrb	r3, [r7, #18]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000

08004294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e09d      	b.n	80043e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042b6:	d009      	beq.n	80042cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
 80042be:	e005      	b.n	80042cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd ff52 	bl	8002190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004302:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800430c:	d902      	bls.n	8004314 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e002      	b.n	800431a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004318:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004322:	d007      	beq.n	8004334 <HAL_SPI_Init+0xa0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800432c:	d002      	beq.n	8004334 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	ea42 0103 	orr.w	r1, r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f003 0204 	and.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043b0:	ea42 0103 	orr.w	r1, r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b088      	sub	sp, #32
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043fa:	f7fe fa03 	bl	8002804 <HAL_GetTick>
 80043fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004410:	2302      	movs	r3, #2
 8004412:	e15c      	b.n	80046ce <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_SPI_Transmit+0x36>
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e154      	b.n	80046ce <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_SPI_Transmit+0x48>
 800442e:	2302      	movs	r3, #2
 8004430:	e14d      	b.n	80046ce <HAL_SPI_Transmit+0x2e4>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2203      	movs	r2, #3
 800443e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	88fa      	ldrh	r2, [r7, #6]
 8004452:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004484:	d10f      	bne.n	80044a6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	d007      	beq.n	80044c4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044cc:	d952      	bls.n	8004574 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_SPI_Transmit+0xf2>
 80044d6:	8b7b      	ldrh	r3, [r7, #26]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d145      	bne.n	8004568 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	881a      	ldrh	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	1c9a      	adds	r2, r3, #2
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004500:	e032      	b.n	8004568 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b02      	cmp	r3, #2
 800450e:	d112      	bne.n	8004536 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004520:	1c9a      	adds	r2, r3, #2
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004534:	e018      	b.n	8004568 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004536:	f7fe f965 	bl	8002804 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d803      	bhi.n	800454e <HAL_SPI_Transmit+0x164>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d102      	bne.n	8004554 <HAL_SPI_Transmit+0x16a>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0b2      	b.n	80046ce <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1c7      	bne.n	8004502 <HAL_SPI_Transmit+0x118>
 8004572:	e083      	b.n	800467c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_SPI_Transmit+0x198>
 800457c:	8b7b      	ldrh	r3, [r7, #26]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d177      	bne.n	8004672 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d912      	bls.n	80045b2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b02      	subs	r3, #2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045b0:	e05f      	b.n	8004672 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	7812      	ldrb	r2, [r2, #0]
 80045be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045d8:	e04b      	b.n	8004672 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d12b      	bne.n	8004640 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d912      	bls.n	8004618 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	881a      	ldrh	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	1c9a      	adds	r2, r3, #2
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b02      	subs	r3, #2
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004616:	e02c      	b.n	8004672 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800463e:	e018      	b.n	8004672 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004640:	f7fe f8e0 	bl	8002804 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d803      	bhi.n	8004658 <HAL_SPI_Transmit+0x26e>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d102      	bne.n	800465e <HAL_SPI_Transmit+0x274>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e02d      	b.n	80046ce <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ae      	bne.n	80045da <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fb65 	bl	8004d50 <SPI_EndRxTxTransaction>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b08a      	sub	sp, #40	@ 0x28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046e4:	2301      	movs	r3, #1
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046e8:	f7fe f88c 	bl	8002804 <HAL_GetTick>
 80046ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004700:	887b      	ldrh	r3, [r7, #2]
 8004702:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004704:	7ffb      	ldrb	r3, [r7, #31]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d00c      	beq.n	8004724 <HAL_SPI_TransmitReceive+0x4e>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004710:	d106      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x4a>
 800471a:	7ffb      	ldrb	r3, [r7, #31]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d001      	beq.n	8004724 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
 8004722:	e1f3      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_SPI_TransmitReceive+0x60>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_SPI_TransmitReceive+0x60>
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e1e8      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x72>
 8004744:	2302      	movs	r3, #2
 8004746:	e1e1      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x436>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b04      	cmp	r3, #4
 800475a:	d003      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2205      	movs	r2, #5
 8004760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	887a      	ldrh	r2, [r7, #2]
 800477c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	887a      	ldrh	r2, [r7, #2]
 800478a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047a6:	d802      	bhi.n	80047ae <HAL_SPI_TransmitReceive+0xd8>
 80047a8:	8abb      	ldrh	r3, [r7, #20]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d908      	bls.n	80047c0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	e007      	b.n	80047d0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047da:	2b40      	cmp	r3, #64	@ 0x40
 80047dc:	d007      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047f6:	f240 8083 	bls.w	8004900 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x132>
 8004802:	8afb      	ldrh	r3, [r7, #22]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d16f      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800482c:	e05c      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b02      	cmp	r3, #2
 800483a:	d11b      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x19e>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x19e>
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	2b01      	cmp	r3, #1
 800484a:	d113      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	1c9a      	adds	r2, r3, #2
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d11c      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x1e6>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	b292      	uxth	r2, r2
 800489a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048b8:	2301      	movs	r3, #1
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048bc:	f7fd ffa2 	bl	8002804 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d80d      	bhi.n	80048e8 <HAL_SPI_TransmitReceive+0x212>
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d009      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e111      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d19d      	bne.n	800482e <HAL_SPI_TransmitReceive+0x158>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d197      	bne.n	800482e <HAL_SPI_TransmitReceive+0x158>
 80048fe:	e0e5      	b.n	8004acc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x23a>
 8004908:	8afb      	ldrh	r3, [r7, #22]
 800490a:	2b01      	cmp	r3, #1
 800490c:	f040 80d1 	bne.w	8004ab2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d912      	bls.n	8004940 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	881a      	ldrh	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	1c9a      	adds	r2, r3, #2
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b02      	subs	r3, #2
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800493e:	e0b8      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	7812      	ldrb	r2, [r2, #0]
 800494c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004966:	e0a4      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d134      	bne.n	80049e0 <HAL_SPI_TransmitReceive+0x30a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d02f      	beq.n	80049e0 <HAL_SPI_TransmitReceive+0x30a>
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	2b01      	cmp	r3, #1
 8004984:	d12c      	bne.n	80049e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d912      	bls.n	80049b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b02      	subs	r3, #2
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049b4:	e012      	b.n	80049dc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	7812      	ldrb	r2, [r2, #0]
 80049c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d148      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x3aa>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d042      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d923      	bls.n	8004a4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	b292      	uxth	r2, r2
 8004a12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	1c9a      	adds	r2, r3, #2
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b02      	subs	r3, #2
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d81f      	bhi.n	8004a7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	e016      	b.n	8004a7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f103 020c 	add.w	r2, r3, #12
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a80:	f7fd fec0 	bl	8002804 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d803      	bhi.n	8004a98 <HAL_SPI_TransmitReceive+0x3c2>
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d102      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x3c8>
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e02c      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f47f af55 	bne.w	8004968 <HAL_SPI_TransmitReceive+0x292>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f47f af4e 	bne.w	8004968 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f93d 	bl	8004d50 <SPI_EndRxTxTransaction>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e00e      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	@ 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b24:	f7fd fe6e 	bl	8002804 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4413      	add	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b34:	f7fd fe66 	bl	8002804 <HAL_GetTick>
 8004b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3a:	4b39      	ldr	r3, [pc, #228]	@ (8004c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	0d1b      	lsrs	r3, r3, #20
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4a:	e054      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d050      	beq.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b54:	f7fd fe56 	bl	8002804 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d902      	bls.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d13d      	bne.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b82:	d111      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b8c:	d004      	beq.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b96:	d107      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb0:	d10f      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e017      	b.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d19b      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000004 	.word	0x20000004

08004c24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c36:	f7fd fde5 	bl	8002804 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	4413      	add	r3, r2
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004c46:	f7fd fddd 	bl	8002804 <HAL_GetTick>
 8004c4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c54:	4b3d      	ldr	r3, [pc, #244]	@ (8004d4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00da      	lsls	r2, r3, #3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	0d1b      	lsrs	r3, r3, #20
 8004c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c6c:	e060      	b.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c74:	d107      	bne.n	8004c86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d050      	beq.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c8e:	f7fd fdb9 	bl	8002804 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d902      	bls.n	8004ca4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d13d      	bne.n	8004d20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cbc:	d111      	bne.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc6:	d004      	beq.n	8004cd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd0:	d107      	bne.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cea:	d10f      	bne.n	8004d0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e010      	b.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d196      	bne.n	8004c6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3728      	adds	r7, #40	@ 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000004 	.word	0x20000004

08004d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff ff5b 	bl	8004c24 <SPI_WaitFifoStateUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d007      	beq.n	8004d84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e027      	b.n	8004dd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2180      	movs	r1, #128	@ 0x80
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff fec0 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e014      	b.n	8004dd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff ff34 	bl	8004c24 <SPI_WaitFifoStateUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e000      	b.n	8004dd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e042      	b.n	8004e74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fd fc11 	bl	8002628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2224      	movs	r2, #36	@ 0x24
 8004e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 ff30 	bl	8005c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fc61 	bl	80056f4 <UART_SetConfig>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e01b      	b.n	8004e74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 ffaf 	bl	8005dd0 <UART_CheckIdleState>
 8004e72:	4603      	mov	r3, r0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	@ 0x28
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d17b      	bne.n	8004f8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_UART_Transmit+0x26>
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e074      	b.n	8004f90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2221      	movs	r2, #33	@ 0x21
 8004eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb6:	f7fd fca5 	bl	8002804 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_UART_Transmit+0x6c>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e003      	b.n	8004ef0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ef0:	e030      	b.n	8004f54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2180      	movs	r1, #128	@ 0x80
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f001 f811 	bl	8005f24 <UART_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e03d      	b.n	8004f90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e007      	b.n	8004f42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1c8      	bne.n	8004ef2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2140      	movs	r1, #64	@ 0x40
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 ffda 	bl	8005f24 <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e006      	b.n	8004f90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e000      	b.n	8004f90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004f8e:	2302      	movs	r3, #2
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	@ 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d137      	bne.n	8005020 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_UART_Receive_IT+0x24>
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e030      	b.n	8005022 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a18      	ldr	r2, [pc, #96]	@ (800502c <HAL_UART_Receive_IT+0x94>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d01f      	beq.n	8005010 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d018      	beq.n	8005010 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	613b      	str	r3, [r7, #16]
   return(result);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	6a3a      	ldr	r2, [r7, #32]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	61bb      	str	r3, [r7, #24]
   return(result);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e6      	bne.n	8004fde <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	461a      	mov	r2, r3
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fff2 	bl	8006000 <UART_Start_Receive_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	e000      	b.n	8005022 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3728      	adds	r7, #40	@ 0x28
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40008000 	.word	0x40008000

08005030 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b0ba      	sub	sp, #232	@ 0xe8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005056:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800505a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800505e:	4013      	ands	r3, r2
 8005060:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d11b      	bne.n	80050a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8300 	beq.w	800569a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
      }
      return;
 80050a2:	e2fa      	b.n	800569a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80050a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8123 	beq.w	80052f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80050ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80050b2:	4b8d      	ldr	r3, [pc, #564]	@ (80052e8 <HAL_UART_IRQHandler+0x2b8>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80050ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80050be:	4b8b      	ldr	r3, [pc, #556]	@ (80052ec <HAL_UART_IRQHandler+0x2bc>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8116 	beq.w	80052f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <HAL_UART_IRQHandler+0xc8>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2201      	movs	r2, #1
 80050e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ee:	f043 0201 	orr.w	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d011      	beq.n	8005128 <HAL_UART_IRQHandler+0xf8>
 8005104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00b      	beq.n	8005128 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2202      	movs	r2, #2
 8005116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d011      	beq.n	8005158 <HAL_UART_IRQHandler+0x128>
 8005134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00b      	beq.n	8005158 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2204      	movs	r2, #4
 8005146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514e:	f043 0202 	orr.w	r2, r3, #2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d017      	beq.n	8005194 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005170:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005174:	4b5c      	ldr	r3, [pc, #368]	@ (80052e8 <HAL_UART_IRQHandler+0x2b8>)
 8005176:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00b      	beq.n	8005194 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2208      	movs	r2, #8
 8005182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518a:	f043 0208 	orr.w	r2, r3, #8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <HAL_UART_IRQHandler+0x196>
 80051a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8266 	beq.w	800569e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d013      	beq.n	8005206 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521a:	2b40      	cmp	r3, #64	@ 0x40
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800521e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005222:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005226:	2b00      	cmp	r3, #0
 8005228:	d054      	beq.n	80052d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f001 f80a 	bl	8006244 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523a:	2b40      	cmp	r3, #64	@ 0x40
 800523c:	d146      	bne.n	80052cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3308      	adds	r3, #8
 8005244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005254:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800525c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3308      	adds	r3, #8
 8005266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800526a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800526e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1d9      	bne.n	800523e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529a:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <HAL_UART_IRQHandler+0x2c0>)
 800529c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fd fcf8 	bl	8002c9a <HAL_DMA_Abort_IT>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d019      	beq.n	80052e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80052be:	4610      	mov	r0, r2
 80052c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c2:	e00f      	b.n	80052e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f9ff 	bl	80056c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ca:	e00b      	b.n	80052e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f9fb 	bl	80056c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d2:	e007      	b.n	80052e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f9f7 	bl	80056c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80052e2:	e1dc      	b.n	800569e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e4:	bf00      	nop
    return;
 80052e6:	e1da      	b.n	800569e <HAL_UART_IRQHandler+0x66e>
 80052e8:	10000001 	.word	0x10000001
 80052ec:	04000120 	.word	0x04000120
 80052f0:	08006311 	.word	0x08006311

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	f040 8170 	bne.w	80055de <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8169 	beq.w	80055de <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8162 	beq.w	80055de <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2210      	movs	r2, #16
 8005320:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b40      	cmp	r3, #64	@ 0x40
 800532e:	f040 80d8 	bne.w	80054e2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005340:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80af 	beq.w	80054a8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005350:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005354:	429a      	cmp	r2, r3
 8005356:	f080 80a7 	bcs.w	80054a8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005360:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	f040 8087 	bne.w	8005486 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800538c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1da      	bne.n	8005378 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3308      	adds	r3, #8
 80053e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e1      	bne.n	80053c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800540e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005422:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005424:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005428:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e3      	bne.n	80053fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005454:	f023 0310 	bic.w	r3, r3, #16
 8005458:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005466:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005468:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800546c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e4      	bne.n	8005444 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005480:	4618      	mov	r0, r3
 8005482:	f7fd fbb1 	bl	8002be8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005498:	b29b      	uxth	r3, r3
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	b29b      	uxth	r3, r3
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f91b 	bl	80056dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80054a6:	e0fc      	b.n	80056a2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054b2:	429a      	cmp	r2, r3
 80054b4:	f040 80f5 	bne.w	80056a2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	f040 80eb 	bne.w	80056a2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8fe 	bl	80056dc <HAL_UARTEx_RxEventCallback>
      return;
 80054e0:	e0df      	b.n	80056a2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80d1 	beq.w	80056a6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80cc 	beq.w	80056a6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800551c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005530:	647b      	str	r3, [r7, #68]	@ 0x44
 8005532:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800553e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e4      	bne.n	800550e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3308      	adds	r3, #8
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	623b      	str	r3, [r7, #32]
   return(result);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800556c:	633a      	str	r2, [r7, #48]	@ 0x30
 800556e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e1      	bne.n	8005544 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f023 0310 	bic.w	r3, r3, #16
 80055a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	69b9      	ldr	r1, [r7, #24]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	617b      	str	r3, [r7, #20]
   return(result);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e4      	bne.n	8005594 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f880 	bl	80056dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055dc:	e063      	b.n	80056a6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <HAL_UART_IRQHandler+0x5d8>
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80055fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 fbe3 	bl	8006dcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005606:	e051      	b.n	80056ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d014      	beq.n	800563e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005624:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005630:	2b00      	cmp	r3, #0
 8005632:	d03a      	beq.n	80056aa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
    }
    return;
 800563c:	e035      	b.n	80056aa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_UART_IRQHandler+0x62e>
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fe6c 	bl	8006334 <UART_EndTransmit_IT>
    return;
 800565c:	e026      	b.n	80056ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_UART_IRQHandler+0x64e>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800566e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 fbbc 	bl	8006df4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800567c:	e016      	b.n	80056ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005682:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d010      	beq.n	80056ac <HAL_UART_IRQHandler+0x67c>
 800568a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800568e:	2b00      	cmp	r3, #0
 8005690:	da0c      	bge.n	80056ac <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fba4 	bl	8006de0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005698:	e008      	b.n	80056ac <HAL_UART_IRQHandler+0x67c>
      return;
 800569a:	bf00      	nop
 800569c:	e006      	b.n	80056ac <HAL_UART_IRQHandler+0x67c>
    return;
 800569e:	bf00      	nop
 80056a0:	e004      	b.n	80056ac <HAL_UART_IRQHandler+0x67c>
      return;
 80056a2:	bf00      	nop
 80056a4:	e002      	b.n	80056ac <HAL_UART_IRQHandler+0x67c>
      return;
 80056a6:	bf00      	nop
 80056a8:	e000      	b.n	80056ac <HAL_UART_IRQHandler+0x67c>
    return;
 80056aa:	bf00      	nop
  }
}
 80056ac:	37e8      	adds	r7, #232	@ 0xe8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop

080056b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f8:	b08c      	sub	sp, #48	@ 0x30
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	431a      	orrs	r2, r3
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	431a      	orrs	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	4313      	orrs	r3, r2
 800571a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4bab      	ldr	r3, [pc, #684]	@ (80059d0 <UART_SetConfig+0x2dc>)
 8005724:	4013      	ands	r3, r2
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800572c:	430b      	orrs	r3, r1
 800572e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4aa0      	ldr	r2, [pc, #640]	@ (80059d4 <UART_SetConfig+0x2e0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800575c:	4313      	orrs	r3, r2
 800575e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800576a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005774:	430b      	orrs	r3, r1
 8005776:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	f023 010f 	bic.w	r1, r3, #15
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a91      	ldr	r2, [pc, #580]	@ (80059d8 <UART_SetConfig+0x2e4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d125      	bne.n	80057e4 <UART_SetConfig+0xf0>
 8005798:	4b90      	ldr	r3, [pc, #576]	@ (80059dc <UART_SetConfig+0x2e8>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d81a      	bhi.n	80057dc <UART_SetConfig+0xe8>
 80057a6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <UART_SetConfig+0xb8>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057bd 	.word	0x080057bd
 80057b0:	080057cd 	.word	0x080057cd
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c2:	e0d6      	b.n	8005972 <UART_SetConfig+0x27e>
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ca:	e0d2      	b.n	8005972 <UART_SetConfig+0x27e>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d2:	e0ce      	b.n	8005972 <UART_SetConfig+0x27e>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057da:	e0ca      	b.n	8005972 <UART_SetConfig+0x27e>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e2:	e0c6      	b.n	8005972 <UART_SetConfig+0x27e>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a7d      	ldr	r2, [pc, #500]	@ (80059e0 <UART_SetConfig+0x2ec>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d138      	bne.n	8005860 <UART_SetConfig+0x16c>
 80057ee:	4b7b      	ldr	r3, [pc, #492]	@ (80059dc <UART_SetConfig+0x2e8>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	d82d      	bhi.n	8005858 <UART_SetConfig+0x164>
 80057fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <UART_SetConfig+0x110>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005839 	.word	0x08005839
 8005808:	08005859 	.word	0x08005859
 800580c:	08005859 	.word	0x08005859
 8005810:	08005859 	.word	0x08005859
 8005814:	08005849 	.word	0x08005849
 8005818:	08005859 	.word	0x08005859
 800581c:	08005859 	.word	0x08005859
 8005820:	08005859 	.word	0x08005859
 8005824:	08005841 	.word	0x08005841
 8005828:	08005859 	.word	0x08005859
 800582c:	08005859 	.word	0x08005859
 8005830:	08005859 	.word	0x08005859
 8005834:	08005851 	.word	0x08005851
 8005838:	2300      	movs	r3, #0
 800583a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583e:	e098      	b.n	8005972 <UART_SetConfig+0x27e>
 8005840:	2302      	movs	r3, #2
 8005842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005846:	e094      	b.n	8005972 <UART_SetConfig+0x27e>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584e:	e090      	b.n	8005972 <UART_SetConfig+0x27e>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005856:	e08c      	b.n	8005972 <UART_SetConfig+0x27e>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585e:	e088      	b.n	8005972 <UART_SetConfig+0x27e>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a5f      	ldr	r2, [pc, #380]	@ (80059e4 <UART_SetConfig+0x2f0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d125      	bne.n	80058b6 <UART_SetConfig+0x1c2>
 800586a:	4b5c      	ldr	r3, [pc, #368]	@ (80059dc <UART_SetConfig+0x2e8>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005874:	2b30      	cmp	r3, #48	@ 0x30
 8005876:	d016      	beq.n	80058a6 <UART_SetConfig+0x1b2>
 8005878:	2b30      	cmp	r3, #48	@ 0x30
 800587a:	d818      	bhi.n	80058ae <UART_SetConfig+0x1ba>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d00a      	beq.n	8005896 <UART_SetConfig+0x1a2>
 8005880:	2b20      	cmp	r3, #32
 8005882:	d814      	bhi.n	80058ae <UART_SetConfig+0x1ba>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <UART_SetConfig+0x19a>
 8005888:	2b10      	cmp	r3, #16
 800588a:	d008      	beq.n	800589e <UART_SetConfig+0x1aa>
 800588c:	e00f      	b.n	80058ae <UART_SetConfig+0x1ba>
 800588e:	2300      	movs	r3, #0
 8005890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005894:	e06d      	b.n	8005972 <UART_SetConfig+0x27e>
 8005896:	2302      	movs	r3, #2
 8005898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589c:	e069      	b.n	8005972 <UART_SetConfig+0x27e>
 800589e:	2304      	movs	r3, #4
 80058a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a4:	e065      	b.n	8005972 <UART_SetConfig+0x27e>
 80058a6:	2308      	movs	r3, #8
 80058a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ac:	e061      	b.n	8005972 <UART_SetConfig+0x27e>
 80058ae:	2310      	movs	r3, #16
 80058b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b4:	e05d      	b.n	8005972 <UART_SetConfig+0x27e>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4b      	ldr	r2, [pc, #300]	@ (80059e8 <UART_SetConfig+0x2f4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d125      	bne.n	800590c <UART_SetConfig+0x218>
 80058c0:	4b46      	ldr	r3, [pc, #280]	@ (80059dc <UART_SetConfig+0x2e8>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80058cc:	d016      	beq.n	80058fc <UART_SetConfig+0x208>
 80058ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d0:	d818      	bhi.n	8005904 <UART_SetConfig+0x210>
 80058d2:	2b80      	cmp	r3, #128	@ 0x80
 80058d4:	d00a      	beq.n	80058ec <UART_SetConfig+0x1f8>
 80058d6:	2b80      	cmp	r3, #128	@ 0x80
 80058d8:	d814      	bhi.n	8005904 <UART_SetConfig+0x210>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <UART_SetConfig+0x1f0>
 80058de:	2b40      	cmp	r3, #64	@ 0x40
 80058e0:	d008      	beq.n	80058f4 <UART_SetConfig+0x200>
 80058e2:	e00f      	b.n	8005904 <UART_SetConfig+0x210>
 80058e4:	2300      	movs	r3, #0
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ea:	e042      	b.n	8005972 <UART_SetConfig+0x27e>
 80058ec:	2302      	movs	r3, #2
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f2:	e03e      	b.n	8005972 <UART_SetConfig+0x27e>
 80058f4:	2304      	movs	r3, #4
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fa:	e03a      	b.n	8005972 <UART_SetConfig+0x27e>
 80058fc:	2308      	movs	r3, #8
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005902:	e036      	b.n	8005972 <UART_SetConfig+0x27e>
 8005904:	2310      	movs	r3, #16
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590a:	e032      	b.n	8005972 <UART_SetConfig+0x27e>
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a30      	ldr	r2, [pc, #192]	@ (80059d4 <UART_SetConfig+0x2e0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d12a      	bne.n	800596c <UART_SetConfig+0x278>
 8005916:	4b31      	ldr	r3, [pc, #196]	@ (80059dc <UART_SetConfig+0x2e8>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005924:	d01a      	beq.n	800595c <UART_SetConfig+0x268>
 8005926:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800592a:	d81b      	bhi.n	8005964 <UART_SetConfig+0x270>
 800592c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005930:	d00c      	beq.n	800594c <UART_SetConfig+0x258>
 8005932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005936:	d815      	bhi.n	8005964 <UART_SetConfig+0x270>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <UART_SetConfig+0x250>
 800593c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005940:	d008      	beq.n	8005954 <UART_SetConfig+0x260>
 8005942:	e00f      	b.n	8005964 <UART_SetConfig+0x270>
 8005944:	2300      	movs	r3, #0
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594a:	e012      	b.n	8005972 <UART_SetConfig+0x27e>
 800594c:	2302      	movs	r3, #2
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005952:	e00e      	b.n	8005972 <UART_SetConfig+0x27e>
 8005954:	2304      	movs	r3, #4
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595a:	e00a      	b.n	8005972 <UART_SetConfig+0x27e>
 800595c:	2308      	movs	r3, #8
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005962:	e006      	b.n	8005972 <UART_SetConfig+0x27e>
 8005964:	2310      	movs	r3, #16
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596a:	e002      	b.n	8005972 <UART_SetConfig+0x27e>
 800596c:	2310      	movs	r3, #16
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a17      	ldr	r2, [pc, #92]	@ (80059d4 <UART_SetConfig+0x2e0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	f040 80a8 	bne.w	8005ace <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800597e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005982:	2b08      	cmp	r3, #8
 8005984:	d834      	bhi.n	80059f0 <UART_SetConfig+0x2fc>
 8005986:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <UART_SetConfig+0x298>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059f1 	.word	0x080059f1
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059f1 	.word	0x080059f1
 800599c:	080059bf 	.word	0x080059bf
 80059a0:	080059f1 	.word	0x080059f1
 80059a4:	080059f1 	.word	0x080059f1
 80059a8:	080059f1 	.word	0x080059f1
 80059ac:	080059c7 	.word	0x080059c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fe fa0e 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 80059b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059b6:	e021      	b.n	80059fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b8:	4b0c      	ldr	r3, [pc, #48]	@ (80059ec <UART_SetConfig+0x2f8>)
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059bc:	e01e      	b.n	80059fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059be:	f7fe f999 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 80059c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059c4:	e01a      	b.n	80059fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059cc:	e016      	b.n	80059fc <UART_SetConfig+0x308>
 80059ce:	bf00      	nop
 80059d0:	cfff69f3 	.word	0xcfff69f3
 80059d4:	40008000 	.word	0x40008000
 80059d8:	40013800 	.word	0x40013800
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40004400 	.word	0x40004400
 80059e4:	40004800 	.word	0x40004800
 80059e8:	40004c00 	.word	0x40004c00
 80059ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 812a 	beq.w	8005c58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	4a9e      	ldr	r2, [pc, #632]	@ (8005c84 <UART_SetConfig+0x590>)
 8005a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	4413      	add	r3, r2
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d305      	bcc.n	8005a34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d903      	bls.n	8005a3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a3a:	e10d      	b.n	8005c58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	2200      	movs	r2, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	60fa      	str	r2, [r7, #12]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	4a8e      	ldr	r2, [pc, #568]	@ (8005c84 <UART_SetConfig+0x590>)
 8005a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2200      	movs	r2, #0
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a5e:	f7fb f8db 	bl	8000c18 <__aeabi_uldivmod>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	020b      	lsls	r3, r1, #8
 8005a74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a78:	0202      	lsls	r2, r0, #8
 8005a7a:	6979      	ldr	r1, [r7, #20]
 8005a7c:	6849      	ldr	r1, [r1, #4]
 8005a7e:	0849      	lsrs	r1, r1, #1
 8005a80:	2000      	movs	r0, #0
 8005a82:	460c      	mov	r4, r1
 8005a84:	4605      	mov	r5, r0
 8005a86:	eb12 0804 	adds.w	r8, r2, r4
 8005a8a:	eb43 0905 	adc.w	r9, r3, r5
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	469a      	mov	sl, r3
 8005a96:	4693      	mov	fp, r2
 8005a98:	4652      	mov	r2, sl
 8005a9a:	465b      	mov	r3, fp
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	f7fb f8ba 	bl	8000c18 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab2:	d308      	bcc.n	8005ac6 <UART_SetConfig+0x3d2>
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aba:	d204      	bcs.n	8005ac6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	60da      	str	r2, [r3, #12]
 8005ac4:	e0c8      	b.n	8005c58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005acc:	e0c4      	b.n	8005c58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad6:	d167      	bne.n	8005ba8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d828      	bhi.n	8005b32 <UART_SetConfig+0x43e>
 8005ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <UART_SetConfig+0x3f4>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005b0d 	.word	0x08005b0d
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b1d 	.word	0x08005b1d
 8005af4:	08005b33 	.word	0x08005b33
 8005af8:	08005b23 	.word	0x08005b23
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b33 	.word	0x08005b33
 8005b04:	08005b33 	.word	0x08005b33
 8005b08:	08005b2b 	.word	0x08005b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b0c:	f7fe f960 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8005b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b12:	e014      	b.n	8005b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fe f972 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8005b18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b1a:	e010      	b.n	8005b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8005c88 <UART_SetConfig+0x594>)
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b20:	e00d      	b.n	8005b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b22:	f7fe f8e7 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8005b26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b28:	e009      	b.n	8005b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b30:	e005      	b.n	8005b3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8089 	beq.w	8005c58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8005c84 <UART_SetConfig+0x590>)
 8005b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b50:	461a      	mov	r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b58:	005a      	lsls	r2, r3, #1
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	441a      	add	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	d916      	bls.n	8005ba0 <UART_SetConfig+0x4ac>
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b78:	d212      	bcs.n	8005ba0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f023 030f 	bic.w	r3, r3, #15
 8005b82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	8bfb      	ldrh	r3, [r7, #30]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	8bfa      	ldrh	r2, [r7, #30]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	e05b      	b.n	8005c58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ba6:	e057      	b.n	8005c58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d828      	bhi.n	8005c02 <UART_SetConfig+0x50e>
 8005bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <UART_SetConfig+0x4c4>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005be5 	.word	0x08005be5
 8005bc0:	08005bed 	.word	0x08005bed
 8005bc4:	08005c03 	.word	0x08005c03
 8005bc8:	08005bf3 	.word	0x08005bf3
 8005bcc:	08005c03 	.word	0x08005c03
 8005bd0:	08005c03 	.word	0x08005c03
 8005bd4:	08005c03 	.word	0x08005c03
 8005bd8:	08005bfb 	.word	0x08005bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bdc:	f7fe f8f8 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8005be0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005be2:	e014      	b.n	8005c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7fe f90a 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8005be8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bea:	e010      	b.n	8005c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bec:	4b26      	ldr	r3, [pc, #152]	@ (8005c88 <UART_SetConfig+0x594>)
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bf0:	e00d      	b.n	8005c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf2:	f7fe f87f 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8005bf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bf8:	e009      	b.n	8005c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c00:	e005      	b.n	8005c0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d021      	beq.n	8005c58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	4a1a      	ldr	r2, [pc, #104]	@ (8005c84 <UART_SetConfig+0x590>)
 8005c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	441a      	add	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	2b0f      	cmp	r3, #15
 8005c3c:	d909      	bls.n	8005c52 <UART_SetConfig+0x55e>
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c44:	d205      	bcs.n	8005c52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60da      	str	r2, [r3, #12]
 8005c50:	e002      	b.n	8005c58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2200      	movs	r2, #0
 8005c72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3730      	adds	r7, #48	@ 0x30
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c82:	bf00      	nop
 8005c84:	0800dba4 	.word	0x0800dba4
 8005c88:	00f42400 	.word	0x00f42400

08005c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	f003 0310 	and.w	r3, r3, #16
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01a      	beq.n	8005da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8a:	d10a      	bne.n	8005da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]
  }
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b098      	sub	sp, #96	@ 0x60
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005de0:	f7fc fd10 	bl	8002804 <HAL_GetTick>
 8005de4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d12f      	bne.n	8005e54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f88e 	bl	8005f24 <UART_WaitOnFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d022      	beq.n	8005e54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e6      	bne.n	8005e0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e063      	b.n	8005f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d149      	bne.n	8005ef6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f857 	bl	8005f24 <UART_WaitOnFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d03c      	beq.n	8005ef6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	623b      	str	r3, [r7, #32]
   return(result);
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e6      	bne.n	8005e7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ece:	61fa      	str	r2, [r7, #28]
 8005ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	69b9      	ldr	r1, [r7, #24]
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	617b      	str	r3, [r7, #20]
   return(result);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e5      	bne.n	8005eae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e012      	b.n	8005f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3758      	adds	r7, #88	@ 0x58
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f34:	e04f      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d04b      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3e:	f7fc fc61 	bl	8002804 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e04e      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d037      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b80      	cmp	r3, #128	@ 0x80
 8005f6a:	d034      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b40      	cmp	r3, #64	@ 0x40
 8005f70:	d031      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d110      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2208      	movs	r2, #8
 8005f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f95b 	bl	8006244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2208      	movs	r2, #8
 8005f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e029      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fb0:	d111      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f941 	bl	8006244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e00f      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d0a0      	beq.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006000:	b480      	push	{r7}
 8006002:	b0a3      	sub	sp, #140	@ 0x8c
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4613      	mov	r3, r2
 800600c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006032:	d10e      	bne.n	8006052 <UART_Start_Receive_IT+0x52>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d105      	bne.n	8006048 <UART_Start_Receive_IT+0x48>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006042:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006046:	e02d      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	22ff      	movs	r2, #255	@ 0xff
 800604c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006050:	e028      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <UART_Start_Receive_IT+0x76>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <UART_Start_Receive_IT+0x6c>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	22ff      	movs	r2, #255	@ 0xff
 8006066:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800606a:	e01b      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	227f      	movs	r2, #127	@ 0x7f
 8006070:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006074:	e016      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800607e:	d10d      	bne.n	800609c <UART_Start_Receive_IT+0x9c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <UART_Start_Receive_IT+0x92>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	227f      	movs	r2, #127	@ 0x7f
 800608c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006090:	e008      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	223f      	movs	r2, #63	@ 0x3f
 8006096:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800609a:	e003      	b.n	80060a4 <UART_Start_Receive_IT+0xa4>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2222      	movs	r2, #34	@ 0x22
 80060b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3308      	adds	r3, #8
 80060ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060be:	e853 3f00 	ldrex	r3, [r3]
 80060c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80060c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060c6:	f043 0301 	orr.w	r3, r3, #1
 80060ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80060d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80060da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80060de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80060e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e3      	bne.n	80060b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060f4:	d14f      	bne.n	8006196 <UART_Start_Receive_IT+0x196>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80060fc:	88fa      	ldrh	r2, [r7, #6]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d349      	bcc.n	8006196 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610a:	d107      	bne.n	800611c <UART_Start_Receive_IT+0x11c>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a47      	ldr	r2, [pc, #284]	@ (8006234 <UART_Start_Receive_IT+0x234>)
 8006118:	675a      	str	r2, [r3, #116]	@ 0x74
 800611a:	e002      	b.n	8006122 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a46      	ldr	r2, [pc, #280]	@ (8006238 <UART_Start_Receive_IT+0x238>)
 8006120:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01a      	beq.n	8006160 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800613e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800614c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800614e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006152:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800615a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e4      	bne.n	800612a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3308      	adds	r3, #8
 800617e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006180:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006182:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800618e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e5      	bne.n	8006160 <UART_Start_Receive_IT+0x160>
 8006194:	e046      	b.n	8006224 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619e:	d107      	bne.n	80061b0 <UART_Start_Receive_IT+0x1b0>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a24      	ldr	r2, [pc, #144]	@ (800623c <UART_Start_Receive_IT+0x23c>)
 80061ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80061ae:	e002      	b.n	80061b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4a23      	ldr	r2, [pc, #140]	@ (8006240 <UART_Start_Receive_IT+0x240>)
 80061b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d019      	beq.n	80061f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80061d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061de:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e6      	bne.n	80061be <UART_Start_Receive_IT+0x1be>
 80061f0:	e018      	b.n	8006224 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f043 0320 	orr.w	r3, r3, #32
 8006206:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	69f9      	ldr	r1, [r7, #28]
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	61bb      	str	r3, [r7, #24]
   return(result);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	378c      	adds	r7, #140	@ 0x8c
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	08006a61 	.word	0x08006a61
 8006238:	080066fd 	.word	0x080066fd
 800623c:	08006545 	.word	0x08006545
 8006240:	0800638d 	.word	0x0800638d

08006244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b095      	sub	sp, #84	@ 0x54
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800626a:	643b      	str	r3, [r7, #64]	@ 0x40
 800626c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e6      	bne.n	800624c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3308      	adds	r3, #8
 8006284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	61fb      	str	r3, [r7, #28]
   return(result);
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3308      	adds	r3, #8
 80062a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e3      	bne.n	800627e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d118      	bne.n	80062f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f023 0310 	bic.w	r3, r3, #16
 80062d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6979      	ldr	r1, [r7, #20]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e6      	bne.n	80062be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006304:	bf00      	nop
 8006306:	3754      	adds	r7, #84	@ 0x54
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff f9ce 	bl	80056c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	60bb      	str	r3, [r7, #8]
   return(result);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6979      	ldr	r1, [r7, #20]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	613b      	str	r3, [r7, #16]
   return(result);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e6      	bne.n	800633c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff f999 	bl	80056b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006382:	bf00      	nop
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b09c      	sub	sp, #112	@ 0x70
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800639a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063a4:	2b22      	cmp	r3, #34	@ 0x22
 80063a6:	f040 80be 	bne.w	8006526 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063b8:	b2d9      	uxtb	r1, r3
 80063ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c4:	400a      	ands	r2, r1
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 80a1 	bne.w	8006536 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006414:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006418:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e6      	bne.n	80063f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	667b      	str	r3, [r7, #100]	@ 0x64
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3308      	adds	r3, #8
 8006444:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006446:	647a      	str	r2, [r7, #68]	@ 0x44
 8006448:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800644c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a33      	ldr	r2, [pc, #204]	@ (8006540 <UART_RxISR_8BIT+0x1b4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d01f      	beq.n	80064b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	623b      	str	r3, [r7, #32]
   return(result);
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800649a:	663b      	str	r3, [r7, #96]	@ 0x60
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80064a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e6      	bne.n	8006486 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d12e      	bne.n	800651e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0310 	bic.w	r3, r3, #16
 80064da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	69b9      	ldr	r1, [r7, #24]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	617b      	str	r3, [r7, #20]
   return(result);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e6      	bne.n	80064c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b10      	cmp	r3, #16
 8006504:	d103      	bne.n	800650e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2210      	movs	r2, #16
 800650c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff f8e0 	bl	80056dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800651c:	e00b      	b.n	8006536 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fb fda2 	bl	8002068 <HAL_UART_RxCpltCallback>
}
 8006524:	e007      	b.n	8006536 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699a      	ldr	r2, [r3, #24]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0208 	orr.w	r2, r2, #8
 8006534:	619a      	str	r2, [r3, #24]
}
 8006536:	bf00      	nop
 8006538:	3770      	adds	r7, #112	@ 0x70
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40008000 	.word	0x40008000

08006544 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b09c      	sub	sp, #112	@ 0x70
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006552:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800655c:	2b22      	cmp	r3, #34	@ 0x22
 800655e:	f040 80be 	bne.w	80066de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006570:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006572:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006576:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800657a:	4013      	ands	r3, r2
 800657c:	b29a      	uxth	r2, r3
 800657e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006580:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006586:	1c9a      	adds	r2, r3, #2
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 80a1 	bne.w	80066ee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80065ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80065cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80065d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e6      	bne.n	80065ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3308      	adds	r3, #8
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80065fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a33      	ldr	r2, [pc, #204]	@ (80066f8 <UART_RxISR_16BIT+0x1b4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d01f      	beq.n	8006670 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d018      	beq.n	8006670 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	61fb      	str	r3, [r7, #28]
   return(result);
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006652:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800665c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800665e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e6      	bne.n	800663e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006674:	2b01      	cmp	r3, #1
 8006676:	d12e      	bne.n	80066d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	60bb      	str	r3, [r7, #8]
   return(result);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6979      	ldr	r1, [r7, #20]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	613b      	str	r3, [r7, #16]
   return(result);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e6      	bne.n	800667e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f003 0310 	and.w	r3, r3, #16
 80066ba:	2b10      	cmp	r3, #16
 80066bc:	d103      	bne.n	80066c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2210      	movs	r2, #16
 80066c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff f804 	bl	80056dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066d4:	e00b      	b.n	80066ee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fb fcc6 	bl	8002068 <HAL_UART_RxCpltCallback>
}
 80066dc:	e007      	b.n	80066ee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0208 	orr.w	r2, r2, #8
 80066ec:	619a      	str	r2, [r3, #24]
}
 80066ee:	bf00      	nop
 80066f0:	3770      	adds	r7, #112	@ 0x70
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40008000 	.word	0x40008000

080066fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b0ac      	sub	sp, #176	@ 0xb0
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800670a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006732:	2b22      	cmp	r3, #34	@ 0x22
 8006734:	f040 8183 	bne.w	8006a3e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800673e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006742:	e126      	b.n	8006992 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800674e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006752:	b2d9      	uxtb	r1, r3
 8006754:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006758:	b2da      	uxtb	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675e:	400a      	ands	r2, r1
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800678a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	2b00      	cmp	r3, #0
 8006794:	d053      	beq.n	800683e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d011      	beq.n	80067c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80067a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2201      	movs	r2, #1
 80067b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067bc:	f043 0201 	orr.w	r2, r3, #1
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d011      	beq.n	80067f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80067d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2202      	movs	r2, #2
 80067e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ec:	f043 0204 	orr.w	r2, r3, #4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d011      	beq.n	8006826 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2204      	movs	r2, #4
 8006814:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681c:	f043 0202 	orr.w	r2, r3, #2
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fe ff49 	bl	80056c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 80a3 	bne.w	8006992 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800685a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800685c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800686e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006870:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006874:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800687c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e4      	bne.n	800684c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068aa:	66ba      	str	r2, [r7, #104]	@ 0x68
 80068ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80068b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80068b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e1      	bne.n	8006882 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a60      	ldr	r2, [pc, #384]	@ (8006a58 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d021      	beq.n	8006920 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01a      	beq.n	8006920 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80068f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800690c:	657b      	str	r3, [r7, #84]	@ 0x54
 800690e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006912:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800691a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e4      	bne.n	80068ea <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006924:	2b01      	cmp	r3, #1
 8006926:	d130      	bne.n	800698a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	f023 0310 	bic.w	r3, r3, #16
 8006942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006950:	643b      	str	r3, [r7, #64]	@ 0x40
 8006952:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006956:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e4      	bne.n	800692e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b10      	cmp	r3, #16
 8006970:	d103      	bne.n	800697a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2210      	movs	r2, #16
 8006978:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fe feaa 	bl	80056dc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006988:	e00e      	b.n	80069a8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fb fb6c 	bl	8002068 <HAL_UART_RxCpltCallback>
        break;
 8006990:	e00a      	b.n	80069a8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006992:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800699a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f47f aece 	bne.w	8006744 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d049      	beq.n	8006a4e <UART_RxISR_8BIT_FIFOEN+0x352>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069c0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d242      	bcs.n	8006a4e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80069ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e3      	bne.n	80069c8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a16      	ldr	r2, [pc, #88]	@ (8006a5c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006a04:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f043 0320 	orr.w	r3, r3, #32
 8006a1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6979      	ldr	r1, [r7, #20]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	613b      	str	r3, [r7, #16]
   return(result);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e4      	bne.n	8006a06 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a3c:	e007      	b.n	8006a4e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	619a      	str	r2, [r3, #24]
}
 8006a4e:	bf00      	nop
 8006a50:	37b0      	adds	r7, #176	@ 0xb0
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40008000 	.word	0x40008000
 8006a5c:	0800638d 	.word	0x0800638d

08006a60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b0ae      	sub	sp, #184	@ 0xb8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a6e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a96:	2b22      	cmp	r3, #34	@ 0x22
 8006a98:	f040 8187 	bne.w	8006daa <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006aa2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006aa6:	e12a      	b.n	8006cfe <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006aba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006abe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad0:	1c9a      	adds	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d053      	beq.n	8006ba6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d011      	beq.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b24:	f043 0201 	orr.w	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d011      	beq.n	8006b5e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b54:	f043 0204 	orr.w	r2, r3, #4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d011      	beq.n	8006b8e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b84:	f043 0202 	orr.w	r2, r3, #2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d006      	beq.n	8006ba6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7fe fd95 	bl	80056c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f040 80a5 	bne.w	8006cfe <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bda:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e2      	bne.n	8006bb4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006c16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e1      	bne.n	8006bee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a60      	ldr	r2, [pc, #384]	@ (8006dc4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d021      	beq.n	8006c8c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01a      	beq.n	8006c8c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e4      	bne.n	8006c56 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d130      	bne.n	8006cf6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006caa:	f023 0310 	bic.w	r3, r3, #16
 8006cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e4      	bne.n	8006c9a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b10      	cmp	r3, #16
 8006cdc:	d103      	bne.n	8006ce6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fe fcf4 	bl	80056dc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006cf4:	e00e      	b.n	8006d14 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fb f9b6 	bl	8002068 <HAL_UART_RxCpltCallback>
        break;
 8006cfc:	e00a      	b.n	8006d14 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cfe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d006      	beq.n	8006d14 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006d06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f47f aeca 	bne.w	8006aa8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d1a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d049      	beq.n	8006dba <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d2c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d242      	bcs.n	8006dba <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	623b      	str	r3, [r7, #32]
   return(result);
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006d58:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e3      	bne.n	8006d34 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a16      	ldr	r2, [pc, #88]	@ (8006dc8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006d70:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f043 0320 	orr.w	r3, r3, #32
 8006d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	69b9      	ldr	r1, [r7, #24]
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	617b      	str	r3, [r7, #20]
   return(result);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e4      	bne.n	8006d72 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006da8:	e007      	b.n	8006dba <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	699a      	ldr	r2, [r3, #24]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0208 	orr.w	r2, r2, #8
 8006db8:	619a      	str	r2, [r3, #24]
}
 8006dba:	bf00      	nop
 8006dbc:	37b8      	adds	r7, #184	@ 0xb8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40008000 	.word	0x40008000
 8006dc8:	08006545 	.word	0x08006545

08006dcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_UARTEx_DisableFifoMode+0x16>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e027      	b.n	8006e6e <HAL_UARTEx_DisableFifoMode+0x66>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2224      	movs	r2, #36	@ 0x24
 8006e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0201 	bic.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e02d      	b.n	8006eee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2224      	movs	r2, #36	@ 0x24
 8006e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f850 	bl	8006f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e02d      	b.n	8006f6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2224      	movs	r2, #36	@ 0x24
 8006f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f812 	bl	8006f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d108      	bne.n	8006f96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f94:	e031      	b.n	8006ffa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f96:	2308      	movs	r3, #8
 8006f98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	0e5b      	lsrs	r3, r3, #25
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	0f5b      	lsrs	r3, r3, #29
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	7b3a      	ldrb	r2, [r7, #12]
 8006fc2:	4911      	ldr	r1, [pc, #68]	@ (8007008 <UARTEx_SetNbDataToProcess+0x94>)
 8006fc4:	5c8a      	ldrb	r2, [r1, r2]
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fca:	7b3a      	ldrb	r2, [r7, #12]
 8006fcc:	490f      	ldr	r1, [pc, #60]	@ (800700c <UARTEx_SetNbDataToProcess+0x98>)
 8006fce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	7b7a      	ldrb	r2, [r7, #13]
 8006fe0:	4909      	ldr	r1, [pc, #36]	@ (8007008 <UARTEx_SetNbDataToProcess+0x94>)
 8006fe2:	5c8a      	ldrb	r2, [r1, r2]
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fe8:	7b7a      	ldrb	r2, [r7, #13]
 8006fea:	4908      	ldr	r1, [pc, #32]	@ (800700c <UARTEx_SetNbDataToProcess+0x98>)
 8006fec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fee:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	0800dbbc 	.word	0x0800dbbc
 800700c:	0800dbc4 	.word	0x0800dbc4

08007010 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8007014:	4907      	ldr	r1, [pc, #28]	@ (8007034 <MX_FATFS_Init+0x24>)
 8007016:	4808      	ldr	r0, [pc, #32]	@ (8007038 <MX_FATFS_Init+0x28>)
 8007018:	f003 fb16 	bl	800a648 <FATFS_LinkDriver>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8007022:	f04f 33ff 	mov.w	r3, #4294967295
 8007026:	e003      	b.n	8007030 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8007028:	4b04      	ldr	r3, [pc, #16]	@ (800703c <MX_FATFS_Init+0x2c>)
 800702a:	2201      	movs	r2, #1
 800702c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800702e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8007030:	4618      	mov	r0, r3
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2000251c 	.word	0x2000251c
 8007038:	20000010 	.word	0x20000010
 800703c:	20002520 	.word	0x20002520

08007040 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007044:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007046:	4618      	mov	r0, r3
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	4618      	mov	r0, r3
 800705e:	f7fa f963 	bl	8001328 <SD_disk_initialize>
 8007062:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	4618      	mov	r0, r3
 800707a:	f7fa fa41 	bl	8001500 <SD_disk_status>
 800707e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	607a      	str	r2, [r7, #4]
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007098:	7bf8      	ldrb	r0, [r7, #15]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	f7fa fa44 	bl	800152c <SD_disk_read>
 80070a4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80070be:	7bf8      	ldrb	r0, [r7, #15]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	f7fa fa9b 	bl	8001600 <SD_disk_write>
 80070ca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	603a      	str	r2, [r7, #0]
 80070de:	71fb      	strb	r3, [r7, #7]
 80070e0:	460b      	mov	r3, r1
 80070e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80070e4:	79b9      	ldrb	r1, [r7, #6]
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fa fb0c 	bl	8001708 <SD_disk_ioctl>
 80070f0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	4a08      	ldr	r2, [pc, #32]	@ (800712c <disk_status+0x30>)
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	79fa      	ldrb	r2, [r7, #7]
 8007114:	4905      	ldr	r1, [pc, #20]	@ (800712c <disk_status+0x30>)
 8007116:	440a      	add	r2, r1
 8007118:	7a12      	ldrb	r2, [r2, #8]
 800711a:	4610      	mov	r0, r2
 800711c:	4798      	blx	r3
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	2000274c 	.word	0x2000274c

08007130 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	4a0d      	ldr	r2, [pc, #52]	@ (8007178 <disk_initialize+0x48>)
 8007142:	5cd3      	ldrb	r3, [r2, r3]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d111      	bne.n	800716c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	4a0b      	ldr	r2, [pc, #44]	@ (8007178 <disk_initialize+0x48>)
 800714c:	2101      	movs	r1, #1
 800714e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <disk_initialize+0x48>)
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	79fa      	ldrb	r2, [r7, #7]
 800715e:	4906      	ldr	r1, [pc, #24]	@ (8007178 <disk_initialize+0x48>)
 8007160:	440a      	add	r2, r1
 8007162:	7a12      	ldrb	r2, [r2, #8]
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	2000274c 	.word	0x2000274c

0800717c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	4a0a      	ldr	r2, [pc, #40]	@ (80071b8 <disk_read+0x3c>)
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	689c      	ldr	r4, [r3, #8]
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	4a07      	ldr	r2, [pc, #28]	@ (80071b8 <disk_read+0x3c>)
 800719c:	4413      	add	r3, r2
 800719e:	7a18      	ldrb	r0, [r3, #8]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	47a0      	blx	r4
 80071a8:	4603      	mov	r3, r0
 80071aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	bf00      	nop
 80071b8:	2000274c 	.word	0x2000274c

080071bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80071bc:	b590      	push	{r4, r7, lr}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	4a0a      	ldr	r2, [pc, #40]	@ (80071f8 <disk_write+0x3c>)
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68dc      	ldr	r4, [r3, #12]
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	4a07      	ldr	r2, [pc, #28]	@ (80071f8 <disk_write+0x3c>)
 80071dc:	4413      	add	r3, r2
 80071de:	7a18      	ldrb	r0, [r3, #8]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	47a0      	blx	r4
 80071e8:	4603      	mov	r3, r0
 80071ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd90      	pop	{r4, r7, pc}
 80071f6:	bf00      	nop
 80071f8:	2000274c 	.word	0x2000274c

080071fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	603a      	str	r2, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
 8007208:	460b      	mov	r3, r1
 800720a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	4a09      	ldr	r2, [pc, #36]	@ (8007234 <disk_ioctl+0x38>)
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	79fa      	ldrb	r2, [r7, #7]
 800721a:	4906      	ldr	r1, [pc, #24]	@ (8007234 <disk_ioctl+0x38>)
 800721c:	440a      	add	r2, r1
 800721e:	7a10      	ldrb	r0, [r2, #8]
 8007220:	79b9      	ldrb	r1, [r7, #6]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	4798      	blx	r3
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
  return res;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	2000274c 	.word	0x2000274c

08007238 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3301      	adds	r3, #1
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800724c:	021b      	lsls	r3, r3, #8
 800724e:	b21a      	sxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b21b      	sxth	r3, r3
 8007256:	4313      	orrs	r3, r2
 8007258:	b21b      	sxth	r3, r3
 800725a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800725c:	89fb      	ldrh	r3, [r7, #14]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3303      	adds	r3, #3
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	3202      	adds	r2, #2
 8007282:	7812      	ldrb	r2, [r2, #0]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	3201      	adds	r2, #1
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
	return rv;
 80072a2:	68fb      	ldr	r3, [r7, #12]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	887a      	ldrh	r2, [r7, #2]
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	887b      	ldrh	r3, [r7, #2]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	887a      	ldrh	r2, [r7, #2]
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	b2d2      	uxtb	r2, r2
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	0a1b      	lsrs	r3, r3, #8
 8007312:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800733e:	b480      	push	{r7}
 8007340:	b087      	sub	sp, #28
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00d      	beq.n	8007374 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	1c53      	adds	r3, r2, #1
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1c59      	adds	r1, r3, #1
 8007362:	6179      	str	r1, [r7, #20]
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3b01      	subs	r3, #1
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1f1      	bne.n	8007358 <mem_cpy+0x1a>
	}
}
 8007374:	bf00      	nop
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	617a      	str	r2, [r7, #20]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3b01      	subs	r3, #1
 80073a0:	607b      	str	r3, [r7, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f3      	bne.n	8007390 <mem_set+0x10>
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80073b6:	b480      	push	{r7}
 80073b8:	b089      	sub	sp, #36	@ 0x24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	61fb      	str	r3, [r7, #28]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	61fa      	str	r2, [r7, #28]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	4619      	mov	r1, r3
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	61ba      	str	r2, [r7, #24]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	1acb      	subs	r3, r1, r3
 80073e2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <mem_cmp+0x40>
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0eb      	beq.n	80073ce <mem_cmp+0x18>

	return r;
 80073f6:	697b      	ldr	r3, [r7, #20]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3724      	adds	r7, #36	@ 0x24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800740e:	e002      	b.n	8007416 <chk_chr+0x12>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3301      	adds	r3, #1
 8007414:	607b      	str	r3, [r7, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <chk_chr+0x26>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	4293      	cmp	r3, r2
 8007428:	d1f2      	bne.n	8007410 <chk_chr+0xc>
	return *str;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	781b      	ldrb	r3, [r3, #0]
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
	...

0800743c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007446:	2300      	movs	r3, #0
 8007448:	60bb      	str	r3, [r7, #8]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	e029      	b.n	80074a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007450:	4a27      	ldr	r2, [pc, #156]	@ (80074f0 <chk_lock+0xb4>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	4413      	add	r3, r2
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01d      	beq.n	800749a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800745e:	4a24      	ldr	r2, [pc, #144]	@ (80074f0 <chk_lock+0xb4>)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	4413      	add	r3, r2
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d116      	bne.n	800749e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007470:	4a1f      	ldr	r2, [pc, #124]	@ (80074f0 <chk_lock+0xb4>)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	4413      	add	r3, r2
 8007478:	3304      	adds	r3, #4
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007480:	429a      	cmp	r2, r3
 8007482:	d10c      	bne.n	800749e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007484:	4a1a      	ldr	r2, [pc, #104]	@ (80074f0 <chk_lock+0xb4>)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	4413      	add	r3, r2
 800748c:	3308      	adds	r3, #8
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007494:	429a      	cmp	r2, r3
 8007496:	d102      	bne.n	800749e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007498:	e007      	b.n	80074aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800749a:	2301      	movs	r3, #1
 800749c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3301      	adds	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d9d2      	bls.n	8007450 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d109      	bne.n	80074c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <chk_lock+0x80>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d101      	bne.n	80074c0 <chk_lock+0x84>
 80074bc:	2300      	movs	r3, #0
 80074be:	e010      	b.n	80074e2 <chk_lock+0xa6>
 80074c0:	2312      	movs	r3, #18
 80074c2:	e00e      	b.n	80074e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d108      	bne.n	80074dc <chk_lock+0xa0>
 80074ca:	4a09      	ldr	r2, [pc, #36]	@ (80074f0 <chk_lock+0xb4>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	4413      	add	r3, r2
 80074d2:	330c      	adds	r3, #12
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074da:	d101      	bne.n	80074e0 <chk_lock+0xa4>
 80074dc:	2310      	movs	r3, #16
 80074de:	e000      	b.n	80074e2 <chk_lock+0xa6>
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	2000252c 	.word	0x2000252c

080074f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074fa:	2300      	movs	r3, #0
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	e002      	b.n	8007506 <enq_lock+0x12>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3301      	adds	r3, #1
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d806      	bhi.n	800751a <enq_lock+0x26>
 800750c:	4a09      	ldr	r2, [pc, #36]	@ (8007534 <enq_lock+0x40>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	4413      	add	r3, r2
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f2      	bne.n	8007500 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b02      	cmp	r3, #2
 800751e:	bf14      	ite	ne
 8007520:	2301      	movne	r3, #1
 8007522:	2300      	moveq	r3, #0
 8007524:	b2db      	uxtb	r3, r3
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	2000252c 	.word	0x2000252c

08007538 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]
 8007546:	e01f      	b.n	8007588 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007548:	4a41      	ldr	r2, [pc, #260]	@ (8007650 <inc_lock+0x118>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4413      	add	r3, r2
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d113      	bne.n	8007582 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800755a:	4a3d      	ldr	r2, [pc, #244]	@ (8007650 <inc_lock+0x118>)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	011b      	lsls	r3, r3, #4
 8007560:	4413      	add	r3, r2
 8007562:	3304      	adds	r3, #4
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800756a:	429a      	cmp	r2, r3
 800756c:	d109      	bne.n	8007582 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800756e:	4a38      	ldr	r2, [pc, #224]	@ (8007650 <inc_lock+0x118>)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	4413      	add	r3, r2
 8007576:	3308      	adds	r3, #8
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800757e:	429a      	cmp	r2, r3
 8007580:	d006      	beq.n	8007590 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3301      	adds	r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d9dc      	bls.n	8007548 <inc_lock+0x10>
 800758e:	e000      	b.n	8007592 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007590:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d132      	bne.n	80075fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e002      	b.n	80075a4 <inc_lock+0x6c>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3301      	adds	r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d806      	bhi.n	80075b8 <inc_lock+0x80>
 80075aa:	4a29      	ldr	r2, [pc, #164]	@ (8007650 <inc_lock+0x118>)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	4413      	add	r3, r2
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1f2      	bne.n	800759e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d101      	bne.n	80075c2 <inc_lock+0x8a>
 80075be:	2300      	movs	r3, #0
 80075c0:	e040      	b.n	8007644 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4922      	ldr	r1, [pc, #136]	@ (8007650 <inc_lock+0x118>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	440b      	add	r3, r1
 80075ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	491e      	ldr	r1, [pc, #120]	@ (8007650 <inc_lock+0x118>)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	011b      	lsls	r3, r3, #4
 80075da:	440b      	add	r3, r1
 80075dc:	3304      	adds	r3, #4
 80075de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	695a      	ldr	r2, [r3, #20]
 80075e4:	491a      	ldr	r1, [pc, #104]	@ (8007650 <inc_lock+0x118>)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	440b      	add	r3, r1
 80075ec:	3308      	adds	r3, #8
 80075ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80075f0:	4a17      	ldr	r2, [pc, #92]	@ (8007650 <inc_lock+0x118>)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	4413      	add	r3, r2
 80075f8:	330c      	adds	r3, #12
 80075fa:	2200      	movs	r2, #0
 80075fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d009      	beq.n	8007618 <inc_lock+0xe0>
 8007604:	4a12      	ldr	r2, [pc, #72]	@ (8007650 <inc_lock+0x118>)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	4413      	add	r3, r2
 800760c:	330c      	adds	r3, #12
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <inc_lock+0xe0>
 8007614:	2300      	movs	r3, #0
 8007616:	e015      	b.n	8007644 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <inc_lock+0xf8>
 800761e:	4a0c      	ldr	r2, [pc, #48]	@ (8007650 <inc_lock+0x118>)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	4413      	add	r3, r2
 8007626:	330c      	adds	r3, #12
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	3301      	adds	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	e001      	b.n	8007634 <inc_lock+0xfc>
 8007630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007634:	4906      	ldr	r1, [pc, #24]	@ (8007650 <inc_lock+0x118>)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	440b      	add	r3, r1
 800763c:	330c      	adds	r3, #12
 800763e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	2000252c 	.word	0x2000252c

08007654 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3b01      	subs	r3, #1
 8007660:	607b      	str	r3, [r7, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d825      	bhi.n	80076b4 <dec_lock+0x60>
		n = Files[i].ctr;
 8007668:	4a17      	ldr	r2, [pc, #92]	@ (80076c8 <dec_lock+0x74>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	4413      	add	r3, r2
 8007670:	330c      	adds	r3, #12
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007676:	89fb      	ldrh	r3, [r7, #14]
 8007678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800767c:	d101      	bne.n	8007682 <dec_lock+0x2e>
 800767e:	2300      	movs	r3, #0
 8007680:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007682:	89fb      	ldrh	r3, [r7, #14]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <dec_lock+0x3a>
 8007688:	89fb      	ldrh	r3, [r7, #14]
 800768a:	3b01      	subs	r3, #1
 800768c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800768e:	4a0e      	ldr	r2, [pc, #56]	@ (80076c8 <dec_lock+0x74>)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	4413      	add	r3, r2
 8007696:	330c      	adds	r3, #12
 8007698:	89fa      	ldrh	r2, [r7, #14]
 800769a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <dec_lock+0x5a>
 80076a2:	4a09      	ldr	r2, [pc, #36]	@ (80076c8 <dec_lock+0x74>)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	737b      	strb	r3, [r7, #13]
 80076b2:	e001      	b.n	80076b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076b4:	2302      	movs	r3, #2
 80076b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80076b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	2000252c 	.word	0x2000252c

080076cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	e010      	b.n	80076fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076da:	4a0d      	ldr	r2, [pc, #52]	@ (8007710 <clear_lock+0x44>)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	4413      	add	r3, r2
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d105      	bne.n	80076f6 <clear_lock+0x2a>
 80076ea:	4a09      	ldr	r2, [pc, #36]	@ (8007710 <clear_lock+0x44>)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	4413      	add	r3, r2
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3301      	adds	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d9eb      	bls.n	80076da <clear_lock+0xe>
	}
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	2000252c 	.word	0x2000252c

08007714 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	78db      	ldrb	r3, [r3, #3]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d034      	beq.n	8007792 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800772c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7858      	ldrb	r0, [r3, #1]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007738:	2301      	movs	r3, #1
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	f7ff fd3e 	bl	80071bc <disk_write>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007746:	2301      	movs	r3, #1
 8007748:	73fb      	strb	r3, [r7, #15]
 800774a:	e022      	b.n	8007792 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	1ad2      	subs	r2, r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	429a      	cmp	r2, r3
 8007760:	d217      	bcs.n	8007792 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	789b      	ldrb	r3, [r3, #2]
 8007766:	613b      	str	r3, [r7, #16]
 8007768:	e010      	b.n	800778c <sync_window+0x78>
					wsect += fs->fsize;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4413      	add	r3, r2
 8007772:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7858      	ldrb	r0, [r3, #1]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800777e:	2301      	movs	r3, #1
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	f7ff fd1b 	bl	80071bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	3b01      	subs	r3, #1
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d8eb      	bhi.n	800776a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d01b      	beq.n	80077ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff ffad 	bl	8007714 <sync_window>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d113      	bne.n	80077ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7858      	ldrb	r0, [r3, #1]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80077ce:	2301      	movs	r3, #1
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	f7ff fcd3 	bl	800717c <disk_read>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80077dc:	f04f 33ff 	mov.w	r3, #4294967295
 80077e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff87 	bl	8007714 <sync_window>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d159      	bne.n	80078c4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d149      	bne.n	80078ac <sync_fs+0xb4>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	791b      	ldrb	r3, [r3, #4]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d145      	bne.n	80078ac <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	899b      	ldrh	r3, [r3, #12]
 800782a:	461a      	mov	r2, r3
 800782c:	2100      	movs	r1, #0
 800782e:	f7ff fda7 	bl	8007380 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3338      	adds	r3, #56	@ 0x38
 8007836:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800783a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fd36 	bl	80072b0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3338      	adds	r3, #56	@ 0x38
 8007848:	4921      	ldr	r1, [pc, #132]	@ (80078d0 <sync_fs+0xd8>)
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff fd4b 	bl	80072e6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3338      	adds	r3, #56	@ 0x38
 8007854:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007858:	491e      	ldr	r1, [pc, #120]	@ (80078d4 <sync_fs+0xdc>)
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff fd43 	bl	80072e6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3338      	adds	r3, #56	@ 0x38
 8007864:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7ff fd39 	bl	80072e6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3338      	adds	r3, #56	@ 0x38
 8007878:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7ff fd2f 	bl	80072e6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	7858      	ldrb	r0, [r3, #1]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078a0:	2301      	movs	r3, #1
 80078a2:	f7ff fc8b 	bl	80071bc <disk_write>
			fs->fsi_flag = 0;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2200      	movs	r2, #0
 80078b2:	2100      	movs	r1, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fca1 	bl	80071fc <disk_ioctl>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <sync_fs+0xcc>
 80078c0:	2301      	movs	r3, #1
 80078c2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	41615252 	.word	0x41615252
 80078d4:	61417272 	.word	0x61417272

080078d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3b02      	subs	r3, #2
 80078e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	3b02      	subs	r3, #2
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d301      	bcc.n	80078f8 <clust2sect+0x20>
 80078f4:	2300      	movs	r3, #0
 80078f6:	e008      	b.n	800790a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	895b      	ldrh	r3, [r3, #10]
 80078fc:	461a      	mov	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	fb03 f202 	mul.w	r2, r3, r2
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007908:	4413      	add	r3, r2
}
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d904      	bls.n	8007936 <get_fat+0x20>
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d302      	bcc.n	800793c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007936:	2301      	movs	r3, #1
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	e0ba      	b.n	8007ab2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800793c:	f04f 33ff 	mov.w	r3, #4294967295
 8007940:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b03      	cmp	r3, #3
 8007948:	f000 8082 	beq.w	8007a50 <get_fat+0x13a>
 800794c:	2b03      	cmp	r3, #3
 800794e:	f300 80a6 	bgt.w	8007a9e <get_fat+0x188>
 8007952:	2b01      	cmp	r3, #1
 8007954:	d002      	beq.n	800795c <get_fat+0x46>
 8007956:	2b02      	cmp	r3, #2
 8007958:	d055      	beq.n	8007a06 <get_fat+0xf0>
 800795a:	e0a0      	b.n	8007a9e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	899b      	ldrh	r3, [r3, #12]
 8007972:	4619      	mov	r1, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	fbb3 f3f1 	udiv	r3, r3, r1
 800797a:	4413      	add	r3, r2
 800797c:	4619      	mov	r1, r3
 800797e:	6938      	ldr	r0, [r7, #16]
 8007980:	f7ff ff0c 	bl	800779c <move_window>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	f040 808c 	bne.w	8007aa4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	60fa      	str	r2, [r7, #12]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	8992      	ldrh	r2, [r2, #12]
 8007996:	fbb3 f1f2 	udiv	r1, r3, r2
 800799a:	fb01 f202 	mul.w	r2, r1, r2
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4413      	add	r3, r2
 80079a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	899b      	ldrh	r3, [r3, #12]
 80079b2:	4619      	mov	r1, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80079ba:	4413      	add	r3, r2
 80079bc:	4619      	mov	r1, r3
 80079be:	6938      	ldr	r0, [r7, #16]
 80079c0:	f7ff feec 	bl	800779c <move_window>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d16e      	bne.n	8007aa8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	899b      	ldrh	r3, [r3, #12]
 80079ce:	461a      	mov	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80079d6:	fb01 f202 	mul.w	r2, r1, r2
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4413      	add	r3, r2
 80079e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <get_fat+0xe6>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	091b      	lsrs	r3, r3, #4
 80079fa:	e002      	b.n	8007a02 <get_fat+0xec>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a02:	617b      	str	r3, [r7, #20]
			break;
 8007a04:	e055      	b.n	8007ab2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	899b      	ldrh	r3, [r3, #12]
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a1a:	4413      	add	r3, r2
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6938      	ldr	r0, [r7, #16]
 8007a20:	f7ff febc 	bl	800779c <move_window>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d140      	bne.n	8007aac <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	8992      	ldrh	r2, [r2, #12]
 8007a38:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a3c:	fb00 f202 	mul.w	r2, r0, r2
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	440b      	add	r3, r1
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff fbf7 	bl	8007238 <ld_word>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	617b      	str	r3, [r7, #20]
			break;
 8007a4e:	e030      	b.n	8007ab2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	899b      	ldrh	r3, [r3, #12]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a64:	4413      	add	r3, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	6938      	ldr	r0, [r7, #16]
 8007a6a:	f7ff fe97 	bl	800779c <move_window>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d11d      	bne.n	8007ab0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	8992      	ldrh	r2, [r2, #12]
 8007a82:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a86:	fb00 f202 	mul.w	r2, r0, r2
 8007a8a:	1a9b      	subs	r3, r3, r2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fbeb 	bl	800726a <ld_dword>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a9a:	617b      	str	r3, [r7, #20]
			break;
 8007a9c:	e009      	b.n	8007ab2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	e006      	b.n	8007ab2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aa4:	bf00      	nop
 8007aa6:	e004      	b.n	8007ab2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aa8:	bf00      	nop
 8007aaa:	e002      	b.n	8007ab2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007aac:	bf00      	nop
 8007aae:	e000      	b.n	8007ab2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ab0:	bf00      	nop
		}
	}

	return val;
 8007ab2:	697b      	ldr	r3, [r7, #20]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007abc:	b590      	push	{r4, r7, lr}
 8007abe:	b089      	sub	sp, #36	@ 0x24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	f240 8109 	bls.w	8007ce6 <put_fat+0x22a>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	f080 8103 	bcs.w	8007ce6 <put_fat+0x22a>
		switch (fs->fs_type) {
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	f000 80b6 	beq.w	8007c56 <put_fat+0x19a>
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	f300 80fb 	bgt.w	8007ce6 <put_fat+0x22a>
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d003      	beq.n	8007afc <put_fat+0x40>
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	f000 8083 	beq.w	8007c00 <put_fat+0x144>
 8007afa:	e0f4      	b.n	8007ce6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	61bb      	str	r3, [r7, #24]
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4413      	add	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	899b      	ldrh	r3, [r3, #12]
 8007b12:	4619      	mov	r1, r3
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b1a:	4413      	add	r3, r2
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7ff fe3c 	bl	800779c <move_window>
 8007b24:	4603      	mov	r3, r0
 8007b26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b28:	7ffb      	ldrb	r3, [r7, #31]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 80d4 	bne.w	8007cd8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	61ba      	str	r2, [r7, #24]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	8992      	ldrh	r2, [r2, #12]
 8007b40:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b44:	fb00 f202 	mul.w	r2, r0, r2
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00d      	beq.n	8007b74 <put_fat+0xb8>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b25b      	sxtb	r3, r3
 8007b5e:	f003 030f 	and.w	r3, r3, #15
 8007b62:	b25a      	sxtb	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	b25b      	sxtb	r3, r3
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	b25b      	sxtb	r3, r3
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	b25b      	sxtb	r3, r3
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e001      	b.n	8007b78 <put_fat+0xbc>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	899b      	ldrh	r3, [r3, #12]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b92:	4413      	add	r3, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fe00 	bl	800779c <move_window>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ba0:	7ffb      	ldrb	r3, [r7, #31]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f040 809a 	bne.w	8007cdc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	899b      	ldrh	r3, [r3, #12]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bba:	fb00 f202 	mul.w	r2, r0, r2
 8007bbe:	1a9b      	subs	r3, r3, r2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <put_fat+0x11a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	e00e      	b.n	8007bf4 <put_fat+0x138>
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b25b      	sxtb	r3, r3
 8007bdc:	f023 030f 	bic.w	r3, r3, #15
 8007be0:	b25a      	sxtb	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	0a1b      	lsrs	r3, r3, #8
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	b25b      	sxtb	r3, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b25b      	sxtb	r3, r3
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	70da      	strb	r2, [r3, #3]
			break;
 8007bfe:	e072      	b.n	8007ce6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	899b      	ldrh	r3, [r3, #12]
 8007c08:	085b      	lsrs	r3, r3, #1
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c14:	4413      	add	r3, r2
 8007c16:	4619      	mov	r1, r3
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7ff fdbf 	bl	800779c <move_window>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c22:	7ffb      	ldrb	r3, [r7, #31]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d15b      	bne.n	8007ce0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	8992      	ldrh	r2, [r2, #12]
 8007c36:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c3a:	fb00 f202 	mul.w	r2, r0, r2
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	440b      	add	r3, r1
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	b292      	uxth	r2, r2
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff fb31 	bl	80072b0 <st_word>
			fs->wflag = 1;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	70da      	strb	r2, [r3, #3]
			break;
 8007c54:	e047      	b.n	8007ce6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	899b      	ldrh	r3, [r3, #12]
 8007c5e:	089b      	lsrs	r3, r3, #2
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	4619      	mov	r1, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c6a:	4413      	add	r3, r2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f7ff fd94 	bl	800779c <move_window>
 8007c74:	4603      	mov	r3, r0
 8007c76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c78:	7ffb      	ldrb	r3, [r7, #31]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d132      	bne.n	8007ce4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	8992      	ldrh	r2, [r2, #12]
 8007c92:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c96:	fb00 f202 	mul.w	r2, r0, r2
 8007c9a:	1a9b      	subs	r3, r3, r2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fae3 	bl	800726a <ld_dword>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007caa:	4323      	orrs	r3, r4
 8007cac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	8992      	ldrh	r2, [r2, #12]
 8007cbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cc0:	fb00 f202 	mul.w	r2, r0, r2
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fb0b 	bl	80072e6 <st_dword>
			fs->wflag = 1;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	70da      	strb	r2, [r3, #3]
			break;
 8007cd6:	e006      	b.n	8007ce6 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007cd8:	bf00      	nop
 8007cda:	e004      	b.n	8007ce6 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007cdc:	bf00      	nop
 8007cde:	e002      	b.n	8007ce6 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007ce4:	bf00      	nop
		}
	}
	return res;
 8007ce6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3724      	adds	r7, #36	@ 0x24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd90      	pop	{r4, r7, pc}

08007cf0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d904      	bls.n	8007d16 <remove_chain+0x26>
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d301      	bcc.n	8007d1a <remove_chain+0x2a>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e04b      	b.n	8007db2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d20:	f04f 32ff 	mov.w	r2, #4294967295
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	69b8      	ldr	r0, [r7, #24]
 8007d28:	f7ff fec8 	bl	8007abc <put_fat>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d30:	7ffb      	ldrb	r3, [r7, #31]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <remove_chain+0x4a>
 8007d36:	7ffb      	ldrb	r3, [r7, #31]
 8007d38:	e03b      	b.n	8007db2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7ff fdea 	bl	8007916 <get_fat>
 8007d42:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d031      	beq.n	8007dae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <remove_chain+0x64>
 8007d50:	2302      	movs	r3, #2
 8007d52:	e02e      	b.n	8007db2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5a:	d101      	bne.n	8007d60 <remove_chain+0x70>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e028      	b.n	8007db2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d60:	2200      	movs	r2, #0
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	69b8      	ldr	r0, [r7, #24]
 8007d66:	f7ff fea9 	bl	8007abc <put_fat>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007d6e:	7ffb      	ldrb	r3, [r7, #31]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <remove_chain+0x88>
 8007d74:	7ffb      	ldrb	r3, [r7, #31]
 8007d76:	e01c      	b.n	8007db2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	699a      	ldr	r2, [r3, #24]
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	3b02      	subs	r3, #2
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d20b      	bcs.n	8007d9e <remove_chain+0xae>
			fs->free_clst++;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	791b      	ldrb	r3, [r3, #4]
 8007d94:	f043 0301 	orr.w	r3, r3, #1
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d3c6      	bcc.n	8007d3a <remove_chain+0x4a>
 8007dac:	e000      	b.n	8007db0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007dae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3720      	adds	r7, #32
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b088      	sub	sp, #32
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10d      	bne.n	8007dec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <create_chain+0x2c>
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d31b      	bcc.n	8007e1e <create_chain+0x64>
 8007de6:	2301      	movs	r3, #1
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	e018      	b.n	8007e1e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fd91 	bl	8007916 <get_fat>
 8007df4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d801      	bhi.n	8007e00 <create_chain+0x46>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e070      	b.n	8007ee2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e06:	d101      	bne.n	8007e0c <create_chain+0x52>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	e06a      	b.n	8007ee2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d201      	bcs.n	8007e1a <create_chain+0x60>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	e063      	b.n	8007ee2 <create_chain+0x128>
		scl = clst;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	3301      	adds	r3, #1
 8007e26:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d307      	bcc.n	8007e42 <create_chain+0x88>
				ncl = 2;
 8007e32:	2302      	movs	r3, #2
 8007e34:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d901      	bls.n	8007e42 <create_chain+0x88>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e04f      	b.n	8007ee2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e42:	69f9      	ldr	r1, [r7, #28]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff fd66 	bl	8007916 <get_fat>
 8007e4a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00e      	beq.n	8007e70 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d003      	beq.n	8007e60 <create_chain+0xa6>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5e:	d101      	bne.n	8007e64 <create_chain+0xaa>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	e03e      	b.n	8007ee2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d1da      	bne.n	8007e22 <create_chain+0x68>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	e038      	b.n	8007ee2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007e70:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007e72:	f04f 32ff 	mov.w	r2, #4294967295
 8007e76:	69f9      	ldr	r1, [r7, #28]
 8007e78:	6938      	ldr	r0, [r7, #16]
 8007e7a:	f7ff fe1f 	bl	8007abc <put_fat>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d109      	bne.n	8007e9c <create_chain+0xe2>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d006      	beq.n	8007e9c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6938      	ldr	r0, [r7, #16]
 8007e94:	f7ff fe12 	bl	8007abc <put_fat>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d116      	bne.n	8007ed0 <create_chain+0x116>
		fs->last_clst = ncl;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	699a      	ldr	r2, [r3, #24]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	3b02      	subs	r3, #2
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d804      	bhi.n	8007ec0 <create_chain+0x106>
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	1e5a      	subs	r2, r3, #1
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	f043 0301 	orr.w	r3, r3, #1
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	711a      	strb	r2, [r3, #4]
 8007ece:	e007      	b.n	8007ee0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d102      	bne.n	8007edc <create_chain+0x122>
 8007ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eda:	e000      	b.n	8007ede <create_chain+0x124>
 8007edc:	2301      	movs	r3, #1
 8007ede:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007ee0:	69fb      	ldr	r3, [r7, #28]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3720      	adds	r7, #32
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b087      	sub	sp, #28
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007efe:	3304      	adds	r3, #4
 8007f00:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	899b      	ldrh	r3, [r3, #12]
 8007f06:	461a      	mov	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	8952      	ldrh	r2, [r2, #10]
 8007f12:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f16:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	1d1a      	adds	r2, r3, #4
 8007f1c:	613a      	str	r2, [r7, #16]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <clmt_clust+0x42>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e010      	b.n	8007f4e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d307      	bcc.n	8007f44 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f42:	e7e9      	b.n	8007f18 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007f44:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	4413      	add	r3, r2
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b086      	sub	sp, #24
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f70:	d204      	bcs.n	8007f7c <dir_sdi+0x22>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	f003 031f 	and.w	r3, r3, #31
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e071      	b.n	8008064 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <dir_sdi+0x46>
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d902      	bls.n	8007fa0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10c      	bne.n	8007fc0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	095b      	lsrs	r3, r3, #5
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	8912      	ldrh	r2, [r2, #8]
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d301      	bcc.n	8007fb6 <dir_sdi+0x5c>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e056      	b.n	8008064 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	61da      	str	r2, [r3, #28]
 8007fbe:	e02d      	b.n	800801c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	895b      	ldrh	r3, [r3, #10]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	899b      	ldrh	r3, [r3, #12]
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
 8007fce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007fd0:	e019      	b.n	8008006 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6979      	ldr	r1, [r7, #20]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fc9d 	bl	8007916 <get_fat>
 8007fdc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe4:	d101      	bne.n	8007fea <dir_sdi+0x90>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e03c      	b.n	8008064 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d904      	bls.n	8007ffa <dir_sdi+0xa0>
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d301      	bcc.n	8007ffe <dir_sdi+0xa4>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e032      	b.n	8008064 <dir_sdi+0x10a>
			ofs -= csz;
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	429a      	cmp	r2, r3
 800800c:	d2e1      	bcs.n	8007fd2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800800e:	6979      	ldr	r1, [r7, #20]
 8008010:	6938      	ldr	r0, [r7, #16]
 8008012:	f7ff fc61 	bl	80078d8 <clust2sect>
 8008016:	4602      	mov	r2, r0
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <dir_sdi+0xd4>
 800802a:	2302      	movs	r3, #2
 800802c:	e01a      	b.n	8008064 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69da      	ldr	r2, [r3, #28]
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	899b      	ldrh	r3, [r3, #12]
 8008036:	4619      	mov	r1, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	fbb3 f3f1 	udiv	r3, r3, r1
 800803e:	441a      	add	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	899b      	ldrh	r3, [r3, #12]
 800804e:	461a      	mov	r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	fbb3 f0f2 	udiv	r0, r3, r2
 8008056:	fb00 f202 	mul.w	r2, r0, r2
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	18ca      	adds	r2, r1, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	3320      	adds	r3, #32
 8008082:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <dir_next+0x28>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008092:	d301      	bcc.n	8008098 <dir_next+0x2c>
 8008094:	2304      	movs	r3, #4
 8008096:	e0bb      	b.n	8008210 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	899b      	ldrh	r3, [r3, #12]
 800809c:	461a      	mov	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80080a4:	fb01 f202 	mul.w	r2, r1, r2
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f040 809d 	bne.w	80081ea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10b      	bne.n	80080da <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	8912      	ldrh	r2, [r2, #8]
 80080ca:	4293      	cmp	r3, r2
 80080cc:	f0c0 808d 	bcc.w	80081ea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	61da      	str	r2, [r3, #28]
 80080d6:	2304      	movs	r3, #4
 80080d8:	e09a      	b.n	8008210 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	899b      	ldrh	r3, [r3, #12]
 80080de:	461a      	mov	r2, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	8952      	ldrh	r2, [r2, #10]
 80080ea:	3a01      	subs	r2, #1
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d17b      	bne.n	80081ea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7ff fc0b 	bl	8007916 <get_fat>
 8008100:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d801      	bhi.n	800810c <dir_next+0xa0>
 8008108:	2302      	movs	r3, #2
 800810a:	e081      	b.n	8008210 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008112:	d101      	bne.n	8008118 <dir_next+0xac>
 8008114:	2301      	movs	r3, #1
 8008116:	e07b      	b.n	8008210 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	429a      	cmp	r2, r3
 8008120:	d359      	bcc.n	80081d6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	61da      	str	r2, [r3, #28]
 800812e:	2304      	movs	r3, #4
 8008130:	e06e      	b.n	8008210 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7ff fe3d 	bl	8007dba <create_chain>
 8008140:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <dir_next+0xe0>
 8008148:	2307      	movs	r3, #7
 800814a:	e061      	b.n	8008210 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <dir_next+0xea>
 8008152:	2302      	movs	r3, #2
 8008154:	e05c      	b.n	8008210 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d101      	bne.n	8008162 <dir_next+0xf6>
 800815e:	2301      	movs	r3, #1
 8008160:	e056      	b.n	8008210 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff fad6 	bl	8007714 <sync_window>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <dir_next+0x106>
 800816e:	2301      	movs	r3, #1
 8008170:	e04e      	b.n	8008210 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	899b      	ldrh	r3, [r3, #12]
 800817c:	461a      	mov	r2, r3
 800817e:	2100      	movs	r1, #0
 8008180:	f7ff f8fe 	bl	8007380 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008184:	2300      	movs	r3, #0
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	6979      	ldr	r1, [r7, #20]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fba4 	bl	80078d8 <clust2sect>
 8008190:	4602      	mov	r2, r0
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	635a      	str	r2, [r3, #52]	@ 0x34
 8008196:	e012      	b.n	80081be <dir_next+0x152>
						fs->wflag = 1;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff fab8 	bl	8007714 <sync_window>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <dir_next+0x142>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e030      	b.n	8008210 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	3301      	adds	r3, #1
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	895b      	ldrh	r3, [r3, #10]
 80081c2:	461a      	mov	r2, r3
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d3e6      	bcc.n	8008198 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1ad2      	subs	r2, r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80081dc:	6979      	ldr	r1, [r7, #20]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f7ff fb7a 	bl	80078d8 <clust2sect>
 80081e4:	4602      	mov	r2, r0
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	899b      	ldrh	r3, [r3, #12]
 80081fa:	461a      	mov	r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8008202:	fb00 f202 	mul.w	r2, r0, r2
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	18ca      	adds	r2, r1, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff fe95 	bl	8007f5a <dir_sdi>
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d12b      	bne.n	8008292 <dir_alloc+0x7a>
		n = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	4619      	mov	r1, r3
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff faa9 	bl	800779c <move_window>
 800824a:	4603      	mov	r3, r0
 800824c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d11d      	bne.n	8008290 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2be5      	cmp	r3, #229	@ 0xe5
 800825c:	d004      	beq.n	8008268 <dir_alloc+0x50>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d107      	bne.n	8008278 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3301      	adds	r3, #1
 800826c:	613b      	str	r3, [r7, #16]
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d102      	bne.n	800827c <dir_alloc+0x64>
 8008276:	e00c      	b.n	8008292 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800827c:	2101      	movs	r1, #1
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff fef4 	bl	800806c <dir_next>
 8008284:	4603      	mov	r3, r0
 8008286:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0d7      	beq.n	800823e <dir_alloc+0x26>
 800828e:	e000      	b.n	8008292 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008290:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	2b04      	cmp	r3, #4
 8008296:	d101      	bne.n	800829c <dir_alloc+0x84>
 8008298:	2307      	movs	r3, #7
 800829a:	75fb      	strb	r3, [r7, #23]
	return res;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	331a      	adds	r3, #26
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe ffbf 	bl	8007238 <ld_word>
 80082ba:	4603      	mov	r3, r0
 80082bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d109      	bne.n	80082da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	3314      	adds	r3, #20
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe ffb4 	bl	8007238 <ld_word>
 80082d0:	4603      	mov	r3, r0
 80082d2:	041b      	lsls	r3, r3, #16
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80082da:	68fb      	ldr	r3, [r7, #12]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	331a      	adds	r3, #26
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	b292      	uxth	r2, r2
 80082f8:	4611      	mov	r1, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe ffd8 	bl	80072b0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b03      	cmp	r3, #3
 8008306:	d109      	bne.n	800831c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f103 0214 	add.w	r2, r3, #20
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	0c1b      	lsrs	r3, r3, #16
 8008312:	b29b      	uxth	r3, r3
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f7fe ffca 	bl	80072b0 <st_word>
	}
}
 800831c:	bf00      	nop
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	331a      	adds	r3, #26
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe ff80 	bl	8007238 <ld_word>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <cmp_lfn+0x1e>
 800833e:	2300      	movs	r3, #0
 8008340:	e059      	b.n	80083f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800834a:	1e5a      	subs	r2, r3, #1
 800834c:	4613      	mov	r3, r2
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008358:	2301      	movs	r3, #1
 800835a:	81fb      	strh	r3, [r7, #14]
 800835c:	2300      	movs	r3, #0
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	e033      	b.n	80083ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008362:	4a27      	ldr	r2, [pc, #156]	@ (8008400 <cmp_lfn+0xdc>)
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	4413      	add	r3, r2
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	4413      	add	r3, r2
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe ff61 	bl	8007238 <ld_word>
 8008376:	4603      	mov	r3, r0
 8008378:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800837a:	89fb      	ldrh	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01a      	beq.n	80083b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2bfe      	cmp	r3, #254	@ 0xfe
 8008384:	d812      	bhi.n	80083ac <cmp_lfn+0x88>
 8008386:	89bb      	ldrh	r3, [r7, #12]
 8008388:	4618      	mov	r0, r3
 800838a:	f002 f9a9 	bl	800a6e0 <ff_wtoupper>
 800838e:	4603      	mov	r3, r0
 8008390:	461c      	mov	r4, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	617a      	str	r2, [r7, #20]
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f002 f99d 	bl	800a6e0 <ff_wtoupper>
 80083a6:	4603      	mov	r3, r0
 80083a8:	429c      	cmp	r4, r3
 80083aa:	d001      	beq.n	80083b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80083ac:	2300      	movs	r3, #0
 80083ae:	e022      	b.n	80083f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80083b0:	89bb      	ldrh	r3, [r7, #12]
 80083b2:	81fb      	strh	r3, [r7, #14]
 80083b4:	e006      	b.n	80083c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80083b6:	89bb      	ldrh	r3, [r7, #12]
 80083b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083bc:	4293      	cmp	r3, r2
 80083be:	d001      	beq.n	80083c4 <cmp_lfn+0xa0>
 80083c0:	2300      	movs	r3, #0
 80083c2:	e018      	b.n	80083f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	3301      	adds	r3, #1
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b0c      	cmp	r3, #12
 80083ce:	d9c8      	bls.n	8008362 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <cmp_lfn+0xd0>
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <cmp_lfn+0xd0>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4413      	add	r3, r2
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <cmp_lfn+0xd0>
 80083f0:	2300      	movs	r3, #0
 80083f2:	e000      	b.n	80083f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80083f4:	2301      	movs	r3, #1
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd90      	pop	{r4, r7, pc}
 80083fe:	bf00      	nop
 8008400:	0800dc4c 	.word	0x0800dc4c

08008404 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	4611      	mov	r1, r2
 8008410:	461a      	mov	r2, r3
 8008412:	460b      	mov	r3, r1
 8008414:	71fb      	strb	r3, [r7, #7]
 8008416:	4613      	mov	r3, r2
 8008418:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	330d      	adds	r3, #13
 800841e:	79ba      	ldrb	r2, [r7, #6]
 8008420:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	330b      	adds	r3, #11
 8008426:	220f      	movs	r2, #15
 8008428:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	330c      	adds	r3, #12
 800842e:	2200      	movs	r2, #0
 8008430:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	331a      	adds	r3, #26
 8008436:	2100      	movs	r1, #0
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe ff39 	bl	80072b0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	1e5a      	subs	r2, r3, #1
 8008442:	4613      	mov	r3, r2
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	82fb      	strh	r3, [r7, #22]
 8008452:	2300      	movs	r3, #0
 8008454:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008456:	8afb      	ldrh	r3, [r7, #22]
 8008458:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800845c:	4293      	cmp	r3, r2
 800845e:	d007      	beq.n	8008470 <put_lfn+0x6c>
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	61fa      	str	r2, [r7, #28]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008470:	4a17      	ldr	r2, [pc, #92]	@ (80084d0 <put_lfn+0xcc>)
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	4413      	add	r3, r2
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	8afa      	ldrh	r2, [r7, #22]
 8008480:	4611      	mov	r1, r2
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe ff14 	bl	80072b0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008488:	8afb      	ldrh	r3, [r7, #22]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <put_lfn+0x90>
 800848e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008492:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	3301      	adds	r3, #1
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b0c      	cmp	r3, #12
 800849e:	d9da      	bls.n	8008456 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d006      	beq.n	80084b8 <put_lfn+0xb4>
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <put_lfn+0xbc>
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	79fa      	ldrb	r2, [r7, #7]
 80084c4:	701a      	strb	r2, [r3, #0]
}
 80084c6:	bf00      	nop
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	0800dc4c 	.word	0x0800dc4c

080084d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08c      	sub	sp, #48	@ 0x30
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80084e2:	220b      	movs	r2, #11
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7fe ff29 	bl	800733e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d92b      	bls.n	800854a <gen_numname+0x76>
		sr = seq;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80084f6:	e022      	b.n	800853e <gen_numname+0x6a>
			wc = *lfn++;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	1c9a      	adds	r2, r3, #2
 80084fc:	607a      	str	r2, [r7, #4]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008502:	2300      	movs	r3, #0
 8008504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008506:	e017      	b.n	8008538 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	005a      	lsls	r2, r3, #1
 800850c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	4413      	add	r3, r2
 8008514:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008516:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <gen_numname+0x5e>
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800852c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008530:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	3301      	adds	r3, #1
 8008536:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853a:	2b0f      	cmp	r3, #15
 800853c:	d9e4      	bls.n	8008508 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1d8      	bne.n	80084f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800854a:	2307      	movs	r3, #7
 800854c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	b2db      	uxtb	r3, r3
 8008558:	3330      	adds	r3, #48	@ 0x30
 800855a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800855e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008562:	2b39      	cmp	r3, #57	@ 0x39
 8008564:	d904      	bls.n	8008570 <gen_numname+0x9c>
 8008566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800856a:	3307      	adds	r3, #7
 800856c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	1e5a      	subs	r2, r3, #1
 8008574:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008576:	3330      	adds	r3, #48	@ 0x30
 8008578:	443b      	add	r3, r7
 800857a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800857e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	091b      	lsrs	r3, r3, #4
 8008586:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1df      	bne.n	800854e <gen_numname+0x7a>
	ns[i] = '~';
 800858e:	f107 0214 	add.w	r2, r7, #20
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	4413      	add	r3, r2
 8008596:	227e      	movs	r2, #126	@ 0x7e
 8008598:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800859a:	2300      	movs	r3, #0
 800859c:	627b      	str	r3, [r7, #36]	@ 0x24
 800859e:	e002      	b.n	80085a6 <gen_numname+0xd2>
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	3301      	adds	r3, #1
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d205      	bcs.n	80085ba <gen_numname+0xe6>
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	4413      	add	r3, r2
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d1f2      	bne.n	80085a0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	2b07      	cmp	r3, #7
 80085be:	d807      	bhi.n	80085d0 <gen_numname+0xfc>
 80085c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80085c6:	3330      	adds	r3, #48	@ 0x30
 80085c8:	443b      	add	r3, r7
 80085ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80085ce:	e000      	b.n	80085d2 <gen_numname+0xfe>
 80085d0:	2120      	movs	r1, #32
 80085d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	460a      	mov	r2, r1
 80085de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	2b07      	cmp	r3, #7
 80085e4:	d9e9      	bls.n	80085ba <gen_numname+0xe6>
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	3730      	adds	r7, #48	@ 0x30
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80085fc:	230b      	movs	r3, #11
 80085fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	b2da      	uxtb	r2, r3
 8008604:	0852      	lsrs	r2, r2, #1
 8008606:	01db      	lsls	r3, r3, #7
 8008608:	4313      	orrs	r3, r2
 800860a:	b2da      	uxtb	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	1c59      	adds	r1, r3, #1
 8008610:	6079      	str	r1, [r7, #4]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4413      	add	r3, r2
 8008616:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3b01      	subs	r3, #1
 800861c:	60bb      	str	r3, [r7, #8]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1ed      	bne.n	8008600 <sum_sfn+0x10>
	return sum;
 8008624:	7bfb      	ldrb	r3, [r7, #15]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b086      	sub	sp, #24
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008640:	2100      	movs	r1, #0
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff fc89 	bl	8007f5a <dir_sdi>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <dir_find+0x24>
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	e0a9      	b.n	80087aa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008656:	23ff      	movs	r3, #255	@ 0xff
 8008658:	753b      	strb	r3, [r7, #20]
 800865a:	7d3b      	ldrb	r3, [r7, #20]
 800865c:	757b      	strb	r3, [r7, #21]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	4619      	mov	r1, r3
 800866c:	6938      	ldr	r0, [r7, #16]
 800866e:	f7ff f895 	bl	800779c <move_window>
 8008672:	4603      	mov	r3, r0
 8008674:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f040 8090 	bne.w	800879e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008686:	7dbb      	ldrb	r3, [r7, #22]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <dir_find+0x60>
 800868c:	2304      	movs	r3, #4
 800868e:	75fb      	strb	r3, [r7, #23]
 8008690:	e08a      	b.n	80087a8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	330b      	adds	r3, #11
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800869e:	73fb      	strb	r3, [r7, #15]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	7bfa      	ldrb	r2, [r7, #15]
 80086a4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80086a6:	7dbb      	ldrb	r3, [r7, #22]
 80086a8:	2be5      	cmp	r3, #229	@ 0xe5
 80086aa:	d007      	beq.n	80086bc <dir_find+0x8a>
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d009      	beq.n	80086ca <dir_find+0x98>
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b0f      	cmp	r3, #15
 80086ba:	d006      	beq.n	80086ca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80086bc:	23ff      	movs	r3, #255	@ 0xff
 80086be:	757b      	strb	r3, [r7, #21]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80086c8:	e05e      	b.n	8008788 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	2b0f      	cmp	r3, #15
 80086ce:	d136      	bne.n	800873e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80086d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d154      	bne.n	8008788 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80086de:	7dbb      	ldrb	r3, [r7, #22]
 80086e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00d      	beq.n	8008704 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	7b5b      	ldrb	r3, [r3, #13]
 80086ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80086f0:	7dbb      	ldrb	r3, [r7, #22]
 80086f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f6:	75bb      	strb	r3, [r7, #22]
 80086f8:	7dbb      	ldrb	r3, [r7, #22]
 80086fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695a      	ldr	r2, [r3, #20]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008704:	7dba      	ldrb	r2, [r7, #22]
 8008706:	7d7b      	ldrb	r3, [r7, #21]
 8008708:	429a      	cmp	r2, r3
 800870a:	d115      	bne.n	8008738 <dir_find+0x106>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	330d      	adds	r3, #13
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	7d3a      	ldrb	r2, [r7, #20]
 8008716:	429a      	cmp	r2, r3
 8008718:	d10e      	bne.n	8008738 <dir_find+0x106>
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	4619      	mov	r1, r3
 8008724:	4610      	mov	r0, r2
 8008726:	f7ff fdfd 	bl	8008324 <cmp_lfn>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <dir_find+0x106>
 8008730:	7d7b      	ldrb	r3, [r7, #21]
 8008732:	3b01      	subs	r3, #1
 8008734:	b2db      	uxtb	r3, r3
 8008736:	e000      	b.n	800873a <dir_find+0x108>
 8008738:	23ff      	movs	r3, #255	@ 0xff
 800873a:	757b      	strb	r3, [r7, #21]
 800873c:	e024      	b.n	8008788 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800873e:	7d7b      	ldrb	r3, [r7, #21]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d109      	bne.n	8008758 <dir_find+0x126>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff ff51 	bl	80085f0 <sum_sfn>
 800874e:	4603      	mov	r3, r0
 8008750:	461a      	mov	r2, r3
 8008752:	7d3b      	ldrb	r3, [r7, #20]
 8008754:	4293      	cmp	r3, r2
 8008756:	d024      	beq.n	80087a2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10a      	bne.n	800877c <dir_find+0x14a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a18      	ldr	r0, [r3, #32]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3324      	adds	r3, #36	@ 0x24
 800876e:	220b      	movs	r2, #11
 8008770:	4619      	mov	r1, r3
 8008772:	f7fe fe20 	bl	80073b6 <mem_cmp>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d014      	beq.n	80087a6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800877c:	23ff      	movs	r3, #255	@ 0xff
 800877e:	757b      	strb	r3, [r7, #21]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f04f 32ff 	mov.w	r2, #4294967295
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008788:	2100      	movs	r1, #0
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fc6e 	bl	800806c <dir_next>
 8008790:	4603      	mov	r3, r0
 8008792:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008794:	7dfb      	ldrb	r3, [r7, #23]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f43f af65 	beq.w	8008666 <dir_find+0x34>
 800879c:	e004      	b.n	80087a8 <dir_find+0x176>
		if (res != FR_OK) break;
 800879e:	bf00      	nop
 80087a0:	e002      	b.n	80087a8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80087a6:	bf00      	nop

	return res;
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08c      	sub	sp, #48	@ 0x30
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80087c8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <dir_register+0x20>
 80087d0:	2306      	movs	r3, #6
 80087d2:	e0e0      	b.n	8008996 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80087d4:	2300      	movs	r3, #0
 80087d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80087d8:	e002      	b.n	80087e0 <dir_register+0x2c>
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	3301      	adds	r3, #1
 80087de:	627b      	str	r3, [r7, #36]	@ 0x24
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	4413      	add	r3, r2
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f4      	bne.n	80087da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80087f6:	f107 030c 	add.w	r3, r7, #12
 80087fa:	220c      	movs	r2, #12
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe fd9e 	bl	800733e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d032      	beq.n	8008872 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2240      	movs	r2, #64	@ 0x40
 8008810:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008814:	2301      	movs	r3, #1
 8008816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008818:	e016      	b.n	8008848 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	f107 010c 	add.w	r1, r7, #12
 8008828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882a:	f7ff fe53 	bl	80084d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff feff 	bl	8008632 <dir_find>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800883a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008844:	3301      	adds	r3, #1
 8008846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884a:	2b63      	cmp	r3, #99	@ 0x63
 800884c:	d9e5      	bls.n	800881a <dir_register+0x66>
 800884e:	e000      	b.n	8008852 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008850:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008854:	2b64      	cmp	r3, #100	@ 0x64
 8008856:	d101      	bne.n	800885c <dir_register+0xa8>
 8008858:	2307      	movs	r3, #7
 800885a:	e09c      	b.n	8008996 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800885c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008860:	2b04      	cmp	r3, #4
 8008862:	d002      	beq.n	800886a <dir_register+0xb6>
 8008864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008868:	e095      	b.n	8008996 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800886a:	7dfa      	ldrb	r2, [r7, #23]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <dir_register+0xd8>
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	330c      	adds	r3, #12
 8008880:	4a47      	ldr	r2, [pc, #284]	@ (80089a0 <dir_register+0x1ec>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	089b      	lsrs	r3, r3, #2
 8008888:	3301      	adds	r3, #1
 800888a:	e000      	b.n	800888e <dir_register+0xda>
 800888c:	2301      	movs	r3, #1
 800888e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008890:	6a39      	ldr	r1, [r7, #32]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff fcc0 	bl	8008218 <dir_alloc>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800889e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d148      	bne.n	8008938 <dir_register+0x184>
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	623b      	str	r3, [r7, #32]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d042      	beq.n	8008938 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695a      	ldr	r2, [r3, #20]
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	015b      	lsls	r3, r3, #5
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7ff fb4b 	bl	8007f5a <dir_sdi>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80088ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d132      	bne.n	8008938 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3324      	adds	r3, #36	@ 0x24
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fe8a 	bl	80085f0 <sum_sfn>
 80088dc:	4603      	mov	r3, r0
 80088de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	4619      	mov	r1, r3
 80088e6:	69f8      	ldr	r0, [r7, #28]
 80088e8:	f7fe ff58 	bl	800779c <move_window>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80088f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d11d      	bne.n	8008936 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	6918      	ldr	r0, [r3, #16]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a19      	ldr	r1, [r3, #32]
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	b2da      	uxtb	r2, r3
 8008906:	7efb      	ldrb	r3, [r7, #27]
 8008908:	f7ff fd7c 	bl	8008404 <put_lfn>
				fs->wflag = 1;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2201      	movs	r2, #1
 8008910:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008912:	2100      	movs	r1, #0
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff fba9 	bl	800806c <dir_next>
 800891a:	4603      	mov	r3, r0
 800891c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008920:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008924:	2b00      	cmp	r3, #0
 8008926:	d107      	bne.n	8008938 <dir_register+0x184>
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	3b01      	subs	r3, #1
 800892c:	623b      	str	r3, [r7, #32]
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1d5      	bne.n	80088e0 <dir_register+0x12c>
 8008934:	e000      	b.n	8008938 <dir_register+0x184>
				if (res != FR_OK) break;
 8008936:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800893c:	2b00      	cmp	r3, #0
 800893e:	d128      	bne.n	8008992 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	4619      	mov	r1, r3
 8008946:	69f8      	ldr	r0, [r7, #28]
 8008948:	f7fe ff28 	bl	800779c <move_window>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008956:	2b00      	cmp	r3, #0
 8008958:	d11b      	bne.n	8008992 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	2220      	movs	r2, #32
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fd0c 	bl	8007380 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a18      	ldr	r0, [r3, #32]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3324      	adds	r3, #36	@ 0x24
 8008970:	220b      	movs	r2, #11
 8008972:	4619      	mov	r1, r3
 8008974:	f7fe fce3 	bl	800733e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	330c      	adds	r3, #12
 8008984:	f002 0218 	and.w	r2, r2, #24
 8008988:	b2d2      	uxtb	r2, r2
 800898a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2201      	movs	r2, #1
 8008990:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008992:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008996:	4618      	mov	r0, r3
 8008998:	3730      	adds	r7, #48	@ 0x30
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	4ec4ec4f 	.word	0x4ec4ec4f

080089a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08a      	sub	sp, #40	@ 0x28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	2300      	movs	r3, #0
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	61ba      	str	r2, [r7, #24]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4413      	add	r3, r2
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80089d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089d4:	2b1f      	cmp	r3, #31
 80089d6:	d940      	bls.n	8008a5a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80089d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089da:	2b2f      	cmp	r3, #47	@ 0x2f
 80089dc:	d006      	beq.n	80089ec <create_name+0x48>
 80089de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80089e2:	d110      	bne.n	8008a06 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80089e4:	e002      	b.n	80089ec <create_name+0x48>
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	3301      	adds	r3, #1
 80089ea:	61bb      	str	r3, [r7, #24]
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	4413      	add	r3, r2
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80089f6:	d0f6      	beq.n	80089e6 <create_name+0x42>
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	4413      	add	r3, r2
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a02:	d0f0      	beq.n	80089e6 <create_name+0x42>
			break;
 8008a04:	e02a      	b.n	8008a5c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2bfe      	cmp	r3, #254	@ 0xfe
 8008a0a:	d901      	bls.n	8008a10 <create_name+0x6c>
 8008a0c:	2306      	movs	r3, #6
 8008a0e:	e17d      	b.n	8008d0c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008a10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008a16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a18:	2101      	movs	r1, #1
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f001 fe24 	bl	800a668 <ff_convert>
 8008a20:	4603      	mov	r3, r0
 8008a22:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008a24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <create_name+0x8a>
 8008a2a:	2306      	movs	r3, #6
 8008a2c:	e16e      	b.n	8008d0c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008a2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a30:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a32:	d809      	bhi.n	8008a48 <create_name+0xa4>
 8008a34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a36:	4619      	mov	r1, r3
 8008a38:	488d      	ldr	r0, [pc, #564]	@ (8008c70 <create_name+0x2cc>)
 8008a3a:	f7fe fce3 	bl	8007404 <chk_chr>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <create_name+0xa4>
 8008a44:	2306      	movs	r3, #6
 8008a46:	e161      	b.n	8008d0c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	617a      	str	r2, [r7, #20]
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a56:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008a58:	e7b4      	b.n	80089c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008a5a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	441a      	add	r2, r3
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008a66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a68:	2b1f      	cmp	r3, #31
 8008a6a:	d801      	bhi.n	8008a70 <create_name+0xcc>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	e000      	b.n	8008a72 <create_name+0xce>
 8008a70:	2300      	movs	r3, #0
 8008a72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008a76:	e011      	b.n	8008a9c <create_name+0xf8>
		w = lfn[di - 1];
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4413      	add	r3, r2
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d002      	beq.n	8008a96 <create_name+0xf2>
 8008a90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a94:	d106      	bne.n	8008aa4 <create_name+0x100>
		di--;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1ea      	bne.n	8008a78 <create_name+0xd4>
 8008aa2:	e000      	b.n	8008aa6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008aa4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <create_name+0x118>
 8008ab8:	2306      	movs	r3, #6
 8008aba:	e127      	b.n	8008d0c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3324      	adds	r3, #36	@ 0x24
 8008ac0:	220b      	movs	r2, #11
 8008ac2:	2120      	movs	r1, #32
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe fc5b 	bl	8007380 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008aca:	2300      	movs	r3, #0
 8008acc:	61bb      	str	r3, [r7, #24]
 8008ace:	e002      	b.n	8008ad6 <create_name+0x132>
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	61bb      	str	r3, [r7, #24]
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d0f5      	beq.n	8008ad0 <create_name+0x12c>
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	2b2e      	cmp	r3, #46	@ 0x2e
 8008af0:	d0ee      	beq.n	8008ad0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d009      	beq.n	8008b0c <create_name+0x168>
 8008af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008afc:	f043 0303 	orr.w	r3, r3, #3
 8008b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008b04:	e002      	b.n	8008b0c <create_name+0x168>
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d009      	beq.n	8008b26 <create_name+0x182>
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b24:	d1ef      	bne.n	8008b06 <create_name+0x162>

	i = b = 0; ni = 8;
 8008b26:	2300      	movs	r3, #0
 8008b28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	623b      	str	r3, [r7, #32]
 8008b30:	2308      	movs	r3, #8
 8008b32:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	61ba      	str	r2, [r7, #24]
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008b44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8090 	beq.w	8008c6c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008b4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	d006      	beq.n	8008b60 <create_name+0x1bc>
 8008b52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b54:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b56:	d10a      	bne.n	8008b6e <create_name+0x1ca>
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d006      	beq.n	8008b6e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b64:	f043 0303 	orr.w	r3, r3, #3
 8008b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b6c:	e07d      	b.n	8008c6a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008b6e:	6a3a      	ldr	r2, [r7, #32]
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d203      	bcs.n	8008b7e <create_name+0x1da>
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d123      	bne.n	8008bc6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	2b0b      	cmp	r3, #11
 8008b82:	d106      	bne.n	8008b92 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b88:	f043 0303 	orr.w	r3, r3, #3
 8008b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b90:	e075      	b.n	8008c7e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d005      	beq.n	8008ba6 <create_name+0x202>
 8008b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b9e:	f043 0303 	orr.w	r3, r3, #3
 8008ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d866      	bhi.n	8008c7c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	623b      	str	r3, [r7, #32]
 8008bb6:	230b      	movs	r3, #11
 8008bb8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008bba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008bc4:	e051      	b.n	8008c6a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008bc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bca:	d914      	bls.n	8008bf6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008bcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bce:	2100      	movs	r1, #0
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 fd49 	bl	800a668 <ff_convert>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008bda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d004      	beq.n	8008bea <create_name+0x246>
 8008be0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008be2:	3b80      	subs	r3, #128	@ 0x80
 8008be4:	4a23      	ldr	r2, [pc, #140]	@ (8008c74 <create_name+0x2d0>)
 8008be6:	5cd3      	ldrb	r3, [r2, r3]
 8008be8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008bea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bee:	f043 0302 	orr.w	r3, r3, #2
 8008bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008bf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d007      	beq.n	8008c0c <create_name+0x268>
 8008bfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bfe:	4619      	mov	r1, r3
 8008c00:	481d      	ldr	r0, [pc, #116]	@ (8008c78 <create_name+0x2d4>)
 8008c02:	f7fe fbff 	bl	8007404 <chk_chr>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d008      	beq.n	8008c1e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008c0c:	235f      	movs	r3, #95	@ 0x5f
 8008c0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c14:	f043 0303 	orr.w	r3, r3, #3
 8008c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c1c:	e01b      	b.n	8008c56 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c20:	2b40      	cmp	r3, #64	@ 0x40
 8008c22:	d909      	bls.n	8008c38 <create_name+0x294>
 8008c24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c26:	2b5a      	cmp	r3, #90	@ 0x5a
 8008c28:	d806      	bhi.n	8008c38 <create_name+0x294>
					b |= 2;
 8008c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c2e:	f043 0302 	orr.w	r3, r3, #2
 8008c32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c36:	e00e      	b.n	8008c56 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008c38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c3a:	2b60      	cmp	r3, #96	@ 0x60
 8008c3c:	d90b      	bls.n	8008c56 <create_name+0x2b2>
 8008c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c40:	2b7a      	cmp	r3, #122	@ 0x7a
 8008c42:	d808      	bhi.n	8008c56 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008c44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c48:	f043 0301 	orr.w	r3, r3, #1
 8008c4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c52:	3b20      	subs	r3, #32
 8008c54:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	623a      	str	r2, [r7, #32]
 8008c5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008c5e:	b2d1      	uxtb	r1, r2
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	460a      	mov	r2, r1
 8008c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008c6a:	e763      	b.n	8008b34 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008c6c:	bf00      	nop
 8008c6e:	e006      	b.n	8008c7e <create_name+0x2da>
 8008c70:	0800db44 	.word	0x0800db44
 8008c74:	0800dbcc 	.word	0x0800dbcc
 8008c78:	0800db50 	.word	0x0800db50
			if (si > di) break;			/* No extension */
 8008c7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008c84:	2be5      	cmp	r3, #229	@ 0xe5
 8008c86:	d103      	bne.n	8008c90 <create_name+0x2ec>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d104      	bne.n	8008ca0 <create_name+0x2fc>
 8008c96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008ca0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ca4:	f003 030c 	and.w	r3, r3, #12
 8008ca8:	2b0c      	cmp	r3, #12
 8008caa:	d005      	beq.n	8008cb8 <create_name+0x314>
 8008cac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d105      	bne.n	8008cc4 <create_name+0x320>
 8008cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cbc:	f043 0302 	orr.w	r3, r3, #2
 8008cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cc8:	f003 0302 	and.w	r3, r3, #2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d117      	bne.n	8008d00 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d105      	bne.n	8008ce8 <create_name+0x344>
 8008cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ce0:	f043 0310 	orr.w	r3, r3, #16
 8008ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cec:	f003 030c 	and.w	r3, r3, #12
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d105      	bne.n	8008d00 <create_name+0x35c>
 8008cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cf8:	f043 0308 	orr.w	r3, r3, #8
 8008cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d06:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008d0a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3728      	adds	r7, #40	@ 0x28
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008d28:	e002      	b.n	8008d30 <follow_path+0x1c>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d36:	d0f8      	beq.n	8008d2a <follow_path+0x16>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d3e:	d0f4      	beq.n	8008d2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	2200      	movs	r2, #0
 8008d44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b1f      	cmp	r3, #31
 8008d4c:	d80a      	bhi.n	8008d64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2280      	movs	r2, #128	@ 0x80
 8008d52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008d56:	2100      	movs	r1, #0
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff f8fe 	bl	8007f5a <dir_sdi>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75fb      	strb	r3, [r7, #23]
 8008d62:	e048      	b.n	8008df6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d64:	463b      	mov	r3, r7
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff fe1b 	bl	80089a4 <create_name>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d139      	bne.n	8008dec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff fc5a 	bl	8008632 <dir_find>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008d88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d12c      	bne.n	8008df0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d127      	bne.n	8008df0 <follow_path+0xdc>
 8008da0:	2305      	movs	r3, #5
 8008da2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008da4:	e024      	b.n	8008df0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d121      	bne.n	8008df4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	799b      	ldrb	r3, [r3, #6]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008dbc:	2305      	movs	r3, #5
 8008dbe:	75fb      	strb	r3, [r7, #23]
 8008dc0:	e019      	b.n	8008df6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	8992      	ldrh	r2, [r2, #12]
 8008dd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dd4:	fb00 f202 	mul.w	r2, r0, r2
 8008dd8:	1a9b      	subs	r3, r3, r2
 8008dda:	440b      	add	r3, r1
 8008ddc:	4619      	mov	r1, r3
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f7ff fa61 	bl	80082a6 <ld_clust>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008dea:	e7bb      	b.n	8008d64 <follow_path+0x50>
			if (res != FR_OK) break;
 8008dec:	bf00      	nop
 8008dee:	e002      	b.n	8008df6 <follow_path+0xe2>
				break;
 8008df0:	bf00      	nop
 8008df2:	e000      	b.n	8008df6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008df4:	bf00      	nop
			}
		}
	}

	return res;
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e08:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d031      	beq.n	8008e7a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	617b      	str	r3, [r7, #20]
 8008e1c:	e002      	b.n	8008e24 <get_ldnumber+0x24>
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	3301      	adds	r3, #1
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b1f      	cmp	r3, #31
 8008e2a:	d903      	bls.n	8008e34 <get_ldnumber+0x34>
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e32:	d1f4      	bne.n	8008e1e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e3a:	d11c      	bne.n	8008e76 <get_ldnumber+0x76>
			tp = *path;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	60fa      	str	r2, [r7, #12]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	3b30      	subs	r3, #48	@ 0x30
 8008e4c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b09      	cmp	r3, #9
 8008e52:	d80e      	bhi.n	8008e72 <get_ldnumber+0x72>
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d10a      	bne.n	8008e72 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d107      	bne.n	8008e72 <get_ldnumber+0x72>
					vol = (int)i;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	e002      	b.n	8008e7c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008e76:	2300      	movs	r3, #0
 8008e78:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008e7a:	693b      	ldr	r3, [r7, #16]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	70da      	strb	r2, [r3, #3]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7fe fc7a 	bl	800779c <move_window>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <check_fs+0x2a>
 8008eae:	2304      	movs	r3, #4
 8008eb0:	e038      	b.n	8008f24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3338      	adds	r3, #56	@ 0x38
 8008eb6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe f9bc 	bl	8007238 <ld_word>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d001      	beq.n	8008ed0 <check_fs+0x48>
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e029      	b.n	8008f24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008ed6:	2be9      	cmp	r3, #233	@ 0xe9
 8008ed8:	d009      	beq.n	8008eee <check_fs+0x66>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008ee0:	2beb      	cmp	r3, #235	@ 0xeb
 8008ee2:	d11e      	bne.n	8008f22 <check_fs+0x9a>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008eea:	2b90      	cmp	r3, #144	@ 0x90
 8008eec:	d119      	bne.n	8008f22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3338      	adds	r3, #56	@ 0x38
 8008ef2:	3336      	adds	r3, #54	@ 0x36
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe f9b8 	bl	800726a <ld_dword>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008f00:	4a0a      	ldr	r2, [pc, #40]	@ (8008f2c <check_fs+0xa4>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d101      	bne.n	8008f0a <check_fs+0x82>
 8008f06:	2300      	movs	r3, #0
 8008f08:	e00c      	b.n	8008f24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3338      	adds	r3, #56	@ 0x38
 8008f0e:	3352      	adds	r3, #82	@ 0x52
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe f9aa 	bl	800726a <ld_dword>
 8008f16:	4603      	mov	r3, r0
 8008f18:	4a05      	ldr	r2, [pc, #20]	@ (8008f30 <check_fs+0xa8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d101      	bne.n	8008f22 <check_fs+0x9a>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	e000      	b.n	8008f24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f22:	2302      	movs	r3, #2
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	00544146 	.word	0x00544146
 8008f30:	33544146 	.word	0x33544146

08008f34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b096      	sub	sp, #88	@ 0x58
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff ff59 	bl	8008e00 <get_ldnumber>
 8008f4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da01      	bge.n	8008f5a <find_volume+0x26>
 8008f56:	230b      	movs	r3, #11
 8008f58:	e265      	b.n	8009426 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f5a:	4a9f      	ldr	r2, [pc, #636]	@ (80091d8 <find_volume+0x2a4>)
 8008f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f62:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <find_volume+0x3a>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	e25b      	b.n	8009426 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	f023 0301 	bic.w	r3, r3, #1
 8008f7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d01a      	beq.n	8008fba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f86:	785b      	ldrb	r3, [r3, #1]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe f8b7 	bl	80070fc <disk_status>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008f94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10c      	bne.n	8008fba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <find_volume+0x82>
 8008fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008fb2:	230a      	movs	r3, #10
 8008fb4:	e237      	b.n	8009426 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e235      	b.n	8009426 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe f8af 	bl	8007130 <disk_initialize>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e21e      	b.n	8009426 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d007      	beq.n	8008ffe <find_volume+0xca>
 8008fee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ff2:	f003 0304 	and.w	r3, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008ffa:	230a      	movs	r3, #10
 8008ffc:	e213      	b.n	8009426 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009000:	7858      	ldrb	r0, [r3, #1]
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009004:	330c      	adds	r3, #12
 8009006:	461a      	mov	r2, r3
 8009008:	2102      	movs	r1, #2
 800900a:	f7fe f8f7 	bl	80071fc <disk_ioctl>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <find_volume+0xe4>
 8009014:	2301      	movs	r3, #1
 8009016:	e206      	b.n	8009426 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	899b      	ldrh	r3, [r3, #12]
 800901c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009020:	d80d      	bhi.n	800903e <find_volume+0x10a>
 8009022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009024:	899b      	ldrh	r3, [r3, #12]
 8009026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800902a:	d308      	bcc.n	800903e <find_volume+0x10a>
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	899b      	ldrh	r3, [r3, #12]
 8009030:	461a      	mov	r2, r3
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	899b      	ldrh	r3, [r3, #12]
 8009036:	3b01      	subs	r3, #1
 8009038:	4013      	ands	r3, r2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <find_volume+0x10e>
 800903e:	2301      	movs	r3, #1
 8009040:	e1f1      	b.n	8009426 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009046:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009048:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800904a:	f7ff ff1d 	bl	8008e88 <check_fs>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009054:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009058:	2b02      	cmp	r3, #2
 800905a:	d149      	bne.n	80090f0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800905c:	2300      	movs	r3, #0
 800905e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009060:	e01e      	b.n	80090a0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009064:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009070:	4413      	add	r3, r2
 8009072:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009076:	3304      	adds	r3, #4
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d006      	beq.n	800908c <find_volume+0x158>
 800907e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009080:	3308      	adds	r3, #8
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe f8f1 	bl	800726a <ld_dword>
 8009088:	4602      	mov	r2, r0
 800908a:	e000      	b.n	800908e <find_volume+0x15a>
 800908c:	2200      	movs	r2, #0
 800908e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	3358      	adds	r3, #88	@ 0x58
 8009094:	443b      	add	r3, r7
 8009096:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800909a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800909c:	3301      	adds	r3, #1
 800909e:	643b      	str	r3, [r7, #64]	@ 0x40
 80090a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d9dd      	bls.n	8009062 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80090a6:	2300      	movs	r3, #0
 80090a8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80090aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <find_volume+0x182>
 80090b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090b2:	3b01      	subs	r3, #1
 80090b4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80090b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	3358      	adds	r3, #88	@ 0x58
 80090bc:	443b      	add	r3, r7
 80090be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80090c2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80090c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <find_volume+0x1a2>
 80090ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80090ce:	f7ff fedb 	bl	8008e88 <check_fs>
 80090d2:	4603      	mov	r3, r0
 80090d4:	e000      	b.n	80090d8 <find_volume+0x1a4>
 80090d6:	2303      	movs	r3, #3
 80090d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80090dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d905      	bls.n	80090f0 <find_volume+0x1bc>
 80090e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090e6:	3301      	adds	r3, #1
 80090e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80090ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d9e2      	bls.n	80090b6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80090f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d101      	bne.n	80090fc <find_volume+0x1c8>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e194      	b.n	8009426 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80090fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009100:	2b01      	cmp	r3, #1
 8009102:	d901      	bls.n	8009108 <find_volume+0x1d4>
 8009104:	230d      	movs	r3, #13
 8009106:	e18e      	b.n	8009426 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910a:	3338      	adds	r3, #56	@ 0x38
 800910c:	330b      	adds	r3, #11
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe f892 	bl	8007238 <ld_word>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911a:	899b      	ldrh	r3, [r3, #12]
 800911c:	429a      	cmp	r2, r3
 800911e:	d001      	beq.n	8009124 <find_volume+0x1f0>
 8009120:	230d      	movs	r3, #13
 8009122:	e180      	b.n	8009426 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009126:	3338      	adds	r3, #56	@ 0x38
 8009128:	3316      	adds	r3, #22
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe f884 	bl	8007238 <ld_word>
 8009130:	4603      	mov	r3, r0
 8009132:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d106      	bne.n	8009148 <find_volume+0x214>
 800913a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913c:	3338      	adds	r3, #56	@ 0x38
 800913e:	3324      	adds	r3, #36	@ 0x24
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe f892 	bl	800726a <ld_dword>
 8009146:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800914c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800914e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009150:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915a:	789b      	ldrb	r3, [r3, #2]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d005      	beq.n	800916c <find_volume+0x238>
 8009160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009162:	789b      	ldrb	r3, [r3, #2]
 8009164:	2b02      	cmp	r3, #2
 8009166:	d001      	beq.n	800916c <find_volume+0x238>
 8009168:	230d      	movs	r3, #13
 800916a:	e15c      	b.n	8009426 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800916c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916e:	789b      	ldrb	r3, [r3, #2]
 8009170:	461a      	mov	r2, r3
 8009172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009174:	fb02 f303 	mul.w	r3, r2, r3
 8009178:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009180:	461a      	mov	r2, r3
 8009182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009184:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009188:	895b      	ldrh	r3, [r3, #10]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d008      	beq.n	80091a0 <find_volume+0x26c>
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	895b      	ldrh	r3, [r3, #10]
 8009192:	461a      	mov	r2, r3
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	895b      	ldrh	r3, [r3, #10]
 8009198:	3b01      	subs	r3, #1
 800919a:	4013      	ands	r3, r2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <find_volume+0x270>
 80091a0:	230d      	movs	r3, #13
 80091a2:	e140      	b.n	8009426 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a6:	3338      	adds	r3, #56	@ 0x38
 80091a8:	3311      	adds	r3, #17
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe f844 	bl	8007238 <ld_word>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80091b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ba:	891b      	ldrh	r3, [r3, #8]
 80091bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091be:	8992      	ldrh	r2, [r2, #12]
 80091c0:	0952      	lsrs	r2, r2, #5
 80091c2:	b292      	uxth	r2, r2
 80091c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80091c8:	fb01 f202 	mul.w	r2, r1, r2
 80091cc:	1a9b      	subs	r3, r3, r2
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <find_volume+0x2a8>
 80091d4:	230d      	movs	r3, #13
 80091d6:	e126      	b.n	8009426 <find_volume+0x4f2>
 80091d8:	20002524 	.word	0x20002524

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	3338      	adds	r3, #56	@ 0x38
 80091e0:	3313      	adds	r3, #19
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe f828 	bl	8007238 <ld_word>
 80091e8:	4603      	mov	r3, r0
 80091ea:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80091ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <find_volume+0x2cc>
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	3338      	adds	r3, #56	@ 0x38
 80091f6:	3320      	adds	r3, #32
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe f836 	bl	800726a <ld_dword>
 80091fe:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009202:	3338      	adds	r3, #56	@ 0x38
 8009204:	330e      	adds	r3, #14
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe f816 	bl	8007238 <ld_word>
 800920c:	4603      	mov	r3, r0
 800920e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009210:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <find_volume+0x2e6>
 8009216:	230d      	movs	r3, #13
 8009218:	e105      	b.n	8009426 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800921a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800921c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921e:	4413      	add	r3, r2
 8009220:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009222:	8911      	ldrh	r1, [r2, #8]
 8009224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009226:	8992      	ldrh	r2, [r2, #12]
 8009228:	0952      	lsrs	r2, r2, #5
 800922a:	b292      	uxth	r2, r2
 800922c:	fbb1 f2f2 	udiv	r2, r1, r2
 8009230:	b292      	uxth	r2, r2
 8009232:	4413      	add	r3, r2
 8009234:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923a:	429a      	cmp	r2, r3
 800923c:	d201      	bcs.n	8009242 <find_volume+0x30e>
 800923e:	230d      	movs	r3, #13
 8009240:	e0f1      	b.n	8009426 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800924a:	8952      	ldrh	r2, [r2, #10]
 800924c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <find_volume+0x328>
 8009258:	230d      	movs	r3, #13
 800925a:	e0e4      	b.n	8009426 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800925c:	2303      	movs	r3, #3
 800925e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009264:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009268:	4293      	cmp	r3, r2
 800926a:	d802      	bhi.n	8009272 <find_volume+0x33e>
 800926c:	2302      	movs	r3, #2
 800926e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009278:	4293      	cmp	r3, r2
 800927a:	d802      	bhi.n	8009282 <find_volume+0x34e>
 800927c:	2301      	movs	r3, #1
 800927e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	1c9a      	adds	r2, r3, #2
 8009286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009288:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800928e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009290:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009294:	441a      	add	r2, r3
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009298:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800929a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800929c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929e:	441a      	add	r2, r3
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80092a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d11e      	bne.n	80092ea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80092ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ae:	3338      	adds	r3, #56	@ 0x38
 80092b0:	332a      	adds	r3, #42	@ 0x2a
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fd ffc0 	bl	8007238 <ld_word>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <find_volume+0x38e>
 80092be:	230d      	movs	r3, #13
 80092c0:	e0b1      	b.n	8009426 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80092c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c4:	891b      	ldrh	r3, [r3, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <find_volume+0x39a>
 80092ca:	230d      	movs	r3, #13
 80092cc:	e0ab      	b.n	8009426 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80092ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d0:	3338      	adds	r3, #56	@ 0x38
 80092d2:	332c      	adds	r3, #44	@ 0x2c
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fd ffc8 	bl	800726a <ld_dword>
 80092da:	4602      	mov	r2, r0
 80092dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092de:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80092e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80092e8:	e01f      	b.n	800932a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	891b      	ldrh	r3, [r3, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <find_volume+0x3c2>
 80092f2:	230d      	movs	r3, #13
 80092f4:	e097      	b.n	8009426 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092fc:	441a      	add	r2, r3
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009302:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009306:	2b02      	cmp	r3, #2
 8009308:	d103      	bne.n	8009312 <find_volume+0x3de>
 800930a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	005b      	lsls	r3, r3, #1
 8009310:	e00a      	b.n	8009328 <find_volume+0x3f4>
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	69da      	ldr	r2, [r3, #28]
 8009316:	4613      	mov	r3, r2
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	4413      	add	r3, r2
 800931c:	085a      	lsrs	r2, r3, #1
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009328:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800932a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932c:	6a1a      	ldr	r2, [r3, #32]
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	899b      	ldrh	r3, [r3, #12]
 8009332:	4619      	mov	r1, r3
 8009334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009336:	440b      	add	r3, r1
 8009338:	3b01      	subs	r3, #1
 800933a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800933c:	8989      	ldrh	r1, [r1, #12]
 800933e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009342:	429a      	cmp	r2, r3
 8009344:	d201      	bcs.n	800934a <find_volume+0x416>
 8009346:	230d      	movs	r3, #13
 8009348:	e06d      	b.n	8009426 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800934a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934c:	f04f 32ff 	mov.w	r2, #4294967295
 8009350:	619a      	str	r2, [r3, #24]
 8009352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009354:	699a      	ldr	r2, [r3, #24]
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800935a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935c:	2280      	movs	r2, #128	@ 0x80
 800935e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009360:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009364:	2b03      	cmp	r3, #3
 8009366:	d149      	bne.n	80093fc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	3338      	adds	r3, #56	@ 0x38
 800936c:	3330      	adds	r3, #48	@ 0x30
 800936e:	4618      	mov	r0, r3
 8009370:	f7fd ff62 	bl	8007238 <ld_word>
 8009374:	4603      	mov	r3, r0
 8009376:	2b01      	cmp	r3, #1
 8009378:	d140      	bne.n	80093fc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800937a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800937c:	3301      	adds	r3, #1
 800937e:	4619      	mov	r1, r3
 8009380:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009382:	f7fe fa0b 	bl	800779c <move_window>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d137      	bne.n	80093fc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800938c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938e:	2200      	movs	r2, #0
 8009390:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009394:	3338      	adds	r3, #56	@ 0x38
 8009396:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800939a:	4618      	mov	r0, r3
 800939c:	f7fd ff4c 	bl	8007238 <ld_word>
 80093a0:	4603      	mov	r3, r0
 80093a2:	461a      	mov	r2, r3
 80093a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d127      	bne.n	80093fc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	3338      	adds	r3, #56	@ 0x38
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fd ff5a 	bl	800726a <ld_dword>
 80093b6:	4603      	mov	r3, r0
 80093b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009430 <find_volume+0x4fc>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d11e      	bne.n	80093fc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80093be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c0:	3338      	adds	r3, #56	@ 0x38
 80093c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fd ff4f 	bl	800726a <ld_dword>
 80093cc:	4603      	mov	r3, r0
 80093ce:	4a19      	ldr	r2, [pc, #100]	@ (8009434 <find_volume+0x500>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d113      	bne.n	80093fc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	3338      	adds	r3, #56	@ 0x38
 80093d8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fd ff44 	bl	800726a <ld_dword>
 80093e2:	4602      	mov	r2, r0
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	3338      	adds	r3, #56	@ 0x38
 80093ec:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fd ff3a 	bl	800726a <ld_dword>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80093fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009402:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009404:	4b0c      	ldr	r3, [pc, #48]	@ (8009438 <find_volume+0x504>)
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	3301      	adds	r3, #1
 800940a:	b29a      	uxth	r2, r3
 800940c:	4b0a      	ldr	r3, [pc, #40]	@ (8009438 <find_volume+0x504>)
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	4b09      	ldr	r3, [pc, #36]	@ (8009438 <find_volume+0x504>)
 8009412:	881a      	ldrh	r2, [r3, #0]
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941a:	4a08      	ldr	r2, [pc, #32]	@ (800943c <find_volume+0x508>)
 800941c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800941e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009420:	f7fe f954 	bl	80076cc <clear_lock>
#endif
	return FR_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3758      	adds	r7, #88	@ 0x58
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	41615252 	.word	0x41615252
 8009434:	61417272 	.word	0x61417272
 8009438:	20002528 	.word	0x20002528
 800943c:	2000254c 	.word	0x2000254c

08009440 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800944a:	2309      	movs	r3, #9
 800944c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01c      	beq.n	800948e <validate+0x4e>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d018      	beq.n	800948e <validate+0x4e>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d013      	beq.n	800948e <validate+0x4e>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	889a      	ldrh	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	88db      	ldrh	r3, [r3, #6]
 8009470:	429a      	cmp	r2, r3
 8009472:	d10c      	bne.n	800948e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	4618      	mov	r0, r3
 800947c:	f7fd fe3e 	bl	80070fc <disk_status>
 8009480:	4603      	mov	r3, r0
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <validate+0x4e>
			res = FR_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d102      	bne.n	800949a <validate+0x5a>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	e000      	b.n	800949c <validate+0x5c>
 800949a:	2300      	movs	r3, #0
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	6013      	str	r3, [r2, #0]
	return res;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80094be:	f107 0310 	add.w	r3, r7, #16
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff fc9c 	bl	8008e00 <get_ldnumber>
 80094c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da01      	bge.n	80094d4 <f_mount+0x28>
 80094d0:	230b      	movs	r3, #11
 80094d2:	e02b      	b.n	800952c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80094d4:	4a17      	ldr	r2, [pc, #92]	@ (8009534 <f_mount+0x88>)
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80094e4:	69b8      	ldr	r0, [r7, #24]
 80094e6:	f7fe f8f1 	bl	80076cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	2200      	movs	r2, #0
 80094ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	490d      	ldr	r1, [pc, #52]	@ (8009534 <f_mount+0x88>)
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <f_mount+0x66>
 800950c:	79fb      	ldrb	r3, [r7, #7]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d001      	beq.n	8009516 <f_mount+0x6a>
 8009512:	2300      	movs	r3, #0
 8009514:	e00a      	b.n	800952c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009516:	f107 010c 	add.w	r1, r7, #12
 800951a:	f107 0308 	add.w	r3, r7, #8
 800951e:	2200      	movs	r2, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff fd07 	bl	8008f34 <find_volume>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800952a:	7dfb      	ldrb	r3, [r7, #23]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3720      	adds	r7, #32
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20002524 	.word	0x20002524

08009538 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b09a      	sub	sp, #104	@ 0x68
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4613      	mov	r3, r2
 8009544:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <f_open+0x18>
 800954c:	2309      	movs	r3, #9
 800954e:	e1b7      	b.n	80098c0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009550:	79fb      	ldrb	r3, [r7, #7]
 8009552:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009556:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009558:	79fa      	ldrb	r2, [r7, #7]
 800955a:	f107 0114 	add.w	r1, r7, #20
 800955e:	f107 0308 	add.w	r3, r7, #8
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff fce6 	bl	8008f34 <find_volume>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800956e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009572:	2b00      	cmp	r3, #0
 8009574:	f040 819b 	bne.w	80098ae <f_open+0x376>
		dj.obj.fs = fs;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	f107 0318 	add.w	r3, r7, #24
 8009582:	4611      	mov	r1, r2
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff fbc5 	bl	8008d14 <follow_path>
 800958a:	4603      	mov	r3, r0
 800958c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009590:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009594:	2b00      	cmp	r3, #0
 8009596:	d118      	bne.n	80095ca <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009598:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800959c:	b25b      	sxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	da03      	bge.n	80095aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80095a2:	2306      	movs	r3, #6
 80095a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80095a8:	e00f      	b.n	80095ca <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095aa:	79fb      	ldrb	r3, [r7, #7]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	bf8c      	ite	hi
 80095b0:	2301      	movhi	r3, #1
 80095b2:	2300      	movls	r3, #0
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	f107 0318 	add.w	r3, r7, #24
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fd ff3c 	bl	800743c <chk_lock>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	f003 031c 	and.w	r3, r3, #28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d07f      	beq.n	80096d4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80095d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d017      	beq.n	800960c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80095dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	d10e      	bne.n	8009602 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80095e4:	f7fd ff86 	bl	80074f4 <enq_lock>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d006      	beq.n	80095fc <f_open+0xc4>
 80095ee:	f107 0318 	add.w	r3, r7, #24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff f8de 	bl	80087b4 <dir_register>
 80095f8:	4603      	mov	r3, r0
 80095fa:	e000      	b.n	80095fe <f_open+0xc6>
 80095fc:	2312      	movs	r3, #18
 80095fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	f043 0308 	orr.w	r3, r3, #8
 8009608:	71fb      	strb	r3, [r7, #7]
 800960a:	e010      	b.n	800962e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800960c:	7fbb      	ldrb	r3, [r7, #30]
 800960e:	f003 0311 	and.w	r3, r3, #17
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <f_open+0xe6>
					res = FR_DENIED;
 8009616:	2307      	movs	r3, #7
 8009618:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800961c:	e007      	b.n	800962e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	f003 0304 	and.w	r3, r3, #4
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <f_open+0xf6>
 8009628:	2308      	movs	r3, #8
 800962a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800962e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009632:	2b00      	cmp	r3, #0
 8009634:	d168      	bne.n	8009708 <f_open+0x1d0>
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	f003 0308 	and.w	r3, r3, #8
 800963c:	2b00      	cmp	r3, #0
 800963e:	d063      	beq.n	8009708 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009640:	f7fd fcfe 	bl	8007040 <get_fattime>
 8009644:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009648:	330e      	adds	r3, #14
 800964a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800964c:	4618      	mov	r0, r3
 800964e:	f7fd fe4a 	bl	80072e6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009654:	3316      	adds	r3, #22
 8009656:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009658:	4618      	mov	r0, r3
 800965a:	f7fd fe44 	bl	80072e6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800965e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009660:	330b      	adds	r3, #11
 8009662:	2220      	movs	r2, #32
 8009664:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe fe1a 	bl	80082a6 <ld_clust>
 8009672:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009678:	2200      	movs	r2, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fe32 	bl	80082e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	331c      	adds	r3, #28
 8009684:	2100      	movs	r1, #0
 8009686:	4618      	mov	r0, r3
 8009688:	f7fd fe2d 	bl	80072e6 <st_dword>
					fs->wflag = 1;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2201      	movs	r2, #1
 8009690:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009694:	2b00      	cmp	r3, #0
 8009696:	d037      	beq.n	8009708 <f_open+0x1d0>
						dw = fs->winsect;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800969c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800969e:	f107 0318 	add.w	r3, r7, #24
 80096a2:	2200      	movs	r2, #0
 80096a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fb22 	bl	8007cf0 <remove_chain>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80096b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d126      	bne.n	8009708 <f_open+0x1d0>
							res = move_window(fs, dw);
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe f86c 	bl	800779c <move_window>
 80096c4:	4603      	mov	r3, r0
 80096c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096ce:	3a01      	subs	r2, #1
 80096d0:	615a      	str	r2, [r3, #20]
 80096d2:	e019      	b.n	8009708 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80096d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d115      	bne.n	8009708 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80096dc:	7fbb      	ldrb	r3, [r7, #30]
 80096de:	f003 0310 	and.w	r3, r3, #16
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <f_open+0x1b6>
					res = FR_NO_FILE;
 80096e6:	2304      	movs	r3, #4
 80096e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80096ec:	e00c      	b.n	8009708 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <f_open+0x1d0>
 80096f8:	7fbb      	ldrb	r3, [r7, #30]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <f_open+0x1d0>
						res = FR_DENIED;
 8009702:	2307      	movs	r3, #7
 8009704:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009708:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800970c:	2b00      	cmp	r3, #0
 800970e:	d126      	bne.n	800975e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	f003 0308 	and.w	r3, r3, #8
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009720:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800972a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009730:	79fb      	ldrb	r3, [r7, #7]
 8009732:	2b01      	cmp	r3, #1
 8009734:	bf8c      	ite	hi
 8009736:	2301      	movhi	r3, #1
 8009738:	2300      	movls	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	f107 0318 	add.w	r3, r7, #24
 8009742:	4611      	mov	r1, r2
 8009744:	4618      	mov	r0, r3
 8009746:	f7fd fef7 	bl	8007538 <inc_lock>
 800974a:	4602      	mov	r2, r0
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <f_open+0x226>
 8009758:	2302      	movs	r3, #2
 800975a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800975e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 80a3 	bne.w	80098ae <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fd99 	bl	80082a6 <ld_clust>
 8009774:	4602      	mov	r2, r0
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800977a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977c:	331c      	adds	r3, #28
 800977e:	4618      	mov	r0, r3
 8009780:	f7fd fd73 	bl	800726a <ld_dword>
 8009784:	4602      	mov	r2, r0
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	88da      	ldrh	r2, [r3, #6]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	79fa      	ldrb	r2, [r7, #7]
 80097a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3330      	adds	r3, #48	@ 0x30
 80097ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80097be:	2100      	movs	r1, #0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd fddd 	bl	8007380 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	f003 0320 	and.w	r3, r3, #32
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d06e      	beq.n	80098ae <f_open+0x376>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d06a      	beq.n	80098ae <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	68da      	ldr	r2, [r3, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	895b      	ldrh	r3, [r3, #10]
 80097e4:	461a      	mov	r2, r3
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	899b      	ldrh	r3, [r3, #12]
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
 80097ee:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097fc:	e016      	b.n	800982c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe f887 	bl	8007916 <get_fat>
 8009808:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800980a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800980c:	2b01      	cmp	r3, #1
 800980e:	d802      	bhi.n	8009816 <f_open+0x2de>
 8009810:	2302      	movs	r3, #2
 8009812:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009816:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981c:	d102      	bne.n	8009824 <f_open+0x2ec>
 800981e:	2301      	movs	r3, #1
 8009820:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009824:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800982c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009830:	2b00      	cmp	r3, #0
 8009832:	d103      	bne.n	800983c <f_open+0x304>
 8009834:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009838:	429a      	cmp	r2, r3
 800983a:	d8e0      	bhi.n	80097fe <f_open+0x2c6>
				}
				fp->clust = clst;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009840:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009842:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009846:	2b00      	cmp	r3, #0
 8009848:	d131      	bne.n	80098ae <f_open+0x376>
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	899b      	ldrh	r3, [r3, #12]
 800984e:	461a      	mov	r2, r3
 8009850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009852:	fbb3 f1f2 	udiv	r1, r3, r2
 8009856:	fb01 f202 	mul.w	r2, r1, r2
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d026      	beq.n	80098ae <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe f837 	bl	80078d8 <clust2sect>
 800986a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800986c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d103      	bne.n	800987a <f_open+0x342>
						res = FR_INT_ERR;
 8009872:	2302      	movs	r3, #2
 8009874:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009878:	e019      	b.n	80098ae <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	899b      	ldrh	r3, [r3, #12]
 800987e:	461a      	mov	r2, r3
 8009880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009882:	fbb3 f2f2 	udiv	r2, r3, r2
 8009886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009888:	441a      	add	r2, r3
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	7858      	ldrb	r0, [r3, #1]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1a      	ldr	r2, [r3, #32]
 800989c:	2301      	movs	r3, #1
 800989e:	f7fd fc6d 	bl	800717c <disk_read>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <f_open+0x376>
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80098ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d002      	beq.n	80098bc <f_open+0x384>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80098bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3768      	adds	r7, #104	@ 0x68
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08e      	sub	sp, #56	@ 0x38
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f107 0214 	add.w	r2, r7, #20
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff fda9 	bl	8009440 <validate>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80098f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d107      	bne.n	800990c <f_read+0x44>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	7d5b      	ldrb	r3, [r3, #21]
 8009900:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009904:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <f_read+0x4a>
 800990c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009910:	e135      	b.n	8009b7e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	7d1b      	ldrb	r3, [r3, #20]
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <f_read+0x5a>
 800991e:	2307      	movs	r3, #7
 8009920:	e12d      	b.n	8009b7e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	429a      	cmp	r2, r3
 8009934:	f240 811e 	bls.w	8009b74 <f_read+0x2ac>
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800993c:	e11a      	b.n	8009b74 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	8992      	ldrh	r2, [r2, #12]
 8009946:	fbb3 f1f2 	udiv	r1, r3, r2
 800994a:	fb01 f202 	mul.w	r2, r1, r2
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	2b00      	cmp	r3, #0
 8009952:	f040 80d5 	bne.w	8009b00 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	8992      	ldrh	r2, [r2, #12]
 800995e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	8952      	ldrh	r2, [r2, #10]
 8009966:	3a01      	subs	r2, #1
 8009968:	4013      	ands	r3, r2
 800996a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d12f      	bne.n	80099d2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d103      	bne.n	8009982 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009980:	e013      	b.n	80099aa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009986:	2b00      	cmp	r3, #0
 8009988:	d007      	beq.n	800999a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	4619      	mov	r1, r3
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f7fe faaa 	bl	8007eea <clmt_clust>
 8009996:	6338      	str	r0, [r7, #48]	@ 0x30
 8009998:	e007      	b.n	80099aa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	4619      	mov	r1, r3
 80099a2:	4610      	mov	r0, r2
 80099a4:	f7fd ffb7 	bl	8007916 <get_fat>
 80099a8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d804      	bhi.n	80099ba <f_read+0xf2>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2202      	movs	r2, #2
 80099b4:	755a      	strb	r2, [r3, #21]
 80099b6:	2302      	movs	r3, #2
 80099b8:	e0e1      	b.n	8009b7e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80099ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c0:	d104      	bne.n	80099cc <f_read+0x104>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	755a      	strb	r2, [r3, #21]
 80099c8:	2301      	movs	r3, #1
 80099ca:	e0d8      	b.n	8009b7e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	4619      	mov	r1, r3
 80099da:	4610      	mov	r0, r2
 80099dc:	f7fd ff7c 	bl	80078d8 <clust2sect>
 80099e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <f_read+0x12a>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2202      	movs	r2, #2
 80099ec:	755a      	strb	r2, [r3, #21]
 80099ee:	2302      	movs	r3, #2
 80099f0:	e0c5      	b.n	8009b7e <f_read+0x2b6>
			sect += csect;
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	4413      	add	r3, r2
 80099f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	899b      	ldrh	r3, [r3, #12]
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a06:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d041      	beq.n	8009a92 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a12:	4413      	add	r3, r2
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	8952      	ldrh	r2, [r2, #10]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d905      	bls.n	8009a28 <f_read+0x160>
					cc = fs->csize - csect;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	895b      	ldrh	r3, [r3, #10]
 8009a20:	461a      	mov	r2, r3
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	7858      	ldrb	r0, [r3, #1]
 8009a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a32:	f7fd fba3 	bl	800717c <disk_read>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d004      	beq.n	8009a46 <f_read+0x17e>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	755a      	strb	r2, [r3, #21]
 8009a42:	2301      	movs	r3, #1
 8009a44:	e09b      	b.n	8009b7e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	7d1b      	ldrb	r3, [r3, #20]
 8009a4a:	b25b      	sxtb	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	da18      	bge.n	8009a82 <f_read+0x1ba>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a1a      	ldr	r2, [r3, #32]
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d911      	bls.n	8009a82 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a1a      	ldr	r2, [r3, #32]
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	8992      	ldrh	r2, [r2, #12]
 8009a6a:	fb02 f303 	mul.w	r3, r2, r3
 8009a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a70:	18d0      	adds	r0, r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	899b      	ldrh	r3, [r3, #12]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f7fd fc5e 	bl	800733e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	899b      	ldrh	r3, [r3, #12]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009a90:	e05c      	b.n	8009b4c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d02e      	beq.n	8009afa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	7d1b      	ldrb	r3, [r3, #20]
 8009aa0:	b25b      	sxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	da18      	bge.n	8009ad8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	7858      	ldrb	r0, [r3, #1]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6a1a      	ldr	r2, [r3, #32]
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f7fd fb81 	bl	80071bc <disk_write>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d004      	beq.n	8009aca <f_read+0x202>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	755a      	strb	r2, [r3, #21]
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e059      	b.n	8009b7e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	7d1b      	ldrb	r3, [r3, #20]
 8009ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	7858      	ldrb	r0, [r3, #1]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	69ba      	ldr	r2, [r7, #24]
 8009ae6:	f7fd fb49 	bl	800717c <disk_read>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <f_read+0x232>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2201      	movs	r2, #1
 8009af4:	755a      	strb	r2, [r3, #21]
 8009af6:	2301      	movs	r3, #1
 8009af8:	e041      	b.n	8009b7e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	899b      	ldrh	r3, [r3, #12]
 8009b04:	4618      	mov	r0, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	8992      	ldrh	r2, [r2, #12]
 8009b0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b12:	fb01 f202 	mul.w	r2, r1, r2
 8009b16:	1a9b      	subs	r3, r3, r2
 8009b18:	1ac3      	subs	r3, r0, r3
 8009b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009b1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d901      	bls.n	8009b28 <f_read+0x260>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	8992      	ldrh	r2, [r2, #12]
 8009b36:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b3a:	fb00 f202 	mul.w	r2, r0, r2
 8009b3e:	1a9b      	subs	r3, r3, r2
 8009b40:	440b      	add	r3, r1
 8009b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b44:	4619      	mov	r1, r3
 8009b46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b48:	f7fd fbf9 	bl	800733e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b50:	4413      	add	r3, r2
 8009b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5a:	441a      	add	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	619a      	str	r2, [r3, #24]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b66:	441a      	add	r2, r3
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f47f aee1 	bne.w	800993e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3738      	adds	r7, #56	@ 0x38
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b08c      	sub	sp, #48	@ 0x30
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f107 0210 	add.w	r2, r7, #16
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff fc4a 	bl	8009440 <validate>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d107      	bne.n	8009bca <f_write+0x44>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	7d5b      	ldrb	r3, [r3, #21]
 8009bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <f_write+0x4a>
 8009bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bce:	e16a      	b.n	8009ea6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	7d1b      	ldrb	r3, [r3, #20]
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <f_write+0x5a>
 8009bdc:	2307      	movs	r3, #7
 8009bde:	e162      	b.n	8009ea6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	699a      	ldr	r2, [r3, #24]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	441a      	add	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	f080 814c 	bcs.w	8009e8a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	43db      	mvns	r3, r3
 8009bf8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009bfa:	e146      	b.n	8009e8a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	8992      	ldrh	r2, [r2, #12]
 8009c04:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c08:	fb01 f202 	mul.w	r2, r1, r2
 8009c0c:	1a9b      	subs	r3, r3, r2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f040 80f1 	bne.w	8009df6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	8992      	ldrh	r2, [r2, #12]
 8009c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	8952      	ldrh	r2, [r2, #10]
 8009c24:	3a01      	subs	r2, #1
 8009c26:	4013      	ands	r3, r2
 8009c28:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d143      	bne.n	8009cb8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10c      	bne.n	8009c52 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d11a      	bne.n	8009c7a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2100      	movs	r1, #0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe f8b6 	bl	8007dba <create_chain>
 8009c4e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009c50:	e013      	b.n	8009c7a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7fe f942 	bl	8007eea <clmt_clust>
 8009c66:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009c68:	e007      	b.n	8009c7a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	4619      	mov	r1, r3
 8009c72:	4610      	mov	r0, r2
 8009c74:	f7fe f8a1 	bl	8007dba <create_chain>
 8009c78:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 8109 	beq.w	8009e94 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d104      	bne.n	8009c92 <f_write+0x10c>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	755a      	strb	r2, [r3, #21]
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e109      	b.n	8009ea6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c98:	d104      	bne.n	8009ca4 <f_write+0x11e>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	755a      	strb	r2, [r3, #21]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e100      	b.n	8009ea6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ca8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d102      	bne.n	8009cb8 <f_write+0x132>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cb6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	7d1b      	ldrb	r3, [r3, #20]
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da18      	bge.n	8009cf4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	7858      	ldrb	r0, [r3, #1]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6a1a      	ldr	r2, [r3, #32]
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f7fd fa73 	bl	80071bc <disk_write>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d004      	beq.n	8009ce6 <f_write+0x160>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	755a      	strb	r2, [r3, #21]
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e0df      	b.n	8009ea6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	7d1b      	ldrb	r3, [r3, #20]
 8009cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	f7fd fdeb 	bl	80078d8 <clust2sect>
 8009d02:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d104      	bne.n	8009d14 <f_write+0x18e>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	755a      	strb	r2, [r3, #21]
 8009d10:	2302      	movs	r3, #2
 8009d12:	e0c8      	b.n	8009ea6 <f_write+0x320>
			sect += csect;
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	4413      	add	r3, r2
 8009d1a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	899b      	ldrh	r3, [r3, #12]
 8009d20:	461a      	mov	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d28:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d043      	beq.n	8009db8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	4413      	add	r3, r2
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	8952      	ldrh	r2, [r2, #10]
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d905      	bls.n	8009d4a <f_write+0x1c4>
					cc = fs->csize - csect;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	895b      	ldrh	r3, [r3, #10]
 8009d42:	461a      	mov	r2, r3
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	7858      	ldrb	r0, [r3, #1]
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	69f9      	ldr	r1, [r7, #28]
 8009d54:	f7fd fa32 	bl	80071bc <disk_write>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <f_write+0x1e2>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2201      	movs	r2, #1
 8009d62:	755a      	strb	r2, [r3, #21]
 8009d64:	2301      	movs	r3, #1
 8009d66:	e09e      	b.n	8009ea6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a1a      	ldr	r2, [r3, #32]
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	6a3a      	ldr	r2, [r7, #32]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d918      	bls.n	8009da8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6a1a      	ldr	r2, [r3, #32]
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	8992      	ldrh	r2, [r2, #12]
 8009d88:	fb02 f303 	mul.w	r3, r2, r3
 8009d8c:	69fa      	ldr	r2, [r7, #28]
 8009d8e:	18d1      	adds	r1, r2, r3
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	899b      	ldrh	r3, [r3, #12]
 8009d94:	461a      	mov	r2, r3
 8009d96:	f7fd fad2 	bl	800733e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	7d1b      	ldrb	r3, [r3, #20]
 8009d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	899b      	ldrh	r3, [r3, #12]
 8009dac:	461a      	mov	r2, r3
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	fb02 f303 	mul.w	r3, r2, r3
 8009db4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009db6:	e04b      	b.n	8009e50 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	697a      	ldr	r2, [r7, #20]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d016      	beq.n	8009df0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d210      	bcs.n	8009df0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	7858      	ldrb	r0, [r3, #1]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009dd8:	2301      	movs	r3, #1
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	f7fd f9ce 	bl	800717c <disk_read>
 8009de0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d004      	beq.n	8009df0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2201      	movs	r2, #1
 8009dea:	755a      	strb	r2, [r3, #21]
 8009dec:	2301      	movs	r3, #1
 8009dee:	e05a      	b.n	8009ea6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	899b      	ldrh	r3, [r3, #12]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	8992      	ldrh	r2, [r2, #12]
 8009e04:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e08:	fb01 f202 	mul.w	r2, r1, r2
 8009e0c:	1a9b      	subs	r3, r3, r2
 8009e0e:	1ac3      	subs	r3, r0, r3
 8009e10:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d901      	bls.n	8009e1e <f_write+0x298>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	8992      	ldrh	r2, [r2, #12]
 8009e2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e30:	fb00 f202 	mul.w	r2, r0, r2
 8009e34:	1a9b      	subs	r3, r3, r2
 8009e36:	440b      	add	r3, r1
 8009e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e3a:	69f9      	ldr	r1, [r7, #28]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fd fa7e 	bl	800733e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	7d1b      	ldrb	r3, [r3, #20]
 8009e46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009e50:	69fa      	ldr	r2, [r7, #28]
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	4413      	add	r3, r2
 8009e56:	61fb      	str	r3, [r7, #28]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	699a      	ldr	r2, [r3, #24]
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	441a      	add	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	619a      	str	r2, [r3, #24]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	bf38      	it	cc
 8009e70:	461a      	movcc	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	60da      	str	r2, [r3, #12]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7c:	441a      	add	r2, r3
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f47f aeb5 	bne.w	8009bfc <f_write+0x76>
 8009e92:	e000      	b.n	8009e96 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009e94:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	7d1b      	ldrb	r3, [r3, #20]
 8009e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3730      	adds	r7, #48	@ 0x30
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b086      	sub	sp, #24
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f107 0208 	add.w	r2, r7, #8
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff fabe 	bl	8009440 <validate>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d168      	bne.n	8009fa0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	7d1b      	ldrb	r3, [r3, #20]
 8009ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d062      	beq.n	8009fa0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	7d1b      	ldrb	r3, [r3, #20]
 8009ede:	b25b      	sxtb	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	da15      	bge.n	8009f10 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	7858      	ldrb	r0, [r3, #1]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1a      	ldr	r2, [r3, #32]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f7fd f962 	bl	80071bc <disk_write>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <f_sync+0x54>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e04f      	b.n	8009fa2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7d1b      	ldrb	r3, [r3, #20]
 8009f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009f10:	f7fd f896 	bl	8007040 <get_fattime>
 8009f14:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f7fd fc3c 	bl	800779c <move_window>
 8009f24:	4603      	mov	r3, r0
 8009f26:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d138      	bne.n	8009fa0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	330b      	adds	r3, #11
 8009f38:	781a      	ldrb	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	330b      	adds	r3, #11
 8009f3e:	f042 0220 	orr.w	r2, r2, #32
 8009f42:	b2d2      	uxtb	r2, r2
 8009f44:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	68f9      	ldr	r1, [r7, #12]
 8009f52:	f7fe f9c7 	bl	80082e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f103 021c 	add.w	r2, r3, #28
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7fd f9bf 	bl	80072e6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3316      	adds	r3, #22
 8009f6c:	6939      	ldr	r1, [r7, #16]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fd f9b9 	bl	80072e6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3312      	adds	r3, #18
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fd f998 	bl	80072b0 <st_word>
					fs->wflag = 1;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2201      	movs	r2, #1
 8009f84:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fd fc35 	bl	80077f8 <sync_fs>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	7d1b      	ldrb	r3, [r3, #20]
 8009f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff ff7b 	bl	8009eae <f_sync>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d118      	bne.n	8009ff4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f107 0208 	add.w	r2, r7, #8
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7ff fa38 	bl	8009440 <validate>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10c      	bne.n	8009ff4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fd fb38 	bl	8007654 <dec_lock>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d102      	bne.n	8009ff4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b090      	sub	sp, #64	@ 0x40
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f107 0208 	add.w	r2, r7, #8
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff fa15 	bl	8009440 <validate>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a01c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a020:	2b00      	cmp	r3, #0
 800a022:	d103      	bne.n	800a02c <f_lseek+0x2e>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	7d5b      	ldrb	r3, [r3, #21]
 800a028:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a02c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <f_lseek+0x3c>
 800a034:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a038:	e201      	b.n	800a43e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 80d9 	beq.w	800a1f6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04a:	d15a      	bne.n	800a102 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a054:	1d1a      	adds	r2, r3, #4
 800a056:	627a      	str	r2, [r7, #36]	@ 0x24
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	2302      	movs	r3, #2
 800a05e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d03a      	beq.n	800a0e2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06e:	613b      	str	r3, [r7, #16]
 800a070:	2300      	movs	r3, #0
 800a072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a076:	3302      	adds	r3, #2
 800a078:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a080:	3301      	adds	r3, #1
 800a082:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fd fc44 	bl	8007916 <get_fat>
 800a08e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	2b01      	cmp	r3, #1
 800a094:	d804      	bhi.n	800a0a0 <f_lseek+0xa2>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2202      	movs	r2, #2
 800a09a:	755a      	strb	r2, [r3, #21]
 800a09c:	2302      	movs	r3, #2
 800a09e:	e1ce      	b.n	800a43e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a6:	d104      	bne.n	800a0b2 <f_lseek+0xb4>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	755a      	strb	r2, [r3, #21]
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e1c5      	b.n	800a43e <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d0de      	beq.n	800a07a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a0bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d809      	bhi.n	800a0d8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	1d1a      	adds	r2, r3, #4
 800a0d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d3c4      	bcc.n	800a06c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a0ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d803      	bhi.n	800a0fa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	e19f      	b.n	800a43a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a0fa:	2311      	movs	r3, #17
 800a0fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a100:	e19b      	b.n	800a43a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d902      	bls.n	800a112 <f_lseek+0x114>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 818d 	beq.w	800a43a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	4619      	mov	r1, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7fd fedf 	bl	8007eea <clmt_clust>
 800a12c:	4602      	mov	r2, r0
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	4619      	mov	r1, r3
 800a13a:	4610      	mov	r0, r2
 800a13c:	f7fd fbcc 	bl	80078d8 <clust2sect>
 800a140:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <f_lseek+0x154>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	755a      	strb	r2, [r3, #21]
 800a14e:	2302      	movs	r3, #2
 800a150:	e175      	b.n	800a43e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	3b01      	subs	r3, #1
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	8992      	ldrh	r2, [r2, #12]
 800a15a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	8952      	ldrh	r2, [r2, #10]
 800a162:	3a01      	subs	r2, #1
 800a164:	4013      	ands	r3, r2
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	4413      	add	r3, r2
 800a16a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	8992      	ldrh	r2, [r2, #12]
 800a174:	fbb3 f1f2 	udiv	r1, r3, r2
 800a178:	fb01 f202 	mul.w	r2, r1, r2
 800a17c:	1a9b      	subs	r3, r3, r2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 815b 	beq.w	800a43a <f_lseek+0x43c>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	f000 8155 	beq.w	800a43a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7d1b      	ldrb	r3, [r3, #20]
 800a194:	b25b      	sxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	da18      	bge.n	800a1cc <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	7858      	ldrb	r0, [r3, #1]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1a      	ldr	r2, [r3, #32]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	f7fd f807 	bl	80071bc <disk_write>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d004      	beq.n	800a1be <f_lseek+0x1c0>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	755a      	strb	r2, [r3, #21]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e13f      	b.n	800a43e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	7d1b      	ldrb	r3, [r3, #20]
 800a1c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	7858      	ldrb	r0, [r3, #1]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	f7fc ffcf 	bl	800717c <disk_read>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d004      	beq.n	800a1ee <f_lseek+0x1f0>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	755a      	strb	r2, [r3, #21]
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e127      	b.n	800a43e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	621a      	str	r2, [r3, #32]
 800a1f4:	e121      	b.n	800a43a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d908      	bls.n	800a212 <f_lseek+0x214>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7d1b      	ldrb	r3, [r3, #20]
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a220:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 80b5 	beq.w	800a394 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	895b      	ldrh	r3, [r3, #10]
 800a22e:	461a      	mov	r2, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	899b      	ldrh	r3, [r3, #12]
 800a234:	fb02 f303 	mul.w	r3, r2, r3
 800a238:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01b      	beq.n	800a278 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	1e5a      	subs	r2, r3, #1
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	fbb2 f2f3 	udiv	r2, r2, r3
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	1e59      	subs	r1, r3, #1
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a254:	429a      	cmp	r2, r3
 800a256:	d30f      	bcc.n	800a278 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	1e5a      	subs	r2, r3, #1
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	425b      	negs	r3, r3
 800a260:	401a      	ands	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a276:	e022      	b.n	800a2be <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a280:	2b00      	cmp	r3, #0
 800a282:	d119      	bne.n	800a2b8 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fd fd96 	bl	8007dba <create_chain>
 800a28e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	2b01      	cmp	r3, #1
 800a294:	d104      	bne.n	800a2a0 <f_lseek+0x2a2>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2202      	movs	r2, #2
 800a29a:	755a      	strb	r2, [r3, #21]
 800a29c:	2302      	movs	r3, #2
 800a29e:	e0ce      	b.n	800a43e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a6:	d104      	bne.n	800a2b2 <f_lseek+0x2b4>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	755a      	strb	r2, [r3, #21]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e0c5      	b.n	800a43e <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2b6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2bc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d067      	beq.n	800a394 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a2c4:	e03a      	b.n	800a33c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	699a      	ldr	r2, [r3, #24]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	441a      	add	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	7d1b      	ldrb	r3, [r3, #20]
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00b      	beq.n	800a2fe <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fd fd65 	bl	8007dba <create_chain>
 800a2f0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d108      	bne.n	800a30a <f_lseek+0x30c>
							ofs = 0; break;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	603b      	str	r3, [r7, #0]
 800a2fc:	e022      	b.n	800a344 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd fb07 	bl	8007916 <get_fat>
 800a308:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a310:	d104      	bne.n	800a31c <f_lseek+0x31e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	755a      	strb	r2, [r3, #21]
 800a318:	2301      	movs	r3, #1
 800a31a:	e090      	b.n	800a43e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d904      	bls.n	800a32c <f_lseek+0x32e>
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a328:	429a      	cmp	r2, r3
 800a32a:	d304      	bcc.n	800a336 <f_lseek+0x338>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2202      	movs	r2, #2
 800a330:	755a      	strb	r2, [r3, #21]
 800a332:	2302      	movs	r3, #2
 800a334:	e083      	b.n	800a43e <f_lseek+0x440>
					fp->clust = clst;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a33a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	429a      	cmp	r2, r3
 800a342:	d8c0      	bhi.n	800a2c6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699a      	ldr	r2, [r3, #24]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	441a      	add	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	899b      	ldrh	r3, [r3, #12]
 800a354:	461a      	mov	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	fbb3 f1f2 	udiv	r1, r3, r2
 800a35c:	fb01 f202 	mul.w	r2, r1, r2
 800a360:	1a9b      	subs	r3, r3, r2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d016      	beq.n	800a394 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fd fab4 	bl	80078d8 <clust2sect>
 800a370:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a374:	2b00      	cmp	r3, #0
 800a376:	d104      	bne.n	800a382 <f_lseek+0x384>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	755a      	strb	r2, [r3, #21]
 800a37e:	2302      	movs	r3, #2
 800a380:	e05d      	b.n	800a43e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	899b      	ldrh	r3, [r3, #12]
 800a386:	461a      	mov	r2, r3
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a38e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a390:	4413      	add	r3, r2
 800a392:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	699a      	ldr	r2, [r3, #24]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d90a      	bls.n	800a3b6 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7d1b      	ldrb	r3, [r3, #20]
 800a3ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	8992      	ldrh	r2, [r2, #12]
 800a3be:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3c2:	fb01 f202 	mul.w	r2, r1, r2
 800a3c6:	1a9b      	subs	r3, r3, r2
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d036      	beq.n	800a43a <f_lseek+0x43c>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d031      	beq.n	800a43a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	7d1b      	ldrb	r3, [r3, #20]
 800a3da:	b25b      	sxtb	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	da18      	bge.n	800a412 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	7858      	ldrb	r0, [r3, #1]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1a      	ldr	r2, [r3, #32]
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	f7fc fee4 	bl	80071bc <disk_write>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <f_lseek+0x406>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	755a      	strb	r2, [r3, #21]
 800a400:	2301      	movs	r3, #1
 800a402:	e01c      	b.n	800a43e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	7d1b      	ldrb	r3, [r3, #20]
 800a408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	7858      	ldrb	r0, [r3, #1]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a41c:	2301      	movs	r3, #1
 800a41e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a420:	f7fc feac 	bl	800717c <disk_read>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d004      	beq.n	800a434 <f_lseek+0x436>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	755a      	strb	r2, [r3, #21]
 800a430:	2301      	movs	r3, #1
 800a432:	e004      	b.n	800a43e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a438:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a43a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3740      	adds	r7, #64	@ 0x40
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b092      	sub	sp, #72	@ 0x48
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a452:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a456:	f107 030c 	add.w	r3, r7, #12
 800a45a:	2200      	movs	r2, #0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fd69 	bl	8008f34 <find_volume>
 800a462:	4603      	mov	r3, r0
 800a464:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800a468:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f040 8099 	bne.w	800a5a4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	699a      	ldr	r2, [r3, #24]
 800a47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47e:	69db      	ldr	r3, [r3, #28]
 800a480:	3b02      	subs	r3, #2
 800a482:	429a      	cmp	r2, r3
 800a484:	d804      	bhi.n	800a490 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a488:	699a      	ldr	r2, [r3, #24]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e089      	b.n	800a5a4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d128      	bne.n	800a4ee <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a49c:	2302      	movs	r3, #2
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a4a4:	f107 0314 	add.w	r3, r7, #20
 800a4a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fd fa33 	bl	8007916 <get_fat>
 800a4b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b8:	d103      	bne.n	800a4c2 <f_getfree+0x7c>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a4c0:	e063      	b.n	800a58a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d103      	bne.n	800a4d0 <f_getfree+0x8a>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a4ce:	e05c      	b.n	800a58a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d102      	bne.n	800a4dc <f_getfree+0x96>
 800a4d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4d8:	3301      	adds	r3, #1
 800a4da:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4de:	3301      	adds	r3, #1
 800a4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d3db      	bcc.n	800a4a4 <f_getfree+0x5e>
 800a4ec:	e04d      	b.n	800a58a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f8:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4fe:	2300      	movs	r3, #0
 800a500:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a504:	2b00      	cmp	r3, #0
 800a506:	d113      	bne.n	800a530 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a510:	4619      	mov	r1, r3
 800a512:	f7fd f943 	bl	800779c <move_window>
 800a516:	4603      	mov	r3, r0
 800a518:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800a51c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a520:	2b00      	cmp	r3, #0
 800a522:	d131      	bne.n	800a588 <f_getfree+0x142>
							p = fs->win;
 800a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a526:	3338      	adds	r3, #56	@ 0x38
 800a528:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52c:	899b      	ldrh	r3, [r3, #12]
 800a52e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2b02      	cmp	r3, #2
 800a536:	d10f      	bne.n	800a558 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a53a:	f7fc fe7d 	bl	8007238 <ld_word>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d102      	bne.n	800a54a <f_getfree+0x104>
 800a544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a546:	3301      	adds	r3, #1
 800a548:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54c:	3302      	adds	r3, #2
 800a54e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a552:	3b02      	subs	r3, #2
 800a554:	637b      	str	r3, [r7, #52]	@ 0x34
 800a556:	e010      	b.n	800a57a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a55a:	f7fc fe86 	bl	800726a <ld_dword>
 800a55e:	4603      	mov	r3, r0
 800a560:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d102      	bne.n	800a56e <f_getfree+0x128>
 800a568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a56a:	3301      	adds	r3, #1
 800a56c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a570:	3304      	adds	r3, #4
 800a572:	633b      	str	r3, [r7, #48]	@ 0x30
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	3b04      	subs	r3, #4
 800a578:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a57c:	3b01      	subs	r3, #1
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1bd      	bne.n	800a502 <f_getfree+0xbc>
 800a586:	e000      	b.n	800a58a <f_getfree+0x144>
							if (res != FR_OK) break;
 800a588:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a58e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a592:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a594:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a598:	791a      	ldrb	r2, [r3, #4]
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	f042 0201 	orr.w	r2, r2, #1
 800a5a0:	b2d2      	uxtb	r2, r2
 800a5a2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a5a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3748      	adds	r7, #72	@ 0x48
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a5c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a5c8:	7a5b      	ldrb	r3, [r3, #9]
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d131      	bne.n	800a634 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a5d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a5d2:	7a5b      	ldrb	r3, [r3, #9]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a5da:	2100      	movs	r1, #0
 800a5dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a5de:	4b19      	ldr	r3, [pc, #100]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a5e0:	7a5b      	ldrb	r3, [r3, #9]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	4a17      	ldr	r2, [pc, #92]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a5ee:	4b15      	ldr	r3, [pc, #84]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a5f0:	7a5b      	ldrb	r3, [r3, #9]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4b13      	ldr	r3, [pc, #76]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a5f8:	4413      	add	r3, r2
 800a5fa:	79fa      	ldrb	r2, [r7, #7]
 800a5fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a5fe:	4b11      	ldr	r3, [pc, #68]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a600:	7a5b      	ldrb	r3, [r3, #9]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	b2d1      	uxtb	r1, r2
 800a608:	4a0e      	ldr	r2, [pc, #56]	@ (800a644 <FATFS_LinkDriverEx+0x94>)
 800a60a:	7251      	strb	r1, [r2, #9]
 800a60c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a60e:	7dbb      	ldrb	r3, [r7, #22]
 800a610:	3330      	adds	r3, #48	@ 0x30
 800a612:	b2da      	uxtb	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	3301      	adds	r3, #1
 800a61c:	223a      	movs	r2, #58	@ 0x3a
 800a61e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	3302      	adds	r3, #2
 800a624:	222f      	movs	r2, #47	@ 0x2f
 800a626:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	3303      	adds	r3, #3
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a634:	7dfb      	ldrb	r3, [r7, #23]
}
 800a636:	4618      	mov	r0, r3
 800a638:	371c      	adds	r7, #28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	2000274c 	.word	0x2000274c

0800a648 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a652:	2200      	movs	r2, #0
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7ff ffaa 	bl	800a5b0 <FATFS_LinkDriverEx>
 800a65c:	4603      	mov	r3, r0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	6039      	str	r1, [r7, #0]
 800a672:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	2b7f      	cmp	r3, #127	@ 0x7f
 800a678:	d802      	bhi.n	800a680 <ff_convert+0x18>
		c = chr;
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	81fb      	strh	r3, [r7, #14]
 800a67e:	e025      	b.n	800a6cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00b      	beq.n	800a69e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	2bff      	cmp	r3, #255	@ 0xff
 800a68a:	d805      	bhi.n	800a698 <ff_convert+0x30>
 800a68c:	88fb      	ldrh	r3, [r7, #6]
 800a68e:	3b80      	subs	r3, #128	@ 0x80
 800a690:	4a12      	ldr	r2, [pc, #72]	@ (800a6dc <ff_convert+0x74>)
 800a692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a696:	e000      	b.n	800a69a <ff_convert+0x32>
 800a698:	2300      	movs	r3, #0
 800a69a:	81fb      	strh	r3, [r7, #14]
 800a69c:	e016      	b.n	800a6cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a69e:	2300      	movs	r3, #0
 800a6a0:	81fb      	strh	r3, [r7, #14]
 800a6a2:	e009      	b.n	800a6b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a6a4:	89fb      	ldrh	r3, [r7, #14]
 800a6a6:	4a0d      	ldr	r2, [pc, #52]	@ (800a6dc <ff_convert+0x74>)
 800a6a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ac:	88fa      	ldrh	r2, [r7, #6]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d006      	beq.n	800a6c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a6b2:	89fb      	ldrh	r3, [r7, #14]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	81fb      	strh	r3, [r7, #14]
 800a6b8:	89fb      	ldrh	r3, [r7, #14]
 800a6ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6bc:	d9f2      	bls.n	800a6a4 <ff_convert+0x3c>
 800a6be:	e000      	b.n	800a6c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a6c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a6c2:	89fb      	ldrh	r3, [r7, #14]
 800a6c4:	3380      	adds	r3, #128	@ 0x80
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a6cc:	89fb      	ldrh	r3, [r7, #14]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	0800dc5c 	.word	0x0800dc5c

0800a6e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
 800a6ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6f0:	d201      	bcs.n	800a6f6 <ff_wtoupper+0x16>
 800a6f2:	4b3e      	ldr	r3, [pc, #248]	@ (800a7ec <ff_wtoupper+0x10c>)
 800a6f4:	e000      	b.n	800a6f8 <ff_wtoupper+0x18>
 800a6f6:	4b3e      	ldr	r3, [pc, #248]	@ (800a7f0 <ff_wtoupper+0x110>)
 800a6f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	1c9a      	adds	r2, r3, #2
 800a6fe:	617a      	str	r2, [r7, #20]
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a704:	8a7b      	ldrh	r3, [r7, #18]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d068      	beq.n	800a7dc <ff_wtoupper+0xfc>
 800a70a:	88fa      	ldrh	r2, [r7, #6]
 800a70c:	8a7b      	ldrh	r3, [r7, #18]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d364      	bcc.n	800a7dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	1c9a      	adds	r2, r3, #2
 800a716:	617a      	str	r2, [r7, #20]
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	823b      	strh	r3, [r7, #16]
 800a71c:	8a3b      	ldrh	r3, [r7, #16]
 800a71e:	0a1b      	lsrs	r3, r3, #8
 800a720:	81fb      	strh	r3, [r7, #14]
 800a722:	8a3b      	ldrh	r3, [r7, #16]
 800a724:	b2db      	uxtb	r3, r3
 800a726:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a728:	88fa      	ldrh	r2, [r7, #6]
 800a72a:	8a79      	ldrh	r1, [r7, #18]
 800a72c:	8a3b      	ldrh	r3, [r7, #16]
 800a72e:	440b      	add	r3, r1
 800a730:	429a      	cmp	r2, r3
 800a732:	da49      	bge.n	800a7c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a734:	89fb      	ldrh	r3, [r7, #14]
 800a736:	2b08      	cmp	r3, #8
 800a738:	d84f      	bhi.n	800a7da <ff_wtoupper+0xfa>
 800a73a:	a201      	add	r2, pc, #4	@ (adr r2, 800a740 <ff_wtoupper+0x60>)
 800a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a740:	0800a765 	.word	0x0800a765
 800a744:	0800a777 	.word	0x0800a777
 800a748:	0800a78d 	.word	0x0800a78d
 800a74c:	0800a795 	.word	0x0800a795
 800a750:	0800a79d 	.word	0x0800a79d
 800a754:	0800a7a5 	.word	0x0800a7a5
 800a758:	0800a7ad 	.word	0x0800a7ad
 800a75c:	0800a7b5 	.word	0x0800a7b5
 800a760:	0800a7bd 	.word	0x0800a7bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a764:	88fa      	ldrh	r2, [r7, #6]
 800a766:	8a7b      	ldrh	r3, [r7, #18]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	4413      	add	r3, r2
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	80fb      	strh	r3, [r7, #6]
 800a774:	e027      	b.n	800a7c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a776:	88fa      	ldrh	r2, [r7, #6]
 800a778:	8a7b      	ldrh	r3, [r7, #18]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	b29b      	uxth	r3, r3
 800a784:	88fa      	ldrh	r2, [r7, #6]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	80fb      	strh	r3, [r7, #6]
 800a78a:	e01c      	b.n	800a7c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a78c:	88fb      	ldrh	r3, [r7, #6]
 800a78e:	3b10      	subs	r3, #16
 800a790:	80fb      	strh	r3, [r7, #6]
 800a792:	e018      	b.n	800a7c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a794:	88fb      	ldrh	r3, [r7, #6]
 800a796:	3b20      	subs	r3, #32
 800a798:	80fb      	strh	r3, [r7, #6]
 800a79a:	e014      	b.n	800a7c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a79c:	88fb      	ldrh	r3, [r7, #6]
 800a79e:	3b30      	subs	r3, #48	@ 0x30
 800a7a0:	80fb      	strh	r3, [r7, #6]
 800a7a2:	e010      	b.n	800a7c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a7a4:	88fb      	ldrh	r3, [r7, #6]
 800a7a6:	3b1a      	subs	r3, #26
 800a7a8:	80fb      	strh	r3, [r7, #6]
 800a7aa:	e00c      	b.n	800a7c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a7ac:	88fb      	ldrh	r3, [r7, #6]
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	80fb      	strh	r3, [r7, #6]
 800a7b2:	e008      	b.n	800a7c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a7b4:	88fb      	ldrh	r3, [r7, #6]
 800a7b6:	3b50      	subs	r3, #80	@ 0x50
 800a7b8:	80fb      	strh	r3, [r7, #6]
 800a7ba:	e004      	b.n	800a7c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a7c2:	80fb      	strh	r3, [r7, #6]
 800a7c4:	bf00      	nop
			}
			break;
 800a7c6:	e008      	b.n	800a7da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a7c8:	89fb      	ldrh	r3, [r7, #14]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d195      	bne.n	800a6fa <ff_wtoupper+0x1a>
 800a7ce:	8a3b      	ldrh	r3, [r7, #16]
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a7d8:	e78f      	b.n	800a6fa <ff_wtoupper+0x1a>
			break;
 800a7da:	bf00      	nop
	}

	return chr;
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	0800dd5c 	.word	0x0800dd5c
 800a7f0:	0800df50 	.word	0x0800df50

0800a7f4 <__cvt>:
 800a7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	ec57 6b10 	vmov	r6, r7, d0
 800a7fc:	2f00      	cmp	r7, #0
 800a7fe:	460c      	mov	r4, r1
 800a800:	4619      	mov	r1, r3
 800a802:	463b      	mov	r3, r7
 800a804:	bfbb      	ittet	lt
 800a806:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a80a:	461f      	movlt	r7, r3
 800a80c:	2300      	movge	r3, #0
 800a80e:	232d      	movlt	r3, #45	@ 0x2d
 800a810:	700b      	strb	r3, [r1, #0]
 800a812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a814:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a818:	4691      	mov	r9, r2
 800a81a:	f023 0820 	bic.w	r8, r3, #32
 800a81e:	bfbc      	itt	lt
 800a820:	4632      	movlt	r2, r6
 800a822:	4616      	movlt	r6, r2
 800a824:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a828:	d005      	beq.n	800a836 <__cvt+0x42>
 800a82a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a82e:	d100      	bne.n	800a832 <__cvt+0x3e>
 800a830:	3401      	adds	r4, #1
 800a832:	2102      	movs	r1, #2
 800a834:	e000      	b.n	800a838 <__cvt+0x44>
 800a836:	2103      	movs	r1, #3
 800a838:	ab03      	add	r3, sp, #12
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	ab02      	add	r3, sp, #8
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	ec47 6b10 	vmov	d0, r6, r7
 800a844:	4653      	mov	r3, sl
 800a846:	4622      	mov	r2, r4
 800a848:	f000 ffa6 	bl	800b798 <_dtoa_r>
 800a84c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a850:	4605      	mov	r5, r0
 800a852:	d119      	bne.n	800a888 <__cvt+0x94>
 800a854:	f019 0f01 	tst.w	r9, #1
 800a858:	d00e      	beq.n	800a878 <__cvt+0x84>
 800a85a:	eb00 0904 	add.w	r9, r0, r4
 800a85e:	2200      	movs	r2, #0
 800a860:	2300      	movs	r3, #0
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f6 f967 	bl	8000b38 <__aeabi_dcmpeq>
 800a86a:	b108      	cbz	r0, 800a870 <__cvt+0x7c>
 800a86c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a870:	2230      	movs	r2, #48	@ 0x30
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	454b      	cmp	r3, r9
 800a876:	d31e      	bcc.n	800a8b6 <__cvt+0xc2>
 800a878:	9b03      	ldr	r3, [sp, #12]
 800a87a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a87c:	1b5b      	subs	r3, r3, r5
 800a87e:	4628      	mov	r0, r5
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	b004      	add	sp, #16
 800a884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a888:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a88c:	eb00 0904 	add.w	r9, r0, r4
 800a890:	d1e5      	bne.n	800a85e <__cvt+0x6a>
 800a892:	7803      	ldrb	r3, [r0, #0]
 800a894:	2b30      	cmp	r3, #48	@ 0x30
 800a896:	d10a      	bne.n	800a8ae <__cvt+0xba>
 800a898:	2200      	movs	r2, #0
 800a89a:	2300      	movs	r3, #0
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f6 f94a 	bl	8000b38 <__aeabi_dcmpeq>
 800a8a4:	b918      	cbnz	r0, 800a8ae <__cvt+0xba>
 800a8a6:	f1c4 0401 	rsb	r4, r4, #1
 800a8aa:	f8ca 4000 	str.w	r4, [sl]
 800a8ae:	f8da 3000 	ldr.w	r3, [sl]
 800a8b2:	4499      	add	r9, r3
 800a8b4:	e7d3      	b.n	800a85e <__cvt+0x6a>
 800a8b6:	1c59      	adds	r1, r3, #1
 800a8b8:	9103      	str	r1, [sp, #12]
 800a8ba:	701a      	strb	r2, [r3, #0]
 800a8bc:	e7d9      	b.n	800a872 <__cvt+0x7e>

0800a8be <__exponent>:
 800a8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8c0:	2900      	cmp	r1, #0
 800a8c2:	bfba      	itte	lt
 800a8c4:	4249      	neglt	r1, r1
 800a8c6:	232d      	movlt	r3, #45	@ 0x2d
 800a8c8:	232b      	movge	r3, #43	@ 0x2b
 800a8ca:	2909      	cmp	r1, #9
 800a8cc:	7002      	strb	r2, [r0, #0]
 800a8ce:	7043      	strb	r3, [r0, #1]
 800a8d0:	dd29      	ble.n	800a926 <__exponent+0x68>
 800a8d2:	f10d 0307 	add.w	r3, sp, #7
 800a8d6:	461d      	mov	r5, r3
 800a8d8:	270a      	movs	r7, #10
 800a8da:	461a      	mov	r2, r3
 800a8dc:	fbb1 f6f7 	udiv	r6, r1, r7
 800a8e0:	fb07 1416 	mls	r4, r7, r6, r1
 800a8e4:	3430      	adds	r4, #48	@ 0x30
 800a8e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	2c63      	cmp	r4, #99	@ 0x63
 800a8ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	dcf1      	bgt.n	800a8da <__exponent+0x1c>
 800a8f6:	3130      	adds	r1, #48	@ 0x30
 800a8f8:	1e94      	subs	r4, r2, #2
 800a8fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a8fe:	1c41      	adds	r1, r0, #1
 800a900:	4623      	mov	r3, r4
 800a902:	42ab      	cmp	r3, r5
 800a904:	d30a      	bcc.n	800a91c <__exponent+0x5e>
 800a906:	f10d 0309 	add.w	r3, sp, #9
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	42ac      	cmp	r4, r5
 800a90e:	bf88      	it	hi
 800a910:	2300      	movhi	r3, #0
 800a912:	3302      	adds	r3, #2
 800a914:	4403      	add	r3, r0
 800a916:	1a18      	subs	r0, r3, r0
 800a918:	b003      	add	sp, #12
 800a91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a920:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a924:	e7ed      	b.n	800a902 <__exponent+0x44>
 800a926:	2330      	movs	r3, #48	@ 0x30
 800a928:	3130      	adds	r1, #48	@ 0x30
 800a92a:	7083      	strb	r3, [r0, #2]
 800a92c:	70c1      	strb	r1, [r0, #3]
 800a92e:	1d03      	adds	r3, r0, #4
 800a930:	e7f1      	b.n	800a916 <__exponent+0x58>
	...

0800a934 <_printf_float>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	b08d      	sub	sp, #52	@ 0x34
 800a93a:	460c      	mov	r4, r1
 800a93c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a940:	4616      	mov	r6, r2
 800a942:	461f      	mov	r7, r3
 800a944:	4605      	mov	r5, r0
 800a946:	f000 fe27 	bl	800b598 <_localeconv_r>
 800a94a:	6803      	ldr	r3, [r0, #0]
 800a94c:	9304      	str	r3, [sp, #16]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f5 fcc6 	bl	80002e0 <strlen>
 800a954:	2300      	movs	r3, #0
 800a956:	930a      	str	r3, [sp, #40]	@ 0x28
 800a958:	f8d8 3000 	ldr.w	r3, [r8]
 800a95c:	9005      	str	r0, [sp, #20]
 800a95e:	3307      	adds	r3, #7
 800a960:	f023 0307 	bic.w	r3, r3, #7
 800a964:	f103 0208 	add.w	r2, r3, #8
 800a968:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a96c:	f8d4 b000 	ldr.w	fp, [r4]
 800a970:	f8c8 2000 	str.w	r2, [r8]
 800a974:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a978:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a97c:	9307      	str	r3, [sp, #28]
 800a97e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a982:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a98a:	4b9c      	ldr	r3, [pc, #624]	@ (800abfc <_printf_float+0x2c8>)
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	f7f6 f904 	bl	8000b9c <__aeabi_dcmpun>
 800a994:	bb70      	cbnz	r0, 800a9f4 <_printf_float+0xc0>
 800a996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a99a:	4b98      	ldr	r3, [pc, #608]	@ (800abfc <_printf_float+0x2c8>)
 800a99c:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a0:	f7f6 f8de 	bl	8000b60 <__aeabi_dcmple>
 800a9a4:	bb30      	cbnz	r0, 800a9f4 <_printf_float+0xc0>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	f7f6 f8cd 	bl	8000b4c <__aeabi_dcmplt>
 800a9b2:	b110      	cbz	r0, 800a9ba <_printf_float+0x86>
 800a9b4:	232d      	movs	r3, #45	@ 0x2d
 800a9b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9ba:	4a91      	ldr	r2, [pc, #580]	@ (800ac00 <_printf_float+0x2cc>)
 800a9bc:	4b91      	ldr	r3, [pc, #580]	@ (800ac04 <_printf_float+0x2d0>)
 800a9be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a9c2:	bf8c      	ite	hi
 800a9c4:	4690      	movhi	r8, r2
 800a9c6:	4698      	movls	r8, r3
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	6123      	str	r3, [r4, #16]
 800a9cc:	f02b 0304 	bic.w	r3, fp, #4
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	f04f 0900 	mov.w	r9, #0
 800a9d6:	9700      	str	r7, [sp, #0]
 800a9d8:	4633      	mov	r3, r6
 800a9da:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f000 f9d2 	bl	800ad88 <_printf_common>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	f040 808d 	bne.w	800ab04 <_printf_float+0x1d0>
 800a9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ee:	b00d      	add	sp, #52	@ 0x34
 800a9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f4:	4642      	mov	r2, r8
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	f7f6 f8ce 	bl	8000b9c <__aeabi_dcmpun>
 800aa00:	b140      	cbz	r0, 800aa14 <_printf_float+0xe0>
 800aa02:	464b      	mov	r3, r9
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfbc      	itt	lt
 800aa08:	232d      	movlt	r3, #45	@ 0x2d
 800aa0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa0e:	4a7e      	ldr	r2, [pc, #504]	@ (800ac08 <_printf_float+0x2d4>)
 800aa10:	4b7e      	ldr	r3, [pc, #504]	@ (800ac0c <_printf_float+0x2d8>)
 800aa12:	e7d4      	b.n	800a9be <_printf_float+0x8a>
 800aa14:	6863      	ldr	r3, [r4, #4]
 800aa16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aa1a:	9206      	str	r2, [sp, #24]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	d13b      	bne.n	800aa98 <_printf_float+0x164>
 800aa20:	2306      	movs	r3, #6
 800aa22:	6063      	str	r3, [r4, #4]
 800aa24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aa28:	2300      	movs	r3, #0
 800aa2a:	6022      	str	r2, [r4, #0]
 800aa2c:	9303      	str	r3, [sp, #12]
 800aa2e:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa30:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aa34:	ab09      	add	r3, sp, #36	@ 0x24
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	6861      	ldr	r1, [r4, #4]
 800aa3a:	ec49 8b10 	vmov	d0, r8, r9
 800aa3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aa42:	4628      	mov	r0, r5
 800aa44:	f7ff fed6 	bl	800a7f4 <__cvt>
 800aa48:	9b06      	ldr	r3, [sp, #24]
 800aa4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa4c:	2b47      	cmp	r3, #71	@ 0x47
 800aa4e:	4680      	mov	r8, r0
 800aa50:	d129      	bne.n	800aaa6 <_printf_float+0x172>
 800aa52:	1cc8      	adds	r0, r1, #3
 800aa54:	db02      	blt.n	800aa5c <_printf_float+0x128>
 800aa56:	6863      	ldr	r3, [r4, #4]
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	dd41      	ble.n	800aae0 <_printf_float+0x1ac>
 800aa5c:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa60:	fa5f fa8a 	uxtb.w	sl, sl
 800aa64:	3901      	subs	r1, #1
 800aa66:	4652      	mov	r2, sl
 800aa68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aa6c:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa6e:	f7ff ff26 	bl	800a8be <__exponent>
 800aa72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa74:	1813      	adds	r3, r2, r0
 800aa76:	2a01      	cmp	r2, #1
 800aa78:	4681      	mov	r9, r0
 800aa7a:	6123      	str	r3, [r4, #16]
 800aa7c:	dc02      	bgt.n	800aa84 <_printf_float+0x150>
 800aa7e:	6822      	ldr	r2, [r4, #0]
 800aa80:	07d2      	lsls	r2, r2, #31
 800aa82:	d501      	bpl.n	800aa88 <_printf_float+0x154>
 800aa84:	3301      	adds	r3, #1
 800aa86:	6123      	str	r3, [r4, #16]
 800aa88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0a2      	beq.n	800a9d6 <_printf_float+0xa2>
 800aa90:	232d      	movs	r3, #45	@ 0x2d
 800aa92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa96:	e79e      	b.n	800a9d6 <_printf_float+0xa2>
 800aa98:	9a06      	ldr	r2, [sp, #24]
 800aa9a:	2a47      	cmp	r2, #71	@ 0x47
 800aa9c:	d1c2      	bne.n	800aa24 <_printf_float+0xf0>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1c0      	bne.n	800aa24 <_printf_float+0xf0>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e7bd      	b.n	800aa22 <_printf_float+0xee>
 800aaa6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aaaa:	d9db      	bls.n	800aa64 <_printf_float+0x130>
 800aaac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aab0:	d118      	bne.n	800aae4 <_printf_float+0x1b0>
 800aab2:	2900      	cmp	r1, #0
 800aab4:	6863      	ldr	r3, [r4, #4]
 800aab6:	dd0b      	ble.n	800aad0 <_printf_float+0x19c>
 800aab8:	6121      	str	r1, [r4, #16]
 800aaba:	b913      	cbnz	r3, 800aac2 <_printf_float+0x18e>
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	07d0      	lsls	r0, r2, #31
 800aac0:	d502      	bpl.n	800aac8 <_printf_float+0x194>
 800aac2:	3301      	adds	r3, #1
 800aac4:	440b      	add	r3, r1
 800aac6:	6123      	str	r3, [r4, #16]
 800aac8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aaca:	f04f 0900 	mov.w	r9, #0
 800aace:	e7db      	b.n	800aa88 <_printf_float+0x154>
 800aad0:	b913      	cbnz	r3, 800aad8 <_printf_float+0x1a4>
 800aad2:	6822      	ldr	r2, [r4, #0]
 800aad4:	07d2      	lsls	r2, r2, #31
 800aad6:	d501      	bpl.n	800aadc <_printf_float+0x1a8>
 800aad8:	3302      	adds	r3, #2
 800aada:	e7f4      	b.n	800aac6 <_printf_float+0x192>
 800aadc:	2301      	movs	r3, #1
 800aade:	e7f2      	b.n	800aac6 <_printf_float+0x192>
 800aae0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aae6:	4299      	cmp	r1, r3
 800aae8:	db05      	blt.n	800aaf6 <_printf_float+0x1c2>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	6121      	str	r1, [r4, #16]
 800aaee:	07d8      	lsls	r0, r3, #31
 800aaf0:	d5ea      	bpl.n	800aac8 <_printf_float+0x194>
 800aaf2:	1c4b      	adds	r3, r1, #1
 800aaf4:	e7e7      	b.n	800aac6 <_printf_float+0x192>
 800aaf6:	2900      	cmp	r1, #0
 800aaf8:	bfd4      	ite	le
 800aafa:	f1c1 0202 	rsble	r2, r1, #2
 800aafe:	2201      	movgt	r2, #1
 800ab00:	4413      	add	r3, r2
 800ab02:	e7e0      	b.n	800aac6 <_printf_float+0x192>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	055a      	lsls	r2, r3, #21
 800ab08:	d407      	bmi.n	800ab1a <_printf_float+0x1e6>
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	4631      	mov	r1, r6
 800ab10:	4628      	mov	r0, r5
 800ab12:	47b8      	blx	r7
 800ab14:	3001      	adds	r0, #1
 800ab16:	d12b      	bne.n	800ab70 <_printf_float+0x23c>
 800ab18:	e767      	b.n	800a9ea <_printf_float+0xb6>
 800ab1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab1e:	f240 80dd 	bls.w	800acdc <_printf_float+0x3a8>
 800ab22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab26:	2200      	movs	r2, #0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f7f6 f805 	bl	8000b38 <__aeabi_dcmpeq>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d033      	beq.n	800ab9a <_printf_float+0x266>
 800ab32:	4a37      	ldr	r2, [pc, #220]	@ (800ac10 <_printf_float+0x2dc>)
 800ab34:	2301      	movs	r3, #1
 800ab36:	4631      	mov	r1, r6
 800ab38:	4628      	mov	r0, r5
 800ab3a:	47b8      	blx	r7
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	f43f af54 	beq.w	800a9ea <_printf_float+0xb6>
 800ab42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ab46:	4543      	cmp	r3, r8
 800ab48:	db02      	blt.n	800ab50 <_printf_float+0x21c>
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	07d8      	lsls	r0, r3, #31
 800ab4e:	d50f      	bpl.n	800ab70 <_printf_float+0x23c>
 800ab50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab54:	4631      	mov	r1, r6
 800ab56:	4628      	mov	r0, r5
 800ab58:	47b8      	blx	r7
 800ab5a:	3001      	adds	r0, #1
 800ab5c:	f43f af45 	beq.w	800a9ea <_printf_float+0xb6>
 800ab60:	f04f 0900 	mov.w	r9, #0
 800ab64:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab68:	f104 0a1a 	add.w	sl, r4, #26
 800ab6c:	45c8      	cmp	r8, r9
 800ab6e:	dc09      	bgt.n	800ab84 <_printf_float+0x250>
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	079b      	lsls	r3, r3, #30
 800ab74:	f100 8103 	bmi.w	800ad7e <_printf_float+0x44a>
 800ab78:	68e0      	ldr	r0, [r4, #12]
 800ab7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab7c:	4298      	cmp	r0, r3
 800ab7e:	bfb8      	it	lt
 800ab80:	4618      	movlt	r0, r3
 800ab82:	e734      	b.n	800a9ee <_printf_float+0xba>
 800ab84:	2301      	movs	r3, #1
 800ab86:	4652      	mov	r2, sl
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	47b8      	blx	r7
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f43f af2b 	beq.w	800a9ea <_printf_float+0xb6>
 800ab94:	f109 0901 	add.w	r9, r9, #1
 800ab98:	e7e8      	b.n	800ab6c <_printf_float+0x238>
 800ab9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dc39      	bgt.n	800ac14 <_printf_float+0x2e0>
 800aba0:	4a1b      	ldr	r2, [pc, #108]	@ (800ac10 <_printf_float+0x2dc>)
 800aba2:	2301      	movs	r3, #1
 800aba4:	4631      	mov	r1, r6
 800aba6:	4628      	mov	r0, r5
 800aba8:	47b8      	blx	r7
 800abaa:	3001      	adds	r0, #1
 800abac:	f43f af1d 	beq.w	800a9ea <_printf_float+0xb6>
 800abb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800abb4:	ea59 0303 	orrs.w	r3, r9, r3
 800abb8:	d102      	bne.n	800abc0 <_printf_float+0x28c>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	07d9      	lsls	r1, r3, #31
 800abbe:	d5d7      	bpl.n	800ab70 <_printf_float+0x23c>
 800abc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abc4:	4631      	mov	r1, r6
 800abc6:	4628      	mov	r0, r5
 800abc8:	47b8      	blx	r7
 800abca:	3001      	adds	r0, #1
 800abcc:	f43f af0d 	beq.w	800a9ea <_printf_float+0xb6>
 800abd0:	f04f 0a00 	mov.w	sl, #0
 800abd4:	f104 0b1a 	add.w	fp, r4, #26
 800abd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abda:	425b      	negs	r3, r3
 800abdc:	4553      	cmp	r3, sl
 800abde:	dc01      	bgt.n	800abe4 <_printf_float+0x2b0>
 800abe0:	464b      	mov	r3, r9
 800abe2:	e793      	b.n	800ab0c <_printf_float+0x1d8>
 800abe4:	2301      	movs	r3, #1
 800abe6:	465a      	mov	r2, fp
 800abe8:	4631      	mov	r1, r6
 800abea:	4628      	mov	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	f43f aefb 	beq.w	800a9ea <_printf_float+0xb6>
 800abf4:	f10a 0a01 	add.w	sl, sl, #1
 800abf8:	e7ee      	b.n	800abd8 <_printf_float+0x2a4>
 800abfa:	bf00      	nop
 800abfc:	7fefffff 	.word	0x7fefffff
 800ac00:	0800e010 	.word	0x0800e010
 800ac04:	0800e00c 	.word	0x0800e00c
 800ac08:	0800e018 	.word	0x0800e018
 800ac0c:	0800e014 	.word	0x0800e014
 800ac10:	0800e01c 	.word	0x0800e01c
 800ac14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac1a:	4553      	cmp	r3, sl
 800ac1c:	bfa8      	it	ge
 800ac1e:	4653      	movge	r3, sl
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	4699      	mov	r9, r3
 800ac24:	dc36      	bgt.n	800ac94 <_printf_float+0x360>
 800ac26:	f04f 0b00 	mov.w	fp, #0
 800ac2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac2e:	f104 021a 	add.w	r2, r4, #26
 800ac32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac34:	9306      	str	r3, [sp, #24]
 800ac36:	eba3 0309 	sub.w	r3, r3, r9
 800ac3a:	455b      	cmp	r3, fp
 800ac3c:	dc31      	bgt.n	800aca2 <_printf_float+0x36e>
 800ac3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac40:	459a      	cmp	sl, r3
 800ac42:	dc3a      	bgt.n	800acba <_printf_float+0x386>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	07da      	lsls	r2, r3, #31
 800ac48:	d437      	bmi.n	800acba <_printf_float+0x386>
 800ac4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4c:	ebaa 0903 	sub.w	r9, sl, r3
 800ac50:	9b06      	ldr	r3, [sp, #24]
 800ac52:	ebaa 0303 	sub.w	r3, sl, r3
 800ac56:	4599      	cmp	r9, r3
 800ac58:	bfa8      	it	ge
 800ac5a:	4699      	movge	r9, r3
 800ac5c:	f1b9 0f00 	cmp.w	r9, #0
 800ac60:	dc33      	bgt.n	800acca <_printf_float+0x396>
 800ac62:	f04f 0800 	mov.w	r8, #0
 800ac66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac6a:	f104 0b1a 	add.w	fp, r4, #26
 800ac6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac70:	ebaa 0303 	sub.w	r3, sl, r3
 800ac74:	eba3 0309 	sub.w	r3, r3, r9
 800ac78:	4543      	cmp	r3, r8
 800ac7a:	f77f af79 	ble.w	800ab70 <_printf_float+0x23c>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	465a      	mov	r2, fp
 800ac82:	4631      	mov	r1, r6
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b8      	blx	r7
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f43f aeae 	beq.w	800a9ea <_printf_float+0xb6>
 800ac8e:	f108 0801 	add.w	r8, r8, #1
 800ac92:	e7ec      	b.n	800ac6e <_printf_float+0x33a>
 800ac94:	4642      	mov	r2, r8
 800ac96:	4631      	mov	r1, r6
 800ac98:	4628      	mov	r0, r5
 800ac9a:	47b8      	blx	r7
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	d1c2      	bne.n	800ac26 <_printf_float+0x2f2>
 800aca0:	e6a3      	b.n	800a9ea <_printf_float+0xb6>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4631      	mov	r1, r6
 800aca6:	4628      	mov	r0, r5
 800aca8:	9206      	str	r2, [sp, #24]
 800acaa:	47b8      	blx	r7
 800acac:	3001      	adds	r0, #1
 800acae:	f43f ae9c 	beq.w	800a9ea <_printf_float+0xb6>
 800acb2:	9a06      	ldr	r2, [sp, #24]
 800acb4:	f10b 0b01 	add.w	fp, fp, #1
 800acb8:	e7bb      	b.n	800ac32 <_printf_float+0x2fe>
 800acba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acbe:	4631      	mov	r1, r6
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b8      	blx	r7
 800acc4:	3001      	adds	r0, #1
 800acc6:	d1c0      	bne.n	800ac4a <_printf_float+0x316>
 800acc8:	e68f      	b.n	800a9ea <_printf_float+0xb6>
 800acca:	9a06      	ldr	r2, [sp, #24]
 800accc:	464b      	mov	r3, r9
 800acce:	4442      	add	r2, r8
 800acd0:	4631      	mov	r1, r6
 800acd2:	4628      	mov	r0, r5
 800acd4:	47b8      	blx	r7
 800acd6:	3001      	adds	r0, #1
 800acd8:	d1c3      	bne.n	800ac62 <_printf_float+0x32e>
 800acda:	e686      	b.n	800a9ea <_printf_float+0xb6>
 800acdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ace0:	f1ba 0f01 	cmp.w	sl, #1
 800ace4:	dc01      	bgt.n	800acea <_printf_float+0x3b6>
 800ace6:	07db      	lsls	r3, r3, #31
 800ace8:	d536      	bpl.n	800ad58 <_printf_float+0x424>
 800acea:	2301      	movs	r3, #1
 800acec:	4642      	mov	r2, r8
 800acee:	4631      	mov	r1, r6
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b8      	blx	r7
 800acf4:	3001      	adds	r0, #1
 800acf6:	f43f ae78 	beq.w	800a9ea <_printf_float+0xb6>
 800acfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acfe:	4631      	mov	r1, r6
 800ad00:	4628      	mov	r0, r5
 800ad02:	47b8      	blx	r7
 800ad04:	3001      	adds	r0, #1
 800ad06:	f43f ae70 	beq.w	800a9ea <_printf_float+0xb6>
 800ad0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2300      	movs	r3, #0
 800ad12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad16:	f7f5 ff0f 	bl	8000b38 <__aeabi_dcmpeq>
 800ad1a:	b9c0      	cbnz	r0, 800ad4e <_printf_float+0x41a>
 800ad1c:	4653      	mov	r3, sl
 800ad1e:	f108 0201 	add.w	r2, r8, #1
 800ad22:	4631      	mov	r1, r6
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d10c      	bne.n	800ad46 <_printf_float+0x412>
 800ad2c:	e65d      	b.n	800a9ea <_printf_float+0xb6>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	465a      	mov	r2, fp
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b8      	blx	r7
 800ad38:	3001      	adds	r0, #1
 800ad3a:	f43f ae56 	beq.w	800a9ea <_printf_float+0xb6>
 800ad3e:	f108 0801 	add.w	r8, r8, #1
 800ad42:	45d0      	cmp	r8, sl
 800ad44:	dbf3      	blt.n	800ad2e <_printf_float+0x3fa>
 800ad46:	464b      	mov	r3, r9
 800ad48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad4c:	e6df      	b.n	800ab0e <_printf_float+0x1da>
 800ad4e:	f04f 0800 	mov.w	r8, #0
 800ad52:	f104 0b1a 	add.w	fp, r4, #26
 800ad56:	e7f4      	b.n	800ad42 <_printf_float+0x40e>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	4642      	mov	r2, r8
 800ad5c:	e7e1      	b.n	800ad22 <_printf_float+0x3ee>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	464a      	mov	r2, r9
 800ad62:	4631      	mov	r1, r6
 800ad64:	4628      	mov	r0, r5
 800ad66:	47b8      	blx	r7
 800ad68:	3001      	adds	r0, #1
 800ad6a:	f43f ae3e 	beq.w	800a9ea <_printf_float+0xb6>
 800ad6e:	f108 0801 	add.w	r8, r8, #1
 800ad72:	68e3      	ldr	r3, [r4, #12]
 800ad74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad76:	1a5b      	subs	r3, r3, r1
 800ad78:	4543      	cmp	r3, r8
 800ad7a:	dcf0      	bgt.n	800ad5e <_printf_float+0x42a>
 800ad7c:	e6fc      	b.n	800ab78 <_printf_float+0x244>
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	f104 0919 	add.w	r9, r4, #25
 800ad86:	e7f4      	b.n	800ad72 <_printf_float+0x43e>

0800ad88 <_printf_common>:
 800ad88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	4698      	mov	r8, r3
 800ad90:	688a      	ldr	r2, [r1, #8]
 800ad92:	690b      	ldr	r3, [r1, #16]
 800ad94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	bfb8      	it	lt
 800ad9c:	4613      	movlt	r3, r2
 800ad9e:	6033      	str	r3, [r6, #0]
 800ada0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ada4:	4607      	mov	r7, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	b10a      	cbz	r2, 800adae <_printf_common+0x26>
 800adaa:	3301      	adds	r3, #1
 800adac:	6033      	str	r3, [r6, #0]
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	0699      	lsls	r1, r3, #26
 800adb2:	bf42      	ittt	mi
 800adb4:	6833      	ldrmi	r3, [r6, #0]
 800adb6:	3302      	addmi	r3, #2
 800adb8:	6033      	strmi	r3, [r6, #0]
 800adba:	6825      	ldr	r5, [r4, #0]
 800adbc:	f015 0506 	ands.w	r5, r5, #6
 800adc0:	d106      	bne.n	800add0 <_printf_common+0x48>
 800adc2:	f104 0a19 	add.w	sl, r4, #25
 800adc6:	68e3      	ldr	r3, [r4, #12]
 800adc8:	6832      	ldr	r2, [r6, #0]
 800adca:	1a9b      	subs	r3, r3, r2
 800adcc:	42ab      	cmp	r3, r5
 800adce:	dc26      	bgt.n	800ae1e <_printf_common+0x96>
 800add0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800add4:	6822      	ldr	r2, [r4, #0]
 800add6:	3b00      	subs	r3, #0
 800add8:	bf18      	it	ne
 800adda:	2301      	movne	r3, #1
 800addc:	0692      	lsls	r2, r2, #26
 800adde:	d42b      	bmi.n	800ae38 <_printf_common+0xb0>
 800ade0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ade4:	4641      	mov	r1, r8
 800ade6:	4638      	mov	r0, r7
 800ade8:	47c8      	blx	r9
 800adea:	3001      	adds	r0, #1
 800adec:	d01e      	beq.n	800ae2c <_printf_common+0xa4>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	6922      	ldr	r2, [r4, #16]
 800adf2:	f003 0306 	and.w	r3, r3, #6
 800adf6:	2b04      	cmp	r3, #4
 800adf8:	bf02      	ittt	eq
 800adfa:	68e5      	ldreq	r5, [r4, #12]
 800adfc:	6833      	ldreq	r3, [r6, #0]
 800adfe:	1aed      	subeq	r5, r5, r3
 800ae00:	68a3      	ldr	r3, [r4, #8]
 800ae02:	bf0c      	ite	eq
 800ae04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae08:	2500      	movne	r5, #0
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	bfc4      	itt	gt
 800ae0e:	1a9b      	subgt	r3, r3, r2
 800ae10:	18ed      	addgt	r5, r5, r3
 800ae12:	2600      	movs	r6, #0
 800ae14:	341a      	adds	r4, #26
 800ae16:	42b5      	cmp	r5, r6
 800ae18:	d11a      	bne.n	800ae50 <_printf_common+0xc8>
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	e008      	b.n	800ae30 <_printf_common+0xa8>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4652      	mov	r2, sl
 800ae22:	4641      	mov	r1, r8
 800ae24:	4638      	mov	r0, r7
 800ae26:	47c8      	blx	r9
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d103      	bne.n	800ae34 <_printf_common+0xac>
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae34:	3501      	adds	r5, #1
 800ae36:	e7c6      	b.n	800adc6 <_printf_common+0x3e>
 800ae38:	18e1      	adds	r1, r4, r3
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	2030      	movs	r0, #48	@ 0x30
 800ae3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae42:	4422      	add	r2, r4
 800ae44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	e7c7      	b.n	800ade0 <_printf_common+0x58>
 800ae50:	2301      	movs	r3, #1
 800ae52:	4622      	mov	r2, r4
 800ae54:	4641      	mov	r1, r8
 800ae56:	4638      	mov	r0, r7
 800ae58:	47c8      	blx	r9
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	d0e6      	beq.n	800ae2c <_printf_common+0xa4>
 800ae5e:	3601      	adds	r6, #1
 800ae60:	e7d9      	b.n	800ae16 <_printf_common+0x8e>
	...

0800ae64 <_printf_i>:
 800ae64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae68:	7e0f      	ldrb	r7, [r1, #24]
 800ae6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae6c:	2f78      	cmp	r7, #120	@ 0x78
 800ae6e:	4691      	mov	r9, r2
 800ae70:	4680      	mov	r8, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	469a      	mov	sl, r3
 800ae76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae7a:	d807      	bhi.n	800ae8c <_printf_i+0x28>
 800ae7c:	2f62      	cmp	r7, #98	@ 0x62
 800ae7e:	d80a      	bhi.n	800ae96 <_printf_i+0x32>
 800ae80:	2f00      	cmp	r7, #0
 800ae82:	f000 80d1 	beq.w	800b028 <_printf_i+0x1c4>
 800ae86:	2f58      	cmp	r7, #88	@ 0x58
 800ae88:	f000 80b8 	beq.w	800affc <_printf_i+0x198>
 800ae8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae94:	e03a      	b.n	800af0c <_printf_i+0xa8>
 800ae96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae9a:	2b15      	cmp	r3, #21
 800ae9c:	d8f6      	bhi.n	800ae8c <_printf_i+0x28>
 800ae9e:	a101      	add	r1, pc, #4	@ (adr r1, 800aea4 <_printf_i+0x40>)
 800aea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aea4:	0800aefd 	.word	0x0800aefd
 800aea8:	0800af11 	.word	0x0800af11
 800aeac:	0800ae8d 	.word	0x0800ae8d
 800aeb0:	0800ae8d 	.word	0x0800ae8d
 800aeb4:	0800ae8d 	.word	0x0800ae8d
 800aeb8:	0800ae8d 	.word	0x0800ae8d
 800aebc:	0800af11 	.word	0x0800af11
 800aec0:	0800ae8d 	.word	0x0800ae8d
 800aec4:	0800ae8d 	.word	0x0800ae8d
 800aec8:	0800ae8d 	.word	0x0800ae8d
 800aecc:	0800ae8d 	.word	0x0800ae8d
 800aed0:	0800b00f 	.word	0x0800b00f
 800aed4:	0800af3b 	.word	0x0800af3b
 800aed8:	0800afc9 	.word	0x0800afc9
 800aedc:	0800ae8d 	.word	0x0800ae8d
 800aee0:	0800ae8d 	.word	0x0800ae8d
 800aee4:	0800b031 	.word	0x0800b031
 800aee8:	0800ae8d 	.word	0x0800ae8d
 800aeec:	0800af3b 	.word	0x0800af3b
 800aef0:	0800ae8d 	.word	0x0800ae8d
 800aef4:	0800ae8d 	.word	0x0800ae8d
 800aef8:	0800afd1 	.word	0x0800afd1
 800aefc:	6833      	ldr	r3, [r6, #0]
 800aefe:	1d1a      	adds	r2, r3, #4
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	6032      	str	r2, [r6, #0]
 800af04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af0c:	2301      	movs	r3, #1
 800af0e:	e09c      	b.n	800b04a <_printf_i+0x1e6>
 800af10:	6833      	ldr	r3, [r6, #0]
 800af12:	6820      	ldr	r0, [r4, #0]
 800af14:	1d19      	adds	r1, r3, #4
 800af16:	6031      	str	r1, [r6, #0]
 800af18:	0606      	lsls	r6, r0, #24
 800af1a:	d501      	bpl.n	800af20 <_printf_i+0xbc>
 800af1c:	681d      	ldr	r5, [r3, #0]
 800af1e:	e003      	b.n	800af28 <_printf_i+0xc4>
 800af20:	0645      	lsls	r5, r0, #25
 800af22:	d5fb      	bpl.n	800af1c <_printf_i+0xb8>
 800af24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af28:	2d00      	cmp	r5, #0
 800af2a:	da03      	bge.n	800af34 <_printf_i+0xd0>
 800af2c:	232d      	movs	r3, #45	@ 0x2d
 800af2e:	426d      	negs	r5, r5
 800af30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af34:	4858      	ldr	r0, [pc, #352]	@ (800b098 <_printf_i+0x234>)
 800af36:	230a      	movs	r3, #10
 800af38:	e011      	b.n	800af5e <_printf_i+0xfa>
 800af3a:	6821      	ldr	r1, [r4, #0]
 800af3c:	6833      	ldr	r3, [r6, #0]
 800af3e:	0608      	lsls	r0, r1, #24
 800af40:	f853 5b04 	ldr.w	r5, [r3], #4
 800af44:	d402      	bmi.n	800af4c <_printf_i+0xe8>
 800af46:	0649      	lsls	r1, r1, #25
 800af48:	bf48      	it	mi
 800af4a:	b2ad      	uxthmi	r5, r5
 800af4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800af4e:	4852      	ldr	r0, [pc, #328]	@ (800b098 <_printf_i+0x234>)
 800af50:	6033      	str	r3, [r6, #0]
 800af52:	bf14      	ite	ne
 800af54:	230a      	movne	r3, #10
 800af56:	2308      	moveq	r3, #8
 800af58:	2100      	movs	r1, #0
 800af5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af5e:	6866      	ldr	r6, [r4, #4]
 800af60:	60a6      	str	r6, [r4, #8]
 800af62:	2e00      	cmp	r6, #0
 800af64:	db05      	blt.n	800af72 <_printf_i+0x10e>
 800af66:	6821      	ldr	r1, [r4, #0]
 800af68:	432e      	orrs	r6, r5
 800af6a:	f021 0104 	bic.w	r1, r1, #4
 800af6e:	6021      	str	r1, [r4, #0]
 800af70:	d04b      	beq.n	800b00a <_printf_i+0x1a6>
 800af72:	4616      	mov	r6, r2
 800af74:	fbb5 f1f3 	udiv	r1, r5, r3
 800af78:	fb03 5711 	mls	r7, r3, r1, r5
 800af7c:	5dc7      	ldrb	r7, [r0, r7]
 800af7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af82:	462f      	mov	r7, r5
 800af84:	42bb      	cmp	r3, r7
 800af86:	460d      	mov	r5, r1
 800af88:	d9f4      	bls.n	800af74 <_printf_i+0x110>
 800af8a:	2b08      	cmp	r3, #8
 800af8c:	d10b      	bne.n	800afa6 <_printf_i+0x142>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	07df      	lsls	r7, r3, #31
 800af92:	d508      	bpl.n	800afa6 <_printf_i+0x142>
 800af94:	6923      	ldr	r3, [r4, #16]
 800af96:	6861      	ldr	r1, [r4, #4]
 800af98:	4299      	cmp	r1, r3
 800af9a:	bfde      	ittt	le
 800af9c:	2330      	movle	r3, #48	@ 0x30
 800af9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afa6:	1b92      	subs	r2, r2, r6
 800afa8:	6122      	str	r2, [r4, #16]
 800afaa:	f8cd a000 	str.w	sl, [sp]
 800afae:	464b      	mov	r3, r9
 800afb0:	aa03      	add	r2, sp, #12
 800afb2:	4621      	mov	r1, r4
 800afb4:	4640      	mov	r0, r8
 800afb6:	f7ff fee7 	bl	800ad88 <_printf_common>
 800afba:	3001      	adds	r0, #1
 800afbc:	d14a      	bne.n	800b054 <_printf_i+0x1f0>
 800afbe:	f04f 30ff 	mov.w	r0, #4294967295
 800afc2:	b004      	add	sp, #16
 800afc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc8:	6823      	ldr	r3, [r4, #0]
 800afca:	f043 0320 	orr.w	r3, r3, #32
 800afce:	6023      	str	r3, [r4, #0]
 800afd0:	4832      	ldr	r0, [pc, #200]	@ (800b09c <_printf_i+0x238>)
 800afd2:	2778      	movs	r7, #120	@ 0x78
 800afd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	6831      	ldr	r1, [r6, #0]
 800afdc:	061f      	lsls	r7, r3, #24
 800afde:	f851 5b04 	ldr.w	r5, [r1], #4
 800afe2:	d402      	bmi.n	800afea <_printf_i+0x186>
 800afe4:	065f      	lsls	r7, r3, #25
 800afe6:	bf48      	it	mi
 800afe8:	b2ad      	uxthmi	r5, r5
 800afea:	6031      	str	r1, [r6, #0]
 800afec:	07d9      	lsls	r1, r3, #31
 800afee:	bf44      	itt	mi
 800aff0:	f043 0320 	orrmi.w	r3, r3, #32
 800aff4:	6023      	strmi	r3, [r4, #0]
 800aff6:	b11d      	cbz	r5, 800b000 <_printf_i+0x19c>
 800aff8:	2310      	movs	r3, #16
 800affa:	e7ad      	b.n	800af58 <_printf_i+0xf4>
 800affc:	4826      	ldr	r0, [pc, #152]	@ (800b098 <_printf_i+0x234>)
 800affe:	e7e9      	b.n	800afd4 <_printf_i+0x170>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	f023 0320 	bic.w	r3, r3, #32
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	e7f6      	b.n	800aff8 <_printf_i+0x194>
 800b00a:	4616      	mov	r6, r2
 800b00c:	e7bd      	b.n	800af8a <_printf_i+0x126>
 800b00e:	6833      	ldr	r3, [r6, #0]
 800b010:	6825      	ldr	r5, [r4, #0]
 800b012:	6961      	ldr	r1, [r4, #20]
 800b014:	1d18      	adds	r0, r3, #4
 800b016:	6030      	str	r0, [r6, #0]
 800b018:	062e      	lsls	r6, r5, #24
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	d501      	bpl.n	800b022 <_printf_i+0x1be>
 800b01e:	6019      	str	r1, [r3, #0]
 800b020:	e002      	b.n	800b028 <_printf_i+0x1c4>
 800b022:	0668      	lsls	r0, r5, #25
 800b024:	d5fb      	bpl.n	800b01e <_printf_i+0x1ba>
 800b026:	8019      	strh	r1, [r3, #0]
 800b028:	2300      	movs	r3, #0
 800b02a:	6123      	str	r3, [r4, #16]
 800b02c:	4616      	mov	r6, r2
 800b02e:	e7bc      	b.n	800afaa <_printf_i+0x146>
 800b030:	6833      	ldr	r3, [r6, #0]
 800b032:	1d1a      	adds	r2, r3, #4
 800b034:	6032      	str	r2, [r6, #0]
 800b036:	681e      	ldr	r6, [r3, #0]
 800b038:	6862      	ldr	r2, [r4, #4]
 800b03a:	2100      	movs	r1, #0
 800b03c:	4630      	mov	r0, r6
 800b03e:	f7f5 f8ff 	bl	8000240 <memchr>
 800b042:	b108      	cbz	r0, 800b048 <_printf_i+0x1e4>
 800b044:	1b80      	subs	r0, r0, r6
 800b046:	6060      	str	r0, [r4, #4]
 800b048:	6863      	ldr	r3, [r4, #4]
 800b04a:	6123      	str	r3, [r4, #16]
 800b04c:	2300      	movs	r3, #0
 800b04e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b052:	e7aa      	b.n	800afaa <_printf_i+0x146>
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	4632      	mov	r2, r6
 800b058:	4649      	mov	r1, r9
 800b05a:	4640      	mov	r0, r8
 800b05c:	47d0      	blx	sl
 800b05e:	3001      	adds	r0, #1
 800b060:	d0ad      	beq.n	800afbe <_printf_i+0x15a>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	079b      	lsls	r3, r3, #30
 800b066:	d413      	bmi.n	800b090 <_printf_i+0x22c>
 800b068:	68e0      	ldr	r0, [r4, #12]
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	4298      	cmp	r0, r3
 800b06e:	bfb8      	it	lt
 800b070:	4618      	movlt	r0, r3
 800b072:	e7a6      	b.n	800afc2 <_printf_i+0x15e>
 800b074:	2301      	movs	r3, #1
 800b076:	4632      	mov	r2, r6
 800b078:	4649      	mov	r1, r9
 800b07a:	4640      	mov	r0, r8
 800b07c:	47d0      	blx	sl
 800b07e:	3001      	adds	r0, #1
 800b080:	d09d      	beq.n	800afbe <_printf_i+0x15a>
 800b082:	3501      	adds	r5, #1
 800b084:	68e3      	ldr	r3, [r4, #12]
 800b086:	9903      	ldr	r1, [sp, #12]
 800b088:	1a5b      	subs	r3, r3, r1
 800b08a:	42ab      	cmp	r3, r5
 800b08c:	dcf2      	bgt.n	800b074 <_printf_i+0x210>
 800b08e:	e7eb      	b.n	800b068 <_printf_i+0x204>
 800b090:	2500      	movs	r5, #0
 800b092:	f104 0619 	add.w	r6, r4, #25
 800b096:	e7f5      	b.n	800b084 <_printf_i+0x220>
 800b098:	0800e01e 	.word	0x0800e01e
 800b09c:	0800e02f 	.word	0x0800e02f

0800b0a0 <std>:
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	b510      	push	{r4, lr}
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0ae:	6083      	str	r3, [r0, #8]
 800b0b0:	8181      	strh	r1, [r0, #12]
 800b0b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b0b4:	81c2      	strh	r2, [r0, #14]
 800b0b6:	6183      	str	r3, [r0, #24]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	2208      	movs	r2, #8
 800b0bc:	305c      	adds	r0, #92	@ 0x5c
 800b0be:	f000 fa51 	bl	800b564 <memset>
 800b0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b0f8 <std+0x58>)
 800b0c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0fc <std+0x5c>)
 800b0c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b100 <std+0x60>)
 800b0cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b104 <std+0x64>)
 800b0d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b108 <std+0x68>)
 800b0d4:	6224      	str	r4, [r4, #32]
 800b0d6:	429c      	cmp	r4, r3
 800b0d8:	d006      	beq.n	800b0e8 <std+0x48>
 800b0da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b0de:	4294      	cmp	r4, r2
 800b0e0:	d002      	beq.n	800b0e8 <std+0x48>
 800b0e2:	33d0      	adds	r3, #208	@ 0xd0
 800b0e4:	429c      	cmp	r4, r3
 800b0e6:	d105      	bne.n	800b0f4 <std+0x54>
 800b0e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f0:	f000 bac6 	b.w	800b680 <__retarget_lock_init_recursive>
 800b0f4:	bd10      	pop	{r4, pc}
 800b0f6:	bf00      	nop
 800b0f8:	0800b3b5 	.word	0x0800b3b5
 800b0fc:	0800b3d7 	.word	0x0800b3d7
 800b100:	0800b40f 	.word	0x0800b40f
 800b104:	0800b433 	.word	0x0800b433
 800b108:	20002758 	.word	0x20002758

0800b10c <stdio_exit_handler>:
 800b10c:	4a02      	ldr	r2, [pc, #8]	@ (800b118 <stdio_exit_handler+0xc>)
 800b10e:	4903      	ldr	r1, [pc, #12]	@ (800b11c <stdio_exit_handler+0x10>)
 800b110:	4803      	ldr	r0, [pc, #12]	@ (800b120 <stdio_exit_handler+0x14>)
 800b112:	f000 b869 	b.w	800b1e8 <_fwalk_sglue>
 800b116:	bf00      	nop
 800b118:	20000024 	.word	0x20000024
 800b11c:	0800d269 	.word	0x0800d269
 800b120:	20000034 	.word	0x20000034

0800b124 <cleanup_stdio>:
 800b124:	6841      	ldr	r1, [r0, #4]
 800b126:	4b0c      	ldr	r3, [pc, #48]	@ (800b158 <cleanup_stdio+0x34>)
 800b128:	4299      	cmp	r1, r3
 800b12a:	b510      	push	{r4, lr}
 800b12c:	4604      	mov	r4, r0
 800b12e:	d001      	beq.n	800b134 <cleanup_stdio+0x10>
 800b130:	f002 f89a 	bl	800d268 <_fflush_r>
 800b134:	68a1      	ldr	r1, [r4, #8]
 800b136:	4b09      	ldr	r3, [pc, #36]	@ (800b15c <cleanup_stdio+0x38>)
 800b138:	4299      	cmp	r1, r3
 800b13a:	d002      	beq.n	800b142 <cleanup_stdio+0x1e>
 800b13c:	4620      	mov	r0, r4
 800b13e:	f002 f893 	bl	800d268 <_fflush_r>
 800b142:	68e1      	ldr	r1, [r4, #12]
 800b144:	4b06      	ldr	r3, [pc, #24]	@ (800b160 <cleanup_stdio+0x3c>)
 800b146:	4299      	cmp	r1, r3
 800b148:	d004      	beq.n	800b154 <cleanup_stdio+0x30>
 800b14a:	4620      	mov	r0, r4
 800b14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b150:	f002 b88a 	b.w	800d268 <_fflush_r>
 800b154:	bd10      	pop	{r4, pc}
 800b156:	bf00      	nop
 800b158:	20002758 	.word	0x20002758
 800b15c:	200027c0 	.word	0x200027c0
 800b160:	20002828 	.word	0x20002828

0800b164 <global_stdio_init.part.0>:
 800b164:	b510      	push	{r4, lr}
 800b166:	4b0b      	ldr	r3, [pc, #44]	@ (800b194 <global_stdio_init.part.0+0x30>)
 800b168:	4c0b      	ldr	r4, [pc, #44]	@ (800b198 <global_stdio_init.part.0+0x34>)
 800b16a:	4a0c      	ldr	r2, [pc, #48]	@ (800b19c <global_stdio_init.part.0+0x38>)
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	4620      	mov	r0, r4
 800b170:	2200      	movs	r2, #0
 800b172:	2104      	movs	r1, #4
 800b174:	f7ff ff94 	bl	800b0a0 <std>
 800b178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b17c:	2201      	movs	r2, #1
 800b17e:	2109      	movs	r1, #9
 800b180:	f7ff ff8e 	bl	800b0a0 <std>
 800b184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b188:	2202      	movs	r2, #2
 800b18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b18e:	2112      	movs	r1, #18
 800b190:	f7ff bf86 	b.w	800b0a0 <std>
 800b194:	20002890 	.word	0x20002890
 800b198:	20002758 	.word	0x20002758
 800b19c:	0800b10d 	.word	0x0800b10d

0800b1a0 <__sfp_lock_acquire>:
 800b1a0:	4801      	ldr	r0, [pc, #4]	@ (800b1a8 <__sfp_lock_acquire+0x8>)
 800b1a2:	f000 ba6e 	b.w	800b682 <__retarget_lock_acquire_recursive>
 800b1a6:	bf00      	nop
 800b1a8:	20002899 	.word	0x20002899

0800b1ac <__sfp_lock_release>:
 800b1ac:	4801      	ldr	r0, [pc, #4]	@ (800b1b4 <__sfp_lock_release+0x8>)
 800b1ae:	f000 ba69 	b.w	800b684 <__retarget_lock_release_recursive>
 800b1b2:	bf00      	nop
 800b1b4:	20002899 	.word	0x20002899

0800b1b8 <__sinit>:
 800b1b8:	b510      	push	{r4, lr}
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	f7ff fff0 	bl	800b1a0 <__sfp_lock_acquire>
 800b1c0:	6a23      	ldr	r3, [r4, #32]
 800b1c2:	b11b      	cbz	r3, 800b1cc <__sinit+0x14>
 800b1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c8:	f7ff bff0 	b.w	800b1ac <__sfp_lock_release>
 800b1cc:	4b04      	ldr	r3, [pc, #16]	@ (800b1e0 <__sinit+0x28>)
 800b1ce:	6223      	str	r3, [r4, #32]
 800b1d0:	4b04      	ldr	r3, [pc, #16]	@ (800b1e4 <__sinit+0x2c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1f5      	bne.n	800b1c4 <__sinit+0xc>
 800b1d8:	f7ff ffc4 	bl	800b164 <global_stdio_init.part.0>
 800b1dc:	e7f2      	b.n	800b1c4 <__sinit+0xc>
 800b1de:	bf00      	nop
 800b1e0:	0800b125 	.word	0x0800b125
 800b1e4:	20002890 	.word	0x20002890

0800b1e8 <_fwalk_sglue>:
 800b1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	4688      	mov	r8, r1
 800b1f0:	4614      	mov	r4, r2
 800b1f2:	2600      	movs	r6, #0
 800b1f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1f8:	f1b9 0901 	subs.w	r9, r9, #1
 800b1fc:	d505      	bpl.n	800b20a <_fwalk_sglue+0x22>
 800b1fe:	6824      	ldr	r4, [r4, #0]
 800b200:	2c00      	cmp	r4, #0
 800b202:	d1f7      	bne.n	800b1f4 <_fwalk_sglue+0xc>
 800b204:	4630      	mov	r0, r6
 800b206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20a:	89ab      	ldrh	r3, [r5, #12]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d907      	bls.n	800b220 <_fwalk_sglue+0x38>
 800b210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b214:	3301      	adds	r3, #1
 800b216:	d003      	beq.n	800b220 <_fwalk_sglue+0x38>
 800b218:	4629      	mov	r1, r5
 800b21a:	4638      	mov	r0, r7
 800b21c:	47c0      	blx	r8
 800b21e:	4306      	orrs	r6, r0
 800b220:	3568      	adds	r5, #104	@ 0x68
 800b222:	e7e9      	b.n	800b1f8 <_fwalk_sglue+0x10>

0800b224 <iprintf>:
 800b224:	b40f      	push	{r0, r1, r2, r3}
 800b226:	b507      	push	{r0, r1, r2, lr}
 800b228:	4906      	ldr	r1, [pc, #24]	@ (800b244 <iprintf+0x20>)
 800b22a:	ab04      	add	r3, sp, #16
 800b22c:	6808      	ldr	r0, [r1, #0]
 800b22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b232:	6881      	ldr	r1, [r0, #8]
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	f001 fe7b 	bl	800cf30 <_vfiprintf_r>
 800b23a:	b003      	add	sp, #12
 800b23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b240:	b004      	add	sp, #16
 800b242:	4770      	bx	lr
 800b244:	20000030 	.word	0x20000030

0800b248 <_puts_r>:
 800b248:	6a03      	ldr	r3, [r0, #32]
 800b24a:	b570      	push	{r4, r5, r6, lr}
 800b24c:	6884      	ldr	r4, [r0, #8]
 800b24e:	4605      	mov	r5, r0
 800b250:	460e      	mov	r6, r1
 800b252:	b90b      	cbnz	r3, 800b258 <_puts_r+0x10>
 800b254:	f7ff ffb0 	bl	800b1b8 <__sinit>
 800b258:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b25a:	07db      	lsls	r3, r3, #31
 800b25c:	d405      	bmi.n	800b26a <_puts_r+0x22>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	0598      	lsls	r0, r3, #22
 800b262:	d402      	bmi.n	800b26a <_puts_r+0x22>
 800b264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b266:	f000 fa0c 	bl	800b682 <__retarget_lock_acquire_recursive>
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	0719      	lsls	r1, r3, #28
 800b26e:	d502      	bpl.n	800b276 <_puts_r+0x2e>
 800b270:	6923      	ldr	r3, [r4, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d135      	bne.n	800b2e2 <_puts_r+0x9a>
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	f000 f91d 	bl	800b4b8 <__swsetup_r>
 800b27e:	b380      	cbz	r0, 800b2e2 <_puts_r+0x9a>
 800b280:	f04f 35ff 	mov.w	r5, #4294967295
 800b284:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b286:	07da      	lsls	r2, r3, #31
 800b288:	d405      	bmi.n	800b296 <_puts_r+0x4e>
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	059b      	lsls	r3, r3, #22
 800b28e:	d402      	bmi.n	800b296 <_puts_r+0x4e>
 800b290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b292:	f000 f9f7 	bl	800b684 <__retarget_lock_release_recursive>
 800b296:	4628      	mov	r0, r5
 800b298:	bd70      	pop	{r4, r5, r6, pc}
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da04      	bge.n	800b2a8 <_puts_r+0x60>
 800b29e:	69a2      	ldr	r2, [r4, #24]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	dc17      	bgt.n	800b2d4 <_puts_r+0x8c>
 800b2a4:	290a      	cmp	r1, #10
 800b2a6:	d015      	beq.n	800b2d4 <_puts_r+0x8c>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	6022      	str	r2, [r4, #0]
 800b2ae:	7019      	strb	r1, [r3, #0]
 800b2b0:	68a3      	ldr	r3, [r4, #8]
 800b2b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	60a3      	str	r3, [r4, #8]
 800b2ba:	2900      	cmp	r1, #0
 800b2bc:	d1ed      	bne.n	800b29a <_puts_r+0x52>
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da11      	bge.n	800b2e6 <_puts_r+0x9e>
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	210a      	movs	r1, #10
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f000 f8b7 	bl	800b43a <__swbuf_r>
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d0d7      	beq.n	800b280 <_puts_r+0x38>
 800b2d0:	250a      	movs	r5, #10
 800b2d2:	e7d7      	b.n	800b284 <_puts_r+0x3c>
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f000 f8af 	bl	800b43a <__swbuf_r>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d1e7      	bne.n	800b2b0 <_puts_r+0x68>
 800b2e0:	e7ce      	b.n	800b280 <_puts_r+0x38>
 800b2e2:	3e01      	subs	r6, #1
 800b2e4:	e7e4      	b.n	800b2b0 <_puts_r+0x68>
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	1c5a      	adds	r2, r3, #1
 800b2ea:	6022      	str	r2, [r4, #0]
 800b2ec:	220a      	movs	r2, #10
 800b2ee:	701a      	strb	r2, [r3, #0]
 800b2f0:	e7ee      	b.n	800b2d0 <_puts_r+0x88>
	...

0800b2f4 <puts>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	@ (800b300 <puts+0xc>)
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	f7ff bfa5 	b.w	800b248 <_puts_r>
 800b2fe:	bf00      	nop
 800b300:	20000030 	.word	0x20000030

0800b304 <sniprintf>:
 800b304:	b40c      	push	{r2, r3}
 800b306:	b530      	push	{r4, r5, lr}
 800b308:	4b18      	ldr	r3, [pc, #96]	@ (800b36c <sniprintf+0x68>)
 800b30a:	1e0c      	subs	r4, r1, #0
 800b30c:	681d      	ldr	r5, [r3, #0]
 800b30e:	b09d      	sub	sp, #116	@ 0x74
 800b310:	da08      	bge.n	800b324 <sniprintf+0x20>
 800b312:	238b      	movs	r3, #139	@ 0x8b
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	f04f 30ff 	mov.w	r0, #4294967295
 800b31a:	b01d      	add	sp, #116	@ 0x74
 800b31c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b320:	b002      	add	sp, #8
 800b322:	4770      	bx	lr
 800b324:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b328:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b32c:	f04f 0300 	mov.w	r3, #0
 800b330:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b332:	bf14      	ite	ne
 800b334:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b338:	4623      	moveq	r3, r4
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	9307      	str	r3, [sp, #28]
 800b33e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b342:	9002      	str	r0, [sp, #8]
 800b344:	9006      	str	r0, [sp, #24]
 800b346:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b34a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b34c:	ab21      	add	r3, sp, #132	@ 0x84
 800b34e:	a902      	add	r1, sp, #8
 800b350:	4628      	mov	r0, r5
 800b352:	9301      	str	r3, [sp, #4]
 800b354:	f001 fcc6 	bl	800cce4 <_svfiprintf_r>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	bfbc      	itt	lt
 800b35c:	238b      	movlt	r3, #139	@ 0x8b
 800b35e:	602b      	strlt	r3, [r5, #0]
 800b360:	2c00      	cmp	r4, #0
 800b362:	d0da      	beq.n	800b31a <sniprintf+0x16>
 800b364:	9b02      	ldr	r3, [sp, #8]
 800b366:	2200      	movs	r2, #0
 800b368:	701a      	strb	r2, [r3, #0]
 800b36a:	e7d6      	b.n	800b31a <sniprintf+0x16>
 800b36c:	20000030 	.word	0x20000030

0800b370 <siprintf>:
 800b370:	b40e      	push	{r1, r2, r3}
 800b372:	b510      	push	{r4, lr}
 800b374:	b09d      	sub	sp, #116	@ 0x74
 800b376:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b378:	9002      	str	r0, [sp, #8]
 800b37a:	9006      	str	r0, [sp, #24]
 800b37c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b380:	480a      	ldr	r0, [pc, #40]	@ (800b3ac <siprintf+0x3c>)
 800b382:	9107      	str	r1, [sp, #28]
 800b384:	9104      	str	r1, [sp, #16]
 800b386:	490a      	ldr	r1, [pc, #40]	@ (800b3b0 <siprintf+0x40>)
 800b388:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38c:	9105      	str	r1, [sp, #20]
 800b38e:	2400      	movs	r4, #0
 800b390:	a902      	add	r1, sp, #8
 800b392:	6800      	ldr	r0, [r0, #0]
 800b394:	9301      	str	r3, [sp, #4]
 800b396:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b398:	f001 fca4 	bl	800cce4 <_svfiprintf_r>
 800b39c:	9b02      	ldr	r3, [sp, #8]
 800b39e:	701c      	strb	r4, [r3, #0]
 800b3a0:	b01d      	add	sp, #116	@ 0x74
 800b3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a6:	b003      	add	sp, #12
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	20000030 	.word	0x20000030
 800b3b0:	ffff0208 	.word	0xffff0208

0800b3b4 <__sread>:
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3bc:	f000 f912 	bl	800b5e4 <_read_r>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	bfab      	itete	ge
 800b3c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3c8:	181b      	addge	r3, r3, r0
 800b3ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3ce:	bfac      	ite	ge
 800b3d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3d2:	81a3      	strhlt	r3, [r4, #12]
 800b3d4:	bd10      	pop	{r4, pc}

0800b3d6 <__swrite>:
 800b3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	461f      	mov	r7, r3
 800b3dc:	898b      	ldrh	r3, [r1, #12]
 800b3de:	05db      	lsls	r3, r3, #23
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	4616      	mov	r6, r2
 800b3e6:	d505      	bpl.n	800b3f4 <__swrite+0x1e>
 800b3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f000 f8e6 	bl	800b5c0 <_lseek_r>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3fe:	81a3      	strh	r3, [r4, #12]
 800b400:	4632      	mov	r2, r6
 800b402:	463b      	mov	r3, r7
 800b404:	4628      	mov	r0, r5
 800b406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b40a:	f000 b8fd 	b.w	800b608 <_write_r>

0800b40e <__sseek>:
 800b40e:	b510      	push	{r4, lr}
 800b410:	460c      	mov	r4, r1
 800b412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b416:	f000 f8d3 	bl	800b5c0 <_lseek_r>
 800b41a:	1c43      	adds	r3, r0, #1
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	bf15      	itete	ne
 800b420:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b422:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b426:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b42a:	81a3      	strheq	r3, [r4, #12]
 800b42c:	bf18      	it	ne
 800b42e:	81a3      	strhne	r3, [r4, #12]
 800b430:	bd10      	pop	{r4, pc}

0800b432 <__sclose>:
 800b432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b436:	f000 b8b3 	b.w	800b5a0 <_close_r>

0800b43a <__swbuf_r>:
 800b43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43c:	460e      	mov	r6, r1
 800b43e:	4614      	mov	r4, r2
 800b440:	4605      	mov	r5, r0
 800b442:	b118      	cbz	r0, 800b44c <__swbuf_r+0x12>
 800b444:	6a03      	ldr	r3, [r0, #32]
 800b446:	b90b      	cbnz	r3, 800b44c <__swbuf_r+0x12>
 800b448:	f7ff feb6 	bl	800b1b8 <__sinit>
 800b44c:	69a3      	ldr	r3, [r4, #24]
 800b44e:	60a3      	str	r3, [r4, #8]
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	071a      	lsls	r2, r3, #28
 800b454:	d501      	bpl.n	800b45a <__swbuf_r+0x20>
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	b943      	cbnz	r3, 800b46c <__swbuf_r+0x32>
 800b45a:	4621      	mov	r1, r4
 800b45c:	4628      	mov	r0, r5
 800b45e:	f000 f82b 	bl	800b4b8 <__swsetup_r>
 800b462:	b118      	cbz	r0, 800b46c <__swbuf_r+0x32>
 800b464:	f04f 37ff 	mov.w	r7, #4294967295
 800b468:	4638      	mov	r0, r7
 800b46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	6922      	ldr	r2, [r4, #16]
 800b470:	1a98      	subs	r0, r3, r2
 800b472:	6963      	ldr	r3, [r4, #20]
 800b474:	b2f6      	uxtb	r6, r6
 800b476:	4283      	cmp	r3, r0
 800b478:	4637      	mov	r7, r6
 800b47a:	dc05      	bgt.n	800b488 <__swbuf_r+0x4e>
 800b47c:	4621      	mov	r1, r4
 800b47e:	4628      	mov	r0, r5
 800b480:	f001 fef2 	bl	800d268 <_fflush_r>
 800b484:	2800      	cmp	r0, #0
 800b486:	d1ed      	bne.n	800b464 <__swbuf_r+0x2a>
 800b488:	68a3      	ldr	r3, [r4, #8]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	60a3      	str	r3, [r4, #8]
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	1c5a      	adds	r2, r3, #1
 800b492:	6022      	str	r2, [r4, #0]
 800b494:	701e      	strb	r6, [r3, #0]
 800b496:	6962      	ldr	r2, [r4, #20]
 800b498:	1c43      	adds	r3, r0, #1
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d004      	beq.n	800b4a8 <__swbuf_r+0x6e>
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	07db      	lsls	r3, r3, #31
 800b4a2:	d5e1      	bpl.n	800b468 <__swbuf_r+0x2e>
 800b4a4:	2e0a      	cmp	r6, #10
 800b4a6:	d1df      	bne.n	800b468 <__swbuf_r+0x2e>
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f001 fedc 	bl	800d268 <_fflush_r>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d0d9      	beq.n	800b468 <__swbuf_r+0x2e>
 800b4b4:	e7d6      	b.n	800b464 <__swbuf_r+0x2a>
	...

0800b4b8 <__swsetup_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4b29      	ldr	r3, [pc, #164]	@ (800b560 <__swsetup_r+0xa8>)
 800b4bc:	4605      	mov	r5, r0
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	b118      	cbz	r0, 800b4cc <__swsetup_r+0x14>
 800b4c4:	6a03      	ldr	r3, [r0, #32]
 800b4c6:	b90b      	cbnz	r3, 800b4cc <__swsetup_r+0x14>
 800b4c8:	f7ff fe76 	bl	800b1b8 <__sinit>
 800b4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d0:	0719      	lsls	r1, r3, #28
 800b4d2:	d422      	bmi.n	800b51a <__swsetup_r+0x62>
 800b4d4:	06da      	lsls	r2, r3, #27
 800b4d6:	d407      	bmi.n	800b4e8 <__swsetup_r+0x30>
 800b4d8:	2209      	movs	r2, #9
 800b4da:	602a      	str	r2, [r5, #0]
 800b4dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e6:	e033      	b.n	800b550 <__swsetup_r+0x98>
 800b4e8:	0758      	lsls	r0, r3, #29
 800b4ea:	d512      	bpl.n	800b512 <__swsetup_r+0x5a>
 800b4ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4ee:	b141      	cbz	r1, 800b502 <__swsetup_r+0x4a>
 800b4f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4f4:	4299      	cmp	r1, r3
 800b4f6:	d002      	beq.n	800b4fe <__swsetup_r+0x46>
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f000 ff1d 	bl	800c338 <_free_r>
 800b4fe:	2300      	movs	r3, #0
 800b500:	6363      	str	r3, [r4, #52]	@ 0x34
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	2300      	movs	r3, #0
 800b50c:	6063      	str	r3, [r4, #4]
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f043 0308 	orr.w	r3, r3, #8
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	b94b      	cbnz	r3, 800b532 <__swsetup_r+0x7a>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b528:	d003      	beq.n	800b532 <__swsetup_r+0x7a>
 800b52a:	4621      	mov	r1, r4
 800b52c:	4628      	mov	r0, r5
 800b52e:	f001 fee9 	bl	800d304 <__smakebuf_r>
 800b532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b536:	f013 0201 	ands.w	r2, r3, #1
 800b53a:	d00a      	beq.n	800b552 <__swsetup_r+0x9a>
 800b53c:	2200      	movs	r2, #0
 800b53e:	60a2      	str	r2, [r4, #8]
 800b540:	6962      	ldr	r2, [r4, #20]
 800b542:	4252      	negs	r2, r2
 800b544:	61a2      	str	r2, [r4, #24]
 800b546:	6922      	ldr	r2, [r4, #16]
 800b548:	b942      	cbnz	r2, 800b55c <__swsetup_r+0xa4>
 800b54a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b54e:	d1c5      	bne.n	800b4dc <__swsetup_r+0x24>
 800b550:	bd38      	pop	{r3, r4, r5, pc}
 800b552:	0799      	lsls	r1, r3, #30
 800b554:	bf58      	it	pl
 800b556:	6962      	ldrpl	r2, [r4, #20]
 800b558:	60a2      	str	r2, [r4, #8]
 800b55a:	e7f4      	b.n	800b546 <__swsetup_r+0x8e>
 800b55c:	2000      	movs	r0, #0
 800b55e:	e7f7      	b.n	800b550 <__swsetup_r+0x98>
 800b560:	20000030 	.word	0x20000030

0800b564 <memset>:
 800b564:	4402      	add	r2, r0
 800b566:	4603      	mov	r3, r0
 800b568:	4293      	cmp	r3, r2
 800b56a:	d100      	bne.n	800b56e <memset+0xa>
 800b56c:	4770      	bx	lr
 800b56e:	f803 1b01 	strb.w	r1, [r3], #1
 800b572:	e7f9      	b.n	800b568 <memset+0x4>

0800b574 <strncmp>:
 800b574:	b510      	push	{r4, lr}
 800b576:	b16a      	cbz	r2, 800b594 <strncmp+0x20>
 800b578:	3901      	subs	r1, #1
 800b57a:	1884      	adds	r4, r0, r2
 800b57c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b580:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b584:	429a      	cmp	r2, r3
 800b586:	d103      	bne.n	800b590 <strncmp+0x1c>
 800b588:	42a0      	cmp	r0, r4
 800b58a:	d001      	beq.n	800b590 <strncmp+0x1c>
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	d1f5      	bne.n	800b57c <strncmp+0x8>
 800b590:	1ad0      	subs	r0, r2, r3
 800b592:	bd10      	pop	{r4, pc}
 800b594:	4610      	mov	r0, r2
 800b596:	e7fc      	b.n	800b592 <strncmp+0x1e>

0800b598 <_localeconv_r>:
 800b598:	4800      	ldr	r0, [pc, #0]	@ (800b59c <_localeconv_r+0x4>)
 800b59a:	4770      	bx	lr
 800b59c:	20000170 	.word	0x20000170

0800b5a0 <_close_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4d06      	ldr	r5, [pc, #24]	@ (800b5bc <_close_r+0x1c>)
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	4608      	mov	r0, r1
 800b5aa:	602b      	str	r3, [r5, #0]
 800b5ac:	f7f6 ff74 	bl	8002498 <_close>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	d102      	bne.n	800b5ba <_close_r+0x1a>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	b103      	cbz	r3, 800b5ba <_close_r+0x1a>
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	20002894 	.word	0x20002894

0800b5c0 <_lseek_r>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	4d07      	ldr	r5, [pc, #28]	@ (800b5e0 <_lseek_r+0x20>)
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	4608      	mov	r0, r1
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	602a      	str	r2, [r5, #0]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	f7f6 ff89 	bl	80024e6 <_lseek>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d102      	bne.n	800b5de <_lseek_r+0x1e>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	b103      	cbz	r3, 800b5de <_lseek_r+0x1e>
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	bd38      	pop	{r3, r4, r5, pc}
 800b5e0:	20002894 	.word	0x20002894

0800b5e4 <_read_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4d07      	ldr	r5, [pc, #28]	@ (800b604 <_read_r+0x20>)
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	4608      	mov	r0, r1
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	602a      	str	r2, [r5, #0]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f7f6 ff17 	bl	8002426 <_read>
 800b5f8:	1c43      	adds	r3, r0, #1
 800b5fa:	d102      	bne.n	800b602 <_read_r+0x1e>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	b103      	cbz	r3, 800b602 <_read_r+0x1e>
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	bd38      	pop	{r3, r4, r5, pc}
 800b604:	20002894 	.word	0x20002894

0800b608 <_write_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4d07      	ldr	r5, [pc, #28]	@ (800b628 <_write_r+0x20>)
 800b60c:	4604      	mov	r4, r0
 800b60e:	4608      	mov	r0, r1
 800b610:	4611      	mov	r1, r2
 800b612:	2200      	movs	r2, #0
 800b614:	602a      	str	r2, [r5, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	f7f6 ff22 	bl	8002460 <_write>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_write_r+0x1e>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_write_r+0x1e>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	20002894 	.word	0x20002894

0800b62c <__errno>:
 800b62c:	4b01      	ldr	r3, [pc, #4]	@ (800b634 <__errno+0x8>)
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	20000030 	.word	0x20000030

0800b638 <__libc_init_array>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	4d0d      	ldr	r5, [pc, #52]	@ (800b670 <__libc_init_array+0x38>)
 800b63c:	4c0d      	ldr	r4, [pc, #52]	@ (800b674 <__libc_init_array+0x3c>)
 800b63e:	1b64      	subs	r4, r4, r5
 800b640:	10a4      	asrs	r4, r4, #2
 800b642:	2600      	movs	r6, #0
 800b644:	42a6      	cmp	r6, r4
 800b646:	d109      	bne.n	800b65c <__libc_init_array+0x24>
 800b648:	4d0b      	ldr	r5, [pc, #44]	@ (800b678 <__libc_init_array+0x40>)
 800b64a:	4c0c      	ldr	r4, [pc, #48]	@ (800b67c <__libc_init_array+0x44>)
 800b64c:	f001 ffd6 	bl	800d5fc <_init>
 800b650:	1b64      	subs	r4, r4, r5
 800b652:	10a4      	asrs	r4, r4, #2
 800b654:	2600      	movs	r6, #0
 800b656:	42a6      	cmp	r6, r4
 800b658:	d105      	bne.n	800b666 <__libc_init_array+0x2e>
 800b65a:	bd70      	pop	{r4, r5, r6, pc}
 800b65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b660:	4798      	blx	r3
 800b662:	3601      	adds	r6, #1
 800b664:	e7ee      	b.n	800b644 <__libc_init_array+0xc>
 800b666:	f855 3b04 	ldr.w	r3, [r5], #4
 800b66a:	4798      	blx	r3
 800b66c:	3601      	adds	r6, #1
 800b66e:	e7f2      	b.n	800b656 <__libc_init_array+0x1e>
 800b670:	0800e38c 	.word	0x0800e38c
 800b674:	0800e38c 	.word	0x0800e38c
 800b678:	0800e38c 	.word	0x0800e38c
 800b67c:	0800e390 	.word	0x0800e390

0800b680 <__retarget_lock_init_recursive>:
 800b680:	4770      	bx	lr

0800b682 <__retarget_lock_acquire_recursive>:
 800b682:	4770      	bx	lr

0800b684 <__retarget_lock_release_recursive>:
 800b684:	4770      	bx	lr

0800b686 <quorem>:
 800b686:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68a:	6903      	ldr	r3, [r0, #16]
 800b68c:	690c      	ldr	r4, [r1, #16]
 800b68e:	42a3      	cmp	r3, r4
 800b690:	4607      	mov	r7, r0
 800b692:	db7e      	blt.n	800b792 <quorem+0x10c>
 800b694:	3c01      	subs	r4, #1
 800b696:	f101 0814 	add.w	r8, r1, #20
 800b69a:	00a3      	lsls	r3, r4, #2
 800b69c:	f100 0514 	add.w	r5, r0, #20
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6a6:	9301      	str	r3, [sp, #4]
 800b6a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6bc:	d32e      	bcc.n	800b71c <quorem+0x96>
 800b6be:	f04f 0a00 	mov.w	sl, #0
 800b6c2:	46c4      	mov	ip, r8
 800b6c4:	46ae      	mov	lr, r5
 800b6c6:	46d3      	mov	fp, sl
 800b6c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b6cc:	b298      	uxth	r0, r3
 800b6ce:	fb06 a000 	mla	r0, r6, r0, sl
 800b6d2:	0c02      	lsrs	r2, r0, #16
 800b6d4:	0c1b      	lsrs	r3, r3, #16
 800b6d6:	fb06 2303 	mla	r3, r6, r3, r2
 800b6da:	f8de 2000 	ldr.w	r2, [lr]
 800b6de:	b280      	uxth	r0, r0
 800b6e0:	b292      	uxth	r2, r2
 800b6e2:	1a12      	subs	r2, r2, r0
 800b6e4:	445a      	add	r2, fp
 800b6e6:	f8de 0000 	ldr.w	r0, [lr]
 800b6ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b6f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b6f8:	b292      	uxth	r2, r2
 800b6fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6fe:	45e1      	cmp	r9, ip
 800b700:	f84e 2b04 	str.w	r2, [lr], #4
 800b704:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b708:	d2de      	bcs.n	800b6c8 <quorem+0x42>
 800b70a:	9b00      	ldr	r3, [sp, #0]
 800b70c:	58eb      	ldr	r3, [r5, r3]
 800b70e:	b92b      	cbnz	r3, 800b71c <quorem+0x96>
 800b710:	9b01      	ldr	r3, [sp, #4]
 800b712:	3b04      	subs	r3, #4
 800b714:	429d      	cmp	r5, r3
 800b716:	461a      	mov	r2, r3
 800b718:	d32f      	bcc.n	800b77a <quorem+0xf4>
 800b71a:	613c      	str	r4, [r7, #16]
 800b71c:	4638      	mov	r0, r7
 800b71e:	f001 f97d 	bl	800ca1c <__mcmp>
 800b722:	2800      	cmp	r0, #0
 800b724:	db25      	blt.n	800b772 <quorem+0xec>
 800b726:	4629      	mov	r1, r5
 800b728:	2000      	movs	r0, #0
 800b72a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b72e:	f8d1 c000 	ldr.w	ip, [r1]
 800b732:	fa1f fe82 	uxth.w	lr, r2
 800b736:	fa1f f38c 	uxth.w	r3, ip
 800b73a:	eba3 030e 	sub.w	r3, r3, lr
 800b73e:	4403      	add	r3, r0
 800b740:	0c12      	lsrs	r2, r2, #16
 800b742:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b746:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b750:	45c1      	cmp	r9, r8
 800b752:	f841 3b04 	str.w	r3, [r1], #4
 800b756:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b75a:	d2e6      	bcs.n	800b72a <quorem+0xa4>
 800b75c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b760:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b764:	b922      	cbnz	r2, 800b770 <quorem+0xea>
 800b766:	3b04      	subs	r3, #4
 800b768:	429d      	cmp	r5, r3
 800b76a:	461a      	mov	r2, r3
 800b76c:	d30b      	bcc.n	800b786 <quorem+0x100>
 800b76e:	613c      	str	r4, [r7, #16]
 800b770:	3601      	adds	r6, #1
 800b772:	4630      	mov	r0, r6
 800b774:	b003      	add	sp, #12
 800b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77a:	6812      	ldr	r2, [r2, #0]
 800b77c:	3b04      	subs	r3, #4
 800b77e:	2a00      	cmp	r2, #0
 800b780:	d1cb      	bne.n	800b71a <quorem+0x94>
 800b782:	3c01      	subs	r4, #1
 800b784:	e7c6      	b.n	800b714 <quorem+0x8e>
 800b786:	6812      	ldr	r2, [r2, #0]
 800b788:	3b04      	subs	r3, #4
 800b78a:	2a00      	cmp	r2, #0
 800b78c:	d1ef      	bne.n	800b76e <quorem+0xe8>
 800b78e:	3c01      	subs	r4, #1
 800b790:	e7ea      	b.n	800b768 <quorem+0xe2>
 800b792:	2000      	movs	r0, #0
 800b794:	e7ee      	b.n	800b774 <quorem+0xee>
	...

0800b798 <_dtoa_r>:
 800b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79c:	69c7      	ldr	r7, [r0, #28]
 800b79e:	b097      	sub	sp, #92	@ 0x5c
 800b7a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b7a4:	ec55 4b10 	vmov	r4, r5, d0
 800b7a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b7aa:	9107      	str	r1, [sp, #28]
 800b7ac:	4681      	mov	r9, r0
 800b7ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800b7b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7b2:	b97f      	cbnz	r7, 800b7d4 <_dtoa_r+0x3c>
 800b7b4:	2010      	movs	r0, #16
 800b7b6:	f000 fe09 	bl	800c3cc <malloc>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	f8c9 001c 	str.w	r0, [r9, #28]
 800b7c0:	b920      	cbnz	r0, 800b7cc <_dtoa_r+0x34>
 800b7c2:	4ba9      	ldr	r3, [pc, #676]	@ (800ba68 <_dtoa_r+0x2d0>)
 800b7c4:	21ef      	movs	r1, #239	@ 0xef
 800b7c6:	48a9      	ldr	r0, [pc, #676]	@ (800ba6c <_dtoa_r+0x2d4>)
 800b7c8:	f001 fe32 	bl	800d430 <__assert_func>
 800b7cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b7d0:	6007      	str	r7, [r0, #0]
 800b7d2:	60c7      	str	r7, [r0, #12]
 800b7d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b7d8:	6819      	ldr	r1, [r3, #0]
 800b7da:	b159      	cbz	r1, 800b7f4 <_dtoa_r+0x5c>
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	604a      	str	r2, [r1, #4]
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	4093      	lsls	r3, r2
 800b7e4:	608b      	str	r3, [r1, #8]
 800b7e6:	4648      	mov	r0, r9
 800b7e8:	f000 fee6 	bl	800c5b8 <_Bfree>
 800b7ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
 800b7f4:	1e2b      	subs	r3, r5, #0
 800b7f6:	bfb9      	ittee	lt
 800b7f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b7fc:	9305      	strlt	r3, [sp, #20]
 800b7fe:	2300      	movge	r3, #0
 800b800:	6033      	strge	r3, [r6, #0]
 800b802:	9f05      	ldr	r7, [sp, #20]
 800b804:	4b9a      	ldr	r3, [pc, #616]	@ (800ba70 <_dtoa_r+0x2d8>)
 800b806:	bfbc      	itt	lt
 800b808:	2201      	movlt	r2, #1
 800b80a:	6032      	strlt	r2, [r6, #0]
 800b80c:	43bb      	bics	r3, r7
 800b80e:	d112      	bne.n	800b836 <_dtoa_r+0x9e>
 800b810:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b812:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b81c:	4323      	orrs	r3, r4
 800b81e:	f000 855a 	beq.w	800c2d6 <_dtoa_r+0xb3e>
 800b822:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b824:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ba84 <_dtoa_r+0x2ec>
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 855c 	beq.w	800c2e6 <_dtoa_r+0xb4e>
 800b82e:	f10a 0303 	add.w	r3, sl, #3
 800b832:	f000 bd56 	b.w	800c2e2 <_dtoa_r+0xb4a>
 800b836:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b83a:	2200      	movs	r2, #0
 800b83c:	ec51 0b17 	vmov	r0, r1, d7
 800b840:	2300      	movs	r3, #0
 800b842:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b846:	f7f5 f977 	bl	8000b38 <__aeabi_dcmpeq>
 800b84a:	4680      	mov	r8, r0
 800b84c:	b158      	cbz	r0, 800b866 <_dtoa_r+0xce>
 800b84e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b850:	2301      	movs	r3, #1
 800b852:	6013      	str	r3, [r2, #0]
 800b854:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b856:	b113      	cbz	r3, 800b85e <_dtoa_r+0xc6>
 800b858:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b85a:	4b86      	ldr	r3, [pc, #536]	@ (800ba74 <_dtoa_r+0x2dc>)
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ba88 <_dtoa_r+0x2f0>
 800b862:	f000 bd40 	b.w	800c2e6 <_dtoa_r+0xb4e>
 800b866:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b86a:	aa14      	add	r2, sp, #80	@ 0x50
 800b86c:	a915      	add	r1, sp, #84	@ 0x54
 800b86e:	4648      	mov	r0, r9
 800b870:	f001 f984 	bl	800cb7c <__d2b>
 800b874:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b878:	9002      	str	r0, [sp, #8]
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	d078      	beq.n	800b970 <_dtoa_r+0x1d8>
 800b87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b880:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b888:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b88c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b890:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b894:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b898:	4619      	mov	r1, r3
 800b89a:	2200      	movs	r2, #0
 800b89c:	4b76      	ldr	r3, [pc, #472]	@ (800ba78 <_dtoa_r+0x2e0>)
 800b89e:	f7f4 fd2b 	bl	80002f8 <__aeabi_dsub>
 800b8a2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ba50 <_dtoa_r+0x2b8>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f7f4 fede 	bl	8000668 <__aeabi_dmul>
 800b8ac:	a36a      	add	r3, pc, #424	@ (adr r3, 800ba58 <_dtoa_r+0x2c0>)
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	f7f4 fd23 	bl	80002fc <__adddf3>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	f7f4 fe6a 	bl	8000594 <__aeabi_i2d>
 800b8c0:	a367      	add	r3, pc, #412	@ (adr r3, 800ba60 <_dtoa_r+0x2c8>)
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f7f4 fecf 	bl	8000668 <__aeabi_dmul>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	f7f4 fd13 	bl	80002fc <__adddf3>
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	460d      	mov	r5, r1
 800b8da:	f7f5 f975 	bl	8000bc8 <__aeabi_d2iz>
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	f7f5 f930 	bl	8000b4c <__aeabi_dcmplt>
 800b8ec:	b140      	cbz	r0, 800b900 <_dtoa_r+0x168>
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	f7f4 fe50 	bl	8000594 <__aeabi_i2d>
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	462b      	mov	r3, r5
 800b8f8:	f7f5 f91e 	bl	8000b38 <__aeabi_dcmpeq>
 800b8fc:	b900      	cbnz	r0, 800b900 <_dtoa_r+0x168>
 800b8fe:	3f01      	subs	r7, #1
 800b900:	2f16      	cmp	r7, #22
 800b902:	d852      	bhi.n	800b9aa <_dtoa_r+0x212>
 800b904:	4b5d      	ldr	r3, [pc, #372]	@ (800ba7c <_dtoa_r+0x2e4>)
 800b906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b912:	f7f5 f91b 	bl	8000b4c <__aeabi_dcmplt>
 800b916:	2800      	cmp	r0, #0
 800b918:	d049      	beq.n	800b9ae <_dtoa_r+0x216>
 800b91a:	3f01      	subs	r7, #1
 800b91c:	2300      	movs	r3, #0
 800b91e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b920:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b922:	1b9b      	subs	r3, r3, r6
 800b924:	1e5a      	subs	r2, r3, #1
 800b926:	bf45      	ittet	mi
 800b928:	f1c3 0301 	rsbmi	r3, r3, #1
 800b92c:	9300      	strmi	r3, [sp, #0]
 800b92e:	2300      	movpl	r3, #0
 800b930:	2300      	movmi	r3, #0
 800b932:	9206      	str	r2, [sp, #24]
 800b934:	bf54      	ite	pl
 800b936:	9300      	strpl	r3, [sp, #0]
 800b938:	9306      	strmi	r3, [sp, #24]
 800b93a:	2f00      	cmp	r7, #0
 800b93c:	db39      	blt.n	800b9b2 <_dtoa_r+0x21a>
 800b93e:	9b06      	ldr	r3, [sp, #24]
 800b940:	970d      	str	r7, [sp, #52]	@ 0x34
 800b942:	443b      	add	r3, r7
 800b944:	9306      	str	r3, [sp, #24]
 800b946:	2300      	movs	r3, #0
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	9b07      	ldr	r3, [sp, #28]
 800b94c:	2b09      	cmp	r3, #9
 800b94e:	d863      	bhi.n	800ba18 <_dtoa_r+0x280>
 800b950:	2b05      	cmp	r3, #5
 800b952:	bfc4      	itt	gt
 800b954:	3b04      	subgt	r3, #4
 800b956:	9307      	strgt	r3, [sp, #28]
 800b958:	9b07      	ldr	r3, [sp, #28]
 800b95a:	f1a3 0302 	sub.w	r3, r3, #2
 800b95e:	bfcc      	ite	gt
 800b960:	2400      	movgt	r4, #0
 800b962:	2401      	movle	r4, #1
 800b964:	2b03      	cmp	r3, #3
 800b966:	d863      	bhi.n	800ba30 <_dtoa_r+0x298>
 800b968:	e8df f003 	tbb	[pc, r3]
 800b96c:	2b375452 	.word	0x2b375452
 800b970:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b974:	441e      	add	r6, r3
 800b976:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b97a:	2b20      	cmp	r3, #32
 800b97c:	bfc1      	itttt	gt
 800b97e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b982:	409f      	lslgt	r7, r3
 800b984:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b988:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b98c:	bfd6      	itet	le
 800b98e:	f1c3 0320 	rsble	r3, r3, #32
 800b992:	ea47 0003 	orrgt.w	r0, r7, r3
 800b996:	fa04 f003 	lslle.w	r0, r4, r3
 800b99a:	f7f4 fdeb 	bl	8000574 <__aeabi_ui2d>
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b9a4:	3e01      	subs	r6, #1
 800b9a6:	9212      	str	r2, [sp, #72]	@ 0x48
 800b9a8:	e776      	b.n	800b898 <_dtoa_r+0x100>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e7b7      	b.n	800b91e <_dtoa_r+0x186>
 800b9ae:	9010      	str	r0, [sp, #64]	@ 0x40
 800b9b0:	e7b6      	b.n	800b920 <_dtoa_r+0x188>
 800b9b2:	9b00      	ldr	r3, [sp, #0]
 800b9b4:	1bdb      	subs	r3, r3, r7
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	427b      	negs	r3, r7
 800b9ba:	9308      	str	r3, [sp, #32]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	930d      	str	r3, [sp, #52]	@ 0x34
 800b9c0:	e7c3      	b.n	800b94a <_dtoa_r+0x1b2>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9c8:	eb07 0b03 	add.w	fp, r7, r3
 800b9cc:	f10b 0301 	add.w	r3, fp, #1
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	9303      	str	r3, [sp, #12]
 800b9d4:	bfb8      	it	lt
 800b9d6:	2301      	movlt	r3, #1
 800b9d8:	e006      	b.n	800b9e8 <_dtoa_r+0x250>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dd28      	ble.n	800ba36 <_dtoa_r+0x29e>
 800b9e4:	469b      	mov	fp, r3
 800b9e6:	9303      	str	r3, [sp, #12]
 800b9e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	2204      	movs	r2, #4
 800b9f0:	f102 0514 	add.w	r5, r2, #20
 800b9f4:	429d      	cmp	r5, r3
 800b9f6:	d926      	bls.n	800ba46 <_dtoa_r+0x2ae>
 800b9f8:	6041      	str	r1, [r0, #4]
 800b9fa:	4648      	mov	r0, r9
 800b9fc:	f000 fd9c 	bl	800c538 <_Balloc>
 800ba00:	4682      	mov	sl, r0
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d142      	bne.n	800ba8c <_dtoa_r+0x2f4>
 800ba06:	4b1e      	ldr	r3, [pc, #120]	@ (800ba80 <_dtoa_r+0x2e8>)
 800ba08:	4602      	mov	r2, r0
 800ba0a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba0e:	e6da      	b.n	800b7c6 <_dtoa_r+0x2e>
 800ba10:	2300      	movs	r3, #0
 800ba12:	e7e3      	b.n	800b9dc <_dtoa_r+0x244>
 800ba14:	2300      	movs	r3, #0
 800ba16:	e7d5      	b.n	800b9c4 <_dtoa_r+0x22c>
 800ba18:	2401      	movs	r4, #1
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9307      	str	r3, [sp, #28]
 800ba1e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ba20:	f04f 3bff 	mov.w	fp, #4294967295
 800ba24:	2200      	movs	r2, #0
 800ba26:	f8cd b00c 	str.w	fp, [sp, #12]
 800ba2a:	2312      	movs	r3, #18
 800ba2c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba2e:	e7db      	b.n	800b9e8 <_dtoa_r+0x250>
 800ba30:	2301      	movs	r3, #1
 800ba32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba34:	e7f4      	b.n	800ba20 <_dtoa_r+0x288>
 800ba36:	f04f 0b01 	mov.w	fp, #1
 800ba3a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ba3e:	465b      	mov	r3, fp
 800ba40:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ba44:	e7d0      	b.n	800b9e8 <_dtoa_r+0x250>
 800ba46:	3101      	adds	r1, #1
 800ba48:	0052      	lsls	r2, r2, #1
 800ba4a:	e7d1      	b.n	800b9f0 <_dtoa_r+0x258>
 800ba4c:	f3af 8000 	nop.w
 800ba50:	636f4361 	.word	0x636f4361
 800ba54:	3fd287a7 	.word	0x3fd287a7
 800ba58:	8b60c8b3 	.word	0x8b60c8b3
 800ba5c:	3fc68a28 	.word	0x3fc68a28
 800ba60:	509f79fb 	.word	0x509f79fb
 800ba64:	3fd34413 	.word	0x3fd34413
 800ba68:	0800e04d 	.word	0x0800e04d
 800ba6c:	0800e064 	.word	0x0800e064
 800ba70:	7ff00000 	.word	0x7ff00000
 800ba74:	0800e01d 	.word	0x0800e01d
 800ba78:	3ff80000 	.word	0x3ff80000
 800ba7c:	0800e1b8 	.word	0x0800e1b8
 800ba80:	0800e0bc 	.word	0x0800e0bc
 800ba84:	0800e049 	.word	0x0800e049
 800ba88:	0800e01c 	.word	0x0800e01c
 800ba8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba90:	6018      	str	r0, [r3, #0]
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	2b0e      	cmp	r3, #14
 800ba96:	f200 80a1 	bhi.w	800bbdc <_dtoa_r+0x444>
 800ba9a:	2c00      	cmp	r4, #0
 800ba9c:	f000 809e 	beq.w	800bbdc <_dtoa_r+0x444>
 800baa0:	2f00      	cmp	r7, #0
 800baa2:	dd33      	ble.n	800bb0c <_dtoa_r+0x374>
 800baa4:	4b9c      	ldr	r3, [pc, #624]	@ (800bd18 <_dtoa_r+0x580>)
 800baa6:	f007 020f 	and.w	r2, r7, #15
 800baaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baae:	ed93 7b00 	vldr	d7, [r3]
 800bab2:	05f8      	lsls	r0, r7, #23
 800bab4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800babc:	d516      	bpl.n	800baec <_dtoa_r+0x354>
 800babe:	4b97      	ldr	r3, [pc, #604]	@ (800bd1c <_dtoa_r+0x584>)
 800bac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bac8:	f7f4 fef8 	bl	80008bc <__aeabi_ddiv>
 800bacc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bad0:	f004 040f 	and.w	r4, r4, #15
 800bad4:	2603      	movs	r6, #3
 800bad6:	4d91      	ldr	r5, [pc, #580]	@ (800bd1c <_dtoa_r+0x584>)
 800bad8:	b954      	cbnz	r4, 800baf0 <_dtoa_r+0x358>
 800bada:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bae2:	f7f4 feeb 	bl	80008bc <__aeabi_ddiv>
 800bae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baea:	e028      	b.n	800bb3e <_dtoa_r+0x3a6>
 800baec:	2602      	movs	r6, #2
 800baee:	e7f2      	b.n	800bad6 <_dtoa_r+0x33e>
 800baf0:	07e1      	lsls	r1, r4, #31
 800baf2:	d508      	bpl.n	800bb06 <_dtoa_r+0x36e>
 800baf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800baf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bafc:	f7f4 fdb4 	bl	8000668 <__aeabi_dmul>
 800bb00:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bb04:	3601      	adds	r6, #1
 800bb06:	1064      	asrs	r4, r4, #1
 800bb08:	3508      	adds	r5, #8
 800bb0a:	e7e5      	b.n	800bad8 <_dtoa_r+0x340>
 800bb0c:	f000 80af 	beq.w	800bc6e <_dtoa_r+0x4d6>
 800bb10:	427c      	negs	r4, r7
 800bb12:	4b81      	ldr	r3, [pc, #516]	@ (800bd18 <_dtoa_r+0x580>)
 800bb14:	4d81      	ldr	r5, [pc, #516]	@ (800bd1c <_dtoa_r+0x584>)
 800bb16:	f004 020f 	and.w	r2, r4, #15
 800bb1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bb26:	f7f4 fd9f 	bl	8000668 <__aeabi_dmul>
 800bb2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb2e:	1124      	asrs	r4, r4, #4
 800bb30:	2300      	movs	r3, #0
 800bb32:	2602      	movs	r6, #2
 800bb34:	2c00      	cmp	r4, #0
 800bb36:	f040 808f 	bne.w	800bc58 <_dtoa_r+0x4c0>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1d3      	bne.n	800bae6 <_dtoa_r+0x34e>
 800bb3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb40:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 8094 	beq.w	800bc72 <_dtoa_r+0x4da>
 800bb4a:	4b75      	ldr	r3, [pc, #468]	@ (800bd20 <_dtoa_r+0x588>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	4620      	mov	r0, r4
 800bb50:	4629      	mov	r1, r5
 800bb52:	f7f4 fffb 	bl	8000b4c <__aeabi_dcmplt>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	f000 808b 	beq.w	800bc72 <_dtoa_r+0x4da>
 800bb5c:	9b03      	ldr	r3, [sp, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f000 8087 	beq.w	800bc72 <_dtoa_r+0x4da>
 800bb64:	f1bb 0f00 	cmp.w	fp, #0
 800bb68:	dd34      	ble.n	800bbd4 <_dtoa_r+0x43c>
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	4b6d      	ldr	r3, [pc, #436]	@ (800bd24 <_dtoa_r+0x58c>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	4629      	mov	r1, r5
 800bb72:	f7f4 fd79 	bl	8000668 <__aeabi_dmul>
 800bb76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb7a:	f107 38ff 	add.w	r8, r7, #4294967295
 800bb7e:	3601      	adds	r6, #1
 800bb80:	465c      	mov	r4, fp
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7f4 fd06 	bl	8000594 <__aeabi_i2d>
 800bb88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb8c:	f7f4 fd6c 	bl	8000668 <__aeabi_dmul>
 800bb90:	4b65      	ldr	r3, [pc, #404]	@ (800bd28 <_dtoa_r+0x590>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	f7f4 fbb2 	bl	80002fc <__adddf3>
 800bb98:	4605      	mov	r5, r0
 800bb9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb9e:	2c00      	cmp	r4, #0
 800bba0:	d16a      	bne.n	800bc78 <_dtoa_r+0x4e0>
 800bba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bba6:	4b61      	ldr	r3, [pc, #388]	@ (800bd2c <_dtoa_r+0x594>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f7f4 fba5 	bl	80002f8 <__aeabi_dsub>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	4633      	mov	r3, r6
 800bbba:	f7f4 ffe5 	bl	8000b88 <__aeabi_dcmpgt>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f040 8298 	bne.w	800c0f4 <_dtoa_r+0x95c>
 800bbc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbc8:	462a      	mov	r2, r5
 800bbca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bbce:	f7f4 ffbd 	bl	8000b4c <__aeabi_dcmplt>
 800bbd2:	bb38      	cbnz	r0, 800bc24 <_dtoa_r+0x48c>
 800bbd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bbd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bbdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f2c0 8157 	blt.w	800be92 <_dtoa_r+0x6fa>
 800bbe4:	2f0e      	cmp	r7, #14
 800bbe6:	f300 8154 	bgt.w	800be92 <_dtoa_r+0x6fa>
 800bbea:	4b4b      	ldr	r3, [pc, #300]	@ (800bd18 <_dtoa_r+0x580>)
 800bbec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbf0:	ed93 7b00 	vldr	d7, [r3]
 800bbf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	ed8d 7b00 	vstr	d7, [sp]
 800bbfc:	f280 80e5 	bge.w	800bdca <_dtoa_r+0x632>
 800bc00:	9b03      	ldr	r3, [sp, #12]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f300 80e1 	bgt.w	800bdca <_dtoa_r+0x632>
 800bc08:	d10c      	bne.n	800bc24 <_dtoa_r+0x48c>
 800bc0a:	4b48      	ldr	r3, [pc, #288]	@ (800bd2c <_dtoa_r+0x594>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	ec51 0b17 	vmov	r0, r1, d7
 800bc12:	f7f4 fd29 	bl	8000668 <__aeabi_dmul>
 800bc16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc1a:	f7f4 ffab 	bl	8000b74 <__aeabi_dcmpge>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	f000 8266 	beq.w	800c0f0 <_dtoa_r+0x958>
 800bc24:	2400      	movs	r4, #0
 800bc26:	4625      	mov	r5, r4
 800bc28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc2a:	4656      	mov	r6, sl
 800bc2c:	ea6f 0803 	mvn.w	r8, r3
 800bc30:	2700      	movs	r7, #0
 800bc32:	4621      	mov	r1, r4
 800bc34:	4648      	mov	r0, r9
 800bc36:	f000 fcbf 	bl	800c5b8 <_Bfree>
 800bc3a:	2d00      	cmp	r5, #0
 800bc3c:	f000 80bd 	beq.w	800bdba <_dtoa_r+0x622>
 800bc40:	b12f      	cbz	r7, 800bc4e <_dtoa_r+0x4b6>
 800bc42:	42af      	cmp	r7, r5
 800bc44:	d003      	beq.n	800bc4e <_dtoa_r+0x4b6>
 800bc46:	4639      	mov	r1, r7
 800bc48:	4648      	mov	r0, r9
 800bc4a:	f000 fcb5 	bl	800c5b8 <_Bfree>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4648      	mov	r0, r9
 800bc52:	f000 fcb1 	bl	800c5b8 <_Bfree>
 800bc56:	e0b0      	b.n	800bdba <_dtoa_r+0x622>
 800bc58:	07e2      	lsls	r2, r4, #31
 800bc5a:	d505      	bpl.n	800bc68 <_dtoa_r+0x4d0>
 800bc5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc60:	f7f4 fd02 	bl	8000668 <__aeabi_dmul>
 800bc64:	3601      	adds	r6, #1
 800bc66:	2301      	movs	r3, #1
 800bc68:	1064      	asrs	r4, r4, #1
 800bc6a:	3508      	adds	r5, #8
 800bc6c:	e762      	b.n	800bb34 <_dtoa_r+0x39c>
 800bc6e:	2602      	movs	r6, #2
 800bc70:	e765      	b.n	800bb3e <_dtoa_r+0x3a6>
 800bc72:	9c03      	ldr	r4, [sp, #12]
 800bc74:	46b8      	mov	r8, r7
 800bc76:	e784      	b.n	800bb82 <_dtoa_r+0x3ea>
 800bc78:	4b27      	ldr	r3, [pc, #156]	@ (800bd18 <_dtoa_r+0x580>)
 800bc7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc84:	4454      	add	r4, sl
 800bc86:	2900      	cmp	r1, #0
 800bc88:	d054      	beq.n	800bd34 <_dtoa_r+0x59c>
 800bc8a:	4929      	ldr	r1, [pc, #164]	@ (800bd30 <_dtoa_r+0x598>)
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	f7f4 fe15 	bl	80008bc <__aeabi_ddiv>
 800bc92:	4633      	mov	r3, r6
 800bc94:	462a      	mov	r2, r5
 800bc96:	f7f4 fb2f 	bl	80002f8 <__aeabi_dsub>
 800bc9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc9e:	4656      	mov	r6, sl
 800bca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bca4:	f7f4 ff90 	bl	8000bc8 <__aeabi_d2iz>
 800bca8:	4605      	mov	r5, r0
 800bcaa:	f7f4 fc73 	bl	8000594 <__aeabi_i2d>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcb6:	f7f4 fb1f 	bl	80002f8 <__aeabi_dsub>
 800bcba:	3530      	adds	r5, #48	@ 0x30
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcc4:	f806 5b01 	strb.w	r5, [r6], #1
 800bcc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bccc:	f7f4 ff3e 	bl	8000b4c <__aeabi_dcmplt>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d172      	bne.n	800bdba <_dtoa_r+0x622>
 800bcd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd8:	4911      	ldr	r1, [pc, #68]	@ (800bd20 <_dtoa_r+0x588>)
 800bcda:	2000      	movs	r0, #0
 800bcdc:	f7f4 fb0c 	bl	80002f8 <__aeabi_dsub>
 800bce0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bce4:	f7f4 ff32 	bl	8000b4c <__aeabi_dcmplt>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	f040 80b4 	bne.w	800be56 <_dtoa_r+0x6be>
 800bcee:	42a6      	cmp	r6, r4
 800bcf0:	f43f af70 	beq.w	800bbd4 <_dtoa_r+0x43c>
 800bcf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	@ (800bd24 <_dtoa_r+0x58c>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f7f4 fcb4 	bl	8000668 <__aeabi_dmul>
 800bd00:	4b08      	ldr	r3, [pc, #32]	@ (800bd24 <_dtoa_r+0x58c>)
 800bd02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd06:	2200      	movs	r2, #0
 800bd08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd0c:	f7f4 fcac 	bl	8000668 <__aeabi_dmul>
 800bd10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd14:	e7c4      	b.n	800bca0 <_dtoa_r+0x508>
 800bd16:	bf00      	nop
 800bd18:	0800e1b8 	.word	0x0800e1b8
 800bd1c:	0800e190 	.word	0x0800e190
 800bd20:	3ff00000 	.word	0x3ff00000
 800bd24:	40240000 	.word	0x40240000
 800bd28:	401c0000 	.word	0x401c0000
 800bd2c:	40140000 	.word	0x40140000
 800bd30:	3fe00000 	.word	0x3fe00000
 800bd34:	4631      	mov	r1, r6
 800bd36:	4628      	mov	r0, r5
 800bd38:	f7f4 fc96 	bl	8000668 <__aeabi_dmul>
 800bd3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd40:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bd42:	4656      	mov	r6, sl
 800bd44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd48:	f7f4 ff3e 	bl	8000bc8 <__aeabi_d2iz>
 800bd4c:	4605      	mov	r5, r0
 800bd4e:	f7f4 fc21 	bl	8000594 <__aeabi_i2d>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd5a:	f7f4 facd 	bl	80002f8 <__aeabi_dsub>
 800bd5e:	3530      	adds	r5, #48	@ 0x30
 800bd60:	f806 5b01 	strb.w	r5, [r6], #1
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	42a6      	cmp	r6, r4
 800bd6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd6e:	f04f 0200 	mov.w	r2, #0
 800bd72:	d124      	bne.n	800bdbe <_dtoa_r+0x626>
 800bd74:	4baf      	ldr	r3, [pc, #700]	@ (800c034 <_dtoa_r+0x89c>)
 800bd76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bd7a:	f7f4 fabf 	bl	80002fc <__adddf3>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd86:	f7f4 feff 	bl	8000b88 <__aeabi_dcmpgt>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d163      	bne.n	800be56 <_dtoa_r+0x6be>
 800bd8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd92:	49a8      	ldr	r1, [pc, #672]	@ (800c034 <_dtoa_r+0x89c>)
 800bd94:	2000      	movs	r0, #0
 800bd96:	f7f4 faaf 	bl	80002f8 <__aeabi_dsub>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bda2:	f7f4 fed3 	bl	8000b4c <__aeabi_dcmplt>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f43f af14 	beq.w	800bbd4 <_dtoa_r+0x43c>
 800bdac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bdae:	1e73      	subs	r3, r6, #1
 800bdb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdb6:	2b30      	cmp	r3, #48	@ 0x30
 800bdb8:	d0f8      	beq.n	800bdac <_dtoa_r+0x614>
 800bdba:	4647      	mov	r7, r8
 800bdbc:	e03b      	b.n	800be36 <_dtoa_r+0x69e>
 800bdbe:	4b9e      	ldr	r3, [pc, #632]	@ (800c038 <_dtoa_r+0x8a0>)
 800bdc0:	f7f4 fc52 	bl	8000668 <__aeabi_dmul>
 800bdc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdc8:	e7bc      	b.n	800bd44 <_dtoa_r+0x5ac>
 800bdca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bdce:	4656      	mov	r6, sl
 800bdd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	f7f4 fd70 	bl	80008bc <__aeabi_ddiv>
 800bddc:	f7f4 fef4 	bl	8000bc8 <__aeabi_d2iz>
 800bde0:	4680      	mov	r8, r0
 800bde2:	f7f4 fbd7 	bl	8000594 <__aeabi_i2d>
 800bde6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdea:	f7f4 fc3d 	bl	8000668 <__aeabi_dmul>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bdfa:	f7f4 fa7d 	bl	80002f8 <__aeabi_dsub>
 800bdfe:	f806 4b01 	strb.w	r4, [r6], #1
 800be02:	9d03      	ldr	r5, [sp, #12]
 800be04:	eba6 040a 	sub.w	r4, r6, sl
 800be08:	42a5      	cmp	r5, r4
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	d133      	bne.n	800be78 <_dtoa_r+0x6e0>
 800be10:	f7f4 fa74 	bl	80002fc <__adddf3>
 800be14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be18:	4604      	mov	r4, r0
 800be1a:	460d      	mov	r5, r1
 800be1c:	f7f4 feb4 	bl	8000b88 <__aeabi_dcmpgt>
 800be20:	b9c0      	cbnz	r0, 800be54 <_dtoa_r+0x6bc>
 800be22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be26:	4620      	mov	r0, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	f7f4 fe85 	bl	8000b38 <__aeabi_dcmpeq>
 800be2e:	b110      	cbz	r0, 800be36 <_dtoa_r+0x69e>
 800be30:	f018 0f01 	tst.w	r8, #1
 800be34:	d10e      	bne.n	800be54 <_dtoa_r+0x6bc>
 800be36:	9902      	ldr	r1, [sp, #8]
 800be38:	4648      	mov	r0, r9
 800be3a:	f000 fbbd 	bl	800c5b8 <_Bfree>
 800be3e:	2300      	movs	r3, #0
 800be40:	7033      	strb	r3, [r6, #0]
 800be42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be44:	3701      	adds	r7, #1
 800be46:	601f      	str	r7, [r3, #0]
 800be48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 824b 	beq.w	800c2e6 <_dtoa_r+0xb4e>
 800be50:	601e      	str	r6, [r3, #0]
 800be52:	e248      	b.n	800c2e6 <_dtoa_r+0xb4e>
 800be54:	46b8      	mov	r8, r7
 800be56:	4633      	mov	r3, r6
 800be58:	461e      	mov	r6, r3
 800be5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be5e:	2a39      	cmp	r2, #57	@ 0x39
 800be60:	d106      	bne.n	800be70 <_dtoa_r+0x6d8>
 800be62:	459a      	cmp	sl, r3
 800be64:	d1f8      	bne.n	800be58 <_dtoa_r+0x6c0>
 800be66:	2230      	movs	r2, #48	@ 0x30
 800be68:	f108 0801 	add.w	r8, r8, #1
 800be6c:	f88a 2000 	strb.w	r2, [sl]
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	3201      	adds	r2, #1
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	e7a0      	b.n	800bdba <_dtoa_r+0x622>
 800be78:	4b6f      	ldr	r3, [pc, #444]	@ (800c038 <_dtoa_r+0x8a0>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	f7f4 fbf4 	bl	8000668 <__aeabi_dmul>
 800be80:	2200      	movs	r2, #0
 800be82:	2300      	movs	r3, #0
 800be84:	4604      	mov	r4, r0
 800be86:	460d      	mov	r5, r1
 800be88:	f7f4 fe56 	bl	8000b38 <__aeabi_dcmpeq>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d09f      	beq.n	800bdd0 <_dtoa_r+0x638>
 800be90:	e7d1      	b.n	800be36 <_dtoa_r+0x69e>
 800be92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be94:	2a00      	cmp	r2, #0
 800be96:	f000 80ea 	beq.w	800c06e <_dtoa_r+0x8d6>
 800be9a:	9a07      	ldr	r2, [sp, #28]
 800be9c:	2a01      	cmp	r2, #1
 800be9e:	f300 80cd 	bgt.w	800c03c <_dtoa_r+0x8a4>
 800bea2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bea4:	2a00      	cmp	r2, #0
 800bea6:	f000 80c1 	beq.w	800c02c <_dtoa_r+0x894>
 800beaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800beae:	9c08      	ldr	r4, [sp, #32]
 800beb0:	9e00      	ldr	r6, [sp, #0]
 800beb2:	9a00      	ldr	r2, [sp, #0]
 800beb4:	441a      	add	r2, r3
 800beb6:	9200      	str	r2, [sp, #0]
 800beb8:	9a06      	ldr	r2, [sp, #24]
 800beba:	2101      	movs	r1, #1
 800bebc:	441a      	add	r2, r3
 800bebe:	4648      	mov	r0, r9
 800bec0:	9206      	str	r2, [sp, #24]
 800bec2:	f000 fc2d 	bl	800c720 <__i2b>
 800bec6:	4605      	mov	r5, r0
 800bec8:	b166      	cbz	r6, 800bee4 <_dtoa_r+0x74c>
 800beca:	9b06      	ldr	r3, [sp, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	dd09      	ble.n	800bee4 <_dtoa_r+0x74c>
 800bed0:	42b3      	cmp	r3, r6
 800bed2:	9a00      	ldr	r2, [sp, #0]
 800bed4:	bfa8      	it	ge
 800bed6:	4633      	movge	r3, r6
 800bed8:	1ad2      	subs	r2, r2, r3
 800beda:	9200      	str	r2, [sp, #0]
 800bedc:	9a06      	ldr	r2, [sp, #24]
 800bede:	1af6      	subs	r6, r6, r3
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	9306      	str	r3, [sp, #24]
 800bee4:	9b08      	ldr	r3, [sp, #32]
 800bee6:	b30b      	cbz	r3, 800bf2c <_dtoa_r+0x794>
 800bee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 80c6 	beq.w	800c07c <_dtoa_r+0x8e4>
 800bef0:	2c00      	cmp	r4, #0
 800bef2:	f000 80c0 	beq.w	800c076 <_dtoa_r+0x8de>
 800bef6:	4629      	mov	r1, r5
 800bef8:	4622      	mov	r2, r4
 800befa:	4648      	mov	r0, r9
 800befc:	f000 fcc8 	bl	800c890 <__pow5mult>
 800bf00:	9a02      	ldr	r2, [sp, #8]
 800bf02:	4601      	mov	r1, r0
 800bf04:	4605      	mov	r5, r0
 800bf06:	4648      	mov	r0, r9
 800bf08:	f000 fc20 	bl	800c74c <__multiply>
 800bf0c:	9902      	ldr	r1, [sp, #8]
 800bf0e:	4680      	mov	r8, r0
 800bf10:	4648      	mov	r0, r9
 800bf12:	f000 fb51 	bl	800c5b8 <_Bfree>
 800bf16:	9b08      	ldr	r3, [sp, #32]
 800bf18:	1b1b      	subs	r3, r3, r4
 800bf1a:	9308      	str	r3, [sp, #32]
 800bf1c:	f000 80b1 	beq.w	800c082 <_dtoa_r+0x8ea>
 800bf20:	9a08      	ldr	r2, [sp, #32]
 800bf22:	4641      	mov	r1, r8
 800bf24:	4648      	mov	r0, r9
 800bf26:	f000 fcb3 	bl	800c890 <__pow5mult>
 800bf2a:	9002      	str	r0, [sp, #8]
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	4648      	mov	r0, r9
 800bf30:	f000 fbf6 	bl	800c720 <__i2b>
 800bf34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf36:	4604      	mov	r4, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f000 81d8 	beq.w	800c2ee <_dtoa_r+0xb56>
 800bf3e:	461a      	mov	r2, r3
 800bf40:	4601      	mov	r1, r0
 800bf42:	4648      	mov	r0, r9
 800bf44:	f000 fca4 	bl	800c890 <__pow5mult>
 800bf48:	9b07      	ldr	r3, [sp, #28]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	f300 809f 	bgt.w	800c090 <_dtoa_r+0x8f8>
 800bf52:	9b04      	ldr	r3, [sp, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f040 8097 	bne.w	800c088 <_dtoa_r+0x8f0>
 800bf5a:	9b05      	ldr	r3, [sp, #20]
 800bf5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f040 8093 	bne.w	800c08c <_dtoa_r+0x8f4>
 800bf66:	9b05      	ldr	r3, [sp, #20]
 800bf68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf6c:	0d1b      	lsrs	r3, r3, #20
 800bf6e:	051b      	lsls	r3, r3, #20
 800bf70:	b133      	cbz	r3, 800bf80 <_dtoa_r+0x7e8>
 800bf72:	9b00      	ldr	r3, [sp, #0]
 800bf74:	3301      	adds	r3, #1
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	9b06      	ldr	r3, [sp, #24]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	9306      	str	r3, [sp, #24]
 800bf7e:	2301      	movs	r3, #1
 800bf80:	9308      	str	r3, [sp, #32]
 800bf82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 81b8 	beq.w	800c2fa <_dtoa_r+0xb62>
 800bf8a:	6923      	ldr	r3, [r4, #16]
 800bf8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf90:	6918      	ldr	r0, [r3, #16]
 800bf92:	f000 fb79 	bl	800c688 <__hi0bits>
 800bf96:	f1c0 0020 	rsb	r0, r0, #32
 800bf9a:	9b06      	ldr	r3, [sp, #24]
 800bf9c:	4418      	add	r0, r3
 800bf9e:	f010 001f 	ands.w	r0, r0, #31
 800bfa2:	f000 8082 	beq.w	800c0aa <_dtoa_r+0x912>
 800bfa6:	f1c0 0320 	rsb	r3, r0, #32
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	dd73      	ble.n	800c096 <_dtoa_r+0x8fe>
 800bfae:	9b00      	ldr	r3, [sp, #0]
 800bfb0:	f1c0 001c 	rsb	r0, r0, #28
 800bfb4:	4403      	add	r3, r0
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	9b06      	ldr	r3, [sp, #24]
 800bfba:	4403      	add	r3, r0
 800bfbc:	4406      	add	r6, r0
 800bfbe:	9306      	str	r3, [sp, #24]
 800bfc0:	9b00      	ldr	r3, [sp, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dd05      	ble.n	800bfd2 <_dtoa_r+0x83a>
 800bfc6:	9902      	ldr	r1, [sp, #8]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f000 fcba 	bl	800c944 <__lshift>
 800bfd0:	9002      	str	r0, [sp, #8]
 800bfd2:	9b06      	ldr	r3, [sp, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dd05      	ble.n	800bfe4 <_dtoa_r+0x84c>
 800bfd8:	4621      	mov	r1, r4
 800bfda:	461a      	mov	r2, r3
 800bfdc:	4648      	mov	r0, r9
 800bfde:	f000 fcb1 	bl	800c944 <__lshift>
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d061      	beq.n	800c0ae <_dtoa_r+0x916>
 800bfea:	9802      	ldr	r0, [sp, #8]
 800bfec:	4621      	mov	r1, r4
 800bfee:	f000 fd15 	bl	800ca1c <__mcmp>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	da5b      	bge.n	800c0ae <_dtoa_r+0x916>
 800bff6:	2300      	movs	r3, #0
 800bff8:	9902      	ldr	r1, [sp, #8]
 800bffa:	220a      	movs	r2, #10
 800bffc:	4648      	mov	r0, r9
 800bffe:	f000 fafd 	bl	800c5fc <__multadd>
 800c002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c004:	9002      	str	r0, [sp, #8]
 800c006:	f107 38ff 	add.w	r8, r7, #4294967295
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 8177 	beq.w	800c2fe <_dtoa_r+0xb66>
 800c010:	4629      	mov	r1, r5
 800c012:	2300      	movs	r3, #0
 800c014:	220a      	movs	r2, #10
 800c016:	4648      	mov	r0, r9
 800c018:	f000 faf0 	bl	800c5fc <__multadd>
 800c01c:	f1bb 0f00 	cmp.w	fp, #0
 800c020:	4605      	mov	r5, r0
 800c022:	dc6f      	bgt.n	800c104 <_dtoa_r+0x96c>
 800c024:	9b07      	ldr	r3, [sp, #28]
 800c026:	2b02      	cmp	r3, #2
 800c028:	dc49      	bgt.n	800c0be <_dtoa_r+0x926>
 800c02a:	e06b      	b.n	800c104 <_dtoa_r+0x96c>
 800c02c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c02e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c032:	e73c      	b.n	800beae <_dtoa_r+0x716>
 800c034:	3fe00000 	.word	0x3fe00000
 800c038:	40240000 	.word	0x40240000
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	1e5c      	subs	r4, r3, #1
 800c040:	9b08      	ldr	r3, [sp, #32]
 800c042:	42a3      	cmp	r3, r4
 800c044:	db09      	blt.n	800c05a <_dtoa_r+0x8c2>
 800c046:	1b1c      	subs	r4, r3, r4
 800c048:	9b03      	ldr	r3, [sp, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f6bf af30 	bge.w	800beb0 <_dtoa_r+0x718>
 800c050:	9b00      	ldr	r3, [sp, #0]
 800c052:	9a03      	ldr	r2, [sp, #12]
 800c054:	1a9e      	subs	r6, r3, r2
 800c056:	2300      	movs	r3, #0
 800c058:	e72b      	b.n	800beb2 <_dtoa_r+0x71a>
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c05e:	9408      	str	r4, [sp, #32]
 800c060:	1ae3      	subs	r3, r4, r3
 800c062:	441a      	add	r2, r3
 800c064:	9e00      	ldr	r6, [sp, #0]
 800c066:	9b03      	ldr	r3, [sp, #12]
 800c068:	920d      	str	r2, [sp, #52]	@ 0x34
 800c06a:	2400      	movs	r4, #0
 800c06c:	e721      	b.n	800beb2 <_dtoa_r+0x71a>
 800c06e:	9c08      	ldr	r4, [sp, #32]
 800c070:	9e00      	ldr	r6, [sp, #0]
 800c072:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c074:	e728      	b.n	800bec8 <_dtoa_r+0x730>
 800c076:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c07a:	e751      	b.n	800bf20 <_dtoa_r+0x788>
 800c07c:	9a08      	ldr	r2, [sp, #32]
 800c07e:	9902      	ldr	r1, [sp, #8]
 800c080:	e750      	b.n	800bf24 <_dtoa_r+0x78c>
 800c082:	f8cd 8008 	str.w	r8, [sp, #8]
 800c086:	e751      	b.n	800bf2c <_dtoa_r+0x794>
 800c088:	2300      	movs	r3, #0
 800c08a:	e779      	b.n	800bf80 <_dtoa_r+0x7e8>
 800c08c:	9b04      	ldr	r3, [sp, #16]
 800c08e:	e777      	b.n	800bf80 <_dtoa_r+0x7e8>
 800c090:	2300      	movs	r3, #0
 800c092:	9308      	str	r3, [sp, #32]
 800c094:	e779      	b.n	800bf8a <_dtoa_r+0x7f2>
 800c096:	d093      	beq.n	800bfc0 <_dtoa_r+0x828>
 800c098:	9a00      	ldr	r2, [sp, #0]
 800c09a:	331c      	adds	r3, #28
 800c09c:	441a      	add	r2, r3
 800c09e:	9200      	str	r2, [sp, #0]
 800c0a0:	9a06      	ldr	r2, [sp, #24]
 800c0a2:	441a      	add	r2, r3
 800c0a4:	441e      	add	r6, r3
 800c0a6:	9206      	str	r2, [sp, #24]
 800c0a8:	e78a      	b.n	800bfc0 <_dtoa_r+0x828>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	e7f4      	b.n	800c098 <_dtoa_r+0x900>
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	46b8      	mov	r8, r7
 800c0b4:	dc20      	bgt.n	800c0f8 <_dtoa_r+0x960>
 800c0b6:	469b      	mov	fp, r3
 800c0b8:	9b07      	ldr	r3, [sp, #28]
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	dd1e      	ble.n	800c0fc <_dtoa_r+0x964>
 800c0be:	f1bb 0f00 	cmp.w	fp, #0
 800c0c2:	f47f adb1 	bne.w	800bc28 <_dtoa_r+0x490>
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	465b      	mov	r3, fp
 800c0ca:	2205      	movs	r2, #5
 800c0cc:	4648      	mov	r0, r9
 800c0ce:	f000 fa95 	bl	800c5fc <__multadd>
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	9802      	ldr	r0, [sp, #8]
 800c0d8:	f000 fca0 	bl	800ca1c <__mcmp>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	f77f ada3 	ble.w	800bc28 <_dtoa_r+0x490>
 800c0e2:	4656      	mov	r6, sl
 800c0e4:	2331      	movs	r3, #49	@ 0x31
 800c0e6:	f806 3b01 	strb.w	r3, [r6], #1
 800c0ea:	f108 0801 	add.w	r8, r8, #1
 800c0ee:	e59f      	b.n	800bc30 <_dtoa_r+0x498>
 800c0f0:	9c03      	ldr	r4, [sp, #12]
 800c0f2:	46b8      	mov	r8, r7
 800c0f4:	4625      	mov	r5, r4
 800c0f6:	e7f4      	b.n	800c0e2 <_dtoa_r+0x94a>
 800c0f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f000 8101 	beq.w	800c306 <_dtoa_r+0xb6e>
 800c104:	2e00      	cmp	r6, #0
 800c106:	dd05      	ble.n	800c114 <_dtoa_r+0x97c>
 800c108:	4629      	mov	r1, r5
 800c10a:	4632      	mov	r2, r6
 800c10c:	4648      	mov	r0, r9
 800c10e:	f000 fc19 	bl	800c944 <__lshift>
 800c112:	4605      	mov	r5, r0
 800c114:	9b08      	ldr	r3, [sp, #32]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d05c      	beq.n	800c1d4 <_dtoa_r+0xa3c>
 800c11a:	6869      	ldr	r1, [r5, #4]
 800c11c:	4648      	mov	r0, r9
 800c11e:	f000 fa0b 	bl	800c538 <_Balloc>
 800c122:	4606      	mov	r6, r0
 800c124:	b928      	cbnz	r0, 800c132 <_dtoa_r+0x99a>
 800c126:	4b82      	ldr	r3, [pc, #520]	@ (800c330 <_dtoa_r+0xb98>)
 800c128:	4602      	mov	r2, r0
 800c12a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c12e:	f7ff bb4a 	b.w	800b7c6 <_dtoa_r+0x2e>
 800c132:	692a      	ldr	r2, [r5, #16]
 800c134:	3202      	adds	r2, #2
 800c136:	0092      	lsls	r2, r2, #2
 800c138:	f105 010c 	add.w	r1, r5, #12
 800c13c:	300c      	adds	r0, #12
 800c13e:	f001 f969 	bl	800d414 <memcpy>
 800c142:	2201      	movs	r2, #1
 800c144:	4631      	mov	r1, r6
 800c146:	4648      	mov	r0, r9
 800c148:	f000 fbfc 	bl	800c944 <__lshift>
 800c14c:	f10a 0301 	add.w	r3, sl, #1
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	eb0a 030b 	add.w	r3, sl, fp
 800c156:	9308      	str	r3, [sp, #32]
 800c158:	9b04      	ldr	r3, [sp, #16]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	462f      	mov	r7, r5
 800c160:	9306      	str	r3, [sp, #24]
 800c162:	4605      	mov	r5, r0
 800c164:	9b00      	ldr	r3, [sp, #0]
 800c166:	9802      	ldr	r0, [sp, #8]
 800c168:	4621      	mov	r1, r4
 800c16a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c16e:	f7ff fa8a 	bl	800b686 <quorem>
 800c172:	4603      	mov	r3, r0
 800c174:	3330      	adds	r3, #48	@ 0x30
 800c176:	9003      	str	r0, [sp, #12]
 800c178:	4639      	mov	r1, r7
 800c17a:	9802      	ldr	r0, [sp, #8]
 800c17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c17e:	f000 fc4d 	bl	800ca1c <__mcmp>
 800c182:	462a      	mov	r2, r5
 800c184:	9004      	str	r0, [sp, #16]
 800c186:	4621      	mov	r1, r4
 800c188:	4648      	mov	r0, r9
 800c18a:	f000 fc63 	bl	800ca54 <__mdiff>
 800c18e:	68c2      	ldr	r2, [r0, #12]
 800c190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c192:	4606      	mov	r6, r0
 800c194:	bb02      	cbnz	r2, 800c1d8 <_dtoa_r+0xa40>
 800c196:	4601      	mov	r1, r0
 800c198:	9802      	ldr	r0, [sp, #8]
 800c19a:	f000 fc3f 	bl	800ca1c <__mcmp>
 800c19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4648      	mov	r0, r9
 800c1a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c1a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1aa:	f000 fa05 	bl	800c5b8 <_Bfree>
 800c1ae:	9b07      	ldr	r3, [sp, #28]
 800c1b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c1b2:	9e00      	ldr	r6, [sp, #0]
 800c1b4:	ea42 0103 	orr.w	r1, r2, r3
 800c1b8:	9b06      	ldr	r3, [sp, #24]
 800c1ba:	4319      	orrs	r1, r3
 800c1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1be:	d10d      	bne.n	800c1dc <_dtoa_r+0xa44>
 800c1c0:	2b39      	cmp	r3, #57	@ 0x39
 800c1c2:	d027      	beq.n	800c214 <_dtoa_r+0xa7c>
 800c1c4:	9a04      	ldr	r2, [sp, #16]
 800c1c6:	2a00      	cmp	r2, #0
 800c1c8:	dd01      	ble.n	800c1ce <_dtoa_r+0xa36>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	3331      	adds	r3, #49	@ 0x31
 800c1ce:	f88b 3000 	strb.w	r3, [fp]
 800c1d2:	e52e      	b.n	800bc32 <_dtoa_r+0x49a>
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	e7b9      	b.n	800c14c <_dtoa_r+0x9b4>
 800c1d8:	2201      	movs	r2, #1
 800c1da:	e7e2      	b.n	800c1a2 <_dtoa_r+0xa0a>
 800c1dc:	9904      	ldr	r1, [sp, #16]
 800c1de:	2900      	cmp	r1, #0
 800c1e0:	db04      	blt.n	800c1ec <_dtoa_r+0xa54>
 800c1e2:	9807      	ldr	r0, [sp, #28]
 800c1e4:	4301      	orrs	r1, r0
 800c1e6:	9806      	ldr	r0, [sp, #24]
 800c1e8:	4301      	orrs	r1, r0
 800c1ea:	d120      	bne.n	800c22e <_dtoa_r+0xa96>
 800c1ec:	2a00      	cmp	r2, #0
 800c1ee:	ddee      	ble.n	800c1ce <_dtoa_r+0xa36>
 800c1f0:	9902      	ldr	r1, [sp, #8]
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	4648      	mov	r0, r9
 800c1f8:	f000 fba4 	bl	800c944 <__lshift>
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	9002      	str	r0, [sp, #8]
 800c200:	f000 fc0c 	bl	800ca1c <__mcmp>
 800c204:	2800      	cmp	r0, #0
 800c206:	9b00      	ldr	r3, [sp, #0]
 800c208:	dc02      	bgt.n	800c210 <_dtoa_r+0xa78>
 800c20a:	d1e0      	bne.n	800c1ce <_dtoa_r+0xa36>
 800c20c:	07da      	lsls	r2, r3, #31
 800c20e:	d5de      	bpl.n	800c1ce <_dtoa_r+0xa36>
 800c210:	2b39      	cmp	r3, #57	@ 0x39
 800c212:	d1da      	bne.n	800c1ca <_dtoa_r+0xa32>
 800c214:	2339      	movs	r3, #57	@ 0x39
 800c216:	f88b 3000 	strb.w	r3, [fp]
 800c21a:	4633      	mov	r3, r6
 800c21c:	461e      	mov	r6, r3
 800c21e:	3b01      	subs	r3, #1
 800c220:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c224:	2a39      	cmp	r2, #57	@ 0x39
 800c226:	d04e      	beq.n	800c2c6 <_dtoa_r+0xb2e>
 800c228:	3201      	adds	r2, #1
 800c22a:	701a      	strb	r2, [r3, #0]
 800c22c:	e501      	b.n	800bc32 <_dtoa_r+0x49a>
 800c22e:	2a00      	cmp	r2, #0
 800c230:	dd03      	ble.n	800c23a <_dtoa_r+0xaa2>
 800c232:	2b39      	cmp	r3, #57	@ 0x39
 800c234:	d0ee      	beq.n	800c214 <_dtoa_r+0xa7c>
 800c236:	3301      	adds	r3, #1
 800c238:	e7c9      	b.n	800c1ce <_dtoa_r+0xa36>
 800c23a:	9a00      	ldr	r2, [sp, #0]
 800c23c:	9908      	ldr	r1, [sp, #32]
 800c23e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c242:	428a      	cmp	r2, r1
 800c244:	d028      	beq.n	800c298 <_dtoa_r+0xb00>
 800c246:	9902      	ldr	r1, [sp, #8]
 800c248:	2300      	movs	r3, #0
 800c24a:	220a      	movs	r2, #10
 800c24c:	4648      	mov	r0, r9
 800c24e:	f000 f9d5 	bl	800c5fc <__multadd>
 800c252:	42af      	cmp	r7, r5
 800c254:	9002      	str	r0, [sp, #8]
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	f04f 020a 	mov.w	r2, #10
 800c25e:	4639      	mov	r1, r7
 800c260:	4648      	mov	r0, r9
 800c262:	d107      	bne.n	800c274 <_dtoa_r+0xadc>
 800c264:	f000 f9ca 	bl	800c5fc <__multadd>
 800c268:	4607      	mov	r7, r0
 800c26a:	4605      	mov	r5, r0
 800c26c:	9b00      	ldr	r3, [sp, #0]
 800c26e:	3301      	adds	r3, #1
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	e777      	b.n	800c164 <_dtoa_r+0x9cc>
 800c274:	f000 f9c2 	bl	800c5fc <__multadd>
 800c278:	4629      	mov	r1, r5
 800c27a:	4607      	mov	r7, r0
 800c27c:	2300      	movs	r3, #0
 800c27e:	220a      	movs	r2, #10
 800c280:	4648      	mov	r0, r9
 800c282:	f000 f9bb 	bl	800c5fc <__multadd>
 800c286:	4605      	mov	r5, r0
 800c288:	e7f0      	b.n	800c26c <_dtoa_r+0xad4>
 800c28a:	f1bb 0f00 	cmp.w	fp, #0
 800c28e:	bfcc      	ite	gt
 800c290:	465e      	movgt	r6, fp
 800c292:	2601      	movle	r6, #1
 800c294:	4456      	add	r6, sl
 800c296:	2700      	movs	r7, #0
 800c298:	9902      	ldr	r1, [sp, #8]
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	2201      	movs	r2, #1
 800c29e:	4648      	mov	r0, r9
 800c2a0:	f000 fb50 	bl	800c944 <__lshift>
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	9002      	str	r0, [sp, #8]
 800c2a8:	f000 fbb8 	bl	800ca1c <__mcmp>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	dcb4      	bgt.n	800c21a <_dtoa_r+0xa82>
 800c2b0:	d102      	bne.n	800c2b8 <_dtoa_r+0xb20>
 800c2b2:	9b00      	ldr	r3, [sp, #0]
 800c2b4:	07db      	lsls	r3, r3, #31
 800c2b6:	d4b0      	bmi.n	800c21a <_dtoa_r+0xa82>
 800c2b8:	4633      	mov	r3, r6
 800c2ba:	461e      	mov	r6, r3
 800c2bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2c0:	2a30      	cmp	r2, #48	@ 0x30
 800c2c2:	d0fa      	beq.n	800c2ba <_dtoa_r+0xb22>
 800c2c4:	e4b5      	b.n	800bc32 <_dtoa_r+0x49a>
 800c2c6:	459a      	cmp	sl, r3
 800c2c8:	d1a8      	bne.n	800c21c <_dtoa_r+0xa84>
 800c2ca:	2331      	movs	r3, #49	@ 0x31
 800c2cc:	f108 0801 	add.w	r8, r8, #1
 800c2d0:	f88a 3000 	strb.w	r3, [sl]
 800c2d4:	e4ad      	b.n	800bc32 <_dtoa_r+0x49a>
 800c2d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c334 <_dtoa_r+0xb9c>
 800c2dc:	b11b      	cbz	r3, 800c2e6 <_dtoa_r+0xb4e>
 800c2de:	f10a 0308 	add.w	r3, sl, #8
 800c2e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c2e4:	6013      	str	r3, [r2, #0]
 800c2e6:	4650      	mov	r0, sl
 800c2e8:	b017      	add	sp, #92	@ 0x5c
 800c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ee:	9b07      	ldr	r3, [sp, #28]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	f77f ae2e 	ble.w	800bf52 <_dtoa_r+0x7ba>
 800c2f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2f8:	9308      	str	r3, [sp, #32]
 800c2fa:	2001      	movs	r0, #1
 800c2fc:	e64d      	b.n	800bf9a <_dtoa_r+0x802>
 800c2fe:	f1bb 0f00 	cmp.w	fp, #0
 800c302:	f77f aed9 	ble.w	800c0b8 <_dtoa_r+0x920>
 800c306:	4656      	mov	r6, sl
 800c308:	9802      	ldr	r0, [sp, #8]
 800c30a:	4621      	mov	r1, r4
 800c30c:	f7ff f9bb 	bl	800b686 <quorem>
 800c310:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c314:	f806 3b01 	strb.w	r3, [r6], #1
 800c318:	eba6 020a 	sub.w	r2, r6, sl
 800c31c:	4593      	cmp	fp, r2
 800c31e:	ddb4      	ble.n	800c28a <_dtoa_r+0xaf2>
 800c320:	9902      	ldr	r1, [sp, #8]
 800c322:	2300      	movs	r3, #0
 800c324:	220a      	movs	r2, #10
 800c326:	4648      	mov	r0, r9
 800c328:	f000 f968 	bl	800c5fc <__multadd>
 800c32c:	9002      	str	r0, [sp, #8]
 800c32e:	e7eb      	b.n	800c308 <_dtoa_r+0xb70>
 800c330:	0800e0bc 	.word	0x0800e0bc
 800c334:	0800e040 	.word	0x0800e040

0800c338 <_free_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4605      	mov	r5, r0
 800c33c:	2900      	cmp	r1, #0
 800c33e:	d041      	beq.n	800c3c4 <_free_r+0x8c>
 800c340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c344:	1f0c      	subs	r4, r1, #4
 800c346:	2b00      	cmp	r3, #0
 800c348:	bfb8      	it	lt
 800c34a:	18e4      	addlt	r4, r4, r3
 800c34c:	f000 f8e8 	bl	800c520 <__malloc_lock>
 800c350:	4a1d      	ldr	r2, [pc, #116]	@ (800c3c8 <_free_r+0x90>)
 800c352:	6813      	ldr	r3, [r2, #0]
 800c354:	b933      	cbnz	r3, 800c364 <_free_r+0x2c>
 800c356:	6063      	str	r3, [r4, #4]
 800c358:	6014      	str	r4, [r2, #0]
 800c35a:	4628      	mov	r0, r5
 800c35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c360:	f000 b8e4 	b.w	800c52c <__malloc_unlock>
 800c364:	42a3      	cmp	r3, r4
 800c366:	d908      	bls.n	800c37a <_free_r+0x42>
 800c368:	6820      	ldr	r0, [r4, #0]
 800c36a:	1821      	adds	r1, r4, r0
 800c36c:	428b      	cmp	r3, r1
 800c36e:	bf01      	itttt	eq
 800c370:	6819      	ldreq	r1, [r3, #0]
 800c372:	685b      	ldreq	r3, [r3, #4]
 800c374:	1809      	addeq	r1, r1, r0
 800c376:	6021      	streq	r1, [r4, #0]
 800c378:	e7ed      	b.n	800c356 <_free_r+0x1e>
 800c37a:	461a      	mov	r2, r3
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	b10b      	cbz	r3, 800c384 <_free_r+0x4c>
 800c380:	42a3      	cmp	r3, r4
 800c382:	d9fa      	bls.n	800c37a <_free_r+0x42>
 800c384:	6811      	ldr	r1, [r2, #0]
 800c386:	1850      	adds	r0, r2, r1
 800c388:	42a0      	cmp	r0, r4
 800c38a:	d10b      	bne.n	800c3a4 <_free_r+0x6c>
 800c38c:	6820      	ldr	r0, [r4, #0]
 800c38e:	4401      	add	r1, r0
 800c390:	1850      	adds	r0, r2, r1
 800c392:	4283      	cmp	r3, r0
 800c394:	6011      	str	r1, [r2, #0]
 800c396:	d1e0      	bne.n	800c35a <_free_r+0x22>
 800c398:	6818      	ldr	r0, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	6053      	str	r3, [r2, #4]
 800c39e:	4408      	add	r0, r1
 800c3a0:	6010      	str	r0, [r2, #0]
 800c3a2:	e7da      	b.n	800c35a <_free_r+0x22>
 800c3a4:	d902      	bls.n	800c3ac <_free_r+0x74>
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	602b      	str	r3, [r5, #0]
 800c3aa:	e7d6      	b.n	800c35a <_free_r+0x22>
 800c3ac:	6820      	ldr	r0, [r4, #0]
 800c3ae:	1821      	adds	r1, r4, r0
 800c3b0:	428b      	cmp	r3, r1
 800c3b2:	bf04      	itt	eq
 800c3b4:	6819      	ldreq	r1, [r3, #0]
 800c3b6:	685b      	ldreq	r3, [r3, #4]
 800c3b8:	6063      	str	r3, [r4, #4]
 800c3ba:	bf04      	itt	eq
 800c3bc:	1809      	addeq	r1, r1, r0
 800c3be:	6021      	streq	r1, [r4, #0]
 800c3c0:	6054      	str	r4, [r2, #4]
 800c3c2:	e7ca      	b.n	800c35a <_free_r+0x22>
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
 800c3c6:	bf00      	nop
 800c3c8:	200028a0 	.word	0x200028a0

0800c3cc <malloc>:
 800c3cc:	4b02      	ldr	r3, [pc, #8]	@ (800c3d8 <malloc+0xc>)
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	f000 b825 	b.w	800c420 <_malloc_r>
 800c3d6:	bf00      	nop
 800c3d8:	20000030 	.word	0x20000030

0800c3dc <sbrk_aligned>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	4e0f      	ldr	r6, [pc, #60]	@ (800c41c <sbrk_aligned+0x40>)
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	6831      	ldr	r1, [r6, #0]
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	b911      	cbnz	r1, 800c3ee <sbrk_aligned+0x12>
 800c3e8:	f001 f804 	bl	800d3f4 <_sbrk_r>
 800c3ec:	6030      	str	r0, [r6, #0]
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f000 ffff 	bl	800d3f4 <_sbrk_r>
 800c3f6:	1c43      	adds	r3, r0, #1
 800c3f8:	d103      	bne.n	800c402 <sbrk_aligned+0x26>
 800c3fa:	f04f 34ff 	mov.w	r4, #4294967295
 800c3fe:	4620      	mov	r0, r4
 800c400:	bd70      	pop	{r4, r5, r6, pc}
 800c402:	1cc4      	adds	r4, r0, #3
 800c404:	f024 0403 	bic.w	r4, r4, #3
 800c408:	42a0      	cmp	r0, r4
 800c40a:	d0f8      	beq.n	800c3fe <sbrk_aligned+0x22>
 800c40c:	1a21      	subs	r1, r4, r0
 800c40e:	4628      	mov	r0, r5
 800c410:	f000 fff0 	bl	800d3f4 <_sbrk_r>
 800c414:	3001      	adds	r0, #1
 800c416:	d1f2      	bne.n	800c3fe <sbrk_aligned+0x22>
 800c418:	e7ef      	b.n	800c3fa <sbrk_aligned+0x1e>
 800c41a:	bf00      	nop
 800c41c:	2000289c 	.word	0x2000289c

0800c420 <_malloc_r>:
 800c420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c424:	1ccd      	adds	r5, r1, #3
 800c426:	f025 0503 	bic.w	r5, r5, #3
 800c42a:	3508      	adds	r5, #8
 800c42c:	2d0c      	cmp	r5, #12
 800c42e:	bf38      	it	cc
 800c430:	250c      	movcc	r5, #12
 800c432:	2d00      	cmp	r5, #0
 800c434:	4606      	mov	r6, r0
 800c436:	db01      	blt.n	800c43c <_malloc_r+0x1c>
 800c438:	42a9      	cmp	r1, r5
 800c43a:	d904      	bls.n	800c446 <_malloc_r+0x26>
 800c43c:	230c      	movs	r3, #12
 800c43e:	6033      	str	r3, [r6, #0]
 800c440:	2000      	movs	r0, #0
 800c442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c51c <_malloc_r+0xfc>
 800c44a:	f000 f869 	bl	800c520 <__malloc_lock>
 800c44e:	f8d8 3000 	ldr.w	r3, [r8]
 800c452:	461c      	mov	r4, r3
 800c454:	bb44      	cbnz	r4, 800c4a8 <_malloc_r+0x88>
 800c456:	4629      	mov	r1, r5
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff ffbf 	bl	800c3dc <sbrk_aligned>
 800c45e:	1c43      	adds	r3, r0, #1
 800c460:	4604      	mov	r4, r0
 800c462:	d158      	bne.n	800c516 <_malloc_r+0xf6>
 800c464:	f8d8 4000 	ldr.w	r4, [r8]
 800c468:	4627      	mov	r7, r4
 800c46a:	2f00      	cmp	r7, #0
 800c46c:	d143      	bne.n	800c4f6 <_malloc_r+0xd6>
 800c46e:	2c00      	cmp	r4, #0
 800c470:	d04b      	beq.n	800c50a <_malloc_r+0xea>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	4639      	mov	r1, r7
 800c476:	4630      	mov	r0, r6
 800c478:	eb04 0903 	add.w	r9, r4, r3
 800c47c:	f000 ffba 	bl	800d3f4 <_sbrk_r>
 800c480:	4581      	cmp	r9, r0
 800c482:	d142      	bne.n	800c50a <_malloc_r+0xea>
 800c484:	6821      	ldr	r1, [r4, #0]
 800c486:	1a6d      	subs	r5, r5, r1
 800c488:	4629      	mov	r1, r5
 800c48a:	4630      	mov	r0, r6
 800c48c:	f7ff ffa6 	bl	800c3dc <sbrk_aligned>
 800c490:	3001      	adds	r0, #1
 800c492:	d03a      	beq.n	800c50a <_malloc_r+0xea>
 800c494:	6823      	ldr	r3, [r4, #0]
 800c496:	442b      	add	r3, r5
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	f8d8 3000 	ldr.w	r3, [r8]
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	bb62      	cbnz	r2, 800c4fc <_malloc_r+0xdc>
 800c4a2:	f8c8 7000 	str.w	r7, [r8]
 800c4a6:	e00f      	b.n	800c4c8 <_malloc_r+0xa8>
 800c4a8:	6822      	ldr	r2, [r4, #0]
 800c4aa:	1b52      	subs	r2, r2, r5
 800c4ac:	d420      	bmi.n	800c4f0 <_malloc_r+0xd0>
 800c4ae:	2a0b      	cmp	r2, #11
 800c4b0:	d917      	bls.n	800c4e2 <_malloc_r+0xc2>
 800c4b2:	1961      	adds	r1, r4, r5
 800c4b4:	42a3      	cmp	r3, r4
 800c4b6:	6025      	str	r5, [r4, #0]
 800c4b8:	bf18      	it	ne
 800c4ba:	6059      	strne	r1, [r3, #4]
 800c4bc:	6863      	ldr	r3, [r4, #4]
 800c4be:	bf08      	it	eq
 800c4c0:	f8c8 1000 	streq.w	r1, [r8]
 800c4c4:	5162      	str	r2, [r4, r5]
 800c4c6:	604b      	str	r3, [r1, #4]
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f000 f82f 	bl	800c52c <__malloc_unlock>
 800c4ce:	f104 000b 	add.w	r0, r4, #11
 800c4d2:	1d23      	adds	r3, r4, #4
 800c4d4:	f020 0007 	bic.w	r0, r0, #7
 800c4d8:	1ac2      	subs	r2, r0, r3
 800c4da:	bf1c      	itt	ne
 800c4dc:	1a1b      	subne	r3, r3, r0
 800c4de:	50a3      	strne	r3, [r4, r2]
 800c4e0:	e7af      	b.n	800c442 <_malloc_r+0x22>
 800c4e2:	6862      	ldr	r2, [r4, #4]
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	bf0c      	ite	eq
 800c4e8:	f8c8 2000 	streq.w	r2, [r8]
 800c4ec:	605a      	strne	r2, [r3, #4]
 800c4ee:	e7eb      	b.n	800c4c8 <_malloc_r+0xa8>
 800c4f0:	4623      	mov	r3, r4
 800c4f2:	6864      	ldr	r4, [r4, #4]
 800c4f4:	e7ae      	b.n	800c454 <_malloc_r+0x34>
 800c4f6:	463c      	mov	r4, r7
 800c4f8:	687f      	ldr	r7, [r7, #4]
 800c4fa:	e7b6      	b.n	800c46a <_malloc_r+0x4a>
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	42a3      	cmp	r3, r4
 800c502:	d1fb      	bne.n	800c4fc <_malloc_r+0xdc>
 800c504:	2300      	movs	r3, #0
 800c506:	6053      	str	r3, [r2, #4]
 800c508:	e7de      	b.n	800c4c8 <_malloc_r+0xa8>
 800c50a:	230c      	movs	r3, #12
 800c50c:	6033      	str	r3, [r6, #0]
 800c50e:	4630      	mov	r0, r6
 800c510:	f000 f80c 	bl	800c52c <__malloc_unlock>
 800c514:	e794      	b.n	800c440 <_malloc_r+0x20>
 800c516:	6005      	str	r5, [r0, #0]
 800c518:	e7d6      	b.n	800c4c8 <_malloc_r+0xa8>
 800c51a:	bf00      	nop
 800c51c:	200028a0 	.word	0x200028a0

0800c520 <__malloc_lock>:
 800c520:	4801      	ldr	r0, [pc, #4]	@ (800c528 <__malloc_lock+0x8>)
 800c522:	f7ff b8ae 	b.w	800b682 <__retarget_lock_acquire_recursive>
 800c526:	bf00      	nop
 800c528:	20002898 	.word	0x20002898

0800c52c <__malloc_unlock>:
 800c52c:	4801      	ldr	r0, [pc, #4]	@ (800c534 <__malloc_unlock+0x8>)
 800c52e:	f7ff b8a9 	b.w	800b684 <__retarget_lock_release_recursive>
 800c532:	bf00      	nop
 800c534:	20002898 	.word	0x20002898

0800c538 <_Balloc>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	69c6      	ldr	r6, [r0, #28]
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	b976      	cbnz	r6, 800c560 <_Balloc+0x28>
 800c542:	2010      	movs	r0, #16
 800c544:	f7ff ff42 	bl	800c3cc <malloc>
 800c548:	4602      	mov	r2, r0
 800c54a:	61e0      	str	r0, [r4, #28]
 800c54c:	b920      	cbnz	r0, 800c558 <_Balloc+0x20>
 800c54e:	4b18      	ldr	r3, [pc, #96]	@ (800c5b0 <_Balloc+0x78>)
 800c550:	4818      	ldr	r0, [pc, #96]	@ (800c5b4 <_Balloc+0x7c>)
 800c552:	216b      	movs	r1, #107	@ 0x6b
 800c554:	f000 ff6c 	bl	800d430 <__assert_func>
 800c558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c55c:	6006      	str	r6, [r0, #0]
 800c55e:	60c6      	str	r6, [r0, #12]
 800c560:	69e6      	ldr	r6, [r4, #28]
 800c562:	68f3      	ldr	r3, [r6, #12]
 800c564:	b183      	cbz	r3, 800c588 <_Balloc+0x50>
 800c566:	69e3      	ldr	r3, [r4, #28]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c56e:	b9b8      	cbnz	r0, 800c5a0 <_Balloc+0x68>
 800c570:	2101      	movs	r1, #1
 800c572:	fa01 f605 	lsl.w	r6, r1, r5
 800c576:	1d72      	adds	r2, r6, #5
 800c578:	0092      	lsls	r2, r2, #2
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 ff76 	bl	800d46c <_calloc_r>
 800c580:	b160      	cbz	r0, 800c59c <_Balloc+0x64>
 800c582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c586:	e00e      	b.n	800c5a6 <_Balloc+0x6e>
 800c588:	2221      	movs	r2, #33	@ 0x21
 800c58a:	2104      	movs	r1, #4
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 ff6d 	bl	800d46c <_calloc_r>
 800c592:	69e3      	ldr	r3, [r4, #28]
 800c594:	60f0      	str	r0, [r6, #12]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1e4      	bne.n	800c566 <_Balloc+0x2e>
 800c59c:	2000      	movs	r0, #0
 800c59e:	bd70      	pop	{r4, r5, r6, pc}
 800c5a0:	6802      	ldr	r2, [r0, #0]
 800c5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5ac:	e7f7      	b.n	800c59e <_Balloc+0x66>
 800c5ae:	bf00      	nop
 800c5b0:	0800e04d 	.word	0x0800e04d
 800c5b4:	0800e0cd 	.word	0x0800e0cd

0800c5b8 <_Bfree>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	69c6      	ldr	r6, [r0, #28]
 800c5bc:	4605      	mov	r5, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	b976      	cbnz	r6, 800c5e0 <_Bfree+0x28>
 800c5c2:	2010      	movs	r0, #16
 800c5c4:	f7ff ff02 	bl	800c3cc <malloc>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	61e8      	str	r0, [r5, #28]
 800c5cc:	b920      	cbnz	r0, 800c5d8 <_Bfree+0x20>
 800c5ce:	4b09      	ldr	r3, [pc, #36]	@ (800c5f4 <_Bfree+0x3c>)
 800c5d0:	4809      	ldr	r0, [pc, #36]	@ (800c5f8 <_Bfree+0x40>)
 800c5d2:	218f      	movs	r1, #143	@ 0x8f
 800c5d4:	f000 ff2c 	bl	800d430 <__assert_func>
 800c5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5dc:	6006      	str	r6, [r0, #0]
 800c5de:	60c6      	str	r6, [r0, #12]
 800c5e0:	b13c      	cbz	r4, 800c5f2 <_Bfree+0x3a>
 800c5e2:	69eb      	ldr	r3, [r5, #28]
 800c5e4:	6862      	ldr	r2, [r4, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5ec:	6021      	str	r1, [r4, #0]
 800c5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	0800e04d 	.word	0x0800e04d
 800c5f8:	0800e0cd 	.word	0x0800e0cd

0800c5fc <__multadd>:
 800c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	690d      	ldr	r5, [r1, #16]
 800c602:	4607      	mov	r7, r0
 800c604:	460c      	mov	r4, r1
 800c606:	461e      	mov	r6, r3
 800c608:	f101 0c14 	add.w	ip, r1, #20
 800c60c:	2000      	movs	r0, #0
 800c60e:	f8dc 3000 	ldr.w	r3, [ip]
 800c612:	b299      	uxth	r1, r3
 800c614:	fb02 6101 	mla	r1, r2, r1, r6
 800c618:	0c1e      	lsrs	r6, r3, #16
 800c61a:	0c0b      	lsrs	r3, r1, #16
 800c61c:	fb02 3306 	mla	r3, r2, r6, r3
 800c620:	b289      	uxth	r1, r1
 800c622:	3001      	adds	r0, #1
 800c624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c628:	4285      	cmp	r5, r0
 800c62a:	f84c 1b04 	str.w	r1, [ip], #4
 800c62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c632:	dcec      	bgt.n	800c60e <__multadd+0x12>
 800c634:	b30e      	cbz	r6, 800c67a <__multadd+0x7e>
 800c636:	68a3      	ldr	r3, [r4, #8]
 800c638:	42ab      	cmp	r3, r5
 800c63a:	dc19      	bgt.n	800c670 <__multadd+0x74>
 800c63c:	6861      	ldr	r1, [r4, #4]
 800c63e:	4638      	mov	r0, r7
 800c640:	3101      	adds	r1, #1
 800c642:	f7ff ff79 	bl	800c538 <_Balloc>
 800c646:	4680      	mov	r8, r0
 800c648:	b928      	cbnz	r0, 800c656 <__multadd+0x5a>
 800c64a:	4602      	mov	r2, r0
 800c64c:	4b0c      	ldr	r3, [pc, #48]	@ (800c680 <__multadd+0x84>)
 800c64e:	480d      	ldr	r0, [pc, #52]	@ (800c684 <__multadd+0x88>)
 800c650:	21ba      	movs	r1, #186	@ 0xba
 800c652:	f000 feed 	bl	800d430 <__assert_func>
 800c656:	6922      	ldr	r2, [r4, #16]
 800c658:	3202      	adds	r2, #2
 800c65a:	f104 010c 	add.w	r1, r4, #12
 800c65e:	0092      	lsls	r2, r2, #2
 800c660:	300c      	adds	r0, #12
 800c662:	f000 fed7 	bl	800d414 <memcpy>
 800c666:	4621      	mov	r1, r4
 800c668:	4638      	mov	r0, r7
 800c66a:	f7ff ffa5 	bl	800c5b8 <_Bfree>
 800c66e:	4644      	mov	r4, r8
 800c670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c674:	3501      	adds	r5, #1
 800c676:	615e      	str	r6, [r3, #20]
 800c678:	6125      	str	r5, [r4, #16]
 800c67a:	4620      	mov	r0, r4
 800c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c680:	0800e0bc 	.word	0x0800e0bc
 800c684:	0800e0cd 	.word	0x0800e0cd

0800c688 <__hi0bits>:
 800c688:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c68c:	4603      	mov	r3, r0
 800c68e:	bf36      	itet	cc
 800c690:	0403      	lslcc	r3, r0, #16
 800c692:	2000      	movcs	r0, #0
 800c694:	2010      	movcc	r0, #16
 800c696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c69a:	bf3c      	itt	cc
 800c69c:	021b      	lslcc	r3, r3, #8
 800c69e:	3008      	addcc	r0, #8
 800c6a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6a4:	bf3c      	itt	cc
 800c6a6:	011b      	lslcc	r3, r3, #4
 800c6a8:	3004      	addcc	r0, #4
 800c6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ae:	bf3c      	itt	cc
 800c6b0:	009b      	lslcc	r3, r3, #2
 800c6b2:	3002      	addcc	r0, #2
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	db05      	blt.n	800c6c4 <__hi0bits+0x3c>
 800c6b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c6bc:	f100 0001 	add.w	r0, r0, #1
 800c6c0:	bf08      	it	eq
 800c6c2:	2020      	moveq	r0, #32
 800c6c4:	4770      	bx	lr

0800c6c6 <__lo0bits>:
 800c6c6:	6803      	ldr	r3, [r0, #0]
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	f013 0007 	ands.w	r0, r3, #7
 800c6ce:	d00b      	beq.n	800c6e8 <__lo0bits+0x22>
 800c6d0:	07d9      	lsls	r1, r3, #31
 800c6d2:	d421      	bmi.n	800c718 <__lo0bits+0x52>
 800c6d4:	0798      	lsls	r0, r3, #30
 800c6d6:	bf49      	itett	mi
 800c6d8:	085b      	lsrmi	r3, r3, #1
 800c6da:	089b      	lsrpl	r3, r3, #2
 800c6dc:	2001      	movmi	r0, #1
 800c6de:	6013      	strmi	r3, [r2, #0]
 800c6e0:	bf5c      	itt	pl
 800c6e2:	6013      	strpl	r3, [r2, #0]
 800c6e4:	2002      	movpl	r0, #2
 800c6e6:	4770      	bx	lr
 800c6e8:	b299      	uxth	r1, r3
 800c6ea:	b909      	cbnz	r1, 800c6f0 <__lo0bits+0x2a>
 800c6ec:	0c1b      	lsrs	r3, r3, #16
 800c6ee:	2010      	movs	r0, #16
 800c6f0:	b2d9      	uxtb	r1, r3
 800c6f2:	b909      	cbnz	r1, 800c6f8 <__lo0bits+0x32>
 800c6f4:	3008      	adds	r0, #8
 800c6f6:	0a1b      	lsrs	r3, r3, #8
 800c6f8:	0719      	lsls	r1, r3, #28
 800c6fa:	bf04      	itt	eq
 800c6fc:	091b      	lsreq	r3, r3, #4
 800c6fe:	3004      	addeq	r0, #4
 800c700:	0799      	lsls	r1, r3, #30
 800c702:	bf04      	itt	eq
 800c704:	089b      	lsreq	r3, r3, #2
 800c706:	3002      	addeq	r0, #2
 800c708:	07d9      	lsls	r1, r3, #31
 800c70a:	d403      	bmi.n	800c714 <__lo0bits+0x4e>
 800c70c:	085b      	lsrs	r3, r3, #1
 800c70e:	f100 0001 	add.w	r0, r0, #1
 800c712:	d003      	beq.n	800c71c <__lo0bits+0x56>
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	4770      	bx	lr
 800c718:	2000      	movs	r0, #0
 800c71a:	4770      	bx	lr
 800c71c:	2020      	movs	r0, #32
 800c71e:	4770      	bx	lr

0800c720 <__i2b>:
 800c720:	b510      	push	{r4, lr}
 800c722:	460c      	mov	r4, r1
 800c724:	2101      	movs	r1, #1
 800c726:	f7ff ff07 	bl	800c538 <_Balloc>
 800c72a:	4602      	mov	r2, r0
 800c72c:	b928      	cbnz	r0, 800c73a <__i2b+0x1a>
 800c72e:	4b05      	ldr	r3, [pc, #20]	@ (800c744 <__i2b+0x24>)
 800c730:	4805      	ldr	r0, [pc, #20]	@ (800c748 <__i2b+0x28>)
 800c732:	f240 1145 	movw	r1, #325	@ 0x145
 800c736:	f000 fe7b 	bl	800d430 <__assert_func>
 800c73a:	2301      	movs	r3, #1
 800c73c:	6144      	str	r4, [r0, #20]
 800c73e:	6103      	str	r3, [r0, #16]
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop
 800c744:	0800e0bc 	.word	0x0800e0bc
 800c748:	0800e0cd 	.word	0x0800e0cd

0800c74c <__multiply>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	4617      	mov	r7, r2
 800c752:	690a      	ldr	r2, [r1, #16]
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	429a      	cmp	r2, r3
 800c758:	bfa8      	it	ge
 800c75a:	463b      	movge	r3, r7
 800c75c:	4689      	mov	r9, r1
 800c75e:	bfa4      	itt	ge
 800c760:	460f      	movge	r7, r1
 800c762:	4699      	movge	r9, r3
 800c764:	693d      	ldr	r5, [r7, #16]
 800c766:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	6879      	ldr	r1, [r7, #4]
 800c76e:	eb05 060a 	add.w	r6, r5, sl
 800c772:	42b3      	cmp	r3, r6
 800c774:	b085      	sub	sp, #20
 800c776:	bfb8      	it	lt
 800c778:	3101      	addlt	r1, #1
 800c77a:	f7ff fedd 	bl	800c538 <_Balloc>
 800c77e:	b930      	cbnz	r0, 800c78e <__multiply+0x42>
 800c780:	4602      	mov	r2, r0
 800c782:	4b41      	ldr	r3, [pc, #260]	@ (800c888 <__multiply+0x13c>)
 800c784:	4841      	ldr	r0, [pc, #260]	@ (800c88c <__multiply+0x140>)
 800c786:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c78a:	f000 fe51 	bl	800d430 <__assert_func>
 800c78e:	f100 0414 	add.w	r4, r0, #20
 800c792:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c796:	4623      	mov	r3, r4
 800c798:	2200      	movs	r2, #0
 800c79a:	4573      	cmp	r3, lr
 800c79c:	d320      	bcc.n	800c7e0 <__multiply+0x94>
 800c79e:	f107 0814 	add.w	r8, r7, #20
 800c7a2:	f109 0114 	add.w	r1, r9, #20
 800c7a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c7aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c7ae:	9302      	str	r3, [sp, #8]
 800c7b0:	1beb      	subs	r3, r5, r7
 800c7b2:	3b15      	subs	r3, #21
 800c7b4:	f023 0303 	bic.w	r3, r3, #3
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	3715      	adds	r7, #21
 800c7bc:	42bd      	cmp	r5, r7
 800c7be:	bf38      	it	cc
 800c7c0:	2304      	movcc	r3, #4
 800c7c2:	9301      	str	r3, [sp, #4]
 800c7c4:	9b02      	ldr	r3, [sp, #8]
 800c7c6:	9103      	str	r1, [sp, #12]
 800c7c8:	428b      	cmp	r3, r1
 800c7ca:	d80c      	bhi.n	800c7e6 <__multiply+0x9a>
 800c7cc:	2e00      	cmp	r6, #0
 800c7ce:	dd03      	ble.n	800c7d8 <__multiply+0x8c>
 800c7d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d055      	beq.n	800c884 <__multiply+0x138>
 800c7d8:	6106      	str	r6, [r0, #16]
 800c7da:	b005      	add	sp, #20
 800c7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e0:	f843 2b04 	str.w	r2, [r3], #4
 800c7e4:	e7d9      	b.n	800c79a <__multiply+0x4e>
 800c7e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c7ea:	f1ba 0f00 	cmp.w	sl, #0
 800c7ee:	d01f      	beq.n	800c830 <__multiply+0xe4>
 800c7f0:	46c4      	mov	ip, r8
 800c7f2:	46a1      	mov	r9, r4
 800c7f4:	2700      	movs	r7, #0
 800c7f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7fa:	f8d9 3000 	ldr.w	r3, [r9]
 800c7fe:	fa1f fb82 	uxth.w	fp, r2
 800c802:	b29b      	uxth	r3, r3
 800c804:	fb0a 330b 	mla	r3, sl, fp, r3
 800c808:	443b      	add	r3, r7
 800c80a:	f8d9 7000 	ldr.w	r7, [r9]
 800c80e:	0c12      	lsrs	r2, r2, #16
 800c810:	0c3f      	lsrs	r7, r7, #16
 800c812:	fb0a 7202 	mla	r2, sl, r2, r7
 800c816:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c820:	4565      	cmp	r5, ip
 800c822:	f849 3b04 	str.w	r3, [r9], #4
 800c826:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c82a:	d8e4      	bhi.n	800c7f6 <__multiply+0xaa>
 800c82c:	9b01      	ldr	r3, [sp, #4]
 800c82e:	50e7      	str	r7, [r4, r3]
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c836:	3104      	adds	r1, #4
 800c838:	f1b9 0f00 	cmp.w	r9, #0
 800c83c:	d020      	beq.n	800c880 <__multiply+0x134>
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	4647      	mov	r7, r8
 800c842:	46a4      	mov	ip, r4
 800c844:	f04f 0a00 	mov.w	sl, #0
 800c848:	f8b7 b000 	ldrh.w	fp, [r7]
 800c84c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c850:	fb09 220b 	mla	r2, r9, fp, r2
 800c854:	4452      	add	r2, sl
 800c856:	b29b      	uxth	r3, r3
 800c858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c85c:	f84c 3b04 	str.w	r3, [ip], #4
 800c860:	f857 3b04 	ldr.w	r3, [r7], #4
 800c864:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c868:	f8bc 3000 	ldrh.w	r3, [ip]
 800c86c:	fb09 330a 	mla	r3, r9, sl, r3
 800c870:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c874:	42bd      	cmp	r5, r7
 800c876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c87a:	d8e5      	bhi.n	800c848 <__multiply+0xfc>
 800c87c:	9a01      	ldr	r2, [sp, #4]
 800c87e:	50a3      	str	r3, [r4, r2]
 800c880:	3404      	adds	r4, #4
 800c882:	e79f      	b.n	800c7c4 <__multiply+0x78>
 800c884:	3e01      	subs	r6, #1
 800c886:	e7a1      	b.n	800c7cc <__multiply+0x80>
 800c888:	0800e0bc 	.word	0x0800e0bc
 800c88c:	0800e0cd 	.word	0x0800e0cd

0800c890 <__pow5mult>:
 800c890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c894:	4615      	mov	r5, r2
 800c896:	f012 0203 	ands.w	r2, r2, #3
 800c89a:	4607      	mov	r7, r0
 800c89c:	460e      	mov	r6, r1
 800c89e:	d007      	beq.n	800c8b0 <__pow5mult+0x20>
 800c8a0:	4c25      	ldr	r4, [pc, #148]	@ (800c938 <__pow5mult+0xa8>)
 800c8a2:	3a01      	subs	r2, #1
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8aa:	f7ff fea7 	bl	800c5fc <__multadd>
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	10ad      	asrs	r5, r5, #2
 800c8b2:	d03d      	beq.n	800c930 <__pow5mult+0xa0>
 800c8b4:	69fc      	ldr	r4, [r7, #28]
 800c8b6:	b97c      	cbnz	r4, 800c8d8 <__pow5mult+0x48>
 800c8b8:	2010      	movs	r0, #16
 800c8ba:	f7ff fd87 	bl	800c3cc <malloc>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	61f8      	str	r0, [r7, #28]
 800c8c2:	b928      	cbnz	r0, 800c8d0 <__pow5mult+0x40>
 800c8c4:	4b1d      	ldr	r3, [pc, #116]	@ (800c93c <__pow5mult+0xac>)
 800c8c6:	481e      	ldr	r0, [pc, #120]	@ (800c940 <__pow5mult+0xb0>)
 800c8c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c8cc:	f000 fdb0 	bl	800d430 <__assert_func>
 800c8d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8d4:	6004      	str	r4, [r0, #0]
 800c8d6:	60c4      	str	r4, [r0, #12]
 800c8d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c8dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8e0:	b94c      	cbnz	r4, 800c8f6 <__pow5mult+0x66>
 800c8e2:	f240 2171 	movw	r1, #625	@ 0x271
 800c8e6:	4638      	mov	r0, r7
 800c8e8:	f7ff ff1a 	bl	800c720 <__i2b>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	6003      	str	r3, [r0, #0]
 800c8f6:	f04f 0900 	mov.w	r9, #0
 800c8fa:	07eb      	lsls	r3, r5, #31
 800c8fc:	d50a      	bpl.n	800c914 <__pow5mult+0x84>
 800c8fe:	4631      	mov	r1, r6
 800c900:	4622      	mov	r2, r4
 800c902:	4638      	mov	r0, r7
 800c904:	f7ff ff22 	bl	800c74c <__multiply>
 800c908:	4631      	mov	r1, r6
 800c90a:	4680      	mov	r8, r0
 800c90c:	4638      	mov	r0, r7
 800c90e:	f7ff fe53 	bl	800c5b8 <_Bfree>
 800c912:	4646      	mov	r6, r8
 800c914:	106d      	asrs	r5, r5, #1
 800c916:	d00b      	beq.n	800c930 <__pow5mult+0xa0>
 800c918:	6820      	ldr	r0, [r4, #0]
 800c91a:	b938      	cbnz	r0, 800c92c <__pow5mult+0x9c>
 800c91c:	4622      	mov	r2, r4
 800c91e:	4621      	mov	r1, r4
 800c920:	4638      	mov	r0, r7
 800c922:	f7ff ff13 	bl	800c74c <__multiply>
 800c926:	6020      	str	r0, [r4, #0]
 800c928:	f8c0 9000 	str.w	r9, [r0]
 800c92c:	4604      	mov	r4, r0
 800c92e:	e7e4      	b.n	800c8fa <__pow5mult+0x6a>
 800c930:	4630      	mov	r0, r6
 800c932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c936:	bf00      	nop
 800c938:	0800e180 	.word	0x0800e180
 800c93c:	0800e04d 	.word	0x0800e04d
 800c940:	0800e0cd 	.word	0x0800e0cd

0800c944 <__lshift>:
 800c944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c948:	460c      	mov	r4, r1
 800c94a:	6849      	ldr	r1, [r1, #4]
 800c94c:	6923      	ldr	r3, [r4, #16]
 800c94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c952:	68a3      	ldr	r3, [r4, #8]
 800c954:	4607      	mov	r7, r0
 800c956:	4691      	mov	r9, r2
 800c958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c95c:	f108 0601 	add.w	r6, r8, #1
 800c960:	42b3      	cmp	r3, r6
 800c962:	db0b      	blt.n	800c97c <__lshift+0x38>
 800c964:	4638      	mov	r0, r7
 800c966:	f7ff fde7 	bl	800c538 <_Balloc>
 800c96a:	4605      	mov	r5, r0
 800c96c:	b948      	cbnz	r0, 800c982 <__lshift+0x3e>
 800c96e:	4602      	mov	r2, r0
 800c970:	4b28      	ldr	r3, [pc, #160]	@ (800ca14 <__lshift+0xd0>)
 800c972:	4829      	ldr	r0, [pc, #164]	@ (800ca18 <__lshift+0xd4>)
 800c974:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c978:	f000 fd5a 	bl	800d430 <__assert_func>
 800c97c:	3101      	adds	r1, #1
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	e7ee      	b.n	800c960 <__lshift+0x1c>
 800c982:	2300      	movs	r3, #0
 800c984:	f100 0114 	add.w	r1, r0, #20
 800c988:	f100 0210 	add.w	r2, r0, #16
 800c98c:	4618      	mov	r0, r3
 800c98e:	4553      	cmp	r3, sl
 800c990:	db33      	blt.n	800c9fa <__lshift+0xb6>
 800c992:	6920      	ldr	r0, [r4, #16]
 800c994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c998:	f104 0314 	add.w	r3, r4, #20
 800c99c:	f019 091f 	ands.w	r9, r9, #31
 800c9a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9a8:	d02b      	beq.n	800ca02 <__lshift+0xbe>
 800c9aa:	f1c9 0e20 	rsb	lr, r9, #32
 800c9ae:	468a      	mov	sl, r1
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	6818      	ldr	r0, [r3, #0]
 800c9b4:	fa00 f009 	lsl.w	r0, r0, r9
 800c9b8:	4310      	orrs	r0, r2
 800c9ba:	f84a 0b04 	str.w	r0, [sl], #4
 800c9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c2:	459c      	cmp	ip, r3
 800c9c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9c8:	d8f3      	bhi.n	800c9b2 <__lshift+0x6e>
 800c9ca:	ebac 0304 	sub.w	r3, ip, r4
 800c9ce:	3b15      	subs	r3, #21
 800c9d0:	f023 0303 	bic.w	r3, r3, #3
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	f104 0015 	add.w	r0, r4, #21
 800c9da:	4560      	cmp	r0, ip
 800c9dc:	bf88      	it	hi
 800c9de:	2304      	movhi	r3, #4
 800c9e0:	50ca      	str	r2, [r1, r3]
 800c9e2:	b10a      	cbz	r2, 800c9e8 <__lshift+0xa4>
 800c9e4:	f108 0602 	add.w	r6, r8, #2
 800c9e8:	3e01      	subs	r6, #1
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	612e      	str	r6, [r5, #16]
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	f7ff fde2 	bl	800c5b8 <_Bfree>
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9fe:	3301      	adds	r3, #1
 800ca00:	e7c5      	b.n	800c98e <__lshift+0x4a>
 800ca02:	3904      	subs	r1, #4
 800ca04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca0c:	459c      	cmp	ip, r3
 800ca0e:	d8f9      	bhi.n	800ca04 <__lshift+0xc0>
 800ca10:	e7ea      	b.n	800c9e8 <__lshift+0xa4>
 800ca12:	bf00      	nop
 800ca14:	0800e0bc 	.word	0x0800e0bc
 800ca18:	0800e0cd 	.word	0x0800e0cd

0800ca1c <__mcmp>:
 800ca1c:	690a      	ldr	r2, [r1, #16]
 800ca1e:	4603      	mov	r3, r0
 800ca20:	6900      	ldr	r0, [r0, #16]
 800ca22:	1a80      	subs	r0, r0, r2
 800ca24:	b530      	push	{r4, r5, lr}
 800ca26:	d10e      	bne.n	800ca46 <__mcmp+0x2a>
 800ca28:	3314      	adds	r3, #20
 800ca2a:	3114      	adds	r1, #20
 800ca2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca3c:	4295      	cmp	r5, r2
 800ca3e:	d003      	beq.n	800ca48 <__mcmp+0x2c>
 800ca40:	d205      	bcs.n	800ca4e <__mcmp+0x32>
 800ca42:	f04f 30ff 	mov.w	r0, #4294967295
 800ca46:	bd30      	pop	{r4, r5, pc}
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	d3f3      	bcc.n	800ca34 <__mcmp+0x18>
 800ca4c:	e7fb      	b.n	800ca46 <__mcmp+0x2a>
 800ca4e:	2001      	movs	r0, #1
 800ca50:	e7f9      	b.n	800ca46 <__mcmp+0x2a>
	...

0800ca54 <__mdiff>:
 800ca54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca58:	4689      	mov	r9, r1
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	4611      	mov	r1, r2
 800ca5e:	4648      	mov	r0, r9
 800ca60:	4614      	mov	r4, r2
 800ca62:	f7ff ffdb 	bl	800ca1c <__mcmp>
 800ca66:	1e05      	subs	r5, r0, #0
 800ca68:	d112      	bne.n	800ca90 <__mdiff+0x3c>
 800ca6a:	4629      	mov	r1, r5
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	f7ff fd63 	bl	800c538 <_Balloc>
 800ca72:	4602      	mov	r2, r0
 800ca74:	b928      	cbnz	r0, 800ca82 <__mdiff+0x2e>
 800ca76:	4b3f      	ldr	r3, [pc, #252]	@ (800cb74 <__mdiff+0x120>)
 800ca78:	f240 2137 	movw	r1, #567	@ 0x237
 800ca7c:	483e      	ldr	r0, [pc, #248]	@ (800cb78 <__mdiff+0x124>)
 800ca7e:	f000 fcd7 	bl	800d430 <__assert_func>
 800ca82:	2301      	movs	r3, #1
 800ca84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca88:	4610      	mov	r0, r2
 800ca8a:	b003      	add	sp, #12
 800ca8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca90:	bfbc      	itt	lt
 800ca92:	464b      	movlt	r3, r9
 800ca94:	46a1      	movlt	r9, r4
 800ca96:	4630      	mov	r0, r6
 800ca98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ca9c:	bfba      	itte	lt
 800ca9e:	461c      	movlt	r4, r3
 800caa0:	2501      	movlt	r5, #1
 800caa2:	2500      	movge	r5, #0
 800caa4:	f7ff fd48 	bl	800c538 <_Balloc>
 800caa8:	4602      	mov	r2, r0
 800caaa:	b918      	cbnz	r0, 800cab4 <__mdiff+0x60>
 800caac:	4b31      	ldr	r3, [pc, #196]	@ (800cb74 <__mdiff+0x120>)
 800caae:	f240 2145 	movw	r1, #581	@ 0x245
 800cab2:	e7e3      	b.n	800ca7c <__mdiff+0x28>
 800cab4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cab8:	6926      	ldr	r6, [r4, #16]
 800caba:	60c5      	str	r5, [r0, #12]
 800cabc:	f109 0310 	add.w	r3, r9, #16
 800cac0:	f109 0514 	add.w	r5, r9, #20
 800cac4:	f104 0e14 	add.w	lr, r4, #20
 800cac8:	f100 0b14 	add.w	fp, r0, #20
 800cacc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cad0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cad4:	9301      	str	r3, [sp, #4]
 800cad6:	46d9      	mov	r9, fp
 800cad8:	f04f 0c00 	mov.w	ip, #0
 800cadc:	9b01      	ldr	r3, [sp, #4]
 800cade:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cae2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cae6:	9301      	str	r3, [sp, #4]
 800cae8:	fa1f f38a 	uxth.w	r3, sl
 800caec:	4619      	mov	r1, r3
 800caee:	b283      	uxth	r3, r0
 800caf0:	1acb      	subs	r3, r1, r3
 800caf2:	0c00      	lsrs	r0, r0, #16
 800caf4:	4463      	add	r3, ip
 800caf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cafa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb04:	4576      	cmp	r6, lr
 800cb06:	f849 3b04 	str.w	r3, [r9], #4
 800cb0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb0e:	d8e5      	bhi.n	800cadc <__mdiff+0x88>
 800cb10:	1b33      	subs	r3, r6, r4
 800cb12:	3b15      	subs	r3, #21
 800cb14:	f023 0303 	bic.w	r3, r3, #3
 800cb18:	3415      	adds	r4, #21
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	42a6      	cmp	r6, r4
 800cb1e:	bf38      	it	cc
 800cb20:	2304      	movcc	r3, #4
 800cb22:	441d      	add	r5, r3
 800cb24:	445b      	add	r3, fp
 800cb26:	461e      	mov	r6, r3
 800cb28:	462c      	mov	r4, r5
 800cb2a:	4544      	cmp	r4, r8
 800cb2c:	d30e      	bcc.n	800cb4c <__mdiff+0xf8>
 800cb2e:	f108 0103 	add.w	r1, r8, #3
 800cb32:	1b49      	subs	r1, r1, r5
 800cb34:	f021 0103 	bic.w	r1, r1, #3
 800cb38:	3d03      	subs	r5, #3
 800cb3a:	45a8      	cmp	r8, r5
 800cb3c:	bf38      	it	cc
 800cb3e:	2100      	movcc	r1, #0
 800cb40:	440b      	add	r3, r1
 800cb42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb46:	b191      	cbz	r1, 800cb6e <__mdiff+0x11a>
 800cb48:	6117      	str	r7, [r2, #16]
 800cb4a:	e79d      	b.n	800ca88 <__mdiff+0x34>
 800cb4c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb50:	46e6      	mov	lr, ip
 800cb52:	0c08      	lsrs	r0, r1, #16
 800cb54:	fa1c fc81 	uxtah	ip, ip, r1
 800cb58:	4471      	add	r1, lr
 800cb5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cb5e:	b289      	uxth	r1, r1
 800cb60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb64:	f846 1b04 	str.w	r1, [r6], #4
 800cb68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb6c:	e7dd      	b.n	800cb2a <__mdiff+0xd6>
 800cb6e:	3f01      	subs	r7, #1
 800cb70:	e7e7      	b.n	800cb42 <__mdiff+0xee>
 800cb72:	bf00      	nop
 800cb74:	0800e0bc 	.word	0x0800e0bc
 800cb78:	0800e0cd 	.word	0x0800e0cd

0800cb7c <__d2b>:
 800cb7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb80:	460f      	mov	r7, r1
 800cb82:	2101      	movs	r1, #1
 800cb84:	ec59 8b10 	vmov	r8, r9, d0
 800cb88:	4616      	mov	r6, r2
 800cb8a:	f7ff fcd5 	bl	800c538 <_Balloc>
 800cb8e:	4604      	mov	r4, r0
 800cb90:	b930      	cbnz	r0, 800cba0 <__d2b+0x24>
 800cb92:	4602      	mov	r2, r0
 800cb94:	4b23      	ldr	r3, [pc, #140]	@ (800cc24 <__d2b+0xa8>)
 800cb96:	4824      	ldr	r0, [pc, #144]	@ (800cc28 <__d2b+0xac>)
 800cb98:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb9c:	f000 fc48 	bl	800d430 <__assert_func>
 800cba0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cba8:	b10d      	cbz	r5, 800cbae <__d2b+0x32>
 800cbaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	f1b8 0300 	subs.w	r3, r8, #0
 800cbb4:	d023      	beq.n	800cbfe <__d2b+0x82>
 800cbb6:	4668      	mov	r0, sp
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	f7ff fd84 	bl	800c6c6 <__lo0bits>
 800cbbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbc2:	b1d0      	cbz	r0, 800cbfa <__d2b+0x7e>
 800cbc4:	f1c0 0320 	rsb	r3, r0, #32
 800cbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbcc:	430b      	orrs	r3, r1
 800cbce:	40c2      	lsrs	r2, r0
 800cbd0:	6163      	str	r3, [r4, #20]
 800cbd2:	9201      	str	r2, [sp, #4]
 800cbd4:	9b01      	ldr	r3, [sp, #4]
 800cbd6:	61a3      	str	r3, [r4, #24]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bf0c      	ite	eq
 800cbdc:	2201      	moveq	r2, #1
 800cbde:	2202      	movne	r2, #2
 800cbe0:	6122      	str	r2, [r4, #16]
 800cbe2:	b1a5      	cbz	r5, 800cc0e <__d2b+0x92>
 800cbe4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbe8:	4405      	add	r5, r0
 800cbea:	603d      	str	r5, [r7, #0]
 800cbec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbf0:	6030      	str	r0, [r6, #0]
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	b003      	add	sp, #12
 800cbf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbfa:	6161      	str	r1, [r4, #20]
 800cbfc:	e7ea      	b.n	800cbd4 <__d2b+0x58>
 800cbfe:	a801      	add	r0, sp, #4
 800cc00:	f7ff fd61 	bl	800c6c6 <__lo0bits>
 800cc04:	9b01      	ldr	r3, [sp, #4]
 800cc06:	6163      	str	r3, [r4, #20]
 800cc08:	3020      	adds	r0, #32
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	e7e8      	b.n	800cbe0 <__d2b+0x64>
 800cc0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc16:	6038      	str	r0, [r7, #0]
 800cc18:	6918      	ldr	r0, [r3, #16]
 800cc1a:	f7ff fd35 	bl	800c688 <__hi0bits>
 800cc1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc22:	e7e5      	b.n	800cbf0 <__d2b+0x74>
 800cc24:	0800e0bc 	.word	0x0800e0bc
 800cc28:	0800e0cd 	.word	0x0800e0cd

0800cc2c <__ssputs_r>:
 800cc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc30:	688e      	ldr	r6, [r1, #8]
 800cc32:	461f      	mov	r7, r3
 800cc34:	42be      	cmp	r6, r7
 800cc36:	680b      	ldr	r3, [r1, #0]
 800cc38:	4682      	mov	sl, r0
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	4690      	mov	r8, r2
 800cc3e:	d82d      	bhi.n	800cc9c <__ssputs_r+0x70>
 800cc40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc48:	d026      	beq.n	800cc98 <__ssputs_r+0x6c>
 800cc4a:	6965      	ldr	r5, [r4, #20]
 800cc4c:	6909      	ldr	r1, [r1, #16]
 800cc4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc52:	eba3 0901 	sub.w	r9, r3, r1
 800cc56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc5a:	1c7b      	adds	r3, r7, #1
 800cc5c:	444b      	add	r3, r9
 800cc5e:	106d      	asrs	r5, r5, #1
 800cc60:	429d      	cmp	r5, r3
 800cc62:	bf38      	it	cc
 800cc64:	461d      	movcc	r5, r3
 800cc66:	0553      	lsls	r3, r2, #21
 800cc68:	d527      	bpl.n	800ccba <__ssputs_r+0x8e>
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	f7ff fbd8 	bl	800c420 <_malloc_r>
 800cc70:	4606      	mov	r6, r0
 800cc72:	b360      	cbz	r0, 800ccce <__ssputs_r+0xa2>
 800cc74:	6921      	ldr	r1, [r4, #16]
 800cc76:	464a      	mov	r2, r9
 800cc78:	f000 fbcc 	bl	800d414 <memcpy>
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	6126      	str	r6, [r4, #16]
 800cc8a:	6165      	str	r5, [r4, #20]
 800cc8c:	444e      	add	r6, r9
 800cc8e:	eba5 0509 	sub.w	r5, r5, r9
 800cc92:	6026      	str	r6, [r4, #0]
 800cc94:	60a5      	str	r5, [r4, #8]
 800cc96:	463e      	mov	r6, r7
 800cc98:	42be      	cmp	r6, r7
 800cc9a:	d900      	bls.n	800cc9e <__ssputs_r+0x72>
 800cc9c:	463e      	mov	r6, r7
 800cc9e:	6820      	ldr	r0, [r4, #0]
 800cca0:	4632      	mov	r2, r6
 800cca2:	4641      	mov	r1, r8
 800cca4:	f000 fb6a 	bl	800d37c <memmove>
 800cca8:	68a3      	ldr	r3, [r4, #8]
 800ccaa:	1b9b      	subs	r3, r3, r6
 800ccac:	60a3      	str	r3, [r4, #8]
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	4433      	add	r3, r6
 800ccb2:	6023      	str	r3, [r4, #0]
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccba:	462a      	mov	r2, r5
 800ccbc:	f000 fbfc 	bl	800d4b8 <_realloc_r>
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d1e0      	bne.n	800cc88 <__ssputs_r+0x5c>
 800ccc6:	6921      	ldr	r1, [r4, #16]
 800ccc8:	4650      	mov	r0, sl
 800ccca:	f7ff fb35 	bl	800c338 <_free_r>
 800ccce:	230c      	movs	r3, #12
 800ccd0:	f8ca 3000 	str.w	r3, [sl]
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccda:	81a3      	strh	r3, [r4, #12]
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	e7e9      	b.n	800ccb6 <__ssputs_r+0x8a>
	...

0800cce4 <_svfiprintf_r>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	4698      	mov	r8, r3
 800ccea:	898b      	ldrh	r3, [r1, #12]
 800ccec:	061b      	lsls	r3, r3, #24
 800ccee:	b09d      	sub	sp, #116	@ 0x74
 800ccf0:	4607      	mov	r7, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	d510      	bpl.n	800cd1a <_svfiprintf_r+0x36>
 800ccf8:	690b      	ldr	r3, [r1, #16]
 800ccfa:	b973      	cbnz	r3, 800cd1a <_svfiprintf_r+0x36>
 800ccfc:	2140      	movs	r1, #64	@ 0x40
 800ccfe:	f7ff fb8f 	bl	800c420 <_malloc_r>
 800cd02:	6028      	str	r0, [r5, #0]
 800cd04:	6128      	str	r0, [r5, #16]
 800cd06:	b930      	cbnz	r0, 800cd16 <_svfiprintf_r+0x32>
 800cd08:	230c      	movs	r3, #12
 800cd0a:	603b      	str	r3, [r7, #0]
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd10:	b01d      	add	sp, #116	@ 0x74
 800cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd16:	2340      	movs	r3, #64	@ 0x40
 800cd18:	616b      	str	r3, [r5, #20]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd1e:	2320      	movs	r3, #32
 800cd20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd24:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd28:	2330      	movs	r3, #48	@ 0x30
 800cd2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cec8 <_svfiprintf_r+0x1e4>
 800cd2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd32:	f04f 0901 	mov.w	r9, #1
 800cd36:	4623      	mov	r3, r4
 800cd38:	469a      	mov	sl, r3
 800cd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd3e:	b10a      	cbz	r2, 800cd44 <_svfiprintf_r+0x60>
 800cd40:	2a25      	cmp	r2, #37	@ 0x25
 800cd42:	d1f9      	bne.n	800cd38 <_svfiprintf_r+0x54>
 800cd44:	ebba 0b04 	subs.w	fp, sl, r4
 800cd48:	d00b      	beq.n	800cd62 <_svfiprintf_r+0x7e>
 800cd4a:	465b      	mov	r3, fp
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	4629      	mov	r1, r5
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff ff6b 	bl	800cc2c <__ssputs_r>
 800cd56:	3001      	adds	r0, #1
 800cd58:	f000 80a7 	beq.w	800ceaa <_svfiprintf_r+0x1c6>
 800cd5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd5e:	445a      	add	r2, fp
 800cd60:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd62:	f89a 3000 	ldrb.w	r3, [sl]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 809f 	beq.w	800ceaa <_svfiprintf_r+0x1c6>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd76:	f10a 0a01 	add.w	sl, sl, #1
 800cd7a:	9304      	str	r3, [sp, #16]
 800cd7c:	9307      	str	r3, [sp, #28]
 800cd7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd82:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd84:	4654      	mov	r4, sl
 800cd86:	2205      	movs	r2, #5
 800cd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd8c:	484e      	ldr	r0, [pc, #312]	@ (800cec8 <_svfiprintf_r+0x1e4>)
 800cd8e:	f7f3 fa57 	bl	8000240 <memchr>
 800cd92:	9a04      	ldr	r2, [sp, #16]
 800cd94:	b9d8      	cbnz	r0, 800cdce <_svfiprintf_r+0xea>
 800cd96:	06d0      	lsls	r0, r2, #27
 800cd98:	bf44      	itt	mi
 800cd9a:	2320      	movmi	r3, #32
 800cd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cda0:	0711      	lsls	r1, r2, #28
 800cda2:	bf44      	itt	mi
 800cda4:	232b      	movmi	r3, #43	@ 0x2b
 800cda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800cdae:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdb0:	d015      	beq.n	800cdde <_svfiprintf_r+0xfa>
 800cdb2:	9a07      	ldr	r2, [sp, #28]
 800cdb4:	4654      	mov	r4, sl
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	f04f 0c0a 	mov.w	ip, #10
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdc2:	3b30      	subs	r3, #48	@ 0x30
 800cdc4:	2b09      	cmp	r3, #9
 800cdc6:	d94b      	bls.n	800ce60 <_svfiprintf_r+0x17c>
 800cdc8:	b1b0      	cbz	r0, 800cdf8 <_svfiprintf_r+0x114>
 800cdca:	9207      	str	r2, [sp, #28]
 800cdcc:	e014      	b.n	800cdf8 <_svfiprintf_r+0x114>
 800cdce:	eba0 0308 	sub.w	r3, r0, r8
 800cdd2:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	9304      	str	r3, [sp, #16]
 800cdda:	46a2      	mov	sl, r4
 800cddc:	e7d2      	b.n	800cd84 <_svfiprintf_r+0xa0>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	1d19      	adds	r1, r3, #4
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	9103      	str	r1, [sp, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	bfbb      	ittet	lt
 800cdea:	425b      	neglt	r3, r3
 800cdec:	f042 0202 	orrlt.w	r2, r2, #2
 800cdf0:	9307      	strge	r3, [sp, #28]
 800cdf2:	9307      	strlt	r3, [sp, #28]
 800cdf4:	bfb8      	it	lt
 800cdf6:	9204      	strlt	r2, [sp, #16]
 800cdf8:	7823      	ldrb	r3, [r4, #0]
 800cdfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdfc:	d10a      	bne.n	800ce14 <_svfiprintf_r+0x130>
 800cdfe:	7863      	ldrb	r3, [r4, #1]
 800ce00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce02:	d132      	bne.n	800ce6a <_svfiprintf_r+0x186>
 800ce04:	9b03      	ldr	r3, [sp, #12]
 800ce06:	1d1a      	adds	r2, r3, #4
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	9203      	str	r2, [sp, #12]
 800ce0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce10:	3402      	adds	r4, #2
 800ce12:	9305      	str	r3, [sp, #20]
 800ce14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ced8 <_svfiprintf_r+0x1f4>
 800ce18:	7821      	ldrb	r1, [r4, #0]
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	4650      	mov	r0, sl
 800ce1e:	f7f3 fa0f 	bl	8000240 <memchr>
 800ce22:	b138      	cbz	r0, 800ce34 <_svfiprintf_r+0x150>
 800ce24:	9b04      	ldr	r3, [sp, #16]
 800ce26:	eba0 000a 	sub.w	r0, r0, sl
 800ce2a:	2240      	movs	r2, #64	@ 0x40
 800ce2c:	4082      	lsls	r2, r0
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	3401      	adds	r4, #1
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce38:	4824      	ldr	r0, [pc, #144]	@ (800cecc <_svfiprintf_r+0x1e8>)
 800ce3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce3e:	2206      	movs	r2, #6
 800ce40:	f7f3 f9fe 	bl	8000240 <memchr>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d036      	beq.n	800ceb6 <_svfiprintf_r+0x1d2>
 800ce48:	4b21      	ldr	r3, [pc, #132]	@ (800ced0 <_svfiprintf_r+0x1ec>)
 800ce4a:	bb1b      	cbnz	r3, 800ce94 <_svfiprintf_r+0x1b0>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	3307      	adds	r3, #7
 800ce50:	f023 0307 	bic.w	r3, r3, #7
 800ce54:	3308      	adds	r3, #8
 800ce56:	9303      	str	r3, [sp, #12]
 800ce58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce5a:	4433      	add	r3, r6
 800ce5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce5e:	e76a      	b.n	800cd36 <_svfiprintf_r+0x52>
 800ce60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce64:	460c      	mov	r4, r1
 800ce66:	2001      	movs	r0, #1
 800ce68:	e7a8      	b.n	800cdbc <_svfiprintf_r+0xd8>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	3401      	adds	r4, #1
 800ce6e:	9305      	str	r3, [sp, #20]
 800ce70:	4619      	mov	r1, r3
 800ce72:	f04f 0c0a 	mov.w	ip, #10
 800ce76:	4620      	mov	r0, r4
 800ce78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce7c:	3a30      	subs	r2, #48	@ 0x30
 800ce7e:	2a09      	cmp	r2, #9
 800ce80:	d903      	bls.n	800ce8a <_svfiprintf_r+0x1a6>
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0c6      	beq.n	800ce14 <_svfiprintf_r+0x130>
 800ce86:	9105      	str	r1, [sp, #20]
 800ce88:	e7c4      	b.n	800ce14 <_svfiprintf_r+0x130>
 800ce8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce8e:	4604      	mov	r4, r0
 800ce90:	2301      	movs	r3, #1
 800ce92:	e7f0      	b.n	800ce76 <_svfiprintf_r+0x192>
 800ce94:	ab03      	add	r3, sp, #12
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4b0e      	ldr	r3, [pc, #56]	@ (800ced4 <_svfiprintf_r+0x1f0>)
 800ce9c:	a904      	add	r1, sp, #16
 800ce9e:	4638      	mov	r0, r7
 800cea0:	f7fd fd48 	bl	800a934 <_printf_float>
 800cea4:	1c42      	adds	r2, r0, #1
 800cea6:	4606      	mov	r6, r0
 800cea8:	d1d6      	bne.n	800ce58 <_svfiprintf_r+0x174>
 800ceaa:	89ab      	ldrh	r3, [r5, #12]
 800ceac:	065b      	lsls	r3, r3, #25
 800ceae:	f53f af2d 	bmi.w	800cd0c <_svfiprintf_r+0x28>
 800ceb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ceb4:	e72c      	b.n	800cd10 <_svfiprintf_r+0x2c>
 800ceb6:	ab03      	add	r3, sp, #12
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	462a      	mov	r2, r5
 800cebc:	4b05      	ldr	r3, [pc, #20]	@ (800ced4 <_svfiprintf_r+0x1f0>)
 800cebe:	a904      	add	r1, sp, #16
 800cec0:	4638      	mov	r0, r7
 800cec2:	f7fd ffcf 	bl	800ae64 <_printf_i>
 800cec6:	e7ed      	b.n	800cea4 <_svfiprintf_r+0x1c0>
 800cec8:	0800e126 	.word	0x0800e126
 800cecc:	0800e130 	.word	0x0800e130
 800ced0:	0800a935 	.word	0x0800a935
 800ced4:	0800cc2d 	.word	0x0800cc2d
 800ced8:	0800e12c 	.word	0x0800e12c

0800cedc <__sfputc_r>:
 800cedc:	6893      	ldr	r3, [r2, #8]
 800cede:	3b01      	subs	r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	b410      	push	{r4}
 800cee4:	6093      	str	r3, [r2, #8]
 800cee6:	da08      	bge.n	800cefa <__sfputc_r+0x1e>
 800cee8:	6994      	ldr	r4, [r2, #24]
 800ceea:	42a3      	cmp	r3, r4
 800ceec:	db01      	blt.n	800cef2 <__sfputc_r+0x16>
 800ceee:	290a      	cmp	r1, #10
 800cef0:	d103      	bne.n	800cefa <__sfputc_r+0x1e>
 800cef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cef6:	f7fe baa0 	b.w	800b43a <__swbuf_r>
 800cefa:	6813      	ldr	r3, [r2, #0]
 800cefc:	1c58      	adds	r0, r3, #1
 800cefe:	6010      	str	r0, [r2, #0]
 800cf00:	7019      	strb	r1, [r3, #0]
 800cf02:	4608      	mov	r0, r1
 800cf04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <__sfputs_r>:
 800cf0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	460f      	mov	r7, r1
 800cf10:	4614      	mov	r4, r2
 800cf12:	18d5      	adds	r5, r2, r3
 800cf14:	42ac      	cmp	r4, r5
 800cf16:	d101      	bne.n	800cf1c <__sfputs_r+0x12>
 800cf18:	2000      	movs	r0, #0
 800cf1a:	e007      	b.n	800cf2c <__sfputs_r+0x22>
 800cf1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf20:	463a      	mov	r2, r7
 800cf22:	4630      	mov	r0, r6
 800cf24:	f7ff ffda 	bl	800cedc <__sfputc_r>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d1f3      	bne.n	800cf14 <__sfputs_r+0xa>
 800cf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf30 <_vfiprintf_r>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	460d      	mov	r5, r1
 800cf36:	b09d      	sub	sp, #116	@ 0x74
 800cf38:	4614      	mov	r4, r2
 800cf3a:	4698      	mov	r8, r3
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	b118      	cbz	r0, 800cf48 <_vfiprintf_r+0x18>
 800cf40:	6a03      	ldr	r3, [r0, #32]
 800cf42:	b90b      	cbnz	r3, 800cf48 <_vfiprintf_r+0x18>
 800cf44:	f7fe f938 	bl	800b1b8 <__sinit>
 800cf48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf4a:	07d9      	lsls	r1, r3, #31
 800cf4c:	d405      	bmi.n	800cf5a <_vfiprintf_r+0x2a>
 800cf4e:	89ab      	ldrh	r3, [r5, #12]
 800cf50:	059a      	lsls	r2, r3, #22
 800cf52:	d402      	bmi.n	800cf5a <_vfiprintf_r+0x2a>
 800cf54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf56:	f7fe fb94 	bl	800b682 <__retarget_lock_acquire_recursive>
 800cf5a:	89ab      	ldrh	r3, [r5, #12]
 800cf5c:	071b      	lsls	r3, r3, #28
 800cf5e:	d501      	bpl.n	800cf64 <_vfiprintf_r+0x34>
 800cf60:	692b      	ldr	r3, [r5, #16]
 800cf62:	b99b      	cbnz	r3, 800cf8c <_vfiprintf_r+0x5c>
 800cf64:	4629      	mov	r1, r5
 800cf66:	4630      	mov	r0, r6
 800cf68:	f7fe faa6 	bl	800b4b8 <__swsetup_r>
 800cf6c:	b170      	cbz	r0, 800cf8c <_vfiprintf_r+0x5c>
 800cf6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf70:	07dc      	lsls	r4, r3, #31
 800cf72:	d504      	bpl.n	800cf7e <_vfiprintf_r+0x4e>
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295
 800cf78:	b01d      	add	sp, #116	@ 0x74
 800cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7e:	89ab      	ldrh	r3, [r5, #12]
 800cf80:	0598      	lsls	r0, r3, #22
 800cf82:	d4f7      	bmi.n	800cf74 <_vfiprintf_r+0x44>
 800cf84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf86:	f7fe fb7d 	bl	800b684 <__retarget_lock_release_recursive>
 800cf8a:	e7f3      	b.n	800cf74 <_vfiprintf_r+0x44>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf90:	2320      	movs	r3, #32
 800cf92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf96:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf9a:	2330      	movs	r3, #48	@ 0x30
 800cf9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d14c <_vfiprintf_r+0x21c>
 800cfa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfa4:	f04f 0901 	mov.w	r9, #1
 800cfa8:	4623      	mov	r3, r4
 800cfaa:	469a      	mov	sl, r3
 800cfac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfb0:	b10a      	cbz	r2, 800cfb6 <_vfiprintf_r+0x86>
 800cfb2:	2a25      	cmp	r2, #37	@ 0x25
 800cfb4:	d1f9      	bne.n	800cfaa <_vfiprintf_r+0x7a>
 800cfb6:	ebba 0b04 	subs.w	fp, sl, r4
 800cfba:	d00b      	beq.n	800cfd4 <_vfiprintf_r+0xa4>
 800cfbc:	465b      	mov	r3, fp
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff ffa1 	bl	800cf0a <__sfputs_r>
 800cfc8:	3001      	adds	r0, #1
 800cfca:	f000 80a7 	beq.w	800d11c <_vfiprintf_r+0x1ec>
 800cfce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfd0:	445a      	add	r2, fp
 800cfd2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 809f 	beq.w	800d11c <_vfiprintf_r+0x1ec>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfe8:	f10a 0a01 	add.w	sl, sl, #1
 800cfec:	9304      	str	r3, [sp, #16]
 800cfee:	9307      	str	r3, [sp, #28]
 800cff0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cff4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cff6:	4654      	mov	r4, sl
 800cff8:	2205      	movs	r2, #5
 800cffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffe:	4853      	ldr	r0, [pc, #332]	@ (800d14c <_vfiprintf_r+0x21c>)
 800d000:	f7f3 f91e 	bl	8000240 <memchr>
 800d004:	9a04      	ldr	r2, [sp, #16]
 800d006:	b9d8      	cbnz	r0, 800d040 <_vfiprintf_r+0x110>
 800d008:	06d1      	lsls	r1, r2, #27
 800d00a:	bf44      	itt	mi
 800d00c:	2320      	movmi	r3, #32
 800d00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d012:	0713      	lsls	r3, r2, #28
 800d014:	bf44      	itt	mi
 800d016:	232b      	movmi	r3, #43	@ 0x2b
 800d018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d01c:	f89a 3000 	ldrb.w	r3, [sl]
 800d020:	2b2a      	cmp	r3, #42	@ 0x2a
 800d022:	d015      	beq.n	800d050 <_vfiprintf_r+0x120>
 800d024:	9a07      	ldr	r2, [sp, #28]
 800d026:	4654      	mov	r4, sl
 800d028:	2000      	movs	r0, #0
 800d02a:	f04f 0c0a 	mov.w	ip, #10
 800d02e:	4621      	mov	r1, r4
 800d030:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d034:	3b30      	subs	r3, #48	@ 0x30
 800d036:	2b09      	cmp	r3, #9
 800d038:	d94b      	bls.n	800d0d2 <_vfiprintf_r+0x1a2>
 800d03a:	b1b0      	cbz	r0, 800d06a <_vfiprintf_r+0x13a>
 800d03c:	9207      	str	r2, [sp, #28]
 800d03e:	e014      	b.n	800d06a <_vfiprintf_r+0x13a>
 800d040:	eba0 0308 	sub.w	r3, r0, r8
 800d044:	fa09 f303 	lsl.w	r3, r9, r3
 800d048:	4313      	orrs	r3, r2
 800d04a:	9304      	str	r3, [sp, #16]
 800d04c:	46a2      	mov	sl, r4
 800d04e:	e7d2      	b.n	800cff6 <_vfiprintf_r+0xc6>
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	1d19      	adds	r1, r3, #4
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	9103      	str	r1, [sp, #12]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bfbb      	ittet	lt
 800d05c:	425b      	neglt	r3, r3
 800d05e:	f042 0202 	orrlt.w	r2, r2, #2
 800d062:	9307      	strge	r3, [sp, #28]
 800d064:	9307      	strlt	r3, [sp, #28]
 800d066:	bfb8      	it	lt
 800d068:	9204      	strlt	r2, [sp, #16]
 800d06a:	7823      	ldrb	r3, [r4, #0]
 800d06c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d06e:	d10a      	bne.n	800d086 <_vfiprintf_r+0x156>
 800d070:	7863      	ldrb	r3, [r4, #1]
 800d072:	2b2a      	cmp	r3, #42	@ 0x2a
 800d074:	d132      	bne.n	800d0dc <_vfiprintf_r+0x1ac>
 800d076:	9b03      	ldr	r3, [sp, #12]
 800d078:	1d1a      	adds	r2, r3, #4
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	9203      	str	r2, [sp, #12]
 800d07e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d082:	3402      	adds	r4, #2
 800d084:	9305      	str	r3, [sp, #20]
 800d086:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d15c <_vfiprintf_r+0x22c>
 800d08a:	7821      	ldrb	r1, [r4, #0]
 800d08c:	2203      	movs	r2, #3
 800d08e:	4650      	mov	r0, sl
 800d090:	f7f3 f8d6 	bl	8000240 <memchr>
 800d094:	b138      	cbz	r0, 800d0a6 <_vfiprintf_r+0x176>
 800d096:	9b04      	ldr	r3, [sp, #16]
 800d098:	eba0 000a 	sub.w	r0, r0, sl
 800d09c:	2240      	movs	r2, #64	@ 0x40
 800d09e:	4082      	lsls	r2, r0
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	3401      	adds	r4, #1
 800d0a4:	9304      	str	r3, [sp, #16]
 800d0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0aa:	4829      	ldr	r0, [pc, #164]	@ (800d150 <_vfiprintf_r+0x220>)
 800d0ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0b0:	2206      	movs	r2, #6
 800d0b2:	f7f3 f8c5 	bl	8000240 <memchr>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d03f      	beq.n	800d13a <_vfiprintf_r+0x20a>
 800d0ba:	4b26      	ldr	r3, [pc, #152]	@ (800d154 <_vfiprintf_r+0x224>)
 800d0bc:	bb1b      	cbnz	r3, 800d106 <_vfiprintf_r+0x1d6>
 800d0be:	9b03      	ldr	r3, [sp, #12]
 800d0c0:	3307      	adds	r3, #7
 800d0c2:	f023 0307 	bic.w	r3, r3, #7
 800d0c6:	3308      	adds	r3, #8
 800d0c8:	9303      	str	r3, [sp, #12]
 800d0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0cc:	443b      	add	r3, r7
 800d0ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0d0:	e76a      	b.n	800cfa8 <_vfiprintf_r+0x78>
 800d0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	2001      	movs	r0, #1
 800d0da:	e7a8      	b.n	800d02e <_vfiprintf_r+0xfe>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	3401      	adds	r4, #1
 800d0e0:	9305      	str	r3, [sp, #20]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	f04f 0c0a 	mov.w	ip, #10
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0ee:	3a30      	subs	r2, #48	@ 0x30
 800d0f0:	2a09      	cmp	r2, #9
 800d0f2:	d903      	bls.n	800d0fc <_vfiprintf_r+0x1cc>
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d0c6      	beq.n	800d086 <_vfiprintf_r+0x156>
 800d0f8:	9105      	str	r1, [sp, #20]
 800d0fa:	e7c4      	b.n	800d086 <_vfiprintf_r+0x156>
 800d0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d100:	4604      	mov	r4, r0
 800d102:	2301      	movs	r3, #1
 800d104:	e7f0      	b.n	800d0e8 <_vfiprintf_r+0x1b8>
 800d106:	ab03      	add	r3, sp, #12
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	462a      	mov	r2, r5
 800d10c:	4b12      	ldr	r3, [pc, #72]	@ (800d158 <_vfiprintf_r+0x228>)
 800d10e:	a904      	add	r1, sp, #16
 800d110:	4630      	mov	r0, r6
 800d112:	f7fd fc0f 	bl	800a934 <_printf_float>
 800d116:	4607      	mov	r7, r0
 800d118:	1c78      	adds	r0, r7, #1
 800d11a:	d1d6      	bne.n	800d0ca <_vfiprintf_r+0x19a>
 800d11c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d11e:	07d9      	lsls	r1, r3, #31
 800d120:	d405      	bmi.n	800d12e <_vfiprintf_r+0x1fe>
 800d122:	89ab      	ldrh	r3, [r5, #12]
 800d124:	059a      	lsls	r2, r3, #22
 800d126:	d402      	bmi.n	800d12e <_vfiprintf_r+0x1fe>
 800d128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d12a:	f7fe faab 	bl	800b684 <__retarget_lock_release_recursive>
 800d12e:	89ab      	ldrh	r3, [r5, #12]
 800d130:	065b      	lsls	r3, r3, #25
 800d132:	f53f af1f 	bmi.w	800cf74 <_vfiprintf_r+0x44>
 800d136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d138:	e71e      	b.n	800cf78 <_vfiprintf_r+0x48>
 800d13a:	ab03      	add	r3, sp, #12
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	462a      	mov	r2, r5
 800d140:	4b05      	ldr	r3, [pc, #20]	@ (800d158 <_vfiprintf_r+0x228>)
 800d142:	a904      	add	r1, sp, #16
 800d144:	4630      	mov	r0, r6
 800d146:	f7fd fe8d 	bl	800ae64 <_printf_i>
 800d14a:	e7e4      	b.n	800d116 <_vfiprintf_r+0x1e6>
 800d14c:	0800e126 	.word	0x0800e126
 800d150:	0800e130 	.word	0x0800e130
 800d154:	0800a935 	.word	0x0800a935
 800d158:	0800cf0b 	.word	0x0800cf0b
 800d15c:	0800e12c 	.word	0x0800e12c

0800d160 <__sflush_r>:
 800d160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d168:	0716      	lsls	r6, r2, #28
 800d16a:	4605      	mov	r5, r0
 800d16c:	460c      	mov	r4, r1
 800d16e:	d454      	bmi.n	800d21a <__sflush_r+0xba>
 800d170:	684b      	ldr	r3, [r1, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	dc02      	bgt.n	800d17c <__sflush_r+0x1c>
 800d176:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dd48      	ble.n	800d20e <__sflush_r+0xae>
 800d17c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d17e:	2e00      	cmp	r6, #0
 800d180:	d045      	beq.n	800d20e <__sflush_r+0xae>
 800d182:	2300      	movs	r3, #0
 800d184:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d188:	682f      	ldr	r7, [r5, #0]
 800d18a:	6a21      	ldr	r1, [r4, #32]
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	d030      	beq.n	800d1f2 <__sflush_r+0x92>
 800d190:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	0759      	lsls	r1, r3, #29
 800d196:	d505      	bpl.n	800d1a4 <__sflush_r+0x44>
 800d198:	6863      	ldr	r3, [r4, #4]
 800d19a:	1ad2      	subs	r2, r2, r3
 800d19c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d19e:	b10b      	cbz	r3, 800d1a4 <__sflush_r+0x44>
 800d1a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1a2:	1ad2      	subs	r2, r2, r3
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1a8:	6a21      	ldr	r1, [r4, #32]
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	47b0      	blx	r6
 800d1ae:	1c43      	adds	r3, r0, #1
 800d1b0:	89a3      	ldrh	r3, [r4, #12]
 800d1b2:	d106      	bne.n	800d1c2 <__sflush_r+0x62>
 800d1b4:	6829      	ldr	r1, [r5, #0]
 800d1b6:	291d      	cmp	r1, #29
 800d1b8:	d82b      	bhi.n	800d212 <__sflush_r+0xb2>
 800d1ba:	4a2a      	ldr	r2, [pc, #168]	@ (800d264 <__sflush_r+0x104>)
 800d1bc:	40ca      	lsrs	r2, r1
 800d1be:	07d6      	lsls	r6, r2, #31
 800d1c0:	d527      	bpl.n	800d212 <__sflush_r+0xb2>
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	6062      	str	r2, [r4, #4]
 800d1c6:	04d9      	lsls	r1, r3, #19
 800d1c8:	6922      	ldr	r2, [r4, #16]
 800d1ca:	6022      	str	r2, [r4, #0]
 800d1cc:	d504      	bpl.n	800d1d8 <__sflush_r+0x78>
 800d1ce:	1c42      	adds	r2, r0, #1
 800d1d0:	d101      	bne.n	800d1d6 <__sflush_r+0x76>
 800d1d2:	682b      	ldr	r3, [r5, #0]
 800d1d4:	b903      	cbnz	r3, 800d1d8 <__sflush_r+0x78>
 800d1d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1da:	602f      	str	r7, [r5, #0]
 800d1dc:	b1b9      	cbz	r1, 800d20e <__sflush_r+0xae>
 800d1de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	d002      	beq.n	800d1ec <__sflush_r+0x8c>
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f7ff f8a6 	bl	800c338 <_free_r>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1f0:	e00d      	b.n	800d20e <__sflush_r+0xae>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b0      	blx	r6
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	1c50      	adds	r0, r2, #1
 800d1fc:	d1c9      	bne.n	800d192 <__sflush_r+0x32>
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d0c6      	beq.n	800d192 <__sflush_r+0x32>
 800d204:	2b1d      	cmp	r3, #29
 800d206:	d001      	beq.n	800d20c <__sflush_r+0xac>
 800d208:	2b16      	cmp	r3, #22
 800d20a:	d11e      	bne.n	800d24a <__sflush_r+0xea>
 800d20c:	602f      	str	r7, [r5, #0]
 800d20e:	2000      	movs	r0, #0
 800d210:	e022      	b.n	800d258 <__sflush_r+0xf8>
 800d212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d216:	b21b      	sxth	r3, r3
 800d218:	e01b      	b.n	800d252 <__sflush_r+0xf2>
 800d21a:	690f      	ldr	r7, [r1, #16]
 800d21c:	2f00      	cmp	r7, #0
 800d21e:	d0f6      	beq.n	800d20e <__sflush_r+0xae>
 800d220:	0793      	lsls	r3, r2, #30
 800d222:	680e      	ldr	r6, [r1, #0]
 800d224:	bf08      	it	eq
 800d226:	694b      	ldreq	r3, [r1, #20]
 800d228:	600f      	str	r7, [r1, #0]
 800d22a:	bf18      	it	ne
 800d22c:	2300      	movne	r3, #0
 800d22e:	eba6 0807 	sub.w	r8, r6, r7
 800d232:	608b      	str	r3, [r1, #8]
 800d234:	f1b8 0f00 	cmp.w	r8, #0
 800d238:	dde9      	ble.n	800d20e <__sflush_r+0xae>
 800d23a:	6a21      	ldr	r1, [r4, #32]
 800d23c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d23e:	4643      	mov	r3, r8
 800d240:	463a      	mov	r2, r7
 800d242:	4628      	mov	r0, r5
 800d244:	47b0      	blx	r6
 800d246:	2800      	cmp	r0, #0
 800d248:	dc08      	bgt.n	800d25c <__sflush_r+0xfc>
 800d24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d252:	81a3      	strh	r3, [r4, #12]
 800d254:	f04f 30ff 	mov.w	r0, #4294967295
 800d258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d25c:	4407      	add	r7, r0
 800d25e:	eba8 0800 	sub.w	r8, r8, r0
 800d262:	e7e7      	b.n	800d234 <__sflush_r+0xd4>
 800d264:	20400001 	.word	0x20400001

0800d268 <_fflush_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	690b      	ldr	r3, [r1, #16]
 800d26c:	4605      	mov	r5, r0
 800d26e:	460c      	mov	r4, r1
 800d270:	b913      	cbnz	r3, 800d278 <_fflush_r+0x10>
 800d272:	2500      	movs	r5, #0
 800d274:	4628      	mov	r0, r5
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	b118      	cbz	r0, 800d282 <_fflush_r+0x1a>
 800d27a:	6a03      	ldr	r3, [r0, #32]
 800d27c:	b90b      	cbnz	r3, 800d282 <_fflush_r+0x1a>
 800d27e:	f7fd ff9b 	bl	800b1b8 <__sinit>
 800d282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d0f3      	beq.n	800d272 <_fflush_r+0xa>
 800d28a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d28c:	07d0      	lsls	r0, r2, #31
 800d28e:	d404      	bmi.n	800d29a <_fflush_r+0x32>
 800d290:	0599      	lsls	r1, r3, #22
 800d292:	d402      	bmi.n	800d29a <_fflush_r+0x32>
 800d294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d296:	f7fe f9f4 	bl	800b682 <__retarget_lock_acquire_recursive>
 800d29a:	4628      	mov	r0, r5
 800d29c:	4621      	mov	r1, r4
 800d29e:	f7ff ff5f 	bl	800d160 <__sflush_r>
 800d2a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2a4:	07da      	lsls	r2, r3, #31
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	d4e4      	bmi.n	800d274 <_fflush_r+0xc>
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	059b      	lsls	r3, r3, #22
 800d2ae:	d4e1      	bmi.n	800d274 <_fflush_r+0xc>
 800d2b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2b2:	f7fe f9e7 	bl	800b684 <__retarget_lock_release_recursive>
 800d2b6:	e7dd      	b.n	800d274 <_fflush_r+0xc>

0800d2b8 <__swhatbuf_r>:
 800d2b8:	b570      	push	{r4, r5, r6, lr}
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c0:	2900      	cmp	r1, #0
 800d2c2:	b096      	sub	sp, #88	@ 0x58
 800d2c4:	4615      	mov	r5, r2
 800d2c6:	461e      	mov	r6, r3
 800d2c8:	da0d      	bge.n	800d2e6 <__swhatbuf_r+0x2e>
 800d2ca:	89a3      	ldrh	r3, [r4, #12]
 800d2cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2d0:	f04f 0100 	mov.w	r1, #0
 800d2d4:	bf14      	ite	ne
 800d2d6:	2340      	movne	r3, #64	@ 0x40
 800d2d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2dc:	2000      	movs	r0, #0
 800d2de:	6031      	str	r1, [r6, #0]
 800d2e0:	602b      	str	r3, [r5, #0]
 800d2e2:	b016      	add	sp, #88	@ 0x58
 800d2e4:	bd70      	pop	{r4, r5, r6, pc}
 800d2e6:	466a      	mov	r2, sp
 800d2e8:	f000 f862 	bl	800d3b0 <_fstat_r>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	dbec      	blt.n	800d2ca <__swhatbuf_r+0x12>
 800d2f0:	9901      	ldr	r1, [sp, #4]
 800d2f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2fa:	4259      	negs	r1, r3
 800d2fc:	4159      	adcs	r1, r3
 800d2fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d302:	e7eb      	b.n	800d2dc <__swhatbuf_r+0x24>

0800d304 <__smakebuf_r>:
 800d304:	898b      	ldrh	r3, [r1, #12]
 800d306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d308:	079d      	lsls	r5, r3, #30
 800d30a:	4606      	mov	r6, r0
 800d30c:	460c      	mov	r4, r1
 800d30e:	d507      	bpl.n	800d320 <__smakebuf_r+0x1c>
 800d310:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	6123      	str	r3, [r4, #16]
 800d318:	2301      	movs	r3, #1
 800d31a:	6163      	str	r3, [r4, #20]
 800d31c:	b003      	add	sp, #12
 800d31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d320:	ab01      	add	r3, sp, #4
 800d322:	466a      	mov	r2, sp
 800d324:	f7ff ffc8 	bl	800d2b8 <__swhatbuf_r>
 800d328:	9f00      	ldr	r7, [sp, #0]
 800d32a:	4605      	mov	r5, r0
 800d32c:	4639      	mov	r1, r7
 800d32e:	4630      	mov	r0, r6
 800d330:	f7ff f876 	bl	800c420 <_malloc_r>
 800d334:	b948      	cbnz	r0, 800d34a <__smakebuf_r+0x46>
 800d336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d33a:	059a      	lsls	r2, r3, #22
 800d33c:	d4ee      	bmi.n	800d31c <__smakebuf_r+0x18>
 800d33e:	f023 0303 	bic.w	r3, r3, #3
 800d342:	f043 0302 	orr.w	r3, r3, #2
 800d346:	81a3      	strh	r3, [r4, #12]
 800d348:	e7e2      	b.n	800d310 <__smakebuf_r+0xc>
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	6020      	str	r0, [r4, #0]
 800d34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d352:	81a3      	strh	r3, [r4, #12]
 800d354:	9b01      	ldr	r3, [sp, #4]
 800d356:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d35a:	b15b      	cbz	r3, 800d374 <__smakebuf_r+0x70>
 800d35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d360:	4630      	mov	r0, r6
 800d362:	f000 f837 	bl	800d3d4 <_isatty_r>
 800d366:	b128      	cbz	r0, 800d374 <__smakebuf_r+0x70>
 800d368:	89a3      	ldrh	r3, [r4, #12]
 800d36a:	f023 0303 	bic.w	r3, r3, #3
 800d36e:	f043 0301 	orr.w	r3, r3, #1
 800d372:	81a3      	strh	r3, [r4, #12]
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	431d      	orrs	r5, r3
 800d378:	81a5      	strh	r5, [r4, #12]
 800d37a:	e7cf      	b.n	800d31c <__smakebuf_r+0x18>

0800d37c <memmove>:
 800d37c:	4288      	cmp	r0, r1
 800d37e:	b510      	push	{r4, lr}
 800d380:	eb01 0402 	add.w	r4, r1, r2
 800d384:	d902      	bls.n	800d38c <memmove+0x10>
 800d386:	4284      	cmp	r4, r0
 800d388:	4623      	mov	r3, r4
 800d38a:	d807      	bhi.n	800d39c <memmove+0x20>
 800d38c:	1e43      	subs	r3, r0, #1
 800d38e:	42a1      	cmp	r1, r4
 800d390:	d008      	beq.n	800d3a4 <memmove+0x28>
 800d392:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d39a:	e7f8      	b.n	800d38e <memmove+0x12>
 800d39c:	4402      	add	r2, r0
 800d39e:	4601      	mov	r1, r0
 800d3a0:	428a      	cmp	r2, r1
 800d3a2:	d100      	bne.n	800d3a6 <memmove+0x2a>
 800d3a4:	bd10      	pop	{r4, pc}
 800d3a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3ae:	e7f7      	b.n	800d3a0 <memmove+0x24>

0800d3b0 <_fstat_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	4d07      	ldr	r5, [pc, #28]	@ (800d3d0 <_fstat_r+0x20>)
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	4608      	mov	r0, r1
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	602b      	str	r3, [r5, #0]
 800d3be:	f7f5 f877 	bl	80024b0 <_fstat>
 800d3c2:	1c43      	adds	r3, r0, #1
 800d3c4:	d102      	bne.n	800d3cc <_fstat_r+0x1c>
 800d3c6:	682b      	ldr	r3, [r5, #0]
 800d3c8:	b103      	cbz	r3, 800d3cc <_fstat_r+0x1c>
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	bd38      	pop	{r3, r4, r5, pc}
 800d3ce:	bf00      	nop
 800d3d0:	20002894 	.word	0x20002894

0800d3d4 <_isatty_r>:
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	4d06      	ldr	r5, [pc, #24]	@ (800d3f0 <_isatty_r+0x1c>)
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4604      	mov	r4, r0
 800d3dc:	4608      	mov	r0, r1
 800d3de:	602b      	str	r3, [r5, #0]
 800d3e0:	f7f5 f876 	bl	80024d0 <_isatty>
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	d102      	bne.n	800d3ee <_isatty_r+0x1a>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	b103      	cbz	r3, 800d3ee <_isatty_r+0x1a>
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	bd38      	pop	{r3, r4, r5, pc}
 800d3f0:	20002894 	.word	0x20002894

0800d3f4 <_sbrk_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4d06      	ldr	r5, [pc, #24]	@ (800d410 <_sbrk_r+0x1c>)
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	602b      	str	r3, [r5, #0]
 800d400:	f7f5 f87e 	bl	8002500 <_sbrk>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_sbrk_r+0x1a>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_sbrk_r+0x1a>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	20002894 	.word	0x20002894

0800d414 <memcpy>:
 800d414:	440a      	add	r2, r1
 800d416:	4291      	cmp	r1, r2
 800d418:	f100 33ff 	add.w	r3, r0, #4294967295
 800d41c:	d100      	bne.n	800d420 <memcpy+0xc>
 800d41e:	4770      	bx	lr
 800d420:	b510      	push	{r4, lr}
 800d422:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d42a:	4291      	cmp	r1, r2
 800d42c:	d1f9      	bne.n	800d422 <memcpy+0xe>
 800d42e:	bd10      	pop	{r4, pc}

0800d430 <__assert_func>:
 800d430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d432:	4614      	mov	r4, r2
 800d434:	461a      	mov	r2, r3
 800d436:	4b09      	ldr	r3, [pc, #36]	@ (800d45c <__assert_func+0x2c>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4605      	mov	r5, r0
 800d43c:	68d8      	ldr	r0, [r3, #12]
 800d43e:	b14c      	cbz	r4, 800d454 <__assert_func+0x24>
 800d440:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <__assert_func+0x30>)
 800d442:	9100      	str	r1, [sp, #0]
 800d444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d448:	4906      	ldr	r1, [pc, #24]	@ (800d464 <__assert_func+0x34>)
 800d44a:	462b      	mov	r3, r5
 800d44c:	f000 f870 	bl	800d530 <fiprintf>
 800d450:	f000 f880 	bl	800d554 <abort>
 800d454:	4b04      	ldr	r3, [pc, #16]	@ (800d468 <__assert_func+0x38>)
 800d456:	461c      	mov	r4, r3
 800d458:	e7f3      	b.n	800d442 <__assert_func+0x12>
 800d45a:	bf00      	nop
 800d45c:	20000030 	.word	0x20000030
 800d460:	0800e141 	.word	0x0800e141
 800d464:	0800e14e 	.word	0x0800e14e
 800d468:	0800e17c 	.word	0x0800e17c

0800d46c <_calloc_r>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	fba1 5402 	umull	r5, r4, r1, r2
 800d472:	b934      	cbnz	r4, 800d482 <_calloc_r+0x16>
 800d474:	4629      	mov	r1, r5
 800d476:	f7fe ffd3 	bl	800c420 <_malloc_r>
 800d47a:	4606      	mov	r6, r0
 800d47c:	b928      	cbnz	r0, 800d48a <_calloc_r+0x1e>
 800d47e:	4630      	mov	r0, r6
 800d480:	bd70      	pop	{r4, r5, r6, pc}
 800d482:	220c      	movs	r2, #12
 800d484:	6002      	str	r2, [r0, #0]
 800d486:	2600      	movs	r6, #0
 800d488:	e7f9      	b.n	800d47e <_calloc_r+0x12>
 800d48a:	462a      	mov	r2, r5
 800d48c:	4621      	mov	r1, r4
 800d48e:	f7fe f869 	bl	800b564 <memset>
 800d492:	e7f4      	b.n	800d47e <_calloc_r+0x12>

0800d494 <__ascii_mbtowc>:
 800d494:	b082      	sub	sp, #8
 800d496:	b901      	cbnz	r1, 800d49a <__ascii_mbtowc+0x6>
 800d498:	a901      	add	r1, sp, #4
 800d49a:	b142      	cbz	r2, 800d4ae <__ascii_mbtowc+0x1a>
 800d49c:	b14b      	cbz	r3, 800d4b2 <__ascii_mbtowc+0x1e>
 800d49e:	7813      	ldrb	r3, [r2, #0]
 800d4a0:	600b      	str	r3, [r1, #0]
 800d4a2:	7812      	ldrb	r2, [r2, #0]
 800d4a4:	1e10      	subs	r0, r2, #0
 800d4a6:	bf18      	it	ne
 800d4a8:	2001      	movne	r0, #1
 800d4aa:	b002      	add	sp, #8
 800d4ac:	4770      	bx	lr
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	e7fb      	b.n	800d4aa <__ascii_mbtowc+0x16>
 800d4b2:	f06f 0001 	mvn.w	r0, #1
 800d4b6:	e7f8      	b.n	800d4aa <__ascii_mbtowc+0x16>

0800d4b8 <_realloc_r>:
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	4607      	mov	r7, r0
 800d4be:	4614      	mov	r4, r2
 800d4c0:	460d      	mov	r5, r1
 800d4c2:	b921      	cbnz	r1, 800d4ce <_realloc_r+0x16>
 800d4c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	f7fe bfa9 	b.w	800c420 <_malloc_r>
 800d4ce:	b92a      	cbnz	r2, 800d4dc <_realloc_r+0x24>
 800d4d0:	f7fe ff32 	bl	800c338 <_free_r>
 800d4d4:	4625      	mov	r5, r4
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4dc:	f000 f841 	bl	800d562 <_malloc_usable_size_r>
 800d4e0:	4284      	cmp	r4, r0
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	d802      	bhi.n	800d4ec <_realloc_r+0x34>
 800d4e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4ea:	d8f4      	bhi.n	800d4d6 <_realloc_r+0x1e>
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	f7fe ff96 	bl	800c420 <_malloc_r>
 800d4f4:	4680      	mov	r8, r0
 800d4f6:	b908      	cbnz	r0, 800d4fc <_realloc_r+0x44>
 800d4f8:	4645      	mov	r5, r8
 800d4fa:	e7ec      	b.n	800d4d6 <_realloc_r+0x1e>
 800d4fc:	42b4      	cmp	r4, r6
 800d4fe:	4622      	mov	r2, r4
 800d500:	4629      	mov	r1, r5
 800d502:	bf28      	it	cs
 800d504:	4632      	movcs	r2, r6
 800d506:	f7ff ff85 	bl	800d414 <memcpy>
 800d50a:	4629      	mov	r1, r5
 800d50c:	4638      	mov	r0, r7
 800d50e:	f7fe ff13 	bl	800c338 <_free_r>
 800d512:	e7f1      	b.n	800d4f8 <_realloc_r+0x40>

0800d514 <__ascii_wctomb>:
 800d514:	4603      	mov	r3, r0
 800d516:	4608      	mov	r0, r1
 800d518:	b141      	cbz	r1, 800d52c <__ascii_wctomb+0x18>
 800d51a:	2aff      	cmp	r2, #255	@ 0xff
 800d51c:	d904      	bls.n	800d528 <__ascii_wctomb+0x14>
 800d51e:	228a      	movs	r2, #138	@ 0x8a
 800d520:	601a      	str	r2, [r3, #0]
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	4770      	bx	lr
 800d528:	700a      	strb	r2, [r1, #0]
 800d52a:	2001      	movs	r0, #1
 800d52c:	4770      	bx	lr
	...

0800d530 <fiprintf>:
 800d530:	b40e      	push	{r1, r2, r3}
 800d532:	b503      	push	{r0, r1, lr}
 800d534:	4601      	mov	r1, r0
 800d536:	ab03      	add	r3, sp, #12
 800d538:	4805      	ldr	r0, [pc, #20]	@ (800d550 <fiprintf+0x20>)
 800d53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d53e:	6800      	ldr	r0, [r0, #0]
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	f7ff fcf5 	bl	800cf30 <_vfiprintf_r>
 800d546:	b002      	add	sp, #8
 800d548:	f85d eb04 	ldr.w	lr, [sp], #4
 800d54c:	b003      	add	sp, #12
 800d54e:	4770      	bx	lr
 800d550:	20000030 	.word	0x20000030

0800d554 <abort>:
 800d554:	b508      	push	{r3, lr}
 800d556:	2006      	movs	r0, #6
 800d558:	f000 f834 	bl	800d5c4 <raise>
 800d55c:	2001      	movs	r0, #1
 800d55e:	f7f4 ff57 	bl	8002410 <_exit>

0800d562 <_malloc_usable_size_r>:
 800d562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d566:	1f18      	subs	r0, r3, #4
 800d568:	2b00      	cmp	r3, #0
 800d56a:	bfbc      	itt	lt
 800d56c:	580b      	ldrlt	r3, [r1, r0]
 800d56e:	18c0      	addlt	r0, r0, r3
 800d570:	4770      	bx	lr

0800d572 <_raise_r>:
 800d572:	291f      	cmp	r1, #31
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4605      	mov	r5, r0
 800d578:	460c      	mov	r4, r1
 800d57a:	d904      	bls.n	800d586 <_raise_r+0x14>
 800d57c:	2316      	movs	r3, #22
 800d57e:	6003      	str	r3, [r0, #0]
 800d580:	f04f 30ff 	mov.w	r0, #4294967295
 800d584:	bd38      	pop	{r3, r4, r5, pc}
 800d586:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d588:	b112      	cbz	r2, 800d590 <_raise_r+0x1e>
 800d58a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d58e:	b94b      	cbnz	r3, 800d5a4 <_raise_r+0x32>
 800d590:	4628      	mov	r0, r5
 800d592:	f000 f831 	bl	800d5f8 <_getpid_r>
 800d596:	4622      	mov	r2, r4
 800d598:	4601      	mov	r1, r0
 800d59a:	4628      	mov	r0, r5
 800d59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5a0:	f000 b818 	b.w	800d5d4 <_kill_r>
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d00a      	beq.n	800d5be <_raise_r+0x4c>
 800d5a8:	1c59      	adds	r1, r3, #1
 800d5aa:	d103      	bne.n	800d5b4 <_raise_r+0x42>
 800d5ac:	2316      	movs	r3, #22
 800d5ae:	6003      	str	r3, [r0, #0]
 800d5b0:	2001      	movs	r0, #1
 800d5b2:	e7e7      	b.n	800d584 <_raise_r+0x12>
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	4798      	blx	r3
 800d5be:	2000      	movs	r0, #0
 800d5c0:	e7e0      	b.n	800d584 <_raise_r+0x12>
	...

0800d5c4 <raise>:
 800d5c4:	4b02      	ldr	r3, [pc, #8]	@ (800d5d0 <raise+0xc>)
 800d5c6:	4601      	mov	r1, r0
 800d5c8:	6818      	ldr	r0, [r3, #0]
 800d5ca:	f7ff bfd2 	b.w	800d572 <_raise_r>
 800d5ce:	bf00      	nop
 800d5d0:	20000030 	.word	0x20000030

0800d5d4 <_kill_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	@ (800d5f4 <_kill_r+0x20>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	4611      	mov	r1, r2
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	f7f4 ff05 	bl	80023f0 <_kill>
 800d5e6:	1c43      	adds	r3, r0, #1
 800d5e8:	d102      	bne.n	800d5f0 <_kill_r+0x1c>
 800d5ea:	682b      	ldr	r3, [r5, #0]
 800d5ec:	b103      	cbz	r3, 800d5f0 <_kill_r+0x1c>
 800d5ee:	6023      	str	r3, [r4, #0]
 800d5f0:	bd38      	pop	{r3, r4, r5, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20002894 	.word	0x20002894

0800d5f8 <_getpid_r>:
 800d5f8:	f7f4 bef2 	b.w	80023e0 <_getpid>

0800d5fc <_init>:
 800d5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fe:	bf00      	nop
 800d600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d602:	bc08      	pop	{r3}
 800d604:	469e      	mov	lr, r3
 800d606:	4770      	bx	lr

0800d608 <_fini>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	bf00      	nop
 800d60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60e:	bc08      	pop	{r3}
 800d610:	469e      	mov	lr, r3
 800d612:	4770      	bx	lr
